
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c848  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800c908  0800c908  0001c908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf94  0800cf94  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf94  0800cf94  0001cf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf9c  0800cf9c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf9c  0800cf9c  0001cf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfa0  0800cfa0  0001cfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  200001e8  0800d18c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f1c  0800d18c  00020f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013754  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002def  00000000  00000000  000339a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00036798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e78  00000000  00000000  000379e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a4f  00000000  00000000  00038860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001492c  00000000  00000000  000502af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e5e0  00000000  00000000  00064bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058cc  00000000  00000000  000f31bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000f8a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c8f0 	.word	0x0800c8f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800c8f0 	.word	0x0800c8f0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 f8b3 	bl	80015bc <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f803 	bl	800146c <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8a5 	bl	80015bc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f89b 	bl	80015bc <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f82b 	bl	80014f0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f821 	bl	80014f0 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f8a4 	bl	8000638 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	46ce      	mov	lr, r9
 8000500:	4699      	mov	r9, r3
 8000502:	0c03      	lsrs	r3, r0, #16
 8000504:	469c      	mov	ip, r3
 8000506:	0413      	lsls	r3, r2, #16
 8000508:	4647      	mov	r7, r8
 800050a:	0c1b      	lsrs	r3, r3, #16
 800050c:	001d      	movs	r5, r3
 800050e:	000e      	movs	r6, r1
 8000510:	4661      	mov	r1, ip
 8000512:	0404      	lsls	r4, r0, #16
 8000514:	0c24      	lsrs	r4, r4, #16
 8000516:	b580      	push	{r7, lr}
 8000518:	0007      	movs	r7, r0
 800051a:	0c10      	lsrs	r0, r2, #16
 800051c:	434b      	muls	r3, r1
 800051e:	4365      	muls	r5, r4
 8000520:	4341      	muls	r1, r0
 8000522:	4360      	muls	r0, r4
 8000524:	0c2c      	lsrs	r4, r5, #16
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	1820      	adds	r0, r4, r0
 800052a:	468c      	mov	ip, r1
 800052c:	4283      	cmp	r3, r0
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x3c>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	4649      	mov	r1, r9
 800053a:	4379      	muls	r1, r7
 800053c:	4356      	muls	r6, r2
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	042d      	lsls	r5, r5, #16
 8000542:	0c2d      	lsrs	r5, r5, #16
 8000544:	1989      	adds	r1, r1, r6
 8000546:	4463      	add	r3, ip
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	1940      	adds	r0, r0, r5
 800054c:	18c9      	adds	r1, r1, r3
 800054e:	bcc0      	pop	{r6, r7}
 8000550:	46b9      	mov	r9, r7
 8000552:	46b0      	mov	r8, r6
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ffa1 	bl	80004a8 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f001 fecd 	bl	800230c <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fb44 	bl	8001c08 <__aeabi_dsub>
 8000580:	f001 fec4 	bl	800230c <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff63 	bl	800046c <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 f853 	bl	8001684 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f001 fef8 	bl	80023d8 <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 f84a 	bl	8001684 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f001 fb06 	bl	8001c08 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f001 feb1 	bl	8002378 <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 f833 	bl	8001684 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f001 fed8 	bl	80023d8 <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 f8d0 	bl	80007d0 <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f001 ff02 	bl	8002460 <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f001 fefd 	bl	8002460 <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	d434      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 800066e:	469b      	mov	fp, r3
 8000670:	4653      	mov	r3, sl
 8000672:	465a      	mov	r2, fp
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83b      	bhi.n	80006fc <__udivmoddi4+0xc4>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e079      	b.n	800077e <__udivmoddi4+0x146>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e076      	b.n	8000784 <__udivmoddi4+0x14c>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e029      	b.n	8000704 <__udivmoddi4+0xcc>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	469b      	mov	fp, r3
 80006dc:	2320      	movs	r3, #32
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	4652      	mov	r2, sl
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	4641      	mov	r1, r8
 80006e6:	0013      	movs	r3, r2
 80006e8:	464a      	mov	r2, r9
 80006ea:	408a      	lsls	r2, r1
 80006ec:	0017      	movs	r7, r2
 80006ee:	4642      	mov	r2, r8
 80006f0:	431f      	orrs	r7, r3
 80006f2:	4653      	mov	r3, sl
 80006f4:	4093      	lsls	r3, r2
 80006f6:	001e      	movs	r6, r3
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d9c3      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2300      	movs	r3, #0
 8000700:	9200      	str	r2, [sp, #0]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	4643      	mov	r3, r8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0d8      	beq.n	80006bc <__udivmoddi4+0x84>
 800070a:	07fb      	lsls	r3, r7, #31
 800070c:	0872      	lsrs	r2, r6, #1
 800070e:	431a      	orrs	r2, r3
 8000710:	4646      	mov	r6, r8
 8000712:	087b      	lsrs	r3, r7, #1
 8000714:	e00e      	b.n	8000734 <__udivmoddi4+0xfc>
 8000716:	42ab      	cmp	r3, r5
 8000718:	d101      	bne.n	800071e <__udivmoddi4+0xe6>
 800071a:	42a2      	cmp	r2, r4
 800071c:	d80c      	bhi.n	8000738 <__udivmoddi4+0x100>
 800071e:	1aa4      	subs	r4, r4, r2
 8000720:	419d      	sbcs	r5, r3
 8000722:	2001      	movs	r0, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2100      	movs	r1, #0
 800072a:	3e01      	subs	r6, #1
 800072c:	1824      	adds	r4, r4, r0
 800072e:	414d      	adcs	r5, r1
 8000730:	2e00      	cmp	r6, #0
 8000732:	d006      	beq.n	8000742 <__udivmoddi4+0x10a>
 8000734:	42ab      	cmp	r3, r5
 8000736:	d9ee      	bls.n	8000716 <__udivmoddi4+0xde>
 8000738:	3e01      	subs	r6, #1
 800073a:	1924      	adds	r4, r4, r4
 800073c:	416d      	adcs	r5, r5
 800073e:	2e00      	cmp	r6, #0
 8000740:	d1f8      	bne.n	8000734 <__udivmoddi4+0xfc>
 8000742:	9800      	ldr	r0, [sp, #0]
 8000744:	9901      	ldr	r1, [sp, #4]
 8000746:	465b      	mov	r3, fp
 8000748:	1900      	adds	r0, r0, r4
 800074a:	4169      	adcs	r1, r5
 800074c:	2b00      	cmp	r3, #0
 800074e:	db24      	blt.n	800079a <__udivmoddi4+0x162>
 8000750:	002b      	movs	r3, r5
 8000752:	465a      	mov	r2, fp
 8000754:	4644      	mov	r4, r8
 8000756:	40d3      	lsrs	r3, r2
 8000758:	002a      	movs	r2, r5
 800075a:	40e2      	lsrs	r2, r4
 800075c:	001c      	movs	r4, r3
 800075e:	465b      	mov	r3, fp
 8000760:	0015      	movs	r5, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	db2a      	blt.n	80007bc <__udivmoddi4+0x184>
 8000766:	0026      	movs	r6, r4
 8000768:	409e      	lsls	r6, r3
 800076a:	0033      	movs	r3, r6
 800076c:	0026      	movs	r6, r4
 800076e:	4647      	mov	r7, r8
 8000770:	40be      	lsls	r6, r7
 8000772:	0032      	movs	r2, r6
 8000774:	1a80      	subs	r0, r0, r2
 8000776:	4199      	sbcs	r1, r3
 8000778:	9000      	str	r0, [sp, #0]
 800077a:	9101      	str	r1, [sp, #4]
 800077c:	e79e      	b.n	80006bc <__udivmoddi4+0x84>
 800077e:	42a3      	cmp	r3, r4
 8000780:	d8bc      	bhi.n	80006fc <__udivmoddi4+0xc4>
 8000782:	e782      	b.n	800068a <__udivmoddi4+0x52>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	2100      	movs	r1, #0
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	9100      	str	r1, [sp, #0]
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	40da      	lsrs	r2, r3
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	e785      	b.n	80006a6 <__udivmoddi4+0x6e>
 800079a:	4642      	mov	r2, r8
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	002a      	movs	r2, r5
 80007a2:	4646      	mov	r6, r8
 80007a4:	409a      	lsls	r2, r3
 80007a6:	0023      	movs	r3, r4
 80007a8:	40f3      	lsrs	r3, r6
 80007aa:	4644      	mov	r4, r8
 80007ac:	4313      	orrs	r3, r2
 80007ae:	002a      	movs	r2, r5
 80007b0:	40e2      	lsrs	r2, r4
 80007b2:	001c      	movs	r4, r3
 80007b4:	465b      	mov	r3, fp
 80007b6:	0015      	movs	r5, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dad4      	bge.n	8000766 <__udivmoddi4+0x12e>
 80007bc:	4642      	mov	r2, r8
 80007be:	002f      	movs	r7, r5
 80007c0:	2320      	movs	r3, #32
 80007c2:	0026      	movs	r6, r4
 80007c4:	4097      	lsls	r7, r2
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	40de      	lsrs	r6, r3
 80007ca:	003b      	movs	r3, r7
 80007cc:	4333      	orrs	r3, r6
 80007ce:	e7cd      	b.n	800076c <__udivmoddi4+0x134>

080007d0 <__aeabi_dadd>:
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d2:	464f      	mov	r7, r9
 80007d4:	4646      	mov	r6, r8
 80007d6:	46d6      	mov	lr, sl
 80007d8:	0004      	movs	r4, r0
 80007da:	b5c0      	push	{r6, r7, lr}
 80007dc:	001f      	movs	r7, r3
 80007de:	030b      	lsls	r3, r1, #12
 80007e0:	0010      	movs	r0, r2
 80007e2:	004e      	lsls	r6, r1, #1
 80007e4:	0a5b      	lsrs	r3, r3, #9
 80007e6:	0fcd      	lsrs	r5, r1, #31
 80007e8:	0f61      	lsrs	r1, r4, #29
 80007ea:	007a      	lsls	r2, r7, #1
 80007ec:	4319      	orrs	r1, r3
 80007ee:	00e3      	lsls	r3, r4, #3
 80007f0:	033c      	lsls	r4, r7, #12
 80007f2:	0fff      	lsrs	r7, r7, #31
 80007f4:	46bc      	mov	ip, r7
 80007f6:	0a64      	lsrs	r4, r4, #9
 80007f8:	0f47      	lsrs	r7, r0, #29
 80007fa:	4327      	orrs	r7, r4
 80007fc:	0d76      	lsrs	r6, r6, #21
 80007fe:	0d52      	lsrs	r2, r2, #21
 8000800:	00c0      	lsls	r0, r0, #3
 8000802:	46b9      	mov	r9, r7
 8000804:	4680      	mov	r8, r0
 8000806:	1ab7      	subs	r7, r6, r2
 8000808:	4565      	cmp	r5, ip
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x3e>
 800080c:	e09b      	b.n	8000946 <__aeabi_dadd+0x176>
 800080e:	2f00      	cmp	r7, #0
 8000810:	dc00      	bgt.n	8000814 <__aeabi_dadd+0x44>
 8000812:	e084      	b.n	800091e <__aeabi_dadd+0x14e>
 8000814:	2a00      	cmp	r2, #0
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x4a>
 8000818:	e0be      	b.n	8000998 <__aeabi_dadd+0x1c8>
 800081a:	4ac8      	ldr	r2, [pc, #800]	; (8000b3c <__aeabi_dadd+0x36c>)
 800081c:	4296      	cmp	r6, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x52>
 8000820:	e124      	b.n	8000a6c <__aeabi_dadd+0x29c>
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	464c      	mov	r4, r9
 8000826:	0412      	lsls	r2, r2, #16
 8000828:	4314      	orrs	r4, r2
 800082a:	46a1      	mov	r9, r4
 800082c:	2f38      	cmp	r7, #56	; 0x38
 800082e:	dd00      	ble.n	8000832 <__aeabi_dadd+0x62>
 8000830:	e167      	b.n	8000b02 <__aeabi_dadd+0x332>
 8000832:	2f1f      	cmp	r7, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x68>
 8000836:	e1d6      	b.n	8000be6 <__aeabi_dadd+0x416>
 8000838:	2220      	movs	r2, #32
 800083a:	464c      	mov	r4, r9
 800083c:	1bd2      	subs	r2, r2, r7
 800083e:	4094      	lsls	r4, r2
 8000840:	46a2      	mov	sl, r4
 8000842:	4644      	mov	r4, r8
 8000844:	40fc      	lsrs	r4, r7
 8000846:	0020      	movs	r0, r4
 8000848:	4654      	mov	r4, sl
 800084a:	4304      	orrs	r4, r0
 800084c:	4640      	mov	r0, r8
 800084e:	4090      	lsls	r0, r2
 8000850:	1e42      	subs	r2, r0, #1
 8000852:	4190      	sbcs	r0, r2
 8000854:	464a      	mov	r2, r9
 8000856:	40fa      	lsrs	r2, r7
 8000858:	4304      	orrs	r4, r0
 800085a:	1a89      	subs	r1, r1, r2
 800085c:	1b1c      	subs	r4, r3, r4
 800085e:	42a3      	cmp	r3, r4
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	1a8b      	subs	r3, r1, r2
 8000866:	469a      	mov	sl, r3
 8000868:	4653      	mov	r3, sl
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	d400      	bmi.n	8000870 <__aeabi_dadd+0xa0>
 800086e:	e0d4      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000870:	4653      	mov	r3, sl
 8000872:	025a      	lsls	r2, r3, #9
 8000874:	0a53      	lsrs	r3, r2, #9
 8000876:	469a      	mov	sl, r3
 8000878:	4653      	mov	r3, sl
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0xb0>
 800087e:	e104      	b.n	8000a8a <__aeabi_dadd+0x2ba>
 8000880:	4650      	mov	r0, sl
 8000882:	f001 fdcf 	bl	8002424 <__clzsi2>
 8000886:	0003      	movs	r3, r0
 8000888:	3b08      	subs	r3, #8
 800088a:	2220      	movs	r2, #32
 800088c:	0020      	movs	r0, r4
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	4651      	mov	r1, sl
 8000892:	40d0      	lsrs	r0, r2
 8000894:	4099      	lsls	r1, r3
 8000896:	0002      	movs	r2, r0
 8000898:	409c      	lsls	r4, r3
 800089a:	430a      	orrs	r2, r1
 800089c:	42b3      	cmp	r3, r6
 800089e:	da00      	bge.n	80008a2 <__aeabi_dadd+0xd2>
 80008a0:	e102      	b.n	8000aa8 <__aeabi_dadd+0x2d8>
 80008a2:	1b9b      	subs	r3, r3, r6
 80008a4:	1c59      	adds	r1, r3, #1
 80008a6:	291f      	cmp	r1, #31
 80008a8:	dd00      	ble.n	80008ac <__aeabi_dadd+0xdc>
 80008aa:	e0a7      	b.n	80009fc <__aeabi_dadd+0x22c>
 80008ac:	2320      	movs	r3, #32
 80008ae:	0010      	movs	r0, r2
 80008b0:	0026      	movs	r6, r4
 80008b2:	1a5b      	subs	r3, r3, r1
 80008b4:	409c      	lsls	r4, r3
 80008b6:	4098      	lsls	r0, r3
 80008b8:	40ce      	lsrs	r6, r1
 80008ba:	40ca      	lsrs	r2, r1
 80008bc:	1e63      	subs	r3, r4, #1
 80008be:	419c      	sbcs	r4, r3
 80008c0:	4330      	orrs	r0, r6
 80008c2:	4692      	mov	sl, r2
 80008c4:	2600      	movs	r6, #0
 80008c6:	4304      	orrs	r4, r0
 80008c8:	0763      	lsls	r3, r4, #29
 80008ca:	d009      	beq.n	80008e0 <__aeabi_dadd+0x110>
 80008cc:	230f      	movs	r3, #15
 80008ce:	4023      	ands	r3, r4
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d005      	beq.n	80008e0 <__aeabi_dadd+0x110>
 80008d4:	1d23      	adds	r3, r4, #4
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	41a4      	sbcs	r4, r4
 80008da:	4264      	negs	r4, r4
 80008dc:	44a2      	add	sl, r4
 80008de:	001c      	movs	r4, r3
 80008e0:	4653      	mov	r3, sl
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_dadd+0x118>
 80008e6:	e09b      	b.n	8000a20 <__aeabi_dadd+0x250>
 80008e8:	4b94      	ldr	r3, [pc, #592]	; (8000b3c <__aeabi_dadd+0x36c>)
 80008ea:	3601      	adds	r6, #1
 80008ec:	429e      	cmp	r6, r3
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x122>
 80008f0:	e0b8      	b.n	8000a64 <__aeabi_dadd+0x294>
 80008f2:	4653      	mov	r3, sl
 80008f4:	4992      	ldr	r1, [pc, #584]	; (8000b40 <__aeabi_dadd+0x370>)
 80008f6:	08e4      	lsrs	r4, r4, #3
 80008f8:	400b      	ands	r3, r1
 80008fa:	0019      	movs	r1, r3
 80008fc:	075b      	lsls	r3, r3, #29
 80008fe:	4323      	orrs	r3, r4
 8000900:	0572      	lsls	r2, r6, #21
 8000902:	024c      	lsls	r4, r1, #9
 8000904:	0b24      	lsrs	r4, r4, #12
 8000906:	0d52      	lsrs	r2, r2, #21
 8000908:	0512      	lsls	r2, r2, #20
 800090a:	07ed      	lsls	r5, r5, #31
 800090c:	4322      	orrs	r2, r4
 800090e:	432a      	orrs	r2, r5
 8000910:	0018      	movs	r0, r3
 8000912:	0011      	movs	r1, r2
 8000914:	bce0      	pop	{r5, r6, r7}
 8000916:	46ba      	mov	sl, r7
 8000918:	46b1      	mov	r9, r6
 800091a:	46a8      	mov	r8, r5
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	2f00      	cmp	r7, #0
 8000920:	d048      	beq.n	80009b4 <__aeabi_dadd+0x1e4>
 8000922:	1b97      	subs	r7, r2, r6
 8000924:	2e00      	cmp	r6, #0
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x15a>
 8000928:	e10e      	b.n	8000b48 <__aeabi_dadd+0x378>
 800092a:	000c      	movs	r4, r1
 800092c:	431c      	orrs	r4, r3
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x162>
 8000930:	e1b7      	b.n	8000ca2 <__aeabi_dadd+0x4d2>
 8000932:	1e7c      	subs	r4, r7, #1
 8000934:	2f01      	cmp	r7, #1
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x16a>
 8000938:	e226      	b.n	8000d88 <__aeabi_dadd+0x5b8>
 800093a:	4d80      	ldr	r5, [pc, #512]	; (8000b3c <__aeabi_dadd+0x36c>)
 800093c:	42af      	cmp	r7, r5
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x172>
 8000940:	e1d5      	b.n	8000cee <__aeabi_dadd+0x51e>
 8000942:	0027      	movs	r7, r4
 8000944:	e107      	b.n	8000b56 <__aeabi_dadd+0x386>
 8000946:	2f00      	cmp	r7, #0
 8000948:	dc00      	bgt.n	800094c <__aeabi_dadd+0x17c>
 800094a:	e0b2      	b.n	8000ab2 <__aeabi_dadd+0x2e2>
 800094c:	2a00      	cmp	r2, #0
 800094e:	d047      	beq.n	80009e0 <__aeabi_dadd+0x210>
 8000950:	4a7a      	ldr	r2, [pc, #488]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000952:	4296      	cmp	r6, r2
 8000954:	d100      	bne.n	8000958 <__aeabi_dadd+0x188>
 8000956:	e089      	b.n	8000a6c <__aeabi_dadd+0x29c>
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	464c      	mov	r4, r9
 800095c:	0412      	lsls	r2, r2, #16
 800095e:	4314      	orrs	r4, r2
 8000960:	46a1      	mov	r9, r4
 8000962:	2f38      	cmp	r7, #56	; 0x38
 8000964:	dc6b      	bgt.n	8000a3e <__aeabi_dadd+0x26e>
 8000966:	2f1f      	cmp	r7, #31
 8000968:	dc00      	bgt.n	800096c <__aeabi_dadd+0x19c>
 800096a:	e16e      	b.n	8000c4a <__aeabi_dadd+0x47a>
 800096c:	003a      	movs	r2, r7
 800096e:	4648      	mov	r0, r9
 8000970:	3a20      	subs	r2, #32
 8000972:	40d0      	lsrs	r0, r2
 8000974:	4684      	mov	ip, r0
 8000976:	2f20      	cmp	r7, #32
 8000978:	d007      	beq.n	800098a <__aeabi_dadd+0x1ba>
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	4648      	mov	r0, r9
 800097e:	1bd2      	subs	r2, r2, r7
 8000980:	4090      	lsls	r0, r2
 8000982:	0002      	movs	r2, r0
 8000984:	4640      	mov	r0, r8
 8000986:	4310      	orrs	r0, r2
 8000988:	4680      	mov	r8, r0
 800098a:	4640      	mov	r0, r8
 800098c:	1e42      	subs	r2, r0, #1
 800098e:	4190      	sbcs	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	0004      	movs	r4, r0
 8000994:	4314      	orrs	r4, r2
 8000996:	e057      	b.n	8000a48 <__aeabi_dadd+0x278>
 8000998:	464a      	mov	r2, r9
 800099a:	4302      	orrs	r2, r0
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x1d0>
 800099e:	e103      	b.n	8000ba8 <__aeabi_dadd+0x3d8>
 80009a0:	1e7a      	subs	r2, r7, #1
 80009a2:	2f01      	cmp	r7, #1
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x1d8>
 80009a6:	e193      	b.n	8000cd0 <__aeabi_dadd+0x500>
 80009a8:	4c64      	ldr	r4, [pc, #400]	; (8000b3c <__aeabi_dadd+0x36c>)
 80009aa:	42a7      	cmp	r7, r4
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x1e0>
 80009ae:	e18a      	b.n	8000cc6 <__aeabi_dadd+0x4f6>
 80009b0:	0017      	movs	r7, r2
 80009b2:	e73b      	b.n	800082c <__aeabi_dadd+0x5c>
 80009b4:	4c63      	ldr	r4, [pc, #396]	; (8000b44 <__aeabi_dadd+0x374>)
 80009b6:	1c72      	adds	r2, r6, #1
 80009b8:	4222      	tst	r2, r4
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x1ee>
 80009bc:	e0e0      	b.n	8000b80 <__aeabi_dadd+0x3b0>
 80009be:	000a      	movs	r2, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_dadd+0x1f8>
 80009c6:	e174      	b.n	8000cb2 <__aeabi_dadd+0x4e2>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x1fe>
 80009cc:	e1d0      	b.n	8000d70 <__aeabi_dadd+0x5a0>
 80009ce:	464a      	mov	r2, r9
 80009d0:	4302      	orrs	r2, r0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x206>
 80009d4:	e1e3      	b.n	8000d9e <__aeabi_dadd+0x5ce>
 80009d6:	074a      	lsls	r2, r1, #29
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	4313      	orrs	r3, r2
 80009dc:	08c9      	lsrs	r1, r1, #3
 80009de:	e029      	b.n	8000a34 <__aeabi_dadd+0x264>
 80009e0:	464a      	mov	r2, r9
 80009e2:	4302      	orrs	r2, r0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x218>
 80009e6:	e17d      	b.n	8000ce4 <__aeabi_dadd+0x514>
 80009e8:	1e7a      	subs	r2, r7, #1
 80009ea:	2f01      	cmp	r7, #1
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x220>
 80009ee:	e0e0      	b.n	8000bb2 <__aeabi_dadd+0x3e2>
 80009f0:	4c52      	ldr	r4, [pc, #328]	; (8000b3c <__aeabi_dadd+0x36c>)
 80009f2:	42a7      	cmp	r7, r4
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x228>
 80009f6:	e166      	b.n	8000cc6 <__aeabi_dadd+0x4f6>
 80009f8:	0017      	movs	r7, r2
 80009fa:	e7b2      	b.n	8000962 <__aeabi_dadd+0x192>
 80009fc:	0010      	movs	r0, r2
 80009fe:	3b1f      	subs	r3, #31
 8000a00:	40d8      	lsrs	r0, r3
 8000a02:	2920      	cmp	r1, #32
 8000a04:	d003      	beq.n	8000a0e <__aeabi_dadd+0x23e>
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	4314      	orrs	r4, r2
 8000a0e:	1e63      	subs	r3, r4, #1
 8000a10:	419c      	sbcs	r4, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	2600      	movs	r6, #0
 8000a16:	469a      	mov	sl, r3
 8000a18:	4304      	orrs	r4, r0
 8000a1a:	0763      	lsls	r3, r4, #29
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x250>
 8000a1e:	e755      	b.n	80008cc <__aeabi_dadd+0xfc>
 8000a20:	4652      	mov	r2, sl
 8000a22:	08e3      	lsrs	r3, r4, #3
 8000a24:	0752      	lsls	r2, r2, #29
 8000a26:	4313      	orrs	r3, r2
 8000a28:	4652      	mov	r2, sl
 8000a2a:	0037      	movs	r7, r6
 8000a2c:	08d1      	lsrs	r1, r2, #3
 8000a2e:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000a30:	4297      	cmp	r7, r2
 8000a32:	d01f      	beq.n	8000a74 <__aeabi_dadd+0x2a4>
 8000a34:	0309      	lsls	r1, r1, #12
 8000a36:	057a      	lsls	r2, r7, #21
 8000a38:	0b0c      	lsrs	r4, r1, #12
 8000a3a:	0d52      	lsrs	r2, r2, #21
 8000a3c:	e764      	b.n	8000908 <__aeabi_dadd+0x138>
 8000a3e:	4642      	mov	r2, r8
 8000a40:	464c      	mov	r4, r9
 8000a42:	4314      	orrs	r4, r2
 8000a44:	1e62      	subs	r2, r4, #1
 8000a46:	4194      	sbcs	r4, r2
 8000a48:	18e4      	adds	r4, r4, r3
 8000a4a:	429c      	cmp	r4, r3
 8000a4c:	4192      	sbcs	r2, r2
 8000a4e:	4252      	negs	r2, r2
 8000a50:	4692      	mov	sl, r2
 8000a52:	448a      	add	sl, r1
 8000a54:	4653      	mov	r3, sl
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	d5df      	bpl.n	8000a1a <__aeabi_dadd+0x24a>
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000a5c:	3601      	adds	r6, #1
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d000      	beq.n	8000a64 <__aeabi_dadd+0x294>
 8000a62:	e0b3      	b.n	8000bcc <__aeabi_dadd+0x3fc>
 8000a64:	0032      	movs	r2, r6
 8000a66:	2400      	movs	r4, #0
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e74d      	b.n	8000908 <__aeabi_dadd+0x138>
 8000a6c:	074a      	lsls	r2, r1, #29
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	001a      	movs	r2, r3
 8000a76:	430a      	orrs	r2, r1
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x2ac>
 8000a7a:	e200      	b.n	8000e7e <__aeabi_dadd+0x6ae>
 8000a7c:	2480      	movs	r4, #128	; 0x80
 8000a7e:	0324      	lsls	r4, r4, #12
 8000a80:	430c      	orrs	r4, r1
 8000a82:	0324      	lsls	r4, r4, #12
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000a86:	0b24      	lsrs	r4, r4, #12
 8000a88:	e73e      	b.n	8000908 <__aeabi_dadd+0x138>
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f001 fcca 	bl	8002424 <__clzsi2>
 8000a90:	0003      	movs	r3, r0
 8000a92:	3318      	adds	r3, #24
 8000a94:	2b1f      	cmp	r3, #31
 8000a96:	dc00      	bgt.n	8000a9a <__aeabi_dadd+0x2ca>
 8000a98:	e6f7      	b.n	800088a <__aeabi_dadd+0xba>
 8000a9a:	0022      	movs	r2, r4
 8000a9c:	3808      	subs	r0, #8
 8000a9e:	4082      	lsls	r2, r0
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	42b3      	cmp	r3, r6
 8000aa4:	db00      	blt.n	8000aa8 <__aeabi_dadd+0x2d8>
 8000aa6:	e6fc      	b.n	80008a2 <__aeabi_dadd+0xd2>
 8000aa8:	1af6      	subs	r6, r6, r3
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <__aeabi_dadd+0x370>)
 8000aac:	401a      	ands	r2, r3
 8000aae:	4692      	mov	sl, r2
 8000ab0:	e70a      	b.n	80008c8 <__aeabi_dadd+0xf8>
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	d02b      	beq.n	8000b0e <__aeabi_dadd+0x33e>
 8000ab6:	1b97      	subs	r7, r2, r6
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x2ee>
 8000abc:	e0b8      	b.n	8000c30 <__aeabi_dadd+0x460>
 8000abe:	4c1f      	ldr	r4, [pc, #124]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000ac0:	42a2      	cmp	r2, r4
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x2f6>
 8000ac4:	e11c      	b.n	8000d00 <__aeabi_dadd+0x530>
 8000ac6:	2480      	movs	r4, #128	; 0x80
 8000ac8:	0424      	lsls	r4, r4, #16
 8000aca:	4321      	orrs	r1, r4
 8000acc:	2f38      	cmp	r7, #56	; 0x38
 8000ace:	dd00      	ble.n	8000ad2 <__aeabi_dadd+0x302>
 8000ad0:	e11e      	b.n	8000d10 <__aeabi_dadd+0x540>
 8000ad2:	2f1f      	cmp	r7, #31
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_dadd+0x308>
 8000ad6:	e19e      	b.n	8000e16 <__aeabi_dadd+0x646>
 8000ad8:	2620      	movs	r6, #32
 8000ada:	000c      	movs	r4, r1
 8000adc:	1bf6      	subs	r6, r6, r7
 8000ade:	0018      	movs	r0, r3
 8000ae0:	40b3      	lsls	r3, r6
 8000ae2:	40b4      	lsls	r4, r6
 8000ae4:	40f8      	lsrs	r0, r7
 8000ae6:	1e5e      	subs	r6, r3, #1
 8000ae8:	41b3      	sbcs	r3, r6
 8000aea:	40f9      	lsrs	r1, r7
 8000aec:	4304      	orrs	r4, r0
 8000aee:	431c      	orrs	r4, r3
 8000af0:	4489      	add	r9, r1
 8000af2:	4444      	add	r4, r8
 8000af4:	4544      	cmp	r4, r8
 8000af6:	419b      	sbcs	r3, r3
 8000af8:	425b      	negs	r3, r3
 8000afa:	444b      	add	r3, r9
 8000afc:	469a      	mov	sl, r3
 8000afe:	0016      	movs	r6, r2
 8000b00:	e7a8      	b.n	8000a54 <__aeabi_dadd+0x284>
 8000b02:	4642      	mov	r2, r8
 8000b04:	464c      	mov	r4, r9
 8000b06:	4314      	orrs	r4, r2
 8000b08:	1e62      	subs	r2, r4, #1
 8000b0a:	4194      	sbcs	r4, r2
 8000b0c:	e6a6      	b.n	800085c <__aeabi_dadd+0x8c>
 8000b0e:	4c0d      	ldr	r4, [pc, #52]	; (8000b44 <__aeabi_dadd+0x374>)
 8000b10:	1c72      	adds	r2, r6, #1
 8000b12:	4222      	tst	r2, r4
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x348>
 8000b16:	e0a8      	b.n	8000c6a <__aeabi_dadd+0x49a>
 8000b18:	000a      	movs	r2, r1
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dadd+0x352>
 8000b20:	e10a      	b.n	8000d38 <__aeabi_dadd+0x568>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x358>
 8000b26:	e15e      	b.n	8000de6 <__aeabi_dadd+0x616>
 8000b28:	464a      	mov	r2, r9
 8000b2a:	4302      	orrs	r2, r0
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_dadd+0x360>
 8000b2e:	e161      	b.n	8000df4 <__aeabi_dadd+0x624>
 8000b30:	074a      	lsls	r2, r1, #29
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	08c9      	lsrs	r1, r1, #3
 8000b38:	e77c      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	000007ff 	.word	0x000007ff
 8000b40:	ff7fffff 	.word	0xff7fffff
 8000b44:	000007fe 	.word	0x000007fe
 8000b48:	4ccf      	ldr	r4, [pc, #828]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000b4a:	42a2      	cmp	r2, r4
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x380>
 8000b4e:	e0ce      	b.n	8000cee <__aeabi_dadd+0x51e>
 8000b50:	2480      	movs	r4, #128	; 0x80
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	4321      	orrs	r1, r4
 8000b56:	2f38      	cmp	r7, #56	; 0x38
 8000b58:	dc5b      	bgt.n	8000c12 <__aeabi_dadd+0x442>
 8000b5a:	2f1f      	cmp	r7, #31
 8000b5c:	dd00      	ble.n	8000b60 <__aeabi_dadd+0x390>
 8000b5e:	e0dc      	b.n	8000d1a <__aeabi_dadd+0x54a>
 8000b60:	2520      	movs	r5, #32
 8000b62:	000c      	movs	r4, r1
 8000b64:	1bed      	subs	r5, r5, r7
 8000b66:	001e      	movs	r6, r3
 8000b68:	40ab      	lsls	r3, r5
 8000b6a:	40ac      	lsls	r4, r5
 8000b6c:	40fe      	lsrs	r6, r7
 8000b6e:	1e5d      	subs	r5, r3, #1
 8000b70:	41ab      	sbcs	r3, r5
 8000b72:	4334      	orrs	r4, r6
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	431c      	orrs	r4, r3
 8000b78:	464b      	mov	r3, r9
 8000b7a:	1a5b      	subs	r3, r3, r1
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	e04c      	b.n	8000c1a <__aeabi_dadd+0x44a>
 8000b80:	464a      	mov	r2, r9
 8000b82:	1a1c      	subs	r4, r3, r0
 8000b84:	1a88      	subs	r0, r1, r2
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	4192      	sbcs	r2, r2
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	4692      	mov	sl, r2
 8000b8e:	0002      	movs	r2, r0
 8000b90:	4650      	mov	r0, sl
 8000b92:	1a12      	subs	r2, r2, r0
 8000b94:	4692      	mov	sl, r2
 8000b96:	0212      	lsls	r2, r2, #8
 8000b98:	d478      	bmi.n	8000c8c <__aeabi_dadd+0x4bc>
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x3d2>
 8000ba0:	e66a      	b.n	8000878 <__aeabi_dadd+0xa8>
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	e745      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000ba8:	074a      	lsls	r2, r1, #29
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	08c9      	lsrs	r1, r1, #3
 8000bb0:	e73d      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000bb2:	181c      	adds	r4, r3, r0
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	419b      	sbcs	r3, r3
 8000bb8:	4449      	add	r1, r9
 8000bba:	468a      	mov	sl, r1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	449a      	add	sl, r3
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	d400      	bmi.n	8000bca <__aeabi_dadd+0x3fa>
 8000bc8:	e727      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000bca:	2602      	movs	r6, #2
 8000bcc:	4652      	mov	r2, sl
 8000bce:	4baf      	ldr	r3, [pc, #700]	; (8000e8c <__aeabi_dadd+0x6bc>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	4021      	ands	r1, r4
 8000bd8:	0862      	lsrs	r2, r4, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	07dc      	lsls	r4, r3, #31
 8000bde:	085b      	lsrs	r3, r3, #1
 8000be0:	469a      	mov	sl, r3
 8000be2:	4314      	orrs	r4, r2
 8000be4:	e670      	b.n	80008c8 <__aeabi_dadd+0xf8>
 8000be6:	003a      	movs	r2, r7
 8000be8:	464c      	mov	r4, r9
 8000bea:	3a20      	subs	r2, #32
 8000bec:	40d4      	lsrs	r4, r2
 8000bee:	46a4      	mov	ip, r4
 8000bf0:	2f20      	cmp	r7, #32
 8000bf2:	d007      	beq.n	8000c04 <__aeabi_dadd+0x434>
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	4648      	mov	r0, r9
 8000bf8:	1bd2      	subs	r2, r2, r7
 8000bfa:	4090      	lsls	r0, r2
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	4640      	mov	r0, r8
 8000c00:	4310      	orrs	r0, r2
 8000c02:	4680      	mov	r8, r0
 8000c04:	4640      	mov	r0, r8
 8000c06:	1e42      	subs	r2, r0, #1
 8000c08:	4190      	sbcs	r0, r2
 8000c0a:	4662      	mov	r2, ip
 8000c0c:	0004      	movs	r4, r0
 8000c0e:	4314      	orrs	r4, r2
 8000c10:	e624      	b.n	800085c <__aeabi_dadd+0x8c>
 8000c12:	4319      	orrs	r1, r3
 8000c14:	000c      	movs	r4, r1
 8000c16:	1e63      	subs	r3, r4, #1
 8000c18:	419c      	sbcs	r4, r3
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	1b1c      	subs	r4, r3, r4
 8000c1e:	45a0      	cmp	r8, r4
 8000c20:	419b      	sbcs	r3, r3
 8000c22:	4649      	mov	r1, r9
 8000c24:	425b      	negs	r3, r3
 8000c26:	1acb      	subs	r3, r1, r3
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	0016      	movs	r6, r2
 8000c2e:	e61b      	b.n	8000868 <__aeabi_dadd+0x98>
 8000c30:	000c      	movs	r4, r1
 8000c32:	431c      	orrs	r4, r3
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dadd+0x468>
 8000c36:	e0c7      	b.n	8000dc8 <__aeabi_dadd+0x5f8>
 8000c38:	1e7c      	subs	r4, r7, #1
 8000c3a:	2f01      	cmp	r7, #1
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x470>
 8000c3e:	e0f9      	b.n	8000e34 <__aeabi_dadd+0x664>
 8000c40:	4e91      	ldr	r6, [pc, #580]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000c42:	42b7      	cmp	r7, r6
 8000c44:	d05c      	beq.n	8000d00 <__aeabi_dadd+0x530>
 8000c46:	0027      	movs	r7, r4
 8000c48:	e740      	b.n	8000acc <__aeabi_dadd+0x2fc>
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4640      	mov	r0, r8
 8000c50:	1bd2      	subs	r2, r2, r7
 8000c52:	4094      	lsls	r4, r2
 8000c54:	40f8      	lsrs	r0, r7
 8000c56:	4304      	orrs	r4, r0
 8000c58:	4640      	mov	r0, r8
 8000c5a:	4090      	lsls	r0, r2
 8000c5c:	1e42      	subs	r2, r0, #1
 8000c5e:	4190      	sbcs	r0, r2
 8000c60:	464a      	mov	r2, r9
 8000c62:	40fa      	lsrs	r2, r7
 8000c64:	4304      	orrs	r4, r0
 8000c66:	1889      	adds	r1, r1, r2
 8000c68:	e6ee      	b.n	8000a48 <__aeabi_dadd+0x278>
 8000c6a:	4c87      	ldr	r4, [pc, #540]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x4a2>
 8000c70:	e6f9      	b.n	8000a66 <__aeabi_dadd+0x296>
 8000c72:	1818      	adds	r0, r3, r0
 8000c74:	4298      	cmp	r0, r3
 8000c76:	419b      	sbcs	r3, r3
 8000c78:	4449      	add	r1, r9
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	18cb      	adds	r3, r1, r3
 8000c7e:	07dc      	lsls	r4, r3, #31
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	469a      	mov	sl, r3
 8000c86:	0016      	movs	r6, r2
 8000c88:	4304      	orrs	r4, r0
 8000c8a:	e6c6      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	1ad4      	subs	r4, r2, r3
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	4180      	sbcs	r0, r0
 8000c94:	464b      	mov	r3, r9
 8000c96:	4240      	negs	r0, r0
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	1a0b      	subs	r3, r1, r0
 8000c9c:	469a      	mov	sl, r3
 8000c9e:	4665      	mov	r5, ip
 8000ca0:	e5ea      	b.n	8000878 <__aeabi_dadd+0xa8>
 8000ca2:	464b      	mov	r3, r9
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	08c0      	lsrs	r0, r0, #3
 8000ca8:	075b      	lsls	r3, r3, #29
 8000caa:	4665      	mov	r5, ip
 8000cac:	4303      	orrs	r3, r0
 8000cae:	08d1      	lsrs	r1, r2, #3
 8000cb0:	e6bd      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_dadd+0x4e8>
 8000cb6:	e08e      	b.n	8000dd6 <__aeabi_dadd+0x606>
 8000cb8:	464b      	mov	r3, r9
 8000cba:	4303      	orrs	r3, r0
 8000cbc:	d117      	bne.n	8000cee <__aeabi_dadd+0x51e>
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	2500      	movs	r5, #0
 8000cc2:	0309      	lsls	r1, r1, #12
 8000cc4:	e6da      	b.n	8000a7c <__aeabi_dadd+0x2ac>
 8000cc6:	074a      	lsls	r2, r1, #29
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	08c9      	lsrs	r1, r1, #3
 8000cce:	e6d1      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000cd0:	1a1c      	subs	r4, r3, r0
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	419b      	sbcs	r3, r3
 8000cd8:	1a89      	subs	r1, r1, r2
 8000cda:	425b      	negs	r3, r3
 8000cdc:	1acb      	subs	r3, r1, r3
 8000cde:	469a      	mov	sl, r3
 8000ce0:	2601      	movs	r6, #1
 8000ce2:	e5c1      	b.n	8000868 <__aeabi_dadd+0x98>
 8000ce4:	074a      	lsls	r2, r1, #29
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	08c9      	lsrs	r1, r1, #3
 8000cec:	e69f      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000cee:	4643      	mov	r3, r8
 8000cf0:	08d8      	lsrs	r0, r3, #3
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	075b      	lsls	r3, r3, #29
 8000cf8:	4665      	mov	r5, ip
 8000cfa:	4303      	orrs	r3, r0
 8000cfc:	08d1      	lsrs	r1, r2, #3
 8000cfe:	e6b9      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000d00:	4643      	mov	r3, r8
 8000d02:	08d8      	lsrs	r0, r3, #3
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	075b      	lsls	r3, r3, #29
 8000d0a:	4303      	orrs	r3, r0
 8000d0c:	08d1      	lsrs	r1, r2, #3
 8000d0e:	e6b1      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000d10:	4319      	orrs	r1, r3
 8000d12:	000c      	movs	r4, r1
 8000d14:	1e63      	subs	r3, r4, #1
 8000d16:	419c      	sbcs	r4, r3
 8000d18:	e6eb      	b.n	8000af2 <__aeabi_dadd+0x322>
 8000d1a:	003c      	movs	r4, r7
 8000d1c:	000d      	movs	r5, r1
 8000d1e:	3c20      	subs	r4, #32
 8000d20:	40e5      	lsrs	r5, r4
 8000d22:	2f20      	cmp	r7, #32
 8000d24:	d003      	beq.n	8000d2e <__aeabi_dadd+0x55e>
 8000d26:	2440      	movs	r4, #64	; 0x40
 8000d28:	1be4      	subs	r4, r4, r7
 8000d2a:	40a1      	lsls	r1, r4
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	001c      	movs	r4, r3
 8000d30:	1e63      	subs	r3, r4, #1
 8000d32:	419c      	sbcs	r4, r3
 8000d34:	432c      	orrs	r4, r5
 8000d36:	e770      	b.n	8000c1a <__aeabi_dadd+0x44a>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d0e1      	beq.n	8000d00 <__aeabi_dadd+0x530>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	d0c1      	beq.n	8000cc6 <__aeabi_dadd+0x4f6>
 8000d42:	074a      	lsls	r2, r1, #29
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	08c9      	lsrs	r1, r1, #3
 8000d4c:	0312      	lsls	r2, r2, #12
 8000d4e:	4211      	tst	r1, r2
 8000d50:	d008      	beq.n	8000d64 <__aeabi_dadd+0x594>
 8000d52:	4648      	mov	r0, r9
 8000d54:	08c4      	lsrs	r4, r0, #3
 8000d56:	4214      	tst	r4, r2
 8000d58:	d104      	bne.n	8000d64 <__aeabi_dadd+0x594>
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	0021      	movs	r1, r4
 8000d5e:	08db      	lsrs	r3, r3, #3
 8000d60:	0742      	lsls	r2, r0, #29
 8000d62:	4313      	orrs	r3, r2
 8000d64:	0f5a      	lsrs	r2, r3, #29
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	0752      	lsls	r2, r2, #29
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	e681      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000d70:	464b      	mov	r3, r9
 8000d72:	4303      	orrs	r3, r0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x5a8>
 8000d76:	e714      	b.n	8000ba2 <__aeabi_dadd+0x3d2>
 8000d78:	464b      	mov	r3, r9
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	08c0      	lsrs	r0, r0, #3
 8000d7e:	075b      	lsls	r3, r3, #29
 8000d80:	4665      	mov	r5, ip
 8000d82:	4303      	orrs	r3, r0
 8000d84:	08d1      	lsrs	r1, r2, #3
 8000d86:	e655      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000d88:	1ac4      	subs	r4, r0, r3
 8000d8a:	45a0      	cmp	r8, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	464b      	mov	r3, r9
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a59      	subs	r1, r3, r1
 8000d94:	1a0b      	subs	r3, r1, r0
 8000d96:	469a      	mov	sl, r3
 8000d98:	4665      	mov	r5, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	e564      	b.n	8000868 <__aeabi_dadd+0x98>
 8000d9e:	1a1c      	subs	r4, r3, r0
 8000da0:	464a      	mov	r2, r9
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	1a8a      	subs	r2, r1, r2
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a12      	subs	r2, r2, r0
 8000dac:	4692      	mov	sl, r2
 8000dae:	0212      	lsls	r2, r2, #8
 8000db0:	d549      	bpl.n	8000e46 <__aeabi_dadd+0x676>
 8000db2:	4642      	mov	r2, r8
 8000db4:	1ad4      	subs	r4, r2, r3
 8000db6:	45a0      	cmp	r8, r4
 8000db8:	4180      	sbcs	r0, r0
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4240      	negs	r0, r0
 8000dbe:	1a59      	subs	r1, r3, r1
 8000dc0:	1a0b      	subs	r3, r1, r0
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	4665      	mov	r5, ip
 8000dc6:	e57f      	b.n	80008c8 <__aeabi_dadd+0xf8>
 8000dc8:	464b      	mov	r3, r9
 8000dca:	464a      	mov	r2, r9
 8000dcc:	08c0      	lsrs	r0, r0, #3
 8000dce:	075b      	lsls	r3, r3, #29
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	08d1      	lsrs	r1, r2, #3
 8000dd4:	e62b      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	4302      	orrs	r2, r0
 8000ddc:	d138      	bne.n	8000e50 <__aeabi_dadd+0x680>
 8000dde:	074a      	lsls	r2, r1, #29
 8000de0:	4313      	orrs	r3, r2
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	e646      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000de6:	464b      	mov	r3, r9
 8000de8:	464a      	mov	r2, r9
 8000dea:	08c0      	lsrs	r0, r0, #3
 8000dec:	075b      	lsls	r3, r3, #29
 8000dee:	4303      	orrs	r3, r0
 8000df0:	08d1      	lsrs	r1, r2, #3
 8000df2:	e61f      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000df4:	181c      	adds	r4, r3, r0
 8000df6:	429c      	cmp	r4, r3
 8000df8:	419b      	sbcs	r3, r3
 8000dfa:	4449      	add	r1, r9
 8000dfc:	468a      	mov	sl, r1
 8000dfe:	425b      	negs	r3, r3
 8000e00:	449a      	add	sl, r3
 8000e02:	4653      	mov	r3, sl
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_dadd+0x63a>
 8000e08:	e607      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000e0a:	4652      	mov	r2, sl
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <__aeabi_dadd+0x6bc>)
 8000e0e:	2601      	movs	r6, #1
 8000e10:	401a      	ands	r2, r3
 8000e12:	4692      	mov	sl, r2
 8000e14:	e601      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000e16:	003c      	movs	r4, r7
 8000e18:	000e      	movs	r6, r1
 8000e1a:	3c20      	subs	r4, #32
 8000e1c:	40e6      	lsrs	r6, r4
 8000e1e:	2f20      	cmp	r7, #32
 8000e20:	d003      	beq.n	8000e2a <__aeabi_dadd+0x65a>
 8000e22:	2440      	movs	r4, #64	; 0x40
 8000e24:	1be4      	subs	r4, r4, r7
 8000e26:	40a1      	lsls	r1, r4
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	001c      	movs	r4, r3
 8000e2c:	1e63      	subs	r3, r4, #1
 8000e2e:	419c      	sbcs	r4, r3
 8000e30:	4334      	orrs	r4, r6
 8000e32:	e65e      	b.n	8000af2 <__aeabi_dadd+0x322>
 8000e34:	4443      	add	r3, r8
 8000e36:	4283      	cmp	r3, r0
 8000e38:	4180      	sbcs	r0, r0
 8000e3a:	4449      	add	r1, r9
 8000e3c:	468a      	mov	sl, r1
 8000e3e:	4240      	negs	r0, r0
 8000e40:	001c      	movs	r4, r3
 8000e42:	4482      	add	sl, r0
 8000e44:	e6bc      	b.n	8000bc0 <__aeabi_dadd+0x3f0>
 8000e46:	4653      	mov	r3, sl
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x67e>
 8000e4c:	e6a9      	b.n	8000ba2 <__aeabi_dadd+0x3d2>
 8000e4e:	e5e4      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000e50:	074a      	lsls	r2, r1, #29
 8000e52:	4313      	orrs	r3, r2
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	08c9      	lsrs	r1, r1, #3
 8000e58:	0312      	lsls	r2, r2, #12
 8000e5a:	4211      	tst	r1, r2
 8000e5c:	d009      	beq.n	8000e72 <__aeabi_dadd+0x6a2>
 8000e5e:	4648      	mov	r0, r9
 8000e60:	08c4      	lsrs	r4, r0, #3
 8000e62:	4214      	tst	r4, r2
 8000e64:	d105      	bne.n	8000e72 <__aeabi_dadd+0x6a2>
 8000e66:	4643      	mov	r3, r8
 8000e68:	4665      	mov	r5, ip
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	0742      	lsls	r2, r0, #29
 8000e70:	4313      	orrs	r3, r2
 8000e72:	0f5a      	lsrs	r2, r3, #29
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	0752      	lsls	r2, r2, #29
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	e5fa      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	4a01      	ldr	r2, [pc, #4]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000e82:	001c      	movs	r4, r3
 8000e84:	e540      	b.n	8000908 <__aeabi_dadd+0x138>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	000007ff 	.word	0x000007ff
 8000e8c:	ff7fffff 	.word	0xff7fffff

08000e90 <__aeabi_ddiv>:
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	4657      	mov	r7, sl
 8000e94:	464e      	mov	r6, r9
 8000e96:	4645      	mov	r5, r8
 8000e98:	46de      	mov	lr, fp
 8000e9a:	b5e0      	push	{r5, r6, r7, lr}
 8000e9c:	030c      	lsls	r4, r1, #12
 8000e9e:	001f      	movs	r7, r3
 8000ea0:	004b      	lsls	r3, r1, #1
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	4692      	mov	sl, r2
 8000ea6:	0005      	movs	r5, r0
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	0b24      	lsrs	r4, r4, #12
 8000eac:	0d5b      	lsrs	r3, r3, #21
 8000eae:	0fce      	lsrs	r6, r1, #31
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_ddiv+0x26>
 8000eb4:	e152      	b.n	800115c <__aeabi_ddiv+0x2cc>
 8000eb6:	4ad2      	ldr	r2, [pc, #840]	; (8001200 <__aeabi_ddiv+0x370>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0x2e>
 8000ebc:	e16e      	b.n	800119c <__aeabi_ddiv+0x30c>
 8000ebe:	0f42      	lsrs	r2, r0, #29
 8000ec0:	00e4      	lsls	r4, r4, #3
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	0412      	lsls	r2, r2, #16
 8000ec8:	4322      	orrs	r2, r4
 8000eca:	4690      	mov	r8, r2
 8000ecc:	4acd      	ldr	r2, [pc, #820]	; (8001204 <__aeabi_ddiv+0x374>)
 8000ece:	00c5      	lsls	r5, r0, #3
 8000ed0:	4693      	mov	fp, r2
 8000ed2:	449b      	add	fp, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	033c      	lsls	r4, r7, #12
 8000edc:	007b      	lsls	r3, r7, #1
 8000ede:	4650      	mov	r0, sl
 8000ee0:	0b24      	lsrs	r4, r4, #12
 8000ee2:	0d5b      	lsrs	r3, r3, #21
 8000ee4:	0fff      	lsrs	r7, r7, #31
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d100      	bne.n	8000eec <__aeabi_ddiv+0x5c>
 8000eea:	e11a      	b.n	8001122 <__aeabi_ddiv+0x292>
 8000eec:	4ac4      	ldr	r2, [pc, #784]	; (8001200 <__aeabi_ddiv+0x370>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_ddiv+0x64>
 8000ef2:	e15e      	b.n	80011b2 <__aeabi_ddiv+0x322>
 8000ef4:	0f42      	lsrs	r2, r0, #29
 8000ef6:	00e4      	lsls	r4, r4, #3
 8000ef8:	4322      	orrs	r2, r4
 8000efa:	2480      	movs	r4, #128	; 0x80
 8000efc:	0424      	lsls	r4, r4, #16
 8000efe:	4314      	orrs	r4, r2
 8000f00:	4ac0      	ldr	r2, [pc, #768]	; (8001204 <__aeabi_ddiv+0x374>)
 8000f02:	00c1      	lsls	r1, r0, #3
 8000f04:	4694      	mov	ip, r2
 8000f06:	465a      	mov	r2, fp
 8000f08:	4463      	add	r3, ip
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	2000      	movs	r0, #0
 8000f10:	0033      	movs	r3, r6
 8000f12:	407b      	eors	r3, r7
 8000f14:	469a      	mov	sl, r3
 8000f16:	464b      	mov	r3, r9
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d827      	bhi.n	8000f6c <__aeabi_ddiv+0xdc>
 8000f1c:	4aba      	ldr	r2, [pc, #744]	; (8001208 <__aeabi_ddiv+0x378>)
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	58d3      	ldr	r3, [r2, r3]
 8000f22:	469f      	mov	pc, r3
 8000f24:	46b2      	mov	sl, r6
 8000f26:	9b00      	ldr	r3, [sp, #0]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d016      	beq.n	8000f5a <__aeabi_ddiv+0xca>
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_ddiv+0xa2>
 8000f30:	e287      	b.n	8001442 <__aeabi_ddiv+0x5b2>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d000      	beq.n	8000f38 <__aeabi_ddiv+0xa8>
 8000f36:	e0d5      	b.n	80010e4 <__aeabi_ddiv+0x254>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	051b      	lsls	r3, r3, #20
 8000f40:	4313      	orrs	r3, r2
 8000f42:	4652      	mov	r2, sl
 8000f44:	07d2      	lsls	r2, r2, #31
 8000f46:	4313      	orrs	r3, r2
 8000f48:	0028      	movs	r0, r5
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	b005      	add	sp, #20
 8000f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f50:	46bb      	mov	fp, r7
 8000f52:	46b2      	mov	sl, r6
 8000f54:	46a9      	mov	r9, r5
 8000f56:	46a0      	mov	r8, r4
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4ba8      	ldr	r3, [pc, #672]	; (8001200 <__aeabi_ddiv+0x370>)
 8000f60:	e7ed      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8000f62:	46ba      	mov	sl, r7
 8000f64:	46a0      	mov	r8, r4
 8000f66:	000d      	movs	r5, r1
 8000f68:	9000      	str	r0, [sp, #0]
 8000f6a:	e7dc      	b.n	8000f26 <__aeabi_ddiv+0x96>
 8000f6c:	4544      	cmp	r4, r8
 8000f6e:	d200      	bcs.n	8000f72 <__aeabi_ddiv+0xe2>
 8000f70:	e1c4      	b.n	80012fc <__aeabi_ddiv+0x46c>
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0xe6>
 8000f74:	e1bf      	b.n	80012f6 <__aeabi_ddiv+0x466>
 8000f76:	2301      	movs	r3, #1
 8000f78:	425b      	negs	r3, r3
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	002e      	movs	r6, r5
 8000f7e:	4640      	mov	r0, r8
 8000f80:	2500      	movs	r5, #0
 8000f82:	44e3      	add	fp, ip
 8000f84:	0223      	lsls	r3, r4, #8
 8000f86:	0e0c      	lsrs	r4, r1, #24
 8000f88:	431c      	orrs	r4, r3
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	0423      	lsls	r3, r4, #16
 8000f90:	020a      	lsls	r2, r1, #8
 8000f92:	0c1f      	lsrs	r7, r3, #16
 8000f94:	4649      	mov	r1, r9
 8000f96:	9200      	str	r2, [sp, #0]
 8000f98:	9701      	str	r7, [sp, #4]
 8000f9a:	f7ff f961 	bl	8000260 <__aeabi_uidivmod>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	437a      	muls	r2, r7
 8000fa2:	040b      	lsls	r3, r1, #16
 8000fa4:	0c31      	lsrs	r1, r6, #16
 8000fa6:	4680      	mov	r8, r0
 8000fa8:	4319      	orrs	r1, r3
 8000faa:	428a      	cmp	r2, r1
 8000fac:	d907      	bls.n	8000fbe <__aeabi_ddiv+0x12e>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	469c      	mov	ip, r3
 8000fb4:	1909      	adds	r1, r1, r4
 8000fb6:	44e0      	add	r8, ip
 8000fb8:	428c      	cmp	r4, r1
 8000fba:	d800      	bhi.n	8000fbe <__aeabi_ddiv+0x12e>
 8000fbc:	e201      	b.n	80013c2 <__aeabi_ddiv+0x532>
 8000fbe:	1a88      	subs	r0, r1, r2
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	f7ff f94d 	bl	8000260 <__aeabi_uidivmod>
 8000fc6:	9a01      	ldr	r2, [sp, #4]
 8000fc8:	0436      	lsls	r6, r6, #16
 8000fca:	4342      	muls	r2, r0
 8000fcc:	0409      	lsls	r1, r1, #16
 8000fce:	0c36      	lsrs	r6, r6, #16
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	430e      	orrs	r6, r1
 8000fd4:	42b2      	cmp	r2, r6
 8000fd6:	d904      	bls.n	8000fe2 <__aeabi_ddiv+0x152>
 8000fd8:	1936      	adds	r6, r6, r4
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	42b4      	cmp	r4, r6
 8000fde:	d800      	bhi.n	8000fe2 <__aeabi_ddiv+0x152>
 8000fe0:	e1e9      	b.n	80013b6 <__aeabi_ddiv+0x526>
 8000fe2:	1ab0      	subs	r0, r6, r2
 8000fe4:	4642      	mov	r2, r8
 8000fe6:	9e00      	ldr	r6, [sp, #0]
 8000fe8:	0412      	lsls	r2, r2, #16
 8000fea:	431a      	orrs	r2, r3
 8000fec:	0c33      	lsrs	r3, r6, #16
 8000fee:	001f      	movs	r7, r3
 8000ff0:	0c11      	lsrs	r1, r2, #16
 8000ff2:	4690      	mov	r8, r2
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	0413      	lsls	r3, r2, #16
 8000ff8:	0432      	lsls	r2, r6, #16
 8000ffa:	0c16      	lsrs	r6, r2, #16
 8000ffc:	0032      	movs	r2, r6
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	435a      	muls	r2, r3
 8001002:	9603      	str	r6, [sp, #12]
 8001004:	437b      	muls	r3, r7
 8001006:	434e      	muls	r6, r1
 8001008:	4379      	muls	r1, r7
 800100a:	0c17      	lsrs	r7, r2, #16
 800100c:	46bc      	mov	ip, r7
 800100e:	199b      	adds	r3, r3, r6
 8001010:	4463      	add	r3, ip
 8001012:	429e      	cmp	r6, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x18e>
 8001016:	2680      	movs	r6, #128	; 0x80
 8001018:	0276      	lsls	r6, r6, #9
 800101a:	46b4      	mov	ip, r6
 800101c:	4461      	add	r1, ip
 800101e:	0c1e      	lsrs	r6, r3, #16
 8001020:	1871      	adds	r1, r6, r1
 8001022:	0416      	lsls	r6, r2, #16
 8001024:	041b      	lsls	r3, r3, #16
 8001026:	0c36      	lsrs	r6, r6, #16
 8001028:	199e      	adds	r6, r3, r6
 800102a:	4288      	cmp	r0, r1
 800102c:	d302      	bcc.n	8001034 <__aeabi_ddiv+0x1a4>
 800102e:	d112      	bne.n	8001056 <__aeabi_ddiv+0x1c6>
 8001030:	42b5      	cmp	r5, r6
 8001032:	d210      	bcs.n	8001056 <__aeabi_ddiv+0x1c6>
 8001034:	4643      	mov	r3, r8
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	9b00      	ldr	r3, [sp, #0]
 800103a:	469c      	mov	ip, r3
 800103c:	4465      	add	r5, ip
 800103e:	001f      	movs	r7, r3
 8001040:	429d      	cmp	r5, r3
 8001042:	419b      	sbcs	r3, r3
 8001044:	425b      	negs	r3, r3
 8001046:	191b      	adds	r3, r3, r4
 8001048:	18c0      	adds	r0, r0, r3
 800104a:	4284      	cmp	r4, r0
 800104c:	d200      	bcs.n	8001050 <__aeabi_ddiv+0x1c0>
 800104e:	e19e      	b.n	800138e <__aeabi_ddiv+0x4fe>
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1c4>
 8001052:	e199      	b.n	8001388 <__aeabi_ddiv+0x4f8>
 8001054:	4690      	mov	r8, r2
 8001056:	1bae      	subs	r6, r5, r6
 8001058:	42b5      	cmp	r5, r6
 800105a:	41ad      	sbcs	r5, r5
 800105c:	1a40      	subs	r0, r0, r1
 800105e:	426d      	negs	r5, r5
 8001060:	1b40      	subs	r0, r0, r5
 8001062:	4284      	cmp	r4, r0
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x1d8>
 8001066:	e1d2      	b.n	800140e <__aeabi_ddiv+0x57e>
 8001068:	4649      	mov	r1, r9
 800106a:	f7ff f8f9 	bl	8000260 <__aeabi_uidivmod>
 800106e:	9a01      	ldr	r2, [sp, #4]
 8001070:	040b      	lsls	r3, r1, #16
 8001072:	4342      	muls	r2, r0
 8001074:	0c31      	lsrs	r1, r6, #16
 8001076:	0005      	movs	r5, r0
 8001078:	4319      	orrs	r1, r3
 800107a:	428a      	cmp	r2, r1
 800107c:	d900      	bls.n	8001080 <__aeabi_ddiv+0x1f0>
 800107e:	e16c      	b.n	800135a <__aeabi_ddiv+0x4ca>
 8001080:	1a88      	subs	r0, r1, r2
 8001082:	4649      	mov	r1, r9
 8001084:	f7ff f8ec 	bl	8000260 <__aeabi_uidivmod>
 8001088:	9a01      	ldr	r2, [sp, #4]
 800108a:	0436      	lsls	r6, r6, #16
 800108c:	4342      	muls	r2, r0
 800108e:	0409      	lsls	r1, r1, #16
 8001090:	0c36      	lsrs	r6, r6, #16
 8001092:	0003      	movs	r3, r0
 8001094:	430e      	orrs	r6, r1
 8001096:	42b2      	cmp	r2, r6
 8001098:	d900      	bls.n	800109c <__aeabi_ddiv+0x20c>
 800109a:	e153      	b.n	8001344 <__aeabi_ddiv+0x4b4>
 800109c:	9803      	ldr	r0, [sp, #12]
 800109e:	1ab6      	subs	r6, r6, r2
 80010a0:	0002      	movs	r2, r0
 80010a2:	042d      	lsls	r5, r5, #16
 80010a4:	431d      	orrs	r5, r3
 80010a6:	9f02      	ldr	r7, [sp, #8]
 80010a8:	042b      	lsls	r3, r5, #16
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	435a      	muls	r2, r3
 80010ae:	437b      	muls	r3, r7
 80010b0:	469c      	mov	ip, r3
 80010b2:	0c29      	lsrs	r1, r5, #16
 80010b4:	4348      	muls	r0, r1
 80010b6:	0c13      	lsrs	r3, r2, #16
 80010b8:	4484      	add	ip, r0
 80010ba:	4463      	add	r3, ip
 80010bc:	4379      	muls	r1, r7
 80010be:	4298      	cmp	r0, r3
 80010c0:	d903      	bls.n	80010ca <__aeabi_ddiv+0x23a>
 80010c2:	2080      	movs	r0, #128	; 0x80
 80010c4:	0240      	lsls	r0, r0, #9
 80010c6:	4684      	mov	ip, r0
 80010c8:	4461      	add	r1, ip
 80010ca:	0c18      	lsrs	r0, r3, #16
 80010cc:	0412      	lsls	r2, r2, #16
 80010ce:	041b      	lsls	r3, r3, #16
 80010d0:	0c12      	lsrs	r2, r2, #16
 80010d2:	1840      	adds	r0, r0, r1
 80010d4:	189b      	adds	r3, r3, r2
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d200      	bcs.n	80010dc <__aeabi_ddiv+0x24c>
 80010da:	e100      	b.n	80012de <__aeabi_ddiv+0x44e>
 80010dc:	d100      	bne.n	80010e0 <__aeabi_ddiv+0x250>
 80010de:	e0fb      	b.n	80012d8 <__aeabi_ddiv+0x448>
 80010e0:	2301      	movs	r3, #1
 80010e2:	431d      	orrs	r5, r3
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <__aeabi_ddiv+0x37c>)
 80010e6:	445b      	add	r3, fp
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	dc00      	bgt.n	80010ee <__aeabi_ddiv+0x25e>
 80010ec:	e0aa      	b.n	8001244 <__aeabi_ddiv+0x3b4>
 80010ee:	076a      	lsls	r2, r5, #29
 80010f0:	d000      	beq.n	80010f4 <__aeabi_ddiv+0x264>
 80010f2:	e13d      	b.n	8001370 <__aeabi_ddiv+0x4e0>
 80010f4:	08e9      	lsrs	r1, r5, #3
 80010f6:	4642      	mov	r2, r8
 80010f8:	01d2      	lsls	r2, r2, #7
 80010fa:	d506      	bpl.n	800110a <__aeabi_ddiv+0x27a>
 80010fc:	4642      	mov	r2, r8
 80010fe:	4b44      	ldr	r3, [pc, #272]	; (8001210 <__aeabi_ddiv+0x380>)
 8001100:	401a      	ands	r2, r3
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	4690      	mov	r8, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	445b      	add	r3, fp
 800110a:	4a42      	ldr	r2, [pc, #264]	; (8001214 <__aeabi_ddiv+0x384>)
 800110c:	4293      	cmp	r3, r2
 800110e:	dd00      	ble.n	8001112 <__aeabi_ddiv+0x282>
 8001110:	e723      	b.n	8000f5a <__aeabi_ddiv+0xca>
 8001112:	4642      	mov	r2, r8
 8001114:	055b      	lsls	r3, r3, #21
 8001116:	0755      	lsls	r5, r2, #29
 8001118:	0252      	lsls	r2, r2, #9
 800111a:	430d      	orrs	r5, r1
 800111c:	0b12      	lsrs	r2, r2, #12
 800111e:	0d5b      	lsrs	r3, r3, #21
 8001120:	e70d      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8001122:	4651      	mov	r1, sl
 8001124:	4321      	orrs	r1, r4
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x29a>
 8001128:	e07c      	b.n	8001224 <__aeabi_ddiv+0x394>
 800112a:	2c00      	cmp	r4, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x2a0>
 800112e:	e0fb      	b.n	8001328 <__aeabi_ddiv+0x498>
 8001130:	0020      	movs	r0, r4
 8001132:	f001 f977 	bl	8002424 <__clzsi2>
 8001136:	0002      	movs	r2, r0
 8001138:	3a0b      	subs	r2, #11
 800113a:	231d      	movs	r3, #29
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	4652      	mov	r2, sl
 8001140:	0001      	movs	r1, r0
 8001142:	40da      	lsrs	r2, r3
 8001144:	4653      	mov	r3, sl
 8001146:	3908      	subs	r1, #8
 8001148:	408b      	lsls	r3, r1
 800114a:	408c      	lsls	r4, r1
 800114c:	0019      	movs	r1, r3
 800114e:	4314      	orrs	r4, r2
 8001150:	4b31      	ldr	r3, [pc, #196]	; (8001218 <__aeabi_ddiv+0x388>)
 8001152:	4458      	add	r0, fp
 8001154:	469b      	mov	fp, r3
 8001156:	4483      	add	fp, r0
 8001158:	2000      	movs	r0, #0
 800115a:	e6d9      	b.n	8000f10 <__aeabi_ddiv+0x80>
 800115c:	0003      	movs	r3, r0
 800115e:	4323      	orrs	r3, r4
 8001160:	4698      	mov	r8, r3
 8001162:	d044      	beq.n	80011ee <__aeabi_ddiv+0x35e>
 8001164:	2c00      	cmp	r4, #0
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0x2da>
 8001168:	e0cf      	b.n	800130a <__aeabi_ddiv+0x47a>
 800116a:	0020      	movs	r0, r4
 800116c:	f001 f95a 	bl	8002424 <__clzsi2>
 8001170:	0001      	movs	r1, r0
 8001172:	0002      	movs	r2, r0
 8001174:	390b      	subs	r1, #11
 8001176:	231d      	movs	r3, #29
 8001178:	1a5b      	subs	r3, r3, r1
 800117a:	4649      	mov	r1, r9
 800117c:	0010      	movs	r0, r2
 800117e:	40d9      	lsrs	r1, r3
 8001180:	3808      	subs	r0, #8
 8001182:	4084      	lsls	r4, r0
 8001184:	000b      	movs	r3, r1
 8001186:	464d      	mov	r5, r9
 8001188:	4323      	orrs	r3, r4
 800118a:	4698      	mov	r8, r3
 800118c:	4085      	lsls	r5, r0
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <__aeabi_ddiv+0x38c>)
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	469b      	mov	fp, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4699      	mov	r9, r3
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	e69e      	b.n	8000eda <__aeabi_ddiv+0x4a>
 800119c:	0002      	movs	r2, r0
 800119e:	4322      	orrs	r2, r4
 80011a0:	4690      	mov	r8, r2
 80011a2:	d11d      	bne.n	80011e0 <__aeabi_ddiv+0x350>
 80011a4:	2208      	movs	r2, #8
 80011a6:	469b      	mov	fp, r3
 80011a8:	2302      	movs	r3, #2
 80011aa:	2500      	movs	r5, #0
 80011ac:	4691      	mov	r9, r2
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	e693      	b.n	8000eda <__aeabi_ddiv+0x4a>
 80011b2:	4651      	mov	r1, sl
 80011b4:	4321      	orrs	r1, r4
 80011b6:	d109      	bne.n	80011cc <__aeabi_ddiv+0x33c>
 80011b8:	2302      	movs	r3, #2
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	2400      	movs	r4, #0
 80011c6:	2002      	movs	r0, #2
 80011c8:	44e3      	add	fp, ip
 80011ca:	e6a1      	b.n	8000f10 <__aeabi_ddiv+0x80>
 80011cc:	2303      	movs	r3, #3
 80011ce:	464a      	mov	r2, r9
 80011d0:	431a      	orrs	r2, r3
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <__aeabi_ddiv+0x390>)
 80011d4:	4691      	mov	r9, r2
 80011d6:	469c      	mov	ip, r3
 80011d8:	4651      	mov	r1, sl
 80011da:	2003      	movs	r0, #3
 80011dc:	44e3      	add	fp, ip
 80011de:	e697      	b.n	8000f10 <__aeabi_ddiv+0x80>
 80011e0:	220c      	movs	r2, #12
 80011e2:	469b      	mov	fp, r3
 80011e4:	2303      	movs	r3, #3
 80011e6:	46a0      	mov	r8, r4
 80011e8:	4691      	mov	r9, r2
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	e675      	b.n	8000eda <__aeabi_ddiv+0x4a>
 80011ee:	2304      	movs	r3, #4
 80011f0:	4699      	mov	r9, r3
 80011f2:	2300      	movs	r3, #0
 80011f4:	469b      	mov	fp, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	2500      	movs	r5, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	e66d      	b.n	8000eda <__aeabi_ddiv+0x4a>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	000007ff 	.word	0x000007ff
 8001204:	fffffc01 	.word	0xfffffc01
 8001208:	0800ca80 	.word	0x0800ca80
 800120c:	000003ff 	.word	0x000003ff
 8001210:	feffffff 	.word	0xfeffffff
 8001214:	000007fe 	.word	0x000007fe
 8001218:	000003f3 	.word	0x000003f3
 800121c:	fffffc0d 	.word	0xfffffc0d
 8001220:	fffff801 	.word	0xfffff801
 8001224:	464a      	mov	r2, r9
 8001226:	2301      	movs	r3, #1
 8001228:	431a      	orrs	r2, r3
 800122a:	4691      	mov	r9, r2
 800122c:	2400      	movs	r4, #0
 800122e:	2001      	movs	r0, #1
 8001230:	e66e      	b.n	8000f10 <__aeabi_ddiv+0x80>
 8001232:	2300      	movs	r3, #0
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	469a      	mov	sl, r3
 8001238:	2500      	movs	r5, #0
 800123a:	4b88      	ldr	r3, [pc, #544]	; (800145c <__aeabi_ddiv+0x5cc>)
 800123c:	0312      	lsls	r2, r2, #12
 800123e:	e67e      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8001240:	2501      	movs	r5, #1
 8001242:	426d      	negs	r5, r5
 8001244:	2201      	movs	r2, #1
 8001246:	1ad2      	subs	r2, r2, r3
 8001248:	2a38      	cmp	r2, #56	; 0x38
 800124a:	dd00      	ble.n	800124e <__aeabi_ddiv+0x3be>
 800124c:	e674      	b.n	8000f38 <__aeabi_ddiv+0xa8>
 800124e:	2a1f      	cmp	r2, #31
 8001250:	dc00      	bgt.n	8001254 <__aeabi_ddiv+0x3c4>
 8001252:	e0bd      	b.n	80013d0 <__aeabi_ddiv+0x540>
 8001254:	211f      	movs	r1, #31
 8001256:	4249      	negs	r1, r1
 8001258:	1acb      	subs	r3, r1, r3
 800125a:	4641      	mov	r1, r8
 800125c:	40d9      	lsrs	r1, r3
 800125e:	000b      	movs	r3, r1
 8001260:	2a20      	cmp	r2, #32
 8001262:	d004      	beq.n	800126e <__aeabi_ddiv+0x3de>
 8001264:	4641      	mov	r1, r8
 8001266:	4a7e      	ldr	r2, [pc, #504]	; (8001460 <__aeabi_ddiv+0x5d0>)
 8001268:	445a      	add	r2, fp
 800126a:	4091      	lsls	r1, r2
 800126c:	430d      	orrs	r5, r1
 800126e:	0029      	movs	r1, r5
 8001270:	1e4a      	subs	r2, r1, #1
 8001272:	4191      	sbcs	r1, r2
 8001274:	4319      	orrs	r1, r3
 8001276:	2307      	movs	r3, #7
 8001278:	001d      	movs	r5, r3
 800127a:	2200      	movs	r2, #0
 800127c:	400d      	ands	r5, r1
 800127e:	420b      	tst	r3, r1
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x3f4>
 8001282:	e0d0      	b.n	8001426 <__aeabi_ddiv+0x596>
 8001284:	220f      	movs	r2, #15
 8001286:	2300      	movs	r3, #0
 8001288:	400a      	ands	r2, r1
 800128a:	2a04      	cmp	r2, #4
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x400>
 800128e:	e0c7      	b.n	8001420 <__aeabi_ddiv+0x590>
 8001290:	1d0a      	adds	r2, r1, #4
 8001292:	428a      	cmp	r2, r1
 8001294:	4189      	sbcs	r1, r1
 8001296:	4249      	negs	r1, r1
 8001298:	185b      	adds	r3, r3, r1
 800129a:	0011      	movs	r1, r2
 800129c:	021a      	lsls	r2, r3, #8
 800129e:	d400      	bmi.n	80012a2 <__aeabi_ddiv+0x412>
 80012a0:	e0be      	b.n	8001420 <__aeabi_ddiv+0x590>
 80012a2:	2301      	movs	r3, #1
 80012a4:	2200      	movs	r2, #0
 80012a6:	2500      	movs	r5, #0
 80012a8:	e649      	b.n	8000f3e <__aeabi_ddiv+0xae>
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	4643      	mov	r3, r8
 80012ae:	0312      	lsls	r2, r2, #12
 80012b0:	4213      	tst	r3, r2
 80012b2:	d008      	beq.n	80012c6 <__aeabi_ddiv+0x436>
 80012b4:	4214      	tst	r4, r2
 80012b6:	d106      	bne.n	80012c6 <__aeabi_ddiv+0x436>
 80012b8:	4322      	orrs	r2, r4
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46ba      	mov	sl, r7
 80012be:	000d      	movs	r5, r1
 80012c0:	4b66      	ldr	r3, [pc, #408]	; (800145c <__aeabi_ddiv+0x5cc>)
 80012c2:	0b12      	lsrs	r2, r2, #12
 80012c4:	e63b      	b.n	8000f3e <__aeabi_ddiv+0xae>
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	4643      	mov	r3, r8
 80012ca:	0312      	lsls	r2, r2, #12
 80012cc:	431a      	orrs	r2, r3
 80012ce:	0312      	lsls	r2, r2, #12
 80012d0:	46b2      	mov	sl, r6
 80012d2:	4b62      	ldr	r3, [pc, #392]	; (800145c <__aeabi_ddiv+0x5cc>)
 80012d4:	0b12      	lsrs	r2, r2, #12
 80012d6:	e632      	b.n	8000f3e <__aeabi_ddiv+0xae>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x44e>
 80012dc:	e702      	b.n	80010e4 <__aeabi_ddiv+0x254>
 80012de:	19a6      	adds	r6, r4, r6
 80012e0:	1e6a      	subs	r2, r5, #1
 80012e2:	42a6      	cmp	r6, r4
 80012e4:	d200      	bcs.n	80012e8 <__aeabi_ddiv+0x458>
 80012e6:	e089      	b.n	80013fc <__aeabi_ddiv+0x56c>
 80012e8:	4286      	cmp	r6, r0
 80012ea:	d200      	bcs.n	80012ee <__aeabi_ddiv+0x45e>
 80012ec:	e09f      	b.n	800142e <__aeabi_ddiv+0x59e>
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x462>
 80012f0:	e0af      	b.n	8001452 <__aeabi_ddiv+0x5c2>
 80012f2:	0015      	movs	r5, r2
 80012f4:	e6f4      	b.n	80010e0 <__aeabi_ddiv+0x250>
 80012f6:	42a9      	cmp	r1, r5
 80012f8:	d900      	bls.n	80012fc <__aeabi_ddiv+0x46c>
 80012fa:	e63c      	b.n	8000f76 <__aeabi_ddiv+0xe6>
 80012fc:	4643      	mov	r3, r8
 80012fe:	07de      	lsls	r6, r3, #31
 8001300:	0858      	lsrs	r0, r3, #1
 8001302:	086b      	lsrs	r3, r5, #1
 8001304:	431e      	orrs	r6, r3
 8001306:	07ed      	lsls	r5, r5, #31
 8001308:	e63c      	b.n	8000f84 <__aeabi_ddiv+0xf4>
 800130a:	f001 f88b 	bl	8002424 <__clzsi2>
 800130e:	0001      	movs	r1, r0
 8001310:	0002      	movs	r2, r0
 8001312:	3115      	adds	r1, #21
 8001314:	3220      	adds	r2, #32
 8001316:	291c      	cmp	r1, #28
 8001318:	dc00      	bgt.n	800131c <__aeabi_ddiv+0x48c>
 800131a:	e72c      	b.n	8001176 <__aeabi_ddiv+0x2e6>
 800131c:	464b      	mov	r3, r9
 800131e:	3808      	subs	r0, #8
 8001320:	4083      	lsls	r3, r0
 8001322:	2500      	movs	r5, #0
 8001324:	4698      	mov	r8, r3
 8001326:	e732      	b.n	800118e <__aeabi_ddiv+0x2fe>
 8001328:	f001 f87c 	bl	8002424 <__clzsi2>
 800132c:	0003      	movs	r3, r0
 800132e:	001a      	movs	r2, r3
 8001330:	3215      	adds	r2, #21
 8001332:	3020      	adds	r0, #32
 8001334:	2a1c      	cmp	r2, #28
 8001336:	dc00      	bgt.n	800133a <__aeabi_ddiv+0x4aa>
 8001338:	e6ff      	b.n	800113a <__aeabi_ddiv+0x2aa>
 800133a:	4654      	mov	r4, sl
 800133c:	3b08      	subs	r3, #8
 800133e:	2100      	movs	r1, #0
 8001340:	409c      	lsls	r4, r3
 8001342:	e705      	b.n	8001150 <__aeabi_ddiv+0x2c0>
 8001344:	1936      	adds	r6, r6, r4
 8001346:	3b01      	subs	r3, #1
 8001348:	42b4      	cmp	r4, r6
 800134a:	d900      	bls.n	800134e <__aeabi_ddiv+0x4be>
 800134c:	e6a6      	b.n	800109c <__aeabi_ddiv+0x20c>
 800134e:	42b2      	cmp	r2, r6
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x4c4>
 8001352:	e6a3      	b.n	800109c <__aeabi_ddiv+0x20c>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	1936      	adds	r6, r6, r4
 8001358:	e6a0      	b.n	800109c <__aeabi_ddiv+0x20c>
 800135a:	1909      	adds	r1, r1, r4
 800135c:	3d01      	subs	r5, #1
 800135e:	428c      	cmp	r4, r1
 8001360:	d900      	bls.n	8001364 <__aeabi_ddiv+0x4d4>
 8001362:	e68d      	b.n	8001080 <__aeabi_ddiv+0x1f0>
 8001364:	428a      	cmp	r2, r1
 8001366:	d800      	bhi.n	800136a <__aeabi_ddiv+0x4da>
 8001368:	e68a      	b.n	8001080 <__aeabi_ddiv+0x1f0>
 800136a:	1e85      	subs	r5, r0, #2
 800136c:	1909      	adds	r1, r1, r4
 800136e:	e687      	b.n	8001080 <__aeabi_ddiv+0x1f0>
 8001370:	220f      	movs	r2, #15
 8001372:	402a      	ands	r2, r5
 8001374:	2a04      	cmp	r2, #4
 8001376:	d100      	bne.n	800137a <__aeabi_ddiv+0x4ea>
 8001378:	e6bc      	b.n	80010f4 <__aeabi_ddiv+0x264>
 800137a:	1d29      	adds	r1, r5, #4
 800137c:	42a9      	cmp	r1, r5
 800137e:	41ad      	sbcs	r5, r5
 8001380:	426d      	negs	r5, r5
 8001382:	08c9      	lsrs	r1, r1, #3
 8001384:	44a8      	add	r8, r5
 8001386:	e6b6      	b.n	80010f6 <__aeabi_ddiv+0x266>
 8001388:	42af      	cmp	r7, r5
 800138a:	d900      	bls.n	800138e <__aeabi_ddiv+0x4fe>
 800138c:	e662      	b.n	8001054 <__aeabi_ddiv+0x1c4>
 800138e:	4281      	cmp	r1, r0
 8001390:	d804      	bhi.n	800139c <__aeabi_ddiv+0x50c>
 8001392:	d000      	beq.n	8001396 <__aeabi_ddiv+0x506>
 8001394:	e65e      	b.n	8001054 <__aeabi_ddiv+0x1c4>
 8001396:	42ae      	cmp	r6, r5
 8001398:	d800      	bhi.n	800139c <__aeabi_ddiv+0x50c>
 800139a:	e65b      	b.n	8001054 <__aeabi_ddiv+0x1c4>
 800139c:	2302      	movs	r3, #2
 800139e:	425b      	negs	r3, r3
 80013a0:	469c      	mov	ip, r3
 80013a2:	9b00      	ldr	r3, [sp, #0]
 80013a4:	44e0      	add	r8, ip
 80013a6:	469c      	mov	ip, r3
 80013a8:	4465      	add	r5, ip
 80013aa:	429d      	cmp	r5, r3
 80013ac:	419b      	sbcs	r3, r3
 80013ae:	425b      	negs	r3, r3
 80013b0:	191b      	adds	r3, r3, r4
 80013b2:	18c0      	adds	r0, r0, r3
 80013b4:	e64f      	b.n	8001056 <__aeabi_ddiv+0x1c6>
 80013b6:	42b2      	cmp	r2, r6
 80013b8:	d800      	bhi.n	80013bc <__aeabi_ddiv+0x52c>
 80013ba:	e612      	b.n	8000fe2 <__aeabi_ddiv+0x152>
 80013bc:	1e83      	subs	r3, r0, #2
 80013be:	1936      	adds	r6, r6, r4
 80013c0:	e60f      	b.n	8000fe2 <__aeabi_ddiv+0x152>
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d800      	bhi.n	80013c8 <__aeabi_ddiv+0x538>
 80013c6:	e5fa      	b.n	8000fbe <__aeabi_ddiv+0x12e>
 80013c8:	1e83      	subs	r3, r0, #2
 80013ca:	4698      	mov	r8, r3
 80013cc:	1909      	adds	r1, r1, r4
 80013ce:	e5f6      	b.n	8000fbe <__aeabi_ddiv+0x12e>
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <__aeabi_ddiv+0x5d4>)
 80013d2:	0028      	movs	r0, r5
 80013d4:	445b      	add	r3, fp
 80013d6:	4641      	mov	r1, r8
 80013d8:	409d      	lsls	r5, r3
 80013da:	4099      	lsls	r1, r3
 80013dc:	40d0      	lsrs	r0, r2
 80013de:	1e6b      	subs	r3, r5, #1
 80013e0:	419d      	sbcs	r5, r3
 80013e2:	4643      	mov	r3, r8
 80013e4:	4301      	orrs	r1, r0
 80013e6:	4329      	orrs	r1, r5
 80013e8:	40d3      	lsrs	r3, r2
 80013ea:	074a      	lsls	r2, r1, #29
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x560>
 80013ee:	e755      	b.n	800129c <__aeabi_ddiv+0x40c>
 80013f0:	220f      	movs	r2, #15
 80013f2:	400a      	ands	r2, r1
 80013f4:	2a04      	cmp	r2, #4
 80013f6:	d000      	beq.n	80013fa <__aeabi_ddiv+0x56a>
 80013f8:	e74a      	b.n	8001290 <__aeabi_ddiv+0x400>
 80013fa:	e74f      	b.n	800129c <__aeabi_ddiv+0x40c>
 80013fc:	0015      	movs	r5, r2
 80013fe:	4286      	cmp	r6, r0
 8001400:	d000      	beq.n	8001404 <__aeabi_ddiv+0x574>
 8001402:	e66d      	b.n	80010e0 <__aeabi_ddiv+0x250>
 8001404:	9a00      	ldr	r2, [sp, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d000      	beq.n	800140c <__aeabi_ddiv+0x57c>
 800140a:	e669      	b.n	80010e0 <__aeabi_ddiv+0x250>
 800140c:	e66a      	b.n	80010e4 <__aeabi_ddiv+0x254>
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <__aeabi_ddiv+0x5d8>)
 8001410:	445b      	add	r3, fp
 8001412:	2b00      	cmp	r3, #0
 8001414:	dc00      	bgt.n	8001418 <__aeabi_ddiv+0x588>
 8001416:	e713      	b.n	8001240 <__aeabi_ddiv+0x3b0>
 8001418:	2501      	movs	r5, #1
 800141a:	2100      	movs	r1, #0
 800141c:	44a8      	add	r8, r5
 800141e:	e66a      	b.n	80010f6 <__aeabi_ddiv+0x266>
 8001420:	075d      	lsls	r5, r3, #29
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	0b1a      	lsrs	r2, r3, #12
 8001426:	08c9      	lsrs	r1, r1, #3
 8001428:	2300      	movs	r3, #0
 800142a:	430d      	orrs	r5, r1
 800142c:	e587      	b.n	8000f3e <__aeabi_ddiv+0xae>
 800142e:	9900      	ldr	r1, [sp, #0]
 8001430:	3d02      	subs	r5, #2
 8001432:	004a      	lsls	r2, r1, #1
 8001434:	428a      	cmp	r2, r1
 8001436:	41bf      	sbcs	r7, r7
 8001438:	427f      	negs	r7, r7
 800143a:	193f      	adds	r7, r7, r4
 800143c:	19f6      	adds	r6, r6, r7
 800143e:	9200      	str	r2, [sp, #0]
 8001440:	e7dd      	b.n	80013fe <__aeabi_ddiv+0x56e>
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	4643      	mov	r3, r8
 8001446:	0312      	lsls	r2, r2, #12
 8001448:	431a      	orrs	r2, r3
 800144a:	0312      	lsls	r2, r2, #12
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <__aeabi_ddiv+0x5cc>)
 800144e:	0b12      	lsrs	r2, r2, #12
 8001450:	e575      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8001452:	9900      	ldr	r1, [sp, #0]
 8001454:	4299      	cmp	r1, r3
 8001456:	d3ea      	bcc.n	800142e <__aeabi_ddiv+0x59e>
 8001458:	0015      	movs	r5, r2
 800145a:	e7d3      	b.n	8001404 <__aeabi_ddiv+0x574>
 800145c:	000007ff 	.word	0x000007ff
 8001460:	0000043e 	.word	0x0000043e
 8001464:	0000041e 	.word	0x0000041e
 8001468:	000003ff 	.word	0x000003ff

0800146c <__eqdf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	464e      	mov	r6, r9
 8001470:	4645      	mov	r5, r8
 8001472:	46de      	mov	lr, fp
 8001474:	4657      	mov	r7, sl
 8001476:	4690      	mov	r8, r2
 8001478:	b5e0      	push	{r5, r6, r7, lr}
 800147a:	0017      	movs	r7, r2
 800147c:	031a      	lsls	r2, r3, #12
 800147e:	0b12      	lsrs	r2, r2, #12
 8001480:	0005      	movs	r5, r0
 8001482:	4684      	mov	ip, r0
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <__eqdf2+0x80>)
 8001486:	030e      	lsls	r6, r1, #12
 8001488:	004c      	lsls	r4, r1, #1
 800148a:	4691      	mov	r9, r2
 800148c:	005a      	lsls	r2, r3, #1
 800148e:	0fdb      	lsrs	r3, r3, #31
 8001490:	469b      	mov	fp, r3
 8001492:	0b36      	lsrs	r6, r6, #12
 8001494:	0d64      	lsrs	r4, r4, #21
 8001496:	0fc9      	lsrs	r1, r1, #31
 8001498:	0d52      	lsrs	r2, r2, #21
 800149a:	4284      	cmp	r4, r0
 800149c:	d019      	beq.n	80014d2 <__eqdf2+0x66>
 800149e:	4282      	cmp	r2, r0
 80014a0:	d010      	beq.n	80014c4 <__eqdf2+0x58>
 80014a2:	2001      	movs	r0, #1
 80014a4:	4294      	cmp	r4, r2
 80014a6:	d10e      	bne.n	80014c6 <__eqdf2+0x5a>
 80014a8:	454e      	cmp	r6, r9
 80014aa:	d10c      	bne.n	80014c6 <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	45c4      	cmp	ip, r8
 80014b0:	d109      	bne.n	80014c6 <__eqdf2+0x5a>
 80014b2:	4559      	cmp	r1, fp
 80014b4:	d017      	beq.n	80014e6 <__eqdf2+0x7a>
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	d105      	bne.n	80014c6 <__eqdf2+0x5a>
 80014ba:	0030      	movs	r0, r6
 80014bc:	4328      	orrs	r0, r5
 80014be:	1e43      	subs	r3, r0, #1
 80014c0:	4198      	sbcs	r0, r3
 80014c2:	e000      	b.n	80014c6 <__eqdf2+0x5a>
 80014c4:	2001      	movs	r0, #1
 80014c6:	bcf0      	pop	{r4, r5, r6, r7}
 80014c8:	46bb      	mov	fp, r7
 80014ca:	46b2      	mov	sl, r6
 80014cc:	46a9      	mov	r9, r5
 80014ce:	46a0      	mov	r8, r4
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	0033      	movs	r3, r6
 80014d4:	2001      	movs	r0, #1
 80014d6:	432b      	orrs	r3, r5
 80014d8:	d1f5      	bne.n	80014c6 <__eqdf2+0x5a>
 80014da:	42a2      	cmp	r2, r4
 80014dc:	d1f3      	bne.n	80014c6 <__eqdf2+0x5a>
 80014de:	464b      	mov	r3, r9
 80014e0:	433b      	orrs	r3, r7
 80014e2:	d1f0      	bne.n	80014c6 <__eqdf2+0x5a>
 80014e4:	e7e2      	b.n	80014ac <__eqdf2+0x40>
 80014e6:	2000      	movs	r0, #0
 80014e8:	e7ed      	b.n	80014c6 <__eqdf2+0x5a>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	000007ff 	.word	0x000007ff

080014f0 <__gedf2>:
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	4647      	mov	r7, r8
 80014f4:	46ce      	mov	lr, r9
 80014f6:	0004      	movs	r4, r0
 80014f8:	0018      	movs	r0, r3
 80014fa:	0016      	movs	r6, r2
 80014fc:	031b      	lsls	r3, r3, #12
 80014fe:	0b1b      	lsrs	r3, r3, #12
 8001500:	4d2d      	ldr	r5, [pc, #180]	; (80015b8 <__gedf2+0xc8>)
 8001502:	004a      	lsls	r2, r1, #1
 8001504:	4699      	mov	r9, r3
 8001506:	b580      	push	{r7, lr}
 8001508:	0043      	lsls	r3, r0, #1
 800150a:	030f      	lsls	r7, r1, #12
 800150c:	46a4      	mov	ip, r4
 800150e:	46b0      	mov	r8, r6
 8001510:	0b3f      	lsrs	r7, r7, #12
 8001512:	0d52      	lsrs	r2, r2, #21
 8001514:	0fc9      	lsrs	r1, r1, #31
 8001516:	0d5b      	lsrs	r3, r3, #21
 8001518:	0fc0      	lsrs	r0, r0, #31
 800151a:	42aa      	cmp	r2, r5
 800151c:	d021      	beq.n	8001562 <__gedf2+0x72>
 800151e:	42ab      	cmp	r3, r5
 8001520:	d013      	beq.n	800154a <__gedf2+0x5a>
 8001522:	2a00      	cmp	r2, #0
 8001524:	d122      	bne.n	800156c <__gedf2+0x7c>
 8001526:	433c      	orrs	r4, r7
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <__gedf2+0x42>
 800152c:	464d      	mov	r5, r9
 800152e:	432e      	orrs	r6, r5
 8001530:	d022      	beq.n	8001578 <__gedf2+0x88>
 8001532:	2c00      	cmp	r4, #0
 8001534:	d010      	beq.n	8001558 <__gedf2+0x68>
 8001536:	4281      	cmp	r1, r0
 8001538:	d022      	beq.n	8001580 <__gedf2+0x90>
 800153a:	2002      	movs	r0, #2
 800153c:	3901      	subs	r1, #1
 800153e:	4008      	ands	r0, r1
 8001540:	3801      	subs	r0, #1
 8001542:	bcc0      	pop	{r6, r7}
 8001544:	46b9      	mov	r9, r7
 8001546:	46b0      	mov	r8, r6
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	464d      	mov	r5, r9
 800154c:	432e      	orrs	r6, r5
 800154e:	d129      	bne.n	80015a4 <__gedf2+0xb4>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d1f0      	bne.n	8001536 <__gedf2+0x46>
 8001554:	433c      	orrs	r4, r7
 8001556:	d1ee      	bne.n	8001536 <__gedf2+0x46>
 8001558:	2800      	cmp	r0, #0
 800155a:	d1f2      	bne.n	8001542 <__gedf2+0x52>
 800155c:	2001      	movs	r0, #1
 800155e:	4240      	negs	r0, r0
 8001560:	e7ef      	b.n	8001542 <__gedf2+0x52>
 8001562:	003d      	movs	r5, r7
 8001564:	4325      	orrs	r5, r4
 8001566:	d11d      	bne.n	80015a4 <__gedf2+0xb4>
 8001568:	4293      	cmp	r3, r2
 800156a:	d0ee      	beq.n	800154a <__gedf2+0x5a>
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e2      	bne.n	8001536 <__gedf2+0x46>
 8001570:	464c      	mov	r4, r9
 8001572:	4326      	orrs	r6, r4
 8001574:	d1df      	bne.n	8001536 <__gedf2+0x46>
 8001576:	e7e0      	b.n	800153a <__gedf2+0x4a>
 8001578:	2000      	movs	r0, #0
 800157a:	2c00      	cmp	r4, #0
 800157c:	d0e1      	beq.n	8001542 <__gedf2+0x52>
 800157e:	e7dc      	b.n	800153a <__gedf2+0x4a>
 8001580:	429a      	cmp	r2, r3
 8001582:	dc0a      	bgt.n	800159a <__gedf2+0xaa>
 8001584:	dbe8      	blt.n	8001558 <__gedf2+0x68>
 8001586:	454f      	cmp	r7, r9
 8001588:	d8d7      	bhi.n	800153a <__gedf2+0x4a>
 800158a:	d00e      	beq.n	80015aa <__gedf2+0xba>
 800158c:	2000      	movs	r0, #0
 800158e:	454f      	cmp	r7, r9
 8001590:	d2d7      	bcs.n	8001542 <__gedf2+0x52>
 8001592:	2900      	cmp	r1, #0
 8001594:	d0e2      	beq.n	800155c <__gedf2+0x6c>
 8001596:	0008      	movs	r0, r1
 8001598:	e7d3      	b.n	8001542 <__gedf2+0x52>
 800159a:	4243      	negs	r3, r0
 800159c:	4158      	adcs	r0, r3
 800159e:	0040      	lsls	r0, r0, #1
 80015a0:	3801      	subs	r0, #1
 80015a2:	e7ce      	b.n	8001542 <__gedf2+0x52>
 80015a4:	2002      	movs	r0, #2
 80015a6:	4240      	negs	r0, r0
 80015a8:	e7cb      	b.n	8001542 <__gedf2+0x52>
 80015aa:	45c4      	cmp	ip, r8
 80015ac:	d8c5      	bhi.n	800153a <__gedf2+0x4a>
 80015ae:	2000      	movs	r0, #0
 80015b0:	45c4      	cmp	ip, r8
 80015b2:	d2c6      	bcs.n	8001542 <__gedf2+0x52>
 80015b4:	e7ed      	b.n	8001592 <__gedf2+0xa2>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	000007ff 	.word	0x000007ff

080015bc <__ledf2>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	4647      	mov	r7, r8
 80015c0:	46ce      	mov	lr, r9
 80015c2:	0004      	movs	r4, r0
 80015c4:	0018      	movs	r0, r3
 80015c6:	0016      	movs	r6, r2
 80015c8:	031b      	lsls	r3, r3, #12
 80015ca:	0b1b      	lsrs	r3, r3, #12
 80015cc:	4d2c      	ldr	r5, [pc, #176]	; (8001680 <__ledf2+0xc4>)
 80015ce:	004a      	lsls	r2, r1, #1
 80015d0:	4699      	mov	r9, r3
 80015d2:	b580      	push	{r7, lr}
 80015d4:	0043      	lsls	r3, r0, #1
 80015d6:	030f      	lsls	r7, r1, #12
 80015d8:	46a4      	mov	ip, r4
 80015da:	46b0      	mov	r8, r6
 80015dc:	0b3f      	lsrs	r7, r7, #12
 80015de:	0d52      	lsrs	r2, r2, #21
 80015e0:	0fc9      	lsrs	r1, r1, #31
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	0fc0      	lsrs	r0, r0, #31
 80015e6:	42aa      	cmp	r2, r5
 80015e8:	d00d      	beq.n	8001606 <__ledf2+0x4a>
 80015ea:	42ab      	cmp	r3, r5
 80015ec:	d010      	beq.n	8001610 <__ledf2+0x54>
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d127      	bne.n	8001642 <__ledf2+0x86>
 80015f2:	433c      	orrs	r4, r7
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <__ledf2+0x60>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10e      	bne.n	800161c <__ledf2+0x60>
 80015fe:	2000      	movs	r0, #0
 8001600:	2c00      	cmp	r4, #0
 8001602:	d015      	beq.n	8001630 <__ledf2+0x74>
 8001604:	e00e      	b.n	8001624 <__ledf2+0x68>
 8001606:	003d      	movs	r5, r7
 8001608:	4325      	orrs	r5, r4
 800160a:	d110      	bne.n	800162e <__ledf2+0x72>
 800160c:	4293      	cmp	r3, r2
 800160e:	d118      	bne.n	8001642 <__ledf2+0x86>
 8001610:	464d      	mov	r5, r9
 8001612:	432e      	orrs	r6, r5
 8001614:	d10b      	bne.n	800162e <__ledf2+0x72>
 8001616:	2a00      	cmp	r2, #0
 8001618:	d102      	bne.n	8001620 <__ledf2+0x64>
 800161a:	433c      	orrs	r4, r7
 800161c:	2c00      	cmp	r4, #0
 800161e:	d00b      	beq.n	8001638 <__ledf2+0x7c>
 8001620:	4281      	cmp	r1, r0
 8001622:	d014      	beq.n	800164e <__ledf2+0x92>
 8001624:	2002      	movs	r0, #2
 8001626:	3901      	subs	r1, #1
 8001628:	4008      	ands	r0, r1
 800162a:	3801      	subs	r0, #1
 800162c:	e000      	b.n	8001630 <__ledf2+0x74>
 800162e:	2002      	movs	r0, #2
 8001630:	bcc0      	pop	{r6, r7}
 8001632:	46b9      	mov	r9, r7
 8001634:	46b0      	mov	r8, r6
 8001636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001638:	2800      	cmp	r0, #0
 800163a:	d1f9      	bne.n	8001630 <__ledf2+0x74>
 800163c:	2001      	movs	r0, #1
 800163e:	4240      	negs	r0, r0
 8001640:	e7f6      	b.n	8001630 <__ledf2+0x74>
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ec      	bne.n	8001620 <__ledf2+0x64>
 8001646:	464c      	mov	r4, r9
 8001648:	4326      	orrs	r6, r4
 800164a:	d1e9      	bne.n	8001620 <__ledf2+0x64>
 800164c:	e7ea      	b.n	8001624 <__ledf2+0x68>
 800164e:	429a      	cmp	r2, r3
 8001650:	dd04      	ble.n	800165c <__ledf2+0xa0>
 8001652:	4243      	negs	r3, r0
 8001654:	4158      	adcs	r0, r3
 8001656:	0040      	lsls	r0, r0, #1
 8001658:	3801      	subs	r0, #1
 800165a:	e7e9      	b.n	8001630 <__ledf2+0x74>
 800165c:	429a      	cmp	r2, r3
 800165e:	dbeb      	blt.n	8001638 <__ledf2+0x7c>
 8001660:	454f      	cmp	r7, r9
 8001662:	d8df      	bhi.n	8001624 <__ledf2+0x68>
 8001664:	d006      	beq.n	8001674 <__ledf2+0xb8>
 8001666:	2000      	movs	r0, #0
 8001668:	454f      	cmp	r7, r9
 800166a:	d2e1      	bcs.n	8001630 <__ledf2+0x74>
 800166c:	2900      	cmp	r1, #0
 800166e:	d0e5      	beq.n	800163c <__ledf2+0x80>
 8001670:	0008      	movs	r0, r1
 8001672:	e7dd      	b.n	8001630 <__ledf2+0x74>
 8001674:	45c4      	cmp	ip, r8
 8001676:	d8d5      	bhi.n	8001624 <__ledf2+0x68>
 8001678:	2000      	movs	r0, #0
 800167a:	45c4      	cmp	ip, r8
 800167c:	d2d8      	bcs.n	8001630 <__ledf2+0x74>
 800167e:	e7f5      	b.n	800166c <__ledf2+0xb0>
 8001680:	000007ff 	.word	0x000007ff

08001684 <__aeabi_dmul>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	4645      	mov	r5, r8
 8001688:	46de      	mov	lr, fp
 800168a:	4657      	mov	r7, sl
 800168c:	464e      	mov	r6, r9
 800168e:	b5e0      	push	{r5, r6, r7, lr}
 8001690:	001f      	movs	r7, r3
 8001692:	030b      	lsls	r3, r1, #12
 8001694:	0b1b      	lsrs	r3, r3, #12
 8001696:	469b      	mov	fp, r3
 8001698:	004d      	lsls	r5, r1, #1
 800169a:	0fcb      	lsrs	r3, r1, #31
 800169c:	0004      	movs	r4, r0
 800169e:	4691      	mov	r9, r2
 80016a0:	4698      	mov	r8, r3
 80016a2:	b087      	sub	sp, #28
 80016a4:	0d6d      	lsrs	r5, r5, #21
 80016a6:	d100      	bne.n	80016aa <__aeabi_dmul+0x26>
 80016a8:	e1cd      	b.n	8001a46 <__aeabi_dmul+0x3c2>
 80016aa:	4bce      	ldr	r3, [pc, #824]	; (80019e4 <__aeabi_dmul+0x360>)
 80016ac:	429d      	cmp	r5, r3
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2e>
 80016b0:	e1e9      	b.n	8001a86 <__aeabi_dmul+0x402>
 80016b2:	465a      	mov	r2, fp
 80016b4:	0f43      	lsrs	r3, r0, #29
 80016b6:	00d2      	lsls	r2, r2, #3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	00c3      	lsls	r3, r0, #3
 80016c2:	469a      	mov	sl, r3
 80016c4:	4bc8      	ldr	r3, [pc, #800]	; (80019e8 <__aeabi_dmul+0x364>)
 80016c6:	4693      	mov	fp, r2
 80016c8:	469c      	mov	ip, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	2600      	movs	r6, #0
 80016ce:	4465      	add	r5, ip
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	033c      	lsls	r4, r7, #12
 80016d4:	007b      	lsls	r3, r7, #1
 80016d6:	4648      	mov	r0, r9
 80016d8:	0b24      	lsrs	r4, r4, #12
 80016da:	0d5b      	lsrs	r3, r3, #21
 80016dc:	0fff      	lsrs	r7, r7, #31
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dmul+0x60>
 80016e2:	e189      	b.n	80019f8 <__aeabi_dmul+0x374>
 80016e4:	4abf      	ldr	r2, [pc, #764]	; (80019e4 <__aeabi_dmul+0x360>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <__aeabi_dmul+0x9a>
 80016ea:	0f42      	lsrs	r2, r0, #29
 80016ec:	00e4      	lsls	r4, r4, #3
 80016ee:	4322      	orrs	r2, r4
 80016f0:	2480      	movs	r4, #128	; 0x80
 80016f2:	0424      	lsls	r4, r4, #16
 80016f4:	4314      	orrs	r4, r2
 80016f6:	4abc      	ldr	r2, [pc, #752]	; (80019e8 <__aeabi_dmul+0x364>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4694      	mov	ip, r2
 80016fc:	4642      	mov	r2, r8
 80016fe:	4463      	add	r3, ip
 8001700:	195b      	adds	r3, r3, r5
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	9b01      	ldr	r3, [sp, #4]
 8001706:	407a      	eors	r2, r7
 8001708:	3301      	adds	r3, #1
 800170a:	00c0      	lsls	r0, r0, #3
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2e0a      	cmp	r6, #10
 8001712:	dd1c      	ble.n	800174e <__aeabi_dmul+0xca>
 8001714:	003a      	movs	r2, r7
 8001716:	2e0b      	cmp	r6, #11
 8001718:	d05e      	beq.n	80017d8 <__aeabi_dmul+0x154>
 800171a:	4647      	mov	r7, r8
 800171c:	e056      	b.n	80017cc <__aeabi_dmul+0x148>
 800171e:	4649      	mov	r1, r9
 8001720:	4bb0      	ldr	r3, [pc, #704]	; (80019e4 <__aeabi_dmul+0x360>)
 8001722:	4321      	orrs	r1, r4
 8001724:	18eb      	adds	r3, r5, r3
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2900      	cmp	r1, #0
 800172a:	d12a      	bne.n	8001782 <__aeabi_dmul+0xfe>
 800172c:	2080      	movs	r0, #128	; 0x80
 800172e:	2202      	movs	r2, #2
 8001730:	0100      	lsls	r0, r0, #4
 8001732:	002b      	movs	r3, r5
 8001734:	4684      	mov	ip, r0
 8001736:	4316      	orrs	r6, r2
 8001738:	4642      	mov	r2, r8
 800173a:	4463      	add	r3, ip
 800173c:	407a      	eors	r2, r7
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2e0a      	cmp	r6, #10
 8001744:	dd00      	ble.n	8001748 <__aeabi_dmul+0xc4>
 8001746:	e231      	b.n	8001bac <__aeabi_dmul+0x528>
 8001748:	2000      	movs	r0, #0
 800174a:	2400      	movs	r4, #0
 800174c:	2102      	movs	r1, #2
 800174e:	2e02      	cmp	r6, #2
 8001750:	dc26      	bgt.n	80017a0 <__aeabi_dmul+0x11c>
 8001752:	3e01      	subs	r6, #1
 8001754:	2e01      	cmp	r6, #1
 8001756:	d852      	bhi.n	80017fe <__aeabi_dmul+0x17a>
 8001758:	2902      	cmp	r1, #2
 800175a:	d04c      	beq.n	80017f6 <__aeabi_dmul+0x172>
 800175c:	2901      	cmp	r1, #1
 800175e:	d000      	beq.n	8001762 <__aeabi_dmul+0xde>
 8001760:	e118      	b.n	8001994 <__aeabi_dmul+0x310>
 8001762:	2300      	movs	r3, #0
 8001764:	2400      	movs	r4, #0
 8001766:	2500      	movs	r5, #0
 8001768:	051b      	lsls	r3, r3, #20
 800176a:	4323      	orrs	r3, r4
 800176c:	07d2      	lsls	r2, r2, #31
 800176e:	4313      	orrs	r3, r2
 8001770:	0028      	movs	r0, r5
 8001772:	0019      	movs	r1, r3
 8001774:	b007      	add	sp, #28
 8001776:	bcf0      	pop	{r4, r5, r6, r7}
 8001778:	46bb      	mov	fp, r7
 800177a:	46b2      	mov	sl, r6
 800177c:	46a9      	mov	r9, r5
 800177e:	46a0      	mov	r8, r4
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	2203      	movs	r2, #3
 8001786:	0109      	lsls	r1, r1, #4
 8001788:	002b      	movs	r3, r5
 800178a:	468c      	mov	ip, r1
 800178c:	4316      	orrs	r6, r2
 800178e:	4642      	mov	r2, r8
 8001790:	4463      	add	r3, ip
 8001792:	407a      	eors	r2, r7
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2e0a      	cmp	r6, #10
 800179a:	dd00      	ble.n	800179e <__aeabi_dmul+0x11a>
 800179c:	e228      	b.n	8001bf0 <__aeabi_dmul+0x56c>
 800179e:	2103      	movs	r1, #3
 80017a0:	2501      	movs	r5, #1
 80017a2:	40b5      	lsls	r5, r6
 80017a4:	46ac      	mov	ip, r5
 80017a6:	26a6      	movs	r6, #166	; 0xa6
 80017a8:	4663      	mov	r3, ip
 80017aa:	00f6      	lsls	r6, r6, #3
 80017ac:	4035      	ands	r5, r6
 80017ae:	4233      	tst	r3, r6
 80017b0:	d10b      	bne.n	80017ca <__aeabi_dmul+0x146>
 80017b2:	2690      	movs	r6, #144	; 0x90
 80017b4:	00b6      	lsls	r6, r6, #2
 80017b6:	4233      	tst	r3, r6
 80017b8:	d118      	bne.n	80017ec <__aeabi_dmul+0x168>
 80017ba:	3eb9      	subs	r6, #185	; 0xb9
 80017bc:	3eff      	subs	r6, #255	; 0xff
 80017be:	421e      	tst	r6, r3
 80017c0:	d01d      	beq.n	80017fe <__aeabi_dmul+0x17a>
 80017c2:	46a3      	mov	fp, r4
 80017c4:	4682      	mov	sl, r0
 80017c6:	9100      	str	r1, [sp, #0]
 80017c8:	e000      	b.n	80017cc <__aeabi_dmul+0x148>
 80017ca:	0017      	movs	r7, r2
 80017cc:	9900      	ldr	r1, [sp, #0]
 80017ce:	003a      	movs	r2, r7
 80017d0:	2902      	cmp	r1, #2
 80017d2:	d010      	beq.n	80017f6 <__aeabi_dmul+0x172>
 80017d4:	465c      	mov	r4, fp
 80017d6:	4650      	mov	r0, sl
 80017d8:	2903      	cmp	r1, #3
 80017da:	d1bf      	bne.n	800175c <__aeabi_dmul+0xd8>
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	031b      	lsls	r3, r3, #12
 80017e0:	431c      	orrs	r4, r3
 80017e2:	0324      	lsls	r4, r4, #12
 80017e4:	0005      	movs	r5, r0
 80017e6:	4b7f      	ldr	r3, [pc, #508]	; (80019e4 <__aeabi_dmul+0x360>)
 80017e8:	0b24      	lsrs	r4, r4, #12
 80017ea:	e7bd      	b.n	8001768 <__aeabi_dmul+0xe4>
 80017ec:	2480      	movs	r4, #128	; 0x80
 80017ee:	2200      	movs	r2, #0
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <__aeabi_dmul+0x360>)
 80017f2:	0324      	lsls	r4, r4, #12
 80017f4:	e7b8      	b.n	8001768 <__aeabi_dmul+0xe4>
 80017f6:	2400      	movs	r4, #0
 80017f8:	2500      	movs	r5, #0
 80017fa:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <__aeabi_dmul+0x360>)
 80017fc:	e7b4      	b.n	8001768 <__aeabi_dmul+0xe4>
 80017fe:	4653      	mov	r3, sl
 8001800:	041e      	lsls	r6, r3, #16
 8001802:	0c36      	lsrs	r6, r6, #16
 8001804:	0c1f      	lsrs	r7, r3, #16
 8001806:	0033      	movs	r3, r6
 8001808:	0c01      	lsrs	r1, r0, #16
 800180a:	0400      	lsls	r0, r0, #16
 800180c:	0c00      	lsrs	r0, r0, #16
 800180e:	4343      	muls	r3, r0
 8001810:	4698      	mov	r8, r3
 8001812:	0003      	movs	r3, r0
 8001814:	437b      	muls	r3, r7
 8001816:	4699      	mov	r9, r3
 8001818:	0033      	movs	r3, r6
 800181a:	434b      	muls	r3, r1
 800181c:	469c      	mov	ip, r3
 800181e:	4643      	mov	r3, r8
 8001820:	000d      	movs	r5, r1
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	469a      	mov	sl, r3
 8001826:	437d      	muls	r5, r7
 8001828:	44cc      	add	ip, r9
 800182a:	44d4      	add	ip, sl
 800182c:	9500      	str	r5, [sp, #0]
 800182e:	45e1      	cmp	r9, ip
 8001830:	d904      	bls.n	800183c <__aeabi_dmul+0x1b8>
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	4699      	mov	r9, r3
 8001838:	444d      	add	r5, r9
 800183a:	9500      	str	r5, [sp, #0]
 800183c:	4663      	mov	r3, ip
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	001d      	movs	r5, r3
 8001842:	4663      	mov	r3, ip
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	469c      	mov	ip, r3
 8001848:	4643      	mov	r3, r8
 800184a:	041b      	lsls	r3, r3, #16
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	4698      	mov	r8, r3
 8001850:	4663      	mov	r3, ip
 8001852:	4443      	add	r3, r8
 8001854:	9303      	str	r3, [sp, #12]
 8001856:	0c23      	lsrs	r3, r4, #16
 8001858:	4698      	mov	r8, r3
 800185a:	0033      	movs	r3, r6
 800185c:	0424      	lsls	r4, r4, #16
 800185e:	0c24      	lsrs	r4, r4, #16
 8001860:	4363      	muls	r3, r4
 8001862:	469c      	mov	ip, r3
 8001864:	0023      	movs	r3, r4
 8001866:	437b      	muls	r3, r7
 8001868:	4699      	mov	r9, r3
 800186a:	4643      	mov	r3, r8
 800186c:	435e      	muls	r6, r3
 800186e:	435f      	muls	r7, r3
 8001870:	444e      	add	r6, r9
 8001872:	4663      	mov	r3, ip
 8001874:	46b2      	mov	sl, r6
 8001876:	0c1e      	lsrs	r6, r3, #16
 8001878:	4456      	add	r6, sl
 800187a:	45b1      	cmp	r9, r6
 800187c:	d903      	bls.n	8001886 <__aeabi_dmul+0x202>
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	025b      	lsls	r3, r3, #9
 8001882:	4699      	mov	r9, r3
 8001884:	444f      	add	r7, r9
 8001886:	0c33      	lsrs	r3, r6, #16
 8001888:	4699      	mov	r9, r3
 800188a:	003b      	movs	r3, r7
 800188c:	444b      	add	r3, r9
 800188e:	9305      	str	r3, [sp, #20]
 8001890:	4663      	mov	r3, ip
 8001892:	46ac      	mov	ip, r5
 8001894:	041f      	lsls	r7, r3, #16
 8001896:	0c3f      	lsrs	r7, r7, #16
 8001898:	0436      	lsls	r6, r6, #16
 800189a:	19f6      	adds	r6, r6, r7
 800189c:	44b4      	add	ip, r6
 800189e:	4663      	mov	r3, ip
 80018a0:	9304      	str	r3, [sp, #16]
 80018a2:	465b      	mov	r3, fp
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	469c      	mov	ip, r3
 80018a8:	465b      	mov	r3, fp
 80018aa:	041f      	lsls	r7, r3, #16
 80018ac:	0c3f      	lsrs	r7, r7, #16
 80018ae:	003b      	movs	r3, r7
 80018b0:	4343      	muls	r3, r0
 80018b2:	4699      	mov	r9, r3
 80018b4:	4663      	mov	r3, ip
 80018b6:	4343      	muls	r3, r0
 80018b8:	469a      	mov	sl, r3
 80018ba:	464b      	mov	r3, r9
 80018bc:	4660      	mov	r0, ip
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	469b      	mov	fp, r3
 80018c2:	4348      	muls	r0, r1
 80018c4:	4379      	muls	r1, r7
 80018c6:	4451      	add	r1, sl
 80018c8:	4459      	add	r1, fp
 80018ca:	458a      	cmp	sl, r1
 80018cc:	d903      	bls.n	80018d6 <__aeabi_dmul+0x252>
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	469a      	mov	sl, r3
 80018d4:	4450      	add	r0, sl
 80018d6:	0c0b      	lsrs	r3, r1, #16
 80018d8:	469a      	mov	sl, r3
 80018da:	464b      	mov	r3, r9
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	4699      	mov	r9, r3
 80018e2:	003b      	movs	r3, r7
 80018e4:	4363      	muls	r3, r4
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	4645      	mov	r5, r8
 80018ea:	4449      	add	r1, r9
 80018ec:	4699      	mov	r9, r3
 80018ee:	4663      	mov	r3, ip
 80018f0:	435c      	muls	r4, r3
 80018f2:	436b      	muls	r3, r5
 80018f4:	469c      	mov	ip, r3
 80018f6:	464b      	mov	r3, r9
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	4698      	mov	r8, r3
 80018fc:	436f      	muls	r7, r5
 80018fe:	193f      	adds	r7, r7, r4
 8001900:	4447      	add	r7, r8
 8001902:	4450      	add	r0, sl
 8001904:	42bc      	cmp	r4, r7
 8001906:	d903      	bls.n	8001910 <__aeabi_dmul+0x28c>
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	4698      	mov	r8, r3
 800190e:	44c4      	add	ip, r8
 8001910:	9b04      	ldr	r3, [sp, #16]
 8001912:	9d00      	ldr	r5, [sp, #0]
 8001914:	4698      	mov	r8, r3
 8001916:	4445      	add	r5, r8
 8001918:	42b5      	cmp	r5, r6
 800191a:	41b6      	sbcs	r6, r6
 800191c:	4273      	negs	r3, r6
 800191e:	4698      	mov	r8, r3
 8001920:	464b      	mov	r3, r9
 8001922:	041e      	lsls	r6, r3, #16
 8001924:	9b05      	ldr	r3, [sp, #20]
 8001926:	043c      	lsls	r4, r7, #16
 8001928:	4699      	mov	r9, r3
 800192a:	0c36      	lsrs	r6, r6, #16
 800192c:	19a4      	adds	r4, r4, r6
 800192e:	444c      	add	r4, r9
 8001930:	46a1      	mov	r9, r4
 8001932:	4683      	mov	fp, r0
 8001934:	186e      	adds	r6, r5, r1
 8001936:	44c1      	add	r9, r8
 8001938:	428e      	cmp	r6, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	44cb      	add	fp, r9
 800193e:	465d      	mov	r5, fp
 8001940:	4249      	negs	r1, r1
 8001942:	186d      	adds	r5, r5, r1
 8001944:	429c      	cmp	r4, r3
 8001946:	41a4      	sbcs	r4, r4
 8001948:	45c1      	cmp	r9, r8
 800194a:	419b      	sbcs	r3, r3
 800194c:	4583      	cmp	fp, r0
 800194e:	4180      	sbcs	r0, r0
 8001950:	428d      	cmp	r5, r1
 8001952:	4189      	sbcs	r1, r1
 8001954:	425b      	negs	r3, r3
 8001956:	4264      	negs	r4, r4
 8001958:	431c      	orrs	r4, r3
 800195a:	4240      	negs	r0, r0
 800195c:	9b03      	ldr	r3, [sp, #12]
 800195e:	4249      	negs	r1, r1
 8001960:	4301      	orrs	r1, r0
 8001962:	0270      	lsls	r0, r6, #9
 8001964:	0c3f      	lsrs	r7, r7, #16
 8001966:	4318      	orrs	r0, r3
 8001968:	19e4      	adds	r4, r4, r7
 800196a:	1e47      	subs	r7, r0, #1
 800196c:	41b8      	sbcs	r0, r7
 800196e:	1864      	adds	r4, r4, r1
 8001970:	4464      	add	r4, ip
 8001972:	0df6      	lsrs	r6, r6, #23
 8001974:	0261      	lsls	r1, r4, #9
 8001976:	4330      	orrs	r0, r6
 8001978:	0dec      	lsrs	r4, r5, #23
 800197a:	026e      	lsls	r6, r5, #9
 800197c:	430c      	orrs	r4, r1
 800197e:	4330      	orrs	r0, r6
 8001980:	01c9      	lsls	r1, r1, #7
 8001982:	d400      	bmi.n	8001986 <__aeabi_dmul+0x302>
 8001984:	e0f1      	b.n	8001b6a <__aeabi_dmul+0x4e6>
 8001986:	2101      	movs	r1, #1
 8001988:	0843      	lsrs	r3, r0, #1
 800198a:	4001      	ands	r1, r0
 800198c:	430b      	orrs	r3, r1
 800198e:	07e0      	lsls	r0, r4, #31
 8001990:	4318      	orrs	r0, r3
 8001992:	0864      	lsrs	r4, r4, #1
 8001994:	4915      	ldr	r1, [pc, #84]	; (80019ec <__aeabi_dmul+0x368>)
 8001996:	9b02      	ldr	r3, [sp, #8]
 8001998:	468c      	mov	ip, r1
 800199a:	4463      	add	r3, ip
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc00      	bgt.n	80019a2 <__aeabi_dmul+0x31e>
 80019a0:	e097      	b.n	8001ad2 <__aeabi_dmul+0x44e>
 80019a2:	0741      	lsls	r1, r0, #29
 80019a4:	d009      	beq.n	80019ba <__aeabi_dmul+0x336>
 80019a6:	210f      	movs	r1, #15
 80019a8:	4001      	ands	r1, r0
 80019aa:	2904      	cmp	r1, #4
 80019ac:	d005      	beq.n	80019ba <__aeabi_dmul+0x336>
 80019ae:	1d01      	adds	r1, r0, #4
 80019b0:	4281      	cmp	r1, r0
 80019b2:	4180      	sbcs	r0, r0
 80019b4:	4240      	negs	r0, r0
 80019b6:	1824      	adds	r4, r4, r0
 80019b8:	0008      	movs	r0, r1
 80019ba:	01e1      	lsls	r1, r4, #7
 80019bc:	d506      	bpl.n	80019cc <__aeabi_dmul+0x348>
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	00c9      	lsls	r1, r1, #3
 80019c2:	468c      	mov	ip, r1
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <__aeabi_dmul+0x36c>)
 80019c6:	401c      	ands	r4, r3
 80019c8:	9b02      	ldr	r3, [sp, #8]
 80019ca:	4463      	add	r3, ip
 80019cc:	4909      	ldr	r1, [pc, #36]	; (80019f4 <__aeabi_dmul+0x370>)
 80019ce:	428b      	cmp	r3, r1
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_dmul+0x350>
 80019d2:	e710      	b.n	80017f6 <__aeabi_dmul+0x172>
 80019d4:	0761      	lsls	r1, r4, #29
 80019d6:	08c5      	lsrs	r5, r0, #3
 80019d8:	0264      	lsls	r4, r4, #9
 80019da:	055b      	lsls	r3, r3, #21
 80019dc:	430d      	orrs	r5, r1
 80019de:	0b24      	lsrs	r4, r4, #12
 80019e0:	0d5b      	lsrs	r3, r3, #21
 80019e2:	e6c1      	b.n	8001768 <__aeabi_dmul+0xe4>
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	fffffc01 	.word	0xfffffc01
 80019ec:	000003ff 	.word	0x000003ff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	000007fe 	.word	0x000007fe
 80019f8:	464b      	mov	r3, r9
 80019fa:	4323      	orrs	r3, r4
 80019fc:	d059      	beq.n	8001ab2 <__aeabi_dmul+0x42e>
 80019fe:	2c00      	cmp	r4, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dmul+0x380>
 8001a02:	e0a3      	b.n	8001b4c <__aeabi_dmul+0x4c8>
 8001a04:	0020      	movs	r0, r4
 8001a06:	f000 fd0d 	bl	8002424 <__clzsi2>
 8001a0a:	0001      	movs	r1, r0
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	390b      	subs	r1, #11
 8001a10:	221d      	movs	r2, #29
 8001a12:	1a52      	subs	r2, r2, r1
 8001a14:	4649      	mov	r1, r9
 8001a16:	0018      	movs	r0, r3
 8001a18:	40d1      	lsrs	r1, r2
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	3808      	subs	r0, #8
 8001a1e:	4082      	lsls	r2, r0
 8001a20:	4084      	lsls	r4, r0
 8001a22:	0010      	movs	r0, r2
 8001a24:	430c      	orrs	r4, r1
 8001a26:	4a74      	ldr	r2, [pc, #464]	; (8001bf8 <__aeabi_dmul+0x574>)
 8001a28:	1aeb      	subs	r3, r5, r3
 8001a2a:	4694      	mov	ip, r2
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	4463      	add	r3, ip
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	407a      	eors	r2, r7
 8001a36:	3301      	adds	r3, #1
 8001a38:	2100      	movs	r1, #0
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2e0a      	cmp	r6, #10
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dmul+0x3c0>
 8001a42:	e667      	b.n	8001714 <__aeabi_dmul+0x90>
 8001a44:	e683      	b.n	800174e <__aeabi_dmul+0xca>
 8001a46:	465b      	mov	r3, fp
 8001a48:	4303      	orrs	r3, r0
 8001a4a:	469a      	mov	sl, r3
 8001a4c:	d02a      	beq.n	8001aa4 <__aeabi_dmul+0x420>
 8001a4e:	465b      	mov	r3, fp
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d06d      	beq.n	8001b30 <__aeabi_dmul+0x4ac>
 8001a54:	4658      	mov	r0, fp
 8001a56:	f000 fce5 	bl	8002424 <__clzsi2>
 8001a5a:	0001      	movs	r1, r0
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	390b      	subs	r1, #11
 8001a60:	221d      	movs	r2, #29
 8001a62:	1a52      	subs	r2, r2, r1
 8001a64:	0021      	movs	r1, r4
 8001a66:	0018      	movs	r0, r3
 8001a68:	465d      	mov	r5, fp
 8001a6a:	40d1      	lsrs	r1, r2
 8001a6c:	3808      	subs	r0, #8
 8001a6e:	4085      	lsls	r5, r0
 8001a70:	000a      	movs	r2, r1
 8001a72:	4084      	lsls	r4, r0
 8001a74:	432a      	orrs	r2, r5
 8001a76:	4693      	mov	fp, r2
 8001a78:	46a2      	mov	sl, r4
 8001a7a:	4d5f      	ldr	r5, [pc, #380]	; (8001bf8 <__aeabi_dmul+0x574>)
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	1aed      	subs	r5, r5, r3
 8001a80:	2300      	movs	r3, #0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e625      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001a86:	465b      	mov	r3, fp
 8001a88:	4303      	orrs	r3, r0
 8001a8a:	469a      	mov	sl, r3
 8001a8c:	d105      	bne.n	8001a9a <__aeabi_dmul+0x416>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	469b      	mov	fp, r3
 8001a92:	3302      	adds	r3, #2
 8001a94:	2608      	movs	r6, #8
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e61b      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	4682      	mov	sl, r0
 8001a9e:	260c      	movs	r6, #12
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	e616      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	469b      	mov	fp, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	2604      	movs	r6, #4
 8001aac:	2500      	movs	r5, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	e60f      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	9501      	str	r5, [sp, #4]
 8001ab8:	431e      	orrs	r6, r3
 8001aba:	9b01      	ldr	r3, [sp, #4]
 8001abc:	407a      	eors	r2, r7
 8001abe:	3301      	adds	r3, #1
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	2e0a      	cmp	r6, #10
 8001acc:	dd00      	ble.n	8001ad0 <__aeabi_dmul+0x44c>
 8001ace:	e621      	b.n	8001714 <__aeabi_dmul+0x90>
 8001ad0:	e63d      	b.n	800174e <__aeabi_dmul+0xca>
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	1ac9      	subs	r1, r1, r3
 8001ad6:	2938      	cmp	r1, #56	; 0x38
 8001ad8:	dd00      	ble.n	8001adc <__aeabi_dmul+0x458>
 8001ada:	e642      	b.n	8001762 <__aeabi_dmul+0xde>
 8001adc:	291f      	cmp	r1, #31
 8001ade:	dd47      	ble.n	8001b70 <__aeabi_dmul+0x4ec>
 8001ae0:	261f      	movs	r6, #31
 8001ae2:	0025      	movs	r5, r4
 8001ae4:	4276      	negs	r6, r6
 8001ae6:	1af3      	subs	r3, r6, r3
 8001ae8:	40dd      	lsrs	r5, r3
 8001aea:	002b      	movs	r3, r5
 8001aec:	2920      	cmp	r1, #32
 8001aee:	d005      	beq.n	8001afc <__aeabi_dmul+0x478>
 8001af0:	4942      	ldr	r1, [pc, #264]	; (8001bfc <__aeabi_dmul+0x578>)
 8001af2:	9d02      	ldr	r5, [sp, #8]
 8001af4:	468c      	mov	ip, r1
 8001af6:	4465      	add	r5, ip
 8001af8:	40ac      	lsls	r4, r5
 8001afa:	4320      	orrs	r0, r4
 8001afc:	1e41      	subs	r1, r0, #1
 8001afe:	4188      	sbcs	r0, r1
 8001b00:	4318      	orrs	r0, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2400      	movs	r4, #0
 8001b08:	4005      	ands	r5, r0
 8001b0a:	4203      	tst	r3, r0
 8001b0c:	d04a      	beq.n	8001ba4 <__aeabi_dmul+0x520>
 8001b0e:	230f      	movs	r3, #15
 8001b10:	2400      	movs	r4, #0
 8001b12:	4003      	ands	r3, r0
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d042      	beq.n	8001b9e <__aeabi_dmul+0x51a>
 8001b18:	1d03      	adds	r3, r0, #4
 8001b1a:	4283      	cmp	r3, r0
 8001b1c:	4180      	sbcs	r0, r0
 8001b1e:	4240      	negs	r0, r0
 8001b20:	1824      	adds	r4, r4, r0
 8001b22:	0018      	movs	r0, r3
 8001b24:	0223      	lsls	r3, r4, #8
 8001b26:	d53a      	bpl.n	8001b9e <__aeabi_dmul+0x51a>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	e61b      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001b30:	f000 fc78 	bl	8002424 <__clzsi2>
 8001b34:	0001      	movs	r1, r0
 8001b36:	0003      	movs	r3, r0
 8001b38:	3115      	adds	r1, #21
 8001b3a:	3320      	adds	r3, #32
 8001b3c:	291c      	cmp	r1, #28
 8001b3e:	dd8f      	ble.n	8001a60 <__aeabi_dmul+0x3dc>
 8001b40:	3808      	subs	r0, #8
 8001b42:	2200      	movs	r2, #0
 8001b44:	4084      	lsls	r4, r0
 8001b46:	4692      	mov	sl, r2
 8001b48:	46a3      	mov	fp, r4
 8001b4a:	e796      	b.n	8001a7a <__aeabi_dmul+0x3f6>
 8001b4c:	f000 fc6a 	bl	8002424 <__clzsi2>
 8001b50:	0001      	movs	r1, r0
 8001b52:	0003      	movs	r3, r0
 8001b54:	3115      	adds	r1, #21
 8001b56:	3320      	adds	r3, #32
 8001b58:	291c      	cmp	r1, #28
 8001b5a:	dc00      	bgt.n	8001b5e <__aeabi_dmul+0x4da>
 8001b5c:	e758      	b.n	8001a10 <__aeabi_dmul+0x38c>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	464c      	mov	r4, r9
 8001b62:	3a08      	subs	r2, #8
 8001b64:	2000      	movs	r0, #0
 8001b66:	4094      	lsls	r4, r2
 8001b68:	e75d      	b.n	8001a26 <__aeabi_dmul+0x3a2>
 8001b6a:	9b01      	ldr	r3, [sp, #4]
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	e711      	b.n	8001994 <__aeabi_dmul+0x310>
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <__aeabi_dmul+0x57c>)
 8001b72:	0026      	movs	r6, r4
 8001b74:	469c      	mov	ip, r3
 8001b76:	0003      	movs	r3, r0
 8001b78:	9d02      	ldr	r5, [sp, #8]
 8001b7a:	40cb      	lsrs	r3, r1
 8001b7c:	4465      	add	r5, ip
 8001b7e:	40ae      	lsls	r6, r5
 8001b80:	431e      	orrs	r6, r3
 8001b82:	0003      	movs	r3, r0
 8001b84:	40ab      	lsls	r3, r5
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	4183      	sbcs	r3, r0
 8001b8a:	0030      	movs	r0, r6
 8001b8c:	4318      	orrs	r0, r3
 8001b8e:	40cc      	lsrs	r4, r1
 8001b90:	0743      	lsls	r3, r0, #29
 8001b92:	d0c7      	beq.n	8001b24 <__aeabi_dmul+0x4a0>
 8001b94:	230f      	movs	r3, #15
 8001b96:	4003      	ands	r3, r0
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d1bd      	bne.n	8001b18 <__aeabi_dmul+0x494>
 8001b9c:	e7c2      	b.n	8001b24 <__aeabi_dmul+0x4a0>
 8001b9e:	0765      	lsls	r5, r4, #29
 8001ba0:	0264      	lsls	r4, r4, #9
 8001ba2:	0b24      	lsrs	r4, r4, #12
 8001ba4:	08c0      	lsrs	r0, r0, #3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	4305      	orrs	r5, r0
 8001baa:	e5dd      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001bac:	2500      	movs	r5, #0
 8001bae:	2302      	movs	r3, #2
 8001bb0:	2e0f      	cmp	r6, #15
 8001bb2:	d10c      	bne.n	8001bce <__aeabi_dmul+0x54a>
 8001bb4:	2480      	movs	r4, #128	; 0x80
 8001bb6:	465b      	mov	r3, fp
 8001bb8:	0324      	lsls	r4, r4, #12
 8001bba:	4223      	tst	r3, r4
 8001bbc:	d00e      	beq.n	8001bdc <__aeabi_dmul+0x558>
 8001bbe:	4221      	tst	r1, r4
 8001bc0:	d10c      	bne.n	8001bdc <__aeabi_dmul+0x558>
 8001bc2:	430c      	orrs	r4, r1
 8001bc4:	0324      	lsls	r4, r4, #12
 8001bc6:	003a      	movs	r2, r7
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <__aeabi_dmul+0x580>)
 8001bca:	0b24      	lsrs	r4, r4, #12
 8001bcc:	e5cc      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001bce:	2e0b      	cmp	r6, #11
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_dmul+0x550>
 8001bd2:	e5a2      	b.n	800171a <__aeabi_dmul+0x96>
 8001bd4:	468b      	mov	fp, r1
 8001bd6:	46aa      	mov	sl, r5
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	e5f7      	b.n	80017cc <__aeabi_dmul+0x148>
 8001bdc:	2480      	movs	r4, #128	; 0x80
 8001bde:	465b      	mov	r3, fp
 8001be0:	0324      	lsls	r4, r4, #12
 8001be2:	431c      	orrs	r4, r3
 8001be4:	0324      	lsls	r4, r4, #12
 8001be6:	4642      	mov	r2, r8
 8001be8:	4655      	mov	r5, sl
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <__aeabi_dmul+0x580>)
 8001bec:	0b24      	lsrs	r4, r4, #12
 8001bee:	e5bb      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001bf0:	464d      	mov	r5, r9
 8001bf2:	0021      	movs	r1, r4
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e7db      	b.n	8001bb0 <__aeabi_dmul+0x52c>
 8001bf8:	fffffc0d 	.word	0xfffffc0d
 8001bfc:	0000043e 	.word	0x0000043e
 8001c00:	0000041e 	.word	0x0000041e
 8001c04:	000007ff 	.word	0x000007ff

08001c08 <__aeabi_dsub>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	464e      	mov	r6, r9
 8001c0e:	4645      	mov	r5, r8
 8001c10:	46de      	mov	lr, fp
 8001c12:	b5e0      	push	{r5, r6, r7, lr}
 8001c14:	000d      	movs	r5, r1
 8001c16:	0004      	movs	r4, r0
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	032b      	lsls	r3, r5, #12
 8001c1e:	0a5b      	lsrs	r3, r3, #9
 8001c20:	0f62      	lsrs	r2, r4, #29
 8001c22:	431a      	orrs	r2, r3
 8001c24:	00e3      	lsls	r3, r4, #3
 8001c26:	030c      	lsls	r4, r1, #12
 8001c28:	0a64      	lsrs	r4, r4, #9
 8001c2a:	0f47      	lsrs	r7, r0, #29
 8001c2c:	4327      	orrs	r7, r4
 8001c2e:	4cd0      	ldr	r4, [pc, #832]	; (8001f70 <__aeabi_dsub+0x368>)
 8001c30:	006e      	lsls	r6, r5, #1
 8001c32:	4691      	mov	r9, r2
 8001c34:	b083      	sub	sp, #12
 8001c36:	004a      	lsls	r2, r1, #1
 8001c38:	00c0      	lsls	r0, r0, #3
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	46a2      	mov	sl, r4
 8001c3e:	0d76      	lsrs	r6, r6, #21
 8001c40:	0fed      	lsrs	r5, r5, #31
 8001c42:	0d52      	lsrs	r2, r2, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	9001      	str	r0, [sp, #4]
 8001c48:	42a2      	cmp	r2, r4
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x46>
 8001c4c:	e0b9      	b.n	8001dc2 <__aeabi_dsub+0x1ba>
 8001c4e:	2401      	movs	r4, #1
 8001c50:	4061      	eors	r1, r4
 8001c52:	468b      	mov	fp, r1
 8001c54:	428d      	cmp	r5, r1
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x52>
 8001c58:	e08d      	b.n	8001d76 <__aeabi_dsub+0x16e>
 8001c5a:	1ab4      	subs	r4, r6, r2
 8001c5c:	46a4      	mov	ip, r4
 8001c5e:	2c00      	cmp	r4, #0
 8001c60:	dc00      	bgt.n	8001c64 <__aeabi_dsub+0x5c>
 8001c62:	e0b7      	b.n	8001dd4 <__aeabi_dsub+0x1cc>
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x62>
 8001c68:	e0cb      	b.n	8001e02 <__aeabi_dsub+0x1fa>
 8001c6a:	4ac1      	ldr	r2, [pc, #772]	; (8001f70 <__aeabi_dsub+0x368>)
 8001c6c:	4296      	cmp	r6, r2
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dsub+0x6a>
 8001c70:	e186      	b.n	8001f80 <__aeabi_dsub+0x378>
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	0412      	lsls	r2, r2, #16
 8001c76:	4317      	orrs	r7, r2
 8001c78:	4662      	mov	r2, ip
 8001c7a:	2a38      	cmp	r2, #56	; 0x38
 8001c7c:	dd00      	ble.n	8001c80 <__aeabi_dsub+0x78>
 8001c7e:	e1a4      	b.n	8001fca <__aeabi_dsub+0x3c2>
 8001c80:	2a1f      	cmp	r2, #31
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_dsub+0x7e>
 8001c84:	e21d      	b.n	80020c2 <__aeabi_dsub+0x4ba>
 8001c86:	4661      	mov	r1, ip
 8001c88:	2220      	movs	r2, #32
 8001c8a:	003c      	movs	r4, r7
 8001c8c:	1a52      	subs	r2, r2, r1
 8001c8e:	0001      	movs	r1, r0
 8001c90:	4090      	lsls	r0, r2
 8001c92:	4094      	lsls	r4, r2
 8001c94:	1e42      	subs	r2, r0, #1
 8001c96:	4190      	sbcs	r0, r2
 8001c98:	4662      	mov	r2, ip
 8001c9a:	46a0      	mov	r8, r4
 8001c9c:	4664      	mov	r4, ip
 8001c9e:	40d7      	lsrs	r7, r2
 8001ca0:	464a      	mov	r2, r9
 8001ca2:	40e1      	lsrs	r1, r4
 8001ca4:	4644      	mov	r4, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4691      	mov	r9, r2
 8001caa:	430c      	orrs	r4, r1
 8001cac:	4304      	orrs	r4, r0
 8001cae:	1b1c      	subs	r4, r3, r4
 8001cb0:	42a3      	cmp	r3, r4
 8001cb2:	4192      	sbcs	r2, r2
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	4252      	negs	r2, r2
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	469a      	mov	sl, r3
 8001cbc:	4653      	mov	r3, sl
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	d400      	bmi.n	8001cc4 <__aeabi_dsub+0xbc>
 8001cc2:	e12b      	b.n	8001f1c <__aeabi_dsub+0x314>
 8001cc4:	4653      	mov	r3, sl
 8001cc6:	025a      	lsls	r2, r3, #9
 8001cc8:	0a53      	lsrs	r3, r2, #9
 8001cca:	469a      	mov	sl, r3
 8001ccc:	4653      	mov	r3, sl
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0xcc>
 8001cd2:	e166      	b.n	8001fa2 <__aeabi_dsub+0x39a>
 8001cd4:	4650      	mov	r0, sl
 8001cd6:	f000 fba5 	bl	8002424 <__clzsi2>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	3b08      	subs	r3, #8
 8001cde:	2220      	movs	r2, #32
 8001ce0:	0020      	movs	r0, r4
 8001ce2:	1ad2      	subs	r2, r2, r3
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	40d0      	lsrs	r0, r2
 8001ce8:	4099      	lsls	r1, r3
 8001cea:	0002      	movs	r2, r0
 8001cec:	409c      	lsls	r4, r3
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	429e      	cmp	r6, r3
 8001cf2:	dd00      	ble.n	8001cf6 <__aeabi_dsub+0xee>
 8001cf4:	e164      	b.n	8001fc0 <__aeabi_dsub+0x3b8>
 8001cf6:	1b9b      	subs	r3, r3, r6
 8001cf8:	1c59      	adds	r1, r3, #1
 8001cfa:	291f      	cmp	r1, #31
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_dsub+0xf8>
 8001cfe:	e0fe      	b.n	8001efe <__aeabi_dsub+0x2f6>
 8001d00:	2320      	movs	r3, #32
 8001d02:	0010      	movs	r0, r2
 8001d04:	0026      	movs	r6, r4
 8001d06:	1a5b      	subs	r3, r3, r1
 8001d08:	409c      	lsls	r4, r3
 8001d0a:	4098      	lsls	r0, r3
 8001d0c:	40ce      	lsrs	r6, r1
 8001d0e:	40ca      	lsrs	r2, r1
 8001d10:	1e63      	subs	r3, r4, #1
 8001d12:	419c      	sbcs	r4, r3
 8001d14:	4330      	orrs	r0, r6
 8001d16:	4692      	mov	sl, r2
 8001d18:	2600      	movs	r6, #0
 8001d1a:	4304      	orrs	r4, r0
 8001d1c:	0763      	lsls	r3, r4, #29
 8001d1e:	d009      	beq.n	8001d34 <__aeabi_dsub+0x12c>
 8001d20:	230f      	movs	r3, #15
 8001d22:	4023      	ands	r3, r4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d005      	beq.n	8001d34 <__aeabi_dsub+0x12c>
 8001d28:	1d23      	adds	r3, r4, #4
 8001d2a:	42a3      	cmp	r3, r4
 8001d2c:	41a4      	sbcs	r4, r4
 8001d2e:	4264      	negs	r4, r4
 8001d30:	44a2      	add	sl, r4
 8001d32:	001c      	movs	r4, r3
 8001d34:	4653      	mov	r3, sl
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	d400      	bmi.n	8001d3c <__aeabi_dsub+0x134>
 8001d3a:	e0f2      	b.n	8001f22 <__aeabi_dsub+0x31a>
 8001d3c:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <__aeabi_dsub+0x368>)
 8001d3e:	3601      	adds	r6, #1
 8001d40:	429e      	cmp	r6, r3
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x13e>
 8001d44:	e10f      	b.n	8001f66 <__aeabi_dsub+0x35e>
 8001d46:	4653      	mov	r3, sl
 8001d48:	498a      	ldr	r1, [pc, #552]	; (8001f74 <__aeabi_dsub+0x36c>)
 8001d4a:	08e4      	lsrs	r4, r4, #3
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	0019      	movs	r1, r3
 8001d50:	075b      	lsls	r3, r3, #29
 8001d52:	4323      	orrs	r3, r4
 8001d54:	0572      	lsls	r2, r6, #21
 8001d56:	024c      	lsls	r4, r1, #9
 8001d58:	0b24      	lsrs	r4, r4, #12
 8001d5a:	0d52      	lsrs	r2, r2, #21
 8001d5c:	0512      	lsls	r2, r2, #20
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	07ed      	lsls	r5, r5, #31
 8001d62:	432a      	orrs	r2, r5
 8001d64:	0018      	movs	r0, r3
 8001d66:	0011      	movs	r1, r2
 8001d68:	b003      	add	sp, #12
 8001d6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d6c:	46bb      	mov	fp, r7
 8001d6e:	46b2      	mov	sl, r6
 8001d70:	46a9      	mov	r9, r5
 8001d72:	46a0      	mov	r8, r4
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d76:	1ab4      	subs	r4, r6, r2
 8001d78:	46a4      	mov	ip, r4
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	dd59      	ble.n	8001e32 <__aeabi_dsub+0x22a>
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x17c>
 8001d82:	e0b0      	b.n	8001ee6 <__aeabi_dsub+0x2de>
 8001d84:	4556      	cmp	r6, sl
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x182>
 8001d88:	e0fa      	b.n	8001f80 <__aeabi_dsub+0x378>
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	0412      	lsls	r2, r2, #16
 8001d8e:	4317      	orrs	r7, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a38      	cmp	r2, #56	; 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x190>
 8001d96:	e0d4      	b.n	8001f42 <__aeabi_dsub+0x33a>
 8001d98:	2a1f      	cmp	r2, #31
 8001d9a:	dc00      	bgt.n	8001d9e <__aeabi_dsub+0x196>
 8001d9c:	e1c0      	b.n	8002120 <__aeabi_dsub+0x518>
 8001d9e:	0039      	movs	r1, r7
 8001da0:	3a20      	subs	r2, #32
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4662      	mov	r2, ip
 8001da6:	2a20      	cmp	r2, #32
 8001da8:	d006      	beq.n	8001db8 <__aeabi_dsub+0x1b0>
 8001daa:	4664      	mov	r4, ip
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	1b12      	subs	r2, r2, r4
 8001db0:	003c      	movs	r4, r7
 8001db2:	4094      	lsls	r4, r2
 8001db4:	4304      	orrs	r4, r0
 8001db6:	9401      	str	r4, [sp, #4]
 8001db8:	9c01      	ldr	r4, [sp, #4]
 8001dba:	1e62      	subs	r2, r4, #1
 8001dbc:	4194      	sbcs	r4, r2
 8001dbe:	430c      	orrs	r4, r1
 8001dc0:	e0c3      	b.n	8001f4a <__aeabi_dsub+0x342>
 8001dc2:	003c      	movs	r4, r7
 8001dc4:	4304      	orrs	r4, r0
 8001dc6:	d02b      	beq.n	8001e20 <__aeabi_dsub+0x218>
 8001dc8:	468b      	mov	fp, r1
 8001dca:	428d      	cmp	r5, r1
 8001dcc:	d02e      	beq.n	8001e2c <__aeabi_dsub+0x224>
 8001dce:	4c6a      	ldr	r4, [pc, #424]	; (8001f78 <__aeabi_dsub+0x370>)
 8001dd0:	46a4      	mov	ip, r4
 8001dd2:	44b4      	add	ip, r6
 8001dd4:	4664      	mov	r4, ip
 8001dd6:	2c00      	cmp	r4, #0
 8001dd8:	d05f      	beq.n	8001e9a <__aeabi_dsub+0x292>
 8001dda:	1b94      	subs	r4, r2, r6
 8001ddc:	46a4      	mov	ip, r4
 8001dde:	2e00      	cmp	r6, #0
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x1dc>
 8001de2:	e120      	b.n	8002026 <__aeabi_dsub+0x41e>
 8001de4:	464c      	mov	r4, r9
 8001de6:	431c      	orrs	r4, r3
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x1e4>
 8001dea:	e1c7      	b.n	800217c <__aeabi_dsub+0x574>
 8001dec:	4661      	mov	r1, ip
 8001dee:	1e4c      	subs	r4, r1, #1
 8001df0:	2901      	cmp	r1, #1
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x1ee>
 8001df4:	e223      	b.n	800223e <__aeabi_dsub+0x636>
 8001df6:	4d5e      	ldr	r5, [pc, #376]	; (8001f70 <__aeabi_dsub+0x368>)
 8001df8:	45ac      	cmp	ip, r5
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x1f6>
 8001dfc:	e1d8      	b.n	80021b0 <__aeabi_dsub+0x5a8>
 8001dfe:	46a4      	mov	ip, r4
 8001e00:	e11a      	b.n	8002038 <__aeabi_dsub+0x430>
 8001e02:	003a      	movs	r2, r7
 8001e04:	4302      	orrs	r2, r0
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x202>
 8001e08:	e0e4      	b.n	8001fd4 <__aeabi_dsub+0x3cc>
 8001e0a:	0022      	movs	r2, r4
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	2c01      	cmp	r4, #1
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x20c>
 8001e12:	e1c3      	b.n	800219c <__aeabi_dsub+0x594>
 8001e14:	4956      	ldr	r1, [pc, #344]	; (8001f70 <__aeabi_dsub+0x368>)
 8001e16:	428c      	cmp	r4, r1
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x214>
 8001e1a:	e0b1      	b.n	8001f80 <__aeabi_dsub+0x378>
 8001e1c:	4694      	mov	ip, r2
 8001e1e:	e72b      	b.n	8001c78 <__aeabi_dsub+0x70>
 8001e20:	2401      	movs	r4, #1
 8001e22:	4061      	eors	r1, r4
 8001e24:	468b      	mov	fp, r1
 8001e26:	428d      	cmp	r5, r1
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dsub+0x224>
 8001e2a:	e716      	b.n	8001c5a <__aeabi_dsub+0x52>
 8001e2c:	4952      	ldr	r1, [pc, #328]	; (8001f78 <__aeabi_dsub+0x370>)
 8001e2e:	468c      	mov	ip, r1
 8001e30:	44b4      	add	ip, r6
 8001e32:	4664      	mov	r4, ip
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x232>
 8001e38:	e0d3      	b.n	8001fe2 <__aeabi_dsub+0x3da>
 8001e3a:	1b91      	subs	r1, r2, r6
 8001e3c:	468c      	mov	ip, r1
 8001e3e:	2e00      	cmp	r6, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x23c>
 8001e42:	e15e      	b.n	8002102 <__aeabi_dsub+0x4fa>
 8001e44:	494a      	ldr	r1, [pc, #296]	; (8001f70 <__aeabi_dsub+0x368>)
 8001e46:	428a      	cmp	r2, r1
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x244>
 8001e4a:	e1be      	b.n	80021ca <__aeabi_dsub+0x5c2>
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	464c      	mov	r4, r9
 8001e50:	0409      	lsls	r1, r1, #16
 8001e52:	430c      	orrs	r4, r1
 8001e54:	46a1      	mov	r9, r4
 8001e56:	4661      	mov	r1, ip
 8001e58:	2938      	cmp	r1, #56	; 0x38
 8001e5a:	dd00      	ble.n	8001e5e <__aeabi_dsub+0x256>
 8001e5c:	e1ba      	b.n	80021d4 <__aeabi_dsub+0x5cc>
 8001e5e:	291f      	cmp	r1, #31
 8001e60:	dd00      	ble.n	8001e64 <__aeabi_dsub+0x25c>
 8001e62:	e227      	b.n	80022b4 <__aeabi_dsub+0x6ac>
 8001e64:	2420      	movs	r4, #32
 8001e66:	1a64      	subs	r4, r4, r1
 8001e68:	4649      	mov	r1, r9
 8001e6a:	40a1      	lsls	r1, r4
 8001e6c:	001e      	movs	r6, r3
 8001e6e:	4688      	mov	r8, r1
 8001e70:	4661      	mov	r1, ip
 8001e72:	40a3      	lsls	r3, r4
 8001e74:	40ce      	lsrs	r6, r1
 8001e76:	4641      	mov	r1, r8
 8001e78:	1e5c      	subs	r4, r3, #1
 8001e7a:	41a3      	sbcs	r3, r4
 8001e7c:	4331      	orrs	r1, r6
 8001e7e:	4319      	orrs	r1, r3
 8001e80:	000c      	movs	r4, r1
 8001e82:	4663      	mov	r3, ip
 8001e84:	4649      	mov	r1, r9
 8001e86:	40d9      	lsrs	r1, r3
 8001e88:	187f      	adds	r7, r7, r1
 8001e8a:	1824      	adds	r4, r4, r0
 8001e8c:	4284      	cmp	r4, r0
 8001e8e:	419b      	sbcs	r3, r3
 8001e90:	425b      	negs	r3, r3
 8001e92:	469a      	mov	sl, r3
 8001e94:	0016      	movs	r6, r2
 8001e96:	44ba      	add	sl, r7
 8001e98:	e05d      	b.n	8001f56 <__aeabi_dsub+0x34e>
 8001e9a:	4c38      	ldr	r4, [pc, #224]	; (8001f7c <__aeabi_dsub+0x374>)
 8001e9c:	1c72      	adds	r2, r6, #1
 8001e9e:	4222      	tst	r2, r4
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dsub+0x29c>
 8001ea2:	e0df      	b.n	8002064 <__aeabi_dsub+0x45c>
 8001ea4:	464a      	mov	r2, r9
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	2e00      	cmp	r6, #0
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x2a6>
 8001eac:	e15c      	b.n	8002168 <__aeabi_dsub+0x560>
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x2ac>
 8001eb2:	e1cf      	b.n	8002254 <__aeabi_dsub+0x64c>
 8001eb4:	003a      	movs	r2, r7
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x2b4>
 8001eba:	e17f      	b.n	80021bc <__aeabi_dsub+0x5b4>
 8001ebc:	1a1c      	subs	r4, r3, r0
 8001ebe:	464a      	mov	r2, r9
 8001ec0:	42a3      	cmp	r3, r4
 8001ec2:	4189      	sbcs	r1, r1
 8001ec4:	1bd2      	subs	r2, r2, r7
 8001ec6:	4249      	negs	r1, r1
 8001ec8:	1a52      	subs	r2, r2, r1
 8001eca:	4692      	mov	sl, r2
 8001ecc:	0212      	lsls	r2, r2, #8
 8001ece:	d400      	bmi.n	8001ed2 <__aeabi_dsub+0x2ca>
 8001ed0:	e20a      	b.n	80022e8 <__aeabi_dsub+0x6e0>
 8001ed2:	1ac4      	subs	r4, r0, r3
 8001ed4:	42a0      	cmp	r0, r4
 8001ed6:	4180      	sbcs	r0, r0
 8001ed8:	464b      	mov	r3, r9
 8001eda:	4240      	negs	r0, r0
 8001edc:	1aff      	subs	r7, r7, r3
 8001ede:	1a3b      	subs	r3, r7, r0
 8001ee0:	469a      	mov	sl, r3
 8001ee2:	465d      	mov	r5, fp
 8001ee4:	e71a      	b.n	8001d1c <__aeabi_dsub+0x114>
 8001ee6:	003a      	movs	r2, r7
 8001ee8:	4302      	orrs	r2, r0
 8001eea:	d073      	beq.n	8001fd4 <__aeabi_dsub+0x3cc>
 8001eec:	0022      	movs	r2, r4
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	2c01      	cmp	r4, #1
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x2ee>
 8001ef4:	e0cb      	b.n	800208e <__aeabi_dsub+0x486>
 8001ef6:	4554      	cmp	r4, sl
 8001ef8:	d042      	beq.n	8001f80 <__aeabi_dsub+0x378>
 8001efa:	4694      	mov	ip, r2
 8001efc:	e748      	b.n	8001d90 <__aeabi_dsub+0x188>
 8001efe:	0010      	movs	r0, r2
 8001f00:	3b1f      	subs	r3, #31
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	2920      	cmp	r1, #32
 8001f06:	d003      	beq.n	8001f10 <__aeabi_dsub+0x308>
 8001f08:	2340      	movs	r3, #64	; 0x40
 8001f0a:	1a5b      	subs	r3, r3, r1
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	4314      	orrs	r4, r2
 8001f10:	1e63      	subs	r3, r4, #1
 8001f12:	419c      	sbcs	r4, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	2600      	movs	r6, #0
 8001f18:	469a      	mov	sl, r3
 8001f1a:	4304      	orrs	r4, r0
 8001f1c:	0763      	lsls	r3, r4, #29
 8001f1e:	d000      	beq.n	8001f22 <__aeabi_dsub+0x31a>
 8001f20:	e6fe      	b.n	8001d20 <__aeabi_dsub+0x118>
 8001f22:	4652      	mov	r2, sl
 8001f24:	08e3      	lsrs	r3, r4, #3
 8001f26:	0752      	lsls	r2, r2, #29
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	4652      	mov	r2, sl
 8001f2c:	46b4      	mov	ip, r6
 8001f2e:	08d2      	lsrs	r2, r2, #3
 8001f30:	490f      	ldr	r1, [pc, #60]	; (8001f70 <__aeabi_dsub+0x368>)
 8001f32:	458c      	cmp	ip, r1
 8001f34:	d02a      	beq.n	8001f8c <__aeabi_dsub+0x384>
 8001f36:	0312      	lsls	r2, r2, #12
 8001f38:	0b14      	lsrs	r4, r2, #12
 8001f3a:	4662      	mov	r2, ip
 8001f3c:	0552      	lsls	r2, r2, #21
 8001f3e:	0d52      	lsrs	r2, r2, #21
 8001f40:	e70c      	b.n	8001d5c <__aeabi_dsub+0x154>
 8001f42:	003c      	movs	r4, r7
 8001f44:	4304      	orrs	r4, r0
 8001f46:	1e62      	subs	r2, r4, #1
 8001f48:	4194      	sbcs	r4, r2
 8001f4a:	18e4      	adds	r4, r4, r3
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	4192      	sbcs	r2, r2
 8001f50:	4252      	negs	r2, r2
 8001f52:	444a      	add	r2, r9
 8001f54:	4692      	mov	sl, r2
 8001f56:	4653      	mov	r3, sl
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	d5df      	bpl.n	8001f1c <__aeabi_dsub+0x314>
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__aeabi_dsub+0x368>)
 8001f5e:	3601      	adds	r6, #1
 8001f60:	429e      	cmp	r6, r3
 8001f62:	d000      	beq.n	8001f66 <__aeabi_dsub+0x35e>
 8001f64:	e0a0      	b.n	80020a8 <__aeabi_dsub+0x4a0>
 8001f66:	0032      	movs	r2, r6
 8001f68:	2400      	movs	r4, #0
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e6f6      	b.n	8001d5c <__aeabi_dsub+0x154>
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	000007ff 	.word	0x000007ff
 8001f74:	ff7fffff 	.word	0xff7fffff
 8001f78:	fffff801 	.word	0xfffff801
 8001f7c:	000007fe 	.word	0x000007fe
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	464a      	mov	r2, r9
 8001f84:	0752      	lsls	r2, r2, #29
 8001f86:	4313      	orrs	r3, r2
 8001f88:	464a      	mov	r2, r9
 8001f8a:	08d2      	lsrs	r2, r2, #3
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x38c>
 8001f92:	e1b5      	b.n	8002300 <__aeabi_dsub+0x6f8>
 8001f94:	2480      	movs	r4, #128	; 0x80
 8001f96:	0324      	lsls	r4, r4, #12
 8001f98:	4314      	orrs	r4, r2
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	4ad5      	ldr	r2, [pc, #852]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8001f9e:	0b24      	lsrs	r4, r4, #12
 8001fa0:	e6dc      	b.n	8001d5c <__aeabi_dsub+0x154>
 8001fa2:	0020      	movs	r0, r4
 8001fa4:	f000 fa3e 	bl	8002424 <__clzsi2>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	3318      	adds	r3, #24
 8001fac:	2b1f      	cmp	r3, #31
 8001fae:	dc00      	bgt.n	8001fb2 <__aeabi_dsub+0x3aa>
 8001fb0:	e695      	b.n	8001cde <__aeabi_dsub+0xd6>
 8001fb2:	0022      	movs	r2, r4
 8001fb4:	3808      	subs	r0, #8
 8001fb6:	4082      	lsls	r2, r0
 8001fb8:	2400      	movs	r4, #0
 8001fba:	429e      	cmp	r6, r3
 8001fbc:	dc00      	bgt.n	8001fc0 <__aeabi_dsub+0x3b8>
 8001fbe:	e69a      	b.n	8001cf6 <__aeabi_dsub+0xee>
 8001fc0:	1af6      	subs	r6, r6, r3
 8001fc2:	4bcd      	ldr	r3, [pc, #820]	; (80022f8 <__aeabi_dsub+0x6f0>)
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	4692      	mov	sl, r2
 8001fc8:	e6a8      	b.n	8001d1c <__aeabi_dsub+0x114>
 8001fca:	003c      	movs	r4, r7
 8001fcc:	4304      	orrs	r4, r0
 8001fce:	1e62      	subs	r2, r4, #1
 8001fd0:	4194      	sbcs	r4, r2
 8001fd2:	e66c      	b.n	8001cae <__aeabi_dsub+0xa6>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	464a      	mov	r2, r9
 8001fde:	08d2      	lsrs	r2, r2, #3
 8001fe0:	e7a6      	b.n	8001f30 <__aeabi_dsub+0x328>
 8001fe2:	4cc6      	ldr	r4, [pc, #792]	; (80022fc <__aeabi_dsub+0x6f4>)
 8001fe4:	1c72      	adds	r2, r6, #1
 8001fe6:	4222      	tst	r2, r4
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x3e4>
 8001fea:	e0ac      	b.n	8002146 <__aeabi_dsub+0x53e>
 8001fec:	464a      	mov	r2, r9
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	2e00      	cmp	r6, #0
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x3ee>
 8001ff4:	e105      	b.n	8002202 <__aeabi_dsub+0x5fa>
 8001ff6:	2a00      	cmp	r2, #0
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x3f4>
 8001ffa:	e156      	b.n	80022aa <__aeabi_dsub+0x6a2>
 8001ffc:	003a      	movs	r2, r7
 8001ffe:	4302      	orrs	r2, r0
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x3fc>
 8002002:	e0db      	b.n	80021bc <__aeabi_dsub+0x5b4>
 8002004:	181c      	adds	r4, r3, r0
 8002006:	429c      	cmp	r4, r3
 8002008:	419b      	sbcs	r3, r3
 800200a:	444f      	add	r7, r9
 800200c:	46ba      	mov	sl, r7
 800200e:	425b      	negs	r3, r3
 8002010:	449a      	add	sl, r3
 8002012:	4653      	mov	r3, sl
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	d400      	bmi.n	800201a <__aeabi_dsub+0x412>
 8002018:	e780      	b.n	8001f1c <__aeabi_dsub+0x314>
 800201a:	4652      	mov	r2, sl
 800201c:	4bb6      	ldr	r3, [pc, #728]	; (80022f8 <__aeabi_dsub+0x6f0>)
 800201e:	2601      	movs	r6, #1
 8002020:	401a      	ands	r2, r3
 8002022:	4692      	mov	sl, r2
 8002024:	e77a      	b.n	8001f1c <__aeabi_dsub+0x314>
 8002026:	4cb3      	ldr	r4, [pc, #716]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8002028:	42a2      	cmp	r2, r4
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x426>
 800202c:	e0c0      	b.n	80021b0 <__aeabi_dsub+0x5a8>
 800202e:	2480      	movs	r4, #128	; 0x80
 8002030:	464d      	mov	r5, r9
 8002032:	0424      	lsls	r4, r4, #16
 8002034:	4325      	orrs	r5, r4
 8002036:	46a9      	mov	r9, r5
 8002038:	4664      	mov	r4, ip
 800203a:	2c38      	cmp	r4, #56	; 0x38
 800203c:	dc53      	bgt.n	80020e6 <__aeabi_dsub+0x4de>
 800203e:	4661      	mov	r1, ip
 8002040:	2c1f      	cmp	r4, #31
 8002042:	dd00      	ble.n	8002046 <__aeabi_dsub+0x43e>
 8002044:	e0cd      	b.n	80021e2 <__aeabi_dsub+0x5da>
 8002046:	2520      	movs	r5, #32
 8002048:	001e      	movs	r6, r3
 800204a:	1b2d      	subs	r5, r5, r4
 800204c:	464c      	mov	r4, r9
 800204e:	40ab      	lsls	r3, r5
 8002050:	40ac      	lsls	r4, r5
 8002052:	40ce      	lsrs	r6, r1
 8002054:	1e5d      	subs	r5, r3, #1
 8002056:	41ab      	sbcs	r3, r5
 8002058:	4334      	orrs	r4, r6
 800205a:	4323      	orrs	r3, r4
 800205c:	464c      	mov	r4, r9
 800205e:	40cc      	lsrs	r4, r1
 8002060:	1b3f      	subs	r7, r7, r4
 8002062:	e045      	b.n	80020f0 <__aeabi_dsub+0x4e8>
 8002064:	464a      	mov	r2, r9
 8002066:	1a1c      	subs	r4, r3, r0
 8002068:	1bd1      	subs	r1, r2, r7
 800206a:	42a3      	cmp	r3, r4
 800206c:	4192      	sbcs	r2, r2
 800206e:	4252      	negs	r2, r2
 8002070:	4692      	mov	sl, r2
 8002072:	000a      	movs	r2, r1
 8002074:	4651      	mov	r1, sl
 8002076:	1a52      	subs	r2, r2, r1
 8002078:	4692      	mov	sl, r2
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	d500      	bpl.n	8002080 <__aeabi_dsub+0x478>
 800207e:	e083      	b.n	8002188 <__aeabi_dsub+0x580>
 8002080:	4653      	mov	r3, sl
 8002082:	4323      	orrs	r3, r4
 8002084:	d000      	beq.n	8002088 <__aeabi_dsub+0x480>
 8002086:	e621      	b.n	8001ccc <__aeabi_dsub+0xc4>
 8002088:	2200      	movs	r2, #0
 800208a:	2500      	movs	r5, #0
 800208c:	e753      	b.n	8001f36 <__aeabi_dsub+0x32e>
 800208e:	181c      	adds	r4, r3, r0
 8002090:	429c      	cmp	r4, r3
 8002092:	419b      	sbcs	r3, r3
 8002094:	444f      	add	r7, r9
 8002096:	46ba      	mov	sl, r7
 8002098:	425b      	negs	r3, r3
 800209a:	449a      	add	sl, r3
 800209c:	4653      	mov	r3, sl
 800209e:	2601      	movs	r6, #1
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dsub+0x49e>
 80020a4:	e73a      	b.n	8001f1c <__aeabi_dsub+0x314>
 80020a6:	2602      	movs	r6, #2
 80020a8:	4652      	mov	r2, sl
 80020aa:	4b93      	ldr	r3, [pc, #588]	; (80022f8 <__aeabi_dsub+0x6f0>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	401a      	ands	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	4021      	ands	r1, r4
 80020b4:	0862      	lsrs	r2, r4, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	07dc      	lsls	r4, r3, #31
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	469a      	mov	sl, r3
 80020be:	4314      	orrs	r4, r2
 80020c0:	e62c      	b.n	8001d1c <__aeabi_dsub+0x114>
 80020c2:	0039      	movs	r1, r7
 80020c4:	3a20      	subs	r2, #32
 80020c6:	40d1      	lsrs	r1, r2
 80020c8:	4662      	mov	r2, ip
 80020ca:	2a20      	cmp	r2, #32
 80020cc:	d006      	beq.n	80020dc <__aeabi_dsub+0x4d4>
 80020ce:	4664      	mov	r4, ip
 80020d0:	2240      	movs	r2, #64	; 0x40
 80020d2:	1b12      	subs	r2, r2, r4
 80020d4:	003c      	movs	r4, r7
 80020d6:	4094      	lsls	r4, r2
 80020d8:	4304      	orrs	r4, r0
 80020da:	9401      	str	r4, [sp, #4]
 80020dc:	9c01      	ldr	r4, [sp, #4]
 80020de:	1e62      	subs	r2, r4, #1
 80020e0:	4194      	sbcs	r4, r2
 80020e2:	430c      	orrs	r4, r1
 80020e4:	e5e3      	b.n	8001cae <__aeabi_dsub+0xa6>
 80020e6:	4649      	mov	r1, r9
 80020e8:	4319      	orrs	r1, r3
 80020ea:	000b      	movs	r3, r1
 80020ec:	1e5c      	subs	r4, r3, #1
 80020ee:	41a3      	sbcs	r3, r4
 80020f0:	1ac4      	subs	r4, r0, r3
 80020f2:	42a0      	cmp	r0, r4
 80020f4:	419b      	sbcs	r3, r3
 80020f6:	425b      	negs	r3, r3
 80020f8:	1afb      	subs	r3, r7, r3
 80020fa:	469a      	mov	sl, r3
 80020fc:	465d      	mov	r5, fp
 80020fe:	0016      	movs	r6, r2
 8002100:	e5dc      	b.n	8001cbc <__aeabi_dsub+0xb4>
 8002102:	4649      	mov	r1, r9
 8002104:	4319      	orrs	r1, r3
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x502>
 8002108:	e0ae      	b.n	8002268 <__aeabi_dsub+0x660>
 800210a:	4661      	mov	r1, ip
 800210c:	4664      	mov	r4, ip
 800210e:	3901      	subs	r1, #1
 8002110:	2c01      	cmp	r4, #1
 8002112:	d100      	bne.n	8002116 <__aeabi_dsub+0x50e>
 8002114:	e0e0      	b.n	80022d8 <__aeabi_dsub+0x6d0>
 8002116:	4c77      	ldr	r4, [pc, #476]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8002118:	45a4      	cmp	ip, r4
 800211a:	d056      	beq.n	80021ca <__aeabi_dsub+0x5c2>
 800211c:	468c      	mov	ip, r1
 800211e:	e69a      	b.n	8001e56 <__aeabi_dsub+0x24e>
 8002120:	4661      	mov	r1, ip
 8002122:	2220      	movs	r2, #32
 8002124:	003c      	movs	r4, r7
 8002126:	1a52      	subs	r2, r2, r1
 8002128:	4094      	lsls	r4, r2
 800212a:	0001      	movs	r1, r0
 800212c:	4090      	lsls	r0, r2
 800212e:	46a0      	mov	r8, r4
 8002130:	4664      	mov	r4, ip
 8002132:	1e42      	subs	r2, r0, #1
 8002134:	4190      	sbcs	r0, r2
 8002136:	4662      	mov	r2, ip
 8002138:	40e1      	lsrs	r1, r4
 800213a:	4644      	mov	r4, r8
 800213c:	40d7      	lsrs	r7, r2
 800213e:	430c      	orrs	r4, r1
 8002140:	4304      	orrs	r4, r0
 8002142:	44b9      	add	r9, r7
 8002144:	e701      	b.n	8001f4a <__aeabi_dsub+0x342>
 8002146:	496b      	ldr	r1, [pc, #428]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8002148:	428a      	cmp	r2, r1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x546>
 800214c:	e70c      	b.n	8001f68 <__aeabi_dsub+0x360>
 800214e:	1818      	adds	r0, r3, r0
 8002150:	4298      	cmp	r0, r3
 8002152:	419b      	sbcs	r3, r3
 8002154:	444f      	add	r7, r9
 8002156:	425b      	negs	r3, r3
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	07dc      	lsls	r4, r3, #31
 800215c:	0840      	lsrs	r0, r0, #1
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	469a      	mov	sl, r3
 8002162:	0016      	movs	r6, r2
 8002164:	4304      	orrs	r4, r0
 8002166:	e6d9      	b.n	8001f1c <__aeabi_dsub+0x314>
 8002168:	2a00      	cmp	r2, #0
 800216a:	d000      	beq.n	800216e <__aeabi_dsub+0x566>
 800216c:	e081      	b.n	8002272 <__aeabi_dsub+0x66a>
 800216e:	003b      	movs	r3, r7
 8002170:	4303      	orrs	r3, r0
 8002172:	d11d      	bne.n	80021b0 <__aeabi_dsub+0x5a8>
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	2500      	movs	r5, #0
 8002178:	0312      	lsls	r2, r2, #12
 800217a:	e70b      	b.n	8001f94 <__aeabi_dsub+0x38c>
 800217c:	08c0      	lsrs	r0, r0, #3
 800217e:	077b      	lsls	r3, r7, #29
 8002180:	465d      	mov	r5, fp
 8002182:	4303      	orrs	r3, r0
 8002184:	08fa      	lsrs	r2, r7, #3
 8002186:	e6d3      	b.n	8001f30 <__aeabi_dsub+0x328>
 8002188:	1ac4      	subs	r4, r0, r3
 800218a:	42a0      	cmp	r0, r4
 800218c:	4180      	sbcs	r0, r0
 800218e:	464b      	mov	r3, r9
 8002190:	4240      	negs	r0, r0
 8002192:	1aff      	subs	r7, r7, r3
 8002194:	1a3b      	subs	r3, r7, r0
 8002196:	469a      	mov	sl, r3
 8002198:	465d      	mov	r5, fp
 800219a:	e597      	b.n	8001ccc <__aeabi_dsub+0xc4>
 800219c:	1a1c      	subs	r4, r3, r0
 800219e:	464a      	mov	r2, r9
 80021a0:	42a3      	cmp	r3, r4
 80021a2:	419b      	sbcs	r3, r3
 80021a4:	1bd7      	subs	r7, r2, r7
 80021a6:	425b      	negs	r3, r3
 80021a8:	1afb      	subs	r3, r7, r3
 80021aa:	469a      	mov	sl, r3
 80021ac:	2601      	movs	r6, #1
 80021ae:	e585      	b.n	8001cbc <__aeabi_dsub+0xb4>
 80021b0:	08c0      	lsrs	r0, r0, #3
 80021b2:	077b      	lsls	r3, r7, #29
 80021b4:	465d      	mov	r5, fp
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6e7      	b.n	8001f8c <__aeabi_dsub+0x384>
 80021bc:	464a      	mov	r2, r9
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	0752      	lsls	r2, r2, #29
 80021c2:	4313      	orrs	r3, r2
 80021c4:	464a      	mov	r2, r9
 80021c6:	08d2      	lsrs	r2, r2, #3
 80021c8:	e6b5      	b.n	8001f36 <__aeabi_dsub+0x32e>
 80021ca:	08c0      	lsrs	r0, r0, #3
 80021cc:	077b      	lsls	r3, r7, #29
 80021ce:	4303      	orrs	r3, r0
 80021d0:	08fa      	lsrs	r2, r7, #3
 80021d2:	e6db      	b.n	8001f8c <__aeabi_dsub+0x384>
 80021d4:	4649      	mov	r1, r9
 80021d6:	4319      	orrs	r1, r3
 80021d8:	000b      	movs	r3, r1
 80021da:	1e59      	subs	r1, r3, #1
 80021dc:	418b      	sbcs	r3, r1
 80021de:	001c      	movs	r4, r3
 80021e0:	e653      	b.n	8001e8a <__aeabi_dsub+0x282>
 80021e2:	464d      	mov	r5, r9
 80021e4:	3c20      	subs	r4, #32
 80021e6:	40e5      	lsrs	r5, r4
 80021e8:	2920      	cmp	r1, #32
 80021ea:	d005      	beq.n	80021f8 <__aeabi_dsub+0x5f0>
 80021ec:	2440      	movs	r4, #64	; 0x40
 80021ee:	1a64      	subs	r4, r4, r1
 80021f0:	4649      	mov	r1, r9
 80021f2:	40a1      	lsls	r1, r4
 80021f4:	430b      	orrs	r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	4643      	mov	r3, r8
 80021fa:	1e5c      	subs	r4, r3, #1
 80021fc:	41a3      	sbcs	r3, r4
 80021fe:	432b      	orrs	r3, r5
 8002200:	e776      	b.n	80020f0 <__aeabi_dsub+0x4e8>
 8002202:	2a00      	cmp	r2, #0
 8002204:	d0e1      	beq.n	80021ca <__aeabi_dsub+0x5c2>
 8002206:	003a      	movs	r2, r7
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	4302      	orrs	r2, r0
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x608>
 800220e:	e6b8      	b.n	8001f82 <__aeabi_dsub+0x37a>
 8002210:	464a      	mov	r2, r9
 8002212:	0752      	lsls	r2, r2, #29
 8002214:	2480      	movs	r4, #128	; 0x80
 8002216:	4313      	orrs	r3, r2
 8002218:	464a      	mov	r2, r9
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	08d2      	lsrs	r2, r2, #3
 800221e:	4222      	tst	r2, r4
 8002220:	d007      	beq.n	8002232 <__aeabi_dsub+0x62a>
 8002222:	08fe      	lsrs	r6, r7, #3
 8002224:	4226      	tst	r6, r4
 8002226:	d104      	bne.n	8002232 <__aeabi_dsub+0x62a>
 8002228:	465d      	mov	r5, fp
 800222a:	0032      	movs	r2, r6
 800222c:	08c3      	lsrs	r3, r0, #3
 800222e:	077f      	lsls	r7, r7, #29
 8002230:	433b      	orrs	r3, r7
 8002232:	0f59      	lsrs	r1, r3, #29
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	0749      	lsls	r1, r1, #29
 8002238:	08db      	lsrs	r3, r3, #3
 800223a:	430b      	orrs	r3, r1
 800223c:	e6a6      	b.n	8001f8c <__aeabi_dsub+0x384>
 800223e:	1ac4      	subs	r4, r0, r3
 8002240:	42a0      	cmp	r0, r4
 8002242:	4180      	sbcs	r0, r0
 8002244:	464b      	mov	r3, r9
 8002246:	4240      	negs	r0, r0
 8002248:	1aff      	subs	r7, r7, r3
 800224a:	1a3b      	subs	r3, r7, r0
 800224c:	469a      	mov	sl, r3
 800224e:	465d      	mov	r5, fp
 8002250:	2601      	movs	r6, #1
 8002252:	e533      	b.n	8001cbc <__aeabi_dsub+0xb4>
 8002254:	003b      	movs	r3, r7
 8002256:	4303      	orrs	r3, r0
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x654>
 800225a:	e715      	b.n	8002088 <__aeabi_dsub+0x480>
 800225c:	08c0      	lsrs	r0, r0, #3
 800225e:	077b      	lsls	r3, r7, #29
 8002260:	465d      	mov	r5, fp
 8002262:	4303      	orrs	r3, r0
 8002264:	08fa      	lsrs	r2, r7, #3
 8002266:	e666      	b.n	8001f36 <__aeabi_dsub+0x32e>
 8002268:	08c0      	lsrs	r0, r0, #3
 800226a:	077b      	lsls	r3, r7, #29
 800226c:	4303      	orrs	r3, r0
 800226e:	08fa      	lsrs	r2, r7, #3
 8002270:	e65e      	b.n	8001f30 <__aeabi_dsub+0x328>
 8002272:	003a      	movs	r2, r7
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	4302      	orrs	r2, r0
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x674>
 800227a:	e682      	b.n	8001f82 <__aeabi_dsub+0x37a>
 800227c:	464a      	mov	r2, r9
 800227e:	0752      	lsls	r2, r2, #29
 8002280:	2480      	movs	r4, #128	; 0x80
 8002282:	4313      	orrs	r3, r2
 8002284:	464a      	mov	r2, r9
 8002286:	0324      	lsls	r4, r4, #12
 8002288:	08d2      	lsrs	r2, r2, #3
 800228a:	4222      	tst	r2, r4
 800228c:	d007      	beq.n	800229e <__aeabi_dsub+0x696>
 800228e:	08fe      	lsrs	r6, r7, #3
 8002290:	4226      	tst	r6, r4
 8002292:	d104      	bne.n	800229e <__aeabi_dsub+0x696>
 8002294:	465d      	mov	r5, fp
 8002296:	0032      	movs	r2, r6
 8002298:	08c3      	lsrs	r3, r0, #3
 800229a:	077f      	lsls	r7, r7, #29
 800229c:	433b      	orrs	r3, r7
 800229e:	0f59      	lsrs	r1, r3, #29
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	08db      	lsrs	r3, r3, #3
 80022a4:	0749      	lsls	r1, r1, #29
 80022a6:	430b      	orrs	r3, r1
 80022a8:	e670      	b.n	8001f8c <__aeabi_dsub+0x384>
 80022aa:	08c0      	lsrs	r0, r0, #3
 80022ac:	077b      	lsls	r3, r7, #29
 80022ae:	4303      	orrs	r3, r0
 80022b0:	08fa      	lsrs	r2, r7, #3
 80022b2:	e640      	b.n	8001f36 <__aeabi_dsub+0x32e>
 80022b4:	464c      	mov	r4, r9
 80022b6:	3920      	subs	r1, #32
 80022b8:	40cc      	lsrs	r4, r1
 80022ba:	4661      	mov	r1, ip
 80022bc:	2920      	cmp	r1, #32
 80022be:	d006      	beq.n	80022ce <__aeabi_dsub+0x6c6>
 80022c0:	4666      	mov	r6, ip
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	1b89      	subs	r1, r1, r6
 80022c6:	464e      	mov	r6, r9
 80022c8:	408e      	lsls	r6, r1
 80022ca:	4333      	orrs	r3, r6
 80022cc:	4698      	mov	r8, r3
 80022ce:	4643      	mov	r3, r8
 80022d0:	1e59      	subs	r1, r3, #1
 80022d2:	418b      	sbcs	r3, r1
 80022d4:	431c      	orrs	r4, r3
 80022d6:	e5d8      	b.n	8001e8a <__aeabi_dsub+0x282>
 80022d8:	181c      	adds	r4, r3, r0
 80022da:	4284      	cmp	r4, r0
 80022dc:	4180      	sbcs	r0, r0
 80022de:	444f      	add	r7, r9
 80022e0:	46ba      	mov	sl, r7
 80022e2:	4240      	negs	r0, r0
 80022e4:	4482      	add	sl, r0
 80022e6:	e6d9      	b.n	800209c <__aeabi_dsub+0x494>
 80022e8:	4653      	mov	r3, sl
 80022ea:	4323      	orrs	r3, r4
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dsub+0x6e8>
 80022ee:	e6cb      	b.n	8002088 <__aeabi_dsub+0x480>
 80022f0:	e614      	b.n	8001f1c <__aeabi_dsub+0x314>
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	000007ff 	.word	0x000007ff
 80022f8:	ff7fffff 	.word	0xff7fffff
 80022fc:	000007fe 	.word	0x000007fe
 8002300:	2300      	movs	r3, #0
 8002302:	4a01      	ldr	r2, [pc, #4]	; (8002308 <__aeabi_dsub+0x700>)
 8002304:	001c      	movs	r4, r3
 8002306:	e529      	b.n	8001d5c <__aeabi_dsub+0x154>
 8002308:	000007ff 	.word	0x000007ff

0800230c <__aeabi_d2iz>:
 800230c:	000a      	movs	r2, r1
 800230e:	b530      	push	{r4, r5, lr}
 8002310:	4c13      	ldr	r4, [pc, #76]	; (8002360 <__aeabi_d2iz+0x54>)
 8002312:	0053      	lsls	r3, r2, #1
 8002314:	0309      	lsls	r1, r1, #12
 8002316:	0005      	movs	r5, r0
 8002318:	0b09      	lsrs	r1, r1, #12
 800231a:	2000      	movs	r0, #0
 800231c:	0d5b      	lsrs	r3, r3, #21
 800231e:	0fd2      	lsrs	r2, r2, #31
 8002320:	42a3      	cmp	r3, r4
 8002322:	dd04      	ble.n	800232e <__aeabi_d2iz+0x22>
 8002324:	480f      	ldr	r0, [pc, #60]	; (8002364 <__aeabi_d2iz+0x58>)
 8002326:	4283      	cmp	r3, r0
 8002328:	dd02      	ble.n	8002330 <__aeabi_d2iz+0x24>
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <__aeabi_d2iz+0x5c>)
 800232c:	18d0      	adds	r0, r2, r3
 800232e:	bd30      	pop	{r4, r5, pc}
 8002330:	2080      	movs	r0, #128	; 0x80
 8002332:	0340      	lsls	r0, r0, #13
 8002334:	4301      	orrs	r1, r0
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <__aeabi_d2iz+0x60>)
 8002338:	1ac0      	subs	r0, r0, r3
 800233a:	281f      	cmp	r0, #31
 800233c:	dd08      	ble.n	8002350 <__aeabi_d2iz+0x44>
 800233e:	480c      	ldr	r0, [pc, #48]	; (8002370 <__aeabi_d2iz+0x64>)
 8002340:	1ac3      	subs	r3, r0, r3
 8002342:	40d9      	lsrs	r1, r3
 8002344:	000b      	movs	r3, r1
 8002346:	4258      	negs	r0, r3
 8002348:	2a00      	cmp	r2, #0
 800234a:	d1f0      	bne.n	800232e <__aeabi_d2iz+0x22>
 800234c:	0018      	movs	r0, r3
 800234e:	e7ee      	b.n	800232e <__aeabi_d2iz+0x22>
 8002350:	4c08      	ldr	r4, [pc, #32]	; (8002374 <__aeabi_d2iz+0x68>)
 8002352:	40c5      	lsrs	r5, r0
 8002354:	46a4      	mov	ip, r4
 8002356:	4463      	add	r3, ip
 8002358:	4099      	lsls	r1, r3
 800235a:	000b      	movs	r3, r1
 800235c:	432b      	orrs	r3, r5
 800235e:	e7f2      	b.n	8002346 <__aeabi_d2iz+0x3a>
 8002360:	000003fe 	.word	0x000003fe
 8002364:	0000041d 	.word	0x0000041d
 8002368:	7fffffff 	.word	0x7fffffff
 800236c:	00000433 	.word	0x00000433
 8002370:	00000413 	.word	0x00000413
 8002374:	fffffbed 	.word	0xfffffbed

08002378 <__aeabi_i2d>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	2800      	cmp	r0, #0
 800237c:	d016      	beq.n	80023ac <__aeabi_i2d+0x34>
 800237e:	17c3      	asrs	r3, r0, #31
 8002380:	18c5      	adds	r5, r0, r3
 8002382:	405d      	eors	r5, r3
 8002384:	0fc4      	lsrs	r4, r0, #31
 8002386:	0028      	movs	r0, r5
 8002388:	f000 f84c 	bl	8002424 <__clzsi2>
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <__aeabi_i2d+0x5c>)
 800238e:	1a1b      	subs	r3, r3, r0
 8002390:	280a      	cmp	r0, #10
 8002392:	dc16      	bgt.n	80023c2 <__aeabi_i2d+0x4a>
 8002394:	0002      	movs	r2, r0
 8002396:	002e      	movs	r6, r5
 8002398:	3215      	adds	r2, #21
 800239a:	4096      	lsls	r6, r2
 800239c:	220b      	movs	r2, #11
 800239e:	1a12      	subs	r2, r2, r0
 80023a0:	40d5      	lsrs	r5, r2
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	032d      	lsls	r5, r5, #12
 80023a6:	0b2d      	lsrs	r5, r5, #12
 80023a8:	0d5b      	lsrs	r3, r3, #21
 80023aa:	e003      	b.n	80023b4 <__aeabi_i2d+0x3c>
 80023ac:	2400      	movs	r4, #0
 80023ae:	2300      	movs	r3, #0
 80023b0:	2500      	movs	r5, #0
 80023b2:	2600      	movs	r6, #0
 80023b4:	051b      	lsls	r3, r3, #20
 80023b6:	432b      	orrs	r3, r5
 80023b8:	07e4      	lsls	r4, r4, #31
 80023ba:	4323      	orrs	r3, r4
 80023bc:	0030      	movs	r0, r6
 80023be:	0019      	movs	r1, r3
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	380b      	subs	r0, #11
 80023c4:	4085      	lsls	r5, r0
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	2600      	movs	r6, #0
 80023cc:	0b2d      	lsrs	r5, r5, #12
 80023ce:	0d5b      	lsrs	r3, r3, #21
 80023d0:	e7f0      	b.n	80023b4 <__aeabi_i2d+0x3c>
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	0000041e 	.word	0x0000041e

080023d8 <__aeabi_ui2d>:
 80023d8:	b510      	push	{r4, lr}
 80023da:	1e04      	subs	r4, r0, #0
 80023dc:	d010      	beq.n	8002400 <__aeabi_ui2d+0x28>
 80023de:	f000 f821 	bl	8002424 <__clzsi2>
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <__aeabi_ui2d+0x48>)
 80023e4:	1a1b      	subs	r3, r3, r0
 80023e6:	280a      	cmp	r0, #10
 80023e8:	dc11      	bgt.n	800240e <__aeabi_ui2d+0x36>
 80023ea:	220b      	movs	r2, #11
 80023ec:	0021      	movs	r1, r4
 80023ee:	1a12      	subs	r2, r2, r0
 80023f0:	40d1      	lsrs	r1, r2
 80023f2:	3015      	adds	r0, #21
 80023f4:	030a      	lsls	r2, r1, #12
 80023f6:	055b      	lsls	r3, r3, #21
 80023f8:	4084      	lsls	r4, r0
 80023fa:	0b12      	lsrs	r2, r2, #12
 80023fc:	0d5b      	lsrs	r3, r3, #21
 80023fe:	e001      	b.n	8002404 <__aeabi_ui2d+0x2c>
 8002400:	2300      	movs	r3, #0
 8002402:	2200      	movs	r2, #0
 8002404:	051b      	lsls	r3, r3, #20
 8002406:	4313      	orrs	r3, r2
 8002408:	0020      	movs	r0, r4
 800240a:	0019      	movs	r1, r3
 800240c:	bd10      	pop	{r4, pc}
 800240e:	0022      	movs	r2, r4
 8002410:	380b      	subs	r0, #11
 8002412:	4082      	lsls	r2, r0
 8002414:	055b      	lsls	r3, r3, #21
 8002416:	0312      	lsls	r2, r2, #12
 8002418:	2400      	movs	r4, #0
 800241a:	0b12      	lsrs	r2, r2, #12
 800241c:	0d5b      	lsrs	r3, r3, #21
 800241e:	e7f1      	b.n	8002404 <__aeabi_ui2d+0x2c>
 8002420:	0000041e 	.word	0x0000041e

08002424 <__clzsi2>:
 8002424:	211c      	movs	r1, #28
 8002426:	2301      	movs	r3, #1
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	4298      	cmp	r0, r3
 800242c:	d301      	bcc.n	8002432 <__clzsi2+0xe>
 800242e:	0c00      	lsrs	r0, r0, #16
 8002430:	3910      	subs	r1, #16
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	4298      	cmp	r0, r3
 8002436:	d301      	bcc.n	800243c <__clzsi2+0x18>
 8002438:	0a00      	lsrs	r0, r0, #8
 800243a:	3908      	subs	r1, #8
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	4298      	cmp	r0, r3
 8002440:	d301      	bcc.n	8002446 <__clzsi2+0x22>
 8002442:	0900      	lsrs	r0, r0, #4
 8002444:	3904      	subs	r1, #4
 8002446:	a202      	add	r2, pc, #8	; (adr r2, 8002450 <__clzsi2+0x2c>)
 8002448:	5c10      	ldrb	r0, [r2, r0]
 800244a:	1840      	adds	r0, r0, r1
 800244c:	4770      	bx	lr
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	02020304 	.word	0x02020304
 8002454:	01010101 	.word	0x01010101
	...

08002460 <__clzdi2>:
 8002460:	b510      	push	{r4, lr}
 8002462:	2900      	cmp	r1, #0
 8002464:	d103      	bne.n	800246e <__clzdi2+0xe>
 8002466:	f7ff ffdd 	bl	8002424 <__clzsi2>
 800246a:	3020      	adds	r0, #32
 800246c:	e002      	b.n	8002474 <__clzdi2+0x14>
 800246e:	0008      	movs	r0, r1
 8002470:	f7ff ffd8 	bl	8002424 <__clzsi2>
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			; (mov r8, r8)

08002478 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		Clocker_Update_Timers(&ourClocker);
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800248a:	0018      	movs	r0, r3
 800248c:	f001 fa2c 	bl	80038e8 <Clocker_Update_Timers>
		Clocker_Segment_Update(&ourClocker);
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002492:	0018      	movs	r0, r3
 8002494:	f001 f934 	bl	8003700 <Clocker_Segment_Update>
	}
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000228 	.word	0x20000228
 80024a4:	20000828 	.word	0x20000828

080024a8 <HAL_UART_RxCpltCallback>:
{
	ourClocker.alarm = 1;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4bbd      	ldr	r3, [pc, #756]	; (80027a8 <HAL_UART_RxCpltCallback+0x300>)
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d000      	beq.n	80024ba <HAL_UART_RxCpltCallback+0x12>
 80024b8:	e0ae      	b.n	8002618 <HAL_UART_RxCpltCallback+0x170>
	{
		const char * result = strchr(table2, '_');
 80024ba:	4bbc      	ldr	r3, [pc, #752]	; (80027ac <HAL_UART_RxCpltCallback+0x304>)
 80024bc:	215f      	movs	r1, #95	; 0x5f
 80024be:	0018      	movs	r0, r3
 80024c0:	f008 fb60 	bl	800ab84 <strchr>
 80024c4:	0003      	movs	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]
		cJSON * myTempObj = cJSON_Parse(table2);
 80024c8:	4bb8      	ldr	r3, [pc, #736]	; (80027ac <HAL_UART_RxCpltCallback+0x304>)
 80024ca:	0018      	movs	r0, r3
 80024cc:	f002 fbe6 	bl	8004c9c <cJSON_Parse>
 80024d0:	0003      	movs	r3, r0
 80024d2:	60bb      	str	r3, [r7, #8]
		strcpy(ourClocker.contentOfScreens[0], cJSON_GetObjectItem(myTempObj, "weather")->valuestring);
 80024d4:	4ab6      	ldr	r2, [pc, #728]	; (80027b0 <HAL_UART_RxCpltCallback+0x308>)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	0011      	movs	r1, r2
 80024da:	0018      	movs	r0, r3
 80024dc:	f002 fefb 	bl	80052d6 <cJSON_GetObjectItem>
 80024e0:	0003      	movs	r3, r0
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	4bb3      	ldr	r3, [pc, #716]	; (80027b4 <HAL_UART_RxCpltCallback+0x30c>)
 80024e6:	0011      	movs	r1, r2
 80024e8:	0018      	movs	r0, r3
 80024ea:	f008 fbf8 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[1], cJSON_GetObjectItem(myTempObj, "temp")->valuestring);
 80024ee:	4ab2      	ldr	r2, [pc, #712]	; (80027b8 <HAL_UART_RxCpltCallback+0x310>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0011      	movs	r1, r2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f002 feee 	bl	80052d6 <cJSON_GetObjectItem>
 80024fa:	0003      	movs	r3, r0
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	4baf      	ldr	r3, [pc, #700]	; (80027bc <HAL_UART_RxCpltCallback+0x314>)
 8002500:	0011      	movs	r1, r2
 8002502:	0018      	movs	r0, r3
 8002504:	f008 fbeb 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[2], cJSON_GetObjectItem(myTempObj, "feels_like")->valuestring);
 8002508:	4aad      	ldr	r2, [pc, #692]	; (80027c0 <HAL_UART_RxCpltCallback+0x318>)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	0011      	movs	r1, r2
 800250e:	0018      	movs	r0, r3
 8002510:	f002 fee1 	bl	80052d6 <cJSON_GetObjectItem>
 8002514:	0003      	movs	r3, r0
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	4baa      	ldr	r3, [pc, #680]	; (80027c4 <HAL_UART_RxCpltCallback+0x31c>)
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f008 fbde 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[3], cJSON_GetObjectItem(myTempObj, "pressure")->valuestring);
 8002522:	4aa9      	ldr	r2, [pc, #676]	; (80027c8 <HAL_UART_RxCpltCallback+0x320>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f002 fed4 	bl	80052d6 <cJSON_GetObjectItem>
 800252e:	0003      	movs	r3, r0
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	4ba6      	ldr	r3, [pc, #664]	; (80027cc <HAL_UART_RxCpltCallback+0x324>)
 8002534:	0011      	movs	r1, r2
 8002536:	0018      	movs	r0, r3
 8002538:	f008 fbd1 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[4], cJSON_GetObjectItem(myTempObj, "humidity")->valuestring);
 800253c:	4aa4      	ldr	r2, [pc, #656]	; (80027d0 <HAL_UART_RxCpltCallback+0x328>)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0011      	movs	r1, r2
 8002542:	0018      	movs	r0, r3
 8002544:	f002 fec7 	bl	80052d6 <cJSON_GetObjectItem>
 8002548:	0003      	movs	r3, r0
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	4ba1      	ldr	r3, [pc, #644]	; (80027d4 <HAL_UART_RxCpltCallback+0x32c>)
 800254e:	0011      	movs	r1, r2
 8002550:	0018      	movs	r0, r3
 8002552:	f008 fbc4 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[5], cJSON_GetObjectItem(myTempObj, "windspeed")->valuestring);
 8002556:	4aa0      	ldr	r2, [pc, #640]	; (80027d8 <HAL_UART_RxCpltCallback+0x330>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f002 feba 	bl	80052d6 <cJSON_GetObjectItem>
 8002562:	0003      	movs	r3, r0
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	4b9d      	ldr	r3, [pc, #628]	; (80027dc <HAL_UART_RxCpltCallback+0x334>)
 8002568:	0011      	movs	r1, r2
 800256a:	0018      	movs	r0, r3
 800256c:	f008 fbb7 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[6], cJSON_GetObjectItem(myTempObj, "sunrise")->valuestring);
 8002570:	4a9b      	ldr	r2, [pc, #620]	; (80027e0 <HAL_UART_RxCpltCallback+0x338>)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0011      	movs	r1, r2
 8002576:	0018      	movs	r0, r3
 8002578:	f002 fead 	bl	80052d6 <cJSON_GetObjectItem>
 800257c:	0003      	movs	r3, r0
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	4b98      	ldr	r3, [pc, #608]	; (80027e4 <HAL_UART_RxCpltCallback+0x33c>)
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f008 fbaa 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[7], cJSON_GetObjectItem(myTempObj, "sunset")->valuestring);
 800258a:	4a97      	ldr	r2, [pc, #604]	; (80027e8 <HAL_UART_RxCpltCallback+0x340>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0011      	movs	r1, r2
 8002590:	0018      	movs	r0, r3
 8002592:	f002 fea0 	bl	80052d6 <cJSON_GetObjectItem>
 8002596:	0003      	movs	r3, r0
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	4b94      	ldr	r3, [pc, #592]	; (80027ec <HAL_UART_RxCpltCallback+0x344>)
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f008 fb9d 	bl	800acde <strcpy>
		strcpy(ourClocker.contentOfScreens[8], cJSON_GetObjectItem(myTempObj, "city")->valuestring);
 80025a4:	4a92      	ldr	r2, [pc, #584]	; (80027f0 <HAL_UART_RxCpltCallback+0x348>)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	0011      	movs	r1, r2
 80025aa:	0018      	movs	r0, r3
 80025ac:	f002 fe93 	bl	80052d6 <cJSON_GetObjectItem>
 80025b0:	0003      	movs	r3, r0
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	4b8f      	ldr	r3, [pc, #572]	; (80027f4 <HAL_UART_RxCpltCallback+0x34c>)
 80025b6:	0011      	movs	r1, r2
 80025b8:	0018      	movs	r0, r3
 80025ba:	f008 fb90 	bl	800acde <strcpy>

			Clocker_Set_Time(&ourClocker, atoi(cJSON_GetObjectItem(myTempObj, "hour")->valuestring), atoi(cJSON_GetObjectItem(myTempObj, "minutes")->valuestring), atoi(cJSON_GetObjectItem(myTempObj, "seconds")->valuestring));
 80025be:	4a8e      	ldr	r2, [pc, #568]	; (80027f8 <HAL_UART_RxCpltCallback+0x350>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	0011      	movs	r1, r2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f002 fe86 	bl	80052d6 <cJSON_GetObjectItem>
 80025ca:	0003      	movs	r3, r0
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f007 f9f5 	bl	80099be <atoi>
 80025d4:	0003      	movs	r3, r0
 80025d6:	b2dc      	uxtb	r4, r3
 80025d8:	4a88      	ldr	r2, [pc, #544]	; (80027fc <HAL_UART_RxCpltCallback+0x354>)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	0011      	movs	r1, r2
 80025de:	0018      	movs	r0, r3
 80025e0:	f002 fe79 	bl	80052d6 <cJSON_GetObjectItem>
 80025e4:	0003      	movs	r3, r0
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f007 f9e8 	bl	80099be <atoi>
 80025ee:	0003      	movs	r3, r0
 80025f0:	b2dd      	uxtb	r5, r3
 80025f2:	4a83      	ldr	r2, [pc, #524]	; (8002800 <HAL_UART_RxCpltCallback+0x358>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f002 fe6c 	bl	80052d6 <cJSON_GetObjectItem>
 80025fe:	0003      	movs	r3, r0
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	0018      	movs	r0, r3
 8002604:	f007 f9db 	bl	80099be <atoi>
 8002608:	0003      	movs	r3, r0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	487d      	ldr	r0, [pc, #500]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 800260e:	002a      	movs	r2, r5
 8002610:	0021      	movs	r1, r4
 8002612:	f000 ffcf 	bl	80035b4 <Clocker_Set_Time>
 8002616:	e0b5      	b.n	8002784 <HAL_UART_RxCpltCallback+0x2dc>


	}
	else if(huart == &huart5)
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_UART_RxCpltCallback+0x360>)
 800261c:	429a      	cmp	r2, r3
 800261e:	d000      	beq.n	8002622 <HAL_UART_RxCpltCallback+0x17a>
 8002620:	e0b0      	b.n	8002784 <HAL_UART_RxCpltCallback+0x2dc>
	{
		const char * result = strchr(table, '_');
 8002622:	4b7a      	ldr	r3, [pc, #488]	; (800280c <HAL_UART_RxCpltCallback+0x364>)
 8002624:	215f      	movs	r1, #95	; 0x5f
 8002626:	0018      	movs	r0, r3
 8002628:	f008 faac 	bl	800ab84 <strchr>
 800262c:	0003      	movs	r3, r0
 800262e:	617b      	str	r3, [r7, #20]
		if (result != NULL)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_UART_RxCpltCallback+0x19a>
		{
			table[result - table] = '\0';
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4b74      	ldr	r3, [pc, #464]	; (800280c <HAL_UART_RxCpltCallback+0x364>)
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a73      	ldr	r2, [pc, #460]	; (800280c <HAL_UART_RxCpltCallback+0x364>)
 800263e:	2100      	movs	r1, #0
 8002640:	54d1      	strb	r1, [r2, r3]
		}
		cJSON * myTempObj = cJSON_Parse(table);
 8002642:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_UART_RxCpltCallback+0x364>)
 8002644:	0018      	movs	r0, r3
 8002646:	f002 fb29 	bl	8004c9c <cJSON_Parse>
 800264a:	0003      	movs	r3, r0
 800264c:	613b      	str	r3, [r7, #16]
		if(cJSON_IsTrue(cJSON_GetObjectItem(myTempObj, "wifi")))
 800264e:	4a70      	ldr	r2, [pc, #448]	; (8002810 <HAL_UART_RxCpltCallback+0x368>)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f002 fe3e 	bl	80052d6 <cJSON_GetObjectItem>
 800265a:	0003      	movs	r3, r0
 800265c:	0018      	movs	r0, r3
 800265e:	f002 fe5f 	bl	8005320 <cJSON_IsTrue>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d01c      	beq.n	80026a0 <HAL_UART_RxCpltCallback+0x1f8>
		{
			ourClocker.wifi = 1;
 8002666:	4a67      	ldr	r2, [pc, #412]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 8002668:	23ac      	movs	r3, #172	; 0xac
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2101      	movs	r1, #1
 800266e:	54d1      	strb	r1, [r2, r3]
			if(cJSON_IsTrue(cJSON_GetObjectItem(myTempObj, "weather")))
 8002670:	4a4f      	ldr	r2, [pc, #316]	; (80027b0 <HAL_UART_RxCpltCallback+0x308>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	0011      	movs	r1, r2
 8002676:	0018      	movs	r0, r3
 8002678:	f002 fe2d 	bl	80052d6 <cJSON_GetObjectItem>
 800267c:	0003      	movs	r3, r0
 800267e:	0018      	movs	r0, r3
 8002680:	f002 fe4e 	bl	8005320 <cJSON_IsTrue>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d005      	beq.n	8002694 <HAL_UART_RxCpltCallback+0x1ec>
			{
				ourClocker.weather = 1;
 8002688:	4a5e      	ldr	r2, [pc, #376]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 800268a:	235a      	movs	r3, #90	; 0x5a
 800268c:	33ff      	adds	r3, #255	; 0xff
 800268e:	2101      	movs	r1, #1
 8002690:	54d1      	strb	r1, [r2, r3]
 8002692:	e050      	b.n	8002736 <HAL_UART_RxCpltCallback+0x28e>
			}
			else
			{
				ourClocker.weather = 0;
 8002694:	4a5b      	ldr	r2, [pc, #364]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 8002696:	235a      	movs	r3, #90	; 0x5a
 8002698:	33ff      	adds	r3, #255	; 0xff
 800269a:	2100      	movs	r1, #0
 800269c:	54d1      	strb	r1, [r2, r3]
 800269e:	e04a      	b.n	8002736 <HAL_UART_RxCpltCallback+0x28e>
			}
		}
		else
		{
			ourClocker.wifi = 0;
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 80026a2:	23ac      	movs	r3, #172	; 0xac
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2100      	movs	r1, #0
 80026a8:	54d1      	strb	r1, [r2, r3]
			if(cJSON_IsFalse(cJSON_GetObjectItem(myTempObj, "dateTime")))
 80026aa:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <HAL_UART_RxCpltCallback+0x36c>)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	0011      	movs	r1, r2
 80026b0:	0018      	movs	r0, r3
 80026b2:	f002 fe10 	bl	80052d6 <cJSON_GetObjectItem>
 80026b6:	0003      	movs	r3, r0
 80026b8:	0018      	movs	r0, r3
 80026ba:	f002 fe1c 	bl	80052f6 <cJSON_IsFalse>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d034      	beq.n	800272c <HAL_UART_RxCpltCallback+0x284>
			{
				ourClocker.dateTime = 0;
 80026c2:	4a50      	ldr	r2, [pc, #320]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 80026c4:	23ad      	movs	r3, #173	; 0xad
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2100      	movs	r1, #0
 80026ca:	54d1      	strb	r1, [r2, r3]
				if (cJSON_IsNumber(cJSON_GetObjectItem(myTempObj, "dateTimeHours")) && cJSON_IsNumber(cJSON_GetObjectItem(myTempObj, "dateTimeMinutes")))
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_UART_RxCpltCallback+0x370>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f002 fdff 	bl	80052d6 <cJSON_GetObjectItem>
 80026d8:	0003      	movs	r3, r0
 80026da:	0018      	movs	r0, r3
 80026dc:	f002 fe35 	bl	800534a <cJSON_IsNumber>
 80026e0:	1e03      	subs	r3, r0, #0
 80026e2:	d028      	beq.n	8002736 <HAL_UART_RxCpltCallback+0x28e>
 80026e4:	4a4d      	ldr	r2, [pc, #308]	; (800281c <HAL_UART_RxCpltCallback+0x374>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	0011      	movs	r1, r2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f002 fdf3 	bl	80052d6 <cJSON_GetObjectItem>
 80026f0:	0003      	movs	r3, r0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f002 fe29 	bl	800534a <cJSON_IsNumber>
 80026f8:	1e03      	subs	r3, r0, #0
 80026fa:	d01c      	beq.n	8002736 <HAL_UART_RxCpltCallback+0x28e>
				{
					Clocker_Set_Time(&ourClocker, cJSON_GetObjectItem(myTempObj, "dateTimeHours")->valueint, cJSON_GetObjectItem(myTempObj, "dateTimeMinutes")->valueint, 0);
 80026fc:	4a46      	ldr	r2, [pc, #280]	; (8002818 <HAL_UART_RxCpltCallback+0x370>)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	0011      	movs	r1, r2
 8002702:	0018      	movs	r0, r3
 8002704:	f002 fde7 	bl	80052d6 <cJSON_GetObjectItem>
 8002708:	0003      	movs	r3, r0
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	b2dc      	uxtb	r4, r3
 800270e:	4a43      	ldr	r2, [pc, #268]	; (800281c <HAL_UART_RxCpltCallback+0x374>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f002 fdde 	bl	80052d6 <cJSON_GetObjectItem>
 800271a:	0003      	movs	r3, r0
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4838      	ldr	r0, [pc, #224]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 8002722:	2300      	movs	r3, #0
 8002724:	0021      	movs	r1, r4
 8002726:	f000 ff45 	bl	80035b4 <Clocker_Set_Time>
 800272a:	e004      	b.n	8002736 <HAL_UART_RxCpltCallback+0x28e>
				}
			}
			else
			{
				ourClocker.dateTime = 1;
 800272c:	4a35      	ldr	r2, [pc, #212]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 800272e:	23ad      	movs	r3, #173	; 0xad
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2101      	movs	r1, #1
 8002734:	54d1      	strb	r1, [r2, r3]
			}
		}

		if(cJSON_IsTrue(cJSON_GetObjectItem(myTempObj, "alarm")))
 8002736:	4a3a      	ldr	r2, [pc, #232]	; (8002820 <HAL_UART_RxCpltCallback+0x378>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	0011      	movs	r1, r2
 800273c:	0018      	movs	r0, r3
 800273e:	f002 fdca 	bl	80052d6 <cJSON_GetObjectItem>
 8002742:	0003      	movs	r3, r0
 8002744:	0018      	movs	r0, r3
 8002746:	f002 fdeb 	bl	8005320 <cJSON_IsTrue>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d016      	beq.n	800277c <HAL_UART_RxCpltCallback+0x2d4>
		{
			Clocker_Set_Alarm(&ourClocker, cJSON_GetObjectItem(myTempObj, "alarmHours")->valueint, cJSON_GetObjectItem(myTempObj, "alarmMinutes")->valueint);
 800274e:	4a35      	ldr	r2, [pc, #212]	; (8002824 <HAL_UART_RxCpltCallback+0x37c>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	0011      	movs	r1, r2
 8002754:	0018      	movs	r0, r3
 8002756:	f002 fdbe 	bl	80052d6 <cJSON_GetObjectItem>
 800275a:	0003      	movs	r3, r0
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	b2dc      	uxtb	r4, r3
 8002760:	4a31      	ldr	r2, [pc, #196]	; (8002828 <HAL_UART_RxCpltCallback+0x380>)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	0011      	movs	r1, r2
 8002766:	0018      	movs	r0, r3
 8002768:	f002 fdb5 	bl	80052d6 <cJSON_GetObjectItem>
 800276c:	0003      	movs	r3, r0
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_UART_RxCpltCallback+0x35c>)
 8002774:	0021      	movs	r1, r4
 8002776:	0018      	movs	r0, r3
 8002778:	f000 ff5e 	bl	8003638 <Clocker_Set_Alarm>
		}
		cJSON_Delete(myTempObj);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	0018      	movs	r0, r3
 8002780:	f001 fdae 	bl	80042e0 <cJSON_Delete>
	}

	HAL_UART_Receive_IT(&huart5, table, 500);
 8002784:	23fa      	movs	r3, #250	; 0xfa
 8002786:	005a      	lsls	r2, r3, #1
 8002788:	4920      	ldr	r1, [pc, #128]	; (800280c <HAL_UART_RxCpltCallback+0x364>)
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_UART_RxCpltCallback+0x360>)
 800278c:	0018      	movs	r0, r3
 800278e:	f005 fb7f 	bl	8007e90 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, table2, 500);
 8002792:	23fa      	movs	r3, #250	; 0xfa
 8002794:	005a      	lsls	r2, r3, #1
 8002796:	4905      	ldr	r1, [pc, #20]	; (80027ac <HAL_UART_RxCpltCallback+0x304>)
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_UART_RxCpltCallback+0x300>)
 800279a:	0018      	movs	r0, r3
 800279c:	f005 fb78 	bl	8007e90 <HAL_UART_Receive_IT>
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bdb0      	pop	{r4, r5, r7, pc}
 80027a8:	200002a8 	.word	0x200002a8
 80027ac:	20000634 	.word	0x20000634
 80027b0:	0800c908 	.word	0x0800c908
 80027b4:	20000c71 	.word	0x20000c71
 80027b8:	0800c910 	.word	0x0800c910
 80027bc:	20000c81 	.word	0x20000c81
 80027c0:	0800c918 	.word	0x0800c918
 80027c4:	20000c91 	.word	0x20000c91
 80027c8:	0800c924 	.word	0x0800c924
 80027cc:	20000ca1 	.word	0x20000ca1
 80027d0:	0800c930 	.word	0x0800c930
 80027d4:	20000cb1 	.word	0x20000cb1
 80027d8:	0800c93c 	.word	0x0800c93c
 80027dc:	20000cc1 	.word	0x20000cc1
 80027e0:	0800c948 	.word	0x0800c948
 80027e4:	20000cd1 	.word	0x20000cd1
 80027e8:	0800c950 	.word	0x0800c950
 80027ec:	20000ce1 	.word	0x20000ce1
 80027f0:	0800c958 	.word	0x0800c958
 80027f4:	20000cf1 	.word	0x20000cf1
 80027f8:	0800c960 	.word	0x0800c960
 80027fc:	0800c968 	.word	0x0800c968
 8002800:	0800c970 	.word	0x0800c970
 8002804:	20000828 	.word	0x20000828
 8002808:	200003b8 	.word	0x200003b8
 800280c:	20000440 	.word	0x20000440
 8002810:	0800c978 	.word	0x0800c978
 8002814:	0800c980 	.word	0x0800c980
 8002818:	0800c98c 	.word	0x0800c98c
 800281c:	0800c99c 	.word	0x0800c99c
 8002820:	0800c9ac 	.word	0x0800c9ac
 8002824:	0800c9b4 	.word	0x0800c9b4
 8002828:	0800c9c0 	.word	0x0800c9c0

0800282c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 8002830:	f007 f84c 	bl	80098cc <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002834:	f002 fd9e 	bl	8005374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002838:	f000 f848 	bl	80028cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800283c:	f000 fa96 	bl	8002d6c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002840:	f000 f958 	bl	8002af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002844:	f000 f9ac 	bl	8002ba0 <MX_TIM3_Init>
  MX_RTC_Init();
 8002848:	f000 f8ae 	bl	80029a8 <MX_RTC_Init>
  MX_USART4_UART_Init();
 800284c:	f000 fa2e 	bl	8002cac <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8002850:	f000 f9fc 	bl	8002c4c <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 8002854:	f000 fa5a 	bl	8002d0c <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  Clocker_Init(&ourClocker, &hrtc, &htim2, &htim3);
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <main+0x80>)
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <main+0x84>)
 800285c:	4915      	ldr	r1, [pc, #84]	; (80028b4 <main+0x88>)
 800285e:	4816      	ldr	r0, [pc, #88]	; (80028b8 <main+0x8c>)
 8002860:	f000 fd3a 	bl	80032d8 <Clocker_Init>
  Clocker_Set_Time(&ourClocker, 12, 0, 0);
 8002864:	4814      	ldr	r0, [pc, #80]	; (80028b8 <main+0x8c>)
 8002866:	2300      	movs	r3, #0
 8002868:	2200      	movs	r2, #0
 800286a:	210c      	movs	r1, #12
 800286c:	f000 fea2 	bl	80035b4 <Clocker_Set_Time>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_UART_Receive_IT(&huart5, table, 500);
 8002870:	23fa      	movs	r3, #250	; 0xfa
 8002872:	005a      	lsls	r2, r3, #1
 8002874:	4911      	ldr	r1, [pc, #68]	; (80028bc <main+0x90>)
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <main+0x94>)
 8002878:	0018      	movs	r0, r3
 800287a:	f005 fb09 	bl	8007e90 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, table2, 500);
 800287e:	23fa      	movs	r3, #250	; 0xfa
 8002880:	005a      	lsls	r2, r3, #1
 8002882:	4910      	ldr	r1, [pc, #64]	; (80028c4 <main+0x98>)
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <main+0x9c>)
 8002886:	0018      	movs	r0, r3
 8002888:	f005 fb02 	bl	8007e90 <HAL_UART_Receive_IT>

  while (1)
  {
	  Clocker_Change_Screen(&ourClocker);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <main+0x8c>)
 800288e:	0018      	movs	r0, r3
 8002890:	f000 ffa7 	bl	80037e2 <Clocker_Change_Screen>
	  Clocker_Run_Alarm(&ourClocker,&hrtc);
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <main+0x88>)
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <main+0x8c>)
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f001 f802 	bl	80038a4 <Clocker_Run_Alarm>
	  Clocker_Alarm_Update(&ourClocker);
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <main+0x8c>)
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 ffdf 	bl	8003866 <Clocker_Alarm_Update>
  {
 80028a8:	e7f0      	b.n	800288c <main+0x60>
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	20000268 	.word	0x20000268
 80028b0:	20000228 	.word	0x20000228
 80028b4:	20000204 	.word	0x20000204
 80028b8:	20000828 	.word	0x20000828
 80028bc:	20000440 	.word	0x20000440
 80028c0:	200003b8 	.word	0x200003b8
 80028c4:	20000634 	.word	0x20000634
 80028c8:	200002a8 	.word	0x200002a8

080028cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b09f      	sub	sp, #124	; 0x7c
 80028d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028d2:	2440      	movs	r4, #64	; 0x40
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	0018      	movs	r0, r3
 80028d8:	2338      	movs	r3, #56	; 0x38
 80028da:	001a      	movs	r2, r3
 80028dc:	2100      	movs	r1, #0
 80028de:	f008 f949 	bl	800ab74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e2:	232c      	movs	r3, #44	; 0x2c
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	0018      	movs	r0, r3
 80028e8:	2314      	movs	r3, #20
 80028ea:	001a      	movs	r2, r3
 80028ec:	2100      	movs	r1, #0
 80028ee:	f008 f941 	bl	800ab74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	0018      	movs	r0, r3
 80028f6:	2328      	movs	r3, #40	; 0x28
 80028f8:	001a      	movs	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	f008 f93a 	bl	800ab74 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <SystemClock_Config+0xd4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <SystemClock_Config+0xd8>)
 8002906:	401a      	ands	r2, r3
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <SystemClock_Config+0xd4>)
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	0109      	lsls	r1, r1, #4
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002912:	193b      	adds	r3, r7, r4
 8002914:	2206      	movs	r2, #6
 8002916:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002918:	193b      	adds	r3, r7, r4
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0052      	lsls	r2, r2, #1
 800291e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002920:	193b      	adds	r3, r7, r4
 8002922:	2201      	movs	r2, #1
 8002924:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002926:	193b      	adds	r3, r7, r4
 8002928:	2210      	movs	r2, #16
 800292a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800292c:	193b      	adds	r3, r7, r4
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002932:	193b      	adds	r3, r7, r4
 8002934:	0018      	movs	r0, r3
 8002936:	f003 f8cf 	bl	8005ad8 <HAL_RCC_OscConfig>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800293e:	f000 fadd 	bl	8002efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	187b      	adds	r3, r7, r1
 8002946:	220f      	movs	r2, #15
 8002948:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2201      	movs	r2, #1
 800294e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2100      	movs	r1, #0
 8002966:	0018      	movs	r0, r3
 8002968:	f003 fc8a 	bl	8006280 <HAL_RCC_ClockConfig>
 800296c:	1e03      	subs	r3, r0, #0
 800296e:	d001      	beq.n	8002974 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002970:	f000 fac4 	bl	8002efc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2221      	movs	r2, #33	; 0x21
 8002978:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	0252      	lsls	r2, r2, #9
 8002986:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	0018      	movs	r0, r3
 800298c:	f003 fe9c 	bl	80066c8 <HAL_RCCEx_PeriphCLKConfig>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002994:	f000 fab2 	bl	8002efc <Error_Handler>
  }
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b01f      	add	sp, #124	; 0x7c
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	40007000 	.word	0x40007000
 80029a4:	ffffe7ff 	.word	0xffffe7ff

080029a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b090      	sub	sp, #64	; 0x40
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029ae:	232c      	movs	r3, #44	; 0x2c
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	0018      	movs	r0, r3
 80029b4:	2314      	movs	r3, #20
 80029b6:	001a      	movs	r2, r3
 80029b8:	2100      	movs	r1, #0
 80029ba:	f008 f8db 	bl	800ab74 <memset>
  RTC_DateTypeDef sDate = {0};
 80029be:	2328      	movs	r3, #40	; 0x28
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80029c6:	003b      	movs	r3, r7
 80029c8:	0018      	movs	r0, r3
 80029ca:	2328      	movs	r3, #40	; 0x28
 80029cc:	001a      	movs	r2, r3
 80029ce:	2100      	movs	r1, #0
 80029d0:	f008 f8d0 	bl	800ab74 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029d4:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <MX_RTC_Init+0x140>)
 80029d6:	4a45      	ldr	r2, [pc, #276]	; (8002aec <MX_RTC_Init+0x144>)
 80029d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029da:	4b43      	ldr	r3, [pc, #268]	; (8002ae8 <MX_RTC_Init+0x140>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029e0:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <MX_RTC_Init+0x140>)
 80029e2:	227f      	movs	r2, #127	; 0x7f
 80029e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029e6:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <MX_RTC_Init+0x140>)
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029ec:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <MX_RTC_Init+0x140>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <MX_RTC_Init+0x140>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029f8:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <MX_RTC_Init+0x140>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029fe:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <MX_RTC_Init+0x140>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a04:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <MX_RTC_Init+0x140>)
 8002a06:	0018      	movs	r0, r3
 8002a08:	f003 fffc 	bl	8006a04 <HAL_RTC_Init>
 8002a0c:	1e03      	subs	r3, r0, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002a10:	f000 fa74 	bl	8002efc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2200      	movs	r2, #0
 8002a26:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a34:	1879      	adds	r1, r7, r1
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <MX_RTC_Init+0x140>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f004 f87e 	bl	8006b3c <HAL_RTC_SetTime>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8002a44:	f000 fa5a 	bl	8002efc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a48:	2128      	movs	r1, #40	; 0x28
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2201      	movs	r2, #1
 8002a54:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2201      	movs	r2, #1
 8002a5a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2200      	movs	r2, #0
 8002a60:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a62:	1879      	adds	r1, r7, r1
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <MX_RTC_Init+0x140>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f004 f96f 	bl	8006d4c <HAL_RTC_SetDate>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d001      	beq.n	8002a76 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002a72:	f000 fa43 	bl	8002efc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002a76:	003b      	movs	r3, r7
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002a7c:	003b      	movs	r3, r7
 8002a7e:	2200      	movs	r2, #0
 8002a80:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002a82:	003b      	movs	r3, r7
 8002a84:	2200      	movs	r2, #0
 8002a86:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002a88:	003b      	movs	r3, r7
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a8e:	003b      	movs	r3, r7
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a94:	003b      	movs	r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 8002a9a:	003b      	movs	r3, r7
 8002a9c:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <MX_RTC_Init+0x148>)
 8002a9e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002aa0:	003b      	movs	r3, r7
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002aa6:	003b      	movs	r3, r7
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002aac:	003b      	movs	r3, r7
 8002aae:	2220      	movs	r2, #32
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002ab4:	003b      	movs	r3, r7
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0052      	lsls	r2, r2, #1
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002abc:	0039      	movs	r1, r7
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <MX_RTC_Init+0x140>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f004 fa26 	bl	8006f14 <HAL_RTC_SetAlarm>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8002acc:	f000 fa16 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	005a      	lsls	r2, r3, #1
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <MX_RTC_Init+0x140>)
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f004 fb5f 	bl	800719c <HAL_RTC_DeactivateAlarm>
  /* USER CODE END RTC_Init 2 */

}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b010      	add	sp, #64	; 0x40
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	20000204 	.word	0x20000204
 8002aec:	40002800 	.word	0x40002800
 8002af0:	80000080 	.word	0x80000080

08002af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	2308      	movs	r3, #8
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	0018      	movs	r0, r3
 8002b00:	2310      	movs	r3, #16
 8002b02:	001a      	movs	r2, r3
 8002b04:	2100      	movs	r1, #0
 8002b06:	f008 f835 	bl	800ab74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	2308      	movs	r3, #8
 8002b10:	001a      	movs	r2, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	f008 f82e 	bl	800ab74 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	05d2      	lsls	r2, r2, #23
 8002b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <MX_TIM2_Init+0xa8>)
 8002b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b2e:	22fa      	movs	r2, #250	; 0xfa
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f004 fca2 	bl	800748c <HAL_TIM_Base_Init>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002b4c:	f000 f9d6 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b50:	2108      	movs	r1, #8
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0152      	lsls	r2, r2, #5
 8002b58:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b5a:	187a      	adds	r2, r7, r1
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b5e:	0011      	movs	r1, r2
 8002b60:	0018      	movs	r0, r3
 8002b62:	f004 fe57 	bl	8007814 <HAL_TIM_ConfigClockSource>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002b6a:	f000 f9c7 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6e:	003b      	movs	r3, r7
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b74:	003b      	movs	r3, r7
 8002b76:	2200      	movs	r2, #0
 8002b78:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7a:	003a      	movs	r2, r7
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_TIM2_Init+0xa4>)
 8002b7e:	0011      	movs	r1, r2
 8002b80:	0018      	movs	r0, r3
 8002b82:	f005 f833 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b8a:	f000 f9b7 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b006      	add	sp, #24
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	20000228 	.word	0x20000228
 8002b9c:	00007cff 	.word	0x00007cff

08002ba0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	0018      	movs	r0, r3
 8002bac:	2310      	movs	r3, #16
 8002bae:	001a      	movs	r2, r3
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	f007 ffdf 	bl	800ab74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb6:	003b      	movs	r3, r7
 8002bb8:	0018      	movs	r0, r3
 8002bba:	2308      	movs	r3, #8
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f007 ffd8 	bl	800ab74 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <MX_TIM3_Init+0xa4>)
 8002bc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bcc:	221f      	movs	r2, #31
 8002bce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <MX_TIM3_Init+0xa8>)
 8002bda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f004 fc4e 	bl	800748c <HAL_TIM_Base_Init>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002bf4:	f000 f982 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf8:	2108      	movs	r1, #8
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	0152      	lsls	r2, r2, #5
 8002c00:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c02:	187a      	adds	r2, r7, r1
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f004 fe03 	bl	8007814 <HAL_TIM_ConfigClockSource>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002c12:	f000 f973 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c16:	003b      	movs	r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1c:	003b      	movs	r3, r7
 8002c1e:	2200      	movs	r2, #0
 8002c20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c22:	003a      	movs	r2, r7
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002c26:	0011      	movs	r1, r2
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f004 ffdf 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002c32:	f000 f963 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b006      	add	sp, #24
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000268 	.word	0x20000268
 8002c44:	40000400 	.word	0x40000400
 8002c48:	0000fffe 	.word	0x0000fffe

08002c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <MX_USART1_UART_Init+0x5c>)
 8002c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c58:	22e1      	movs	r2, #225	; 0xe1
 8002c5a:	0252      	lsls	r2, r2, #9
 8002c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c72:	220c      	movs	r2, #12
 8002c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <MX_USART1_UART_Init+0x58>)
 8002c90:	0018      	movs	r0, r3
 8002c92:	f005 f809 	bl	8007ca8 <HAL_UART_Init>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c9a:	f000 f92f 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200002a8 	.word	0x200002a8
 8002ca8:	40013800 	.word	0x40013800

08002cac <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cb2:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <MX_USART4_UART_Init+0x5c>)
 8002cb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cb8:	2296      	movs	r2, #150	; 0x96
 8002cba:	0192      	lsls	r2, r2, #6
 8002cbc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <MX_USART4_UART_Init+0x58>)
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f004 ffd9 	bl	8007ca8 <HAL_UART_Init>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8002cfa:	f000 f8ff 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000330 	.word	0x20000330
 8002d08:	40004c00 	.word	0x40004c00

08002d0c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d12:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <MX_USART5_UART_Init+0x5c>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d18:	2296      	movs	r2, #150	; 0x96
 8002d1a:	0192      	lsls	r2, r2, #6
 8002d1c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <MX_USART5_UART_Init+0x58>)
 8002d50:	0018      	movs	r0, r3
 8002d52:	f004 ffa9 	bl	8007ca8 <HAL_UART_Init>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8002d5a:	f000 f8cf 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200003b8 	.word	0x200003b8
 8002d68:	40005000 	.word	0x40005000

08002d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b08b      	sub	sp, #44	; 0x2c
 8002d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d72:	2414      	movs	r4, #20
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	0018      	movs	r0, r3
 8002d78:	2314      	movs	r3, #20
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f007 fef9 	bl	800ab74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	4b5a      	ldr	r3, [pc, #360]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002d88:	2104      	movs	r1, #4
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d8e:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	2204      	movs	r2, #4
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d9a:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	430a      	orrs	r2, r1
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da6:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	4b4f      	ldr	r3, [pc, #316]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dbe:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	4b48      	ldr	r3, [pc, #288]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de6:	4b42      	ldr	r3, [pc, #264]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002de8:	2108      	movs	r1, #8
 8002dea:	430a      	orrs	r2, r1
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dee:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <MX_GPIO_Init+0x184>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	2208      	movs	r2, #8
 8002df4:	4013      	ands	r3, r2
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin, GPIO_PIN_RESET);
 8002dfa:	23a0      	movs	r3, #160	; 0xa0
 8002dfc:	05db      	lsls	r3, r3, #23
 8002dfe:	2200      	movs	r2, #0
 8002e00:	21e0      	movs	r1, #224	; 0xe0
 8002e02:	0018      	movs	r0, r3
 8002e04:	f002 fe4b 	bl	8005a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8002e08:	23ea      	movs	r3, #234	; 0xea
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4839      	ldr	r0, [pc, #228]	; (8002ef4 <MX_GPIO_Init+0x188>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	0019      	movs	r1, r3
 8002e12:	f002 fe44 	bl	8005a9e <HAL_GPIO_WritePin>
                          |SDO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <MX_GPIO_Init+0x18c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f002 fe3e 	bl	8005a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e22:	193b      	adds	r3, r7, r4
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	0192      	lsls	r2, r2, #6
 8002e28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	2284      	movs	r2, #132	; 0x84
 8002e2e:	0392      	lsls	r2, r2, #14
 8002e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	193b      	adds	r3, r7, r4
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	4a2f      	ldr	r2, [pc, #188]	; (8002ef8 <MX_GPIO_Init+0x18c>)
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	0010      	movs	r0, r2
 8002e40:	f002 fc92 	bl	8005768 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	220c      	movs	r2, #12
 8002e48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	2203      	movs	r2, #3
 8002e5a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	2204      	movs	r2, #4
 8002e60:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	193a      	adds	r2, r7, r4
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f002 fc7c 	bl	8005768 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin;
 8002e70:	193b      	adds	r3, r7, r4
 8002e72:	22e0      	movs	r2, #224	; 0xe0
 8002e74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	2201      	movs	r2, #1
 8002e7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e88:	193a      	adds	r2, r7, r4
 8002e8a:	23a0      	movs	r3, #160	; 0xa0
 8002e8c:	05db      	lsls	r3, r3, #23
 8002e8e:	0011      	movs	r1, r2
 8002e90:	0018      	movs	r0, r3
 8002e92:	f002 fc69 	bl	8005768 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_6_Pin D_7_Pin D_4_Pin SCLK_Pin
                           SDO_Pin */
  GPIO_InitStruct.Pin = D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8002e96:	0021      	movs	r1, r4
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	22ea      	movs	r2, #234	; 0xea
 8002e9c:	00d2      	lsls	r2, r2, #3
 8002e9e:	601a      	str	r2, [r3, #0]
                          |SDO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	000c      	movs	r4, r1
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <MX_GPIO_Init+0x188>)
 8002eb8:	0019      	movs	r1, r3
 8002eba:	0010      	movs	r0, r2
 8002ebc:	f002 fc54 	bl	8005768 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 8002ec0:	0021      	movs	r1, r4
 8002ec2:	187b      	adds	r3, r7, r1
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	2201      	movs	r2, #1
 8002ecc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <MX_GPIO_Init+0x18c>)
 8002ede:	0019      	movs	r1, r3
 8002ee0:	0010      	movs	r0, r2
 8002ee2:	f002 fc41 	bl	8005768 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b00b      	add	sp, #44	; 0x2c
 8002eec:	bd90      	pop	{r4, r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	50000400 	.word	0x50000400
 8002ef8:	50000800 	.word	0x50000800

08002efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f00:	b672      	cpsid	i
}
 8002f02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <Error_Handler+0x8>
	...

08002f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_MspInit+0x24>)
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_MspInit+0x24>)
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_MspInit+0x24>)
 8002f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_MspInit+0x24>)
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	0549      	lsls	r1, r1, #21
 8002f22:	430a      	orrs	r2, r1
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <HAL_RTC_MspInit+0x28>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d106      	bne.n	8002f50 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RTC_MspInit+0x2c>)
 8002f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RTC_MspInit+0x2c>)
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	02c9      	lsls	r1, r1, #11
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40002800 	.word	0x40002800
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	05db      	lsls	r3, r3, #23
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10e      	bne.n	8002f92 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_TIM_Base_MspInit+0x50>)
 8002f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_TIM_Base_MspInit+0x50>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	200f      	movs	r0, #15
 8002f86:	f002 fb35 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f8a:	200f      	movs	r0, #15
 8002f8c:	f002 fb47 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f90:	e00a      	b.n	8002fa8 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <HAL_TIM_Base_MspInit+0x54>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d105      	bne.n	8002fa8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_TIM_Base_MspInit+0x50>)
 8002f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_TIM_Base_MspInit+0x50>)
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40000400 	.word	0x40000400

08002fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b08d      	sub	sp, #52	; 0x34
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	241c      	movs	r4, #28
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	2314      	movs	r3, #20
 8002fc8:	001a      	movs	r2, r3
 8002fca:	2100      	movs	r1, #0
 8002fcc:	f007 fdd2 	bl	800ab74 <memset>
  if(huart->Instance==USART1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a66      	ldr	r2, [pc, #408]	; (8003170 <HAL_UART_MspInit+0x1b8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d133      	bne.n	8003042 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fda:	4b66      	ldr	r3, [pc, #408]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fde:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	01c9      	lsls	r1, r1, #7
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe8:	4b62      	ldr	r3, [pc, #392]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ff4:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	22c0      	movs	r2, #192	; 0xc0
 8003004:	00d2      	lsls	r2, r2, #3
 8003006:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	0021      	movs	r1, r4
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2202      	movs	r2, #2
 800300e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	187b      	adds	r3, r7, r1
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2203      	movs	r2, #3
 800301a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800301c:	187b      	adds	r3, r7, r1
 800301e:	2204      	movs	r2, #4
 8003020:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	187a      	adds	r2, r7, r1
 8003024:	23a0      	movs	r3, #160	; 0xa0
 8003026:	05db      	lsls	r3, r3, #23
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f002 fb9c 	bl	8005768 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	2100      	movs	r1, #0
 8003034:	201b      	movs	r0, #27
 8003036:	f002 fadd 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800303a:	201b      	movs	r0, #27
 800303c:	f002 faef 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003040:	e091      	b.n	8003166 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART4)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4c      	ldr	r2, [pc, #304]	; (8003178 <HAL_UART_MspInit+0x1c0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d132      	bne.n	80030b2 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART4_CLK_ENABLE();
 800304c:	4b49      	ldr	r3, [pc, #292]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 800304e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003050:	4b48      	ldr	r3, [pc, #288]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	0309      	lsls	r1, r1, #12
 8003056:	430a      	orrs	r2, r1
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 800305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305e:	4b45      	ldr	r3, [pc, #276]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8003060:	2101      	movs	r1, #1
 8003062:	430a      	orrs	r2, r1
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
 8003066:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003072:	211c      	movs	r1, #28
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2203      	movs	r2, #3
 8003078:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	187b      	adds	r3, r7, r1
 800307c:	2202      	movs	r2, #2
 800307e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	187b      	adds	r3, r7, r1
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003086:	187b      	adds	r3, r7, r1
 8003088:	2203      	movs	r2, #3
 800308a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800308c:	187b      	adds	r3, r7, r1
 800308e:	2206      	movs	r2, #6
 8003090:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	187a      	adds	r2, r7, r1
 8003094:	23a0      	movs	r3, #160	; 0xa0
 8003096:	05db      	lsls	r3, r3, #23
 8003098:	0011      	movs	r1, r2
 800309a:	0018      	movs	r0, r3
 800309c:	f002 fb64 	bl	8005768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	200e      	movs	r0, #14
 80030a6:	f002 faa5 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80030aa:	200e      	movs	r0, #14
 80030ac:	f002 fab7 	bl	800561e <HAL_NVIC_EnableIRQ>
}
 80030b0:	e059      	b.n	8003166 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART5)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a31      	ldr	r2, [pc, #196]	; (800317c <HAL_UART_MspInit+0x1c4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d154      	bne.n	8003166 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART5_CLK_ENABLE();
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	0349      	lsls	r1, r1, #13
 80030c6:	430a      	orrs	r2, r1
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030d0:	2104      	movs	r1, #4
 80030d2:	430a      	orrs	r2, r1
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	2204      	movs	r2, #4
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030e8:	2108      	movs	r1, #8
 80030ea:	430a      	orrs	r2, r1
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_UART_MspInit+0x1bc>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	2208      	movs	r2, #8
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030fa:	211c      	movs	r1, #28
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	0152      	lsls	r2, r2, #5
 8003102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	000c      	movs	r4, r1
 8003106:	193b      	adds	r3, r7, r4
 8003108:	2202      	movs	r2, #2
 800310a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	193b      	adds	r3, r7, r4
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003112:	193b      	adds	r3, r7, r4
 8003114:	2203      	movs	r2, #3
 8003116:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8003118:	193b      	adds	r3, r7, r4
 800311a:	2202      	movs	r2, #2
 800311c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311e:	193b      	adds	r3, r7, r4
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_UART_MspInit+0x1c8>)
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f002 fb1f 	bl	8005768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800312a:	0021      	movs	r1, r4
 800312c:	187b      	adds	r3, r7, r1
 800312e:	2204      	movs	r2, #4
 8003130:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2202      	movs	r2, #2
 8003136:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2203      	movs	r2, #3
 8003142:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8003144:	187b      	adds	r3, r7, r1
 8003146:	2206      	movs	r2, #6
 8003148:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800314a:	187b      	adds	r3, r7, r1
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <HAL_UART_MspInit+0x1cc>)
 800314e:	0019      	movs	r1, r3
 8003150:	0010      	movs	r0, r2
 8003152:	f002 fb09 	bl	8005768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	200e      	movs	r0, #14
 800315c:	f002 fa4a 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003160:	200e      	movs	r0, #14
 8003162:	f002 fa5c 	bl	800561e <HAL_NVIC_EnableIRQ>
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b00d      	add	sp, #52	; 0x34
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40013800 	.word	0x40013800
 8003174:	40021000 	.word	0x40021000
 8003178:	40004c00 	.word	0x40004c00
 800317c:	40005000 	.word	0x40005000
 8003180:	50000800 	.word	0x50000800
 8003184:	50000c00 	.word	0x50000c00

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800318c:	e7fe      	b.n	800318c <NMI_Handler+0x4>

0800318e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <HardFault_Handler+0x4>

08003194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ac:	f002 f936 	bl	800541c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <USART4_5_IRQHandler+0x1c>)
 80031be:	0018      	movs	r0, r3
 80031c0:	f004 fec4 	bl	8007f4c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <USART4_5_IRQHandler+0x20>)
 80031c6:	0018      	movs	r0, r3
 80031c8:	f004 fec0 	bl	8007f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	20000330 	.word	0x20000330
 80031d8:	200003b8 	.word	0x200003b8

080031dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <TIM2_IRQHandler+0x14>)
 80031e2:	0018      	movs	r0, r3
 80031e4:	f004 fa2e 	bl	8007644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000228 	.word	0x20000228

080031f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <USART1_IRQHandler+0x14>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f004 fea6 	bl	8007f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	200002a8 	.word	0x200002a8

0800320c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <_sbrk+0x5c>)
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <_sbrk+0x60>)
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <_sbrk+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <_sbrk+0x64>)
 800322a:	4a12      	ldr	r2, [pc, #72]	; (8003274 <_sbrk+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	429a      	cmp	r2, r3
 800323a:	d207      	bcs.n	800324c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800323c:	f007 fd22 	bl	800ac84 <__errno>
 8003240:	0003      	movs	r3, r0
 8003242:	220c      	movs	r2, #12
 8003244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003246:	2301      	movs	r3, #1
 8003248:	425b      	negs	r3, r3
 800324a:	e009      	b.n	8003260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	18d2      	adds	r2, r2, r3
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <_sbrk+0x64>)
 800325c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b006      	add	sp, #24
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20005000 	.word	0x20005000
 800326c:	00000400 	.word	0x00000400
 8003270:	20000d14 	.word	0x20000d14
 8003274:	20000f20 	.word	0x20000f20

08003278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003284:	480d      	ldr	r0, [pc, #52]	; (80032bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003286:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003288:	f7ff fff6 	bl	8003278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800328c:	480c      	ldr	r0, [pc, #48]	; (80032c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800328e:	490d      	ldr	r1, [pc, #52]	; (80032c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003290:	4a0d      	ldr	r2, [pc, #52]	; (80032c8 <LoopForever+0xe>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003294:	e002      	b.n	800329c <LoopCopyDataInit>

08003296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800329a:	3304      	adds	r3, #4

0800329c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800329c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800329e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a0:	d3f9      	bcc.n	8003296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80032a4:	4c0a      	ldr	r4, [pc, #40]	; (80032d0 <LoopForever+0x16>)
  movs r3, #0
 80032a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032a8:	e001      	b.n	80032ae <LoopFillZerobss>

080032aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ac:	3204      	adds	r2, #4

080032ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b0:	d3fb      	bcc.n	80032aa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80032b2:	f007 fced 	bl	800ac90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032b6:	f7ff fab9 	bl	800282c <main>

080032ba <LoopForever>:

LoopForever:
    b LoopForever
 80032ba:	e7fe      	b.n	80032ba <LoopForever>
   ldr   r0, =_estack
 80032bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80032c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032c4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80032c8:	0800cfa4 	.word	0x0800cfa4
  ldr r2, =_sbss
 80032cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80032d0:	20000f1c 	.word	0x20000f1c

080032d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d4:	e7fe      	b.n	80032d4 <ADC1_COMP_IRQHandler>
	...

080032d8 <Clocker_Init>:
 *      Author: zero-jedynkowy
 */
#include "Clocker.h"

void Clocker_Init(Clocker * myClocker, RTC_HandleTypeDef * rtcHandle, TIM_HandleTypeDef * timSegment, TIM_HandleTypeDef * timScreen)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b096      	sub	sp, #88	; 0x58
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
	DF_Init(20);
 80032e6:	2014      	movs	r0, #20
 80032e8:	f000 fbb3 	bl	8003a52 <DF_Init>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	483c      	ldr	r0, [pc, #240]	; (80033e4 <Clocker_Init+0x10c>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	0019      	movs	r1, r3
 80032f6:	f002 fbd2 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4839      	ldr	r0, [pc, #228]	; (80033e4 <Clocker_Init+0x10c>)
 8003300:	2201      	movs	r2, #1
 8003302:	0019      	movs	r1, r3
 8003304:	f002 fbcb 	bl	8005a9e <HAL_GPIO_WritePin>
	myClocker->maxScreen = 9;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2209      	movs	r2, #9
 800330c:	701a      	strb	r2, [r3, #0]
	myClocker->currentScreen = 0;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	705a      	strb	r2, [r3, #1]
	myClocker->screenTimeChanging = 5; //in seconds
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2205      	movs	r2, #5
 8003318:	709a      	strb	r2, [r3, #2]
	Clocker_Set_Screens(myClocker);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f863 	bl	80033e8 <Clocker_Set_Screens>
	myClocker->sTime = (RTC_TimeTypeDef *)malloc(sizeof(RTC_TimeTypeDef));
 8003322:	2014      	movs	r0, #20
 8003324:	f006 fb52 	bl	80099cc <malloc>
 8003328:	0003      	movs	r3, r0
 800332a:	0019      	movs	r1, r3
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	23a2      	movs	r3, #162	; 0xa2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	50d1      	str	r1, [r2, r3]
	*myClocker->sTime = (RTC_TimeTypeDef){0};
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	23a2      	movs	r3, #162	; 0xa2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	58d3      	ldr	r3, [r2, r3]
 800333c:	0018      	movs	r0, r3
 800333e:	2314      	movs	r3, #20
 8003340:	001a      	movs	r2, r3
 8003342:	2100      	movs	r1, #0
 8003344:	f007 fc16 	bl	800ab74 <memset>
	myClocker->sDate = (RTC_DateTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8003348:	2004      	movs	r0, #4
 800334a:	f006 fb3f 	bl	80099cc <malloc>
 800334e:	0003      	movs	r3, r0
 8003350:	0019      	movs	r1, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	23a4      	movs	r3, #164	; 0xa4
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	50d1      	str	r1, [r2, r3]
	*myClocker->sDate = (RTC_DateTypeDef){0};
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	23a4      	movs	r3, #164	; 0xa4
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	58d3      	ldr	r3, [r2, r3]
 8003362:	0018      	movs	r0, r3
 8003364:	2304      	movs	r3, #4
 8003366:	001a      	movs	r2, r3
 8003368:	2100      	movs	r1, #0
 800336a:	f007 fc03 	bl	800ab74 <memset>
	myClocker->sAlarm = (RTC_AlarmTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 800336e:	2004      	movs	r0, #4
 8003370:	f006 fb2c 	bl	80099cc <malloc>
 8003374:	0003      	movs	r3, r0
 8003376:	0019      	movs	r1, r3
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	23a6      	movs	r3, #166	; 0xa6
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	50d1      	str	r1, [r2, r3]
	*myClocker->sAlarm = (RTC_AlarmTypeDef){0};
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	23a6      	movs	r3, #166	; 0xa6
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	58d3      	ldr	r3, [r2, r3]
 8003388:	0018      	movs	r0, r3
 800338a:	2328      	movs	r3, #40	; 0x28
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f007 fbf0 	bl	800ab74 <memset>
	myClocker->rtcHandle = rtcHandle;
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	23a8      	movs	r3, #168	; 0xa8
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	50d1      	str	r1, [r2, r3]
	myClocker->alarmTimer = 0;
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	2356      	movs	r3, #86	; 0x56
 80033a2:	33ff      	adds	r3, #255	; 0xff
 80033a4:	2100      	movs	r1, #0
 80033a6:	54d1      	strb	r1, [r2, r3]
	myClocker->screenTimer = 0;
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	23aa      	movs	r3, #170	; 0xaa
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2100      	movs	r1, #0
 80033b0:	54d1      	strb	r1, [r2, r3]
	myClocker->alarm = 0;
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	2358      	movs	r3, #88	; 0x58
 80033b6:	33ff      	adds	r3, #255	; 0xff
 80033b8:	2100      	movs	r1, #0
 80033ba:	54d1      	strb	r1, [r2, r3]
	uint8_t flags[4] = {0, 0, 0, 0};
 80033bc:	2314      	movs	r3, #20
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(timSegment);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f004 f8ea 	bl	80075a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(timScreen);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	0018      	movs	r0, r3
 80033d0:	f004 f89c 	bl	800750c <HAL_TIM_Base_Start>
	lcd_init();
 80033d4:	f000 fc4e 	bl	8003c74 <lcd_init>
	lcd_clear();
 80033d8:	f000 fc22 	bl	8003c20 <lcd_clear>

}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b016      	add	sp, #88	; 0x58
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	50000400 	.word	0x50000400

080033e8 <Clocker_Set_Screens>:

void Clocker_Set_Screens(Clocker * myClocker)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	strcpy(myClocker->tableOfScreens[0][0], "WEATHER");
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1cda      	adds	r2, r3, #3
 80033f4:	4b65      	ldr	r3, [pc, #404]	; (800358c <Clocker_Set_Screens+0x1a4>)
 80033f6:	0010      	movs	r0, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	2308      	movs	r3, #8
 80033fc:	001a      	movs	r2, r3
 80033fe:	f007 fc76 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[0][1], "%s");
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3313      	adds	r3, #19
 8003406:	001a      	movs	r2, r3
 8003408:	4b61      	ldr	r3, [pc, #388]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 800340a:	0010      	movs	r0, r2
 800340c:	0019      	movs	r1, r3
 800340e:	2303      	movs	r3, #3
 8003410:	001a      	movs	r2, r3
 8003412:	f007 fc6c 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[1][0], "TEMPERATURE");
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3323      	adds	r3, #35	; 0x23
 800341a:	001a      	movs	r2, r3
 800341c:	4b5d      	ldr	r3, [pc, #372]	; (8003594 <Clocker_Set_Screens+0x1ac>)
 800341e:	0010      	movs	r0, r2
 8003420:	0019      	movs	r1, r3
 8003422:	230c      	movs	r3, #12
 8003424:	001a      	movs	r2, r3
 8003426:	f007 fc62 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[1][1], "%s");
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3333      	adds	r3, #51	; 0x33
 800342e:	001a      	movs	r2, r3
 8003430:	4b57      	ldr	r3, [pc, #348]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 8003432:	0010      	movs	r0, r2
 8003434:	0019      	movs	r1, r3
 8003436:	2303      	movs	r3, #3
 8003438:	001a      	movs	r2, r3
 800343a:	f007 fc58 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[2][0], "FEELS LIKE");
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3343      	adds	r3, #67	; 0x43
 8003442:	001a      	movs	r2, r3
 8003444:	4b54      	ldr	r3, [pc, #336]	; (8003598 <Clocker_Set_Screens+0x1b0>)
 8003446:	0010      	movs	r0, r2
 8003448:	0019      	movs	r1, r3
 800344a:	230b      	movs	r3, #11
 800344c:	001a      	movs	r2, r3
 800344e:	f007 fc4e 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[2][1], "%s");
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3353      	adds	r3, #83	; 0x53
 8003456:	001a      	movs	r2, r3
 8003458:	4b4d      	ldr	r3, [pc, #308]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 800345a:	0010      	movs	r0, r2
 800345c:	0019      	movs	r1, r3
 800345e:	2303      	movs	r3, #3
 8003460:	001a      	movs	r2, r3
 8003462:	f007 fc44 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[3][0], "PRESSURE");
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3363      	adds	r3, #99	; 0x63
 800346a:	001a      	movs	r2, r3
 800346c:	4b4b      	ldr	r3, [pc, #300]	; (800359c <Clocker_Set_Screens+0x1b4>)
 800346e:	0010      	movs	r0, r2
 8003470:	0019      	movs	r1, r3
 8003472:	2309      	movs	r3, #9
 8003474:	001a      	movs	r2, r3
 8003476:	f007 fc3a 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[3][1], "%s");
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3373      	adds	r3, #115	; 0x73
 800347e:	001a      	movs	r2, r3
 8003480:	4b43      	ldr	r3, [pc, #268]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 8003482:	0010      	movs	r0, r2
 8003484:	0019      	movs	r1, r3
 8003486:	2303      	movs	r3, #3
 8003488:	001a      	movs	r2, r3
 800348a:	f007 fc30 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[4][0], "HUMIDITY");
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3383      	adds	r3, #131	; 0x83
 8003492:	001a      	movs	r2, r3
 8003494:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <Clocker_Set_Screens+0x1b8>)
 8003496:	0010      	movs	r0, r2
 8003498:	0019      	movs	r1, r3
 800349a:	2309      	movs	r3, #9
 800349c:	001a      	movs	r2, r3
 800349e:	f007 fc26 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[4][1], "%s");
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3393      	adds	r3, #147	; 0x93
 80034a6:	001a      	movs	r2, r3
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 80034aa:	0010      	movs	r0, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	2303      	movs	r3, #3
 80034b0:	001a      	movs	r2, r3
 80034b2:	f007 fc1c 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[5][0], "WIND SPEED");
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	33a3      	adds	r3, #163	; 0xa3
 80034ba:	001a      	movs	r2, r3
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <Clocker_Set_Screens+0x1bc>)
 80034be:	0010      	movs	r0, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	230b      	movs	r3, #11
 80034c4:	001a      	movs	r2, r3
 80034c6:	f007 fc12 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[5][1], "%s");
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	33b3      	adds	r3, #179	; 0xb3
 80034ce:	001a      	movs	r2, r3
 80034d0:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 80034d2:	0010      	movs	r0, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	2303      	movs	r3, #3
 80034d8:	001a      	movs	r2, r3
 80034da:	f007 fc08 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[6][0], "SUNRISE");
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	33c3      	adds	r3, #195	; 0xc3
 80034e2:	001a      	movs	r2, r3
 80034e4:	4b30      	ldr	r3, [pc, #192]	; (80035a8 <Clocker_Set_Screens+0x1c0>)
 80034e6:	0010      	movs	r0, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	2308      	movs	r3, #8
 80034ec:	001a      	movs	r2, r3
 80034ee:	f007 fbfe 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[6][1], "%s");
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	33d3      	adds	r3, #211	; 0xd3
 80034f6:	001a      	movs	r2, r3
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 80034fa:	0010      	movs	r0, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	2303      	movs	r3, #3
 8003500:	001a      	movs	r2, r3
 8003502:	f007 fbf4 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[7][0], "SUNSET");
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	33e3      	adds	r3, #227	; 0xe3
 800350a:	001a      	movs	r2, r3
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <Clocker_Set_Screens+0x1c4>)
 800350e:	0010      	movs	r0, r2
 8003510:	0019      	movs	r1, r3
 8003512:	2307      	movs	r3, #7
 8003514:	001a      	movs	r2, r3
 8003516:	f007 fbea 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[7][1], "%s");
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	33f3      	adds	r3, #243	; 0xf3
 800351e:	001a      	movs	r2, r3
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 8003522:	0010      	movs	r0, r2
 8003524:	0019      	movs	r1, r3
 8003526:	2303      	movs	r3, #3
 8003528:	001a      	movs	r2, r3
 800352a:	f007 fbe0 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[8][0], "CITY");
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	32ff      	adds	r2, #255	; 0xff
 8003534:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <Clocker_Set_Screens+0x1c8>)
 8003536:	0010      	movs	r0, r2
 8003538:	0019      	movs	r1, r3
 800353a:	2305      	movs	r3, #5
 800353c:	001a      	movs	r2, r3
 800353e:	f007 fbd6 	bl	800acee <memcpy>
	strcpy(myClocker->tableOfScreens[8][1], "%s");
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3314      	adds	r3, #20
 8003546:	33ff      	adds	r3, #255	; 0xff
 8003548:	001a      	movs	r2, r3
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <Clocker_Set_Screens+0x1a8>)
 800354c:	0010      	movs	r0, r2
 800354e:	0019      	movs	r1, r3
 8003550:	2303      	movs	r3, #3
 8003552:	001a      	movs	r2, r3
 8003554:	f007 fbcb 	bl	800acee <memcpy>
	for(int i=0; i<9; i++)
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e00d      	b.n	800357a <Clocker_Set_Screens+0x192>
	{
		strcpy(myClocker->contentOfScreens[i], "");
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	2289      	movs	r2, #137	; 0x89
 8003564:	00d2      	lsls	r2, r2, #3
 8003566:	4694      	mov	ip, r2
 8003568:	4463      	add	r3, ip
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	18d3      	adds	r3, r2, r3
 800356e:	3301      	adds	r3, #1
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<9; i++)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b08      	cmp	r3, #8
 800357e:	ddee      	ble.n	800355e <Clocker_Set_Screens+0x176>
	}
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	0800c9d0 	.word	0x0800c9d0
 8003590:	0800c9d8 	.word	0x0800c9d8
 8003594:	0800c9dc 	.word	0x0800c9dc
 8003598:	0800c9e8 	.word	0x0800c9e8
 800359c:	0800c9f4 	.word	0x0800c9f4
 80035a0:	0800ca00 	.word	0x0800ca00
 80035a4:	0800ca0c 	.word	0x0800ca0c
 80035a8:	0800ca18 	.word	0x0800ca18
 80035ac:	0800ca20 	.word	0x0800ca20
 80035b0:	0800ca28 	.word	0x0800ca28

080035b4 <Clocker_Set_Time>:

void Clocker_Set_Time(Clocker * myClocker, uint8_t newHours, uint8_t newMinutes, uint8_t newSeconds)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	000c      	movs	r4, r1
 80035be:	0010      	movs	r0, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	1cfb      	adds	r3, r7, #3
 80035c4:	1c22      	adds	r2, r4, #0
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	1cbb      	adds	r3, r7, #2
 80035ca:	1c02      	adds	r2, r0, #0
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	1c7b      	adds	r3, r7, #1
 80035d0:	1c0a      	adds	r2, r1, #0
 80035d2:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Hours = newHours;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	23a2      	movs	r3, #162	; 0xa2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	58d3      	ldr	r3, [r2, r3]
 80035dc:	1cfa      	adds	r2, r7, #3
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Minutes = newMinutes;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	23a2      	movs	r3, #162	; 0xa2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	58d3      	ldr	r3, [r2, r3]
 80035ea:	1cba      	adds	r2, r7, #2
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	705a      	strb	r2, [r3, #1]
	myClocker->sTime->Seconds = newSeconds;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	23a2      	movs	r3, #162	; 0xa2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	58d3      	ldr	r3, [r2, r3]
 80035f8:	1c7a      	adds	r2, r7, #1
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	709a      	strb	r2, [r3, #2]
	myClocker->sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	23a2      	movs	r3, #162	; 0xa2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	58d3      	ldr	r3, [r2, r3]
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
	myClocker->sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	23a2      	movs	r3, #162	; 0xa2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	58d3      	ldr	r3, [r2, r3]
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	23a8      	movs	r3, #168	; 0xa8
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	58d0      	ldr	r0, [r2, r3]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	23a2      	movs	r3, #162	; 0xa2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	58d3      	ldr	r3, [r2, r3]
 8003626:	2200      	movs	r2, #0
 8003628:	0019      	movs	r1, r3
 800362a:	f003 fa87 	bl	8006b3c <HAL_RTC_SetTime>
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b003      	add	sp, #12
 8003634:	bd90      	pop	{r4, r7, pc}
	...

08003638 <Clocker_Set_Alarm>:

void Clocker_Set_Alarm(Clocker * myClocker, uint8_t alarmHours, uint8_t alarmMinutes)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	0008      	movs	r0, r1
 8003642:	0011      	movs	r1, r2
 8003644:	1cfb      	adds	r3, r7, #3
 8003646:	1c02      	adds	r2, r0, #0
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	1cbb      	adds	r3, r7, #2
 800364c:	1c0a      	adds	r2, r1, #0
 800364e:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Hours = alarmHours;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	23a6      	movs	r3, #166	; 0xa6
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	58d3      	ldr	r3, [r2, r3]
 8003658:	1cfa      	adds	r2, r7, #3
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Minutes = alarmMinutes;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	23a6      	movs	r3, #166	; 0xa6
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	58d3      	ldr	r3, [r2, r3]
 8003666:	1cba      	adds	r2, r7, #2
 8003668:	7812      	ldrb	r2, [r2, #0]
 800366a:	705a      	strb	r2, [r3, #1]
	myClocker->sAlarm->AlarmTime.Seconds = 0x0;
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	23a6      	movs	r3, #166	; 0xa6
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	58d3      	ldr	r3, [r2, r3]
 8003674:	2200      	movs	r2, #0
 8003676:	709a      	strb	r2, [r3, #2]
	myClocker->sAlarm->AlarmTime.SubSeconds = 0x0;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	23a6      	movs	r3, #166	; 0xa6
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	58d3      	ldr	r3, [r2, r3]
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
	myClocker->sAlarm->AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	23a6      	movs	r3, #166	; 0xa6
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	58d3      	ldr	r3, [r2, r3]
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
	myClocker->sAlarm->AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	23a6      	movs	r3, #166	; 0xa6
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	58d3      	ldr	r3, [r2, r3]
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
	myClocker->sAlarm->AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	23a6      	movs	r3, #166	; 0xa6
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	58d3      	ldr	r3, [r2, r3]
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <Clocker_Set_Alarm+0xc4>)
 80036a6:	615a      	str	r2, [r3, #20]
	myClocker->sAlarm->AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	23a6      	movs	r3, #166	; 0xa6
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	58d3      	ldr	r3, [r2, r3]
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
	myClocker->sAlarm->AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	23a6      	movs	r3, #166	; 0xa6
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	58d3      	ldr	r3, [r2, r3]
 80036bc:	2200      	movs	r2, #0
 80036be:	61da      	str	r2, [r3, #28]
	myClocker->sAlarm->AlarmDateWeekDay = 0x1;
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	23a6      	movs	r3, #166	; 0xa6
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	58d3      	ldr	r3, [r2, r3]
 80036c8:	2220      	movs	r2, #32
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
	myClocker->sAlarm->Alarm = RTC_ALARM_A;
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	23a6      	movs	r3, #166	; 0xa6
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	58d3      	ldr	r3, [r2, r3]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	0052      	lsls	r2, r2, #1
 80036da:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTC_SetAlarm(myClocker->rtcHandle, myClocker->sAlarm, RTC_FORMAT_BCD);
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	23a8      	movs	r3, #168	; 0xa8
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	58d0      	ldr	r0, [r2, r3]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	23a6      	movs	r3, #166	; 0xa6
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	58d3      	ldr	r3, [r2, r3]
 80036ec:	2201      	movs	r2, #1
 80036ee:	0019      	movs	r1, r3
 80036f0:	f003 fc10 	bl	8006f14 <HAL_RTC_SetAlarm>
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	80000080 	.word	0x80000080

08003700 <Clocker_Segment_Update>:

void Clocker_Segment_Update(Clocker * myClocker)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	uint8_t tempTime[4] = {0};
 8003708:	240c      	movs	r4, #12
 800370a:	193b      	adds	r3, r7, r4
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
	HAL_RTC_GetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	23a8      	movs	r3, #168	; 0xa8
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	58d0      	ldr	r0, [r2, r3]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	23a2      	movs	r3, #162	; 0xa2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	58d3      	ldr	r3, [r2, r3]
 8003720:	2200      	movs	r2, #0
 8003722:	0019      	movs	r1, r3
 8003724:	f003 fab4 	bl	8006c90 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(myClocker->rtcHandle, myClocker->sDate, RTC_FORMAT_BIN);
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	23a8      	movs	r3, #168	; 0xa8
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	58d0      	ldr	r0, [r2, r3]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	23a4      	movs	r3, #164	; 0xa4
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	58d3      	ldr	r3, [r2, r3]
 8003738:	2200      	movs	r2, #0
 800373a:	0019      	movs	r1, r3
 800373c:	f003 fb9a 	bl	8006e74 <HAL_RTC_GetDate>
	tempTime[0] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)/10);
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	23a2      	movs	r3, #162	; 0xa2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	58d3      	ldr	r3, [r2, r3]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	210a      	movs	r1, #10
 800374c:	0018      	movs	r0, r3
 800374e:	f7fc fd01 	bl	8000154 <__udivsi3>
 8003752:	0003      	movs	r3, r0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	0018      	movs	r0, r3
 8003758:	f000 f8e8 	bl	800392c <Clocker_Convert_Int_to_Segment>
 800375c:	0003      	movs	r3, r0
 800375e:	001a      	movs	r2, r3
 8003760:	193b      	adds	r3, r7, r4
 8003762:	701a      	strb	r2, [r3, #0]
	tempTime[1] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)%10);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	23a2      	movs	r3, #162	; 0xa2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	58d3      	ldr	r3, [r2, r3]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	210a      	movs	r1, #10
 8003770:	0018      	movs	r0, r3
 8003772:	f7fc fd75 	bl	8000260 <__aeabi_uidivmod>
 8003776:	000b      	movs	r3, r1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	0018      	movs	r0, r3
 800377c:	f000 f8d6 	bl	800392c <Clocker_Convert_Int_to_Segment>
 8003780:	0003      	movs	r3, r0
 8003782:	001a      	movs	r2, r3
 8003784:	193b      	adds	r3, r7, r4
 8003786:	705a      	strb	r2, [r3, #1]
	tempTime[2] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)/10);
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	23a2      	movs	r3, #162	; 0xa2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	58d3      	ldr	r3, [r2, r3]
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	210a      	movs	r1, #10
 8003794:	0018      	movs	r0, r3
 8003796:	f7fc fcdd 	bl	8000154 <__udivsi3>
 800379a:	0003      	movs	r3, r0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 f8c4 	bl	800392c <Clocker_Convert_Int_to_Segment>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	193b      	adds	r3, r7, r4
 80037aa:	709a      	strb	r2, [r3, #2]
	tempTime[3] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)%10);
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	23a2      	movs	r3, #162	; 0xa2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	58d3      	ldr	r3, [r2, r3]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	210a      	movs	r1, #10
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fc fd51 	bl	8000260 <__aeabi_uidivmod>
 80037be:	000b      	movs	r3, r1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f8b2 	bl	800392c <Clocker_Convert_Int_to_Segment>
 80037c8:	0003      	movs	r3, r0
 80037ca:	001a      	movs	r2, r3
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	70da      	strb	r2, [r3, #3]
	tm1637_DisplayHandle(7, tempTime);
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	0019      	movs	r1, r3
 80037d4:	2007      	movs	r0, #7
 80037d6:	f000 fc4d 	bl	8004074 <tm1637_DisplayHandle>
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b005      	add	sp, #20
 80037e0:	bd90      	pop	{r4, r7, pc}

080037e2 <Clocker_Change_Screen>:

void Clocker_Change_Screen(Clocker * myClocker)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
	if(myClocker->screenTimer >= myClocker->screenTimeChanging)
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	23aa      	movs	r3, #170	; 0xaa
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	5cd2      	ldrb	r2, [r2, r3]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	789b      	ldrb	r3, [r3, #2]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d331      	bcc.n	800385e <Clocker_Change_Screen+0x7c>
	{
		myClocker->screenTimer = 0;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	23aa      	movs	r3, #170	; 0xaa
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	2100      	movs	r1, #0
 8003802:	54d1      	strb	r1, [r2, r3]
		myClocker->currentScreen++;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	3301      	adds	r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	705a      	strb	r2, [r3, #1]
		if(myClocker->currentScreen >= 10)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	2b09      	cmp	r3, #9
 8003816:	d902      	bls.n	800381e <Clocker_Change_Screen+0x3c>
		{
			myClocker->currentScreen = 0;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	705a      	strb	r2, [r3, #1]
		}
		lcd_clear();
 800381e:	f000 f9ff 	bl	8003c20 <lcd_clear>
		lcd_put_cur(0, 0);
 8003822:	2100      	movs	r1, #0
 8003824:	2000      	movs	r0, #0
 8003826:	f000 fa06 	bl	8003c36 <lcd_put_cur>
		lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][0]);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	18d3      	adds	r3, r2, r3
 8003834:	3303      	adds	r3, #3
 8003836:	0018      	movs	r0, r3
 8003838:	f000 fa5a 	bl	8003cf0 <lcd_send_string>
		lcd_put_cur(1, 0);
 800383c:	2100      	movs	r1, #0
 800383e:	2001      	movs	r0, #1
 8003840:	f000 f9f9 	bl	8003c36 <lcd_put_cur>
		lcd_send_string(myClocker->contentOfScreens[myClocker->currentScreen]);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	2289      	movs	r2, #137	; 0x89
 800384c:	00d2      	lsls	r2, r2, #3
 800384e:	4694      	mov	ip, r2
 8003850:	4463      	add	r3, ip
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	18d3      	adds	r3, r2, r3
 8003856:	3301      	adds	r3, #1
 8003858:	0018      	movs	r0, r3
 800385a:	f000 fa49 	bl	8003cf0 <lcd_send_string>
	}
}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	46bd      	mov	sp, r7
 8003862:	b002      	add	sp, #8
 8003864:	bd80      	pop	{r7, pc}

08003866 <Clocker_Alarm_Update>:

void Clocker_Alarm_Update(Clocker * myClocker)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
	if(myClocker->alarmTimer >= 60)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	2356      	movs	r3, #86	; 0x56
 8003872:	33ff      	adds	r3, #255	; 0xff
 8003874:	5cd3      	ldrb	r3, [r2, r3]
 8003876:	2b3b      	cmp	r3, #59	; 0x3b
 8003878:	d910      	bls.n	800389c <Clocker_Alarm_Update+0x36>
	{
		myClocker->alarmTimer = 0;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	2356      	movs	r3, #86	; 0x56
 800387e:	33ff      	adds	r3, #255	; 0xff
 8003880:	2100      	movs	r1, #0
 8003882:	54d1      	strb	r1, [r2, r3]
		myClocker->alarm = 0;
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	2358      	movs	r3, #88	; 0x58
 8003888:	33ff      	adds	r3, #255	; 0xff
 800388a:	2100      	movs	r1, #0
 800388c:	54d1      	strb	r1, [r2, r3]
		myClocker->alarmTimerOn = 0;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	23ab      	movs	r3, #171	; 0xab
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	2100      	movs	r1, #0
 8003896:	54d1      	strb	r1, [r2, r3]
		DF_Pause();
 8003898:	f000 f8f9 	bl	8003a8e <DF_Pause>
	}
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <Clocker_Run_Alarm>:

void Clocker_Run_Alarm(Clocker * myClocker, RTC_HandleTypeDef * hrtc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]

	if(myClocker->alarm == 1)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	2358      	movs	r3, #88	; 0x58
 80038b2:	33ff      	adds	r3, #255	; 0xff
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d112      	bne.n	80038e0 <Clocker_Run_Alarm+0x3c>
	{
		myClocker->alarm = 0;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	2358      	movs	r3, #88	; 0x58
 80038be:	33ff      	adds	r3, #255	; 0xff
 80038c0:	2100      	movs	r1, #0
 80038c2:	54d1      	strb	r1, [r2, r3]
		myClocker->alarmTimerOn = 1;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	23ab      	movs	r3, #171	; 0xab
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2101      	movs	r1, #1
 80038cc:	54d1      	strb	r1, [r2, r3]
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	005a      	lsls	r2, r3, #1
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	0011      	movs	r1, r2
 80038d6:	0018      	movs	r0, r3
 80038d8:	f003 fc60 	bl	800719c <HAL_RTC_DeactivateAlarm>
		DF_PlayFromStart();
 80038dc:	f000 f8ac 	bl	8003a38 <DF_PlayFromStart>
	}
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <Clocker_Update_Timers>:

void Clocker_Update_Timers(Clocker * myClocker)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	if(myClocker->alarmTimerOn == 1)
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	23ab      	movs	r3, #171	; 0xab
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d109      	bne.n	8003910 <Clocker_Update_Timers+0x28>
	{
		myClocker->alarmTimer++;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	2356      	movs	r3, #86	; 0x56
 8003900:	33ff      	adds	r3, #255	; 0xff
 8003902:	5cd3      	ldrb	r3, [r2, r3]
 8003904:	3301      	adds	r3, #1
 8003906:	b2d9      	uxtb	r1, r3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	2356      	movs	r3, #86	; 0x56
 800390c:	33ff      	adds	r3, #255	; 0xff
 800390e:	54d1      	strb	r1, [r2, r3]
	}
	myClocker->screenTimer++;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	23aa      	movs	r3, #170	; 0xaa
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	3301      	adds	r3, #1
 800391a:	b2d9      	uxtb	r1, r3
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	23aa      	movs	r3, #170	; 0xaa
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	54d1      	strb	r1, [r2, r3]
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <Clocker_Convert_Int_to_Segment>:


uint8_t Clocker_Convert_Int_to_Segment(uint8_t c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	0002      	movs	r2, r0
 8003934:	1dfb      	adds	r3, r7, #7
 8003936:	701a      	strb	r2, [r3, #0]
	switch(c)
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b09      	cmp	r3, #9
 800393e:	d818      	bhi.n	8003972 <Clocker_Convert_Int_to_Segment+0x46>
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <Clocker_Convert_Int_to_Segment+0x50>)
 8003944:	18d3      	adds	r3, r2, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 800394a:	233f      	movs	r3, #63	; 0x3f
 800394c:	e012      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 1 : return 0x06;
 800394e:	2306      	movs	r3, #6
 8003950:	e010      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 2 : return 0x5b;
 8003952:	235b      	movs	r3, #91	; 0x5b
 8003954:	e00e      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 3 : return 0x4f;
 8003956:	234f      	movs	r3, #79	; 0x4f
 8003958:	e00c      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 4 : return 0x66;
 800395a:	2366      	movs	r3, #102	; 0x66
 800395c:	e00a      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 5 : return 0x6d;
 800395e:	236d      	movs	r3, #109	; 0x6d
 8003960:	e008      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 6 : return 0x7d;
 8003962:	237d      	movs	r3, #125	; 0x7d
 8003964:	e006      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 7 : return 0x07;
 8003966:	2307      	movs	r3, #7
 8003968:	e004      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 8 : return 0x7f;
 800396a:	237f      	movs	r3, #127	; 0x7f
 800396c:	e002      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
		case 9 : return 0x6f;
 800396e:	236f      	movs	r3, #111	; 0x6f
 8003970:	e000      	b.n	8003974 <Clocker_Convert_Int_to_Segment+0x48>
	}
	return 0x3f;
 8003972:	233f      	movs	r3, #63	; 0x3f
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}
 800397c:	0800cae4 	.word	0x0800cae4

08003980 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	0004      	movs	r4, r0
 8003988:	0008      	movs	r0, r1
 800398a:	0011      	movs	r1, r2
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	1c22      	adds	r2, r4, #0
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	1c02      	adds	r2, r0, #0
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	1d7b      	adds	r3, r7, #5
 800399a:	1c0a      	adds	r2, r1, #0
 800399c:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	1dbb      	adds	r3, r7, #6
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	18d3      	adds	r3, r2, r3
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	1d7b      	adds	r3, r7, #5
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	18d3      	adds	r3, r2, r3
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	2016      	movs	r0, #22
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	3206      	adds	r2, #6
 80039be:	32ff      	adds	r2, #255	; 0xff
 80039c0:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 80039c2:	183b      	adds	r3, r7, r0
 80039c4:	183a      	adds	r2, r7, r0
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	4252      	negs	r2, r2
 80039ca:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80039cc:	210c      	movs	r1, #12
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	227e      	movs	r2, #126	; 0x7e
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	705a      	strb	r2, [r3, #1]
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2206      	movs	r2, #6
 80039de:	709a      	strb	r2, [r3, #2]
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	1dfa      	adds	r2, r7, #7
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	70da      	strb	r2, [r3, #3]
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	711a      	strb	r2, [r3, #4]
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	1dba      	adds	r2, r7, #6
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	715a      	strb	r2, [r3, #5]
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	1d7a      	adds	r2, r7, #5
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	719a      	strb	r2, [r3, #6]
 80039fe:	183b      	adds	r3, r7, r0
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	71da      	strb	r2, [r3, #7]
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	187b      	adds	r3, r7, r1
 8003a14:	721a      	strb	r2, [r3, #8]
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	22ef      	movs	r2, #239	; 0xef
 8003a1a:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	425b      	negs	r3, r3
 8003a20:	1879      	adds	r1, r7, r1
 8003a22:	4804      	ldr	r0, [pc, #16]	; (8003a34 <Send_cmd+0xb4>)
 8003a24:	220a      	movs	r2, #10
 8003a26:	f004 f993 	bl	8007d50 <HAL_UART_Transmit>
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b007      	add	sp, #28
 8003a30:	bd90      	pop	{r4, r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	20000330 	.word	0x20000330

08003a38 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2100      	movs	r1, #0
 8003a40:	2003      	movs	r0, #3
 8003a42:	f7ff ff9d 	bl	8003980 <Send_cmd>
  HAL_Delay(200);
 8003a46:	20c8      	movs	r0, #200	; 0xc8
 8003a48:	f001 fd04 	bl	8005454 <HAL_Delay>
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <DF_Init>:


void DF_Init (uint8_t volume)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	0002      	movs	r2, r0
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 8003a5e:	2202      	movs	r2, #2
 8003a60:	2100      	movs	r1, #0
 8003a62:	203f      	movs	r0, #63	; 0x3f
 8003a64:	f7ff ff8c 	bl	8003980 <Send_cmd>
	HAL_Delay(200);
 8003a68:	20c8      	movs	r0, #200	; 0xc8
 8003a6a:	f001 fcf3 	bl	8005454 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	001a      	movs	r2, r3
 8003a74:	2100      	movs	r1, #0
 8003a76:	2006      	movs	r0, #6
 8003a78:	f7ff ff82 	bl	8003980 <Send_cmd>
	HAL_Delay(500);
 8003a7c:	23fa      	movs	r3, #250	; 0xfa
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	0018      	movs	r0, r3
 8003a82:	f001 fce7 	bl	8005454 <HAL_Delay>
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	200e      	movs	r0, #14
 8003a98:	f7ff ff72 	bl	8003980 <Send_cmd>
	HAL_Delay(200);
 8003a9c:	20c8      	movs	r0, #200	; 0xc8
 8003a9e:	f001 fcd9 	bl	8005454 <HAL_Delay>
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	0002      	movs	r2, r0
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <delay+0x30>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <delay+0x30>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3f8      	bcc.n	8003abe <delay+0x16>
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	20000268 	.word	0x20000268

08003adc <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	23a0      	movs	r3, #160	; 0xa0
 8003af0:	05db      	lsls	r3, r3, #23
 8003af2:	2120      	movs	r1, #32
 8003af4:	0018      	movs	r0, r3
 8003af6:	f001 ffd2 	bl	8005a9e <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2201      	movs	r2, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	481f      	ldr	r0, [pc, #124]	; (8003b88 <send_to_lcd+0xac>)
 8003b0a:	001a      	movs	r2, r3
 8003b0c:	2110      	movs	r1, #16
 8003b0e:	f001 ffc6 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4818      	ldr	r0, [pc, #96]	; (8003b88 <send_to_lcd+0xac>)
 8003b26:	0019      	movs	r1, r3
 8003b28:	f001 ffb9 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8003b2c:	1dfb      	adds	r3, r7, #7
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4814      	ldr	r0, [pc, #80]	; (8003b8c <send_to_lcd+0xb0>)
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	f001 ffad 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8003b44:	1dfb      	adds	r3, r7, #7
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	480e      	ldr	r0, [pc, #56]	; (8003b88 <send_to_lcd+0xac>)
 8003b50:	001a      	movs	r2, r3
 8003b52:	2140      	movs	r1, #64	; 0x40
 8003b54:	f001 ffa3 	bl	8005a9e <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8003b58:	23a0      	movs	r3, #160	; 0xa0
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	0018      	movs	r0, r3
 8003b62:	f001 ff9c 	bl	8005a9e <HAL_GPIO_WritePin>
	delay (20);
 8003b66:	2014      	movs	r0, #20
 8003b68:	f7ff ff9e 	bl	8003aa8 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8003b6c:	23a0      	movs	r3, #160	; 0xa0
 8003b6e:	05db      	lsls	r3, r3, #23
 8003b70:	2200      	movs	r2, #0
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0018      	movs	r0, r3
 8003b76:	f001 ff92 	bl	8005a9e <HAL_GPIO_WritePin>
	delay (20);
 8003b7a:	2014      	movs	r0, #20
 8003b7c:	f7ff ff94 	bl	8003aa8 <delay>
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	50000400 	.word	0x50000400
 8003b8c:	50000800 	.word	0x50000800

08003b90 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	0002      	movs	r2, r0
 8003b98:	1dfb      	adds	r3, r7, #7
 8003b9a:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8003b9c:	200f      	movs	r0, #15
 8003b9e:	183b      	adds	r3, r7, r0
 8003ba0:	1dfa      	adds	r2, r7, #7
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	0912      	lsrs	r2, r2, #4
 8003ba6:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8003ba8:	0004      	movs	r4, r0
 8003baa:	183b      	adds	r3, r7, r0
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff ff93 	bl	8003adc <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8003bb6:	0020      	movs	r0, r4
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	1dfa      	adds	r2, r7, #7
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff ff86 	bl	8003adc <send_to_lcd>
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b005      	add	sp, #20
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	0002      	movs	r2, r0
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8003be4:	200f      	movs	r0, #15
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	1dfa      	adds	r2, r7, #7
 8003bea:	7812      	ldrb	r2, [r2, #0]
 8003bec:	0912      	lsrs	r2, r2, #4
 8003bee:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8003bf0:	0004      	movs	r4, r0
 8003bf2:	183b      	adds	r3, r7, r0
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff ff6f 	bl	8003adc <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8003bfe:	0020      	movs	r0, r4
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	1dfa      	adds	r2, r7, #7
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	210f      	movs	r1, #15
 8003c08:	400a      	ands	r2, r1
 8003c0a:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8003c0c:	183b      	adds	r3, r7, r0
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2101      	movs	r1, #1
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7ff ff62 	bl	8003adc <send_to_lcd>
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b005      	add	sp, #20
 8003c1e:	bd90      	pop	{r4, r7, pc}

08003c20 <lcd_clear>:

void lcd_clear (void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7ff ffb3 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(2);
 8003c2a:	2002      	movs	r0, #2
 8003c2c:	f001 fc12 	bl	8005454 <HAL_Delay>
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
    switch (row)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <lcd_put_cur+0x18>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d005      	beq.n	8003c58 <lcd_put_cur+0x22>
 8003c4c:	e009      	b.n	8003c62 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	4313      	orrs	r3, r2
 8003c54:	603b      	str	r3, [r7, #0]
            break;
 8003c56:	e004      	b.n	8003c62 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	22c0      	movs	r2, #192	; 0xc0
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	603b      	str	r3, [r7, #0]
            break;
 8003c60:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7ff ff92 	bl	8003b90 <lcd_send_cmd>
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <lcd_init>:


void lcd_init (void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003c78:	2032      	movs	r0, #50	; 0x32
 8003c7a:	f001 fbeb 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003c7e:	2030      	movs	r0, #48	; 0x30
 8003c80:	f7ff ff86 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003c84:	2005      	movs	r0, #5
 8003c86:	f001 fbe5 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003c8a:	2030      	movs	r0, #48	; 0x30
 8003c8c:	f7ff ff80 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003c90:	2001      	movs	r0, #1
 8003c92:	f001 fbdf 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003c96:	2030      	movs	r0, #48	; 0x30
 8003c98:	f7ff ff7a 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(10);
 8003c9c:	200a      	movs	r0, #10
 8003c9e:	f001 fbd9 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003ca2:	2020      	movs	r0, #32
 8003ca4:	f7ff ff74 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(10);
 8003ca8:	200a      	movs	r0, #10
 8003caa:	f001 fbd3 	bl	8005454 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003cae:	2028      	movs	r0, #40	; 0x28
 8003cb0:	f7ff ff6e 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(1);
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f001 fbcd 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003cba:	2008      	movs	r0, #8
 8003cbc:	f7ff ff68 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(1);
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f001 fbc7 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f7ff ff62 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(1);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f001 fbc1 	bl	8005454 <HAL_Delay>
	HAL_Delay(1);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f001 fbbe 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003cd8:	2006      	movs	r0, #6
 8003cda:	f7ff ff59 	bl	8003b90 <lcd_send_cmd>
	HAL_Delay(1);
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f001 fbb8 	bl	8005454 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003ce4:	200c      	movs	r0, #12
 8003ce6:	f7ff ff53 	bl	8003b90 <lcd_send_cmd>
}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003cf8:	e006      	b.n	8003d08 <lcd_send_string+0x18>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff ff68 	bl	8003bd8 <lcd_send_data>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f4      	bne.n	8003cfa <lcd_send_string+0xa>
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	480a      	ldr	r0, [pc, #40]	; (8003d50 <tm1637_CLKhigh+0x34>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	0019      	movs	r1, r3
 8003d2a:	f001 feb8 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4807      	ldr	r0, [pc, #28]	; (8003d50 <tm1637_CLKhigh+0x34>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	0019      	movs	r1, r3
 8003d38:	f001 feb1 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4803      	ldr	r0, [pc, #12]	; (8003d50 <tm1637_CLKhigh+0x34>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	0019      	movs	r1, r3
 8003d46:	f001 feaa 	bl	8005a9e <HAL_GPIO_WritePin>
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	50000400 	.word	0x50000400

08003d54 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	480a      	ldr	r0, [pc, #40]	; (8003d88 <tm1637_CLKlow+0x34>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	0019      	movs	r1, r3
 8003d62:	f001 fe9c 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4807      	ldr	r0, [pc, #28]	; (8003d88 <tm1637_CLKlow+0x34>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	0019      	movs	r1, r3
 8003d70:	f001 fe95 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4803      	ldr	r0, [pc, #12]	; (8003d88 <tm1637_CLKlow+0x34>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	f001 fe8e 	bl	8005a9e <HAL_GPIO_WritePin>
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	50000400 	.word	0x50000400

08003d8c <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	480a      	ldr	r0, [pc, #40]	; (8003dc0 <tm1637_SDOhigh+0x34>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	0019      	movs	r1, r3
 8003d9a:	f001 fe80 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4807      	ldr	r0, [pc, #28]	; (8003dc0 <tm1637_SDOhigh+0x34>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	0019      	movs	r1, r3
 8003da8:	f001 fe79 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4803      	ldr	r0, [pc, #12]	; (8003dc0 <tm1637_SDOhigh+0x34>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	0019      	movs	r1, r3
 8003db6:	f001 fe72 	bl	8005a9e <HAL_GPIO_WritePin>
}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	50000400 	.word	0x50000400

08003dc4 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	480a      	ldr	r0, [pc, #40]	; (8003df8 <tm1637_SDOlow+0x34>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	f001 fe64 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4807      	ldr	r0, [pc, #28]	; (8003df8 <tm1637_SDOlow+0x34>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	0019      	movs	r1, r3
 8003de0:	f001 fe5d 	bl	8005a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4803      	ldr	r0, [pc, #12]	; (8003df8 <tm1637_SDOlow+0x34>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	0019      	movs	r1, r3
 8003dee:	f001 fe56 	bl	8005a9e <HAL_GPIO_WritePin>
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	50000400 	.word	0x50000400

08003dfc <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8003e00:	f7ff ff8c 	bl	8003d1c <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8003e04:	f7ff ffc2 	bl	8003d8c <tm1637_SDOhigh>
	tm1637_SDOlow();
 8003e08:	f7ff ffdc 	bl	8003dc4 <tm1637_SDOlow>

	tm1637_CLKlow();
 8003e0c:	f7ff ffa2 	bl	8003d54 <tm1637_CLKlow>
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 8003e1a:	f7ff ff9b 	bl	8003d54 <tm1637_CLKlow>
	tm1637_SDOlow();
 8003e1e:	f7ff ffd1 	bl	8003dc4 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8003e22:	f7ff ff7b 	bl	8003d1c <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8003e26:	f7ff ffb1 	bl	8003d8c <tm1637_SDOhigh>
}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8003e38:	230f      	movs	r3, #15
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e01a      	b.n	8003e78 <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8003e42:	f7ff ff87 	bl	8003d54 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8003e46:	230f      	movs	r3, #15
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d102      	bne.n	8003e5e <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 8003e58:	f7ff ff98 	bl	8003d8c <tm1637_SDOhigh>
 8003e5c:	e001      	b.n	8003e62 <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8003e5e:	f7ff ffb1 	bl	8003dc4 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8003e62:	f7ff ff5b 	bl	8003d1c <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8003e66:	210f      	movs	r1, #15
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	230f      	movs	r3, #15
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	ddde      	ble.n	8003e42 <tm1637_DataOut+0x12>
	} 
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8003e96:	230c      	movs	r3, #12
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8003ea2:	2317      	movs	r3, #23
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e018      	b.n	8003ede <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	2117      	movs	r1, #23
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	411a      	asrs	r2, r3
 8003eba:	0013      	movs	r3, r2
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	4193      	sbcs	r3, r2
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	0008      	movs	r0, r1
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	0011      	movs	r1, r2
 8003ece:	220c      	movs	r2, #12
 8003ed0:	18ba      	adds	r2, r7, r2
 8003ed2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8003ed4:	183b      	adds	r3, r7, r0
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	2317      	movs	r3, #23
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b07      	cmp	r3, #7
 8003ee6:	d9e1      	bls.n	8003eac <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8003ee8:	f7ff ff88 	bl	8003dfc <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8003eec:	230c      	movs	r3, #12
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7ff ff9d 	bl	8003e30 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8003ef6:	f7ff ff2d 	bl	8003d54 <tm1637_CLKlow>
	tm1637_CLKhigh();
 8003efa:	f7ff ff0f 	bl	8003d1c <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8003efe:	f000 f89f 	bl	8004040 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	001a      	movs	r2, r3
 8003f08:	23c0      	movs	r3, #192	; 0xc0
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2bc0      	cmp	r3, #192	; 0xc0
 8003f0e:	d001      	beq.n	8003f14 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8003f10:	f7ff ff81 	bl	8003e16 <tm1637_EndPacket>
	}

}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	000a      	movs	r2, r1
 8003f26:	1cfb      	adds	r3, r7, #3
 8003f28:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 8003f36:	2317      	movs	r3, #23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e037      	b.n	8003fb0 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8003f40:	2316      	movs	r3, #22
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	e01c      	b.n	8003f84 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8003f4a:	2317      	movs	r3, #23
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	18d3      	adds	r3, r2, r3
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	001a      	movs	r2, r3
 8003f58:	2116      	movs	r1, #22
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	411a      	asrs	r2, r3
 8003f60:	0013      	movs	r3, r2
 8003f62:	2201      	movs	r2, #1
 8003f64:	4013      	ands	r3, r2
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	4193      	sbcs	r3, r2
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	0008      	movs	r0, r1
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	0011      	movs	r1, r2
 8003f74:	220c      	movs	r2, #12
 8003f76:	18ba      	adds	r2, r7, r2
 8003f78:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 8003f7a:	183b      	adds	r3, r7, r0
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	183b      	adds	r3, r7, r0
 8003f80:	3201      	adds	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	2316      	movs	r3, #22
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b07      	cmp	r3, #7
 8003f8c:	d9dd      	bls.n	8003f4a <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 8003f8e:	230c      	movs	r3, #12
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff ff4c 	bl	8003e30 <tm1637_DataOut>
		tm1637_CLKlow();
 8003f98:	f7ff fedc 	bl	8003d54 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8003f9c:	f7ff febe 	bl	8003d1c <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 8003fa0:	f000 f84e 	bl	8004040 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 8003fa4:	2117      	movs	r1, #23
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	3201      	adds	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	2317      	movs	r3, #23
 8003fb2:	18fa      	adds	r2, r7, r3
 8003fb4:	1cfb      	adds	r3, r7, #3
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d3c0      	bcc.n	8003f40 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 8003fbe:	f7ff ff2a 	bl	8003e16 <tm1637_EndPacket>


}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b006      	add	sp, #24
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8003fd8:	240c      	movs	r4, #12
 8003fda:	193b      	adds	r3, r7, r4
 8003fdc:	0018      	movs	r0, r3
 8003fde:	2314      	movs	r3, #20
 8003fe0:	001a      	movs	r2, r3
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	f006 fdc6 	bl	800ab74 <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 8003fe8:	0021      	movs	r1, r4
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	2280      	movs	r2, #128	; 0x80
 8003fee:	0052      	lsls	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <tm1637_Initialize+0x52>
 8004006:	2b01      	cmp	r3, #1
 8004008:	d114      	bne.n	8004034 <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800400a:	187b      	adds	r3, r7, r1
 800400c:	2200      	movs	r2, #0
 800400e:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004010:	187b      	adds	r3, r7, r1
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <tm1637_Initialize+0x70>)
 8004014:	0019      	movs	r1, r3
 8004016:	0010      	movs	r0, r2
 8004018:	f001 fba6 	bl	8005768 <HAL_GPIO_Init>
			break;
 800401c:	e00a      	b.n	8004034 <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401e:	210c      	movs	r1, #12
 8004020:	187b      	adds	r3, r7, r1
 8004022:	2201      	movs	r2, #1
 8004024:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004026:	187b      	adds	r3, r7, r1
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <tm1637_Initialize+0x70>)
 800402a:	0019      	movs	r1, r3
 800402c:	0010      	movs	r0, r2
 800402e:	f001 fb9b 	bl	8005768 <HAL_GPIO_Init>
			break;
 8004032:	46c0      	nop			; (mov r8, r8)

	}

}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b009      	add	sp, #36	; 0x24
 800403a:	bd90      	pop	{r4, r7, pc}
 800403c:	50000c00 	.word	0x50000c00

08004040 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8004044:	2001      	movs	r0, #1
 8004046:	f7ff ffc1 	bl	8003fcc <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 800404a:	f7ff fe83 	bl	8003d54 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 800404e:	e002      	b.n	8004056 <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8004050:	2000      	movs	r0, #0
 8004052:	f7ff ffbb 	bl	8003fcc <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <tm1637_ACKcheck+0x30>)
 800405c:	0019      	movs	r1, r3
 800405e:	0010      	movs	r0, r2
 8004060:	f001 fd00 	bl	8005a64 <HAL_GPIO_ReadPin>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d1f3      	bne.n	8004050 <tm1637_ACKcheck+0x10>
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	50000400 	.word	0x50000400

08004074 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8004074:	b5b0      	push	{r4, r5, r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	0002      	movs	r2, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	1dfb      	adds	r3, r7, #7
 8004080:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8004082:	210c      	movs	r1, #12
 8004084:	187b      	adds	r3, r7, r1
 8004086:	4a19      	ldr	r2, [pc, #100]	; (80040ec <tm1637_DisplayHandle+0x78>)
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 800408c:	250f      	movs	r5, #15
 800408e:	197b      	adds	r3, r7, r5
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8004094:	1dfb      	adds	r3, r7, #7
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b07      	cmp	r3, #7
 800409a:	d81f      	bhi.n	80040dc <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 800409c:	187b      	adds	r3, r7, r1
 800409e:	2240      	movs	r2, #64	; 0x40
 80040a0:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80040a2:	000c      	movs	r4, r1
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7ff fef1 	bl	8003e8e <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 80040ac:	0021      	movs	r1, r4
 80040ae:	187b      	adds	r3, r7, r1
 80040b0:	22c0      	movs	r2, #192	; 0xc0
 80040b2:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fee9 	bl	8003e8e <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2104      	movs	r1, #4
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7ff ff2b 	bl	8003f1c <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 f810 	bl	80040f0 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 80040d0:	197b      	adds	r3, r7, r5
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 80040d6:	197b      	adds	r3, r7, r5
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	e002      	b.n	80040e2 <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 80040dc:	230f      	movs	r3, #15
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	781b      	ldrb	r3, [r3, #0]
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b004      	add	sp, #16
 80040e8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	0800ca30 	.word	0x0800ca30

080040f0 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	0002      	movs	r2, r0
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 80040fc:	230c      	movs	r3, #12
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8004108:	2316      	movs	r3, #22
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8004110:	1dfb      	adds	r3, r7, #7
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b07      	cmp	r3, #7
 8004116:	d83e      	bhi.n	8004196 <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8004118:	1dfb      	adds	r3, r7, #7
 800411a:	1dfa      	adds	r2, r7, #7
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	2178      	movs	r1, #120	; 0x78
 8004120:	4249      	negs	r1, r1
 8004122:	430a      	orrs	r2, r1
 8004124:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8004126:	2317      	movs	r3, #23
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e017      	b.n	8004160 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	2117      	movs	r1, #23
 8004136:	187b      	adds	r3, r7, r1
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	411a      	asrs	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	2201      	movs	r2, #1
 8004140:	4013      	ands	r3, r2
 8004142:	1e5a      	subs	r2, r3, #1
 8004144:	4193      	sbcs	r3, r2
 8004146:	b2da      	uxtb	r2, r3
 8004148:	0008      	movs	r0, r1
 800414a:	187b      	adds	r3, r7, r1
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	0011      	movs	r1, r2
 8004150:	220c      	movs	r2, #12
 8004152:	18ba      	adds	r2, r7, r2
 8004154:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8004156:	183b      	adds	r3, r7, r0
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	183b      	adds	r3, r7, r0
 800415c:	3201      	adds	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	2317      	movs	r3, #23
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b07      	cmp	r3, #7
 8004168:	d9e2      	bls.n	8004130 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 800416a:	f7ff fe47 	bl	8003dfc <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 800416e:	230c      	movs	r3, #12
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	0018      	movs	r0, r3
 8004174:	f7ff fe5c 	bl	8003e30 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8004178:	f7ff fdec 	bl	8003d54 <tm1637_CLKlow>
		tm1637_CLKhigh();
 800417c:	f7ff fdce 	bl	8003d1c <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8004180:	f7ff ff5e 	bl	8004040 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8004184:	f7ff fe47 	bl	8003e16 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8004188:	2116      	movs	r1, #22
 800418a:	187b      	adds	r3, r7, r1
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8004190:	187b      	adds	r3, r7, r1
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	e002      	b.n	800419c <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 8004196:	2316      	movs	r3, #22
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b006      	add	sp, #24
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <case_insensitive_strcmp+0x16>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e072      	b.n	80042a4 <case_insensitive_strcmp+0x100>
    }

    if (string1 == string2)
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d10d      	bne.n	80041e2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e06c      	b.n	80042a4 <case_insensitive_strcmp+0x100>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e066      	b.n	80042a4 <case_insensitive_strcmp+0x100>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3301      	adds	r3, #1
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	3301      	adds	r3, #1
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	210f      	movs	r1, #15
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <case_insensitive_strcmp+0x108>)
 80041f4:	18d3      	adds	r3, r2, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	001a      	movs	r2, r3
 80041fa:	2303      	movs	r3, #3
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d104      	bne.n	800420c <case_insensitive_strcmp+0x68>
 8004202:	187b      	adds	r3, r7, r1
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3320      	adds	r3, #32
 8004208:	001a      	movs	r2, r3
 800420a:	e002      	b.n	8004212 <case_insensitive_strcmp+0x6e>
 800420c:	230f      	movs	r3, #15
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	200e      	movs	r0, #14
 8004214:	183b      	adds	r3, r7, r0
 8004216:	6839      	ldr	r1, [r7, #0]
 8004218:	7809      	ldrb	r1, [r1, #0]
 800421a:	7019      	strb	r1, [r3, #0]
 800421c:	183b      	adds	r3, r7, r0
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	1c59      	adds	r1, r3, #1
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <case_insensitive_strcmp+0x108>)
 8004224:	18cb      	adds	r3, r1, r3
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	0019      	movs	r1, r3
 800422a:	2303      	movs	r3, #3
 800422c:	400b      	ands	r3, r1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d103      	bne.n	800423a <case_insensitive_strcmp+0x96>
 8004232:	183b      	adds	r3, r7, r0
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	3320      	adds	r3, #32
 8004238:	e002      	b.n	8004240 <case_insensitive_strcmp+0x9c>
 800423a:	230e      	movs	r3, #14
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d0c2      	beq.n	80041ca <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8004244:	210d      	movs	r1, #13
 8004246:	187b      	adds	r3, r7, r1
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	7812      	ldrb	r2, [r2, #0]
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	187b      	adds	r3, r7, r1
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	4b15      	ldr	r3, [pc, #84]	; (80042ac <case_insensitive_strcmp+0x108>)
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	001a      	movs	r2, r3
 800425c:	2303      	movs	r3, #3
 800425e:	4013      	ands	r3, r2
 8004260:	2b01      	cmp	r3, #1
 8004262:	d104      	bne.n	800426e <case_insensitive_strcmp+0xca>
 8004264:	187b      	adds	r3, r7, r1
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	3320      	adds	r3, #32
 800426a:	001a      	movs	r2, r3
 800426c:	e002      	b.n	8004274 <case_insensitive_strcmp+0xd0>
 800426e:	230d      	movs	r3, #13
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	200c      	movs	r0, #12
 8004276:	183b      	adds	r3, r7, r0
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	7809      	ldrb	r1, [r1, #0]
 800427c:	7019      	strb	r1, [r3, #0]
 800427e:	183b      	adds	r3, r7, r0
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <case_insensitive_strcmp+0x108>)
 8004286:	18cb      	adds	r3, r1, r3
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	0019      	movs	r1, r3
 800428c:	2303      	movs	r3, #3
 800428e:	400b      	ands	r3, r1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d103      	bne.n	800429c <case_insensitive_strcmp+0xf8>
 8004294:	183b      	adds	r3, r7, r0
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	3320      	adds	r3, #32
 800429a:	e002      	b.n	80042a2 <case_insensitive_strcmp+0xfe>
 800429c:	230c      	movs	r3, #12
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	1ad3      	subs	r3, r2, r3
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b004      	add	sp, #16
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	0800cc38 	.word	0x0800cc38

080042b0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2028      	movs	r0, #40	; 0x28
 80042be:	4798      	blx	r3
 80042c0:	0003      	movs	r3, r0
 80042c2:	60fb      	str	r3, [r7, #12]
    if (node)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <cJSON_New_Item+0x26>
    {
        memset(node, '\0', sizeof(cJSON));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2228      	movs	r2, #40	; 0x28
 80042ce:	2100      	movs	r1, #0
 80042d0:	0018      	movs	r0, r3
 80042d2:	f006 fc4f 	bl	800ab74 <memset>
    }

    return node;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b004      	add	sp, #16
 80042de:	bd80      	pop	{r7, pc}

080042e0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80042ec:	e038      	b.n	8004360 <cJSON_Delete+0x80>
    {
        next = item->next;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4013      	ands	r3, r2
 80042fe:	d108      	bne.n	8004312 <cJSON_Delete+0x32>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	0018      	movs	r0, r3
 800430e:	f7ff ffe7 	bl	80042e0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4013      	ands	r3, r2
 800431c:	d109      	bne.n	8004332 <cJSON_Delete+0x52>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <cJSON_Delete+0x90>)
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	0018      	movs	r0, r3
 8004330:	4790      	blx	r2
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4013      	ands	r3, r2
 800433c:	d109      	bne.n	8004352 <cJSON_Delete+0x72>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <cJSON_Delete+0x90>)
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	0018      	movs	r0, r3
 8004350:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <cJSON_Delete+0x90>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	0010      	movs	r0, r2
 800435a:	4798      	blx	r3
        item = next;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1c3      	bne.n	80042ee <cJSON_Delete+0xe>
    }
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000004 	.word	0x20000004

08004374 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8004378:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b099      	sub	sp, #100	; 0x64
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
    double number = 0;
 800438a:	2200      	movs	r2, #0
 800438c:	2300      	movs	r3, #0
 800438e:	653a      	str	r2, [r7, #80]	; 0x50
 8004390:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char *after_end = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8004396:	234f      	movs	r3, #79	; 0x4f
 8004398:	18fc      	adds	r4, r7, r3
 800439a:	f7ff ffeb 	bl	8004374 <get_decimal_point>
 800439e:	0003      	movs	r3, r0
 80043a0:	7023      	strb	r3, [r4, #0]
    size_t i = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <parse_number+0x34>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <parse_number+0x38>
    {
        return false;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e09a      	b.n	80044ee <parse_number+0x16e>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80043b8:	2300      	movs	r3, #0
 80043ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043bc:	e03b      	b.n	8004436 <parse_number+0xb6>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6899      	ldr	r1, [r3, #8]
 80043c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c8:	18cb      	adds	r3, r1, r3
 80043ca:	18d3      	adds	r3, r2, r3
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b45      	cmp	r3, #69	; 0x45
 80043d0:	dc14      	bgt.n	80043fc <parse_number+0x7c>
 80043d2:	2b2b      	cmp	r3, #43	; 0x2b
 80043d4:	db3e      	blt.n	8004454 <parse_number+0xd4>
 80043d6:	3b2b      	subs	r3, #43	; 0x2b
 80043d8:	2201      	movs	r2, #1
 80043da:	409a      	lsls	r2, r3
 80043dc:	0013      	movs	r3, r2
 80043de:	4a46      	ldr	r2, [pc, #280]	; (80044f8 <parse_number+0x178>)
 80043e0:	401a      	ands	r2, r3
 80043e2:	1e51      	subs	r1, r2, #1
 80043e4:	418a      	sbcs	r2, r1
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	d109      	bne.n	8004400 <parse_number+0x80>
 80043ec:	2208      	movs	r2, #8
 80043ee:	4013      	ands	r3, r2
 80043f0:	1e5a      	subs	r2, r3, #1
 80043f2:	4193      	sbcs	r3, r2
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d111      	bne.n	800441e <parse_number+0x9e>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80043fa:	e02b      	b.n	8004454 <parse_number+0xd4>
        switch (buffer_at_offset(input_buffer)[i])
 80043fc:	2b65      	cmp	r3, #101	; 0x65
 80043fe:	d129      	bne.n	8004454 <parse_number+0xd4>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440a:	18cb      	adds	r3, r1, r3
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	7819      	ldrb	r1, [r3, #0]
 8004410:	2308      	movs	r3, #8
 8004412:	18fa      	adds	r2, r7, r3
 8004414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004416:	18d3      	adds	r3, r2, r3
 8004418:	1c0a      	adds	r2, r1, #0
 800441a:	701a      	strb	r2, [r3, #0]
                break;
 800441c:	e008      	b.n	8004430 <parse_number+0xb0>
                number_c_string[i] = decimal_point;
 800441e:	2308      	movs	r3, #8
 8004420:	18fa      	adds	r2, r7, r3
 8004422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	224f      	movs	r2, #79	; 0x4f
 8004428:	18ba      	adds	r2, r7, r2
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	701a      	strb	r2, [r3, #0]
                break;
 800442e:	46c0      	nop			; (mov r8, r8)
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	3301      	adds	r3, #1
 8004434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004438:	2b3e      	cmp	r3, #62	; 0x3e
 800443a:	d80d      	bhi.n	8004458 <parse_number+0xd8>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <parse_number+0xd8>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004448:	18d2      	adds	r2, r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d3b5      	bcc.n	80043be <parse_number+0x3e>
        }
    }
loop_end:
 8004452:	e001      	b.n	8004458 <parse_number+0xd8>
                goto loop_end;
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	e000      	b.n	800445a <parse_number+0xda>
loop_end:
 8004458:	46c0      	nop			; (mov r8, r8)
    number_c_string[i] = '\0';
 800445a:	2108      	movs	r1, #8
 800445c:	187a      	adds	r2, r7, r1
 800445e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004460:	18d3      	adds	r3, r2, r3
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8004466:	2348      	movs	r3, #72	; 0x48
 8004468:	18fa      	adds	r2, r7, r3
 800446a:	000c      	movs	r4, r1
 800446c:	187b      	adds	r3, r7, r1
 800446e:	0011      	movs	r1, r2
 8004470:	0018      	movs	r0, r3
 8004472:	f006 f9cf 	bl	800a814 <strtod>
 8004476:	0002      	movs	r2, r0
 8004478:	000b      	movs	r3, r1
 800447a:	653a      	str	r2, [r7, #80]	; 0x50
 800447c:	657b      	str	r3, [r7, #84]	; 0x54
    if (number_c_string == after_end)
 800447e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004480:	193b      	adds	r3, r7, r4
 8004482:	429a      	cmp	r2, r3
 8004484:	d101      	bne.n	800448a <parse_number+0x10a>
    {
        return false; /* parse_error */
 8004486:	2300      	movs	r3, #0
 8004488:	e031      	b.n	80044ee <parse_number+0x16e>
    }

    item->valuedouble = number;
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800448e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004490:	618a      	str	r2, [r1, #24]
 8004492:	61cb      	str	r3, [r1, #28]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <parse_number+0x17c>)
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <parse_number+0x180>)
 8004498:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800449a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800449c:	f7fc f804 	bl	80004a8 <__aeabi_dcmpge>
 80044a0:	1e03      	subs	r3, r0, #0
 80044a2:	d003      	beq.n	80044ac <parse_number+0x12c>
    {
        item->valueint = INT_MAX;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a17      	ldr	r2, [pc, #92]	; (8004504 <parse_number+0x184>)
 80044a8:	615a      	str	r2, [r3, #20]
 80044aa:	e013      	b.n	80044d4 <parse_number+0x154>
    }
    else if (number <= (double)INT_MIN)
 80044ac:	2200      	movs	r2, #0
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <parse_number+0x188>)
 80044b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80044b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044b4:	f7fb ffe4 	bl	8000480 <__aeabi_dcmple>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d004      	beq.n	80044c6 <parse_number+0x146>
    {
        item->valueint = INT_MIN;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2280      	movs	r2, #128	; 0x80
 80044c0:	0612      	lsls	r2, r2, #24
 80044c2:	615a      	str	r2, [r3, #20]
 80044c4:	e006      	b.n	80044d4 <parse_number+0x154>
    }
    else
    {
        item->valueint = (int)number;
 80044c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80044c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044ca:	f7fd ff1f 	bl	800230c <__aeabi_d2iz>
 80044ce:	0002      	movs	r2, r0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2208      	movs	r2, #8
 80044d8:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044e0:	2208      	movs	r2, #8
 80044e2:	18ba      	adds	r2, r7, r2
 80044e4:	1a8a      	subs	r2, r1, r2
 80044e6:	189a      	adds	r2, r3, r2
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	609a      	str	r2, [r3, #8]
    return true;
 80044ec:	2301      	movs	r3, #1
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b019      	add	sp, #100	; 0x64
 80044f4:	bd90      	pop	{r4, r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	04007fe5 	.word	0x04007fe5
 80044fc:	ffc00000 	.word	0xffc00000
 8004500:	41dfffff 	.word	0x41dfffff
 8004504:	7fffffff 	.word	0x7fffffff
 8004508:	c1e00000 	.word	0xc1e00000

0800450c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	e04c      	b.n	80045bc <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	18d3      	adds	r3, r2, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b2f      	cmp	r3, #47	; 0x2f
 800452c:	d90f      	bls.n	800454e <parse_hex4+0x42>
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b39      	cmp	r3, #57	; 0x39
 8004538:	d809      	bhi.n	800454e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	18d3      	adds	r3, r2, r3
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	001a      	movs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	18d3      	adds	r3, r2, r3
 8004548:	3b30      	subs	r3, #48	; 0x30
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e02d      	b.n	80045aa <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d90f      	bls.n	800457a <parse_hex4+0x6e>
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	18d3      	adds	r3, r2, r3
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b46      	cmp	r3, #70	; 0x46
 8004564:	d809      	bhi.n	800457a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	001a      	movs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	18d3      	adds	r3, r2, r3
 8004574:	3b37      	subs	r3, #55	; 0x37
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e017      	b.n	80045aa <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	18d3      	adds	r3, r2, r3
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b60      	cmp	r3, #96	; 0x60
 8004584:	d90f      	bls.n	80045a6 <parse_hex4+0x9a>
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	18d3      	adds	r3, r2, r3
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b66      	cmp	r3, #102	; 0x66
 8004590:	d809      	bhi.n	80045a6 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	18d3      	adds	r3, r2, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	001a      	movs	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	18d3      	adds	r3, r2, r3
 80045a0:	3b57      	subs	r3, #87	; 0x57
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e001      	b.n	80045aa <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e00c      	b.n	80045c4 <parse_hex4+0xb8>
        }

        if (i < 3)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d802      	bhi.n	80045b6 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d9af      	bls.n	8004522 <parse_hex4+0x16>
        }
    }

    return h;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bd80      	pop	{r7, pc}

080045cc <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80045e4:	2323      	movs	r3, #35	; 0x23
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
    unsigned char utf8_position = 0;
 80045ec:	2322      	movs	r3, #34	; 0x22
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
    unsigned char sequence_length = 0;
 80045f4:	2321      	movs	r3, #33	; 0x21
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    unsigned char first_byte_mark = 0;
 80045fc:	2320      	movs	r3, #32
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]

    if ((input_end - first_sequence) < 6)
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b05      	cmp	r3, #5
 800460c:	dc00      	bgt.n	8004610 <utf16_literal_to_utf8+0x44>
 800460e:	e0d6      	b.n	80047be <utf16_literal_to_utf8+0x1f2>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	3302      	adds	r3, #2
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff ff79 	bl	800450c <parse_hex4>
 800461a:	0003      	movs	r3, r0
 800461c:	61fb      	str	r3, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	23dc      	movs	r3, #220	; 0xdc
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	429a      	cmp	r2, r3
 8004626:	d305      	bcc.n	8004634 <utf16_literal_to_utf8+0x68>
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	23e0      	movs	r3, #224	; 0xe0
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	429a      	cmp	r2, r3
 8004630:	d200      	bcs.n	8004634 <utf16_literal_to_utf8+0x68>
 8004632:	e0c6      	b.n	80047c2 <utf16_literal_to_utf8+0x1f6>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	23d8      	movs	r3, #216	; 0xd8
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	429a      	cmp	r2, r3
 800463c:	d33f      	bcc.n	80046be <utf16_literal_to_utf8+0xf2>
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	23dc      	movs	r3, #220	; 0xdc
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	429a      	cmp	r2, r3
 8004646:	d23a      	bcs.n	80046be <utf16_literal_to_utf8+0xf2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	3306      	adds	r3, #6
 800464c:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8004652:	2321      	movs	r3, #33	; 0x21
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	220c      	movs	r2, #12
 8004658:	701a      	strb	r2, [r3, #0]

        if ((input_end - second_sequence) < 6)
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b05      	cmp	r3, #5
 8004662:	dc00      	bgt.n	8004666 <utf16_literal_to_utf8+0x9a>
 8004664:	e0af      	b.n	80047c6 <utf16_literal_to_utf8+0x1fa>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b5c      	cmp	r3, #92	; 0x5c
 800466c:	d000      	beq.n	8004670 <utf16_literal_to_utf8+0xa4>
 800466e:	e0ac      	b.n	80047ca <utf16_literal_to_utf8+0x1fe>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3301      	adds	r3, #1
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b75      	cmp	r3, #117	; 0x75
 8004678:	d000      	beq.n	800467c <utf16_literal_to_utf8+0xb0>
 800467a:	e0a6      	b.n	80047ca <utf16_literal_to_utf8+0x1fe>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3302      	adds	r3, #2
 8004680:	0018      	movs	r0, r3
 8004682:	f7ff ff43 	bl	800450c <parse_hex4>
 8004686:	0003      	movs	r3, r0
 8004688:	613b      	str	r3, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	23dc      	movs	r3, #220	; 0xdc
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	429a      	cmp	r2, r3
 8004692:	d200      	bcs.n	8004696 <utf16_literal_to_utf8+0xca>
 8004694:	e09b      	b.n	80047ce <utf16_literal_to_utf8+0x202>
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	23e0      	movs	r3, #224	; 0xe0
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	429a      	cmp	r2, r3
 800469e:	d300      	bcc.n	80046a2 <utf16_literal_to_utf8+0xd6>
 80046a0:	e095      	b.n	80047ce <utf16_literal_to_utf8+0x202>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	029b      	lsls	r3, r3, #10
 80046a6:	4a4e      	ldr	r2, [pc, #312]	; (80047e0 <utf16_literal_to_utf8+0x214>)
 80046a8:	401a      	ands	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	059b      	lsls	r3, r3, #22
 80046ae:	0d9b      	lsrs	r3, r3, #22
 80046b0:	4313      	orrs	r3, r2
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	0252      	lsls	r2, r2, #9
 80046b6:	4694      	mov	ip, r2
 80046b8:	4463      	add	r3, ip
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80046bc:	e005      	b.n	80046ca <utf16_literal_to_utf8+0xfe>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80046be:	2321      	movs	r3, #33	; 0x21
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2206      	movs	r2, #6
 80046c4:	701a      	strb	r2, [r3, #0]
        codepoint = first_code;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2b7f      	cmp	r3, #127	; 0x7f
 80046ce:	d804      	bhi.n	80046da <utf16_literal_to_utf8+0x10e>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80046d0:	2323      	movs	r3, #35	; 0x23
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e028      	b.n	800472c <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint < 0x800)
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d208      	bcs.n	80046f6 <utf16_literal_to_utf8+0x12a>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80046e4:	2323      	movs	r3, #35	; 0x23
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	2202      	movs	r2, #2
 80046ea:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xC0; /* 11000000 */
 80046ec:	2320      	movs	r3, #32
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	22c0      	movs	r2, #192	; 0xc0
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	e01a      	b.n	800472c <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint < 0x10000)
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d208      	bcs.n	8004712 <utf16_literal_to_utf8+0x146>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8004700:	2323      	movs	r3, #35	; 0x23
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	2203      	movs	r2, #3
 8004706:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xE0; /* 11100000 */
 8004708:	2320      	movs	r3, #32
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	22e0      	movs	r2, #224	; 0xe0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e00c      	b.n	800472c <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint <= 0x10FFFF)
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	2388      	movs	r3, #136	; 0x88
 8004716:	035b      	lsls	r3, r3, #13
 8004718:	429a      	cmp	r2, r3
 800471a:	d25a      	bcs.n	80047d2 <utf16_literal_to_utf8+0x206>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800471c:	2323      	movs	r3, #35	; 0x23
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2204      	movs	r2, #4
 8004722:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xF0; /* 11110000 */
 8004724:	2320      	movs	r3, #32
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	22f0      	movs	r2, #240	; 0xf0
 800472a:	701a      	strb	r2, [r3, #0]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800472c:	2322      	movs	r3, #34	; 0x22
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	2223      	movs	r2, #35	; 0x23
 8004732:	18ba      	adds	r2, r7, r2
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	3a01      	subs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e017      	b.n	800476c <utf16_literal_to_utf8+0x1a0>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	b2db      	uxtb	r3, r3
 8004740:	223f      	movs	r2, #63	; 0x3f
 8004742:	4013      	ands	r3, r2
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	2022      	movs	r0, #34	; 0x22
 800474c:	183b      	adds	r3, r7, r0
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	18cb      	adds	r3, r1, r3
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	4249      	negs	r1, r1
 8004756:	430a      	orrs	r2, r1
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004762:	183b      	adds	r3, r7, r0
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	183b      	adds	r3, r7, r0
 8004768:	3a01      	subs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	2322      	movs	r3, #34	; 0x22
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e2      	bne.n	800473c <utf16_literal_to_utf8+0x170>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8004776:	2323      	movs	r3, #35	; 0x23
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d90a      	bls.n	8004796 <utf16_literal_to_utf8+0x1ca>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	b2d9      	uxtb	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2220      	movs	r2, #32
 800478a:	18ba      	adds	r2, r7, r2
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e007      	b.n	80047a6 <utf16_literal_to_utf8+0x1da>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	b2da      	uxtb	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	217f      	movs	r1, #127	; 0x7f
 80047a0:	400a      	ands	r2, r1
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	2323      	movs	r3, #35	; 0x23
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	18d2      	adds	r2, r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80047b6:	2321      	movs	r3, #33	; 0x21
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	e00b      	b.n	80047d6 <utf16_literal_to_utf8+0x20a>
        goto fail;
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	e008      	b.n	80047d4 <utf16_literal_to_utf8+0x208>
        goto fail;
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	e006      	b.n	80047d4 <utf16_literal_to_utf8+0x208>
            goto fail;
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	e004      	b.n	80047d4 <utf16_literal_to_utf8+0x208>
            goto fail;
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	e002      	b.n	80047d4 <utf16_literal_to_utf8+0x208>
            goto fail;
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	e000      	b.n	80047d4 <utf16_literal_to_utf8+0x208>
        goto fail;
 80047d2:	46c0      	nop			; (mov r8, r8)

fail:
    return 0;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b00a      	add	sp, #40	; 0x28
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	000ffc00 	.word	0x000ffc00

080047e4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80047e4:	b5b0      	push	{r4, r5, r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	3301      	adds	r3, #1
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	3301      	adds	r3, #1
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	18d3      	adds	r3, r2, r3
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b22      	cmp	r3, #34	; 0x22
 8004820:	d000      	beq.n	8004824 <parse_string+0x40>
 8004822:	e0d5      	b.n	80049d0 <parse_string+0x1ec>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800482c:	e017      	b.n	800485e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b5c      	cmp	r3, #92	; 0x5c
 8004834:	d110      	bne.n	8004858 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	001a      	movs	r2, r3
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d300      	bcc.n	800484c <parse_string+0x68>
 800484a:	e0c3      	b.n	80049d4 <parse_string+0x1f0>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	3301      	adds	r3, #1
 8004850:	61bb      	str	r3, [r7, #24]
                input_end++;
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	3301      	adds	r3, #1
 8004856:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	3301      	adds	r3, #1
 800485c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a3a      	ldr	r2, [r7, #32]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	001a      	movs	r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d203      	bcs.n	8004878 <parse_string+0x94>
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b22      	cmp	r3, #34	; 0x22
 8004876:	d1da      	bne.n	800482e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	001a      	movs	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d300      	bcc.n	800488c <parse_string+0xa8>
 800488a:	e0a5      	b.n	80049d8 <parse_string+0x1f4>
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b22      	cmp	r3, #34	; 0x22
 8004892:	d000      	beq.n	8004896 <parse_string+0xb2>
 8004894:	e0a0      	b.n	80049d8 <parse_string+0x1f4>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	001a      	movs	r2, r3
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	3201      	adds	r2, #1
 80048b4:	0010      	movs	r0, r2
 80048b6:	4798      	blx	r3
 80048b8:	0003      	movs	r3, r0
 80048ba:	61fb      	str	r3, [r7, #28]
        if (output == NULL)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d100      	bne.n	80048c4 <parse_string+0xe0>
 80048c2:	e08b      	b.n	80049dc <parse_string+0x1f8>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80048c8:	e067      	b.n	800499a <parse_string+0x1b6>
    {
        if (*input_pointer != '\\')
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b5c      	cmp	r3, #92	; 0x5c
 80048d0:	d008      	beq.n	80048e4 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	1c53      	adds	r3, r2, #1
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	60f9      	str	r1, [r7, #12]
 80048de:	7812      	ldrb	r2, [r2, #0]
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	e05a      	b.n	800499a <parse_string+0x1b6>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80048e4:	2317      	movs	r3, #23
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2202      	movs	r2, #2
 80048ea:	701a      	strb	r2, [r3, #0]
            if ((input_end - input_pointer) < 1)
 80048ec:	6a3a      	ldr	r2, [r7, #32]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	dc00      	bgt.n	80048f8 <parse_string+0x114>
 80048f6:	e073      	b.n	80049e0 <parse_string+0x1fc>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	3301      	adds	r3, #1
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b75      	cmp	r3, #117	; 0x75
 8004900:	dd00      	ble.n	8004904 <parse_string+0x120>
 8004902:	e06f      	b.n	80049e4 <parse_string+0x200>
 8004904:	2b5c      	cmp	r3, #92	; 0x5c
 8004906:	da04      	bge.n	8004912 <parse_string+0x12e>
 8004908:	2b22      	cmp	r3, #34	; 0x22
 800490a:	d028      	beq.n	800495e <parse_string+0x17a>
 800490c:	2b2f      	cmp	r3, #47	; 0x2f
 800490e:	d026      	beq.n	800495e <parse_string+0x17a>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8004910:	e068      	b.n	80049e4 <parse_string+0x200>
            switch (input_pointer[1])
 8004912:	3b5c      	subs	r3, #92	; 0x5c
 8004914:	2b19      	cmp	r3, #25
 8004916:	d865      	bhi.n	80049e4 <parse_string+0x200>
 8004918:	009a      	lsls	r2, r3, #2
 800491a:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <parse_string+0x234>)
 800491c:	18d3      	adds	r3, r2, r3
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	469f      	mov	pc, r3
                    *output_pointer++ = '\b';
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	60fa      	str	r2, [r7, #12]
 8004928:	2208      	movs	r2, #8
 800492a:	701a      	strb	r2, [r3, #0]
                    break;
 800492c:	e02f      	b.n	800498e <parse_string+0x1aa>
                    *output_pointer++ = '\f';
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	60fa      	str	r2, [r7, #12]
 8004934:	220c      	movs	r2, #12
 8004936:	701a      	strb	r2, [r3, #0]
                    break;
 8004938:	e029      	b.n	800498e <parse_string+0x1aa>
                    *output_pointer++ = '\n';
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	60fa      	str	r2, [r7, #12]
 8004940:	220a      	movs	r2, #10
 8004942:	701a      	strb	r2, [r3, #0]
                    break;
 8004944:	e023      	b.n	800498e <parse_string+0x1aa>
                    *output_pointer++ = '\r';
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	60fa      	str	r2, [r7, #12]
 800494c:	220d      	movs	r2, #13
 800494e:	701a      	strb	r2, [r3, #0]
                    break;
 8004950:	e01d      	b.n	800498e <parse_string+0x1aa>
                    *output_pointer++ = '\t';
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	60fa      	str	r2, [r7, #12]
 8004958:	2209      	movs	r2, #9
 800495a:	701a      	strb	r2, [r3, #0]
                    break;
 800495c:	e017      	b.n	800498e <parse_string+0x1aa>
                    *output_pointer++ = input_pointer[1];
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	60f9      	str	r1, [r7, #12]
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	701a      	strb	r2, [r3, #0]
                    break;
 800496c:	e00f      	b.n	800498e <parse_string+0x1aa>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800496e:	2517      	movs	r5, #23
 8004970:	197c      	adds	r4, r7, r5
 8004972:	230c      	movs	r3, #12
 8004974:	18fa      	adds	r2, r7, r3
 8004976:	6a39      	ldr	r1, [r7, #32]
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	0018      	movs	r0, r3
 800497c:	f7ff fe26 	bl	80045cc <utf16_literal_to_utf8>
 8004980:	0003      	movs	r3, r0
 8004982:	7023      	strb	r3, [r4, #0]
                    if (sequence_length == 0)
 8004984:	197b      	adds	r3, r7, r5
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02d      	beq.n	80049e8 <parse_string+0x204>
                    break;
 800498c:	46c0      	nop			; (mov r8, r8)
            }
            input_pointer += sequence_length;
 800498e:	2317      	movs	r3, #23
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	18d3      	adds	r3, r2, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d393      	bcc.n	80048ca <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2210      	movs	r2, #16
 80049ac:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	001a      	movs	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	609a      	str	r2, [r3, #8]

    return true;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e01f      	b.n	8004a10 <parse_string+0x22c>
        goto fail;
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	e00a      	b.n	80049ea <parse_string+0x206>
                    goto fail;
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	e008      	b.n	80049ea <parse_string+0x206>
            goto fail; /* string ended unexpectedly */
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	e006      	b.n	80049ea <parse_string+0x206>
            goto fail; /* allocation failure */
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	e004      	b.n	80049ea <parse_string+0x206>
                goto fail;
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	e002      	b.n	80049ea <parse_string+0x206>
                    goto fail;
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	e000      	b.n	80049ea <parse_string+0x206>
                        goto fail;
 80049e8:	46c0      	nop			; (mov r8, r8)

fail:
    if (output != NULL)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <parse_string+0x216>
    {
        input_buffer->hooks.deallocate(output);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	0010      	movs	r0, r2
 80049f8:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <parse_string+0x22a>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	001a      	movs	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	609a      	str	r2, [r3, #8]
    }

    return false;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b00a      	add	sp, #40	; 0x28
 8004a16:	bdb0      	pop	{r4, r5, r7, pc}
 8004a18:	0800cb0c 	.word	0x0800cb0c

08004a1c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <buffer_skip_whitespace+0x16>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e02c      	b.n	8004a90 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <buffer_skip_whitespace+0x2c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d306      	bcc.n	8004a56 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	e021      	b.n	8004a90 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <buffer_skip_whitespace+0x5c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d207      	bcs.n	8004a78 <buffer_skip_whitespace+0x5c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	18d3      	adds	r3, r2, r3
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d9e9      	bls.n	8004a4c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d104      	bne.n	8004a8e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	1e5a      	subs	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8004a8e:	687b      	ldr	r3, [r7, #4]
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <skip_utf8_bom+0x1e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <skip_utf8_bom+0x1e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <skip_utf8_bom+0x22>
    {
        return NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e01b      	b.n	8004af2 <skip_utf8_bom+0x5a>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d017      	beq.n	8004af0 <skip_utf8_bom+0x58>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	1d1a      	adds	r2, r3, #4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d210      	bcs.n	8004af0 <skip_utf8_bom+0x58>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	18d3      	adds	r3, r2, r3
 8004ad8:	4908      	ldr	r1, [pc, #32]	; (8004afc <skip_utf8_bom+0x64>)
 8004ada:	2203      	movs	r2, #3
 8004adc:	0018      	movs	r0, r3
 8004ade:	f006 f85f 	bl	800aba0 <strncmp>
 8004ae2:	1e03      	subs	r3, r0, #0
 8004ae4:	d104      	bne.n	8004af0 <skip_utf8_bom+0x58>
    {
        buffer->offset += 3;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	1cda      	adds	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8004af0:	687b      	ldr	r3, [r7, #4]
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b002      	add	sp, #8
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	0800ca6c 	.word	0x0800ca6c

08004b00 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e00d      	b.n	8004b32 <cJSON_ParseWithOpts+0x32>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fb faff 	bl	800011c <strlen>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	3301      	adds	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	6979      	ldr	r1, [r7, #20]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f806 	bl	8004b3c <cJSON_ParseWithLengthOpts>
 8004b30:	0003      	movs	r3, r0
}
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b006      	add	sp, #24
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8004b3c:	b5b0      	push	{r4, r5, r7, lr}
 8004b3e:	b08e      	sub	sp, #56	; 0x38
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8004b4a:	2418      	movs	r4, #24
 8004b4c:	193b      	adds	r3, r7, r4
 8004b4e:	0018      	movs	r0, r3
 8004b50:	231c      	movs	r3, #28
 8004b52:	001a      	movs	r2, r3
 8004b54:	2100      	movs	r1, #0
 8004b56:	f006 f80d 	bl	800ab74 <memset>
    cJSON *item = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8004b5e:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <cJSON_ParseWithLengthOpts+0x158>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <cJSON_ParseWithLengthOpts+0x158>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d04d      	beq.n	8004c0c <cJSON_ParseWithLengthOpts+0xd0>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d04a      	beq.n	8004c0c <cJSON_ParseWithLengthOpts+0xd0>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8004b76:	0025      	movs	r5, r4
 8004b78:	197b      	adds	r3, r7, r5
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]
    buffer.length = buffer_length;
 8004b7e:	197b      	adds	r3, r7, r5
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	605a      	str	r2, [r3, #4]
    buffer.offset = 0;
 8004b84:	197b      	adds	r3, r7, r5
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
    buffer.hooks = global_hooks;
 8004b8a:	197b      	adds	r3, r7, r5
 8004b8c:	4a42      	ldr	r2, [pc, #264]	; (8004c98 <cJSON_ParseWithLengthOpts+0x15c>)
 8004b8e:	3310      	adds	r3, #16
 8004b90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b92:	c313      	stmia	r3!, {r0, r1, r4}

    item = cJSON_New_Item(&global_hooks);
 8004b94:	4b40      	ldr	r3, [pc, #256]	; (8004c98 <cJSON_ParseWithLengthOpts+0x15c>)
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7ff fb8a 	bl	80042b0 <cJSON_New_Item>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d034      	beq.n	8004c10 <cJSON_ParseWithLengthOpts+0xd4>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8004ba6:	197b      	adds	r3, r7, r5
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7ff ff75 	bl	8004a98 <skip_utf8_bom>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7ff ff33 	bl	8004a1c <buffer_skip_whitespace>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	0011      	movs	r1, r2
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f87d 	bl	8004cbc <parse_value>
 8004bc2:	1e03      	subs	r3, r0, #0
 8004bc4:	d026      	beq.n	8004c14 <cJSON_ParseWithLengthOpts+0xd8>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <cJSON_ParseWithLengthOpts+0xb6>
    {
        buffer_skip_whitespace(&buffer);
 8004bcc:	197b      	adds	r3, r7, r5
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7ff ff24 	bl	8004a1c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8004bd4:	0029      	movs	r1, r5
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d21a      	bcs.n	8004c18 <cJSON_ParseWithLengthOpts+0xdc>
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	18d3      	adds	r3, r2, r3
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d112      	bne.n	8004c18 <cJSON_ParseWithLengthOpts+0xdc>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <cJSON_ParseWithLengthOpts+0xcc>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8004bf8:	2118      	movs	r1, #24
 8004bfa:	187b      	adds	r3, r7, r1
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	187b      	adds	r3, r7, r1
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	18d2      	adds	r2, r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]
    }

    return item;
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	e03f      	b.n	8004c8c <cJSON_ParseWithLengthOpts+0x150>
        goto fail;
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	e004      	b.n	8004c1a <cJSON_ParseWithLengthOpts+0xde>
        goto fail;
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	e002      	b.n	8004c1a <cJSON_ParseWithLengthOpts+0xde>
        goto fail;
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	e000      	b.n	8004c1a <cJSON_ParseWithLengthOpts+0xde>
            goto fail;
 8004c18:	46c0      	nop			; (mov r8, r8)

fail:
    if (item != NULL)
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <cJSON_ParseWithLengthOpts+0xec>
    {
        cJSON_Delete(item);
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7ff fb5c 	bl	80042e0 <cJSON_Delete>
    }

    if (value != NULL)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02d      	beq.n	8004c8a <cJSON_ParseWithLengthOpts+0x14e>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8004c2e:	2110      	movs	r1, #16
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]
        local_error.position = 0;
 8004c36:	187b      	adds	r3, r7, r1
 8004c38:	2200      	movs	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]

        if (buffer.offset < buffer.length)
 8004c3c:	2018      	movs	r0, #24
 8004c3e:	183b      	adds	r3, r7, r0
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	183b      	adds	r3, r7, r0
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d204      	bcs.n	8004c54 <cJSON_ParseWithLengthOpts+0x118>
        {
            local_error.position = buffer.offset;
 8004c4a:	183b      	adds	r3, r7, r0
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	e00a      	b.n	8004c6a <cJSON_ParseWithLengthOpts+0x12e>
        }
        else if (buffer.length > 0)
 8004c54:	2218      	movs	r2, #24
 8004c56:	18bb      	adds	r3, r7, r2
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <cJSON_ParseWithLengthOpts+0x12e>
        {
            local_error.position = buffer.length - 1;
 8004c5e:	18bb      	adds	r3, r7, r2
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	1e5a      	subs	r2, r3, #1
 8004c64:	2310      	movs	r3, #16
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	605a      	str	r2, [r3, #4]
        }

        if (return_parse_end != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <cJSON_ParseWithLengthOpts+0x144>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8004c70:	2110      	movs	r1, #16
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	18d2      	adds	r2, r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <cJSON_ParseWithLengthOpts+0x158>)
 8004c82:	2210      	movs	r2, #16
 8004c84:	18ba      	adds	r2, r7, r2
 8004c86:	ca03      	ldmia	r2!, {r0, r1}
 8004c88:	c303      	stmia	r3!, {r0, r1}
    }

    return NULL;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b00e      	add	sp, #56	; 0x38
 8004c92:	bdb0      	pop	{r4, r5, r7, pc}
 8004c94:	20000d18 	.word	0x20000d18
 8004c98:	20000004 	.word	0x20000004

08004c9c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7ff ff28 	bl	8004b00 <cJSON_ParseWithOpts>
 8004cb0:	0003      	movs	r3, r0
}
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <parse_value+0x18>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <parse_value+0x1c>
    {
        return false; /* no input */
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e0d7      	b.n	8004e88 <parse_value+0x1cc>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01c      	beq.n	8004d18 <parse_value+0x5c>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	1d1a      	adds	r2, r3, #4
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d815      	bhi.n	8004d18 <parse_value+0x5c>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	18d3      	adds	r3, r2, r3
 8004cf6:	4966      	ldr	r1, [pc, #408]	; (8004e90 <parse_value+0x1d4>)
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f005 ff50 	bl	800aba0 <strncmp>
 8004d00:	1e03      	subs	r3, r0, #0
 8004d02:	d109      	bne.n	8004d18 <parse_value+0x5c>
    {
        item->type = cJSON_NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2204      	movs	r2, #4
 8004d08:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	609a      	str	r2, [r3, #8]
        return true;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0b7      	b.n	8004e88 <parse_value+0x1cc>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01c      	beq.n	8004d58 <parse_value+0x9c>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	1d5a      	adds	r2, r3, #5
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d815      	bhi.n	8004d58 <parse_value+0x9c>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	18d3      	adds	r3, r2, r3
 8004d36:	4957      	ldr	r1, [pc, #348]	; (8004e94 <parse_value+0x1d8>)
 8004d38:	2205      	movs	r2, #5
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f005 ff30 	bl	800aba0 <strncmp>
 8004d40:	1e03      	subs	r3, r0, #0
 8004d42:	d109      	bne.n	8004d58 <parse_value+0x9c>
    {
        item->type = cJSON_False;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	1d5a      	adds	r2, r3, #5
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	609a      	str	r2, [r3, #8]
        return true;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e097      	b.n	8004e88 <parse_value+0x1cc>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01f      	beq.n	8004d9e <parse_value+0xe2>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d818      	bhi.n	8004d9e <parse_value+0xe2>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	18d3      	adds	r3, r2, r3
 8004d76:	4948      	ldr	r1, [pc, #288]	; (8004e98 <parse_value+0x1dc>)
 8004d78:	2204      	movs	r2, #4
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f005 ff10 	bl	800aba0 <strncmp>
 8004d80:	1e03      	subs	r3, r0, #0
 8004d82:	d10c      	bne.n	8004d9e <parse_value+0xe2>
    {
        item->type = cJSON_True;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	1d1a      	adds	r2, r3, #4
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	609a      	str	r2, [r3, #8]
        return true;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e074      	b.n	8004e88 <parse_value+0x1cc>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <parse_value+0x114>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d20f      	bcs.n	8004dd0 <parse_value+0x114>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	18d3      	adds	r3, r2, r3
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b22      	cmp	r3, #34	; 0x22
 8004dbe:	d107      	bne.n	8004dd0 <parse_value+0x114>
    {
        return parse_string(item, input_buffer);
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	0011      	movs	r1, r2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7ff fd0c 	bl	80047e4 <parse_string>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	e05b      	b.n	8004e88 <parse_value+0x1cc>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d025      	beq.n	8004e22 <parse_value+0x166>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d21f      	bcs.n	8004e22 <parse_value+0x166>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	18d3      	adds	r3, r2, r3
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b2d      	cmp	r3, #45	; 0x2d
 8004df0:	d00f      	beq.n	8004e12 <parse_value+0x156>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	18d3      	adds	r3, r2, r3
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b2f      	cmp	r3, #47	; 0x2f
 8004e00:	d90f      	bls.n	8004e22 <parse_value+0x166>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	18d3      	adds	r3, r2, r3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b39      	cmp	r3, #57	; 0x39
 8004e10:	d807      	bhi.n	8004e22 <parse_value+0x166>
    {
        return parse_number(item, input_buffer);
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	0011      	movs	r1, r2
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff fab1 	bl	8004380 <parse_number>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	e032      	b.n	8004e88 <parse_value+0x1cc>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <parse_value+0x198>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d20f      	bcs.n	8004e54 <parse_value+0x198>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	18d3      	adds	r3, r2, r3
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b5b      	cmp	r3, #91	; 0x5b
 8004e42:	d107      	bne.n	8004e54 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0011      	movs	r1, r2
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f000 f826 	bl	8004e9c <parse_array>
 8004e50:	0003      	movs	r3, r0
 8004e52:	e019      	b.n	8004e88 <parse_value+0x1cc>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d015      	beq.n	8004e86 <parse_value+0x1ca>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d20f      	bcs.n	8004e86 <parse_value+0x1ca>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	18d3      	adds	r3, r2, r3
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b7b      	cmp	r3, #123	; 0x7b
 8004e74:	d107      	bne.n	8004e86 <parse_value+0x1ca>
    {
        return parse_object(item, input_buffer);
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	0011      	movs	r1, r2
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f000 f8d8 	bl	8005032 <parse_object>
 8004e82:	0003      	movs	r3, r0
 8004e84:	e000      	b.n	8004e88 <parse_value+0x1cc>
    }

    return false;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	0800ca40 	.word	0x0800ca40
 8004e94:	0800ca70 	.word	0x0800ca70
 8004e98:	0800ca78 	.word	0x0800ca78

08004e9c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	23fa      	movs	r3, #250	; 0xfa
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d301      	bcc.n	8004ebe <parse_array+0x22>
    {
        return false; /* to deeply nested */
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e0b5      	b.n	800502a <parse_array+0x18e>
    }
    input_buffer->depth++;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	18d3      	adds	r3, r2, r3
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b5b      	cmp	r3, #91	; 0x5b
 8004ed6:	d000      	beq.n	8004eda <parse_array+0x3e>
 8004ed8:	e098      	b.n	800500c <parse_array+0x170>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f7ff fd98 	bl	8004a1c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <parse_array+0x72>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d207      	bcs.n	8004f0e <parse_array+0x72>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	18d3      	adds	r3, r2, r3
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b5d      	cmp	r3, #93	; 0x5d
 8004f0c:	d065      	beq.n	8004fda <parse_array+0x13e>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <parse_array+0x84>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d305      	bcc.n	8004f2c <parse_array+0x90>
    {
        input_buffer->offset--;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	609a      	str	r2, [r3, #8]
        goto fail;
 8004f2a:	e076      	b.n	800501a <parse_array+0x17e>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	1e5a      	subs	r2, r3, #1
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3310      	adds	r3, #16
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7ff f9b8 	bl	80042b0 <cJSON_New_Item>
 8004f40:	0003      	movs	r3, r0
 8004f42:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d062      	beq.n	8005010 <parse_array+0x174>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <parse_array+0xbe>
        {
            /* start the linked list */
            current_item = head = new_item;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e007      	b.n	8004f6a <parse_array+0xce>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7ff fd50 	bl	8004a1c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	0011      	movs	r1, r2
 8004f82:	0018      	movs	r0, r3
 8004f84:	f7ff fe9a 	bl	8004cbc <parse_value>
 8004f88:	1e03      	subs	r3, r0, #0
 8004f8a:	d043      	beq.n	8005014 <parse_array+0x178>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7ff fd44 	bl	8004a1c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <parse_array+0x11a>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d207      	bcs.n	8004fb6 <parse_array+0x11a>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	18d3      	adds	r3, r2, r3
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b2c      	cmp	r3, #44	; 0x2c
 8004fb4:	d0bf      	beq.n	8004f36 <parse_array+0x9a>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d02d      	beq.n	8005018 <parse_array+0x17c>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d227      	bcs.n	8005018 <parse_array+0x17c>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	18d3      	adds	r3, r2, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b5d      	cmp	r3, #93	; 0x5d
 8004fd6:	d11f      	bne.n	8005018 <parse_array+0x17c>
    {
        goto fail; /* expected end of array */
    }

success:
 8004fd8:	e000      	b.n	8004fdc <parse_array+0x140>
        goto success;
 8004fda:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <parse_array+0x156>
        head->prev = current_item;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	60da      	str	r2, [r3, #12]
    item->child = head;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	609a      	str	r2, [r3, #8]

    return true;
 8005008:	2301      	movs	r3, #1
 800500a:	e00e      	b.n	800502a <parse_array+0x18e>
        goto fail;
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	e004      	b.n	800501a <parse_array+0x17e>
            goto fail; /* allocation failure */
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	e002      	b.n	800501a <parse_array+0x17e>
            goto fail; /* failed to parse value */
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	e000      	b.n	800501a <parse_array+0x17e>
        goto fail; /* expected end of array */
 8005018:	46c0      	nop			; (mov r8, r8)

fail:
    if (head != NULL)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <parse_array+0x18c>
    {
        cJSON_Delete(head);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	0018      	movs	r0, r3
 8005024:	f7ff f95c 	bl	80042e0 <cJSON_Delete>
    }

    return false;
 8005028:	2300      	movs	r3, #0
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b006      	add	sp, #24
 8005030:	bd80      	pop	{r7, pc}

08005032 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	23fa      	movs	r3, #250	; 0xfa
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d301      	bcc.n	8005054 <parse_object+0x22>
    {
        return false; /* to deeply nested */
 8005050:	2300      	movs	r3, #0
 8005052:	e0f4      	b.n	800523e <parse_object+0x20c>
    }
    input_buffer->depth++;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d100      	bne.n	8005066 <parse_object+0x34>
 8005064:	e0d8      	b.n	8005218 <parse_object+0x1e6>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d300      	bcc.n	8005074 <parse_object+0x42>
 8005072:	e0d1      	b.n	8005218 <parse_object+0x1e6>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b7b      	cmp	r3, #123	; 0x7b
 8005082:	d000      	beq.n	8005086 <parse_object+0x54>
 8005084:	e0c8      	b.n	8005218 <parse_object+0x1e6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	0018      	movs	r0, r3
 8005094:	f7ff fcc2 	bl	8004a1c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00e      	beq.n	80050bc <parse_object+0x8a>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d208      	bcs.n	80050bc <parse_object+0x8a>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	18d3      	adds	r3, r2, r3
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b7d      	cmp	r3, #125	; 0x7d
 80050b8:	d100      	bne.n	80050bc <parse_object+0x8a>
 80050ba:	e094      	b.n	80051e6 <parse_object+0x1b4>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <parse_object+0x9c>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d305      	bcc.n	80050da <parse_object+0xa8>
    {
        input_buffer->offset--;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	1e5a      	subs	r2, r3, #1
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	609a      	str	r2, [r3, #8]
        goto fail;
 80050d8:	e0a9      	b.n	800522e <parse_object+0x1fc>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	3310      	adds	r3, #16
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7ff f8e1 	bl	80042b0 <cJSON_New_Item>
 80050ee:	0003      	movs	r3, r0
 80050f0:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d100      	bne.n	80050fa <parse_object+0xc8>
 80050f8:	e090      	b.n	800521c <parse_object+0x1ea>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <parse_object+0xd8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	e007      	b.n	800511a <parse_object+0xe8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	0018      	movs	r0, r3
 8005128:	f7ff fc78 	bl	8004a1c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	0011      	movs	r1, r2
 8005132:	0018      	movs	r0, r3
 8005134:	f7ff fb56 	bl	80047e4 <parse_string>
 8005138:	1e03      	subs	r3, r0, #0
 800513a:	d100      	bne.n	800513e <parse_object+0x10c>
 800513c:	e070      	b.n	8005220 <parse_object+0x1ee>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff fc6b 	bl	8004a1c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2200      	movs	r2, #0
 8005152:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d064      	beq.n	8005224 <parse_object+0x1f2>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	d25e      	bcs.n	8005224 <parse_object+0x1f2>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	18d3      	adds	r3, r2, r3
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b3a      	cmp	r3, #58	; 0x3a
 8005174:	d156      	bne.n	8005224 <parse_object+0x1f2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	0018      	movs	r0, r3
 8005184:	f7ff fc4a 	bl	8004a1c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	0011      	movs	r1, r2
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff fd94 	bl	8004cbc <parse_value>
 8005194:	1e03      	subs	r3, r0, #0
 8005196:	d047      	beq.n	8005228 <parse_object+0x1f6>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	0018      	movs	r0, r3
 800519c:	f7ff fc3e 	bl	8004a1c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <parse_object+0x190>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d207      	bcs.n	80051c2 <parse_object+0x190>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	18d3      	adds	r3, r2, r3
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b2c      	cmp	r3, #44	; 0x2c
 80051c0:	d090      	beq.n	80050e4 <parse_object+0xb2>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d031      	beq.n	800522c <parse_object+0x1fa>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d22b      	bcs.n	800522c <parse_object+0x1fa>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	18d3      	adds	r3, r2, r3
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b7d      	cmp	r3, #125	; 0x7d
 80051e2:	d123      	bne.n	800522c <parse_object+0x1fa>
    {
        goto fail; /* expected end of object */
    }

success:
 80051e4:	e000      	b.n	80051e8 <parse_object+0x1b6>
        goto success; /* empty object */
 80051e6:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	1e5a      	subs	r2, r3, #1
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <parse_object+0x1cc>
        head->prev = current_item;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2240      	movs	r2, #64	; 0x40
 8005202:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	609a      	str	r2, [r3, #8]
    return true;
 8005214:	2301      	movs	r3, #1
 8005216:	e012      	b.n	800523e <parse_object+0x20c>
        goto fail; /* not an object */
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	e008      	b.n	800522e <parse_object+0x1fc>
            goto fail; /* allocation failure */
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	e006      	b.n	800522e <parse_object+0x1fc>
            goto fail; /* failed to parse name */
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	e004      	b.n	800522e <parse_object+0x1fc>
            goto fail; /* invalid object */
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	e002      	b.n	800522e <parse_object+0x1fc>
            goto fail; /* failed to parse value */
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	e000      	b.n	800522e <parse_object+0x1fc>
        goto fail; /* expected end of object */
 800522c:	46c0      	nop			; (mov r8, r8)

fail:
    if (head != NULL)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <parse_object+0x20a>
    {
        cJSON_Delete(head);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	0018      	movs	r0, r3
 8005238:	f7ff f852 	bl	80042e0 <cJSON_Delete>
    }

    return false;
 800523c:	2300      	movs	r3, #0
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b006      	add	sp, #24
 8005244:	bd80      	pop	{r7, pc}

08005246 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <get_object_item+0x1c>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <get_object_item+0x20>
    {
        return NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	e033      	b.n	80052ce <get_object_item+0x88>
    }

    current_element = object->child;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d017      	beq.n	80052a2 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8005272:	e002      	b.n	800527a <get_object_item+0x34>
        {
            current_element = current_element->next;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01c      	beq.n	80052ba <get_object_item+0x74>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d018      	beq.n	80052ba <get_object_item+0x74>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	0011      	movs	r1, r2
 8005290:	0018      	movs	r0, r3
 8005292:	f7fa ff39 	bl	8000108 <strcmp>
 8005296:	1e03      	subs	r3, r0, #0
 8005298:	d1ec      	bne.n	8005274 <get_object_item+0x2e>
 800529a:	e00e      	b.n	80052ba <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <get_object_item+0x74>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	0011      	movs	r1, r2
 80052b0:	0018      	movs	r0, r3
 80052b2:	f7fe ff77 	bl	80041a4 <case_insensitive_strcmp>
 80052b6:	1e03      	subs	r3, r0, #0
 80052b8:	d1f0      	bne.n	800529c <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <get_object_item+0x82>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <get_object_item+0x86>
        return NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <get_object_item+0x88>
    }

    return current_element;
 80052cc:	697b      	ldr	r3, [r7, #20]
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b006      	add	sp, #24
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7ff ffad 	bl	8005246 <get_object_item>
 80052ec:	0003      	movs	r3, r0
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b002      	add	sp, #8
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <cJSON_IsFalse>:

    return (item->type & 0xFF) == cJSON_Invalid;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <cJSON_IsFalse+0x12>
    {
        return false;
 8005304:	2300      	movs	r3, #0
 8005306:	e007      	b.n	8005318 <cJSON_IsFalse+0x22>
    }

    return (item->type & 0xFF) == cJSON_False;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	22ff      	movs	r2, #255	; 0xff
 800530e:	4013      	ands	r3, r2
 8005310:	3b01      	subs	r3, #1
 8005312:	425a      	negs	r2, r3
 8005314:	4153      	adcs	r3, r2
 8005316:	b2db      	uxtb	r3, r3
}
 8005318:	0018      	movs	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	b002      	add	sp, #8
 800531e:	bd80      	pop	{r7, pc}

08005320 <cJSON_IsTrue>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <cJSON_IsTrue+0x12>
    {
        return false;
 800532e:	2300      	movs	r3, #0
 8005330:	e007      	b.n	8005342 <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	4013      	ands	r3, r2
 800533a:	3b02      	subs	r3, #2
 800533c:	425a      	negs	r2, r3
 800533e:	4153      	adcs	r3, r2
 8005340:	b2db      	uxtb	r3, r3
}
 8005342:	0018      	movs	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	b002      	add	sp, #8
 8005348:	bd80      	pop	{r7, pc}

0800534a <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <cJSON_IsNumber+0x12>
    {
        return false;
 8005358:	2300      	movs	r3, #0
 800535a:	e007      	b.n	800536c <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	22ff      	movs	r2, #255	; 0xff
 8005362:	4013      	ands	r3, r2
 8005364:	3b08      	subs	r3, #8
 8005366:	425a      	negs	r2, r3
 8005368:	4153      	adcs	r3, r2
 800536a:	b2db      	uxtb	r3, r3
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800537a:	1dfb      	adds	r3, r7, #7
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_Init+0x3c>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <HAL_Init+0x3c>)
 8005386:	2140      	movs	r1, #64	; 0x40
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800538c:	2000      	movs	r0, #0
 800538e:	f000 f811 	bl	80053b4 <HAL_InitTick>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d003      	beq.n	800539e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005396:	1dfb      	adds	r3, r7, #7
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e001      	b.n	80053a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800539e:	f7fd fdb3 	bl	8002f08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053a2:	1dfb      	adds	r3, r7, #7
 80053a4:	781b      	ldrb	r3, [r3, #0]
}
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b002      	add	sp, #8
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	40022000 	.word	0x40022000

080053b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053bc:	4b14      	ldr	r3, [pc, #80]	; (8005410 <HAL_InitTick+0x5c>)
 80053be:	681c      	ldr	r4, [r3, #0]
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <HAL_InitTick+0x60>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	0019      	movs	r1, r3
 80053c6:	23fa      	movs	r3, #250	; 0xfa
 80053c8:	0098      	lsls	r0, r3, #2
 80053ca:	f7fa fec3 	bl	8000154 <__udivsi3>
 80053ce:	0003      	movs	r3, r0
 80053d0:	0019      	movs	r1, r3
 80053d2:	0020      	movs	r0, r4
 80053d4:	f7fa febe 	bl	8000154 <__udivsi3>
 80053d8:	0003      	movs	r3, r0
 80053da:	0018      	movs	r0, r3
 80053dc:	f000 f92f 	bl	800563e <HAL_SYSTICK_Config>
 80053e0:	1e03      	subs	r3, r0, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e00f      	b.n	8005408 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d80b      	bhi.n	8005406 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	2301      	movs	r3, #1
 80053f2:	425b      	negs	r3, r3
 80053f4:	2200      	movs	r2, #0
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 f8fc 	bl	80055f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <HAL_InitTick+0x64>)
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e000      	b.n	8005408 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b003      	add	sp, #12
 800540e:	bd90      	pop	{r4, r7, pc}
 8005410:	20000000 	.word	0x20000000
 8005414:	20000014 	.word	0x20000014
 8005418:	20000010 	.word	0x20000010

0800541c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_IncTick+0x1c>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	001a      	movs	r2, r3
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <HAL_IncTick+0x20>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	18d2      	adds	r2, r2, r3
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <HAL_IncTick+0x20>)
 800542e:	601a      	str	r2, [r3, #0]
}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	20000014 	.word	0x20000014
 800543c:	20000d20 	.word	0x20000d20

08005440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  return uwTick;
 8005444:	4b02      	ldr	r3, [pc, #8]	; (8005450 <HAL_GetTick+0x10>)
 8005446:	681b      	ldr	r3, [r3, #0]
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	20000d20 	.word	0x20000d20

08005454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800545c:	f7ff fff0 	bl	8005440 <HAL_GetTick>
 8005460:	0003      	movs	r3, r0
 8005462:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	d005      	beq.n	800547a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <HAL_Delay+0x44>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	001a      	movs	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	189b      	adds	r3, r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	f7ff ffe0 	bl	8005440 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d8f7      	bhi.n	800547c <HAL_Delay+0x28>
  {
  }
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	20000014 	.word	0x20000014

0800549c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	0002      	movs	r2, r0
 80054a4:	1dfb      	adds	r3, r7, #7
 80054a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80054a8:	1dfb      	adds	r3, r7, #7
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b7f      	cmp	r3, #127	; 0x7f
 80054ae:	d809      	bhi.n	80054c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054b0:	1dfb      	adds	r3, r7, #7
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	001a      	movs	r2, r3
 80054b6:	231f      	movs	r3, #31
 80054b8:	401a      	ands	r2, r3
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <__NVIC_EnableIRQ+0x30>)
 80054bc:	2101      	movs	r1, #1
 80054be:	4091      	lsls	r1, r2
 80054c0:	000a      	movs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]
  }
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	e000e100 	.word	0xe000e100

080054d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d0:	b590      	push	{r4, r7, lr}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	0002      	movs	r2, r0
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	1dfb      	adds	r3, r7, #7
 80054dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80054de:	1dfb      	adds	r3, r7, #7
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b7f      	cmp	r3, #127	; 0x7f
 80054e4:	d828      	bhi.n	8005538 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054e6:	4a2f      	ldr	r2, [pc, #188]	; (80055a4 <__NVIC_SetPriority+0xd4>)
 80054e8:	1dfb      	adds	r3, r7, #7
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	33c0      	adds	r3, #192	; 0xc0
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	589b      	ldr	r3, [r3, r2]
 80054f6:	1dfa      	adds	r2, r7, #7
 80054f8:	7812      	ldrb	r2, [r2, #0]
 80054fa:	0011      	movs	r1, r2
 80054fc:	2203      	movs	r2, #3
 80054fe:	400a      	ands	r2, r1
 8005500:	00d2      	lsls	r2, r2, #3
 8005502:	21ff      	movs	r1, #255	; 0xff
 8005504:	4091      	lsls	r1, r2
 8005506:	000a      	movs	r2, r1
 8005508:	43d2      	mvns	r2, r2
 800550a:	401a      	ands	r2, r3
 800550c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	019b      	lsls	r3, r3, #6
 8005512:	22ff      	movs	r2, #255	; 0xff
 8005514:	401a      	ands	r2, r3
 8005516:	1dfb      	adds	r3, r7, #7
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	0018      	movs	r0, r3
 800551c:	2303      	movs	r3, #3
 800551e:	4003      	ands	r3, r0
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005524:	481f      	ldr	r0, [pc, #124]	; (80055a4 <__NVIC_SetPriority+0xd4>)
 8005526:	1dfb      	adds	r3, r7, #7
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b25b      	sxtb	r3, r3
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	430a      	orrs	r2, r1
 8005530:	33c0      	adds	r3, #192	; 0xc0
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005536:	e031      	b.n	800559c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005538:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <__NVIC_SetPriority+0xd8>)
 800553a:	1dfb      	adds	r3, r7, #7
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	0019      	movs	r1, r3
 8005540:	230f      	movs	r3, #15
 8005542:	400b      	ands	r3, r1
 8005544:	3b08      	subs	r3, #8
 8005546:	089b      	lsrs	r3, r3, #2
 8005548:	3306      	adds	r3, #6
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	18d3      	adds	r3, r2, r3
 800554e:	3304      	adds	r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	1dfa      	adds	r2, r7, #7
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	0011      	movs	r1, r2
 8005558:	2203      	movs	r2, #3
 800555a:	400a      	ands	r2, r1
 800555c:	00d2      	lsls	r2, r2, #3
 800555e:	21ff      	movs	r1, #255	; 0xff
 8005560:	4091      	lsls	r1, r2
 8005562:	000a      	movs	r2, r1
 8005564:	43d2      	mvns	r2, r2
 8005566:	401a      	ands	r2, r3
 8005568:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	019b      	lsls	r3, r3, #6
 800556e:	22ff      	movs	r2, #255	; 0xff
 8005570:	401a      	ands	r2, r3
 8005572:	1dfb      	adds	r3, r7, #7
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	0018      	movs	r0, r3
 8005578:	2303      	movs	r3, #3
 800557a:	4003      	ands	r3, r0
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005580:	4809      	ldr	r0, [pc, #36]	; (80055a8 <__NVIC_SetPriority+0xd8>)
 8005582:	1dfb      	adds	r3, r7, #7
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	001c      	movs	r4, r3
 8005588:	230f      	movs	r3, #15
 800558a:	4023      	ands	r3, r4
 800558c:	3b08      	subs	r3, #8
 800558e:	089b      	lsrs	r3, r3, #2
 8005590:	430a      	orrs	r2, r1
 8005592:	3306      	adds	r3, #6
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	18c3      	adds	r3, r0, r3
 8005598:	3304      	adds	r3, #4
 800559a:	601a      	str	r2, [r3, #0]
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b003      	add	sp, #12
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	e000e100 	.word	0xe000e100
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	1e5a      	subs	r2, r3, #1
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	045b      	lsls	r3, r3, #17
 80055bc:	429a      	cmp	r2, r3
 80055be:	d301      	bcc.n	80055c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055c0:	2301      	movs	r3, #1
 80055c2:	e010      	b.n	80055e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <SysTick_Config+0x44>)
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	3a01      	subs	r2, #1
 80055ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055cc:	2301      	movs	r3, #1
 80055ce:	425b      	negs	r3, r3
 80055d0:	2103      	movs	r1, #3
 80055d2:	0018      	movs	r0, r3
 80055d4:	f7ff ff7c 	bl	80054d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <SysTick_Config+0x44>)
 80055da:	2200      	movs	r2, #0
 80055dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055de:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <SysTick_Config+0x44>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b002      	add	sp, #8
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	e000e010 	.word	0xe000e010

080055f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	210f      	movs	r1, #15
 8005600:	187b      	adds	r3, r7, r1
 8005602:	1c02      	adds	r2, r0, #0
 8005604:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	187b      	adds	r3, r7, r1
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b25b      	sxtb	r3, r3
 800560e:	0011      	movs	r1, r2
 8005610:	0018      	movs	r0, r3
 8005612:	f7ff ff5d 	bl	80054d0 <__NVIC_SetPriority>
}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	46bd      	mov	sp, r7
 800561a:	b004      	add	sp, #16
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	0002      	movs	r2, r0
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800562a:	1dfb      	adds	r3, r7, #7
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b25b      	sxtb	r3, r3
 8005630:	0018      	movs	r0, r3
 8005632:	f7ff ff33 	bl	800549c <__NVIC_EnableIRQ>
}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	46bd      	mov	sp, r7
 800563a:	b002      	add	sp, #8
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff ffaf 	bl	80055ac <SysTick_Config>
 800564e:	0003      	movs	r3, r0
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005660:	230f      	movs	r3, #15
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2225      	movs	r2, #37	; 0x25
 800566c:	5c9b      	ldrb	r3, [r3, r2]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d008      	beq.n	8005686 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2204      	movs	r2, #4
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	2100      	movs	r1, #0
 8005680:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e024      	b.n	80056d0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	210e      	movs	r1, #14
 8005692:	438a      	bics	r2, r1
 8005694:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2101      	movs	r1, #1
 80056a2:	438a      	bics	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	221c      	movs	r2, #28
 80056ac:	401a      	ands	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	2101      	movs	r1, #1
 80056b4:	4091      	lsls	r1, r2
 80056b6:	000a      	movs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2225      	movs	r2, #37	; 0x25
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2224      	movs	r2, #36	; 0x24
 80056c6:	2100      	movs	r1, #0
 80056c8:	5499      	strb	r1, [r3, r2]

    return status;
 80056ca:	230f      	movs	r3, #15
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b004      	add	sp, #16
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e0:	210f      	movs	r1, #15
 80056e2:	187b      	adds	r3, r7, r1
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2225      	movs	r2, #37	; 0x25
 80056ec:	5c9b      	ldrb	r3, [r3, r2]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d006      	beq.n	8005702 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2204      	movs	r2, #4
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80056fa:	187b      	adds	r3, r7, r1
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	e02a      	b.n	8005758 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	210e      	movs	r1, #14
 800570e:	438a      	bics	r2, r1
 8005710:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2101      	movs	r1, #1
 800571e:	438a      	bics	r2, r1
 8005720:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005726:	221c      	movs	r2, #28
 8005728:	401a      	ands	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2101      	movs	r1, #1
 8005730:	4091      	lsls	r1, r2
 8005732:	000a      	movs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2225      	movs	r2, #37	; 0x25
 800573a:	2101      	movs	r1, #1
 800573c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	; 0x24
 8005742:	2100      	movs	r1, #0
 8005744:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	0010      	movs	r0, r2
 8005756:	4798      	blx	r3
    }
  }
  return status;
 8005758:	230f      	movs	r3, #15
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	781b      	ldrb	r3, [r3, #0]
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b004      	add	sp, #16
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800577e:	e155      	b.n	8005a2c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2101      	movs	r1, #1
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4091      	lsls	r1, r2
 800578a:	000a      	movs	r2, r1
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d100      	bne.n	8005798 <HAL_GPIO_Init+0x30>
 8005796:	e146      	b.n	8005a26 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	4013      	ands	r3, r2
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d005      	beq.n	80057b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2203      	movs	r2, #3
 80057aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d130      	bne.n	8005812 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	2203      	movs	r2, #3
 80057bc:	409a      	lsls	r2, r3
 80057be:	0013      	movs	r3, r2
 80057c0:	43da      	mvns	r2, r3
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	0013      	movs	r3, r2
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e6:	2201      	movs	r2, #1
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	409a      	lsls	r2, r3
 80057ec:	0013      	movs	r3, r2
 80057ee:	43da      	mvns	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4013      	ands	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	2201      	movs	r2, #1
 80057fe:	401a      	ands	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	409a      	lsls	r2, r3
 8005804:	0013      	movs	r3, r2
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2203      	movs	r2, #3
 8005818:	4013      	ands	r3, r2
 800581a:	2b03      	cmp	r3, #3
 800581c:	d017      	beq.n	800584e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2203      	movs	r2, #3
 800582a:	409a      	lsls	r2, r3
 800582c:	0013      	movs	r3, r2
 800582e:	43da      	mvns	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	0013      	movs	r3, r2
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2203      	movs	r2, #3
 8005854:	4013      	ands	r3, r2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d123      	bne.n	80058a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	08da      	lsrs	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3208      	adds	r2, #8
 8005862:	0092      	lsls	r2, r2, #2
 8005864:	58d3      	ldr	r3, [r2, r3]
 8005866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2207      	movs	r2, #7
 800586c:	4013      	ands	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	409a      	lsls	r2, r3
 8005874:	0013      	movs	r3, r2
 8005876:	43da      	mvns	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4013      	ands	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2107      	movs	r1, #7
 8005886:	400b      	ands	r3, r1
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	409a      	lsls	r2, r3
 800588c:	0013      	movs	r3, r2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	08da      	lsrs	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3208      	adds	r2, #8
 800589c:	0092      	lsls	r2, r2, #2
 800589e:	6939      	ldr	r1, [r7, #16]
 80058a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	2203      	movs	r2, #3
 80058ae:	409a      	lsls	r2, r3
 80058b0:	0013      	movs	r3, r2
 80058b2:	43da      	mvns	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4013      	ands	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2203      	movs	r2, #3
 80058c0:	401a      	ands	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	409a      	lsls	r2, r3
 80058c8:	0013      	movs	r3, r2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	23c0      	movs	r3, #192	; 0xc0
 80058dc:	029b      	lsls	r3, r3, #10
 80058de:	4013      	ands	r3, r2
 80058e0:	d100      	bne.n	80058e4 <HAL_GPIO_Init+0x17c>
 80058e2:	e0a0      	b.n	8005a26 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e4:	4b57      	ldr	r3, [pc, #348]	; (8005a44 <HAL_GPIO_Init+0x2dc>)
 80058e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e8:	4b56      	ldr	r3, [pc, #344]	; (8005a44 <HAL_GPIO_Init+0x2dc>)
 80058ea:	2101      	movs	r1, #1
 80058ec:	430a      	orrs	r2, r1
 80058ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80058f0:	4a55      	ldr	r2, [pc, #340]	; (8005a48 <HAL_GPIO_Init+0x2e0>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	3302      	adds	r3, #2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	589b      	ldr	r3, [r3, r2]
 80058fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2203      	movs	r2, #3
 8005902:	4013      	ands	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	220f      	movs	r2, #15
 8005908:	409a      	lsls	r2, r3
 800590a:	0013      	movs	r3, r2
 800590c:	43da      	mvns	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4013      	ands	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	23a0      	movs	r3, #160	; 0xa0
 8005918:	05db      	lsls	r3, r3, #23
 800591a:	429a      	cmp	r2, r3
 800591c:	d01f      	beq.n	800595e <HAL_GPIO_Init+0x1f6>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4a      	ldr	r2, [pc, #296]	; (8005a4c <HAL_GPIO_Init+0x2e4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d019      	beq.n	800595a <HAL_GPIO_Init+0x1f2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a49      	ldr	r2, [pc, #292]	; (8005a50 <HAL_GPIO_Init+0x2e8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_GPIO_Init+0x1ee>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a48      	ldr	r2, [pc, #288]	; (8005a54 <HAL_GPIO_Init+0x2ec>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00d      	beq.n	8005952 <HAL_GPIO_Init+0x1ea>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a47      	ldr	r2, [pc, #284]	; (8005a58 <HAL_GPIO_Init+0x2f0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <HAL_GPIO_Init+0x1e6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a46      	ldr	r2, [pc, #280]	; (8005a5c <HAL_GPIO_Init+0x2f4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d101      	bne.n	800594a <HAL_GPIO_Init+0x1e2>
 8005946:	2305      	movs	r3, #5
 8005948:	e00a      	b.n	8005960 <HAL_GPIO_Init+0x1f8>
 800594a:	2306      	movs	r3, #6
 800594c:	e008      	b.n	8005960 <HAL_GPIO_Init+0x1f8>
 800594e:	2304      	movs	r3, #4
 8005950:	e006      	b.n	8005960 <HAL_GPIO_Init+0x1f8>
 8005952:	2303      	movs	r3, #3
 8005954:	e004      	b.n	8005960 <HAL_GPIO_Init+0x1f8>
 8005956:	2302      	movs	r3, #2
 8005958:	e002      	b.n	8005960 <HAL_GPIO_Init+0x1f8>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_GPIO_Init+0x1f8>
 800595e:	2300      	movs	r3, #0
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	2103      	movs	r1, #3
 8005964:	400a      	ands	r2, r1
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	4093      	lsls	r3, r2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005970:	4935      	ldr	r1, [pc, #212]	; (8005a48 <HAL_GPIO_Init+0x2e0>)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	3302      	adds	r3, #2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800597e:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	43da      	mvns	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4013      	ands	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	035b      	lsls	r3, r3, #13
 8005996:	4013      	ands	r3, r2
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059a2:	4b2f      	ldr	r3, [pc, #188]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80059a8:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	43da      	mvns	r2, r3
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	039b      	lsls	r3, r3, #14
 80059c0:	4013      	ands	r3, r2
 80059c2:	d003      	beq.n	80059cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059cc:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	43da      	mvns	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4013      	ands	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	4013      	ands	r3, r2
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80059f6:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059fc:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	43da      	mvns	r2, r3
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	025b      	lsls	r3, r3, #9
 8005a14:	4013      	ands	r3, r2
 8005a16:	d003      	beq.n	8005a20 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a20:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <HAL_GPIO_Init+0x2f8>)
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	40da      	lsrs	r2, r3
 8005a34:	1e13      	subs	r3, r2, #0
 8005a36:	d000      	beq.n	8005a3a <HAL_GPIO_Init+0x2d2>
 8005a38:	e6a2      	b.n	8005780 <HAL_GPIO_Init+0x18>
  }
}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	46c0      	nop			; (mov r8, r8)
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b006      	add	sp, #24
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	50000400 	.word	0x50000400
 8005a50:	50000800 	.word	0x50000800
 8005a54:	50000c00 	.word	0x50000c00
 8005a58:	50001000 	.word	0x50001000
 8005a5c:	50001c00 	.word	0x50001c00
 8005a60:	40010400 	.word	0x40010400

08005a64 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	000a      	movs	r2, r1
 8005a6e:	1cbb      	adds	r3, r7, #2
 8005a70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	1cba      	adds	r2, r7, #2
 8005a78:	8812      	ldrh	r2, [r2, #0]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d004      	beq.n	8005a88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005a7e:	230f      	movs	r3, #15
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	2201      	movs	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	e003      	b.n	8005a90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a88:	230f      	movs	r3, #15
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005a90:	230f      	movs	r3, #15
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	781b      	ldrb	r3, [r3, #0]
}
 8005a96:	0018      	movs	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b004      	add	sp, #16
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	0008      	movs	r0, r1
 8005aa8:	0011      	movs	r1, r2
 8005aaa:	1cbb      	adds	r3, r7, #2
 8005aac:	1c02      	adds	r2, r0, #0
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	1c7b      	adds	r3, r7, #1
 8005ab2:	1c0a      	adds	r2, r1, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ab6:	1c7b      	adds	r3, r7, #1
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005abe:	1cbb      	adds	r3, r7, #2
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005ac6:	e003      	b.n	8005ad0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005ac8:	1cbb      	adds	r3, r7, #2
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad8:	b5b0      	push	{r4, r5, r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f000 fbbf 	bl	800626a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aec:	4bc9      	ldr	r3, [pc, #804]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	220c      	movs	r2, #12
 8005af2:	4013      	ands	r3, r2
 8005af4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005af6:	4bc7      	ldr	r3, [pc, #796]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	2380      	movs	r3, #128	; 0x80
 8005afc:	025b      	lsls	r3, r3, #9
 8005afe:	4013      	ands	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2201      	movs	r2, #1
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d100      	bne.n	8005b0e <HAL_RCC_OscConfig+0x36>
 8005b0c:	e07e      	b.n	8005c0c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d007      	beq.n	8005b24 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b0c      	cmp	r3, #12
 8005b18:	d112      	bne.n	8005b40 <HAL_RCC_OscConfig+0x68>
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	025b      	lsls	r3, r3, #9
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d10d      	bne.n	8005b40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b24:	4bbb      	ldr	r3, [pc, #748]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <HAL_RCC_OscConfig+0x5a>
 8005b30:	e06b      	b.n	8005c0a <HAL_RCC_OscConfig+0x132>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d167      	bne.n	8005c0a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f000 fb95 	bl	800626a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	025b      	lsls	r3, r3, #9
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d107      	bne.n	8005b5c <HAL_RCC_OscConfig+0x84>
 8005b4c:	4bb1      	ldr	r3, [pc, #708]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4bb0      	ldr	r3, [pc, #704]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b52:	2180      	movs	r1, #128	; 0x80
 8005b54:	0249      	lsls	r1, r1, #9
 8005b56:	430a      	orrs	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e027      	b.n	8005bac <HAL_RCC_OscConfig+0xd4>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	23a0      	movs	r3, #160	; 0xa0
 8005b62:	02db      	lsls	r3, r3, #11
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d10e      	bne.n	8005b86 <HAL_RCC_OscConfig+0xae>
 8005b68:	4baa      	ldr	r3, [pc, #680]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4ba9      	ldr	r3, [pc, #676]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b6e:	2180      	movs	r1, #128	; 0x80
 8005b70:	02c9      	lsls	r1, r1, #11
 8005b72:	430a      	orrs	r2, r1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	4ba7      	ldr	r3, [pc, #668]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4ba6      	ldr	r3, [pc, #664]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	0249      	lsls	r1, r1, #9
 8005b80:	430a      	orrs	r2, r1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e012      	b.n	8005bac <HAL_RCC_OscConfig+0xd4>
 8005b86:	4ba3      	ldr	r3, [pc, #652]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4ba2      	ldr	r3, [pc, #648]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b8c:	49a2      	ldr	r1, [pc, #648]	; (8005e18 <HAL_RCC_OscConfig+0x340>)
 8005b8e:	400a      	ands	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	4ba0      	ldr	r3, [pc, #640]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	025b      	lsls	r3, r3, #9
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4b9c      	ldr	r3, [pc, #624]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b9b      	ldr	r3, [pc, #620]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005ba6:	499d      	ldr	r1, [pc, #628]	; (8005e1c <HAL_RCC_OscConfig+0x344>)
 8005ba8:	400a      	ands	r2, r1
 8005baa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d015      	beq.n	8005be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7ff fc44 	bl	8005440 <HAL_GetTick>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bbc:	e009      	b.n	8005bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bbe:	f7ff fc3f 	bl	8005440 <HAL_GetTick>
 8005bc2:	0002      	movs	r2, r0
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b64      	cmp	r3, #100	; 0x64
 8005bca:	d902      	bls.n	8005bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	f000 fb4c 	bl	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bd2:	4b90      	ldr	r3, [pc, #576]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d0ef      	beq.n	8005bbe <HAL_RCC_OscConfig+0xe6>
 8005bde:	e015      	b.n	8005c0c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7ff fc2e 	bl	8005440 <HAL_GetTick>
 8005be4:	0003      	movs	r3, r0
 8005be6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bea:	f7ff fc29 	bl	8005440 <HAL_GetTick>
 8005bee:	0002      	movs	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b64      	cmp	r3, #100	; 0x64
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e336      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bfc:	4b85      	ldr	r3, [pc, #532]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	4013      	ands	r3, r2
 8005c06:	d1f0      	bne.n	8005bea <HAL_RCC_OscConfig+0x112>
 8005c08:	e000      	b.n	8005c0c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2202      	movs	r2, #2
 8005c12:	4013      	ands	r3, r2
 8005c14:	d100      	bne.n	8005c18 <HAL_RCC_OscConfig+0x140>
 8005c16:	e099      	b.n	8005d4c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2220      	movs	r2, #32
 8005c22:	4013      	ands	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005c26:	4b7b      	ldr	r3, [pc, #492]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b7a      	ldr	r3, [pc, #488]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c2c:	2120      	movs	r1, #32
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	2220      	movs	r2, #32
 8005c36:	4393      	bics	r3, r2
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d005      	beq.n	8005c4c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b0c      	cmp	r3, #12
 8005c44:	d13e      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x1ec>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d13b      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c4c:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2204      	movs	r2, #4
 8005c52:	4013      	ands	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_RCC_OscConfig+0x188>
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e304      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	4b6c      	ldr	r3, [pc, #432]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a6e      	ldr	r2, [pc, #440]	; (8005e20 <HAL_RCC_OscConfig+0x348>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	0019      	movs	r1, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	4b68      	ldr	r3, [pc, #416]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c76:	4b67      	ldr	r3, [pc, #412]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2209      	movs	r2, #9
 8005c7c:	4393      	bics	r3, r2
 8005c7e:	0019      	movs	r1, r3
 8005c80:	4b64      	ldr	r3, [pc, #400]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c88:	f000 fc42 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 8005c8c:	0001      	movs	r1, r0
 8005c8e:	4b61      	ldr	r3, [pc, #388]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	220f      	movs	r2, #15
 8005c96:	4013      	ands	r3, r2
 8005c98:	4a62      	ldr	r2, [pc, #392]	; (8005e24 <HAL_RCC_OscConfig+0x34c>)
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	000a      	movs	r2, r1
 8005c9e:	40da      	lsrs	r2, r3
 8005ca0:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <HAL_RCC_OscConfig+0x350>)
 8005ca2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005ca4:	4b61      	ldr	r3, [pc, #388]	; (8005e2c <HAL_RCC_OscConfig+0x354>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2513      	movs	r5, #19
 8005caa:	197c      	adds	r4, r7, r5
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7ff fb81 	bl	80053b4 <HAL_InitTick>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005cb6:	197b      	adds	r3, r7, r5
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d046      	beq.n	8005d4c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005cbe:	197b      	adds	r3, r7, r5
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	e2d2      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d027      	beq.n	8005d1a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cca:	4b52      	ldr	r3, [pc, #328]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2209      	movs	r2, #9
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cdc:	f7ff fbb0 	bl	8005440 <HAL_GetTick>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ce6:	f7ff fbab 	bl	8005440 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e2b8      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf8:	4b46      	ldr	r3, [pc, #280]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d0f1      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d02:	4b44      	ldr	r3, [pc, #272]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4a46      	ldr	r2, [pc, #280]	; (8005e20 <HAL_RCC_OscConfig+0x348>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	021a      	lsls	r2, r3, #8
 8005d12:	4b40      	ldr	r3, [pc, #256]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
 8005d18:	e018      	b.n	8005d4c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d1a:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b3d      	ldr	r3, [pc, #244]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d20:	2101      	movs	r1, #1
 8005d22:	438a      	bics	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d26:	f7ff fb8b 	bl	8005440 <HAL_GetTick>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d30:	f7ff fb86 	bl	8005440 <HAL_GetTick>
 8005d34:	0002      	movs	r2, r0
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e293      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d42:	4b34      	ldr	r3, [pc, #208]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2204      	movs	r2, #4
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d1f1      	bne.n	8005d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2210      	movs	r2, #16
 8005d52:	4013      	ands	r3, r2
 8005d54:	d100      	bne.n	8005d58 <HAL_RCC_OscConfig+0x280>
 8005d56:	e0a2      	b.n	8005e9e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d140      	bne.n	8005de0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d5e:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4013      	ands	r3, r2
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_OscConfig+0x29e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e279      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4a2d      	ldr	r2, [pc, #180]	; (8005e30 <HAL_RCC_OscConfig+0x358>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d84:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d8a:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	0a19      	lsrs	r1, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	061a      	lsls	r2, r3, #24
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	0b5b      	lsrs	r3, r3, #13
 8005da4:	3301      	adds	r3, #1
 8005da6:	2280      	movs	r2, #128	; 0x80
 8005da8:	0212      	lsls	r2, r2, #8
 8005daa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	210f      	movs	r1, #15
 8005db4:	400b      	ands	r3, r1
 8005db6:	491b      	ldr	r1, [pc, #108]	; (8005e24 <HAL_RCC_OscConfig+0x34c>)
 8005db8:	5ccb      	ldrb	r3, [r1, r3]
 8005dba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCC_OscConfig+0x350>)
 8005dbe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005dc0:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <HAL_RCC_OscConfig+0x354>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2513      	movs	r5, #19
 8005dc6:	197c      	adds	r4, r7, r5
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7ff faf3 	bl	80053b4 <HAL_InitTick>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005dd2:	197b      	adds	r3, r7, r5
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d061      	beq.n	8005e9e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005dda:	197b      	adds	r3, r7, r5
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	e244      	b.n	800626a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d040      	beq.n	8005e6a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <HAL_RCC_OscConfig+0x33c>)
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	0049      	lsls	r1, r1, #1
 8005df2:	430a      	orrs	r2, r1
 8005df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df6:	f7ff fb23 	bl	8005440 <HAL_GetTick>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005dfe:	e019      	b.n	8005e34 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e00:	f7ff fb1e 	bl	8005440 <HAL_GetTick>
 8005e04:	0002      	movs	r2, r0
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d912      	bls.n	8005e34 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e22b      	b.n	800626a <HAL_RCC_OscConfig+0x792>
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	40021000 	.word	0x40021000
 8005e18:	fffeffff 	.word	0xfffeffff
 8005e1c:	fffbffff 	.word	0xfffbffff
 8005e20:	ffffe0ff 	.word	0xffffe0ff
 8005e24:	0800cac0 	.word	0x0800cac0
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	20000010 	.word	0x20000010
 8005e30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e34:	4bca      	ldr	r3, [pc, #808]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d0df      	beq.n	8005e00 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e40:	4bc7      	ldr	r3, [pc, #796]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4ac7      	ldr	r2, [pc, #796]	; (8006164 <HAL_RCC_OscConfig+0x68c>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e4e:	4bc4      	ldr	r3, [pc, #784]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e54:	4bc2      	ldr	r3, [pc, #776]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	0a19      	lsrs	r1, r3, #8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	061a      	lsls	r2, r3, #24
 8005e62:	4bbf      	ldr	r3, [pc, #764]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
 8005e68:	e019      	b.n	8005e9e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e6a:	4bbd      	ldr	r3, [pc, #756]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4bbc      	ldr	r3, [pc, #752]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e70:	49bd      	ldr	r1, [pc, #756]	; (8006168 <HAL_RCC_OscConfig+0x690>)
 8005e72:	400a      	ands	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e76:	f7ff fae3 	bl	8005440 <HAL_GetTick>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e80:	f7ff fade 	bl	8005440 <HAL_GetTick>
 8005e84:	0002      	movs	r2, r0
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1eb      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e92:	4bb3      	ldr	r3, [pc, #716]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d036      	beq.n	8005f16 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d019      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb0:	4bab      	ldr	r3, [pc, #684]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eb4:	4baa      	ldr	r3, [pc, #680]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebc:	f7ff fac0 	bl	8005440 <HAL_GetTick>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec6:	f7ff fabb 	bl	8005440 <HAL_GetTick>
 8005eca:	0002      	movs	r2, r0
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e1c8      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ed8:	4ba1      	ldr	r3, [pc, #644]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005edc:	2202      	movs	r2, #2
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d0f1      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x3ee>
 8005ee2:	e018      	b.n	8005f16 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee4:	4b9e      	ldr	r3, [pc, #632]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ee8:	4b9d      	ldr	r3, [pc, #628]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005eea:	2101      	movs	r1, #1
 8005eec:	438a      	bics	r2, r1
 8005eee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef0:	f7ff faa6 	bl	8005440 <HAL_GetTick>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005efa:	f7ff faa1 	bl	8005440 <HAL_GetTick>
 8005efe:	0002      	movs	r2, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e1ae      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f0c:	4b94      	ldr	r3, [pc, #592]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f10:	2202      	movs	r2, #2
 8005f12:	4013      	ands	r3, r2
 8005f14:	d1f1      	bne.n	8005efa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d100      	bne.n	8005f22 <HAL_RCC_OscConfig+0x44a>
 8005f20:	e0ae      	b.n	8006080 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f22:	2023      	movs	r0, #35	; 0x23
 8005f24:	183b      	adds	r3, r7, r0
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f2a:	4b8d      	ldr	r3, [pc, #564]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	055b      	lsls	r3, r3, #21
 8005f32:	4013      	ands	r3, r2
 8005f34:	d109      	bne.n	8005f4a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f36:	4b8a      	ldr	r3, [pc, #552]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3a:	4b89      	ldr	r3, [pc, #548]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005f3c:	2180      	movs	r1, #128	; 0x80
 8005f3e:	0549      	lsls	r1, r1, #21
 8005f40:	430a      	orrs	r2, r1
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f44:	183b      	adds	r3, r7, r0
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4a:	4b88      	ldr	r3, [pc, #544]	; (800616c <HAL_RCC_OscConfig+0x694>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4013      	ands	r3, r2
 8005f54:	d11a      	bne.n	8005f8c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f56:	4b85      	ldr	r3, [pc, #532]	; (800616c <HAL_RCC_OscConfig+0x694>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b84      	ldr	r3, [pc, #528]	; (800616c <HAL_RCC_OscConfig+0x694>)
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	0049      	lsls	r1, r1, #1
 8005f60:	430a      	orrs	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f64:	f7ff fa6c 	bl	8005440 <HAL_GetTick>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6e:	f7ff fa67 	bl	8005440 <HAL_GetTick>
 8005f72:	0002      	movs	r2, r0
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b64      	cmp	r3, #100	; 0x64
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e174      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	4b7a      	ldr	r3, [pc, #488]	; (800616c <HAL_RCC_OscConfig+0x694>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	4013      	ands	r3, r2
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4d0>
 8005f98:	4b71      	ldr	r3, [pc, #452]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f9c:	4b70      	ldr	r3, [pc, #448]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005f9e:	2180      	movs	r1, #128	; 0x80
 8005fa0:	0049      	lsls	r1, r1, #1
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	651a      	str	r2, [r3, #80]	; 0x50
 8005fa6:	e031      	b.n	800600c <HAL_RCC_OscConfig+0x534>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10c      	bne.n	8005fca <HAL_RCC_OscConfig+0x4f2>
 8005fb0:	4b6b      	ldr	r3, [pc, #428]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fb4:	4b6a      	ldr	r3, [pc, #424]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fb6:	496c      	ldr	r1, [pc, #432]	; (8006168 <HAL_RCC_OscConfig+0x690>)
 8005fb8:	400a      	ands	r2, r1
 8005fba:	651a      	str	r2, [r3, #80]	; 0x50
 8005fbc:	4b68      	ldr	r3, [pc, #416]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc0:	4b67      	ldr	r3, [pc, #412]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fc2:	496b      	ldr	r1, [pc, #428]	; (8006170 <HAL_RCC_OscConfig+0x698>)
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8005fc8:	e020      	b.n	800600c <HAL_RCC_OscConfig+0x534>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	23a0      	movs	r3, #160	; 0xa0
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x51c>
 8005fd6:	4b62      	ldr	r3, [pc, #392]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fda:	4b61      	ldr	r3, [pc, #388]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fdc:	2180      	movs	r1, #128	; 0x80
 8005fde:	00c9      	lsls	r1, r1, #3
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	651a      	str	r2, [r3, #80]	; 0x50
 8005fe4:	4b5e      	ldr	r3, [pc, #376]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fe8:	4b5d      	ldr	r3, [pc, #372]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	0049      	lsls	r1, r1, #1
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	651a      	str	r2, [r3, #80]	; 0x50
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0x534>
 8005ff4:	4b5a      	ldr	r3, [pc, #360]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ff8:	4b59      	ldr	r3, [pc, #356]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8005ffa:	495b      	ldr	r1, [pc, #364]	; (8006168 <HAL_RCC_OscConfig+0x690>)
 8005ffc:	400a      	ands	r2, r1
 8005ffe:	651a      	str	r2, [r3, #80]	; 0x50
 8006000:	4b57      	ldr	r3, [pc, #348]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006004:	4b56      	ldr	r3, [pc, #344]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006006:	495a      	ldr	r1, [pc, #360]	; (8006170 <HAL_RCC_OscConfig+0x698>)
 8006008:	400a      	ands	r2, r1
 800600a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d015      	beq.n	8006040 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006014:	f7ff fa14 	bl	8005440 <HAL_GetTick>
 8006018:	0003      	movs	r3, r0
 800601a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800601c:	e009      	b.n	8006032 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800601e:	f7ff fa0f 	bl	8005440 <HAL_GetTick>
 8006022:	0002      	movs	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	4a52      	ldr	r2, [pc, #328]	; (8006174 <HAL_RCC_OscConfig+0x69c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e11b      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006032:	4b4b      	ldr	r3, [pc, #300]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4013      	ands	r3, r2
 800603c:	d0ef      	beq.n	800601e <HAL_RCC_OscConfig+0x546>
 800603e:	e014      	b.n	800606a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006040:	f7ff f9fe 	bl	8005440 <HAL_GetTick>
 8006044:	0003      	movs	r3, r0
 8006046:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006048:	e009      	b.n	800605e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800604a:	f7ff f9f9 	bl	8005440 <HAL_GetTick>
 800604e:	0002      	movs	r2, r0
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	4a47      	ldr	r2, [pc, #284]	; (8006174 <HAL_RCC_OscConfig+0x69c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e105      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800605e:	4b40      	ldr	r3, [pc, #256]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4013      	ands	r3, r2
 8006068:	d1ef      	bne.n	800604a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800606a:	2323      	movs	r3, #35	; 0x23
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d105      	bne.n	8006080 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006074:	4b3a      	ldr	r3, [pc, #232]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006078:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 800607a:	493f      	ldr	r1, [pc, #252]	; (8006178 <HAL_RCC_OscConfig+0x6a0>)
 800607c:	400a      	ands	r2, r1
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2220      	movs	r2, #32
 8006086:	4013      	ands	r3, r2
 8006088:	d049      	beq.n	800611e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d026      	beq.n	80060e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006092:	4b33      	ldr	r3, [pc, #204]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	4b32      	ldr	r3, [pc, #200]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006098:	2101      	movs	r1, #1
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]
 800609e:	4b30      	ldr	r3, [pc, #192]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 80060a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a2:	4b2f      	ldr	r3, [pc, #188]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 80060a4:	2101      	movs	r1, #1
 80060a6:	430a      	orrs	r2, r1
 80060a8:	635a      	str	r2, [r3, #52]	; 0x34
 80060aa:	4b34      	ldr	r3, [pc, #208]	; (800617c <HAL_RCC_OscConfig+0x6a4>)
 80060ac:	6a1a      	ldr	r2, [r3, #32]
 80060ae:	4b33      	ldr	r3, [pc, #204]	; (800617c <HAL_RCC_OscConfig+0x6a4>)
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	0189      	lsls	r1, r1, #6
 80060b4:	430a      	orrs	r2, r1
 80060b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b8:	f7ff f9c2 	bl	8005440 <HAL_GetTick>
 80060bc:	0003      	movs	r3, r0
 80060be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060c2:	f7ff f9bd 	bl	8005440 <HAL_GetTick>
 80060c6:	0002      	movs	r2, r0
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e0ca      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060d4:	4b22      	ldr	r3, [pc, #136]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2202      	movs	r2, #2
 80060da:	4013      	ands	r3, r2
 80060dc:	d0f1      	beq.n	80060c2 <HAL_RCC_OscConfig+0x5ea>
 80060de:	e01e      	b.n	800611e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 80060e6:	2101      	movs	r1, #1
 80060e8:	438a      	bics	r2, r1
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	4b23      	ldr	r3, [pc, #140]	; (800617c <HAL_RCC_OscConfig+0x6a4>)
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	4b22      	ldr	r3, [pc, #136]	; (800617c <HAL_RCC_OscConfig+0x6a4>)
 80060f2:	4923      	ldr	r1, [pc, #140]	; (8006180 <HAL_RCC_OscConfig+0x6a8>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7ff f9a2 	bl	8005440 <HAL_GetTick>
 80060fc:	0003      	movs	r3, r0
 80060fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006100:	e008      	b.n	8006114 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006102:	f7ff f99d 	bl	8005440 <HAL_GetTick>
 8006106:	0002      	movs	r2, r0
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e0aa      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2202      	movs	r2, #2
 800611a:	4013      	ands	r3, r2
 800611c:	d1f1      	bne.n	8006102 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	d100      	bne.n	8006128 <HAL_RCC_OscConfig+0x650>
 8006126:	e09f      	b.n	8006268 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2b0c      	cmp	r3, #12
 800612c:	d100      	bne.n	8006130 <HAL_RCC_OscConfig+0x658>
 800612e:	e078      	b.n	8006222 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	2b02      	cmp	r3, #2
 8006136:	d159      	bne.n	80061ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <HAL_RCC_OscConfig+0x688>)
 800613e:	4911      	ldr	r1, [pc, #68]	; (8006184 <HAL_RCC_OscConfig+0x6ac>)
 8006140:	400a      	ands	r2, r1
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7ff f97c 	bl	8005440 <HAL_GetTick>
 8006148:	0003      	movs	r3, r0
 800614a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800614c:	e01c      	b.n	8006188 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614e:	f7ff f977 	bl	8005440 <HAL_GetTick>
 8006152:	0002      	movs	r2, r0
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d915      	bls.n	8006188 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e084      	b.n	800626a <HAL_RCC_OscConfig+0x792>
 8006160:	40021000 	.word	0x40021000
 8006164:	ffff1fff 	.word	0xffff1fff
 8006168:	fffffeff 	.word	0xfffffeff
 800616c:	40007000 	.word	0x40007000
 8006170:	fffffbff 	.word	0xfffffbff
 8006174:	00001388 	.word	0x00001388
 8006178:	efffffff 	.word	0xefffffff
 800617c:	40010000 	.word	0x40010000
 8006180:	ffffdfff 	.word	0xffffdfff
 8006184:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006188:	4b3a      	ldr	r3, [pc, #232]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	049b      	lsls	r3, r3, #18
 8006190:	4013      	ands	r3, r2
 8006192:	d1dc      	bne.n	800614e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006194:	4b37      	ldr	r3, [pc, #220]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4a37      	ldr	r2, [pc, #220]	; (8006278 <HAL_RCC_OscConfig+0x7a0>)
 800619a:	4013      	ands	r3, r2
 800619c:	0019      	movs	r1, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	431a      	orrs	r2, r3
 80061ae:	4b31      	ldr	r3, [pc, #196]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 80061b0:	430a      	orrs	r2, r1
 80061b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b4:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b2e      	ldr	r3, [pc, #184]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	0449      	lsls	r1, r1, #17
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c2:	f7ff f93d 	bl	8005440 <HAL_GetTick>
 80061c6:	0003      	movs	r3, r0
 80061c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061cc:	f7ff f938 	bl	8005440 <HAL_GetTick>
 80061d0:	0002      	movs	r2, r0
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e045      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80061de:	4b25      	ldr	r3, [pc, #148]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	049b      	lsls	r3, r3, #18
 80061e6:	4013      	ands	r3, r2
 80061e8:	d0f0      	beq.n	80061cc <HAL_RCC_OscConfig+0x6f4>
 80061ea:	e03d      	b.n	8006268 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ec:	4b21      	ldr	r3, [pc, #132]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 80061f2:	4922      	ldr	r1, [pc, #136]	; (800627c <HAL_RCC_OscConfig+0x7a4>)
 80061f4:	400a      	ands	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f8:	f7ff f922 	bl	8005440 <HAL_GetTick>
 80061fc:	0003      	movs	r3, r0
 80061fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006202:	f7ff f91d 	bl	8005440 <HAL_GetTick>
 8006206:	0002      	movs	r2, r0
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e02a      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006214:	4b17      	ldr	r3, [pc, #92]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	049b      	lsls	r3, r3, #18
 800621c:	4013      	ands	r3, r2
 800621e:	d1f0      	bne.n	8006202 <HAL_RCC_OscConfig+0x72a>
 8006220:	e022      	b.n	8006268 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e01d      	b.n	800626a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_RCC_OscConfig+0x79c>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	025b      	lsls	r3, r3, #9
 800623a:	401a      	ands	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	429a      	cmp	r2, r3
 8006242:	d10f      	bne.n	8006264 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	23f0      	movs	r3, #240	; 0xf0
 8006248:	039b      	lsls	r3, r3, #14
 800624a:	401a      	ands	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d107      	bne.n	8006264 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	23c0      	movs	r3, #192	; 0xc0
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	401a      	ands	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	0018      	movs	r0, r3
 800626c:	46bd      	mov	sp, r7
 800626e:	b00a      	add	sp, #40	; 0x28
 8006270:	bdb0      	pop	{r4, r5, r7, pc}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	40021000 	.word	0x40021000
 8006278:	ff02ffff 	.word	0xff02ffff
 800627c:	feffffff 	.word	0xfeffffff

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b5b0      	push	{r4, r5, r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e128      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006294:	4b96      	ldr	r3, [pc, #600]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2201      	movs	r2, #1
 800629a:	4013      	ands	r3, r2
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d91e      	bls.n	80062e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b93      	ldr	r3, [pc, #588]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	4393      	bics	r3, r2
 80062aa:	0019      	movs	r1, r3
 80062ac:	4b90      	ldr	r3, [pc, #576]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062b4:	f7ff f8c4 	bl	8005440 <HAL_GetTick>
 80062b8:	0003      	movs	r3, r0
 80062ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062bc:	e009      	b.n	80062d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062be:	f7ff f8bf 	bl	8005440 <HAL_GetTick>
 80062c2:	0002      	movs	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	4a8a      	ldr	r2, [pc, #552]	; (80064f4 <HAL_RCC_ClockConfig+0x274>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e109      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d2:	4b87      	ldr	r3, [pc, #540]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2201      	movs	r2, #1
 80062d8:	4013      	ands	r3, r2
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d1ee      	bne.n	80062be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2202      	movs	r2, #2
 80062e6:	4013      	ands	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ea:	4b83      	ldr	r3, [pc, #524]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	22f0      	movs	r2, #240	; 0xf0
 80062f0:	4393      	bics	r3, r2
 80062f2:	0019      	movs	r1, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	4b7f      	ldr	r3, [pc, #508]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 80062fa:	430a      	orrs	r2, r1
 80062fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2201      	movs	r2, #1
 8006304:	4013      	ands	r3, r2
 8006306:	d100      	bne.n	800630a <HAL_RCC_ClockConfig+0x8a>
 8006308:	e089      	b.n	800641e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d107      	bne.n	8006322 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006312:	4b79      	ldr	r3, [pc, #484]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	4013      	ands	r3, r2
 800631c:	d120      	bne.n	8006360 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0e1      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b03      	cmp	r3, #3
 8006328:	d107      	bne.n	800633a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800632a:	4b73      	ldr	r3, [pc, #460]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	2380      	movs	r3, #128	; 0x80
 8006330:	049b      	lsls	r3, r3, #18
 8006332:	4013      	ands	r3, r2
 8006334:	d114      	bne.n	8006360 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e0d5      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d106      	bne.n	8006350 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006342:	4b6d      	ldr	r3, [pc, #436]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2204      	movs	r2, #4
 8006348:	4013      	ands	r3, r2
 800634a:	d109      	bne.n	8006360 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0ca      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006350:	4b69      	ldr	r3, [pc, #420]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4013      	ands	r3, r2
 800635a:	d101      	bne.n	8006360 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0c2      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006360:	4b65      	ldr	r3, [pc, #404]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2203      	movs	r2, #3
 8006366:	4393      	bics	r3, r2
 8006368:	0019      	movs	r1, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	4b62      	ldr	r3, [pc, #392]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006370:	430a      	orrs	r2, r1
 8006372:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006374:	f7ff f864 	bl	8005440 <HAL_GetTick>
 8006378:	0003      	movs	r3, r0
 800637a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d111      	bne.n	80063a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006384:	e009      	b.n	800639a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006386:	f7ff f85b 	bl	8005440 <HAL_GetTick>
 800638a:	0002      	movs	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	4a58      	ldr	r2, [pc, #352]	; (80064f4 <HAL_RCC_ClockConfig+0x274>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d901      	bls.n	800639a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e0a5      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800639a:	4b57      	ldr	r3, [pc, #348]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	220c      	movs	r2, #12
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d1ef      	bne.n	8006386 <HAL_RCC_ClockConfig+0x106>
 80063a6:	e03a      	b.n	800641e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d111      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b0:	e009      	b.n	80063c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b2:	f7ff f845 	bl	8005440 <HAL_GetTick>
 80063b6:	0002      	movs	r2, r0
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	4a4d      	ldr	r2, [pc, #308]	; (80064f4 <HAL_RCC_ClockConfig+0x274>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e08f      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063c6:	4b4c      	ldr	r3, [pc, #304]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	220c      	movs	r2, #12
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	d1ef      	bne.n	80063b2 <HAL_RCC_ClockConfig+0x132>
 80063d2:	e024      	b.n	800641e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d11b      	bne.n	8006414 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80063dc:	e009      	b.n	80063f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063de:	f7ff f82f 	bl	8005440 <HAL_GetTick>
 80063e2:	0002      	movs	r2, r0
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	4a42      	ldr	r2, [pc, #264]	; (80064f4 <HAL_RCC_ClockConfig+0x274>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e079      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80063f2:	4b41      	ldr	r3, [pc, #260]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	220c      	movs	r2, #12
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d1ef      	bne.n	80063de <HAL_RCC_ClockConfig+0x15e>
 80063fe:	e00e      	b.n	800641e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006400:	f7ff f81e 	bl	8005440 <HAL_GetTick>
 8006404:	0002      	movs	r2, r0
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	4a3a      	ldr	r2, [pc, #232]	; (80064f4 <HAL_RCC_ClockConfig+0x274>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e068      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006414:	4b38      	ldr	r3, [pc, #224]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	220c      	movs	r2, #12
 800641a:	4013      	ands	r3, r2
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800641e:	4b34      	ldr	r3, [pc, #208]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2201      	movs	r2, #1
 8006424:	4013      	ands	r3, r2
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d21e      	bcs.n	800646a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642c:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2201      	movs	r2, #1
 8006432:	4393      	bics	r3, r2
 8006434:	0019      	movs	r1, r3
 8006436:	4b2e      	ldr	r3, [pc, #184]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800643e:	f7fe ffff 	bl	8005440 <HAL_GetTick>
 8006442:	0003      	movs	r3, r0
 8006444:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006446:	e009      	b.n	800645c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006448:	f7fe fffa 	bl	8005440 <HAL_GetTick>
 800644c:	0002      	movs	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a28      	ldr	r2, [pc, #160]	; (80064f4 <HAL_RCC_ClockConfig+0x274>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e044      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645c:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <HAL_RCC_ClockConfig+0x270>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2201      	movs	r2, #1
 8006462:	4013      	ands	r3, r2
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d1ee      	bne.n	8006448 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2204      	movs	r2, #4
 8006470:	4013      	ands	r3, r2
 8006472:	d009      	beq.n	8006488 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4a20      	ldr	r2, [pc, #128]	; (80064fc <HAL_RCC_ClockConfig+0x27c>)
 800647a:	4013      	ands	r3, r2
 800647c:	0019      	movs	r1, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006484:	430a      	orrs	r2, r1
 8006486:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2208      	movs	r2, #8
 800648e:	4013      	ands	r3, r2
 8006490:	d00a      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006492:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <HAL_RCC_ClockConfig+0x280>)
 8006498:	4013      	ands	r3, r2
 800649a:	0019      	movs	r1, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	00da      	lsls	r2, r3, #3
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 80064a4:	430a      	orrs	r2, r1
 80064a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064a8:	f000 f832 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 80064ac:	0001      	movs	r1, r0
 80064ae:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <HAL_RCC_ClockConfig+0x278>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	091b      	lsrs	r3, r3, #4
 80064b4:	220f      	movs	r2, #15
 80064b6:	4013      	ands	r3, r2
 80064b8:	4a12      	ldr	r2, [pc, #72]	; (8006504 <HAL_RCC_ClockConfig+0x284>)
 80064ba:	5cd3      	ldrb	r3, [r2, r3]
 80064bc:	000a      	movs	r2, r1
 80064be:	40da      	lsrs	r2, r3
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <HAL_RCC_ClockConfig+0x288>)
 80064c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064c4:	4b11      	ldr	r3, [pc, #68]	; (800650c <HAL_RCC_ClockConfig+0x28c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	250b      	movs	r5, #11
 80064ca:	197c      	adds	r4, r7, r5
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7fe ff71 	bl	80053b4 <HAL_InitTick>
 80064d2:	0003      	movs	r3, r0
 80064d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80064d6:	197b      	adds	r3, r7, r5
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80064de:	197b      	adds	r3, r7, r5
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b004      	add	sp, #16
 80064ec:	bdb0      	pop	{r4, r5, r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	40022000 	.word	0x40022000
 80064f4:	00001388 	.word	0x00001388
 80064f8:	40021000 	.word	0x40021000
 80064fc:	fffff8ff 	.word	0xfffff8ff
 8006500:	ffffc7ff 	.word	0xffffc7ff
 8006504:	0800cac0 	.word	0x0800cac0
 8006508:	20000000 	.word	0x20000000
 800650c:	20000010 	.word	0x20000010

08006510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006516:	4b4c      	ldr	r3, [pc, #304]	; (8006648 <HAL_RCC_GetSysClockFreq+0x138>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800651c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651e:	230c      	movs	r3, #12
 8006520:	4013      	ands	r3, r2
 8006522:	2b0c      	cmp	r3, #12
 8006524:	d014      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x40>
 8006526:	d900      	bls.n	800652a <HAL_RCC_GetSysClockFreq+0x1a>
 8006528:	e07b      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x112>
 800652a:	2b04      	cmp	r3, #4
 800652c:	d002      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x24>
 800652e:	2b08      	cmp	r3, #8
 8006530:	d00b      	beq.n	800654a <HAL_RCC_GetSysClockFreq+0x3a>
 8006532:	e076      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006534:	4b44      	ldr	r3, [pc, #272]	; (8006648 <HAL_RCC_GetSysClockFreq+0x138>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2210      	movs	r2, #16
 800653a:	4013      	ands	r3, r2
 800653c:	d002      	beq.n	8006544 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800653e:	4b43      	ldr	r3, [pc, #268]	; (800664c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006540:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006542:	e07c      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006544:	4b42      	ldr	r3, [pc, #264]	; (8006650 <HAL_RCC_GetSysClockFreq+0x140>)
 8006546:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006548:	e079      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800654a:	4b42      	ldr	r3, [pc, #264]	; (8006654 <HAL_RCC_GetSysClockFreq+0x144>)
 800654c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800654e:	e076      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	0c9a      	lsrs	r2, r3, #18
 8006554:	230f      	movs	r3, #15
 8006556:	401a      	ands	r2, r3
 8006558:	4b3f      	ldr	r3, [pc, #252]	; (8006658 <HAL_RCC_GetSysClockFreq+0x148>)
 800655a:	5c9b      	ldrb	r3, [r3, r2]
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	0d9a      	lsrs	r2, r3, #22
 8006562:	2303      	movs	r3, #3
 8006564:	4013      	ands	r3, r2
 8006566:	3301      	adds	r3, #1
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800656a:	4b37      	ldr	r3, [pc, #220]	; (8006648 <HAL_RCC_GetSysClockFreq+0x138>)
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	2380      	movs	r3, #128	; 0x80
 8006570:	025b      	lsls	r3, r3, #9
 8006572:	4013      	ands	r3, r2
 8006574:	d01a      	beq.n	80065ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	4a35      	ldr	r2, [pc, #212]	; (8006654 <HAL_RCC_GetSysClockFreq+0x144>)
 8006580:	2300      	movs	r3, #0
 8006582:	69b8      	ldr	r0, [r7, #24]
 8006584:	69f9      	ldr	r1, [r7, #28]
 8006586:	f7f9 ffb9 	bl	80004fc <__aeabi_lmul>
 800658a:	0002      	movs	r2, r0
 800658c:	000b      	movs	r3, r1
 800658e:	0010      	movs	r0, r2
 8006590:	0019      	movs	r1, r3
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f7f9 ff8d 	bl	80004bc <__aeabi_uldivmod>
 80065a2:	0002      	movs	r2, r0
 80065a4:	000b      	movs	r3, r1
 80065a6:	0013      	movs	r3, r2
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
 80065aa:	e037      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80065ac:	4b26      	ldr	r3, [pc, #152]	; (8006648 <HAL_RCC_GetSysClockFreq+0x138>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2210      	movs	r2, #16
 80065b2:	4013      	ands	r3, r2
 80065b4:	d01a      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	60bb      	str	r3, [r7, #8]
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	4a23      	ldr	r2, [pc, #140]	; (800664c <HAL_RCC_GetSysClockFreq+0x13c>)
 80065c0:	2300      	movs	r3, #0
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	68f9      	ldr	r1, [r7, #12]
 80065c6:	f7f9 ff99 	bl	80004fc <__aeabi_lmul>
 80065ca:	0002      	movs	r2, r0
 80065cc:	000b      	movs	r3, r1
 80065ce:	0010      	movs	r0, r2
 80065d0:	0019      	movs	r1, r3
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f7f9 ff6d 	bl	80004bc <__aeabi_uldivmod>
 80065e2:	0002      	movs	r2, r0
 80065e4:	000b      	movs	r3, r1
 80065e6:	0013      	movs	r3, r2
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ea:	e017      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	0018      	movs	r0, r3
 80065f0:	2300      	movs	r3, #0
 80065f2:	0019      	movs	r1, r3
 80065f4:	4a16      	ldr	r2, [pc, #88]	; (8006650 <HAL_RCC_GetSysClockFreq+0x140>)
 80065f6:	2300      	movs	r3, #0
 80065f8:	f7f9 ff80 	bl	80004fc <__aeabi_lmul>
 80065fc:	0002      	movs	r2, r0
 80065fe:	000b      	movs	r3, r1
 8006600:	0010      	movs	r0, r2
 8006602:	0019      	movs	r1, r3
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	001c      	movs	r4, r3
 8006608:	2300      	movs	r3, #0
 800660a:	001d      	movs	r5, r3
 800660c:	0022      	movs	r2, r4
 800660e:	002b      	movs	r3, r5
 8006610:	f7f9 ff54 	bl	80004bc <__aeabi_uldivmod>
 8006614:	0002      	movs	r2, r0
 8006616:	000b      	movs	r3, r1
 8006618:	0013      	movs	r3, r2
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006620:	e00d      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <HAL_RCC_GetSysClockFreq+0x138>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	0b5b      	lsrs	r3, r3, #13
 8006628:	2207      	movs	r2, #7
 800662a:	4013      	ands	r3, r2
 800662c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	3301      	adds	r3, #1
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	0212      	lsls	r2, r2, #8
 8006636:	409a      	lsls	r2, r3
 8006638:	0013      	movs	r3, r2
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800663c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b00e      	add	sp, #56	; 0x38
 8006646:	bdb0      	pop	{r4, r5, r7, pc}
 8006648:	40021000 	.word	0x40021000
 800664c:	003d0900 	.word	0x003d0900
 8006650:	00f42400 	.word	0x00f42400
 8006654:	007a1200 	.word	0x007a1200
 8006658:	0800cad8 	.word	0x0800cad8

0800665c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <HAL_RCC_GetHCLKFreq+0x10>)
 8006662:	681b      	ldr	r3, [r3, #0]
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	20000000 	.word	0x20000000

08006670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006674:	f7ff fff2 	bl	800665c <HAL_RCC_GetHCLKFreq>
 8006678:	0001      	movs	r1, r0
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	2207      	movs	r2, #7
 8006682:	4013      	ands	r3, r2
 8006684:	4a04      	ldr	r2, [pc, #16]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006686:	5cd3      	ldrb	r3, [r2, r3]
 8006688:	40d9      	lsrs	r1, r3
 800668a:	000b      	movs	r3, r1
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	40021000 	.word	0x40021000
 8006698:	0800cad0 	.word	0x0800cad0

0800669c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066a0:	f7ff ffdc 	bl	800665c <HAL_RCC_GetHCLKFreq>
 80066a4:	0001      	movs	r1, r0
 80066a6:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	0adb      	lsrs	r3, r3, #11
 80066ac:	2207      	movs	r2, #7
 80066ae:	4013      	ands	r3, r2
 80066b0:	4a04      	ldr	r2, [pc, #16]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066b2:	5cd3      	ldrb	r3, [r2, r3]
 80066b4:	40d9      	lsrs	r1, r3
 80066b6:	000b      	movs	r3, r1
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	40021000 	.word	0x40021000
 80066c4:	0800cad0 	.word	0x0800cad0

080066c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80066d0:	2317      	movs	r3, #23
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2220      	movs	r2, #32
 80066de:	4013      	ands	r3, r2
 80066e0:	d106      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	4013      	ands	r3, r2
 80066ec:	d100      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80066ee:	e104      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f0:	4bb9      	ldr	r3, [pc, #740]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f4:	2380      	movs	r3, #128	; 0x80
 80066f6:	055b      	lsls	r3, r3, #21
 80066f8:	4013      	ands	r3, r2
 80066fa:	d10a      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fc:	4bb6      	ldr	r3, [pc, #728]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006700:	4bb5      	ldr	r3, [pc, #724]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006702:	2180      	movs	r1, #128	; 0x80
 8006704:	0549      	lsls	r1, r1, #21
 8006706:	430a      	orrs	r2, r1
 8006708:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800670a:	2317      	movs	r3, #23
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	2201      	movs	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006712:	4bb2      	ldr	r3, [pc, #712]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	4013      	ands	r3, r2
 800671c:	d11a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800671e:	4baf      	ldr	r3, [pc, #700]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4bae      	ldr	r3, [pc, #696]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006724:	2180      	movs	r1, #128	; 0x80
 8006726:	0049      	lsls	r1, r1, #1
 8006728:	430a      	orrs	r2, r1
 800672a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800672c:	f7fe fe88 	bl	8005440 <HAL_GetTick>
 8006730:	0003      	movs	r3, r0
 8006732:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006734:	e008      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006736:	f7fe fe83 	bl	8005440 <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b64      	cmp	r3, #100	; 0x64
 8006742:	d901      	bls.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e143      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006748:	4ba4      	ldr	r3, [pc, #656]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	2380      	movs	r3, #128	; 0x80
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	4013      	ands	r3, r2
 8006752:	d0f0      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006754:	4ba0      	ldr	r3, [pc, #640]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	23c0      	movs	r3, #192	; 0xc0
 800675a:	039b      	lsls	r3, r3, #14
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	23c0      	movs	r3, #192	; 0xc0
 8006766:	039b      	lsls	r3, r3, #14
 8006768:	4013      	ands	r3, r2
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	429a      	cmp	r2, r3
 800676e:	d107      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	23c0      	movs	r3, #192	; 0xc0
 8006776:	039b      	lsls	r3, r3, #14
 8006778:	4013      	ands	r3, r2
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	429a      	cmp	r2, r3
 800677e:	d013      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	23c0      	movs	r3, #192	; 0xc0
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	401a      	ands	r2, r3
 800678a:	23c0      	movs	r3, #192	; 0xc0
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	429a      	cmp	r2, r3
 8006790:	d10a      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006792:	4b91      	ldr	r3, [pc, #580]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	029b      	lsls	r3, r3, #10
 800679a:	401a      	ands	r2, r3
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d101      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e113      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80067a8:	4b8b      	ldr	r3, [pc, #556]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ac:	23c0      	movs	r3, #192	; 0xc0
 80067ae:	029b      	lsls	r3, r3, #10
 80067b0:	4013      	ands	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d049      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	23c0      	movs	r3, #192	; 0xc0
 80067c0:	029b      	lsls	r3, r3, #10
 80067c2:	4013      	ands	r3, r2
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d004      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2220      	movs	r2, #32
 80067d0:	4013      	ands	r3, r2
 80067d2:	d10d      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	23c0      	movs	r3, #192	; 0xc0
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	4013      	ands	r3, r2
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d034      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	4013      	ands	r3, r2
 80067ee:	d02e      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80067f0:	4b79      	ldr	r3, [pc, #484]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f4:	4a7a      	ldr	r2, [pc, #488]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067fa:	4b77      	ldr	r3, [pc, #476]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067fe:	4b76      	ldr	r3, [pc, #472]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006800:	2180      	movs	r1, #128	; 0x80
 8006802:	0309      	lsls	r1, r1, #12
 8006804:	430a      	orrs	r2, r1
 8006806:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006808:	4b73      	ldr	r3, [pc, #460]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800680a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800680c:	4b72      	ldr	r3, [pc, #456]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800680e:	4975      	ldr	r1, [pc, #468]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006810:	400a      	ands	r2, r1
 8006812:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006814:	4b70      	ldr	r3, [pc, #448]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4013      	ands	r3, r2
 8006822:	d014      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006824:	f7fe fe0c 	bl	8005440 <HAL_GetTick>
 8006828:	0003      	movs	r3, r0
 800682a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800682c:	e009      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800682e:	f7fe fe07 	bl	8005440 <HAL_GetTick>
 8006832:	0002      	movs	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	4a6b      	ldr	r2, [pc, #428]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d901      	bls.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e0c6      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006842:	4b65      	ldr	r3, [pc, #404]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4013      	ands	r3, r2
 800684c:	d0ef      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	4013      	ands	r3, r2
 8006858:	d01f      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	23c0      	movs	r3, #192	; 0xc0
 8006860:	029b      	lsls	r3, r3, #10
 8006862:	401a      	ands	r2, r3
 8006864:	23c0      	movs	r3, #192	; 0xc0
 8006866:	029b      	lsls	r3, r3, #10
 8006868:	429a      	cmp	r2, r3
 800686a:	d10c      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800686c:	4b5a      	ldr	r3, [pc, #360]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a5e      	ldr	r2, [pc, #376]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006872:	4013      	ands	r3, r2
 8006874:	0019      	movs	r1, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	23c0      	movs	r3, #192	; 0xc0
 800687c:	039b      	lsls	r3, r3, #14
 800687e:	401a      	ands	r2, r3
 8006880:	4b55      	ldr	r3, [pc, #340]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006882:	430a      	orrs	r2, r1
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	4b54      	ldr	r3, [pc, #336]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006888:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	23c0      	movs	r3, #192	; 0xc0
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	401a      	ands	r2, r3
 8006894:	4b50      	ldr	r3, [pc, #320]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006896:	430a      	orrs	r2, r1
 8006898:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2220      	movs	r2, #32
 80068a0:	4013      	ands	r3, r2
 80068a2:	d01f      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	23c0      	movs	r3, #192	; 0xc0
 80068aa:	029b      	lsls	r3, r3, #10
 80068ac:	401a      	ands	r2, r3
 80068ae:	23c0      	movs	r3, #192	; 0xc0
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d10c      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80068b6:	4b48      	ldr	r3, [pc, #288]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a4c      	ldr	r2, [pc, #304]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80068bc:	4013      	ands	r3, r2
 80068be:	0019      	movs	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	23c0      	movs	r3, #192	; 0xc0
 80068c6:	039b      	lsls	r3, r3, #14
 80068c8:	401a      	ands	r2, r3
 80068ca:	4b43      	ldr	r3, [pc, #268]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068d2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	23c0      	movs	r3, #192	; 0xc0
 80068da:	029b      	lsls	r3, r3, #10
 80068dc:	401a      	ands	r2, r3
 80068de:	4b3e      	ldr	r3, [pc, #248]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068e0:	430a      	orrs	r2, r1
 80068e2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068e4:	2317      	movs	r3, #23
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d105      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ee:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f2:	4b39      	ldr	r3, [pc, #228]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068f4:	493e      	ldr	r1, [pc, #248]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80068f6:	400a      	ands	r2, r1
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	4013      	ands	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006904:	4b34      	ldr	r3, [pc, #208]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006908:	2203      	movs	r2, #3
 800690a:	4393      	bics	r3, r2
 800690c:	0019      	movs	r1, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006914:	430a      	orrs	r2, r1
 8006916:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2202      	movs	r2, #2
 800691e:	4013      	ands	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006922:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006926:	220c      	movs	r2, #12
 8006928:	4393      	bics	r3, r2
 800692a:	0019      	movs	r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	4b29      	ldr	r3, [pc, #164]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006932:	430a      	orrs	r2, r1
 8006934:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2204      	movs	r2, #4
 800693c:	4013      	ands	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006940:	4b25      	ldr	r3, [pc, #148]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006944:	4a2b      	ldr	r2, [pc, #172]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006946:	4013      	ands	r3, r2
 8006948:	0019      	movs	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	4b22      	ldr	r3, [pc, #136]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006950:	430a      	orrs	r2, r1
 8006952:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2208      	movs	r2, #8
 800695a:	4013      	ands	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800695e:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006962:	4a25      	ldr	r2, [pc, #148]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006964:	4013      	ands	r3, r2
 8006966:	0019      	movs	r1, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800696e:	430a      	orrs	r2, r1
 8006970:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	2380      	movs	r3, #128	; 0x80
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	4013      	ands	r3, r2
 800697c:	d009      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800697e:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006982:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006984:	4013      	ands	r3, r2
 8006986:	0019      	movs	r1, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800698e:	430a      	orrs	r2, r1
 8006990:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2240      	movs	r2, #64	; 0x40
 8006998:	4013      	ands	r3, r2
 800699a:	d009      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800699e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a0:	4a16      	ldr	r2, [pc, #88]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	0019      	movs	r1, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069ac:	430a      	orrs	r2, r1
 80069ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2280      	movs	r2, #128	; 0x80
 80069b6:	4013      	ands	r3, r2
 80069b8:	d009      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80069ba:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069be:	4a10      	ldr	r2, [pc, #64]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	0019      	movs	r1, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069ca:	430a      	orrs	r2, r1
 80069cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	0018      	movs	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b006      	add	sp, #24
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40021000 	.word	0x40021000
 80069dc:	40007000 	.word	0x40007000
 80069e0:	fffcffff 	.word	0xfffcffff
 80069e4:	fff7ffff 	.word	0xfff7ffff
 80069e8:	00001388 	.word	0x00001388
 80069ec:	ffcfffff 	.word	0xffcfffff
 80069f0:	efffffff 	.word	0xefffffff
 80069f4:	fffff3ff 	.word	0xfffff3ff
 80069f8:	ffffcfff 	.word	0xffffcfff
 80069fc:	fbffffff 	.word	0xfbffffff
 8006a00:	fff3ffff 	.word	0xfff3ffff

08006a04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a04:	b5b0      	push	{r4, r5, r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a0c:	230f      	movs	r3, #15
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	2201      	movs	r2, #1
 8006a12:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e088      	b.n	8006b30 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2221      	movs	r2, #33	; 0x21
 8006a22:	5c9b      	ldrb	r3, [r3, r2]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d107      	bne.n	8006a3a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	2100      	movs	r1, #0
 8006a30:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7fc fa7b 	bl	8002f30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2221      	movs	r2, #33	; 0x21
 8006a3e:	2102      	movs	r1, #2
 8006a40:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2210      	movs	r2, #16
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d05f      	beq.n	8006b10 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	22ca      	movs	r2, #202	; 0xca
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2253      	movs	r2, #83	; 0x53
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a60:	250f      	movs	r5, #15
 8006a62:	197c      	adds	r4, r7, r5
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0018      	movs	r0, r3
 8006a68:	f000 fc62 	bl	8007330 <RTC_EnterInitMode>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8006a70:	0028      	movs	r0, r5
 8006a72:	183b      	adds	r3, r7, r0
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d12c      	bne.n	8006ad4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	492c      	ldr	r1, [pc, #176]	; (8006b38 <HAL_RTC_Init+0x134>)
 8006a86:	400a      	ands	r2, r1
 8006a88:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6899      	ldr	r1, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68d2      	ldr	r2, [r2, #12]
 8006ab0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6919      	ldr	r1, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	041a      	lsls	r2, r3, #16
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006ac6:	183c      	adds	r4, r7, r0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f000 fc74 	bl	80073b8 <RTC_ExitInitMode>
 8006ad0:	0003      	movs	r3, r0
 8006ad2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8006ad4:	230f      	movs	r3, #15
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d113      	bne.n	8006b06 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2103      	movs	r1, #3
 8006aea:	438a      	bics	r2, r1
 8006aec:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	22ff      	movs	r2, #255	; 0xff
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b0e:	e003      	b.n	8006b18 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006b10:	230f      	movs	r3, #15
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8006b18:	230f      	movs	r3, #15
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2221      	movs	r2, #33	; 0x21
 8006b26:	2101      	movs	r1, #1
 8006b28:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006b2a:	230f      	movs	r3, #15
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	781b      	ldrb	r3, [r3, #0]
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b004      	add	sp, #16
 8006b36:	bdb0      	pop	{r4, r5, r7, pc}
 8006b38:	ff8fffbf 	.word	0xff8fffbf

08006b3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b3c:	b5b0      	push	{r4, r5, r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	5c9b      	ldrb	r3, [r3, r2]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_RTC_SetTime+0x1e>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e092      	b.n	8006c80 <HAL_RTC_SetTime+0x144>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	2101      	movs	r1, #1
 8006b60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2221      	movs	r2, #33	; 0x21
 8006b66:	2102      	movs	r1, #2
 8006b68:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d125      	bne.n	8006bbc <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d102      	bne.n	8006b82 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	0018      	movs	r0, r3
 8006b88:	f000 fc40 	bl	800740c <RTC_ByteToBcd2>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 fc39 	bl	800740c <RTC_ByteToBcd2>
 8006b9a:	0003      	movs	r3, r0
 8006b9c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b9e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	789b      	ldrb	r3, [r3, #2]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 fc31 	bl	800740c <RTC_ByteToBcd2>
 8006baa:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bac:	0022      	movs	r2, r4
 8006bae:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	e017      	b.n	8006bec <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	2240      	movs	r2, #64	; 0x40
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d102      	bne.n	8006bce <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006bda:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006be0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	22ca      	movs	r2, #202	; 0xca
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2253      	movs	r2, #83	; 0x53
 8006bfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bfc:	2513      	movs	r5, #19
 8006bfe:	197c      	adds	r4, r7, r5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f000 fb94 	bl	8007330 <RTC_EnterInitMode>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006c0c:	0028      	movs	r0, r5
 8006c0e:	183b      	adds	r3, r7, r0
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d120      	bne.n	8006c58 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	491a      	ldr	r1, [pc, #104]	; (8006c88 <HAL_RTC_SetTime+0x14c>)
 8006c1e:	400a      	ands	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4917      	ldr	r1, [pc, #92]	; (8006c8c <HAL_RTC_SetTime+0x150>)
 8006c2e:	400a      	ands	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6899      	ldr	r1, [r3, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c4a:	183c      	adds	r4, r7, r0
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f000 fbb2 	bl	80073b8 <RTC_ExitInitMode>
 8006c54:	0003      	movs	r3, r0
 8006c56:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8006c58:	2313      	movs	r3, #19
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2221      	movs	r2, #33	; 0x21
 8006c66:	2101      	movs	r1, #1
 8006c68:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	22ff      	movs	r2, #255	; 0xff
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	2100      	movs	r1, #0
 8006c78:	5499      	strb	r1, [r3, r2]

  return status;
 8006c7a:	2313      	movs	r3, #19
 8006c7c:	18fb      	adds	r3, r7, r3
 8006c7e:	781b      	ldrb	r3, [r3, #0]
}
 8006c80:	0018      	movs	r0, r3
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b006      	add	sp, #24
 8006c86:	bdb0      	pop	{r4, r5, r7, pc}
 8006c88:	007f7f7f 	.word	0x007f7f7f
 8006c8c:	fffbffff 	.word	0xfffbffff

08006c90 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	045b      	lsls	r3, r3, #17
 8006cb2:	0c5a      	lsrs	r2, r3, #17
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <HAL_RTC_GetTime+0xb8>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	0c1b      	lsrs	r3, r3, #16
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	223f      	movs	r2, #63	; 0x3f
 8006ccc:	4013      	ands	r3, r2
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	227f      	movs	r2, #127	; 0x7f
 8006cdc:	4013      	ands	r3, r2
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	227f      	movs	r2, #127	; 0x7f
 8006cea:	4013      	ands	r3, r2
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	0d9b      	lsrs	r3, r3, #22
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f000 fb9e 	bl	800744e <RTC_Bcd2ToByte>
 8006d12:	0003      	movs	r3, r0
 8006d14:	001a      	movs	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 fb95 	bl	800744e <RTC_Bcd2ToByte>
 8006d24:	0003      	movs	r3, r0
 8006d26:	001a      	movs	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	789b      	ldrb	r3, [r3, #2]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 fb8c 	bl	800744e <RTC_Bcd2ToByte>
 8006d36:	0003      	movs	r3, r0
 8006d38:	001a      	movs	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b006      	add	sp, #24
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	007f7f7f 	.word	0x007f7f7f

08006d4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d4c:	b5b0      	push	{r4, r5, r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	5c9b      	ldrb	r3, [r3, r2]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_RTC_SetDate+0x1e>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e07e      	b.n	8006e68 <HAL_RTC_SetDate+0x11c>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	2101      	movs	r1, #1
 8006d70:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2221      	movs	r2, #33	; 0x21
 8006d76:	2102      	movs	r1, #2
 8006d78:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10e      	bne.n	8006d9e <HAL_RTC_SetDate+0x52>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	001a      	movs	r2, r3
 8006d86:	2310      	movs	r3, #16
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d008      	beq.n	8006d9e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2210      	movs	r2, #16
 8006d92:	4393      	bics	r3, r2
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	330a      	adds	r3, #10
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d11c      	bne.n	8006dde <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	78db      	ldrb	r3, [r3, #3]
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 fb2f 	bl	800740c <RTC_ByteToBcd2>
 8006dae:	0003      	movs	r3, r0
 8006db0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	0018      	movs	r0, r3
 8006db8:	f000 fb28 	bl	800740c <RTC_ByteToBcd2>
 8006dbc:	0003      	movs	r3, r0
 8006dbe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006dc0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	789b      	ldrb	r3, [r3, #2]
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 fb20 	bl	800740c <RTC_ByteToBcd2>
 8006dcc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006dce:	0022      	movs	r2, r4
 8006dd0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e00e      	b.n	8006dfc <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	78db      	ldrb	r3, [r3, #3]
 8006de2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006dea:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006df0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	22ca      	movs	r2, #202	; 0xca
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2253      	movs	r2, #83	; 0x53
 8006e0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e0c:	2513      	movs	r5, #19
 8006e0e:	197c      	adds	r4, r7, r5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	0018      	movs	r0, r3
 8006e14:	f000 fa8c 	bl	8007330 <RTC_EnterInitMode>
 8006e18:	0003      	movs	r3, r0
 8006e1a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006e1c:	0028      	movs	r0, r5
 8006e1e:	183b      	adds	r3, r7, r0
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10c      	bne.n	8006e40 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4910      	ldr	r1, [pc, #64]	; (8006e70 <HAL_RTC_SetDate+0x124>)
 8006e2e:	400a      	ands	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e32:	183c      	adds	r4, r7, r0
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	0018      	movs	r0, r3
 8006e38:	f000 fabe 	bl	80073b8 <RTC_ExitInitMode>
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8006e40:	2313      	movs	r3, #19
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d103      	bne.n	8006e52 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2221      	movs	r2, #33	; 0x21
 8006e4e:	2101      	movs	r1, #1
 8006e50:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	22ff      	movs	r2, #255	; 0xff
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	2100      	movs	r1, #0
 8006e60:	5499      	strb	r1, [r3, r2]

  return status;
 8006e62:	2313      	movs	r3, #19
 8006e64:	18fb      	adds	r3, r7, r3
 8006e66:	781b      	ldrb	r3, [r3, #0]
}
 8006e68:	0018      	movs	r0, r3
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	b006      	add	sp, #24
 8006e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e70:	00ffff3f 	.word	0x00ffff3f

08006e74 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <HAL_RTC_GetDate+0x9c>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	0c1b      	lsrs	r3, r3, #16
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	221f      	movs	r2, #31
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	223f      	movs	r2, #63	; 0x3f
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	0b5b      	lsrs	r3, r3, #13
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2207      	movs	r2, #7
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11a      	bne.n	8006f04 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	78db      	ldrb	r3, [r3, #3]
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f000 fabb 	bl	800744e <RTC_Bcd2ToByte>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	001a      	movs	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 fab2 	bl	800744e <RTC_Bcd2ToByte>
 8006eea:	0003      	movs	r3, r0
 8006eec:	001a      	movs	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	789b      	ldrb	r3, [r3, #2]
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f000 faa9 	bl	800744e <RTC_Bcd2ToByte>
 8006efc:	0003      	movs	r3, r0
 8006efe:	001a      	movs	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	0018      	movs	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	b006      	add	sp, #24
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	00ffff3f 	.word	0x00ffff3f

08006f14 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b089      	sub	sp, #36	; 0x24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	5c9b      	ldrb	r3, [r3, r2]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d101      	bne.n	8006f3a <HAL_RTC_SetAlarm+0x26>
 8006f36:	2302      	movs	r3, #2
 8006f38:	e120      	b.n	800717c <HAL_RTC_SetAlarm+0x268>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	2101      	movs	r1, #1
 8006f40:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2221      	movs	r2, #33	; 0x21
 8006f46:	2102      	movs	r1, #2
 8006f48:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d136      	bne.n	8006fbe <HAL_RTC_SetAlarm+0xaa>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2240      	movs	r2, #64	; 0x40
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d102      	bne.n	8006f62 <HAL_RTC_SetAlarm+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f000 fa50 	bl	800740c <RTC_ByteToBcd2>
 8006f6c:	0003      	movs	r3, r0
 8006f6e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	0018      	movs	r0, r3
 8006f76:	f000 fa49 	bl	800740c <RTC_ByteToBcd2>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006f7e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	789b      	ldrb	r3, [r3, #2]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f000 fa41 	bl	800740c <RTC_ByteToBcd2>
 8006f8a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f8c:	0022      	movs	r2, r4
 8006f8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006f96:	431a      	orrs	r2, r3
 8006f98:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	5c9b      	ldrb	r3, [r3, r2]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f000 fa33 	bl	800740c <RTC_ByteToBcd2>
 8006fa6:	0003      	movs	r3, r0
 8006fa8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006faa:	0022      	movs	r2, r4
 8006fac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006fb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e022      	b.n	8007004 <HAL_RTC_SetAlarm+0xf0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2240      	movs	r2, #64	; 0x40
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d102      	bne.n	8006fd0 <HAL_RTC_SetAlarm+0xbc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006fdc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006fe2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	78db      	ldrb	r3, [r3, #3]
 8006fe8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006fea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2120      	movs	r1, #32
 8006ff0:	5c5b      	ldrb	r3, [r3, r1]
 8006ff2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006ff4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006ffa:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007000:	4313      	orrs	r3, r2
 8007002:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	22ca      	movs	r2, #202	; 0xca
 8007016:	625a      	str	r2, [r3, #36]	; 0x24
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2253      	movs	r2, #83	; 0x53
 800701e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	429a      	cmp	r2, r3
 800702a:	d14d      	bne.n	80070c8 <HAL_RTC_SetAlarm+0x1b4>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4953      	ldr	r1, [pc, #332]	; (8007184 <HAL_RTC_SetAlarm+0x270>)
 8007038:	400a      	ands	r2, r1
 800703a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4950      	ldr	r1, [pc, #320]	; (8007188 <HAL_RTC_SetAlarm+0x274>)
 8007048:	400a      	ands	r2, r1
 800704a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	22ff      	movs	r2, #255	; 0xff
 8007054:	401a      	ands	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	494c      	ldr	r1, [pc, #304]	; (800718c <HAL_RTC_SetAlarm+0x278>)
 800705c:	430a      	orrs	r2, r1
 800705e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007060:	f7fe f9ee 	bl	8005440 <HAL_GetTick>
 8007064:	0003      	movs	r3, r0
 8007066:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007068:	e016      	b.n	8007098 <HAL_RTC_SetAlarm+0x184>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800706a:	f7fe f9e9 	bl	8005440 <HAL_GetTick>
 800706e:	0002      	movs	r2, r0
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	23fa      	movs	r3, #250	; 0xfa
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	429a      	cmp	r2, r3
 800707a:	d90d      	bls.n	8007098 <HAL_RTC_SetAlarm+0x184>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	22ff      	movs	r2, #255	; 0xff
 8007082:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2221      	movs	r2, #33	; 0x21
 8007088:	2103      	movs	r1, #3
 800708a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	2100      	movs	r1, #0
 8007092:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e071      	b.n	800717c <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	4013      	ands	r3, r2
 80070a2:	d0e2      	beq.n	800706a <HAL_RTC_SetAlarm+0x156>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2180      	movs	r1, #128	; 0x80
 80070c0:	0049      	lsls	r1, r1, #1
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	e04c      	b.n	8007162 <HAL_RTC_SetAlarm+0x24e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	492f      	ldr	r1, [pc, #188]	; (8007190 <HAL_RTC_SetAlarm+0x27c>)
 80070d4:	400a      	ands	r2, r1
 80070d6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	492c      	ldr	r1, [pc, #176]	; (8007194 <HAL_RTC_SetAlarm+0x280>)
 80070e4:	400a      	ands	r2, r1
 80070e6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	22ff      	movs	r2, #255	; 0xff
 80070f0:	401a      	ands	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4928      	ldr	r1, [pc, #160]	; (8007198 <HAL_RTC_SetAlarm+0x284>)
 80070f8:	430a      	orrs	r2, r1
 80070fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070fc:	f7fe f9a0 	bl	8005440 <HAL_GetTick>
 8007100:	0003      	movs	r3, r0
 8007102:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007104:	e016      	b.n	8007134 <HAL_RTC_SetAlarm+0x220>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007106:	f7fe f99b 	bl	8005440 <HAL_GetTick>
 800710a:	0002      	movs	r2, r0
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	23fa      	movs	r3, #250	; 0xfa
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	429a      	cmp	r2, r3
 8007116:	d90d      	bls.n	8007134 <HAL_RTC_SetAlarm+0x220>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	22ff      	movs	r2, #255	; 0xff
 800711e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2221      	movs	r2, #33	; 0x21
 8007124:	2103      	movs	r1, #3
 8007126:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	2100      	movs	r1, #0
 800712e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e023      	b.n	800717c <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	2202      	movs	r2, #2
 800713c:	4013      	ands	r3, r2
 800713e:	d0e2      	beq.n	8007106 <HAL_RTC_SetAlarm+0x1f2>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2180      	movs	r1, #128	; 0x80
 800715c:	0089      	lsls	r1, r1, #2
 800715e:	430a      	orrs	r2, r1
 8007160:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	22ff      	movs	r2, #255	; 0xff
 8007168:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2221      	movs	r2, #33	; 0x21
 800716e:	2101      	movs	r1, #1
 8007170:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	2100      	movs	r1, #0
 8007178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	0018      	movs	r0, r3
 800717e:	46bd      	mov	sp, r7
 8007180:	b009      	add	sp, #36	; 0x24
 8007182:	bd90      	pop	{r4, r7, pc}
 8007184:	fffffeff 	.word	0xfffffeff
 8007188:	ffffefff 	.word	0xffffefff
 800718c:	fffffe7f 	.word	0xfffffe7f
 8007190:	fffffdff 	.word	0xfffffdff
 8007194:	ffffdfff 	.word	0xffffdfff
 8007198:	fffffd7f 	.word	0xfffffd7f

0800719c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	5c9b      	ldrb	r3, [r3, r2]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_RTC_DeactivateAlarm+0x1c>
 80071b4:	2302      	movs	r3, #2
 80071b6:	e086      	b.n	80072c6 <HAL_RTC_DeactivateAlarm+0x12a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	2101      	movs	r1, #1
 80071be:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2221      	movs	r2, #33	; 0x21
 80071c4:	2102      	movs	r1, #2
 80071c6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	22ca      	movs	r2, #202	; 0xca
 80071ce:	625a      	str	r2, [r3, #36]	; 0x24
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2253      	movs	r2, #83	; 0x53
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	2380      	movs	r3, #128	; 0x80
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	429a      	cmp	r2, r3
 80071e0:	d132      	bne.n	8007248 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4938      	ldr	r1, [pc, #224]	; (80072d0 <HAL_RTC_DeactivateAlarm+0x134>)
 80071ee:	400a      	ands	r2, r1
 80071f0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4935      	ldr	r1, [pc, #212]	; (80072d4 <HAL_RTC_DeactivateAlarm+0x138>)
 80071fe:	400a      	ands	r2, r1
 8007200:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007202:	f7fe f91d 	bl	8005440 <HAL_GetTick>
 8007206:	0003      	movs	r3, r0
 8007208:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800720a:	e016      	b.n	800723a <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800720c:	f7fe f918 	bl	8005440 <HAL_GetTick>
 8007210:	0002      	movs	r2, r0
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	23fa      	movs	r3, #250	; 0xfa
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	429a      	cmp	r2, r3
 800721c:	d90d      	bls.n	800723a <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	22ff      	movs	r2, #255	; 0xff
 8007224:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2221      	movs	r2, #33	; 0x21
 800722a:	2103      	movs	r1, #3
 800722c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	2100      	movs	r1, #0
 8007234:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e045      	b.n	80072c6 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	4013      	ands	r3, r2
 8007244:	d0e2      	beq.n	800720c <HAL_RTC_DeactivateAlarm+0x70>
 8007246:	e031      	b.n	80072ac <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4921      	ldr	r1, [pc, #132]	; (80072d8 <HAL_RTC_DeactivateAlarm+0x13c>)
 8007254:	400a      	ands	r2, r1
 8007256:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	491e      	ldr	r1, [pc, #120]	; (80072dc <HAL_RTC_DeactivateAlarm+0x140>)
 8007264:	400a      	ands	r2, r1
 8007266:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007268:	f7fe f8ea 	bl	8005440 <HAL_GetTick>
 800726c:	0003      	movs	r3, r0
 800726e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007270:	e016      	b.n	80072a0 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007272:	f7fe f8e5 	bl	8005440 <HAL_GetTick>
 8007276:	0002      	movs	r2, r0
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	1ad2      	subs	r2, r2, r3
 800727c:	23fa      	movs	r3, #250	; 0xfa
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	429a      	cmp	r2, r3
 8007282:	d90d      	bls.n	80072a0 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	22ff      	movs	r2, #255	; 0xff
 800728a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2221      	movs	r2, #33	; 0x21
 8007290:	2103      	movs	r1, #3
 8007292:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	2100      	movs	r1, #0
 800729a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e012      	b.n	80072c6 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	2202      	movs	r2, #2
 80072a8:	4013      	ands	r3, r2
 80072aa:	d0e2      	beq.n	8007272 <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	22ff      	movs	r2, #255	; 0xff
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2221      	movs	r2, #33	; 0x21
 80072b8:	2101      	movs	r1, #1
 80072ba:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	2100      	movs	r1, #0
 80072c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	0018      	movs	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b004      	add	sp, #16
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	fffffeff 	.word	0xfffffeff
 80072d4:	ffffefff 	.word	0xffffefff
 80072d8:	fffffdff 	.word	0xfffffdff
 80072dc:	ffffdfff 	.word	0xffffdfff

080072e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a0e      	ldr	r2, [pc, #56]	; (800732c <HAL_RTC_WaitForSynchro+0x4c>)
 80072f2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072f4:	f7fe f8a4 	bl	8005440 <HAL_GetTick>
 80072f8:	0003      	movs	r3, r0
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80072fc:	e00a      	b.n	8007314 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072fe:	f7fe f89f 	bl	8005440 <HAL_GetTick>
 8007302:	0002      	movs	r2, r0
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	23fa      	movs	r3, #250	; 0xfa
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	429a      	cmp	r2, r3
 800730e:	d901      	bls.n	8007314 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e006      	b.n	8007322 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	4013      	ands	r3, r2
 800731e:	d0ee      	beq.n	80072fe <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	0018      	movs	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	b004      	add	sp, #16
 8007328:	bd80      	pop	{r7, pc}
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	0001ff5f 	.word	0x0001ff5f

08007330 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800733c:	230f      	movs	r3, #15
 800733e:	18fb      	adds	r3, r7, r3
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2240      	movs	r2, #64	; 0x40
 800734c:	4013      	ands	r3, r2
 800734e:	d12c      	bne.n	80073aa <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2180      	movs	r1, #128	; 0x80
 800735c:	430a      	orrs	r2, r1
 800735e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007360:	f7fe f86e 	bl	8005440 <HAL_GetTick>
 8007364:	0003      	movs	r3, r0
 8007366:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007368:	e014      	b.n	8007394 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800736a:	f7fe f869 	bl	8005440 <HAL_GetTick>
 800736e:	0002      	movs	r2, r0
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	200f      	movs	r0, #15
 8007376:	183b      	adds	r3, r7, r0
 8007378:	1839      	adds	r1, r7, r0
 800737a:	7809      	ldrb	r1, [r1, #0]
 800737c:	7019      	strb	r1, [r3, #0]
 800737e:	23fa      	movs	r3, #250	; 0xfa
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	429a      	cmp	r2, r3
 8007384:	d906      	bls.n	8007394 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2221      	movs	r2, #33	; 0x21
 800738a:	2104      	movs	r1, #4
 800738c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800738e:	183b      	adds	r3, r7, r0
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2240      	movs	r2, #64	; 0x40
 800739c:	4013      	ands	r3, r2
 800739e:	d104      	bne.n	80073aa <RTC_EnterInitMode+0x7a>
 80073a0:	230f      	movs	r3, #15
 80073a2:	18fb      	adds	r3, r7, r3
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d1df      	bne.n	800736a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80073aa:	230f      	movs	r3, #15
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	781b      	ldrb	r3, [r3, #0]
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b004      	add	sp, #16
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c0:	240f      	movs	r4, #15
 80073c2:	193b      	adds	r3, r7, r4
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2180      	movs	r1, #128	; 0x80
 80073d4:	438a      	bics	r2, r1
 80073d6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	2220      	movs	r2, #32
 80073e0:	4013      	ands	r3, r2
 80073e2:	d10c      	bne.n	80073fe <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	0018      	movs	r0, r3
 80073e8:	f7ff ff7a 	bl	80072e0 <HAL_RTC_WaitForSynchro>
 80073ec:	1e03      	subs	r3, r0, #0
 80073ee:	d006      	beq.n	80073fe <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2221      	movs	r2, #33	; 0x21
 80073f4:	2104      	movs	r1, #4
 80073f6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80073f8:	193b      	adds	r3, r7, r4
 80073fa:	2201      	movs	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80073fe:	230f      	movs	r3, #15
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	781b      	ldrb	r3, [r3, #0]
}
 8007404:	0018      	movs	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	b005      	add	sp, #20
 800740a:	bd90      	pop	{r4, r7, pc}

0800740c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	0002      	movs	r2, r0
 8007414:	1dfb      	adds	r3, r7, #7
 8007416:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800741c:	e007      	b.n	800742e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3301      	adds	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007424:	1dfb      	adds	r3, r7, #7
 8007426:	1dfa      	adds	r2, r7, #7
 8007428:	7812      	ldrb	r2, [r2, #0]
 800742a:	3a0a      	subs	r2, #10
 800742c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800742e:	1dfb      	adds	r3, r7, #7
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b09      	cmp	r3, #9
 8007434:	d8f3      	bhi.n	800741e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	b2da      	uxtb	r2, r3
 800743e:	1dfb      	adds	r3, r7, #7
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	4313      	orrs	r3, r2
 8007444:	b2db      	uxtb	r3, r3
}
 8007446:	0018      	movs	r0, r3
 8007448:	46bd      	mov	sp, r7
 800744a:	b004      	add	sp, #16
 800744c:	bd80      	pop	{r7, pc}

0800744e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	0002      	movs	r2, r0
 8007456:	1dfb      	adds	r3, r7, #7
 8007458:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800745e:	1dfb      	adds	r3, r7, #7
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	b2db      	uxtb	r3, r3
 8007466:	001a      	movs	r2, r3
 8007468:	0013      	movs	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	189b      	adds	r3, r3, r2
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	b2da      	uxtb	r2, r3
 8007476:	1dfb      	adds	r3, r7, #7
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	210f      	movs	r1, #15
 800747c:	400b      	ands	r3, r1
 800747e:	b2db      	uxtb	r3, r3
 8007480:	18d3      	adds	r3, r2, r3
 8007482:	b2db      	uxtb	r3, r3
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b004      	add	sp, #16
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e032      	b.n	8007504 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2239      	movs	r2, #57	; 0x39
 80074a2:	5c9b      	ldrb	r3, [r3, r2]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d107      	bne.n	80074ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2238      	movs	r2, #56	; 0x38
 80074ae:	2100      	movs	r1, #0
 80074b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7fb fd53 	bl	8002f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2239      	movs	r2, #57	; 0x39
 80074be:	2102      	movs	r1, #2
 80074c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3304      	adds	r3, #4
 80074ca:	0019      	movs	r1, r3
 80074cc:	0010      	movs	r0, r2
 80074ce:	f000 fa95 	bl	80079fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	223e      	movs	r2, #62	; 0x3e
 80074d6:	2101      	movs	r1, #1
 80074d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	223a      	movs	r2, #58	; 0x3a
 80074de:	2101      	movs	r1, #1
 80074e0:	5499      	strb	r1, [r3, r2]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	223b      	movs	r2, #59	; 0x3b
 80074e6:	2101      	movs	r1, #1
 80074e8:	5499      	strb	r1, [r3, r2]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	223c      	movs	r2, #60	; 0x3c
 80074ee:	2101      	movs	r1, #1
 80074f0:	5499      	strb	r1, [r3, r2]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	223d      	movs	r2, #61	; 0x3d
 80074f6:	2101      	movs	r1, #1
 80074f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2239      	movs	r2, #57	; 0x39
 80074fe:	2101      	movs	r1, #1
 8007500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b002      	add	sp, #8
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2239      	movs	r2, #57	; 0x39
 8007518:	5c9b      	ldrb	r3, [r3, r2]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	d001      	beq.n	8007524 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e033      	b.n	800758c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2239      	movs	r2, #57	; 0x39
 8007528:	2102      	movs	r1, #2
 800752a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	05db      	lsls	r3, r3, #23
 8007534:	429a      	cmp	r2, r3
 8007536:	d00e      	beq.n	8007556 <HAL_TIM_Base_Start+0x4a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a15      	ldr	r2, [pc, #84]	; (8007594 <HAL_TIM_Base_Start+0x88>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_TIM_Base_Start+0x4a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a14      	ldr	r2, [pc, #80]	; (8007598 <HAL_TIM_Base_Start+0x8c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_TIM_Base_Start+0x4a>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a12      	ldr	r2, [pc, #72]	; (800759c <HAL_TIM_Base_Start+0x90>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d111      	bne.n	800757a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2207      	movs	r2, #7
 800755e:	4013      	ands	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b06      	cmp	r3, #6
 8007566:	d010      	beq.n	800758a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2101      	movs	r1, #1
 8007574:	430a      	orrs	r2, r1
 8007576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007578:	e007      	b.n	800758a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2101      	movs	r1, #1
 8007586:	430a      	orrs	r2, r1
 8007588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	0018      	movs	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	b004      	add	sp, #16
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40000400 	.word	0x40000400
 8007598:	40010800 	.word	0x40010800
 800759c:	40011400 	.word	0x40011400

080075a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2239      	movs	r2, #57	; 0x39
 80075ac:	5c9b      	ldrb	r3, [r3, r2]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d001      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e03b      	b.n	8007630 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2239      	movs	r2, #57	; 0x39
 80075bc:	2102      	movs	r1, #2
 80075be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2101      	movs	r1, #1
 80075cc:	430a      	orrs	r2, r1
 80075ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	05db      	lsls	r3, r3, #23
 80075d8:	429a      	cmp	r2, r3
 80075da:	d00e      	beq.n	80075fa <HAL_TIM_Base_Start_IT+0x5a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a15      	ldr	r2, [pc, #84]	; (8007638 <HAL_TIM_Base_Start_IT+0x98>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d009      	beq.n	80075fa <HAL_TIM_Base_Start_IT+0x5a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a14      	ldr	r2, [pc, #80]	; (800763c <HAL_TIM_Base_Start_IT+0x9c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_TIM_Base_Start_IT+0x5a>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a12      	ldr	r2, [pc, #72]	; (8007640 <HAL_TIM_Base_Start_IT+0xa0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d111      	bne.n	800761e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	2207      	movs	r2, #7
 8007602:	4013      	ands	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b06      	cmp	r3, #6
 800760a:	d010      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2101      	movs	r1, #1
 8007618:	430a      	orrs	r2, r1
 800761a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761c:	e007      	b.n	800762e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2101      	movs	r1, #1
 800762a:	430a      	orrs	r2, r1
 800762c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	0018      	movs	r0, r3
 8007632:	46bd      	mov	sp, r7
 8007634:	b004      	add	sp, #16
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40000400 	.word	0x40000400
 800763c:	40010800 	.word	0x40010800
 8007640:	40011400 	.word	0x40011400

08007644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2202      	movs	r2, #2
 8007654:	4013      	ands	r3, r2
 8007656:	2b02      	cmp	r3, #2
 8007658:	d124      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2202      	movs	r2, #2
 8007662:	4013      	ands	r3, r2
 8007664:	2b02      	cmp	r3, #2
 8007666:	d11d      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2203      	movs	r2, #3
 800766e:	4252      	negs	r2, r2
 8007670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2203      	movs	r2, #3
 8007680:	4013      	ands	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	0018      	movs	r0, r3
 8007688:	f000 f9a0 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 800768c:	e007      	b.n	800769e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	0018      	movs	r0, r3
 8007692:	f000 f993 	bl	80079bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	0018      	movs	r0, r3
 800769a:	f000 f99f 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2204      	movs	r2, #4
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d125      	bne.n	80076fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2204      	movs	r2, #4
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d11e      	bne.n	80076fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2205      	movs	r2, #5
 80076c6:	4252      	negs	r2, r2
 80076c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	23c0      	movs	r3, #192	; 0xc0
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4013      	ands	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	0018      	movs	r0, r3
 80076e2:	f000 f973 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 80076e6:	e007      	b.n	80076f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	0018      	movs	r0, r3
 80076ec:	f000 f966 	bl	80079bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	0018      	movs	r0, r3
 80076f4:	f000 f972 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2208      	movs	r2, #8
 8007706:	4013      	ands	r3, r2
 8007708:	2b08      	cmp	r3, #8
 800770a:	d124      	bne.n	8007756 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2208      	movs	r2, #8
 8007714:	4013      	ands	r3, r2
 8007716:	2b08      	cmp	r3, #8
 8007718:	d11d      	bne.n	8007756 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2209      	movs	r2, #9
 8007720:	4252      	negs	r2, r2
 8007722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2204      	movs	r2, #4
 8007728:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	2203      	movs	r2, #3
 8007732:	4013      	ands	r3, r2
 8007734:	d004      	beq.n	8007740 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0018      	movs	r0, r3
 800773a:	f000 f947 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 800773e:	e007      	b.n	8007750 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	0018      	movs	r0, r3
 8007744:	f000 f93a 	bl	80079bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	0018      	movs	r0, r3
 800774c:	f000 f946 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2210      	movs	r2, #16
 800775e:	4013      	ands	r3, r2
 8007760:	2b10      	cmp	r3, #16
 8007762:	d125      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	2210      	movs	r2, #16
 800776c:	4013      	ands	r3, r2
 800776e:	2b10      	cmp	r3, #16
 8007770:	d11e      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2211      	movs	r2, #17
 8007778:	4252      	negs	r2, r2
 800777a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2208      	movs	r2, #8
 8007780:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	23c0      	movs	r3, #192	; 0xc0
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4013      	ands	r3, r2
 800778e:	d004      	beq.n	800779a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	0018      	movs	r0, r3
 8007794:	f000 f91a 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 8007798:	e007      	b.n	80077aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	0018      	movs	r0, r3
 800779e:	f000 f90d 	bl	80079bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	0018      	movs	r0, r3
 80077a6:	f000 f919 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2201      	movs	r2, #1
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d10f      	bne.n	80077de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d108      	bne.n	80077de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2202      	movs	r2, #2
 80077d2:	4252      	negs	r2, r2
 80077d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	0018      	movs	r0, r3
 80077da:	f7fa fe4d 	bl	8002478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2240      	movs	r2, #64	; 0x40
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d10f      	bne.n	800780c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2240      	movs	r2, #64	; 0x40
 80077f4:	4013      	ands	r3, r2
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d108      	bne.n	800780c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2241      	movs	r2, #65	; 0x41
 8007800:	4252      	negs	r2, r2
 8007802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	0018      	movs	r0, r3
 8007808:	f000 f8f0 	bl	80079ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800780c:	46c0      	nop			; (mov r8, r8)
 800780e:	46bd      	mov	sp, r7
 8007810:	b002      	add	sp, #8
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800781e:	230f      	movs	r3, #15
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2238      	movs	r2, #56	; 0x38
 800782a:	5c9b      	ldrb	r3, [r3, r2]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_TIM_ConfigClockSource+0x20>
 8007830:	2302      	movs	r3, #2
 8007832:	e0bc      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x19a>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2238      	movs	r2, #56	; 0x38
 8007838:	2101      	movs	r1, #1
 800783a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2239      	movs	r2, #57	; 0x39
 8007840:	2102      	movs	r1, #2
 8007842:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2277      	movs	r2, #119	; 0x77
 8007850:	4393      	bics	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4a58      	ldr	r2, [pc, #352]	; (80079b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007858:	4013      	ands	r3, r2
 800785a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2280      	movs	r2, #128	; 0x80
 800786a:	0192      	lsls	r2, r2, #6
 800786c:	4293      	cmp	r3, r2
 800786e:	d040      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0xde>
 8007870:	2280      	movs	r2, #128	; 0x80
 8007872:	0192      	lsls	r2, r2, #6
 8007874:	4293      	cmp	r3, r2
 8007876:	d900      	bls.n	800787a <HAL_TIM_ConfigClockSource+0x66>
 8007878:	e088      	b.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 800787a:	2280      	movs	r2, #128	; 0x80
 800787c:	0152      	lsls	r2, r2, #5
 800787e:	4293      	cmp	r3, r2
 8007880:	d100      	bne.n	8007884 <HAL_TIM_ConfigClockSource+0x70>
 8007882:	e088      	b.n	8007996 <HAL_TIM_ConfigClockSource+0x182>
 8007884:	2280      	movs	r2, #128	; 0x80
 8007886:	0152      	lsls	r2, r2, #5
 8007888:	4293      	cmp	r3, r2
 800788a:	d900      	bls.n	800788e <HAL_TIM_ConfigClockSource+0x7a>
 800788c:	e07e      	b.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 800788e:	2b70      	cmp	r3, #112	; 0x70
 8007890:	d018      	beq.n	80078c4 <HAL_TIM_ConfigClockSource+0xb0>
 8007892:	d900      	bls.n	8007896 <HAL_TIM_ConfigClockSource+0x82>
 8007894:	e07a      	b.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 8007896:	2b60      	cmp	r3, #96	; 0x60
 8007898:	d04f      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x126>
 800789a:	d900      	bls.n	800789e <HAL_TIM_ConfigClockSource+0x8a>
 800789c:	e076      	b.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 800789e:	2b50      	cmp	r3, #80	; 0x50
 80078a0:	d03b      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x106>
 80078a2:	d900      	bls.n	80078a6 <HAL_TIM_ConfigClockSource+0x92>
 80078a4:	e072      	b.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d057      	beq.n	800795a <HAL_TIM_ConfigClockSource+0x146>
 80078aa:	d900      	bls.n	80078ae <HAL_TIM_ConfigClockSource+0x9a>
 80078ac:	e06e      	b.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 80078ae:	2b30      	cmp	r3, #48	; 0x30
 80078b0:	d063      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x166>
 80078b2:	d86b      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d060      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x166>
 80078b8:	d868      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x178>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d05d      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x166>
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d05b      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x166>
 80078c2:	e063      	b.n	800798c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078d4:	f000 f96a 	bl	8007bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2277      	movs	r2, #119	; 0x77
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	609a      	str	r2, [r3, #8]
      break;
 80078f0:	e052      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007902:	f000 f953 	bl	8007bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2180      	movs	r1, #128	; 0x80
 8007912:	01c9      	lsls	r1, r1, #7
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]
      break;
 8007918:	e03e      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007926:	001a      	movs	r2, r3
 8007928:	f000 f8c6 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2150      	movs	r1, #80	; 0x50
 8007932:	0018      	movs	r0, r3
 8007934:	f000 f920 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 8007938:	e02e      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007946:	001a      	movs	r2, r3
 8007948:	f000 f8e4 	bl	8007b14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2160      	movs	r1, #96	; 0x60
 8007952:	0018      	movs	r0, r3
 8007954:	f000 f910 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 8007958:	e01e      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	001a      	movs	r2, r3
 8007968:	f000 f8a6 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2140      	movs	r1, #64	; 0x40
 8007972:	0018      	movs	r0, r3
 8007974:	f000 f900 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 8007978:	e00e      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	0019      	movs	r1, r3
 8007984:	0010      	movs	r0, r2
 8007986:	f000 f8f7 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 800798a:	e005      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800798c:	230f      	movs	r3, #15
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	2201      	movs	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
      break;
 8007994:	e000      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007996:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2239      	movs	r2, #57	; 0x39
 800799c:	2101      	movs	r1, #1
 800799e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2238      	movs	r2, #56	; 0x38
 80079a4:	2100      	movs	r1, #0
 80079a6:	5499      	strb	r1, [r3, r2]

  return status;
 80079a8:	230f      	movs	r3, #15
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	781b      	ldrb	r3, [r3, #0]
}
 80079ae:	0018      	movs	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	b004      	add	sp, #16
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	ffff00ff 	.word	0xffff00ff

080079bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b002      	add	sp, #8
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079d4:	46c0      	nop			; (mov r8, r8)
 80079d6:	46bd      	mov	sp, r7
 80079d8:	b002      	add	sp, #8
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079e4:	46c0      	nop			; (mov r8, r8)
 80079e6:	46bd      	mov	sp, r7
 80079e8:	b002      	add	sp, #8
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079f4:	46c0      	nop			; (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b002      	add	sp, #8
 80079fa:	bd80      	pop	{r7, pc}

080079fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	2380      	movs	r3, #128	; 0x80
 8007a10:	05db      	lsls	r3, r3, #23
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0x32>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a23      	ldr	r2, [pc, #140]	; (8007aa8 <TIM_Base_SetConfig+0xac>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0x32>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a22      	ldr	r2, [pc, #136]	; (8007aac <TIM_Base_SetConfig+0xb0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0x32>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <TIM_Base_SetConfig+0xb4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2270      	movs	r2, #112	; 0x70
 8007a32:	4393      	bics	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	2380      	movs	r3, #128	; 0x80
 8007a44:	05db      	lsls	r3, r3, #23
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d00b      	beq.n	8007a62 <TIM_Base_SetConfig+0x66>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <TIM_Base_SetConfig+0xac>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d007      	beq.n	8007a62 <TIM_Base_SetConfig+0x66>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a15      	ldr	r2, [pc, #84]	; (8007aac <TIM_Base_SetConfig+0xb0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d003      	beq.n	8007a62 <TIM_Base_SetConfig+0x66>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <TIM_Base_SetConfig+0xb4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d108      	bne.n	8007a74 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <TIM_Base_SetConfig+0xb8>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2280      	movs	r2, #128	; 0x80
 8007a78:	4393      	bics	r3, r2
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	615a      	str	r2, [r3, #20]
}
 8007aa0:	46c0      	nop			; (mov r8, r8)
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b004      	add	sp, #16
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40000400 	.word	0x40000400
 8007aac:	40010800 	.word	0x40010800
 8007ab0:	40011400 	.word	0x40011400
 8007ab4:	fffffcff 	.word	0xfffffcff

08007ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4393      	bics	r3, r2
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	22f0      	movs	r2, #240	; 0xf0
 8007ae2:	4393      	bics	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	220a      	movs	r2, #10
 8007af4:	4393      	bics	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	621a      	str	r2, [r3, #32]
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b006      	add	sp, #24
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	2210      	movs	r2, #16
 8007b26:	4393      	bics	r3, r2
 8007b28:	001a      	movs	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4a0d      	ldr	r2, [pc, #52]	; (8007b74 <TIM_TI2_ConfigInputStage+0x60>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	031b      	lsls	r3, r3, #12
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	22a0      	movs	r2, #160	; 0xa0
 8007b50:	4393      	bics	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	b006      	add	sp, #24
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	46c0      	nop			; (mov r8, r8)
 8007b74:	ffff0fff 	.word	0xffff0fff

08007b78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2270      	movs	r2, #112	; 0x70
 8007b8c:	4393      	bics	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	2207      	movs	r2, #7
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	609a      	str	r2, [r3, #8]
}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b004      	add	sp, #16
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <TIM_ETR_SetConfig+0x3c>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	021a      	lsls	r2, r3, #8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	46c0      	nop			; (mov r8, r8)
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b006      	add	sp, #24
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	ffff00ff 	.word	0xffff00ff

08007bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2238      	movs	r2, #56	; 0x38
 8007bfa:	5c9b      	ldrb	r3, [r3, r2]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e047      	b.n	8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2238      	movs	r2, #56	; 0x38
 8007c08:	2101      	movs	r1, #1
 8007c0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2239      	movs	r2, #57	; 0x39
 8007c10:	2102      	movs	r1, #2
 8007c12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2270      	movs	r2, #112	; 0x70
 8007c28:	4393      	bics	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	2380      	movs	r3, #128	; 0x80
 8007c44:	05db      	lsls	r3, r3, #23
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d00e      	beq.n	8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a13      	ldr	r2, [pc, #76]	; (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d009      	beq.n	8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a11      	ldr	r2, [pc, #68]	; (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a10      	ldr	r2, [pc, #64]	; (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d10c      	bne.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2280      	movs	r2, #128	; 0x80
 8007c6c:	4393      	bics	r3, r2
 8007c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2239      	movs	r2, #57	; 0x39
 8007c86:	2101      	movs	r1, #1
 8007c88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2238      	movs	r2, #56	; 0x38
 8007c8e:	2100      	movs	r1, #0
 8007c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	0018      	movs	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	b004      	add	sp, #16
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40000400 	.word	0x40000400
 8007ca0:	40010800 	.word	0x40010800
 8007ca4:	40011400 	.word	0x40011400

08007ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e044      	b.n	8007d44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2278      	movs	r2, #120	; 0x78
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f7fb f973 	bl	8002fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2224      	movs	r2, #36	; 0x24
 8007cd6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	438a      	bics	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	0018      	movs	r0, r3
 8007cec:	f000 fc2c 	bl	8008548 <UART_SetConfig>
 8007cf0:	0003      	movs	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e024      	b.n	8007d44 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	0018      	movs	r0, r3
 8007d06:	f000 febd 	bl	8008a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	490d      	ldr	r1, [pc, #52]	; (8007d4c <HAL_UART_Init+0xa4>)
 8007d16:	400a      	ands	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	212a      	movs	r1, #42	; 0x2a
 8007d26:	438a      	bics	r2, r1
 8007d28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2101      	movs	r1, #1
 8007d36:	430a      	orrs	r2, r1
 8007d38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f000 ff55 	bl	8008bec <UART_CheckIdleState>
 8007d42:	0003      	movs	r3, r0
}
 8007d44:	0018      	movs	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b002      	add	sp, #8
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	ffffb7ff 	.word	0xffffb7ff

08007d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	1dbb      	adds	r3, r7, #6
 8007d5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d000      	beq.n	8007d6a <HAL_UART_Transmit+0x1a>
 8007d68:	e08c      	b.n	8007e84 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_UART_Transmit+0x28>
 8007d70:	1dbb      	adds	r3, r7, #6
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e084      	b.n	8007e86 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	2380      	movs	r3, #128	; 0x80
 8007d82:	015b      	lsls	r3, r3, #5
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d109      	bne.n	8007d9c <HAL_UART_Transmit+0x4c>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	4013      	ands	r3, r2
 8007d96:	d001      	beq.n	8007d9c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e074      	b.n	8007e86 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2284      	movs	r2, #132	; 0x84
 8007da0:	2100      	movs	r1, #0
 8007da2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2221      	movs	r2, #33	; 0x21
 8007da8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007daa:	f7fd fb49 	bl	8005440 <HAL_GetTick>
 8007dae:	0003      	movs	r3, r0
 8007db0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	1dba      	adds	r2, r7, #6
 8007db6:	2150      	movs	r1, #80	; 0x50
 8007db8:	8812      	ldrh	r2, [r2, #0]
 8007dba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	1dba      	adds	r2, r7, #6
 8007dc0:	2152      	movs	r1, #82	; 0x52
 8007dc2:	8812      	ldrh	r2, [r2, #0]
 8007dc4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	015b      	lsls	r3, r3, #5
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d108      	bne.n	8007de4 <HAL_UART_Transmit+0x94>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	e003      	b.n	8007dec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dec:	e02f      	b.n	8007e4e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	0013      	movs	r3, r2
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2180      	movs	r1, #128	; 0x80
 8007dfc:	f000 ff9e 	bl	8008d3c <UART_WaitOnFlagUntilTimeout>
 8007e00:	1e03      	subs	r3, r0, #0
 8007e02:	d004      	beq.n	8007e0e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e03b      	b.n	8007e86 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	001a      	movs	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	05d2      	lsls	r2, r2, #23
 8007e20:	0dd2      	lsrs	r2, r2, #23
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	3302      	adds	r3, #2
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	e007      	b.n	8007e3c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	781a      	ldrb	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2252      	movs	r2, #82	; 0x52
 8007e40:	5a9b      	ldrh	r3, [r3, r2]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b299      	uxth	r1, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2252      	movs	r2, #82	; 0x52
 8007e4c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2252      	movs	r2, #82	; 0x52
 8007e52:	5a9b      	ldrh	r3, [r3, r2]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1c9      	bne.n	8007dee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	0013      	movs	r3, r2
 8007e64:	2200      	movs	r2, #0
 8007e66:	2140      	movs	r1, #64	; 0x40
 8007e68:	f000 ff68 	bl	8008d3c <UART_WaitOnFlagUntilTimeout>
 8007e6c:	1e03      	subs	r3, r0, #0
 8007e6e:	d004      	beq.n	8007e7a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e005      	b.n	8007e86 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	e000      	b.n	8007e86 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007e84:	2302      	movs	r3, #2
  }
}
 8007e86:	0018      	movs	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b008      	add	sp, #32
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	1dbb      	adds	r3, r7, #6
 8007e9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2280      	movs	r2, #128	; 0x80
 8007ea2:	589b      	ldr	r3, [r3, r2]
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d14a      	bne.n	8007f3e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_UART_Receive_IT+0x26>
 8007eae:	1dbb      	adds	r3, r7, #6
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e042      	b.n	8007f40 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	2380      	movs	r3, #128	; 0x80
 8007ec0:	015b      	lsls	r3, r3, #5
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d109      	bne.n	8007eda <HAL_UART_Receive_IT+0x4a>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d105      	bne.n	8007eda <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	d001      	beq.n	8007eda <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e032      	b.n	8007f40 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <HAL_UART_Receive_IT+0xb8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d020      	beq.n	8007f2c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	2380      	movs	r3, #128	; 0x80
 8007ef2:	041b      	lsls	r3, r3, #16
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d019      	beq.n	8007f2c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8007efc:	613b      	str	r3, [r7, #16]
  return(result);
 8007efe:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	2301      	movs	r3, #1
 8007f04:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f383 8810 	msr	PRIMASK, r3
}
 8007f0c:	46c0      	nop			; (mov r8, r8)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2180      	movs	r1, #128	; 0x80
 8007f1a:	04c9      	lsls	r1, r1, #19
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f2c:	1dbb      	adds	r3, r7, #6
 8007f2e:	881a      	ldrh	r2, [r3, #0]
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	0018      	movs	r0, r3
 8007f36:	f000 ff6b 	bl	8008e10 <UART_Start_Receive_IT>
 8007f3a:	0003      	movs	r3, r0
 8007f3c:	e000      	b.n	8007f40 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
  }
}
 8007f40:	0018      	movs	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b008      	add	sp, #32
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40004800 	.word	0x40004800

08007f4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f4c:	b590      	push	{r4, r7, lr}
 8007f4e:	b0ab      	sub	sp, #172	; 0xac
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	22a4      	movs	r2, #164	; 0xa4
 8007f5c:	18b9      	adds	r1, r7, r2
 8007f5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	20a0      	movs	r0, #160	; 0xa0
 8007f68:	1839      	adds	r1, r7, r0
 8007f6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	219c      	movs	r1, #156	; 0x9c
 8007f74:	1879      	adds	r1, r7, r1
 8007f76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f78:	0011      	movs	r1, r2
 8007f7a:	18bb      	adds	r3, r7, r2
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a99      	ldr	r2, [pc, #612]	; (80081e4 <HAL_UART_IRQHandler+0x298>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	2298      	movs	r2, #152	; 0x98
 8007f84:	18bc      	adds	r4, r7, r2
 8007f86:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007f88:	18bb      	adds	r3, r7, r2
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d114      	bne.n	8007fba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f90:	187b      	adds	r3, r7, r1
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2220      	movs	r2, #32
 8007f96:	4013      	ands	r3, r2
 8007f98:	d00f      	beq.n	8007fba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f9a:	183b      	adds	r3, r7, r0
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	d00a      	beq.n	8007fba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d100      	bne.n	8007fae <HAL_UART_IRQHandler+0x62>
 8007fac:	e2a0      	b.n	80084f0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	0010      	movs	r0, r2
 8007fb6:	4798      	blx	r3
      }
      return;
 8007fb8:	e29a      	b.n	80084f0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fba:	2398      	movs	r3, #152	; 0x98
 8007fbc:	18fb      	adds	r3, r7, r3
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d100      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x7a>
 8007fc4:	e114      	b.n	80081f0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fc6:	239c      	movs	r3, #156	; 0x9c
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d106      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fd2:	23a0      	movs	r3, #160	; 0xa0
 8007fd4:	18fb      	adds	r3, r7, r3
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a83      	ldr	r2, [pc, #524]	; (80081e8 <HAL_UART_IRQHandler+0x29c>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	d100      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x94>
 8007fde:	e107      	b.n	80081f0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fe0:	23a4      	movs	r3, #164	; 0xa4
 8007fe2:	18fb      	adds	r3, r7, r3
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4013      	ands	r3, r2
 8007fea:	d012      	beq.n	8008012 <HAL_UART_IRQHandler+0xc6>
 8007fec:	23a0      	movs	r3, #160	; 0xa0
 8007fee:	18fb      	adds	r3, r7, r3
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	2380      	movs	r3, #128	; 0x80
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	d00b      	beq.n	8008012 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2201      	movs	r2, #1
 8008000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2284      	movs	r2, #132	; 0x84
 8008006:	589b      	ldr	r3, [r3, r2]
 8008008:	2201      	movs	r2, #1
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2184      	movs	r1, #132	; 0x84
 8008010:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008012:	23a4      	movs	r3, #164	; 0xa4
 8008014:	18fb      	adds	r3, r7, r3
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2202      	movs	r2, #2
 800801a:	4013      	ands	r3, r2
 800801c:	d011      	beq.n	8008042 <HAL_UART_IRQHandler+0xf6>
 800801e:	239c      	movs	r3, #156	; 0x9c
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2201      	movs	r2, #1
 8008026:	4013      	ands	r3, r2
 8008028:	d00b      	beq.n	8008042 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2202      	movs	r2, #2
 8008030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2284      	movs	r2, #132	; 0x84
 8008036:	589b      	ldr	r3, [r3, r2]
 8008038:	2204      	movs	r2, #4
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2184      	movs	r1, #132	; 0x84
 8008040:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008042:	23a4      	movs	r3, #164	; 0xa4
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2204      	movs	r2, #4
 800804a:	4013      	ands	r3, r2
 800804c:	d011      	beq.n	8008072 <HAL_UART_IRQHandler+0x126>
 800804e:	239c      	movs	r3, #156	; 0x9c
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2201      	movs	r2, #1
 8008056:	4013      	ands	r3, r2
 8008058:	d00b      	beq.n	8008072 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2204      	movs	r2, #4
 8008060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2284      	movs	r2, #132	; 0x84
 8008066:	589b      	ldr	r3, [r3, r2]
 8008068:	2202      	movs	r2, #2
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2184      	movs	r1, #132	; 0x84
 8008070:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008072:	23a4      	movs	r3, #164	; 0xa4
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2208      	movs	r2, #8
 800807a:	4013      	ands	r3, r2
 800807c:	d017      	beq.n	80080ae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800807e:	23a0      	movs	r3, #160	; 0xa0
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2220      	movs	r2, #32
 8008086:	4013      	ands	r3, r2
 8008088:	d105      	bne.n	8008096 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800808a:	239c      	movs	r3, #156	; 0x9c
 800808c:	18fb      	adds	r3, r7, r3
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2201      	movs	r2, #1
 8008092:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008094:	d00b      	beq.n	80080ae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2208      	movs	r2, #8
 800809c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2284      	movs	r2, #132	; 0x84
 80080a2:	589b      	ldr	r3, [r3, r2]
 80080a4:	2208      	movs	r2, #8
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2184      	movs	r1, #132	; 0x84
 80080ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080ae:	23a4      	movs	r3, #164	; 0xa4
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	2380      	movs	r3, #128	; 0x80
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	4013      	ands	r3, r2
 80080ba:	d013      	beq.n	80080e4 <HAL_UART_IRQHandler+0x198>
 80080bc:	23a0      	movs	r3, #160	; 0xa0
 80080be:	18fb      	adds	r3, r7, r3
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	2380      	movs	r3, #128	; 0x80
 80080c4:	04db      	lsls	r3, r3, #19
 80080c6:	4013      	ands	r3, r2
 80080c8:	d00c      	beq.n	80080e4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2280      	movs	r2, #128	; 0x80
 80080d0:	0112      	lsls	r2, r2, #4
 80080d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2284      	movs	r2, #132	; 0x84
 80080d8:	589b      	ldr	r3, [r3, r2]
 80080da:	2220      	movs	r2, #32
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2184      	movs	r1, #132	; 0x84
 80080e2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2284      	movs	r2, #132	; 0x84
 80080e8:	589b      	ldr	r3, [r3, r2]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d100      	bne.n	80080f0 <HAL_UART_IRQHandler+0x1a4>
 80080ee:	e201      	b.n	80084f4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080f0:	23a4      	movs	r3, #164	; 0xa4
 80080f2:	18fb      	adds	r3, r7, r3
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2220      	movs	r2, #32
 80080f8:	4013      	ands	r3, r2
 80080fa:	d00e      	beq.n	800811a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080fc:	23a0      	movs	r3, #160	; 0xa0
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2220      	movs	r2, #32
 8008104:	4013      	ands	r3, r2
 8008106:	d008      	beq.n	800811a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800810c:	2b00      	cmp	r3, #0
 800810e:	d004      	beq.n	800811a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	0010      	movs	r0, r2
 8008118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2284      	movs	r2, #132	; 0x84
 800811e:	589b      	ldr	r3, [r3, r2]
 8008120:	2194      	movs	r1, #148	; 0x94
 8008122:	187a      	adds	r2, r7, r1
 8008124:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2240      	movs	r2, #64	; 0x40
 800812e:	4013      	ands	r3, r2
 8008130:	2b40      	cmp	r3, #64	; 0x40
 8008132:	d004      	beq.n	800813e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008134:	187b      	adds	r3, r7, r1
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2228      	movs	r2, #40	; 0x28
 800813a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800813c:	d047      	beq.n	80081ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0018      	movs	r0, r3
 8008142:	f000 ff2f 	bl	8008fa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2240      	movs	r2, #64	; 0x40
 800814e:	4013      	ands	r3, r2
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d137      	bne.n	80081c4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008154:	f3ef 8310 	mrs	r3, PRIMASK
 8008158:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800815a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800815c:	2090      	movs	r0, #144	; 0x90
 800815e:	183a      	adds	r2, r7, r0
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	2301      	movs	r3, #1
 8008164:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008168:	f383 8810 	msr	PRIMASK, r3
}
 800816c:	46c0      	nop			; (mov r8, r8)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2140      	movs	r1, #64	; 0x40
 800817a:	438a      	bics	r2, r1
 800817c:	609a      	str	r2, [r3, #8]
 800817e:	183b      	adds	r3, r7, r0
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008186:	f383 8810 	msr	PRIMASK, r3
}
 800818a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008190:	2b00      	cmp	r3, #0
 8008192:	d012      	beq.n	80081ba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008198:	4a14      	ldr	r2, [pc, #80]	; (80081ec <HAL_UART_IRQHandler+0x2a0>)
 800819a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a0:	0018      	movs	r0, r3
 80081a2:	f7fd fa99 	bl	80056d8 <HAL_DMA_Abort_IT>
 80081a6:	1e03      	subs	r3, r0, #0
 80081a8:	d01a      	beq.n	80081e0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b4:	0018      	movs	r0, r3
 80081b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b8:	e012      	b.n	80081e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	0018      	movs	r0, r3
 80081be:	f000 f9af 	bl	8008520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c2:	e00d      	b.n	80081e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	0018      	movs	r0, r3
 80081c8:	f000 f9aa 	bl	8008520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	e008      	b.n	80081e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	0018      	movs	r0, r3
 80081d2:	f000 f9a5 	bl	8008520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2284      	movs	r2, #132	; 0x84
 80081da:	2100      	movs	r1, #0
 80081dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80081de:	e189      	b.n	80084f4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e0:	46c0      	nop			; (mov r8, r8)
    return;
 80081e2:	e187      	b.n	80084f4 <HAL_UART_IRQHandler+0x5a8>
 80081e4:	0000080f 	.word	0x0000080f
 80081e8:	04000120 	.word	0x04000120
 80081ec:	0800906d 	.word	0x0800906d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d000      	beq.n	80081fa <HAL_UART_IRQHandler+0x2ae>
 80081f8:	e13b      	b.n	8008472 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081fa:	23a4      	movs	r3, #164	; 0xa4
 80081fc:	18fb      	adds	r3, r7, r3
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2210      	movs	r2, #16
 8008202:	4013      	ands	r3, r2
 8008204:	d100      	bne.n	8008208 <HAL_UART_IRQHandler+0x2bc>
 8008206:	e134      	b.n	8008472 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008208:	23a0      	movs	r3, #160	; 0xa0
 800820a:	18fb      	adds	r3, r7, r3
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2210      	movs	r2, #16
 8008210:	4013      	ands	r3, r2
 8008212:	d100      	bne.n	8008216 <HAL_UART_IRQHandler+0x2ca>
 8008214:	e12d      	b.n	8008472 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2210      	movs	r2, #16
 800821c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2240      	movs	r2, #64	; 0x40
 8008226:	4013      	ands	r3, r2
 8008228:	2b40      	cmp	r3, #64	; 0x40
 800822a:	d000      	beq.n	800822e <HAL_UART_IRQHandler+0x2e2>
 800822c:	e0a1      	b.n	8008372 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	217e      	movs	r1, #126	; 0x7e
 8008238:	187b      	adds	r3, r7, r1
 800823a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800823c:	187b      	adds	r3, r7, r1
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d100      	bne.n	8008246 <HAL_UART_IRQHandler+0x2fa>
 8008244:	e158      	b.n	80084f8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2258      	movs	r2, #88	; 0x58
 800824a:	5a9b      	ldrh	r3, [r3, r2]
 800824c:	187a      	adds	r2, r7, r1
 800824e:	8812      	ldrh	r2, [r2, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d300      	bcc.n	8008256 <HAL_UART_IRQHandler+0x30a>
 8008254:	e150      	b.n	80084f8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	187a      	adds	r2, r7, r1
 800825a:	215a      	movs	r1, #90	; 0x5a
 800825c:	8812      	ldrh	r2, [r2, #0]
 800825e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2220      	movs	r2, #32
 800826a:	4013      	ands	r3, r2
 800826c:	d16f      	bne.n	800834e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800826e:	f3ef 8310 	mrs	r3, PRIMASK
 8008272:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008276:	67bb      	str	r3, [r7, #120]	; 0x78
 8008278:	2301      	movs	r3, #1
 800827a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	f383 8810 	msr	PRIMASK, r3
}
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	499e      	ldr	r1, [pc, #632]	; (8008508 <HAL_UART_IRQHandler+0x5bc>)
 8008290:	400a      	ands	r2, r1
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008296:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	f383 8810 	msr	PRIMASK, r3
}
 800829e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a0:	f3ef 8310 	mrs	r3, PRIMASK
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80082a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a8:	677b      	str	r3, [r7, #116]	; 0x74
 80082aa:	2301      	movs	r3, #1
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b0:	f383 8810 	msr	PRIMASK, r3
}
 80082b4:	46c0      	nop			; (mov r8, r8)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2101      	movs	r1, #1
 80082c2:	438a      	bics	r2, r1
 80082c4:	609a      	str	r2, [r3, #8]
 80082c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082c8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082cc:	f383 8810 	msr	PRIMASK, r3
}
 80082d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d2:	f3ef 8310 	mrs	r3, PRIMASK
 80082d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80082d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082da:	673b      	str	r3, [r7, #112]	; 0x70
 80082dc:	2301      	movs	r3, #1
 80082de:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e2:	f383 8810 	msr	PRIMASK, r3
}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2140      	movs	r1, #64	; 0x40
 80082f4:	438a      	bics	r2, r1
 80082f6:	609a      	str	r2, [r3, #8]
 80082f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082fa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082fe:	f383 8810 	msr	PRIMASK, r3
}
 8008302:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2280      	movs	r2, #128	; 0x80
 8008308:	2120      	movs	r1, #32
 800830a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008312:	f3ef 8310 	mrs	r3, PRIMASK
 8008316:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008318:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800831a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800831c:	2301      	movs	r3, #1
 800831e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008322:	f383 8810 	msr	PRIMASK, r3
}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2110      	movs	r1, #16
 8008334:	438a      	bics	r2, r1
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800833e:	f383 8810 	msr	PRIMASK, r3
}
 8008342:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008348:	0018      	movs	r0, r3
 800834a:	f7fd f985 	bl	8005658 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2202      	movs	r2, #2
 8008352:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2258      	movs	r2, #88	; 0x58
 8008358:	5a9a      	ldrh	r2, [r3, r2]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	215a      	movs	r1, #90	; 0x5a
 800835e:	5a5b      	ldrh	r3, [r3, r1]
 8008360:	b29b      	uxth	r3, r3
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	b29a      	uxth	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	0011      	movs	r1, r2
 800836a:	0018      	movs	r0, r3
 800836c:	f000 f8e0 	bl	8008530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008370:	e0c2      	b.n	80084f8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2258      	movs	r2, #88	; 0x58
 8008376:	5a99      	ldrh	r1, [r3, r2]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	225a      	movs	r2, #90	; 0x5a
 800837c:	5a9b      	ldrh	r3, [r3, r2]
 800837e:	b29a      	uxth	r2, r3
 8008380:	208e      	movs	r0, #142	; 0x8e
 8008382:	183b      	adds	r3, r7, r0
 8008384:	1a8a      	subs	r2, r1, r2
 8008386:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	225a      	movs	r2, #90	; 0x5a
 800838c:	5a9b      	ldrh	r3, [r3, r2]
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d100      	bne.n	8008396 <HAL_UART_IRQHandler+0x44a>
 8008394:	e0b2      	b.n	80084fc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008396:	183b      	adds	r3, r7, r0
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d100      	bne.n	80083a0 <HAL_UART_IRQHandler+0x454>
 800839e:	e0ad      	b.n	80084fc <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a0:	f3ef 8310 	mrs	r3, PRIMASK
 80083a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80083a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083a8:	2488      	movs	r4, #136	; 0x88
 80083aa:	193a      	adds	r2, r7, r4
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	2301      	movs	r3, #1
 80083b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f383 8810 	msr	PRIMASK, r3
}
 80083b8:	46c0      	nop			; (mov r8, r8)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4951      	ldr	r1, [pc, #324]	; (800850c <HAL_UART_IRQHandler+0x5c0>)
 80083c6:	400a      	ands	r2, r1
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	193b      	adds	r3, r7, r4
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f383 8810 	msr	PRIMASK, r3
}
 80083d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d8:	f3ef 8310 	mrs	r3, PRIMASK
 80083dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80083de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e0:	2484      	movs	r4, #132	; 0x84
 80083e2:	193a      	adds	r2, r7, r4
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	2301      	movs	r3, #1
 80083e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	f383 8810 	msr	PRIMASK, r3
}
 80083f0:	46c0      	nop			; (mov r8, r8)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2101      	movs	r1, #1
 80083fe:	438a      	bics	r2, r1
 8008400:	609a      	str	r2, [r3, #8]
 8008402:	193b      	adds	r3, r7, r4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	f383 8810 	msr	PRIMASK, r3
}
 800840e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2280      	movs	r2, #128	; 0x80
 8008414:	2120      	movs	r1, #32
 8008416:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008424:	f3ef 8310 	mrs	r3, PRIMASK
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842c:	2480      	movs	r4, #128	; 0x80
 800842e:	193a      	adds	r2, r7, r4
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	2301      	movs	r3, #1
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	f383 8810 	msr	PRIMASK, r3
}
 800843c:	46c0      	nop			; (mov r8, r8)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2110      	movs	r1, #16
 800844a:	438a      	bics	r2, r1
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	193b      	adds	r3, r7, r4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	f383 8810 	msr	PRIMASK, r3
}
 800845a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008462:	183b      	adds	r3, r7, r0
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	0011      	movs	r1, r2
 800846a:	0018      	movs	r0, r3
 800846c:	f000 f860 	bl	8008530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008470:	e044      	b.n	80084fc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008472:	23a4      	movs	r3, #164	; 0xa4
 8008474:	18fb      	adds	r3, r7, r3
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	2380      	movs	r3, #128	; 0x80
 800847a:	035b      	lsls	r3, r3, #13
 800847c:	4013      	ands	r3, r2
 800847e:	d010      	beq.n	80084a2 <HAL_UART_IRQHandler+0x556>
 8008480:	239c      	movs	r3, #156	; 0x9c
 8008482:	18fb      	adds	r3, r7, r3
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	2380      	movs	r3, #128	; 0x80
 8008488:	03db      	lsls	r3, r3, #15
 800848a:	4013      	ands	r3, r2
 800848c:	d009      	beq.n	80084a2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2280      	movs	r2, #128	; 0x80
 8008494:	0352      	lsls	r2, r2, #13
 8008496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0018      	movs	r0, r3
 800849c:	f000 ffec 	bl	8009478 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084a0:	e02f      	b.n	8008502 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084a2:	23a4      	movs	r3, #164	; 0xa4
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2280      	movs	r2, #128	; 0x80
 80084aa:	4013      	ands	r3, r2
 80084ac:	d00f      	beq.n	80084ce <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084ae:	23a0      	movs	r3, #160	; 0xa0
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2280      	movs	r2, #128	; 0x80
 80084b6:	4013      	ands	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01e      	beq.n	8008500 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	0010      	movs	r0, r2
 80084ca:	4798      	blx	r3
    }
    return;
 80084cc:	e018      	b.n	8008500 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084ce:	23a4      	movs	r3, #164	; 0xa4
 80084d0:	18fb      	adds	r3, r7, r3
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2240      	movs	r2, #64	; 0x40
 80084d6:	4013      	ands	r3, r2
 80084d8:	d013      	beq.n	8008502 <HAL_UART_IRQHandler+0x5b6>
 80084da:	23a0      	movs	r3, #160	; 0xa0
 80084dc:	18fb      	adds	r3, r7, r3
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2240      	movs	r2, #64	; 0x40
 80084e2:	4013      	ands	r3, r2
 80084e4:	d00d      	beq.n	8008502 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0018      	movs	r0, r3
 80084ea:	f000 fdd6 	bl	800909a <UART_EndTransmit_IT>
    return;
 80084ee:	e008      	b.n	8008502 <HAL_UART_IRQHandler+0x5b6>
      return;
 80084f0:	46c0      	nop			; (mov r8, r8)
 80084f2:	e006      	b.n	8008502 <HAL_UART_IRQHandler+0x5b6>
    return;
 80084f4:	46c0      	nop			; (mov r8, r8)
 80084f6:	e004      	b.n	8008502 <HAL_UART_IRQHandler+0x5b6>
      return;
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	e002      	b.n	8008502 <HAL_UART_IRQHandler+0x5b6>
      return;
 80084fc:	46c0      	nop			; (mov r8, r8)
 80084fe:	e000      	b.n	8008502 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008500:	46c0      	nop			; (mov r8, r8)
  }

}
 8008502:	46bd      	mov	sp, r7
 8008504:	b02b      	add	sp, #172	; 0xac
 8008506:	bd90      	pop	{r4, r7, pc}
 8008508:	fffffeff 	.word	0xfffffeff
 800850c:	fffffedf 	.word	0xfffffedf

08008510 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008518:	46c0      	nop			; (mov r8, r8)
 800851a:	46bd      	mov	sp, r7
 800851c:	b002      	add	sp, #8
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008528:	46c0      	nop			; (mov r8, r8)
 800852a:	46bd      	mov	sp, r7
 800852c:	b002      	add	sp, #8
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	000a      	movs	r2, r1
 800853a:	1cbb      	adds	r3, r7, #2
 800853c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	46bd      	mov	sp, r7
 8008542:	b002      	add	sp, #8
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008548:	b5b0      	push	{r4, r5, r7, lr}
 800854a:	b08e      	sub	sp, #56	; 0x38
 800854c:	af00      	add	r7, sp, #0
 800854e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008550:	231a      	movs	r3, #26
 8008552:	2218      	movs	r2, #24
 8008554:	189b      	adds	r3, r3, r2
 8008556:	19db      	adds	r3, r3, r7
 8008558:	2200      	movs	r2, #0
 800855a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	431a      	orrs	r2, r3
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	431a      	orrs	r2, r3
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	4313      	orrs	r3, r2
 8008572:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4ac3      	ldr	r2, [pc, #780]	; (8008888 <UART_SetConfig+0x340>)
 800857c:	4013      	ands	r3, r2
 800857e:	0019      	movs	r1, r3
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008586:	430a      	orrs	r2, r1
 8008588:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4abe      	ldr	r2, [pc, #760]	; (800888c <UART_SetConfig+0x344>)
 8008592:	4013      	ands	r3, r2
 8008594:	0019      	movs	r1, r3
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4ab8      	ldr	r2, [pc, #736]	; (8008890 <UART_SetConfig+0x348>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d004      	beq.n	80085bc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085b8:	4313      	orrs	r3, r2
 80085ba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	4ab4      	ldr	r2, [pc, #720]	; (8008894 <UART_SetConfig+0x34c>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	0019      	movs	r1, r3
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ce:	430a      	orrs	r2, r1
 80085d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4ab0      	ldr	r2, [pc, #704]	; (8008898 <UART_SetConfig+0x350>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d131      	bne.n	8008640 <UART_SetConfig+0xf8>
 80085dc:	4baf      	ldr	r3, [pc, #700]	; (800889c <UART_SetConfig+0x354>)
 80085de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e0:	2203      	movs	r2, #3
 80085e2:	4013      	ands	r3, r2
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d01d      	beq.n	8008624 <UART_SetConfig+0xdc>
 80085e8:	d823      	bhi.n	8008632 <UART_SetConfig+0xea>
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d00c      	beq.n	8008608 <UART_SetConfig+0xc0>
 80085ee:	d820      	bhi.n	8008632 <UART_SetConfig+0xea>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <UART_SetConfig+0xb2>
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d00e      	beq.n	8008616 <UART_SetConfig+0xce>
 80085f8:	e01b      	b.n	8008632 <UART_SetConfig+0xea>
 80085fa:	231b      	movs	r3, #27
 80085fc:	2218      	movs	r2, #24
 80085fe:	189b      	adds	r3, r3, r2
 8008600:	19db      	adds	r3, r3, r7
 8008602:	2201      	movs	r2, #1
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e0b4      	b.n	8008772 <UART_SetConfig+0x22a>
 8008608:	231b      	movs	r3, #27
 800860a:	2218      	movs	r2, #24
 800860c:	189b      	adds	r3, r3, r2
 800860e:	19db      	adds	r3, r3, r7
 8008610:	2202      	movs	r2, #2
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	e0ad      	b.n	8008772 <UART_SetConfig+0x22a>
 8008616:	231b      	movs	r3, #27
 8008618:	2218      	movs	r2, #24
 800861a:	189b      	adds	r3, r3, r2
 800861c:	19db      	adds	r3, r3, r7
 800861e:	2204      	movs	r2, #4
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	e0a6      	b.n	8008772 <UART_SetConfig+0x22a>
 8008624:	231b      	movs	r3, #27
 8008626:	2218      	movs	r2, #24
 8008628:	189b      	adds	r3, r3, r2
 800862a:	19db      	adds	r3, r3, r7
 800862c:	2208      	movs	r2, #8
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	e09f      	b.n	8008772 <UART_SetConfig+0x22a>
 8008632:	231b      	movs	r3, #27
 8008634:	2218      	movs	r2, #24
 8008636:	189b      	adds	r3, r3, r2
 8008638:	19db      	adds	r3, r3, r7
 800863a:	2210      	movs	r2, #16
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	e098      	b.n	8008772 <UART_SetConfig+0x22a>
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a96      	ldr	r2, [pc, #600]	; (80088a0 <UART_SetConfig+0x358>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d131      	bne.n	80086ae <UART_SetConfig+0x166>
 800864a:	4b94      	ldr	r3, [pc, #592]	; (800889c <UART_SetConfig+0x354>)
 800864c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864e:	220c      	movs	r2, #12
 8008650:	4013      	ands	r3, r2
 8008652:	2b0c      	cmp	r3, #12
 8008654:	d01d      	beq.n	8008692 <UART_SetConfig+0x14a>
 8008656:	d823      	bhi.n	80086a0 <UART_SetConfig+0x158>
 8008658:	2b08      	cmp	r3, #8
 800865a:	d00c      	beq.n	8008676 <UART_SetConfig+0x12e>
 800865c:	d820      	bhi.n	80086a0 <UART_SetConfig+0x158>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <UART_SetConfig+0x120>
 8008662:	2b04      	cmp	r3, #4
 8008664:	d00e      	beq.n	8008684 <UART_SetConfig+0x13c>
 8008666:	e01b      	b.n	80086a0 <UART_SetConfig+0x158>
 8008668:	231b      	movs	r3, #27
 800866a:	2218      	movs	r2, #24
 800866c:	189b      	adds	r3, r3, r2
 800866e:	19db      	adds	r3, r3, r7
 8008670:	2200      	movs	r2, #0
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	e07d      	b.n	8008772 <UART_SetConfig+0x22a>
 8008676:	231b      	movs	r3, #27
 8008678:	2218      	movs	r2, #24
 800867a:	189b      	adds	r3, r3, r2
 800867c:	19db      	adds	r3, r3, r7
 800867e:	2202      	movs	r2, #2
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	e076      	b.n	8008772 <UART_SetConfig+0x22a>
 8008684:	231b      	movs	r3, #27
 8008686:	2218      	movs	r2, #24
 8008688:	189b      	adds	r3, r3, r2
 800868a:	19db      	adds	r3, r3, r7
 800868c:	2204      	movs	r2, #4
 800868e:	701a      	strb	r2, [r3, #0]
 8008690:	e06f      	b.n	8008772 <UART_SetConfig+0x22a>
 8008692:	231b      	movs	r3, #27
 8008694:	2218      	movs	r2, #24
 8008696:	189b      	adds	r3, r3, r2
 8008698:	19db      	adds	r3, r3, r7
 800869a:	2208      	movs	r2, #8
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	e068      	b.n	8008772 <UART_SetConfig+0x22a>
 80086a0:	231b      	movs	r3, #27
 80086a2:	2218      	movs	r2, #24
 80086a4:	189b      	adds	r3, r3, r2
 80086a6:	19db      	adds	r3, r3, r7
 80086a8:	2210      	movs	r2, #16
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	e061      	b.n	8008772 <UART_SetConfig+0x22a>
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a7c      	ldr	r2, [pc, #496]	; (80088a4 <UART_SetConfig+0x35c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d106      	bne.n	80086c6 <UART_SetConfig+0x17e>
 80086b8:	231b      	movs	r3, #27
 80086ba:	2218      	movs	r2, #24
 80086bc:	189b      	adds	r3, r3, r2
 80086be:	19db      	adds	r3, r3, r7
 80086c0:	2200      	movs	r2, #0
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	e055      	b.n	8008772 <UART_SetConfig+0x22a>
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a77      	ldr	r2, [pc, #476]	; (80088a8 <UART_SetConfig+0x360>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d106      	bne.n	80086de <UART_SetConfig+0x196>
 80086d0:	231b      	movs	r3, #27
 80086d2:	2218      	movs	r2, #24
 80086d4:	189b      	adds	r3, r3, r2
 80086d6:	19db      	adds	r3, r3, r7
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	e049      	b.n	8008772 <UART_SetConfig+0x22a>
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a6b      	ldr	r2, [pc, #428]	; (8008890 <UART_SetConfig+0x348>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d13e      	bne.n	8008766 <UART_SetConfig+0x21e>
 80086e8:	4b6c      	ldr	r3, [pc, #432]	; (800889c <UART_SetConfig+0x354>)
 80086ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086ec:	23c0      	movs	r3, #192	; 0xc0
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	4013      	ands	r3, r2
 80086f2:	22c0      	movs	r2, #192	; 0xc0
 80086f4:	0112      	lsls	r2, r2, #4
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d027      	beq.n	800874a <UART_SetConfig+0x202>
 80086fa:	22c0      	movs	r2, #192	; 0xc0
 80086fc:	0112      	lsls	r2, r2, #4
 80086fe:	4293      	cmp	r3, r2
 8008700:	d82a      	bhi.n	8008758 <UART_SetConfig+0x210>
 8008702:	2280      	movs	r2, #128	; 0x80
 8008704:	0112      	lsls	r2, r2, #4
 8008706:	4293      	cmp	r3, r2
 8008708:	d011      	beq.n	800872e <UART_SetConfig+0x1e6>
 800870a:	2280      	movs	r2, #128	; 0x80
 800870c:	0112      	lsls	r2, r2, #4
 800870e:	4293      	cmp	r3, r2
 8008710:	d822      	bhi.n	8008758 <UART_SetConfig+0x210>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d004      	beq.n	8008720 <UART_SetConfig+0x1d8>
 8008716:	2280      	movs	r2, #128	; 0x80
 8008718:	00d2      	lsls	r2, r2, #3
 800871a:	4293      	cmp	r3, r2
 800871c:	d00e      	beq.n	800873c <UART_SetConfig+0x1f4>
 800871e:	e01b      	b.n	8008758 <UART_SetConfig+0x210>
 8008720:	231b      	movs	r3, #27
 8008722:	2218      	movs	r2, #24
 8008724:	189b      	adds	r3, r3, r2
 8008726:	19db      	adds	r3, r3, r7
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	e021      	b.n	8008772 <UART_SetConfig+0x22a>
 800872e:	231b      	movs	r3, #27
 8008730:	2218      	movs	r2, #24
 8008732:	189b      	adds	r3, r3, r2
 8008734:	19db      	adds	r3, r3, r7
 8008736:	2202      	movs	r2, #2
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	e01a      	b.n	8008772 <UART_SetConfig+0x22a>
 800873c:	231b      	movs	r3, #27
 800873e:	2218      	movs	r2, #24
 8008740:	189b      	adds	r3, r3, r2
 8008742:	19db      	adds	r3, r3, r7
 8008744:	2204      	movs	r2, #4
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	e013      	b.n	8008772 <UART_SetConfig+0x22a>
 800874a:	231b      	movs	r3, #27
 800874c:	2218      	movs	r2, #24
 800874e:	189b      	adds	r3, r3, r2
 8008750:	19db      	adds	r3, r3, r7
 8008752:	2208      	movs	r2, #8
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e00c      	b.n	8008772 <UART_SetConfig+0x22a>
 8008758:	231b      	movs	r3, #27
 800875a:	2218      	movs	r2, #24
 800875c:	189b      	adds	r3, r3, r2
 800875e:	19db      	adds	r3, r3, r7
 8008760:	2210      	movs	r2, #16
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	e005      	b.n	8008772 <UART_SetConfig+0x22a>
 8008766:	231b      	movs	r3, #27
 8008768:	2218      	movs	r2, #24
 800876a:	189b      	adds	r3, r3, r2
 800876c:	19db      	adds	r3, r3, r7
 800876e:	2210      	movs	r2, #16
 8008770:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a46      	ldr	r2, [pc, #280]	; (8008890 <UART_SetConfig+0x348>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d000      	beq.n	800877e <UART_SetConfig+0x236>
 800877c:	e09a      	b.n	80088b4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800877e:	231b      	movs	r3, #27
 8008780:	2218      	movs	r2, #24
 8008782:	189b      	adds	r3, r3, r2
 8008784:	19db      	adds	r3, r3, r7
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b08      	cmp	r3, #8
 800878a:	d01d      	beq.n	80087c8 <UART_SetConfig+0x280>
 800878c:	dc20      	bgt.n	80087d0 <UART_SetConfig+0x288>
 800878e:	2b04      	cmp	r3, #4
 8008790:	d015      	beq.n	80087be <UART_SetConfig+0x276>
 8008792:	dc1d      	bgt.n	80087d0 <UART_SetConfig+0x288>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <UART_SetConfig+0x256>
 8008798:	2b02      	cmp	r3, #2
 800879a:	d005      	beq.n	80087a8 <UART_SetConfig+0x260>
 800879c:	e018      	b.n	80087d0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800879e:	f7fd ff67 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 80087a2:	0003      	movs	r3, r0
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087a6:	e01c      	b.n	80087e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a8:	4b3c      	ldr	r3, [pc, #240]	; (800889c <UART_SetConfig+0x354>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2210      	movs	r2, #16
 80087ae:	4013      	ands	r3, r2
 80087b0:	d002      	beq.n	80087b8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80087b2:	4b3e      	ldr	r3, [pc, #248]	; (80088ac <UART_SetConfig+0x364>)
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087b6:	e014      	b.n	80087e2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80087b8:	4b3d      	ldr	r3, [pc, #244]	; (80088b0 <UART_SetConfig+0x368>)
 80087ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087bc:	e011      	b.n	80087e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087be:	f7fd fea7 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 80087c2:	0003      	movs	r3, r0
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087c6:	e00c      	b.n	80087e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c8:	2380      	movs	r3, #128	; 0x80
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087ce:	e008      	b.n	80087e2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80087d4:	231a      	movs	r3, #26
 80087d6:	2218      	movs	r2, #24
 80087d8:	189b      	adds	r3, r3, r2
 80087da:	19db      	adds	r3, r3, r7
 80087dc:	2201      	movs	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]
        break;
 80087e0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d100      	bne.n	80087ea <UART_SetConfig+0x2a2>
 80087e8:	e133      	b.n	8008a52 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	0013      	movs	r3, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	189b      	adds	r3, r3, r2
 80087f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d305      	bcc.n	8008806 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008802:	429a      	cmp	r2, r3
 8008804:	d906      	bls.n	8008814 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8008806:	231a      	movs	r3, #26
 8008808:	2218      	movs	r2, #24
 800880a:	189b      	adds	r3, r3, r2
 800880c:	19db      	adds	r3, r3, r7
 800880e:	2201      	movs	r2, #1
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	e11e      	b.n	8008a52 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	2300      	movs	r3, #0
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	6939      	ldr	r1, [r7, #16]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	000b      	movs	r3, r1
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	0010      	movs	r0, r2
 8008826:	0205      	lsls	r5, r0, #8
 8008828:	431d      	orrs	r5, r3
 800882a:	000b      	movs	r3, r1
 800882c:	021c      	lsls	r4, r3, #8
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	085b      	lsrs	r3, r3, #1
 8008834:	60bb      	str	r3, [r7, #8]
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	68b8      	ldr	r0, [r7, #8]
 800883c:	68f9      	ldr	r1, [r7, #12]
 800883e:	1900      	adds	r0, r0, r4
 8008840:	4169      	adcs	r1, r5
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	2300      	movs	r3, #0
 800884a:	607b      	str	r3, [r7, #4]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f7f7 fe34 	bl	80004bc <__aeabi_uldivmod>
 8008854:	0002      	movs	r2, r0
 8008856:	000b      	movs	r3, r1
 8008858:	0013      	movs	r3, r2
 800885a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800885c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800885e:	23c0      	movs	r3, #192	; 0xc0
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	429a      	cmp	r2, r3
 8008864:	d309      	bcc.n	800887a <UART_SetConfig+0x332>
 8008866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008868:	2380      	movs	r3, #128	; 0x80
 800886a:	035b      	lsls	r3, r3, #13
 800886c:	429a      	cmp	r2, r3
 800886e:	d204      	bcs.n	800887a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008876:	60da      	str	r2, [r3, #12]
 8008878:	e0eb      	b.n	8008a52 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800887a:	231a      	movs	r3, #26
 800887c:	2218      	movs	r2, #24
 800887e:	189b      	adds	r3, r3, r2
 8008880:	19db      	adds	r3, r3, r7
 8008882:	2201      	movs	r2, #1
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e0e4      	b.n	8008a52 <UART_SetConfig+0x50a>
 8008888:	efff69f3 	.word	0xefff69f3
 800888c:	ffffcfff 	.word	0xffffcfff
 8008890:	40004800 	.word	0x40004800
 8008894:	fffff4ff 	.word	0xfffff4ff
 8008898:	40013800 	.word	0x40013800
 800889c:	40021000 	.word	0x40021000
 80088a0:	40004400 	.word	0x40004400
 80088a4:	40004c00 	.word	0x40004c00
 80088a8:	40005000 	.word	0x40005000
 80088ac:	003d0900 	.word	0x003d0900
 80088b0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	2380      	movs	r3, #128	; 0x80
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	429a      	cmp	r2, r3
 80088be:	d000      	beq.n	80088c2 <UART_SetConfig+0x37a>
 80088c0:	e070      	b.n	80089a4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80088c2:	231b      	movs	r3, #27
 80088c4:	2218      	movs	r2, #24
 80088c6:	189b      	adds	r3, r3, r2
 80088c8:	19db      	adds	r3, r3, r7
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d822      	bhi.n	8008916 <UART_SetConfig+0x3ce>
 80088d0:	009a      	lsls	r2, r3, #2
 80088d2:	4b67      	ldr	r3, [pc, #412]	; (8008a70 <UART_SetConfig+0x528>)
 80088d4:	18d3      	adds	r3, r2, r3
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088da:	f7fd fec9 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 80088de:	0003      	movs	r3, r0
 80088e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088e2:	e021      	b.n	8008928 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088e4:	f7fd feda 	bl	800669c <HAL_RCC_GetPCLK2Freq>
 80088e8:	0003      	movs	r3, r0
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088ec:	e01c      	b.n	8008928 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ee:	4b61      	ldr	r3, [pc, #388]	; (8008a74 <UART_SetConfig+0x52c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2210      	movs	r2, #16
 80088f4:	4013      	ands	r3, r2
 80088f6:	d002      	beq.n	80088fe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80088f8:	4b5f      	ldr	r3, [pc, #380]	; (8008a78 <UART_SetConfig+0x530>)
 80088fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088fc:	e014      	b.n	8008928 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80088fe:	4b5f      	ldr	r3, [pc, #380]	; (8008a7c <UART_SetConfig+0x534>)
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008902:	e011      	b.n	8008928 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008904:	f7fd fe04 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 8008908:	0003      	movs	r3, r0
 800890a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800890c:	e00c      	b.n	8008928 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800890e:	2380      	movs	r3, #128	; 0x80
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008914:	e008      	b.n	8008928 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800891a:	231a      	movs	r3, #26
 800891c:	2218      	movs	r2, #24
 800891e:	189b      	adds	r3, r3, r2
 8008920:	19db      	adds	r3, r3, r7
 8008922:	2201      	movs	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
        break;
 8008926:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d100      	bne.n	8008930 <UART_SetConfig+0x3e8>
 800892e:	e090      	b.n	8008a52 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	005a      	lsls	r2, r3, #1
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	18d2      	adds	r2, r2, r3
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	0019      	movs	r1, r3
 8008942:	0010      	movs	r0, r2
 8008944:	f7f7 fc06 	bl	8000154 <__udivsi3>
 8008948:	0003      	movs	r3, r0
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	2b0f      	cmp	r3, #15
 8008950:	d921      	bls.n	8008996 <UART_SetConfig+0x44e>
 8008952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008954:	2380      	movs	r3, #128	; 0x80
 8008956:	025b      	lsls	r3, r3, #9
 8008958:	429a      	cmp	r2, r3
 800895a:	d21c      	bcs.n	8008996 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	b29a      	uxth	r2, r3
 8008960:	200e      	movs	r0, #14
 8008962:	2418      	movs	r4, #24
 8008964:	1903      	adds	r3, r0, r4
 8008966:	19db      	adds	r3, r3, r7
 8008968:	210f      	movs	r1, #15
 800896a:	438a      	bics	r2, r1
 800896c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	b29b      	uxth	r3, r3
 8008974:	2207      	movs	r2, #7
 8008976:	4013      	ands	r3, r2
 8008978:	b299      	uxth	r1, r3
 800897a:	1903      	adds	r3, r0, r4
 800897c:	19db      	adds	r3, r3, r7
 800897e:	1902      	adds	r2, r0, r4
 8008980:	19d2      	adds	r2, r2, r7
 8008982:	8812      	ldrh	r2, [r2, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	1902      	adds	r2, r0, r4
 800898e:	19d2      	adds	r2, r2, r7
 8008990:	8812      	ldrh	r2, [r2, #0]
 8008992:	60da      	str	r2, [r3, #12]
 8008994:	e05d      	b.n	8008a52 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008996:	231a      	movs	r3, #26
 8008998:	2218      	movs	r2, #24
 800899a:	189b      	adds	r3, r3, r2
 800899c:	19db      	adds	r3, r3, r7
 800899e:	2201      	movs	r2, #1
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	e056      	b.n	8008a52 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089a4:	231b      	movs	r3, #27
 80089a6:	2218      	movs	r2, #24
 80089a8:	189b      	adds	r3, r3, r2
 80089aa:	19db      	adds	r3, r3, r7
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d822      	bhi.n	80089f8 <UART_SetConfig+0x4b0>
 80089b2:	009a      	lsls	r2, r3, #2
 80089b4:	4b32      	ldr	r3, [pc, #200]	; (8008a80 <UART_SetConfig+0x538>)
 80089b6:	18d3      	adds	r3, r2, r3
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089bc:	f7fd fe58 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 80089c0:	0003      	movs	r3, r0
 80089c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089c4:	e021      	b.n	8008a0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089c6:	f7fd fe69 	bl	800669c <HAL_RCC_GetPCLK2Freq>
 80089ca:	0003      	movs	r3, r0
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089ce:	e01c      	b.n	8008a0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d0:	4b28      	ldr	r3, [pc, #160]	; (8008a74 <UART_SetConfig+0x52c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2210      	movs	r2, #16
 80089d6:	4013      	ands	r3, r2
 80089d8:	d002      	beq.n	80089e0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80089da:	4b27      	ldr	r3, [pc, #156]	; (8008a78 <UART_SetConfig+0x530>)
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089de:	e014      	b.n	8008a0a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80089e0:	4b26      	ldr	r3, [pc, #152]	; (8008a7c <UART_SetConfig+0x534>)
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089e4:	e011      	b.n	8008a0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089e6:	f7fd fd93 	bl	8006510 <HAL_RCC_GetSysClockFreq>
 80089ea:	0003      	movs	r3, r0
 80089ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089ee:	e00c      	b.n	8008a0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089f6:	e008      	b.n	8008a0a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80089fc:	231a      	movs	r3, #26
 80089fe:	2218      	movs	r2, #24
 8008a00:	189b      	adds	r3, r3, r2
 8008a02:	19db      	adds	r3, r3, r7
 8008a04:	2201      	movs	r2, #1
 8008a06:	701a      	strb	r2, [r3, #0]
        break;
 8008a08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d020      	beq.n	8008a52 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	085a      	lsrs	r2, r3, #1
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	18d2      	adds	r2, r2, r3
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	0019      	movs	r1, r3
 8008a20:	0010      	movs	r0, r2
 8008a22:	f7f7 fb97 	bl	8000154 <__udivsi3>
 8008a26:	0003      	movs	r3, r0
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	2b0f      	cmp	r3, #15
 8008a2e:	d90a      	bls.n	8008a46 <UART_SetConfig+0x4fe>
 8008a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a32:	2380      	movs	r3, #128	; 0x80
 8008a34:	025b      	lsls	r3, r3, #9
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d205      	bcs.n	8008a46 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	60da      	str	r2, [r3, #12]
 8008a44:	e005      	b.n	8008a52 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008a46:	231a      	movs	r3, #26
 8008a48:	2218      	movs	r2, #24
 8008a4a:	189b      	adds	r3, r3, r2
 8008a4c:	19db      	adds	r3, r3, r7
 8008a4e:	2201      	movs	r2, #1
 8008a50:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	2200      	movs	r2, #0
 8008a56:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a5e:	231a      	movs	r3, #26
 8008a60:	2218      	movs	r2, #24
 8008a62:	189b      	adds	r3, r3, r2
 8008a64:	19db      	adds	r3, r3, r7
 8008a66:	781b      	ldrb	r3, [r3, #0]
}
 8008a68:	0018      	movs	r0, r3
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b00e      	add	sp, #56	; 0x38
 8008a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a70:	0800cb74 	.word	0x0800cb74
 8008a74:	40021000 	.word	0x40021000
 8008a78:	003d0900 	.word	0x003d0900
 8008a7c:	00f42400 	.word	0x00f42400
 8008a80:	0800cb98 	.word	0x0800cb98

08008a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	2201      	movs	r2, #1
 8008a92:	4013      	ands	r3, r2
 8008a94:	d00b      	beq.n	8008aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	4a4a      	ldr	r2, [pc, #296]	; (8008bc8 <UART_AdvFeatureConfig+0x144>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	d00b      	beq.n	8008ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	4a43      	ldr	r2, [pc, #268]	; (8008bcc <UART_AdvFeatureConfig+0x148>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	0019      	movs	r1, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	d00b      	beq.n	8008af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4a3b      	ldr	r2, [pc, #236]	; (8008bd0 <UART_AdvFeatureConfig+0x14c>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	0019      	movs	r1, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2208      	movs	r2, #8
 8008af8:	4013      	ands	r3, r2
 8008afa:	d00b      	beq.n	8008b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4a34      	ldr	r2, [pc, #208]	; (8008bd4 <UART_AdvFeatureConfig+0x150>)
 8008b04:	4013      	ands	r3, r2
 8008b06:	0019      	movs	r1, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2210      	movs	r2, #16
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d00b      	beq.n	8008b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	4a2c      	ldr	r2, [pc, #176]	; (8008bd8 <UART_AdvFeatureConfig+0x154>)
 8008b26:	4013      	ands	r3, r2
 8008b28:	0019      	movs	r1, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	d00b      	beq.n	8008b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	4a25      	ldr	r2, [pc, #148]	; (8008bdc <UART_AdvFeatureConfig+0x158>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2240      	movs	r2, #64	; 0x40
 8008b5e:	4013      	ands	r3, r2
 8008b60:	d01d      	beq.n	8008b9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	4a1d      	ldr	r2, [pc, #116]	; (8008be0 <UART_AdvFeatureConfig+0x15c>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	0019      	movs	r1, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b7e:	2380      	movs	r3, #128	; 0x80
 8008b80:	035b      	lsls	r3, r3, #13
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d10b      	bne.n	8008b9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <UART_AdvFeatureConfig+0x160>)
 8008b8e:	4013      	ands	r3, r2
 8008b90:	0019      	movs	r1, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	2280      	movs	r2, #128	; 0x80
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	d00b      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4a0e      	ldr	r2, [pc, #56]	; (8008be8 <UART_AdvFeatureConfig+0x164>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	0019      	movs	r1, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }
}
 8008bc0:	46c0      	nop			; (mov r8, r8)
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	b002      	add	sp, #8
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	fffdffff 	.word	0xfffdffff
 8008bcc:	fffeffff 	.word	0xfffeffff
 8008bd0:	fffbffff 	.word	0xfffbffff
 8008bd4:	ffff7fff 	.word	0xffff7fff
 8008bd8:	ffffefff 	.word	0xffffefff
 8008bdc:	ffffdfff 	.word	0xffffdfff
 8008be0:	ffefffff 	.word	0xffefffff
 8008be4:	ff9fffff 	.word	0xff9fffff
 8008be8:	fff7ffff 	.word	0xfff7ffff

08008bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b092      	sub	sp, #72	; 0x48
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2284      	movs	r2, #132	; 0x84
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bfc:	f7fc fc20 	bl	8005440 <HAL_GetTick>
 8008c00:	0003      	movs	r3, r0
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d12c      	bne.n	8008c6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c14:	2280      	movs	r2, #128	; 0x80
 8008c16:	0391      	lsls	r1, r2, #14
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4a46      	ldr	r2, [pc, #280]	; (8008d34 <UART_CheckIdleState+0x148>)
 8008c1c:	9200      	str	r2, [sp, #0]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f000 f88c 	bl	8008d3c <UART_WaitOnFlagUntilTimeout>
 8008c24:	1e03      	subs	r3, r0, #0
 8008c26:	d021      	beq.n	8008c6c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c28:	f3ef 8310 	mrs	r3, PRIMASK
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c32:	2301      	movs	r3, #1
 8008c34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	f383 8810 	msr	PRIMASK, r3
}
 8008c3c:	46c0      	nop			; (mov r8, r8)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2180      	movs	r1, #128	; 0x80
 8008c4a:	438a      	bics	r2, r1
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	f383 8810 	msr	PRIMASK, r3
}
 8008c58:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2278      	movs	r2, #120	; 0x78
 8008c64:	2100      	movs	r1, #0
 8008c66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e05f      	b.n	8008d2c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2204      	movs	r2, #4
 8008c74:	4013      	ands	r3, r2
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d146      	bne.n	8008d08 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7c:	2280      	movs	r2, #128	; 0x80
 8008c7e:	03d1      	lsls	r1, r2, #15
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4a2c      	ldr	r2, [pc, #176]	; (8008d34 <UART_CheckIdleState+0x148>)
 8008c84:	9200      	str	r2, [sp, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f000 f858 	bl	8008d3c <UART_WaitOnFlagUntilTimeout>
 8008c8c:	1e03      	subs	r3, r0, #0
 8008c8e:	d03b      	beq.n	8008d08 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c90:	f3ef 8310 	mrs	r3, PRIMASK
 8008c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c98:	637b      	str	r3, [r7, #52]	; 0x34
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f383 8810 	msr	PRIMASK, r3
}
 8008ca4:	46c0      	nop			; (mov r8, r8)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4921      	ldr	r1, [pc, #132]	; (8008d38 <UART_CheckIdleState+0x14c>)
 8008cb2:	400a      	ands	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f383 8810 	msr	PRIMASK, r3
}
 8008cc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008cc8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	633b      	str	r3, [r7, #48]	; 0x30
 8008ccc:	2301      	movs	r3, #1
 8008cce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f383 8810 	msr	PRIMASK, r3
}
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	438a      	bics	r2, r1
 8008ce6:	609a      	str	r2, [r3, #8]
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	f383 8810 	msr	PRIMASK, r3
}
 8008cf2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2280      	movs	r2, #128	; 0x80
 8008cf8:	2120      	movs	r1, #32
 8008cfa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2278      	movs	r2, #120	; 0x78
 8008d00:	2100      	movs	r1, #0
 8008d02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e011      	b.n	8008d2c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2280      	movs	r2, #128	; 0x80
 8008d12:	2120      	movs	r1, #32
 8008d14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2278      	movs	r2, #120	; 0x78
 8008d26:	2100      	movs	r1, #0
 8008d28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b010      	add	sp, #64	; 0x40
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	01ffffff 	.word	0x01ffffff
 8008d38:	fffffedf 	.word	0xfffffedf

08008d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	1dfb      	adds	r3, r7, #7
 8008d4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d4c:	e04b      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	3301      	adds	r3, #1
 8008d52:	d048      	beq.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d54:	f7fc fb74 	bl	8005440 <HAL_GetTick>
 8008d58:	0002      	movs	r2, r0
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d302      	bcc.n	8008d6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e04b      	b.n	8008e06 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2204      	movs	r2, #4
 8008d76:	4013      	ands	r3, r2
 8008d78:	d035      	beq.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	2208      	movs	r2, #8
 8008d82:	4013      	ands	r3, r2
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	d111      	bne.n	8008dac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2208      	movs	r2, #8
 8008d8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	0018      	movs	r0, r3
 8008d94:	f000 f906 	bl	8008fa4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2284      	movs	r2, #132	; 0x84
 8008d9c:	2108      	movs	r1, #8
 8008d9e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2278      	movs	r2, #120	; 0x78
 8008da4:	2100      	movs	r1, #0
 8008da6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e02c      	b.n	8008e06 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69da      	ldr	r2, [r3, #28]
 8008db2:	2380      	movs	r3, #128	; 0x80
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	401a      	ands	r2, r3
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d112      	bne.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2280      	movs	r2, #128	; 0x80
 8008dc6:	0112      	lsls	r2, r2, #4
 8008dc8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f000 f8e9 	bl	8008fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2284      	movs	r2, #132	; 0x84
 8008dd6:	2120      	movs	r1, #32
 8008dd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2278      	movs	r2, #120	; 0x78
 8008dde:	2100      	movs	r1, #0
 8008de0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e00f      	b.n	8008e06 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	4013      	ands	r3, r2
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	425a      	negs	r2, r3
 8008df6:	4153      	adcs	r3, r2
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	001a      	movs	r2, r3
 8008dfc:	1dfb      	adds	r3, r7, #7
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d0a4      	beq.n	8008d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	0018      	movs	r0, r3
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	b004      	add	sp, #16
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b090      	sub	sp, #64	; 0x40
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	1dbb      	adds	r3, r7, #6
 8008e1c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	1dba      	adds	r2, r7, #6
 8008e28:	2158      	movs	r1, #88	; 0x58
 8008e2a:	8812      	ldrh	r2, [r2, #0]
 8008e2c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	1dba      	adds	r2, r7, #6
 8008e32:	215a      	movs	r1, #90	; 0x5a
 8008e34:	8812      	ldrh	r2, [r2, #0]
 8008e36:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689a      	ldr	r2, [r3, #8]
 8008e42:	2380      	movs	r3, #128	; 0x80
 8008e44:	015b      	lsls	r3, r3, #5
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d10d      	bne.n	8008e66 <UART_Start_Receive_IT+0x56>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <UART_Start_Receive_IT+0x4c>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	225c      	movs	r2, #92	; 0x5c
 8008e56:	4950      	ldr	r1, [pc, #320]	; (8008f98 <UART_Start_Receive_IT+0x188>)
 8008e58:	5299      	strh	r1, [r3, r2]
 8008e5a:	e02e      	b.n	8008eba <UART_Start_Receive_IT+0xaa>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	225c      	movs	r2, #92	; 0x5c
 8008e60:	21ff      	movs	r1, #255	; 0xff
 8008e62:	5299      	strh	r1, [r3, r2]
 8008e64:	e029      	b.n	8008eba <UART_Start_Receive_IT+0xaa>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10d      	bne.n	8008e8a <UART_Start_Receive_IT+0x7a>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d104      	bne.n	8008e80 <UART_Start_Receive_IT+0x70>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	225c      	movs	r2, #92	; 0x5c
 8008e7a:	21ff      	movs	r1, #255	; 0xff
 8008e7c:	5299      	strh	r1, [r3, r2]
 8008e7e:	e01c      	b.n	8008eba <UART_Start_Receive_IT+0xaa>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	225c      	movs	r2, #92	; 0x5c
 8008e84:	217f      	movs	r1, #127	; 0x7f
 8008e86:	5299      	strh	r1, [r3, r2]
 8008e88:	e017      	b.n	8008eba <UART_Start_Receive_IT+0xaa>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	2380      	movs	r3, #128	; 0x80
 8008e90:	055b      	lsls	r3, r3, #21
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d10d      	bne.n	8008eb2 <UART_Start_Receive_IT+0xa2>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d104      	bne.n	8008ea8 <UART_Start_Receive_IT+0x98>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	225c      	movs	r2, #92	; 0x5c
 8008ea2:	217f      	movs	r1, #127	; 0x7f
 8008ea4:	5299      	strh	r1, [r3, r2]
 8008ea6:	e008      	b.n	8008eba <UART_Start_Receive_IT+0xaa>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	225c      	movs	r2, #92	; 0x5c
 8008eac:	213f      	movs	r1, #63	; 0x3f
 8008eae:	5299      	strh	r1, [r3, r2]
 8008eb0:	e003      	b.n	8008eba <UART_Start_Receive_IT+0xaa>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	225c      	movs	r2, #92	; 0x5c
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2284      	movs	r2, #132	; 0x84
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2280      	movs	r2, #128	; 0x80
 8008ec6:	2122      	movs	r1, #34	; 0x22
 8008ec8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eca:	f3ef 8310 	mrs	r3, PRIMASK
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	f383 8810 	msr	PRIMASK, r3
}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2101      	movs	r1, #1
 8008eec:	430a      	orrs	r2, r1
 8008eee:	609a      	str	r2, [r3, #8]
 8008ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	f383 8810 	msr	PRIMASK, r3
}
 8008efa:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	2380      	movs	r3, #128	; 0x80
 8008f02:	015b      	lsls	r3, r3, #5
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d107      	bne.n	8008f18 <UART_Start_Receive_IT+0x108>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4a22      	ldr	r2, [pc, #136]	; (8008f9c <UART_Start_Receive_IT+0x18c>)
 8008f14:	669a      	str	r2, [r3, #104]	; 0x68
 8008f16:	e002      	b.n	8008f1e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a21      	ldr	r2, [pc, #132]	; (8008fa0 <UART_Start_Receive_IT+0x190>)
 8008f1c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d019      	beq.n	8008f5a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f26:	f3ef 8310 	mrs	r3, PRIMASK
 8008f2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f2c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f30:	2301      	movs	r3, #1
 8008f32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	f383 8810 	msr	PRIMASK, r3
}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2190      	movs	r1, #144	; 0x90
 8008f48:	0049      	lsls	r1, r1, #1
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	f383 8810 	msr	PRIMASK, r3
}
 8008f58:	e018      	b.n	8008f8c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f5e:	613b      	str	r3, [r7, #16]
  return(result);
 8008f60:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f64:	2301      	movs	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f383 8810 	msr	PRIMASK, r3
}
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2120      	movs	r1, #32
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	f383 8810 	msr	PRIMASK, r3
}
 8008f8a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b010      	add	sp, #64	; 0x40
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	000001ff 	.word	0x000001ff
 8008f9c:	080092b5 	.word	0x080092b5
 8008fa0:	080090f1 	.word	0x080090f1

08008fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08e      	sub	sp, #56	; 0x38
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fac:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb0:	617b      	str	r3, [r7, #20]
  return(result);
 8008fb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f383 8810 	msr	PRIMASK, r3
}
 8008fc0:	46c0      	nop			; (mov r8, r8)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4926      	ldr	r1, [pc, #152]	; (8009068 <UART_EndRxTransfer+0xc4>)
 8008fce:	400a      	ands	r2, r1
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f383 8810 	msr	PRIMASK, r3
}
 8008fdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fde:	f3ef 8310 	mrs	r3, PRIMASK
 8008fe2:	623b      	str	r3, [r7, #32]
  return(result);
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8008fe8:	2301      	movs	r3, #1
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	f383 8810 	msr	PRIMASK, r3
}
 8008ff2:	46c0      	nop			; (mov r8, r8)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2101      	movs	r1, #1
 8009000:	438a      	bics	r2, r1
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	f383 8810 	msr	PRIMASK, r3
}
 800900e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009014:	2b01      	cmp	r3, #1
 8009016:	d118      	bne.n	800904a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009018:	f3ef 8310 	mrs	r3, PRIMASK
 800901c:	60bb      	str	r3, [r7, #8]
  return(result);
 800901e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009022:	2301      	movs	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f383 8810 	msr	PRIMASK, r3
}
 800902c:	46c0      	nop			; (mov r8, r8)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2110      	movs	r1, #16
 800903a:	438a      	bics	r2, r1
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f383 8810 	msr	PRIMASK, r3
}
 8009048:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2280      	movs	r2, #128	; 0x80
 800904e:	2120      	movs	r1, #32
 8009050:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	46bd      	mov	sp, r7
 8009062:	b00e      	add	sp, #56	; 0x38
 8009064:	bd80      	pop	{r7, pc}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	fffffedf 	.word	0xfffffedf

0800906c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	225a      	movs	r2, #90	; 0x5a
 800907e:	2100      	movs	r1, #0
 8009080:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2252      	movs	r2, #82	; 0x52
 8009086:	2100      	movs	r1, #0
 8009088:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	0018      	movs	r0, r3
 800908e:	f7ff fa47 	bl	8008520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	46bd      	mov	sp, r7
 8009096:	b004      	add	sp, #16
 8009098:	bd80      	pop	{r7, pc}

0800909a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a2:	f3ef 8310 	mrs	r3, PRIMASK
 80090a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80090a8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	2301      	movs	r3, #1
 80090ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f383 8810 	msr	PRIMASK, r3
}
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2140      	movs	r1, #64	; 0x40
 80090c4:	438a      	bics	r2, r1
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f383 8810 	msr	PRIMASK, r3
}
 80090d2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2220      	movs	r2, #32
 80090d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7ff fa14 	bl	8008510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e8:	46c0      	nop			; (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b006      	add	sp, #24
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b094      	sub	sp, #80	; 0x50
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090f8:	204e      	movs	r0, #78	; 0x4e
 80090fa:	183b      	adds	r3, r7, r0
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	215c      	movs	r1, #92	; 0x5c
 8009100:	5a52      	ldrh	r2, [r2, r1]
 8009102:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2280      	movs	r2, #128	; 0x80
 8009108:	589b      	ldr	r3, [r3, r2]
 800910a:	2b22      	cmp	r3, #34	; 0x22
 800910c:	d000      	beq.n	8009110 <UART_RxISR_8BIT+0x20>
 800910e:	e0bf      	b.n	8009290 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009116:	214c      	movs	r1, #76	; 0x4c
 8009118:	187b      	adds	r3, r7, r1
 800911a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800911c:	187b      	adds	r3, r7, r1
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	183b      	adds	r3, r7, r0
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	b2d9      	uxtb	r1, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912c:	400a      	ands	r2, r1
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	225a      	movs	r2, #90	; 0x5a
 8009140:	5a9b      	ldrh	r3, [r3, r2]
 8009142:	b29b      	uxth	r3, r3
 8009144:	3b01      	subs	r3, #1
 8009146:	b299      	uxth	r1, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	225a      	movs	r2, #90	; 0x5a
 800914c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	225a      	movs	r2, #90	; 0x5a
 8009152:	5a9b      	ldrh	r3, [r3, r2]
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d000      	beq.n	800915c <UART_RxISR_8BIT+0x6c>
 800915a:	e0a1      	b.n	80092a0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800915c:	f3ef 8310 	mrs	r3, PRIMASK
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009164:	64bb      	str	r3, [r7, #72]	; 0x48
 8009166:	2301      	movs	r3, #1
 8009168:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	f383 8810 	msr	PRIMASK, r3
}
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	494a      	ldr	r1, [pc, #296]	; (80092a8 <UART_RxISR_8BIT+0x1b8>)
 800917e:	400a      	ands	r2, r1
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	f383 8810 	msr	PRIMASK, r3
}
 800918c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800918e:	f3ef 8310 	mrs	r3, PRIMASK
 8009192:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009196:	647b      	str	r3, [r7, #68]	; 0x44
 8009198:	2301      	movs	r3, #1
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800919c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919e:	f383 8810 	msr	PRIMASK, r3
}
 80091a2:	46c0      	nop			; (mov r8, r8)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689a      	ldr	r2, [r3, #8]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2101      	movs	r1, #1
 80091b0:	438a      	bics	r2, r1
 80091b2:	609a      	str	r2, [r3, #8]
 80091b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f383 8810 	msr	PRIMASK, r3
}
 80091be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2280      	movs	r2, #128	; 0x80
 80091c4:	2120      	movs	r1, #32
 80091c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a34      	ldr	r2, [pc, #208]	; (80092ac <UART_RxISR_8BIT+0x1bc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d01f      	beq.n	800921e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	2380      	movs	r3, #128	; 0x80
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	4013      	ands	r3, r2
 80091ea:	d018      	beq.n	800921e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ec:	f3ef 8310 	mrs	r3, PRIMASK
 80091f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80091f2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091f4:	643b      	str	r3, [r7, #64]	; 0x40
 80091f6:	2301      	movs	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	f383 8810 	msr	PRIMASK, r3
}
 8009200:	46c0      	nop			; (mov r8, r8)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4928      	ldr	r1, [pc, #160]	; (80092b0 <UART_RxISR_8BIT+0x1c0>)
 800920e:	400a      	ands	r2, r1
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009214:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	f383 8810 	msr	PRIMASK, r3
}
 800921c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009222:	2b01      	cmp	r3, #1
 8009224:	d12f      	bne.n	8009286 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800922c:	f3ef 8310 	mrs	r3, PRIMASK
 8009230:	60fb      	str	r3, [r7, #12]
  return(result);
 8009232:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009236:	2301      	movs	r3, #1
 8009238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f383 8810 	msr	PRIMASK, r3
}
 8009240:	46c0      	nop			; (mov r8, r8)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2110      	movs	r1, #16
 800924e:	438a      	bics	r2, r1
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f383 8810 	msr	PRIMASK, r3
}
 800925c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	2210      	movs	r2, #16
 8009266:	4013      	ands	r3, r2
 8009268:	2b10      	cmp	r3, #16
 800926a:	d103      	bne.n	8009274 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2210      	movs	r2, #16
 8009272:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2258      	movs	r2, #88	; 0x58
 8009278:	5a9a      	ldrh	r2, [r3, r2]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	0011      	movs	r1, r2
 800927e:	0018      	movs	r0, r3
 8009280:	f7ff f956 	bl	8008530 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009284:	e00c      	b.n	80092a0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	0018      	movs	r0, r3
 800928a:	f7f9 f90d 	bl	80024a8 <HAL_UART_RxCpltCallback>
}
 800928e:	e007      	b.n	80092a0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	699a      	ldr	r2, [r3, #24]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2108      	movs	r1, #8
 800929c:	430a      	orrs	r2, r1
 800929e:	619a      	str	r2, [r3, #24]
}
 80092a0:	46c0      	nop			; (mov r8, r8)
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b014      	add	sp, #80	; 0x50
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	fffffedf 	.word	0xfffffedf
 80092ac:	40004800 	.word	0x40004800
 80092b0:	fbffffff 	.word	0xfbffffff

080092b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b094      	sub	sp, #80	; 0x50
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092bc:	204e      	movs	r0, #78	; 0x4e
 80092be:	183b      	adds	r3, r7, r0
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	215c      	movs	r1, #92	; 0x5c
 80092c4:	5a52      	ldrh	r2, [r2, r1]
 80092c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2280      	movs	r2, #128	; 0x80
 80092cc:	589b      	ldr	r3, [r3, r2]
 80092ce:	2b22      	cmp	r3, #34	; 0x22
 80092d0:	d000      	beq.n	80092d4 <UART_RxISR_16BIT+0x20>
 80092d2:	e0bf      	b.n	8009454 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092da:	214c      	movs	r1, #76	; 0x4c
 80092dc:	187b      	adds	r3, r7, r1
 80092de:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80092e6:	187b      	adds	r3, r7, r1
 80092e8:	183a      	adds	r2, r7, r0
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	8812      	ldrh	r2, [r2, #0]
 80092ee:	4013      	ands	r3, r2
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fa:	1c9a      	adds	r2, r3, #2
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	225a      	movs	r2, #90	; 0x5a
 8009304:	5a9b      	ldrh	r3, [r3, r2]
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b01      	subs	r3, #1
 800930a:	b299      	uxth	r1, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	225a      	movs	r2, #90	; 0x5a
 8009310:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	225a      	movs	r2, #90	; 0x5a
 8009316:	5a9b      	ldrh	r3, [r3, r2]
 8009318:	b29b      	uxth	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d000      	beq.n	8009320 <UART_RxISR_16BIT+0x6c>
 800931e:	e0a1      	b.n	8009464 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009320:	f3ef 8310 	mrs	r3, PRIMASK
 8009324:	623b      	str	r3, [r7, #32]
  return(result);
 8009326:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009328:	647b      	str	r3, [r7, #68]	; 0x44
 800932a:	2301      	movs	r3, #1
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	f383 8810 	msr	PRIMASK, r3
}
 8009334:	46c0      	nop			; (mov r8, r8)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	494a      	ldr	r1, [pc, #296]	; (800946c <UART_RxISR_16BIT+0x1b8>)
 8009342:	400a      	ands	r2, r1
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	f383 8810 	msr	PRIMASK, r3
}
 8009350:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009352:	f3ef 8310 	mrs	r3, PRIMASK
 8009356:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935a:	643b      	str	r3, [r7, #64]	; 0x40
 800935c:	2301      	movs	r3, #1
 800935e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	f383 8810 	msr	PRIMASK, r3
}
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2101      	movs	r1, #1
 8009374:	438a      	bics	r2, r1
 8009376:	609a      	str	r2, [r3, #8]
 8009378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800937a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	f383 8810 	msr	PRIMASK, r3
}
 8009382:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2280      	movs	r2, #128	; 0x80
 8009388:	2120      	movs	r1, #32
 800938a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a34      	ldr	r2, [pc, #208]	; (8009470 <UART_RxISR_16BIT+0x1bc>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d01f      	beq.n	80093e2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	2380      	movs	r3, #128	; 0x80
 80093aa:	041b      	lsls	r3, r3, #16
 80093ac:	4013      	ands	r3, r2
 80093ae:	d018      	beq.n	80093e2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093b0:	f3ef 8310 	mrs	r3, PRIMASK
 80093b4:	617b      	str	r3, [r7, #20]
  return(result);
 80093b6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ba:	2301      	movs	r3, #1
 80093bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	f383 8810 	msr	PRIMASK, r3
}
 80093c4:	46c0      	nop			; (mov r8, r8)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4928      	ldr	r1, [pc, #160]	; (8009474 <UART_RxISR_16BIT+0x1c0>)
 80093d2:	400a      	ands	r2, r1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	f383 8810 	msr	PRIMASK, r3
}
 80093e0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d12f      	bne.n	800944a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093f0:	f3ef 8310 	mrs	r3, PRIMASK
 80093f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80093f6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80093fa:	2301      	movs	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f383 8810 	msr	PRIMASK, r3
}
 8009404:	46c0      	nop			; (mov r8, r8)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2110      	movs	r1, #16
 8009412:	438a      	bics	r2, r1
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f383 8810 	msr	PRIMASK, r3
}
 8009420:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	2210      	movs	r2, #16
 800942a:	4013      	ands	r3, r2
 800942c:	2b10      	cmp	r3, #16
 800942e:	d103      	bne.n	8009438 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2210      	movs	r2, #16
 8009436:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2258      	movs	r2, #88	; 0x58
 800943c:	5a9a      	ldrh	r2, [r3, r2]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	0011      	movs	r1, r2
 8009442:	0018      	movs	r0, r3
 8009444:	f7ff f874 	bl	8008530 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009448:	e00c      	b.n	8009464 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	0018      	movs	r0, r3
 800944e:	f7f9 f82b 	bl	80024a8 <HAL_UART_RxCpltCallback>
}
 8009452:	e007      	b.n	8009464 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2108      	movs	r1, #8
 8009460:	430a      	orrs	r2, r1
 8009462:	619a      	str	r2, [r3, #24]
}
 8009464:	46c0      	nop			; (mov r8, r8)
 8009466:	46bd      	mov	sp, r7
 8009468:	b014      	add	sp, #80	; 0x50
 800946a:	bd80      	pop	{r7, pc}
 800946c:	fffffedf 	.word	0xfffffedf
 8009470:	40004800 	.word	0x40004800
 8009474:	fbffffff 	.word	0xfbffffff

08009478 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009480:	46c0      	nop			; (mov r8, r8)
 8009482:	46bd      	mov	sp, r7
 8009484:	b002      	add	sp, #8
 8009486:	bd80      	pop	{r7, pc}

08009488 <findslot>:
 8009488:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <findslot+0x2c>)
 800948a:	b510      	push	{r4, lr}
 800948c:	0004      	movs	r4, r0
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	2800      	cmp	r0, #0
 8009492:	d004      	beq.n	800949e <findslot+0x16>
 8009494:	6a03      	ldr	r3, [r0, #32]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <findslot+0x16>
 800949a:	f001 faeb 	bl	800aa74 <__sinit>
 800949e:	2000      	movs	r0, #0
 80094a0:	2c13      	cmp	r4, #19
 80094a2:	d805      	bhi.n	80094b0 <findslot+0x28>
 80094a4:	4b04      	ldr	r3, [pc, #16]	; (80094b8 <findslot+0x30>)
 80094a6:	00e4      	lsls	r4, r4, #3
 80094a8:	58e2      	ldr	r2, [r4, r3]
 80094aa:	3201      	adds	r2, #1
 80094ac:	d000      	beq.n	80094b0 <findslot+0x28>
 80094ae:	18e0      	adds	r0, r4, r3
 80094b0:	bd10      	pop	{r4, pc}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	200001e4 	.word	0x200001e4
 80094b8:	20000d30 	.word	0x20000d30

080094bc <error>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	0004      	movs	r4, r0
 80094c0:	f001 fbe0 	bl	800ac84 <__errno>
 80094c4:	2613      	movs	r6, #19
 80094c6:	0005      	movs	r5, r0
 80094c8:	2700      	movs	r7, #0
 80094ca:	1c30      	adds	r0, r6, #0
 80094cc:	1c39      	adds	r1, r7, #0
 80094ce:	beab      	bkpt	0x00ab
 80094d0:	1c06      	adds	r6, r0, #0
 80094d2:	602e      	str	r6, [r5, #0]
 80094d4:	0020      	movs	r0, r4
 80094d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094d8 <checkerror>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d101      	bne.n	80094e2 <checkerror+0xa>
 80094de:	f7ff ffed 	bl	80094bc <error>
 80094e2:	bd10      	pop	{r4, pc}

080094e4 <_swiread>:
 80094e4:	b530      	push	{r4, r5, lr}
 80094e6:	b085      	sub	sp, #20
 80094e8:	ad01      	add	r5, sp, #4
 80094ea:	9001      	str	r0, [sp, #4]
 80094ec:	9102      	str	r1, [sp, #8]
 80094ee:	9203      	str	r2, [sp, #12]
 80094f0:	2406      	movs	r4, #6
 80094f2:	1c20      	adds	r0, r4, #0
 80094f4:	1c29      	adds	r1, r5, #0
 80094f6:	beab      	bkpt	0x00ab
 80094f8:	1c04      	adds	r4, r0, #0
 80094fa:	0020      	movs	r0, r4
 80094fc:	f7ff ffec 	bl	80094d8 <checkerror>
 8009500:	b005      	add	sp, #20
 8009502:	bd30      	pop	{r4, r5, pc}

08009504 <_read>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	000e      	movs	r6, r1
 8009508:	0015      	movs	r5, r2
 800950a:	f7ff ffbd 	bl	8009488 <findslot>
 800950e:	1e04      	subs	r4, r0, #0
 8009510:	d106      	bne.n	8009520 <_read+0x1c>
 8009512:	f001 fbb7 	bl	800ac84 <__errno>
 8009516:	2309      	movs	r3, #9
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	2001      	movs	r0, #1
 800951c:	4240      	negs	r0, r0
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	002a      	movs	r2, r5
 8009522:	0031      	movs	r1, r6
 8009524:	6800      	ldr	r0, [r0, #0]
 8009526:	f7ff ffdd 	bl	80094e4 <_swiread>
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	d0f7      	beq.n	800951e <_read+0x1a>
 800952e:	6863      	ldr	r3, [r4, #4]
 8009530:	1a28      	subs	r0, r5, r0
 8009532:	181b      	adds	r3, r3, r0
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	e7f2      	b.n	800951e <_read+0x1a>

08009538 <_swilseek>:
 8009538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800953a:	000c      	movs	r4, r1
 800953c:	0016      	movs	r6, r2
 800953e:	f7ff ffa3 	bl	8009488 <findslot>
 8009542:	1e05      	subs	r5, r0, #0
 8009544:	d107      	bne.n	8009556 <_swilseek+0x1e>
 8009546:	f001 fb9d 	bl	800ac84 <__errno>
 800954a:	2309      	movs	r3, #9
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	2401      	movs	r4, #1
 8009550:	4264      	negs	r4, r4
 8009552:	0020      	movs	r0, r4
 8009554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009556:	2e02      	cmp	r6, #2
 8009558:	d903      	bls.n	8009562 <_swilseek+0x2a>
 800955a:	f001 fb93 	bl	800ac84 <__errno>
 800955e:	2316      	movs	r3, #22
 8009560:	e7f4      	b.n	800954c <_swilseek+0x14>
 8009562:	2e01      	cmp	r6, #1
 8009564:	d112      	bne.n	800958c <_swilseek+0x54>
 8009566:	6843      	ldr	r3, [r0, #4]
 8009568:	18e4      	adds	r4, r4, r3
 800956a:	d4f6      	bmi.n	800955a <_swilseek+0x22>
 800956c:	466f      	mov	r7, sp
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	260a      	movs	r6, #10
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	607c      	str	r4, [r7, #4]
 8009576:	1c30      	adds	r0, r6, #0
 8009578:	1c39      	adds	r1, r7, #0
 800957a:	beab      	bkpt	0x00ab
 800957c:	1c06      	adds	r6, r0, #0
 800957e:	0030      	movs	r0, r6
 8009580:	f7ff ffaa 	bl	80094d8 <checkerror>
 8009584:	2800      	cmp	r0, #0
 8009586:	dbe2      	blt.n	800954e <_swilseek+0x16>
 8009588:	606c      	str	r4, [r5, #4]
 800958a:	e7e2      	b.n	8009552 <_swilseek+0x1a>
 800958c:	6803      	ldr	r3, [r0, #0]
 800958e:	2e02      	cmp	r6, #2
 8009590:	d1ec      	bne.n	800956c <_swilseek+0x34>
 8009592:	466f      	mov	r7, sp
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	360a      	adds	r6, #10
 8009598:	1c30      	adds	r0, r6, #0
 800959a:	1c39      	adds	r1, r7, #0
 800959c:	beab      	bkpt	0x00ab
 800959e:	1c06      	adds	r6, r0, #0
 80095a0:	0030      	movs	r0, r6
 80095a2:	f7ff ff99 	bl	80094d8 <checkerror>
 80095a6:	1824      	adds	r4, r4, r0
 80095a8:	3001      	adds	r0, #1
 80095aa:	d1df      	bne.n	800956c <_swilseek+0x34>
 80095ac:	e7cf      	b.n	800954e <_swilseek+0x16>

080095ae <_lseek>:
 80095ae:	b510      	push	{r4, lr}
 80095b0:	f7ff ffc2 	bl	8009538 <_swilseek>
 80095b4:	bd10      	pop	{r4, pc}

080095b6 <_swiwrite>:
 80095b6:	b530      	push	{r4, r5, lr}
 80095b8:	b085      	sub	sp, #20
 80095ba:	ad01      	add	r5, sp, #4
 80095bc:	9001      	str	r0, [sp, #4]
 80095be:	9102      	str	r1, [sp, #8]
 80095c0:	9203      	str	r2, [sp, #12]
 80095c2:	2405      	movs	r4, #5
 80095c4:	1c20      	adds	r0, r4, #0
 80095c6:	1c29      	adds	r1, r5, #0
 80095c8:	beab      	bkpt	0x00ab
 80095ca:	1c04      	adds	r4, r0, #0
 80095cc:	0020      	movs	r0, r4
 80095ce:	f7ff ff83 	bl	80094d8 <checkerror>
 80095d2:	b005      	add	sp, #20
 80095d4:	bd30      	pop	{r4, r5, pc}

080095d6 <_write>:
 80095d6:	b570      	push	{r4, r5, r6, lr}
 80095d8:	000e      	movs	r6, r1
 80095da:	0015      	movs	r5, r2
 80095dc:	f7ff ff54 	bl	8009488 <findslot>
 80095e0:	1e04      	subs	r4, r0, #0
 80095e2:	d106      	bne.n	80095f2 <_write+0x1c>
 80095e4:	f001 fb4e 	bl	800ac84 <__errno>
 80095e8:	2309      	movs	r3, #9
 80095ea:	6003      	str	r3, [r0, #0]
 80095ec:	2001      	movs	r0, #1
 80095ee:	4240      	negs	r0, r0
 80095f0:	e00f      	b.n	8009612 <_write+0x3c>
 80095f2:	002a      	movs	r2, r5
 80095f4:	0031      	movs	r1, r6
 80095f6:	6800      	ldr	r0, [r0, #0]
 80095f8:	f7ff ffdd 	bl	80095b6 <_swiwrite>
 80095fc:	1e03      	subs	r3, r0, #0
 80095fe:	dbf5      	blt.n	80095ec <_write+0x16>
 8009600:	6862      	ldr	r2, [r4, #4]
 8009602:	1a28      	subs	r0, r5, r0
 8009604:	1812      	adds	r2, r2, r0
 8009606:	6062      	str	r2, [r4, #4]
 8009608:	42ab      	cmp	r3, r5
 800960a:	d102      	bne.n	8009612 <_write+0x3c>
 800960c:	2000      	movs	r0, #0
 800960e:	f7ff ff55 	bl	80094bc <error>
 8009612:	bd70      	pop	{r4, r5, r6, pc}

08009614 <_swiclose>:
 8009614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009616:	2402      	movs	r4, #2
 8009618:	9001      	str	r0, [sp, #4]
 800961a:	ad01      	add	r5, sp, #4
 800961c:	1c20      	adds	r0, r4, #0
 800961e:	1c29      	adds	r1, r5, #0
 8009620:	beab      	bkpt	0x00ab
 8009622:	1c04      	adds	r4, r0, #0
 8009624:	0020      	movs	r0, r4
 8009626:	f7ff ff57 	bl	80094d8 <checkerror>
 800962a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800962c <_close>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	0005      	movs	r5, r0
 8009630:	f7ff ff2a 	bl	8009488 <findslot>
 8009634:	1e04      	subs	r4, r0, #0
 8009636:	d106      	bne.n	8009646 <_close+0x1a>
 8009638:	f001 fb24 	bl	800ac84 <__errno>
 800963c:	2309      	movs	r3, #9
 800963e:	6003      	str	r3, [r0, #0]
 8009640:	2001      	movs	r0, #1
 8009642:	4240      	negs	r0, r0
 8009644:	bd70      	pop	{r4, r5, r6, pc}
 8009646:	3d01      	subs	r5, #1
 8009648:	2d01      	cmp	r5, #1
 800964a:	d809      	bhi.n	8009660 <_close+0x34>
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <_close+0x48>)
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	429a      	cmp	r2, r3
 8009654:	d104      	bne.n	8009660 <_close+0x34>
 8009656:	2301      	movs	r3, #1
 8009658:	425b      	negs	r3, r3
 800965a:	6003      	str	r3, [r0, #0]
 800965c:	2000      	movs	r0, #0
 800965e:	e7f1      	b.n	8009644 <_close+0x18>
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	f7ff ffd7 	bl	8009614 <_swiclose>
 8009666:	2800      	cmp	r0, #0
 8009668:	d1ec      	bne.n	8009644 <_close+0x18>
 800966a:	2301      	movs	r3, #1
 800966c:	425b      	negs	r3, r3
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	e7e8      	b.n	8009644 <_close+0x18>
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	20000d30 	.word	0x20000d30

08009678 <_getpid>:
 8009678:	2001      	movs	r0, #1
 800967a:	4770      	bx	lr

0800967c <_swistat>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	000c      	movs	r4, r1
 8009680:	f7ff ff02 	bl	8009488 <findslot>
 8009684:	1e05      	subs	r5, r0, #0
 8009686:	d106      	bne.n	8009696 <_swistat+0x1a>
 8009688:	f001 fafc 	bl	800ac84 <__errno>
 800968c:	2309      	movs	r3, #9
 800968e:	6003      	str	r3, [r0, #0]
 8009690:	2001      	movs	r0, #1
 8009692:	4240      	negs	r0, r0
 8009694:	bd70      	pop	{r4, r5, r6, pc}
 8009696:	2380      	movs	r3, #128	; 0x80
 8009698:	6862      	ldr	r2, [r4, #4]
 800969a:	019b      	lsls	r3, r3, #6
 800969c:	4313      	orrs	r3, r2
 800969e:	6063      	str	r3, [r4, #4]
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	260c      	movs	r6, #12
 80096a6:	64a3      	str	r3, [r4, #72]	; 0x48
 80096a8:	1c30      	adds	r0, r6, #0
 80096aa:	1c29      	adds	r1, r5, #0
 80096ac:	beab      	bkpt	0x00ab
 80096ae:	1c05      	adds	r5, r0, #0
 80096b0:	0028      	movs	r0, r5
 80096b2:	f7ff ff11 	bl	80094d8 <checkerror>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d0ec      	beq.n	8009694 <_swistat+0x18>
 80096ba:	6120      	str	r0, [r4, #16]
 80096bc:	2000      	movs	r0, #0
 80096be:	e7e9      	b.n	8009694 <_swistat+0x18>

080096c0 <_fstat>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	000c      	movs	r4, r1
 80096c4:	0005      	movs	r5, r0
 80096c6:	2258      	movs	r2, #88	; 0x58
 80096c8:	2100      	movs	r1, #0
 80096ca:	0020      	movs	r0, r4
 80096cc:	f001 fa52 	bl	800ab74 <memset>
 80096d0:	0028      	movs	r0, r5
 80096d2:	0021      	movs	r1, r4
 80096d4:	f7ff ffd2 	bl	800967c <_swistat>
 80096d8:	bd70      	pop	{r4, r5, r6, pc}

080096da <_stat>:
 80096da:	b570      	push	{r4, r5, r6, lr}
 80096dc:	000d      	movs	r5, r1
 80096de:	0004      	movs	r4, r0
 80096e0:	2258      	movs	r2, #88	; 0x58
 80096e2:	2100      	movs	r1, #0
 80096e4:	0028      	movs	r0, r5
 80096e6:	f001 fa45 	bl	800ab74 <memset>
 80096ea:	0020      	movs	r0, r4
 80096ec:	2100      	movs	r1, #0
 80096ee:	f000 f813 	bl	8009718 <_swiopen>
 80096f2:	0004      	movs	r4, r0
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d00c      	beq.n	8009712 <_stat+0x38>
 80096f8:	2381      	movs	r3, #129	; 0x81
 80096fa:	686a      	ldr	r2, [r5, #4]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	4313      	orrs	r3, r2
 8009700:	0029      	movs	r1, r5
 8009702:	606b      	str	r3, [r5, #4]
 8009704:	f7ff ffba 	bl	800967c <_swistat>
 8009708:	0005      	movs	r5, r0
 800970a:	0020      	movs	r0, r4
 800970c:	f7ff ff8e 	bl	800962c <_close>
 8009710:	002c      	movs	r4, r5
 8009712:	0020      	movs	r0, r4
 8009714:	bd70      	pop	{r4, r5, r6, pc}
	...

08009718 <_swiopen>:
 8009718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800971a:	000d      	movs	r5, r1
 800971c:	2600      	movs	r6, #0
 800971e:	4b2b      	ldr	r3, [pc, #172]	; (80097cc <_swiopen+0xb4>)
 8009720:	b09b      	sub	sp, #108	; 0x6c
 8009722:	9001      	str	r0, [sp, #4]
 8009724:	9302      	str	r3, [sp, #8]
 8009726:	00f3      	lsls	r3, r6, #3
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	00f2      	lsls	r2, r6, #3
 800972e:	589c      	ldr	r4, [r3, r2]
 8009730:	1c63      	adds	r3, r4, #1
 8009732:	d036      	beq.n	80097a2 <_swiopen+0x8a>
 8009734:	3601      	adds	r6, #1
 8009736:	2e14      	cmp	r6, #20
 8009738:	d1f5      	bne.n	8009726 <_swiopen+0xe>
 800973a:	f001 faa3 	bl	800ac84 <__errno>
 800973e:	2401      	movs	r4, #1
 8009740:	2318      	movs	r3, #24
 8009742:	4264      	negs	r4, r4
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	e03d      	b.n	80097c4 <_swiopen+0xac>
 8009748:	2302      	movs	r3, #2
 800974a:	03ec      	lsls	r4, r5, #15
 800974c:	0fe4      	lsrs	r4, r4, #31
 800974e:	421d      	tst	r5, r3
 8009750:	d000      	beq.n	8009754 <_swiopen+0x3c>
 8009752:	431c      	orrs	r4, r3
 8009754:	4b1e      	ldr	r3, [pc, #120]	; (80097d0 <_swiopen+0xb8>)
 8009756:	421d      	tst	r5, r3
 8009758:	d001      	beq.n	800975e <_swiopen+0x46>
 800975a:	2304      	movs	r3, #4
 800975c:	431c      	orrs	r4, r3
 800975e:	2308      	movs	r3, #8
 8009760:	421d      	tst	r5, r3
 8009762:	d002      	beq.n	800976a <_swiopen+0x52>
 8009764:	2204      	movs	r2, #4
 8009766:	4394      	bics	r4, r2
 8009768:	431c      	orrs	r4, r3
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	0018      	movs	r0, r3
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	f7f6 fcd4 	bl	800011c <strlen>
 8009774:	607c      	str	r4, [r7, #4]
 8009776:	60b8      	str	r0, [r7, #8]
 8009778:	2401      	movs	r4, #1
 800977a:	1c20      	adds	r0, r4, #0
 800977c:	1c39      	adds	r1, r7, #0
 800977e:	beab      	bkpt	0x00ab
 8009780:	1c04      	adds	r4, r0, #0
 8009782:	2c00      	cmp	r4, #0
 8009784:	db08      	blt.n	8009798 <_swiopen+0x80>
 8009786:	00f2      	lsls	r2, r6, #3
 8009788:	9b02      	ldr	r3, [sp, #8]
 800978a:	4694      	mov	ip, r2
 800978c:	509c      	str	r4, [r3, r2]
 800978e:	2200      	movs	r2, #0
 8009790:	4463      	add	r3, ip
 8009792:	0034      	movs	r4, r6
 8009794:	605a      	str	r2, [r3, #4]
 8009796:	e015      	b.n	80097c4 <_swiopen+0xac>
 8009798:	0020      	movs	r0, r4
 800979a:	f7ff fe8f 	bl	80094bc <error>
 800979e:	0004      	movs	r4, r0
 80097a0:	e010      	b.n	80097c4 <_swiopen+0xac>
 80097a2:	23a0      	movs	r3, #160	; 0xa0
 80097a4:	002a      	movs	r2, r5
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	401a      	ands	r2, r3
 80097aa:	af04      	add	r7, sp, #16
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d1cb      	bne.n	8009748 <_swiopen+0x30>
 80097b0:	0039      	movs	r1, r7
 80097b2:	9801      	ldr	r0, [sp, #4]
 80097b4:	f7ff ff91 	bl	80096da <_stat>
 80097b8:	3001      	adds	r0, #1
 80097ba:	d0c5      	beq.n	8009748 <_swiopen+0x30>
 80097bc:	f001 fa62 	bl	800ac84 <__errno>
 80097c0:	2311      	movs	r3, #17
 80097c2:	6003      	str	r3, [r0, #0]
 80097c4:	0020      	movs	r0, r4
 80097c6:	b01b      	add	sp, #108	; 0x6c
 80097c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	20000d30 	.word	0x20000d30
 80097d0:	00000601 	.word	0x00000601

080097d4 <_get_semihosting_exts>:
 80097d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097d6:	b085      	sub	sp, #20
 80097d8:	9000      	str	r0, [sp, #0]
 80097da:	9101      	str	r1, [sp, #4]
 80097dc:	4827      	ldr	r0, [pc, #156]	; (800987c <_get_semihosting_exts+0xa8>)
 80097de:	2100      	movs	r1, #0
 80097e0:	0015      	movs	r5, r2
 80097e2:	f7ff ff99 	bl	8009718 <_swiopen>
 80097e6:	0004      	movs	r4, r0
 80097e8:	002a      	movs	r2, r5
 80097ea:	2100      	movs	r1, #0
 80097ec:	9800      	ldr	r0, [sp, #0]
 80097ee:	f001 f9c1 	bl	800ab74 <memset>
 80097f2:	1c63      	adds	r3, r4, #1
 80097f4:	d015      	beq.n	8009822 <_get_semihosting_exts+0x4e>
 80097f6:	0020      	movs	r0, r4
 80097f8:	f7ff fe46 	bl	8009488 <findslot>
 80097fc:	260c      	movs	r6, #12
 80097fe:	0007      	movs	r7, r0
 8009800:	1c30      	adds	r0, r6, #0
 8009802:	1c39      	adds	r1, r7, #0
 8009804:	beab      	bkpt	0x00ab
 8009806:	1c06      	adds	r6, r0, #0
 8009808:	0030      	movs	r0, r6
 800980a:	f7ff fe65 	bl	80094d8 <checkerror>
 800980e:	2803      	cmp	r0, #3
 8009810:	dd02      	ble.n	8009818 <_get_semihosting_exts+0x44>
 8009812:	3803      	subs	r0, #3
 8009814:	42a8      	cmp	r0, r5
 8009816:	dc07      	bgt.n	8009828 <_get_semihosting_exts+0x54>
 8009818:	0020      	movs	r0, r4
 800981a:	2401      	movs	r4, #1
 800981c:	f7ff ff06 	bl	800962c <_close>
 8009820:	4264      	negs	r4, r4
 8009822:	0020      	movs	r0, r4
 8009824:	b005      	add	sp, #20
 8009826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009828:	ae03      	add	r6, sp, #12
 800982a:	2204      	movs	r2, #4
 800982c:	0031      	movs	r1, r6
 800982e:	0020      	movs	r0, r4
 8009830:	f7ff fe68 	bl	8009504 <_read>
 8009834:	2803      	cmp	r0, #3
 8009836:	ddef      	ble.n	8009818 <_get_semihosting_exts+0x44>
 8009838:	7833      	ldrb	r3, [r6, #0]
 800983a:	2b53      	cmp	r3, #83	; 0x53
 800983c:	d1ec      	bne.n	8009818 <_get_semihosting_exts+0x44>
 800983e:	7873      	ldrb	r3, [r6, #1]
 8009840:	2b48      	cmp	r3, #72	; 0x48
 8009842:	d1e9      	bne.n	8009818 <_get_semihosting_exts+0x44>
 8009844:	78b3      	ldrb	r3, [r6, #2]
 8009846:	2b46      	cmp	r3, #70	; 0x46
 8009848:	d1e6      	bne.n	8009818 <_get_semihosting_exts+0x44>
 800984a:	78f3      	ldrb	r3, [r6, #3]
 800984c:	2b42      	cmp	r3, #66	; 0x42
 800984e:	d1e3      	bne.n	8009818 <_get_semihosting_exts+0x44>
 8009850:	2201      	movs	r2, #1
 8009852:	0020      	movs	r0, r4
 8009854:	9901      	ldr	r1, [sp, #4]
 8009856:	f7ff fe6f 	bl	8009538 <_swilseek>
 800985a:	2800      	cmp	r0, #0
 800985c:	dbdc      	blt.n	8009818 <_get_semihosting_exts+0x44>
 800985e:	002a      	movs	r2, r5
 8009860:	9900      	ldr	r1, [sp, #0]
 8009862:	0020      	movs	r0, r4
 8009864:	f7ff fe4e 	bl	8009504 <_read>
 8009868:	0005      	movs	r5, r0
 800986a:	0020      	movs	r0, r4
 800986c:	f7ff fede 	bl	800962c <_close>
 8009870:	0028      	movs	r0, r5
 8009872:	f7ff fe31 	bl	80094d8 <checkerror>
 8009876:	0004      	movs	r4, r0
 8009878:	e7d3      	b.n	8009822 <_get_semihosting_exts+0x4e>
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	0800cbbc 	.word	0x0800cbbc

08009880 <initialise_semihosting_exts>:
 8009880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009882:	2401      	movs	r4, #1
 8009884:	2100      	movs	r1, #0
 8009886:	4e09      	ldr	r6, [pc, #36]	; (80098ac <initialise_semihosting_exts+0x2c>)
 8009888:	4d09      	ldr	r5, [pc, #36]	; (80098b0 <initialise_semihosting_exts+0x30>)
 800988a:	af01      	add	r7, sp, #4
 800988c:	0022      	movs	r2, r4
 800988e:	0038      	movs	r0, r7
 8009890:	6031      	str	r1, [r6, #0]
 8009892:	602c      	str	r4, [r5, #0]
 8009894:	f7ff ff9e 	bl	80097d4 <_get_semihosting_exts>
 8009898:	2800      	cmp	r0, #0
 800989a:	dd05      	ble.n	80098a8 <initialise_semihosting_exts+0x28>
 800989c:	2202      	movs	r2, #2
 800989e:	783b      	ldrb	r3, [r7, #0]
 80098a0:	401c      	ands	r4, r3
 80098a2:	4013      	ands	r3, r2
 80098a4:	6034      	str	r4, [r6, #0]
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	20000018 	.word	0x20000018
 80098b0:	2000001c 	.word	0x2000001c

080098b4 <_has_ext_stdout_stderr>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4c04      	ldr	r4, [pc, #16]	; (80098c8 <_has_ext_stdout_stderr+0x14>)
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	da01      	bge.n	80098c2 <_has_ext_stdout_stderr+0xe>
 80098be:	f7ff ffdf 	bl	8009880 <initialise_semihosting_exts>
 80098c2:	6820      	ldr	r0, [r4, #0]
 80098c4:	bd10      	pop	{r4, pc}
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	2000001c 	.word	0x2000001c

080098cc <initialise_monitor_handles>:
 80098cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ce:	4b28      	ldr	r3, [pc, #160]	; (8009970 <initialise_monitor_handles+0xa4>)
 80098d0:	b087      	sub	sp, #28
 80098d2:	9303      	str	r3, [sp, #12]
 80098d4:	2500      	movs	r5, #0
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	2303      	movs	r3, #3
 80098da:	ac03      	add	r4, sp, #12
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	2601      	movs	r6, #1
 80098e0:	6065      	str	r5, [r4, #4]
 80098e2:	1c30      	adds	r0, r6, #0
 80098e4:	1c21      	adds	r1, r4, #0
 80098e6:	beab      	bkpt	0x00ab
 80098e8:	1c06      	adds	r6, r0, #0
 80098ea:	2101      	movs	r1, #1
 80098ec:	4b21      	ldr	r3, [pc, #132]	; (8009974 <initialise_monitor_handles+0xa8>)
 80098ee:	4249      	negs	r1, r1
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	601e      	str	r6, [r3, #0]
 80098f4:	002b      	movs	r3, r5
 80098f6:	4d20      	ldr	r5, [pc, #128]	; (8009978 <initialise_monitor_handles+0xac>)
 80098f8:	00da      	lsls	r2, r3, #3
 80098fa:	3301      	adds	r3, #1
 80098fc:	50a9      	str	r1, [r5, r2]
 80098fe:	2b14      	cmp	r3, #20
 8009900:	d1fa      	bne.n	80098f8 <initialise_monitor_handles+0x2c>
 8009902:	f7ff ffd7 	bl	80098b4 <_has_ext_stdout_stderr>
 8009906:	2800      	cmp	r0, #0
 8009908:	d018      	beq.n	800993c <initialise_monitor_handles+0x70>
 800990a:	9b00      	ldr	r3, [sp, #0]
 800990c:	2601      	movs	r6, #1
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	2303      	movs	r3, #3
 8009912:	60a3      	str	r3, [r4, #8]
 8009914:	3301      	adds	r3, #1
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	1c30      	adds	r0, r6, #0
 800991a:	1c21      	adds	r1, r4, #0
 800991c:	beab      	bkpt	0x00ab
 800991e:	1c07      	adds	r7, r0, #0
 8009920:	4b16      	ldr	r3, [pc, #88]	; (800997c <initialise_monitor_handles+0xb0>)
 8009922:	9a00      	ldr	r2, [sp, #0]
 8009924:	601f      	str	r7, [r3, #0]
 8009926:	2303      	movs	r3, #3
 8009928:	9203      	str	r2, [sp, #12]
 800992a:	60a3      	str	r3, [r4, #8]
 800992c:	3305      	adds	r3, #5
 800992e:	6063      	str	r3, [r4, #4]
 8009930:	1c30      	adds	r0, r6, #0
 8009932:	1c21      	adds	r1, r4, #0
 8009934:	beab      	bkpt	0x00ab
 8009936:	1c06      	adds	r6, r0, #0
 8009938:	4b11      	ldr	r3, [pc, #68]	; (8009980 <initialise_monitor_handles+0xb4>)
 800993a:	601e      	str	r6, [r3, #0]
 800993c:	4e10      	ldr	r6, [pc, #64]	; (8009980 <initialise_monitor_handles+0xb4>)
 800993e:	6833      	ldr	r3, [r6, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	d102      	bne.n	800994a <initialise_monitor_handles+0x7e>
 8009944:	4b0d      	ldr	r3, [pc, #52]	; (800997c <initialise_monitor_handles+0xb0>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6033      	str	r3, [r6, #0]
 800994a:	2400      	movs	r4, #0
 800994c:	9b01      	ldr	r3, [sp, #4]
 800994e:	606c      	str	r4, [r5, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	f7ff ffae 	bl	80098b4 <_has_ext_stdout_stderr>
 8009958:	42a0      	cmp	r0, r4
 800995a:	d006      	beq.n	800996a <initialise_monitor_handles+0x9e>
 800995c:	4b07      	ldr	r3, [pc, #28]	; (800997c <initialise_monitor_handles+0xb0>)
 800995e:	60ec      	str	r4, [r5, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	616c      	str	r4, [r5, #20]
 8009964:	60ab      	str	r3, [r5, #8]
 8009966:	6833      	ldr	r3, [r6, #0]
 8009968:	612b      	str	r3, [r5, #16]
 800996a:	b007      	add	sp, #28
 800996c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800996e:	46c0      	nop			; (mov r8, r8)
 8009970:	0800cbd2 	.word	0x0800cbd2
 8009974:	20000d28 	.word	0x20000d28
 8009978:	20000d30 	.word	0x20000d30
 800997c:	20000d2c 	.word	0x20000d2c
 8009980:	20000d24 	.word	0x20000d24

08009984 <_isatty>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	f7ff fd7f 	bl	8009488 <findslot>
 800998a:	2509      	movs	r5, #9
 800998c:	1e04      	subs	r4, r0, #0
 800998e:	d104      	bne.n	800999a <_isatty+0x16>
 8009990:	f001 f978 	bl	800ac84 <__errno>
 8009994:	6005      	str	r5, [r0, #0]
 8009996:	0020      	movs	r0, r4
 8009998:	bd70      	pop	{r4, r5, r6, pc}
 800999a:	1c28      	adds	r0, r5, #0
 800999c:	1c21      	adds	r1, r4, #0
 800999e:	beab      	bkpt	0x00ab
 80099a0:	1c04      	adds	r4, r0, #0
 80099a2:	0020      	movs	r0, r4
 80099a4:	2c01      	cmp	r4, #1
 80099a6:	d0f7      	beq.n	8009998 <_isatty+0x14>
 80099a8:	f001 f96c 	bl	800ac84 <__errno>
 80099ac:	2400      	movs	r4, #0
 80099ae:	0005      	movs	r5, r0
 80099b0:	2613      	movs	r6, #19
 80099b2:	1c30      	adds	r0, r6, #0
 80099b4:	1c21      	adds	r1, r4, #0
 80099b6:	beab      	bkpt	0x00ab
 80099b8:	1c06      	adds	r6, r0, #0
 80099ba:	602e      	str	r6, [r5, #0]
 80099bc:	e7eb      	b.n	8009996 <_isatty+0x12>

080099be <atoi>:
 80099be:	b510      	push	{r4, lr}
 80099c0:	220a      	movs	r2, #10
 80099c2:	2100      	movs	r1, #0
 80099c4:	f000 ffba 	bl	800a93c <strtol>
 80099c8:	bd10      	pop	{r4, pc}
	...

080099cc <malloc>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4b03      	ldr	r3, [pc, #12]	; (80099dc <malloc+0x10>)
 80099d0:	0001      	movs	r1, r0
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	f000 f830 	bl	8009a38 <_malloc_r>
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	200001e4 	.word	0x200001e4

080099e0 <free>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	4b03      	ldr	r3, [pc, #12]	; (80099f0 <free+0x10>)
 80099e4:	0001      	movs	r1, r0
 80099e6:	6818      	ldr	r0, [r3, #0]
 80099e8:	f001 f990 	bl	800ad0c <_free_r>
 80099ec:	bd10      	pop	{r4, pc}
 80099ee:	46c0      	nop			; (mov r8, r8)
 80099f0:	200001e4 	.word	0x200001e4

080099f4 <sbrk_aligned>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	4e0f      	ldr	r6, [pc, #60]	; (8009a34 <sbrk_aligned+0x40>)
 80099f8:	000d      	movs	r5, r1
 80099fa:	6831      	ldr	r1, [r6, #0]
 80099fc:	0004      	movs	r4, r0
 80099fe:	2900      	cmp	r1, #0
 8009a00:	d102      	bne.n	8009a08 <sbrk_aligned+0x14>
 8009a02:	f001 f919 	bl	800ac38 <_sbrk_r>
 8009a06:	6030      	str	r0, [r6, #0]
 8009a08:	0029      	movs	r1, r5
 8009a0a:	0020      	movs	r0, r4
 8009a0c:	f001 f914 	bl	800ac38 <_sbrk_r>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d00a      	beq.n	8009a2a <sbrk_aligned+0x36>
 8009a14:	2303      	movs	r3, #3
 8009a16:	1cc5      	adds	r5, r0, #3
 8009a18:	439d      	bics	r5, r3
 8009a1a:	42a8      	cmp	r0, r5
 8009a1c:	d007      	beq.n	8009a2e <sbrk_aligned+0x3a>
 8009a1e:	1a29      	subs	r1, r5, r0
 8009a20:	0020      	movs	r0, r4
 8009a22:	f001 f909 	bl	800ac38 <_sbrk_r>
 8009a26:	3001      	adds	r0, #1
 8009a28:	d101      	bne.n	8009a2e <sbrk_aligned+0x3a>
 8009a2a:	2501      	movs	r5, #1
 8009a2c:	426d      	negs	r5, r5
 8009a2e:	0028      	movs	r0, r5
 8009a30:	bd70      	pop	{r4, r5, r6, pc}
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	20000dd4 	.word	0x20000dd4

08009a38 <_malloc_r>:
 8009a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	1ccb      	adds	r3, r1, #3
 8009a3e:	4393      	bics	r3, r2
 8009a40:	3308      	adds	r3, #8
 8009a42:	0006      	movs	r6, r0
 8009a44:	001f      	movs	r7, r3
 8009a46:	2b0c      	cmp	r3, #12
 8009a48:	d238      	bcs.n	8009abc <_malloc_r+0x84>
 8009a4a:	270c      	movs	r7, #12
 8009a4c:	42b9      	cmp	r1, r7
 8009a4e:	d837      	bhi.n	8009ac0 <_malloc_r+0x88>
 8009a50:	0030      	movs	r0, r6
 8009a52:	f000 f873 	bl	8009b3c <__malloc_lock>
 8009a56:	4b38      	ldr	r3, [pc, #224]	; (8009b38 <_malloc_r+0x100>)
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	001c      	movs	r4, r3
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	d133      	bne.n	8009aca <_malloc_r+0x92>
 8009a62:	0039      	movs	r1, r7
 8009a64:	0030      	movs	r0, r6
 8009a66:	f7ff ffc5 	bl	80099f4 <sbrk_aligned>
 8009a6a:	0004      	movs	r4, r0
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d15e      	bne.n	8009b2e <_malloc_r+0xf6>
 8009a70:	9b00      	ldr	r3, [sp, #0]
 8009a72:	681c      	ldr	r4, [r3, #0]
 8009a74:	0025      	movs	r5, r4
 8009a76:	2d00      	cmp	r5, #0
 8009a78:	d14e      	bne.n	8009b18 <_malloc_r+0xe0>
 8009a7a:	2c00      	cmp	r4, #0
 8009a7c:	d051      	beq.n	8009b22 <_malloc_r+0xea>
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	0029      	movs	r1, r5
 8009a82:	18e3      	adds	r3, r4, r3
 8009a84:	0030      	movs	r0, r6
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	f001 f8d6 	bl	800ac38 <_sbrk_r>
 8009a8c:	9b01      	ldr	r3, [sp, #4]
 8009a8e:	4283      	cmp	r3, r0
 8009a90:	d147      	bne.n	8009b22 <_malloc_r+0xea>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	0030      	movs	r0, r6
 8009a96:	1aff      	subs	r7, r7, r3
 8009a98:	0039      	movs	r1, r7
 8009a9a:	f7ff ffab 	bl	80099f4 <sbrk_aligned>
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d03f      	beq.n	8009b22 <_malloc_r+0xea>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	19db      	adds	r3, r3, r7
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	9b00      	ldr	r3, [sp, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d040      	beq.n	8009b32 <_malloc_r+0xfa>
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	42a2      	cmp	r2, r4
 8009ab4:	d133      	bne.n	8009b1e <_malloc_r+0xe6>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	605a      	str	r2, [r3, #4]
 8009aba:	e014      	b.n	8009ae6 <_malloc_r+0xae>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dac5      	bge.n	8009a4c <_malloc_r+0x14>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	6033      	str	r3, [r6, #0]
 8009ac6:	0028      	movs	r0, r5
 8009ac8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009aca:	6821      	ldr	r1, [r4, #0]
 8009acc:	1bc9      	subs	r1, r1, r7
 8009ace:	d420      	bmi.n	8009b12 <_malloc_r+0xda>
 8009ad0:	290b      	cmp	r1, #11
 8009ad2:	d918      	bls.n	8009b06 <_malloc_r+0xce>
 8009ad4:	19e2      	adds	r2, r4, r7
 8009ad6:	6027      	str	r7, [r4, #0]
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d112      	bne.n	8009b02 <_malloc_r+0xca>
 8009adc:	9b00      	ldr	r3, [sp, #0]
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	6863      	ldr	r3, [r4, #4]
 8009ae2:	6011      	str	r1, [r2, #0]
 8009ae4:	6053      	str	r3, [r2, #4]
 8009ae6:	0030      	movs	r0, r6
 8009ae8:	0025      	movs	r5, r4
 8009aea:	f000 f82f 	bl	8009b4c <__malloc_unlock>
 8009aee:	2207      	movs	r2, #7
 8009af0:	350b      	adds	r5, #11
 8009af2:	1d23      	adds	r3, r4, #4
 8009af4:	4395      	bics	r5, r2
 8009af6:	1aea      	subs	r2, r5, r3
 8009af8:	429d      	cmp	r5, r3
 8009afa:	d0e4      	beq.n	8009ac6 <_malloc_r+0x8e>
 8009afc:	1b5b      	subs	r3, r3, r5
 8009afe:	50a3      	str	r3, [r4, r2]
 8009b00:	e7e1      	b.n	8009ac6 <_malloc_r+0x8e>
 8009b02:	605a      	str	r2, [r3, #4]
 8009b04:	e7ec      	b.n	8009ae0 <_malloc_r+0xa8>
 8009b06:	6862      	ldr	r2, [r4, #4]
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d1d5      	bne.n	8009ab8 <_malloc_r+0x80>
 8009b0c:	9b00      	ldr	r3, [sp, #0]
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	e7e9      	b.n	8009ae6 <_malloc_r+0xae>
 8009b12:	0023      	movs	r3, r4
 8009b14:	6864      	ldr	r4, [r4, #4]
 8009b16:	e7a2      	b.n	8009a5e <_malloc_r+0x26>
 8009b18:	002c      	movs	r4, r5
 8009b1a:	686d      	ldr	r5, [r5, #4]
 8009b1c:	e7ab      	b.n	8009a76 <_malloc_r+0x3e>
 8009b1e:	0013      	movs	r3, r2
 8009b20:	e7c4      	b.n	8009aac <_malloc_r+0x74>
 8009b22:	230c      	movs	r3, #12
 8009b24:	0030      	movs	r0, r6
 8009b26:	6033      	str	r3, [r6, #0]
 8009b28:	f000 f810 	bl	8009b4c <__malloc_unlock>
 8009b2c:	e7cb      	b.n	8009ac6 <_malloc_r+0x8e>
 8009b2e:	6027      	str	r7, [r4, #0]
 8009b30:	e7d9      	b.n	8009ae6 <_malloc_r+0xae>
 8009b32:	605b      	str	r3, [r3, #4]
 8009b34:	deff      	udf	#255	; 0xff
 8009b36:	46c0      	nop			; (mov r8, r8)
 8009b38:	20000dd0 	.word	0x20000dd0

08009b3c <__malloc_lock>:
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	4802      	ldr	r0, [pc, #8]	; (8009b48 <__malloc_lock+0xc>)
 8009b40:	f001 f8cb 	bl	800acda <__retarget_lock_acquire_recursive>
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	20000f18 	.word	0x20000f18

08009b4c <__malloc_unlock>:
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	4802      	ldr	r0, [pc, #8]	; (8009b58 <__malloc_unlock+0xc>)
 8009b50:	f001 f8c4 	bl	800acdc <__retarget_lock_release_recursive>
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	46c0      	nop			; (mov r8, r8)
 8009b58:	20000f18 	.word	0x20000f18

08009b5c <realloc>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4b03      	ldr	r3, [pc, #12]	; (8009b6c <realloc+0x10>)
 8009b60:	000a      	movs	r2, r1
 8009b62:	0001      	movs	r1, r0
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f000 f803 	bl	8009b70 <_realloc_r>
 8009b6a:	bd10      	pop	{r4, pc}
 8009b6c:	200001e4 	.word	0x200001e4

08009b70 <_realloc_r>:
 8009b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b72:	0007      	movs	r7, r0
 8009b74:	000e      	movs	r6, r1
 8009b76:	0014      	movs	r4, r2
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d105      	bne.n	8009b88 <_realloc_r+0x18>
 8009b7c:	0011      	movs	r1, r2
 8009b7e:	f7ff ff5b 	bl	8009a38 <_malloc_r>
 8009b82:	0005      	movs	r5, r0
 8009b84:	0028      	movs	r0, r5
 8009b86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b88:	2a00      	cmp	r2, #0
 8009b8a:	d103      	bne.n	8009b94 <_realloc_r+0x24>
 8009b8c:	f001 f8be 	bl	800ad0c <_free_r>
 8009b90:	0025      	movs	r5, r4
 8009b92:	e7f7      	b.n	8009b84 <_realloc_r+0x14>
 8009b94:	f002 f92d 	bl	800bdf2 <_malloc_usable_size_r>
 8009b98:	9001      	str	r0, [sp, #4]
 8009b9a:	4284      	cmp	r4, r0
 8009b9c:	d803      	bhi.n	8009ba6 <_realloc_r+0x36>
 8009b9e:	0035      	movs	r5, r6
 8009ba0:	0843      	lsrs	r3, r0, #1
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	d3ee      	bcc.n	8009b84 <_realloc_r+0x14>
 8009ba6:	0021      	movs	r1, r4
 8009ba8:	0038      	movs	r0, r7
 8009baa:	f7ff ff45 	bl	8009a38 <_malloc_r>
 8009bae:	1e05      	subs	r5, r0, #0
 8009bb0:	d0e8      	beq.n	8009b84 <_realloc_r+0x14>
 8009bb2:	9b01      	ldr	r3, [sp, #4]
 8009bb4:	0022      	movs	r2, r4
 8009bb6:	429c      	cmp	r4, r3
 8009bb8:	d900      	bls.n	8009bbc <_realloc_r+0x4c>
 8009bba:	001a      	movs	r2, r3
 8009bbc:	0031      	movs	r1, r6
 8009bbe:	0028      	movs	r0, r5
 8009bc0:	f001 f895 	bl	800acee <memcpy>
 8009bc4:	0031      	movs	r1, r6
 8009bc6:	0038      	movs	r0, r7
 8009bc8:	f001 f8a0 	bl	800ad0c <_free_r>
 8009bcc:	e7da      	b.n	8009b84 <_realloc_r+0x14>
	...

08009bd0 <sulp>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	0016      	movs	r6, r2
 8009bd4:	000d      	movs	r5, r1
 8009bd6:	f001 ffd7 	bl	800bb88 <__ulp>
 8009bda:	2e00      	cmp	r6, #0
 8009bdc:	d00d      	beq.n	8009bfa <sulp+0x2a>
 8009bde:	236b      	movs	r3, #107	; 0x6b
 8009be0:	006a      	lsls	r2, r5, #1
 8009be2:	0d52      	lsrs	r2, r2, #21
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dd07      	ble.n	8009bfa <sulp+0x2a>
 8009bea:	2400      	movs	r4, #0
 8009bec:	4a03      	ldr	r2, [pc, #12]	; (8009bfc <sulp+0x2c>)
 8009bee:	051b      	lsls	r3, r3, #20
 8009bf0:	189d      	adds	r5, r3, r2
 8009bf2:	002b      	movs	r3, r5
 8009bf4:	0022      	movs	r2, r4
 8009bf6:	f7f7 fd45 	bl	8001684 <__aeabi_dmul>
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	3ff00000 	.word	0x3ff00000

08009c00 <_strtod_l>:
 8009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c02:	b0a1      	sub	sp, #132	; 0x84
 8009c04:	9219      	str	r2, [sp, #100]	; 0x64
 8009c06:	2200      	movs	r2, #0
 8009c08:	2600      	movs	r6, #0
 8009c0a:	2700      	movs	r7, #0
 8009c0c:	9004      	str	r0, [sp, #16]
 8009c0e:	9107      	str	r1, [sp, #28]
 8009c10:	921c      	str	r2, [sp, #112]	; 0x70
 8009c12:	911b      	str	r1, [sp, #108]	; 0x6c
 8009c14:	780a      	ldrb	r2, [r1, #0]
 8009c16:	2a2b      	cmp	r2, #43	; 0x2b
 8009c18:	d055      	beq.n	8009cc6 <_strtod_l+0xc6>
 8009c1a:	d841      	bhi.n	8009ca0 <_strtod_l+0xa0>
 8009c1c:	2a0d      	cmp	r2, #13
 8009c1e:	d83b      	bhi.n	8009c98 <_strtod_l+0x98>
 8009c20:	2a08      	cmp	r2, #8
 8009c22:	d83b      	bhi.n	8009c9c <_strtod_l+0x9c>
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	d044      	beq.n	8009cb2 <_strtod_l+0xb2>
 8009c28:	2200      	movs	r2, #0
 8009c2a:	920f      	str	r2, [sp, #60]	; 0x3c
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c30:	9109      	str	r1, [sp, #36]	; 0x24
 8009c32:	782a      	ldrb	r2, [r5, #0]
 8009c34:	2a30      	cmp	r2, #48	; 0x30
 8009c36:	d000      	beq.n	8009c3a <_strtod_l+0x3a>
 8009c38:	e085      	b.n	8009d46 <_strtod_l+0x146>
 8009c3a:	786a      	ldrb	r2, [r5, #1]
 8009c3c:	3120      	adds	r1, #32
 8009c3e:	438a      	bics	r2, r1
 8009c40:	2a58      	cmp	r2, #88	; 0x58
 8009c42:	d000      	beq.n	8009c46 <_strtod_l+0x46>
 8009c44:	e075      	b.n	8009d32 <_strtod_l+0x132>
 8009c46:	9302      	str	r3, [sp, #8]
 8009c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c4a:	4a97      	ldr	r2, [pc, #604]	; (8009ea8 <_strtod_l+0x2a8>)
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	ab1c      	add	r3, sp, #112	; 0x70
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	9804      	ldr	r0, [sp, #16]
 8009c54:	ab1d      	add	r3, sp, #116	; 0x74
 8009c56:	a91b      	add	r1, sp, #108	; 0x6c
 8009c58:	f001 f90c 	bl	800ae74 <__gethex>
 8009c5c:	230f      	movs	r3, #15
 8009c5e:	0002      	movs	r2, r0
 8009c60:	401a      	ands	r2, r3
 8009c62:	0004      	movs	r4, r0
 8009c64:	9205      	str	r2, [sp, #20]
 8009c66:	4218      	tst	r0, r3
 8009c68:	d005      	beq.n	8009c76 <_strtod_l+0x76>
 8009c6a:	2a06      	cmp	r2, #6
 8009c6c:	d12d      	bne.n	8009cca <_strtod_l+0xca>
 8009c6e:	1c6b      	adds	r3, r5, #1
 8009c70:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c72:	2300      	movs	r3, #0
 8009c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <_strtod_l+0x82>
 8009c7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01b      	beq.n	8009cc0 <_strtod_l+0xc0>
 8009c88:	2380      	movs	r3, #128	; 0x80
 8009c8a:	0032      	movs	r2, r6
 8009c8c:	061b      	lsls	r3, r3, #24
 8009c8e:	18fb      	adds	r3, r7, r3
 8009c90:	0010      	movs	r0, r2
 8009c92:	0019      	movs	r1, r3
 8009c94:	b021      	add	sp, #132	; 0x84
 8009c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c98:	2a20      	cmp	r2, #32
 8009c9a:	d1c5      	bne.n	8009c28 <_strtod_l+0x28>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	e7b8      	b.n	8009c12 <_strtod_l+0x12>
 8009ca0:	2a2d      	cmp	r2, #45	; 0x2d
 8009ca2:	d1c1      	bne.n	8009c28 <_strtod_l+0x28>
 8009ca4:	3a2c      	subs	r2, #44	; 0x2c
 8009ca6:	920f      	str	r2, [sp, #60]	; 0x3c
 8009ca8:	1c4a      	adds	r2, r1, #1
 8009caa:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cac:	784a      	ldrb	r2, [r1, #1]
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	d1bc      	bne.n	8009c2c <_strtod_l+0x2c>
 8009cb2:	9b07      	ldr	r3, [sp, #28]
 8009cb4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1dd      	bne.n	8009c7c <_strtod_l+0x7c>
 8009cc0:	0032      	movs	r2, r6
 8009cc2:	003b      	movs	r3, r7
 8009cc4:	e7e4      	b.n	8009c90 <_strtod_l+0x90>
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	e7ed      	b.n	8009ca6 <_strtod_l+0xa6>
 8009cca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ccc:	2a00      	cmp	r2, #0
 8009cce:	d007      	beq.n	8009ce0 <_strtod_l+0xe0>
 8009cd0:	2135      	movs	r1, #53	; 0x35
 8009cd2:	a81e      	add	r0, sp, #120	; 0x78
 8009cd4:	f002 f849 	bl	800bd6a <__copybits>
 8009cd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cda:	9804      	ldr	r0, [sp, #16]
 8009cdc:	f001 fc12 	bl	800b504 <_Bfree>
 8009ce0:	9805      	ldr	r0, [sp, #20]
 8009ce2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ce4:	3801      	subs	r0, #1
 8009ce6:	2804      	cmp	r0, #4
 8009ce8:	d806      	bhi.n	8009cf8 <_strtod_l+0xf8>
 8009cea:	f7f6 fa1f 	bl	800012c <__gnu_thumb1_case_uqi>
 8009cee:	0312      	.short	0x0312
 8009cf0:	1e1c      	.short	0x1e1c
 8009cf2:	12          	.byte	0x12
 8009cf3:	00          	.byte	0x00
 8009cf4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009cf6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009cf8:	05e4      	lsls	r4, r4, #23
 8009cfa:	d502      	bpl.n	8009d02 <_strtod_l+0x102>
 8009cfc:	2380      	movs	r3, #128	; 0x80
 8009cfe:	061b      	lsls	r3, r3, #24
 8009d00:	431f      	orrs	r7, r3
 8009d02:	4b6a      	ldr	r3, [pc, #424]	; (8009eac <_strtod_l+0x2ac>)
 8009d04:	423b      	tst	r3, r7
 8009d06:	d1b6      	bne.n	8009c76 <_strtod_l+0x76>
 8009d08:	f000 ffbc 	bl	800ac84 <__errno>
 8009d0c:	2322      	movs	r3, #34	; 0x22
 8009d0e:	6003      	str	r3, [r0, #0]
 8009d10:	e7b1      	b.n	8009c76 <_strtod_l+0x76>
 8009d12:	4967      	ldr	r1, [pc, #412]	; (8009eb0 <_strtod_l+0x2b0>)
 8009d14:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009d16:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009d18:	400a      	ands	r2, r1
 8009d1a:	4966      	ldr	r1, [pc, #408]	; (8009eb4 <_strtod_l+0x2b4>)
 8009d1c:	185b      	adds	r3, r3, r1
 8009d1e:	051b      	lsls	r3, r3, #20
 8009d20:	431a      	orrs	r2, r3
 8009d22:	0017      	movs	r7, r2
 8009d24:	e7e8      	b.n	8009cf8 <_strtod_l+0xf8>
 8009d26:	4f61      	ldr	r7, [pc, #388]	; (8009eac <_strtod_l+0x2ac>)
 8009d28:	e7e6      	b.n	8009cf8 <_strtod_l+0xf8>
 8009d2a:	2601      	movs	r6, #1
 8009d2c:	4f62      	ldr	r7, [pc, #392]	; (8009eb8 <_strtod_l+0x2b8>)
 8009d2e:	4276      	negs	r6, r6
 8009d30:	e7e2      	b.n	8009cf8 <_strtod_l+0xf8>
 8009d32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d38:	785b      	ldrb	r3, [r3, #1]
 8009d3a:	2b30      	cmp	r3, #48	; 0x30
 8009d3c:	d0f9      	beq.n	8009d32 <_strtod_l+0x132>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d099      	beq.n	8009c76 <_strtod_l+0x76>
 8009d42:	2301      	movs	r3, #1
 8009d44:	9309      	str	r3, [sp, #36]	; 0x24
 8009d46:	2500      	movs	r5, #0
 8009d48:	220a      	movs	r2, #10
 8009d4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d4c:	950d      	str	r5, [sp, #52]	; 0x34
 8009d4e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d50:	9508      	str	r5, [sp, #32]
 8009d52:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009d54:	7804      	ldrb	r4, [r0, #0]
 8009d56:	0023      	movs	r3, r4
 8009d58:	3b30      	subs	r3, #48	; 0x30
 8009d5a:	b2d9      	uxtb	r1, r3
 8009d5c:	2909      	cmp	r1, #9
 8009d5e:	d927      	bls.n	8009db0 <_strtod_l+0x1b0>
 8009d60:	2201      	movs	r2, #1
 8009d62:	4956      	ldr	r1, [pc, #344]	; (8009ebc <_strtod_l+0x2bc>)
 8009d64:	f000 ff1c 	bl	800aba0 <strncmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d031      	beq.n	8009dd0 <_strtod_l+0x1d0>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	0023      	movs	r3, r4
 8009d70:	4684      	mov	ip, r0
 8009d72:	9a08      	ldr	r2, [sp, #32]
 8009d74:	900c      	str	r0, [sp, #48]	; 0x30
 8009d76:	9205      	str	r2, [sp, #20]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	0019      	movs	r1, r3
 8009d7c:	4391      	bics	r1, r2
 8009d7e:	000a      	movs	r2, r1
 8009d80:	2100      	movs	r1, #0
 8009d82:	9106      	str	r1, [sp, #24]
 8009d84:	2a45      	cmp	r2, #69	; 0x45
 8009d86:	d000      	beq.n	8009d8a <_strtod_l+0x18a>
 8009d88:	e0c2      	b.n	8009f10 <_strtod_l+0x310>
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d8e:	4303      	orrs	r3, r0
 8009d90:	4313      	orrs	r3, r2
 8009d92:	428b      	cmp	r3, r1
 8009d94:	d08d      	beq.n	8009cb2 <_strtod_l+0xb2>
 8009d96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d98:	9307      	str	r3, [sp, #28]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d9e:	9b07      	ldr	r3, [sp, #28]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b2b      	cmp	r3, #43	; 0x2b
 8009da4:	d071      	beq.n	8009e8a <_strtod_l+0x28a>
 8009da6:	000c      	movs	r4, r1
 8009da8:	2b2d      	cmp	r3, #45	; 0x2d
 8009daa:	d174      	bne.n	8009e96 <_strtod_l+0x296>
 8009dac:	2401      	movs	r4, #1
 8009dae:	e06d      	b.n	8009e8c <_strtod_l+0x28c>
 8009db0:	9908      	ldr	r1, [sp, #32]
 8009db2:	2908      	cmp	r1, #8
 8009db4:	dc09      	bgt.n	8009dca <_strtod_l+0x1ca>
 8009db6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009db8:	4351      	muls	r1, r2
 8009dba:	185b      	adds	r3, r3, r1
 8009dbc:	930d      	str	r3, [sp, #52]	; 0x34
 8009dbe:	9b08      	ldr	r3, [sp, #32]
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	9308      	str	r3, [sp, #32]
 8009dc6:	901b      	str	r0, [sp, #108]	; 0x6c
 8009dc8:	e7c3      	b.n	8009d52 <_strtod_l+0x152>
 8009dca:	4355      	muls	r5, r2
 8009dcc:	195d      	adds	r5, r3, r5
 8009dce:	e7f6      	b.n	8009dbe <_strtod_l+0x1be>
 8009dd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dd6:	9a08      	ldr	r2, [sp, #32]
 8009dd8:	785b      	ldrb	r3, [r3, #1]
 8009dda:	2a00      	cmp	r2, #0
 8009ddc:	d03a      	beq.n	8009e54 <_strtod_l+0x254>
 8009dde:	900c      	str	r0, [sp, #48]	; 0x30
 8009de0:	9205      	str	r2, [sp, #20]
 8009de2:	001a      	movs	r2, r3
 8009de4:	3a30      	subs	r2, #48	; 0x30
 8009de6:	2a09      	cmp	r2, #9
 8009de8:	d912      	bls.n	8009e10 <_strtod_l+0x210>
 8009dea:	2201      	movs	r2, #1
 8009dec:	4694      	mov	ip, r2
 8009dee:	e7c3      	b.n	8009d78 <_strtod_l+0x178>
 8009df0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009df2:	3001      	adds	r0, #1
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	921b      	str	r2, [sp, #108]	; 0x6c
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b30      	cmp	r3, #48	; 0x30
 8009dfc:	d0f8      	beq.n	8009df0 <_strtod_l+0x1f0>
 8009dfe:	001a      	movs	r2, r3
 8009e00:	3a31      	subs	r2, #49	; 0x31
 8009e02:	2a08      	cmp	r2, #8
 8009e04:	d83c      	bhi.n	8009e80 <_strtod_l+0x280>
 8009e06:	900c      	str	r0, [sp, #48]	; 0x30
 8009e08:	2000      	movs	r0, #0
 8009e0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009e0c:	9005      	str	r0, [sp, #20]
 8009e0e:	9210      	str	r2, [sp, #64]	; 0x40
 8009e10:	001a      	movs	r2, r3
 8009e12:	1c41      	adds	r1, r0, #1
 8009e14:	3a30      	subs	r2, #48	; 0x30
 8009e16:	2b30      	cmp	r3, #48	; 0x30
 8009e18:	d016      	beq.n	8009e48 <_strtod_l+0x248>
 8009e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e1c:	185b      	adds	r3, r3, r1
 8009e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e20:	9b05      	ldr	r3, [sp, #20]
 8009e22:	210a      	movs	r1, #10
 8009e24:	469c      	mov	ip, r3
 8009e26:	4484      	add	ip, r0
 8009e28:	4563      	cmp	r3, ip
 8009e2a:	d115      	bne.n	8009e58 <_strtod_l+0x258>
 8009e2c:	9905      	ldr	r1, [sp, #20]
 8009e2e:	9b05      	ldr	r3, [sp, #20]
 8009e30:	3101      	adds	r1, #1
 8009e32:	1809      	adds	r1, r1, r0
 8009e34:	181b      	adds	r3, r3, r0
 8009e36:	9105      	str	r1, [sp, #20]
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	dc19      	bgt.n	8009e70 <_strtod_l+0x270>
 8009e3c:	230a      	movs	r3, #10
 8009e3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e40:	434b      	muls	r3, r1
 8009e42:	2100      	movs	r1, #0
 8009e44:	18d3      	adds	r3, r2, r3
 8009e46:	930d      	str	r3, [sp, #52]	; 0x34
 8009e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e4a:	0008      	movs	r0, r1
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	e7c6      	b.n	8009de2 <_strtod_l+0x1e2>
 8009e54:	9808      	ldr	r0, [sp, #32]
 8009e56:	e7d0      	b.n	8009dfa <_strtod_l+0x1fa>
 8009e58:	1c5c      	adds	r4, r3, #1
 8009e5a:	2b08      	cmp	r3, #8
 8009e5c:	dc04      	bgt.n	8009e68 <_strtod_l+0x268>
 8009e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e60:	434b      	muls	r3, r1
 8009e62:	930d      	str	r3, [sp, #52]	; 0x34
 8009e64:	0023      	movs	r3, r4
 8009e66:	e7df      	b.n	8009e28 <_strtod_l+0x228>
 8009e68:	2c10      	cmp	r4, #16
 8009e6a:	dcfb      	bgt.n	8009e64 <_strtod_l+0x264>
 8009e6c:	434d      	muls	r5, r1
 8009e6e:	e7f9      	b.n	8009e64 <_strtod_l+0x264>
 8009e70:	9b05      	ldr	r3, [sp, #20]
 8009e72:	2100      	movs	r1, #0
 8009e74:	2b10      	cmp	r3, #16
 8009e76:	dce7      	bgt.n	8009e48 <_strtod_l+0x248>
 8009e78:	230a      	movs	r3, #10
 8009e7a:	435d      	muls	r5, r3
 8009e7c:	1955      	adds	r5, r2, r5
 8009e7e:	e7e3      	b.n	8009e48 <_strtod_l+0x248>
 8009e80:	2200      	movs	r2, #0
 8009e82:	920c      	str	r2, [sp, #48]	; 0x30
 8009e84:	9205      	str	r2, [sp, #20]
 8009e86:	3201      	adds	r2, #1
 8009e88:	e7b0      	b.n	8009dec <_strtod_l+0x1ec>
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	3302      	adds	r3, #2
 8009e90:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e92:	9b07      	ldr	r3, [sp, #28]
 8009e94:	789b      	ldrb	r3, [r3, #2]
 8009e96:	001a      	movs	r2, r3
 8009e98:	3a30      	subs	r2, #48	; 0x30
 8009e9a:	2a09      	cmp	r2, #9
 8009e9c:	d914      	bls.n	8009ec8 <_strtod_l+0x2c8>
 8009e9e:	9a07      	ldr	r2, [sp, #28]
 8009ea0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	e033      	b.n	8009f0e <_strtod_l+0x30e>
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	0800cbe4 	.word	0x0800cbe4
 8009eac:	7ff00000 	.word	0x7ff00000
 8009eb0:	ffefffff 	.word	0xffefffff
 8009eb4:	00000433 	.word	0x00000433
 8009eb8:	7fffffff 	.word	0x7fffffff
 8009ebc:	0800cbd6 	.word	0x0800cbd6
 8009ec0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	921b      	str	r2, [sp, #108]	; 0x6c
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	2b30      	cmp	r3, #48	; 0x30
 8009eca:	d0f9      	beq.n	8009ec0 <_strtod_l+0x2c0>
 8009ecc:	2200      	movs	r2, #0
 8009ece:	9206      	str	r2, [sp, #24]
 8009ed0:	001a      	movs	r2, r3
 8009ed2:	3a31      	subs	r2, #49	; 0x31
 8009ed4:	2a08      	cmp	r2, #8
 8009ed6:	d81b      	bhi.n	8009f10 <_strtod_l+0x310>
 8009ed8:	3b30      	subs	r3, #48	; 0x30
 8009eda:	930e      	str	r3, [sp, #56]	; 0x38
 8009edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ede:	9306      	str	r3, [sp, #24]
 8009ee0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ee2:	1c59      	adds	r1, r3, #1
 8009ee4:	911b      	str	r1, [sp, #108]	; 0x6c
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	001a      	movs	r2, r3
 8009eea:	3a30      	subs	r2, #48	; 0x30
 8009eec:	2a09      	cmp	r2, #9
 8009eee:	d93a      	bls.n	8009f66 <_strtod_l+0x366>
 8009ef0:	9a06      	ldr	r2, [sp, #24]
 8009ef2:	1a8a      	subs	r2, r1, r2
 8009ef4:	49b2      	ldr	r1, [pc, #712]	; (800a1c0 <_strtod_l+0x5c0>)
 8009ef6:	9106      	str	r1, [sp, #24]
 8009ef8:	2a08      	cmp	r2, #8
 8009efa:	dc04      	bgt.n	8009f06 <_strtod_l+0x306>
 8009efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009efe:	9206      	str	r2, [sp, #24]
 8009f00:	428a      	cmp	r2, r1
 8009f02:	dd00      	ble.n	8009f06 <_strtod_l+0x306>
 8009f04:	9106      	str	r1, [sp, #24]
 8009f06:	2c00      	cmp	r4, #0
 8009f08:	d002      	beq.n	8009f10 <_strtod_l+0x310>
 8009f0a:	9a06      	ldr	r2, [sp, #24]
 8009f0c:	4252      	negs	r2, r2
 8009f0e:	9206      	str	r2, [sp, #24]
 8009f10:	9a05      	ldr	r2, [sp, #20]
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	d14d      	bne.n	8009fb2 <_strtod_l+0x3b2>
 8009f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f18:	4310      	orrs	r0, r2
 8009f1a:	d000      	beq.n	8009f1e <_strtod_l+0x31e>
 8009f1c:	e6ab      	b.n	8009c76 <_strtod_l+0x76>
 8009f1e:	4662      	mov	r2, ip
 8009f20:	2a00      	cmp	r2, #0
 8009f22:	d000      	beq.n	8009f26 <_strtod_l+0x326>
 8009f24:	e6c5      	b.n	8009cb2 <_strtod_l+0xb2>
 8009f26:	2b69      	cmp	r3, #105	; 0x69
 8009f28:	d027      	beq.n	8009f7a <_strtod_l+0x37a>
 8009f2a:	dc23      	bgt.n	8009f74 <_strtod_l+0x374>
 8009f2c:	2b49      	cmp	r3, #73	; 0x49
 8009f2e:	d024      	beq.n	8009f7a <_strtod_l+0x37a>
 8009f30:	2b4e      	cmp	r3, #78	; 0x4e
 8009f32:	d000      	beq.n	8009f36 <_strtod_l+0x336>
 8009f34:	e6bd      	b.n	8009cb2 <_strtod_l+0xb2>
 8009f36:	49a3      	ldr	r1, [pc, #652]	; (800a1c4 <_strtod_l+0x5c4>)
 8009f38:	a81b      	add	r0, sp, #108	; 0x6c
 8009f3a:	f001 f9d1 	bl	800b2e0 <__match>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d100      	bne.n	8009f44 <_strtod_l+0x344>
 8009f42:	e6b6      	b.n	8009cb2 <_strtod_l+0xb2>
 8009f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b28      	cmp	r3, #40	; 0x28
 8009f4a:	d12c      	bne.n	8009fa6 <_strtod_l+0x3a6>
 8009f4c:	499e      	ldr	r1, [pc, #632]	; (800a1c8 <_strtod_l+0x5c8>)
 8009f4e:	aa1e      	add	r2, sp, #120	; 0x78
 8009f50:	a81b      	add	r0, sp, #108	; 0x6c
 8009f52:	f001 f9d9 	bl	800b308 <__hexnan>
 8009f56:	2805      	cmp	r0, #5
 8009f58:	d125      	bne.n	8009fa6 <_strtod_l+0x3a6>
 8009f5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f5c:	4a9b      	ldr	r2, [pc, #620]	; (800a1cc <_strtod_l+0x5cc>)
 8009f5e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009f60:	431a      	orrs	r2, r3
 8009f62:	0017      	movs	r7, r2
 8009f64:	e687      	b.n	8009c76 <_strtod_l+0x76>
 8009f66:	220a      	movs	r2, #10
 8009f68:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f6a:	434a      	muls	r2, r1
 8009f6c:	18d2      	adds	r2, r2, r3
 8009f6e:	3a30      	subs	r2, #48	; 0x30
 8009f70:	920e      	str	r2, [sp, #56]	; 0x38
 8009f72:	e7b5      	b.n	8009ee0 <_strtod_l+0x2e0>
 8009f74:	2b6e      	cmp	r3, #110	; 0x6e
 8009f76:	d0de      	beq.n	8009f36 <_strtod_l+0x336>
 8009f78:	e69b      	b.n	8009cb2 <_strtod_l+0xb2>
 8009f7a:	4995      	ldr	r1, [pc, #596]	; (800a1d0 <_strtod_l+0x5d0>)
 8009f7c:	a81b      	add	r0, sp, #108	; 0x6c
 8009f7e:	f001 f9af 	bl	800b2e0 <__match>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d100      	bne.n	8009f88 <_strtod_l+0x388>
 8009f86:	e694      	b.n	8009cb2 <_strtod_l+0xb2>
 8009f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f8a:	4992      	ldr	r1, [pc, #584]	; (800a1d4 <_strtod_l+0x5d4>)
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	a81b      	add	r0, sp, #108	; 0x6c
 8009f90:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f92:	f001 f9a5 	bl	800b2e0 <__match>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d102      	bne.n	8009fa0 <_strtod_l+0x3a0>
 8009f9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	4f8a      	ldr	r7, [pc, #552]	; (800a1cc <_strtod_l+0x5cc>)
 8009fa4:	e667      	b.n	8009c76 <_strtod_l+0x76>
 8009fa6:	488c      	ldr	r0, [pc, #560]	; (800a1d8 <_strtod_l+0x5d8>)
 8009fa8:	f000 feaa 	bl	800ad00 <nan>
 8009fac:	0006      	movs	r6, r0
 8009fae:	000f      	movs	r7, r1
 8009fb0:	e661      	b.n	8009c76 <_strtod_l+0x76>
 8009fb2:	9b06      	ldr	r3, [sp, #24]
 8009fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <_strtod_l+0x3c4>
 8009fc0:	9b05      	ldr	r3, [sp, #20]
 8009fc2:	9308      	str	r3, [sp, #32]
 8009fc4:	9c05      	ldr	r4, [sp, #20]
 8009fc6:	2c10      	cmp	r4, #16
 8009fc8:	dd00      	ble.n	8009fcc <_strtod_l+0x3cc>
 8009fca:	2410      	movs	r4, #16
 8009fcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fce:	f7f8 fa03 	bl	80023d8 <__aeabi_ui2d>
 8009fd2:	9b05      	ldr	r3, [sp, #20]
 8009fd4:	0006      	movs	r6, r0
 8009fd6:	000f      	movs	r7, r1
 8009fd8:	2b09      	cmp	r3, #9
 8009fda:	dd15      	ble.n	800a008 <_strtod_l+0x408>
 8009fdc:	0022      	movs	r2, r4
 8009fde:	4b7f      	ldr	r3, [pc, #508]	; (800a1dc <_strtod_l+0x5dc>)
 8009fe0:	3a09      	subs	r2, #9
 8009fe2:	00d2      	lsls	r2, r2, #3
 8009fe4:	189b      	adds	r3, r3, r2
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f7f7 fb4b 	bl	8001684 <__aeabi_dmul>
 8009fee:	0006      	movs	r6, r0
 8009ff0:	0028      	movs	r0, r5
 8009ff2:	000f      	movs	r7, r1
 8009ff4:	f7f8 f9f0 	bl	80023d8 <__aeabi_ui2d>
 8009ff8:	0002      	movs	r2, r0
 8009ffa:	000b      	movs	r3, r1
 8009ffc:	0030      	movs	r0, r6
 8009ffe:	0039      	movs	r1, r7
 800a000:	f7f6 fbe6 	bl	80007d0 <__aeabi_dadd>
 800a004:	0006      	movs	r6, r0
 800a006:	000f      	movs	r7, r1
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	2b0f      	cmp	r3, #15
 800a00c:	dc39      	bgt.n	800a082 <_strtod_l+0x482>
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d100      	bne.n	800a016 <_strtod_l+0x416>
 800a014:	e62f      	b.n	8009c76 <_strtod_l+0x76>
 800a016:	dd24      	ble.n	800a062 <_strtod_l+0x462>
 800a018:	2b16      	cmp	r3, #22
 800a01a:	dc09      	bgt.n	800a030 <_strtod_l+0x430>
 800a01c:	496f      	ldr	r1, [pc, #444]	; (800a1dc <_strtod_l+0x5dc>)
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	18c9      	adds	r1, r1, r3
 800a022:	0032      	movs	r2, r6
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	6849      	ldr	r1, [r1, #4]
 800a028:	003b      	movs	r3, r7
 800a02a:	f7f7 fb2b 	bl	8001684 <__aeabi_dmul>
 800a02e:	e7bd      	b.n	8009fac <_strtod_l+0x3ac>
 800a030:	2325      	movs	r3, #37	; 0x25
 800a032:	9a05      	ldr	r2, [sp, #20]
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a038:	4293      	cmp	r3, r2
 800a03a:	db22      	blt.n	800a082 <_strtod_l+0x482>
 800a03c:	240f      	movs	r4, #15
 800a03e:	9b05      	ldr	r3, [sp, #20]
 800a040:	4d66      	ldr	r5, [pc, #408]	; (800a1dc <_strtod_l+0x5dc>)
 800a042:	1ae4      	subs	r4, r4, r3
 800a044:	00e1      	lsls	r1, r4, #3
 800a046:	1869      	adds	r1, r5, r1
 800a048:	0032      	movs	r2, r6
 800a04a:	6808      	ldr	r0, [r1, #0]
 800a04c:	6849      	ldr	r1, [r1, #4]
 800a04e:	003b      	movs	r3, r7
 800a050:	f7f7 fb18 	bl	8001684 <__aeabi_dmul>
 800a054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a056:	1b1c      	subs	r4, r3, r4
 800a058:	00e4      	lsls	r4, r4, #3
 800a05a:	192d      	adds	r5, r5, r4
 800a05c:	682a      	ldr	r2, [r5, #0]
 800a05e:	686b      	ldr	r3, [r5, #4]
 800a060:	e7e3      	b.n	800a02a <_strtod_l+0x42a>
 800a062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a064:	3316      	adds	r3, #22
 800a066:	db0c      	blt.n	800a082 <_strtod_l+0x482>
 800a068:	9906      	ldr	r1, [sp, #24]
 800a06a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a06c:	4b5b      	ldr	r3, [pc, #364]	; (800a1dc <_strtod_l+0x5dc>)
 800a06e:	1a52      	subs	r2, r2, r1
 800a070:	00d2      	lsls	r2, r2, #3
 800a072:	189b      	adds	r3, r3, r2
 800a074:	0030      	movs	r0, r6
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	0039      	movs	r1, r7
 800a07c:	f7f6 ff08 	bl	8000e90 <__aeabi_ddiv>
 800a080:	e794      	b.n	8009fac <_strtod_l+0x3ac>
 800a082:	9b05      	ldr	r3, [sp, #20]
 800a084:	1b1c      	subs	r4, r3, r4
 800a086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a088:	18e4      	adds	r4, r4, r3
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	dd72      	ble.n	800a174 <_strtod_l+0x574>
 800a08e:	220f      	movs	r2, #15
 800a090:	0023      	movs	r3, r4
 800a092:	4013      	ands	r3, r2
 800a094:	4214      	tst	r4, r2
 800a096:	d00a      	beq.n	800a0ae <_strtod_l+0x4ae>
 800a098:	4950      	ldr	r1, [pc, #320]	; (800a1dc <_strtod_l+0x5dc>)
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	18c9      	adds	r1, r1, r3
 800a09e:	0032      	movs	r2, r6
 800a0a0:	6808      	ldr	r0, [r1, #0]
 800a0a2:	6849      	ldr	r1, [r1, #4]
 800a0a4:	003b      	movs	r3, r7
 800a0a6:	f7f7 faed 	bl	8001684 <__aeabi_dmul>
 800a0aa:	0006      	movs	r6, r0
 800a0ac:	000f      	movs	r7, r1
 800a0ae:	230f      	movs	r3, #15
 800a0b0:	439c      	bics	r4, r3
 800a0b2:	d04a      	beq.n	800a14a <_strtod_l+0x54a>
 800a0b4:	3326      	adds	r3, #38	; 0x26
 800a0b6:	33ff      	adds	r3, #255	; 0xff
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	dd22      	ble.n	800a102 <_strtod_l+0x502>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9305      	str	r3, [sp, #20]
 800a0c0:	9306      	str	r3, [sp, #24]
 800a0c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a0c4:	9308      	str	r3, [sp, #32]
 800a0c6:	2322      	movs	r3, #34	; 0x22
 800a0c8:	2600      	movs	r6, #0
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	4f3f      	ldr	r7, [pc, #252]	; (800a1cc <_strtod_l+0x5cc>)
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d2:	42b3      	cmp	r3, r6
 800a0d4:	d100      	bne.n	800a0d8 <_strtod_l+0x4d8>
 800a0d6:	e5ce      	b.n	8009c76 <_strtod_l+0x76>
 800a0d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a0da:	9804      	ldr	r0, [sp, #16]
 800a0dc:	f001 fa12 	bl	800b504 <_Bfree>
 800a0e0:	9908      	ldr	r1, [sp, #32]
 800a0e2:	9804      	ldr	r0, [sp, #16]
 800a0e4:	f001 fa0e 	bl	800b504 <_Bfree>
 800a0e8:	9906      	ldr	r1, [sp, #24]
 800a0ea:	9804      	ldr	r0, [sp, #16]
 800a0ec:	f001 fa0a 	bl	800b504 <_Bfree>
 800a0f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0f2:	9804      	ldr	r0, [sp, #16]
 800a0f4:	f001 fa06 	bl	800b504 <_Bfree>
 800a0f8:	9905      	ldr	r1, [sp, #20]
 800a0fa:	9804      	ldr	r0, [sp, #16]
 800a0fc:	f001 fa02 	bl	800b504 <_Bfree>
 800a100:	e5b9      	b.n	8009c76 <_strtod_l+0x76>
 800a102:	2300      	movs	r3, #0
 800a104:	0030      	movs	r0, r6
 800a106:	0039      	movs	r1, r7
 800a108:	4d35      	ldr	r5, [pc, #212]	; (800a1e0 <_strtod_l+0x5e0>)
 800a10a:	1124      	asrs	r4, r4, #4
 800a10c:	9307      	str	r3, [sp, #28]
 800a10e:	2c01      	cmp	r4, #1
 800a110:	dc1e      	bgt.n	800a150 <_strtod_l+0x550>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <_strtod_l+0x51a>
 800a116:	0006      	movs	r6, r0
 800a118:	000f      	movs	r7, r1
 800a11a:	4b32      	ldr	r3, [pc, #200]	; (800a1e4 <_strtod_l+0x5e4>)
 800a11c:	9a07      	ldr	r2, [sp, #28]
 800a11e:	18ff      	adds	r7, r7, r3
 800a120:	4b2f      	ldr	r3, [pc, #188]	; (800a1e0 <_strtod_l+0x5e0>)
 800a122:	00d2      	lsls	r2, r2, #3
 800a124:	189d      	adds	r5, r3, r2
 800a126:	6828      	ldr	r0, [r5, #0]
 800a128:	6869      	ldr	r1, [r5, #4]
 800a12a:	0032      	movs	r2, r6
 800a12c:	003b      	movs	r3, r7
 800a12e:	f7f7 faa9 	bl	8001684 <__aeabi_dmul>
 800a132:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <_strtod_l+0x5cc>)
 800a134:	4a2c      	ldr	r2, [pc, #176]	; (800a1e8 <_strtod_l+0x5e8>)
 800a136:	0006      	movs	r6, r0
 800a138:	400b      	ands	r3, r1
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d8be      	bhi.n	800a0bc <_strtod_l+0x4bc>
 800a13e:	4a2b      	ldr	r2, [pc, #172]	; (800a1ec <_strtod_l+0x5ec>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d913      	bls.n	800a16c <_strtod_l+0x56c>
 800a144:	2601      	movs	r6, #1
 800a146:	4f2a      	ldr	r7, [pc, #168]	; (800a1f0 <_strtod_l+0x5f0>)
 800a148:	4276      	negs	r6, r6
 800a14a:	2300      	movs	r3, #0
 800a14c:	9307      	str	r3, [sp, #28]
 800a14e:	e088      	b.n	800a262 <_strtod_l+0x662>
 800a150:	2201      	movs	r2, #1
 800a152:	4214      	tst	r4, r2
 800a154:	d004      	beq.n	800a160 <_strtod_l+0x560>
 800a156:	682a      	ldr	r2, [r5, #0]
 800a158:	686b      	ldr	r3, [r5, #4]
 800a15a:	f7f7 fa93 	bl	8001684 <__aeabi_dmul>
 800a15e:	2301      	movs	r3, #1
 800a160:	9a07      	ldr	r2, [sp, #28]
 800a162:	1064      	asrs	r4, r4, #1
 800a164:	3201      	adds	r2, #1
 800a166:	9207      	str	r2, [sp, #28]
 800a168:	3508      	adds	r5, #8
 800a16a:	e7d0      	b.n	800a10e <_strtod_l+0x50e>
 800a16c:	23d4      	movs	r3, #212	; 0xd4
 800a16e:	049b      	lsls	r3, r3, #18
 800a170:	18cf      	adds	r7, r1, r3
 800a172:	e7ea      	b.n	800a14a <_strtod_l+0x54a>
 800a174:	2c00      	cmp	r4, #0
 800a176:	d0e8      	beq.n	800a14a <_strtod_l+0x54a>
 800a178:	4264      	negs	r4, r4
 800a17a:	230f      	movs	r3, #15
 800a17c:	0022      	movs	r2, r4
 800a17e:	401a      	ands	r2, r3
 800a180:	421c      	tst	r4, r3
 800a182:	d00a      	beq.n	800a19a <_strtod_l+0x59a>
 800a184:	4b15      	ldr	r3, [pc, #84]	; (800a1dc <_strtod_l+0x5dc>)
 800a186:	00d2      	lsls	r2, r2, #3
 800a188:	189b      	adds	r3, r3, r2
 800a18a:	0030      	movs	r0, r6
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	0039      	movs	r1, r7
 800a192:	f7f6 fe7d 	bl	8000e90 <__aeabi_ddiv>
 800a196:	0006      	movs	r6, r0
 800a198:	000f      	movs	r7, r1
 800a19a:	1124      	asrs	r4, r4, #4
 800a19c:	d0d5      	beq.n	800a14a <_strtod_l+0x54a>
 800a19e:	2c1f      	cmp	r4, #31
 800a1a0:	dd28      	ble.n	800a1f4 <_strtod_l+0x5f4>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9305      	str	r3, [sp, #20]
 800a1a6:	9306      	str	r3, [sp, #24]
 800a1a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	2322      	movs	r3, #34	; 0x22
 800a1ae:	9a04      	ldr	r2, [sp, #16]
 800a1b0:	2600      	movs	r6, #0
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b6:	2700      	movs	r7, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d18d      	bne.n	800a0d8 <_strtod_l+0x4d8>
 800a1bc:	e55b      	b.n	8009c76 <_strtod_l+0x76>
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	00004e1f 	.word	0x00004e1f
 800a1c4:	0800cbe1 	.word	0x0800cbe1
 800a1c8:	0800cbf8 	.word	0x0800cbf8
 800a1cc:	7ff00000 	.word	0x7ff00000
 800a1d0:	0800cbd8 	.word	0x0800cbd8
 800a1d4:	0800cbdb 	.word	0x0800cbdb
 800a1d8:	0800cf81 	.word	0x0800cf81
 800a1dc:	0800ce50 	.word	0x0800ce50
 800a1e0:	0800ce28 	.word	0x0800ce28
 800a1e4:	fcb00000 	.word	0xfcb00000
 800a1e8:	7ca00000 	.word	0x7ca00000
 800a1ec:	7c900000 	.word	0x7c900000
 800a1f0:	7fefffff 	.word	0x7fefffff
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	0022      	movs	r2, r4
 800a1f8:	401a      	ands	r2, r3
 800a1fa:	9207      	str	r2, [sp, #28]
 800a1fc:	421c      	tst	r4, r3
 800a1fe:	d001      	beq.n	800a204 <_strtod_l+0x604>
 800a200:	335a      	adds	r3, #90	; 0x5a
 800a202:	9307      	str	r3, [sp, #28]
 800a204:	0030      	movs	r0, r6
 800a206:	0039      	movs	r1, r7
 800a208:	2300      	movs	r3, #0
 800a20a:	4dc4      	ldr	r5, [pc, #784]	; (800a51c <_strtod_l+0x91c>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	4214      	tst	r4, r2
 800a210:	d004      	beq.n	800a21c <_strtod_l+0x61c>
 800a212:	682a      	ldr	r2, [r5, #0]
 800a214:	686b      	ldr	r3, [r5, #4]
 800a216:	f7f7 fa35 	bl	8001684 <__aeabi_dmul>
 800a21a:	2301      	movs	r3, #1
 800a21c:	1064      	asrs	r4, r4, #1
 800a21e:	3508      	adds	r5, #8
 800a220:	2c00      	cmp	r4, #0
 800a222:	d1f3      	bne.n	800a20c <_strtod_l+0x60c>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <_strtod_l+0x62c>
 800a228:	0006      	movs	r6, r0
 800a22a:	000f      	movs	r7, r1
 800a22c:	9b07      	ldr	r3, [sp, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00f      	beq.n	800a252 <_strtod_l+0x652>
 800a232:	236b      	movs	r3, #107	; 0x6b
 800a234:	007a      	lsls	r2, r7, #1
 800a236:	0d52      	lsrs	r2, r2, #21
 800a238:	0039      	movs	r1, r7
 800a23a:	1a9b      	subs	r3, r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	dd08      	ble.n	800a252 <_strtod_l+0x652>
 800a240:	2b1f      	cmp	r3, #31
 800a242:	dc00      	bgt.n	800a246 <_strtod_l+0x646>
 800a244:	e121      	b.n	800a48a <_strtod_l+0x88a>
 800a246:	2600      	movs	r6, #0
 800a248:	2b34      	cmp	r3, #52	; 0x34
 800a24a:	dc00      	bgt.n	800a24e <_strtod_l+0x64e>
 800a24c:	e116      	b.n	800a47c <_strtod_l+0x87c>
 800a24e:	27dc      	movs	r7, #220	; 0xdc
 800a250:	04bf      	lsls	r7, r7, #18
 800a252:	2200      	movs	r2, #0
 800a254:	2300      	movs	r3, #0
 800a256:	0030      	movs	r0, r6
 800a258:	0039      	movs	r1, r7
 800a25a:	f7f6 f901 	bl	8000460 <__aeabi_dcmpeq>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d19f      	bne.n	800a1a2 <_strtod_l+0x5a2>
 800a262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a264:	9a08      	ldr	r2, [sp, #32]
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	9804      	ldr	r0, [sp, #16]
 800a26e:	f001 f9b1 	bl	800b5d4 <__s2b>
 800a272:	900d      	str	r0, [sp, #52]	; 0x34
 800a274:	2800      	cmp	r0, #0
 800a276:	d100      	bne.n	800a27a <_strtod_l+0x67a>
 800a278:	e720      	b.n	800a0bc <_strtod_l+0x4bc>
 800a27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27c:	9906      	ldr	r1, [sp, #24]
 800a27e:	17da      	asrs	r2, r3, #31
 800a280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a282:	1a5b      	subs	r3, r3, r1
 800a284:	401a      	ands	r2, r3
 800a286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a288:	9215      	str	r2, [sp, #84]	; 0x54
 800a28a:	43db      	mvns	r3, r3
 800a28c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a28e:	17db      	asrs	r3, r3, #31
 800a290:	401a      	ands	r2, r3
 800a292:	2300      	movs	r3, #0
 800a294:	9218      	str	r2, [sp, #96]	; 0x60
 800a296:	9305      	str	r3, [sp, #20]
 800a298:	9306      	str	r3, [sp, #24]
 800a29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a29c:	9804      	ldr	r0, [sp, #16]
 800a29e:	6859      	ldr	r1, [r3, #4]
 800a2a0:	f001 f8ec 	bl	800b47c <_Balloc>
 800a2a4:	9008      	str	r0, [sp, #32]
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d100      	bne.n	800a2ac <_strtod_l+0x6ac>
 800a2aa:	e70c      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a2ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ae:	300c      	adds	r0, #12
 800a2b0:	0019      	movs	r1, r3
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	310c      	adds	r1, #12
 800a2b6:	3202      	adds	r2, #2
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	f000 fd18 	bl	800acee <memcpy>
 800a2be:	ab1e      	add	r3, sp, #120	; 0x78
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	0032      	movs	r2, r6
 800a2c8:	003b      	movs	r3, r7
 800a2ca:	9804      	ldr	r0, [sp, #16]
 800a2cc:	9610      	str	r6, [sp, #64]	; 0x40
 800a2ce:	9711      	str	r7, [sp, #68]	; 0x44
 800a2d0:	f001 fcc2 	bl	800bc58 <__d2b>
 800a2d4:	901c      	str	r0, [sp, #112]	; 0x70
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d100      	bne.n	800a2dc <_strtod_l+0x6dc>
 800a2da:	e6f4      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a2dc:	2101      	movs	r1, #1
 800a2de:	9804      	ldr	r0, [sp, #16]
 800a2e0:	f001 fa0c 	bl	800b6fc <__i2b>
 800a2e4:	9006      	str	r0, [sp, #24]
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d100      	bne.n	800a2ec <_strtod_l+0x6ec>
 800a2ea:	e6ec      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a2ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a2f2:	1ad4      	subs	r4, r2, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	db01      	blt.n	800a2fc <_strtod_l+0x6fc>
 800a2f8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a2fa:	195d      	adds	r5, r3, r5
 800a2fc:	9907      	ldr	r1, [sp, #28]
 800a2fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a300:	1a5b      	subs	r3, r3, r1
 800a302:	2136      	movs	r1, #54	; 0x36
 800a304:	189b      	adds	r3, r3, r2
 800a306:	1a8a      	subs	r2, r1, r2
 800a308:	4985      	ldr	r1, [pc, #532]	; (800a520 <_strtod_l+0x920>)
 800a30a:	2001      	movs	r0, #1
 800a30c:	468c      	mov	ip, r1
 800a30e:	2100      	movs	r1, #0
 800a310:	3b01      	subs	r3, #1
 800a312:	9114      	str	r1, [sp, #80]	; 0x50
 800a314:	9012      	str	r0, [sp, #72]	; 0x48
 800a316:	4563      	cmp	r3, ip
 800a318:	da07      	bge.n	800a32a <_strtod_l+0x72a>
 800a31a:	4661      	mov	r1, ip
 800a31c:	1ac9      	subs	r1, r1, r3
 800a31e:	1a52      	subs	r2, r2, r1
 800a320:	291f      	cmp	r1, #31
 800a322:	dd00      	ble.n	800a326 <_strtod_l+0x726>
 800a324:	e0b6      	b.n	800a494 <_strtod_l+0x894>
 800a326:	4088      	lsls	r0, r1
 800a328:	9012      	str	r0, [sp, #72]	; 0x48
 800a32a:	18ab      	adds	r3, r5, r2
 800a32c:	930c      	str	r3, [sp, #48]	; 0x30
 800a32e:	18a4      	adds	r4, r4, r2
 800a330:	9b07      	ldr	r3, [sp, #28]
 800a332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a334:	191c      	adds	r4, r3, r4
 800a336:	002b      	movs	r3, r5
 800a338:	4295      	cmp	r5, r2
 800a33a:	dd00      	ble.n	800a33e <_strtod_l+0x73e>
 800a33c:	0013      	movs	r3, r2
 800a33e:	42a3      	cmp	r3, r4
 800a340:	dd00      	ble.n	800a344 <_strtod_l+0x744>
 800a342:	0023      	movs	r3, r4
 800a344:	2b00      	cmp	r3, #0
 800a346:	dd04      	ble.n	800a352 <_strtod_l+0x752>
 800a348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a34a:	1ae4      	subs	r4, r4, r3
 800a34c:	1ad2      	subs	r2, r2, r3
 800a34e:	920c      	str	r2, [sp, #48]	; 0x30
 800a350:	1aed      	subs	r5, r5, r3
 800a352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a354:	2b00      	cmp	r3, #0
 800a356:	dd17      	ble.n	800a388 <_strtod_l+0x788>
 800a358:	001a      	movs	r2, r3
 800a35a:	9906      	ldr	r1, [sp, #24]
 800a35c:	9804      	ldr	r0, [sp, #16]
 800a35e:	f001 fa95 	bl	800b88c <__pow5mult>
 800a362:	9006      	str	r0, [sp, #24]
 800a364:	2800      	cmp	r0, #0
 800a366:	d100      	bne.n	800a36a <_strtod_l+0x76a>
 800a368:	e6ad      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a36a:	0001      	movs	r1, r0
 800a36c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a36e:	9804      	ldr	r0, [sp, #16]
 800a370:	f001 f9dc 	bl	800b72c <__multiply>
 800a374:	900e      	str	r0, [sp, #56]	; 0x38
 800a376:	2800      	cmp	r0, #0
 800a378:	d100      	bne.n	800a37c <_strtod_l+0x77c>
 800a37a:	e6a4      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a37c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a37e:	9804      	ldr	r0, [sp, #16]
 800a380:	f001 f8c0 	bl	800b504 <_Bfree>
 800a384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a386:	931c      	str	r3, [sp, #112]	; 0x70
 800a388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dd00      	ble.n	800a390 <_strtod_l+0x790>
 800a38e:	e087      	b.n	800a4a0 <_strtod_l+0x8a0>
 800a390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a392:	2b00      	cmp	r3, #0
 800a394:	dd08      	ble.n	800a3a8 <_strtod_l+0x7a8>
 800a396:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a398:	9908      	ldr	r1, [sp, #32]
 800a39a:	9804      	ldr	r0, [sp, #16]
 800a39c:	f001 fa76 	bl	800b88c <__pow5mult>
 800a3a0:	9008      	str	r0, [sp, #32]
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d100      	bne.n	800a3a8 <_strtod_l+0x7a8>
 800a3a6:	e68e      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	dd08      	ble.n	800a3be <_strtod_l+0x7be>
 800a3ac:	0022      	movs	r2, r4
 800a3ae:	9908      	ldr	r1, [sp, #32]
 800a3b0:	9804      	ldr	r0, [sp, #16]
 800a3b2:	f001 fac7 	bl	800b944 <__lshift>
 800a3b6:	9008      	str	r0, [sp, #32]
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d100      	bne.n	800a3be <_strtod_l+0x7be>
 800a3bc:	e683      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a3be:	2d00      	cmp	r5, #0
 800a3c0:	dd08      	ble.n	800a3d4 <_strtod_l+0x7d4>
 800a3c2:	002a      	movs	r2, r5
 800a3c4:	9906      	ldr	r1, [sp, #24]
 800a3c6:	9804      	ldr	r0, [sp, #16]
 800a3c8:	f001 fabc 	bl	800b944 <__lshift>
 800a3cc:	9006      	str	r0, [sp, #24]
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d100      	bne.n	800a3d4 <_strtod_l+0x7d4>
 800a3d2:	e678      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a3d4:	9a08      	ldr	r2, [sp, #32]
 800a3d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3d8:	9804      	ldr	r0, [sp, #16]
 800a3da:	f001 fb3d 	bl	800ba58 <__mdiff>
 800a3de:	9005      	str	r0, [sp, #20]
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d100      	bne.n	800a3e6 <_strtod_l+0x7e6>
 800a3e4:	e66f      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	68c3      	ldr	r3, [r0, #12]
 800a3ea:	9906      	ldr	r1, [sp, #24]
 800a3ec:	60c2      	str	r2, [r0, #12]
 800a3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f0:	f001 fb16 	bl	800ba20 <__mcmp>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	da5d      	bge.n	800a4b4 <_strtod_l+0x8b4>
 800a3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3fa:	4333      	orrs	r3, r6
 800a3fc:	d000      	beq.n	800a400 <_strtod_l+0x800>
 800a3fe:	e088      	b.n	800a512 <_strtod_l+0x912>
 800a400:	033b      	lsls	r3, r7, #12
 800a402:	d000      	beq.n	800a406 <_strtod_l+0x806>
 800a404:	e085      	b.n	800a512 <_strtod_l+0x912>
 800a406:	22d6      	movs	r2, #214	; 0xd6
 800a408:	4b46      	ldr	r3, [pc, #280]	; (800a524 <_strtod_l+0x924>)
 800a40a:	04d2      	lsls	r2, r2, #19
 800a40c:	403b      	ands	r3, r7
 800a40e:	4293      	cmp	r3, r2
 800a410:	d97f      	bls.n	800a512 <_strtod_l+0x912>
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d103      	bne.n	800a422 <_strtod_l+0x822>
 800a41a:	9b05      	ldr	r3, [sp, #20]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	dd77      	ble.n	800a512 <_strtod_l+0x912>
 800a422:	9905      	ldr	r1, [sp, #20]
 800a424:	2201      	movs	r2, #1
 800a426:	9804      	ldr	r0, [sp, #16]
 800a428:	f001 fa8c 	bl	800b944 <__lshift>
 800a42c:	9906      	ldr	r1, [sp, #24]
 800a42e:	9005      	str	r0, [sp, #20]
 800a430:	f001 faf6 	bl	800ba20 <__mcmp>
 800a434:	2800      	cmp	r0, #0
 800a436:	dd6c      	ble.n	800a512 <_strtod_l+0x912>
 800a438:	9907      	ldr	r1, [sp, #28]
 800a43a:	003b      	movs	r3, r7
 800a43c:	4a39      	ldr	r2, [pc, #228]	; (800a524 <_strtod_l+0x924>)
 800a43e:	2900      	cmp	r1, #0
 800a440:	d100      	bne.n	800a444 <_strtod_l+0x844>
 800a442:	e094      	b.n	800a56e <_strtod_l+0x96e>
 800a444:	0011      	movs	r1, r2
 800a446:	20d6      	movs	r0, #214	; 0xd6
 800a448:	4039      	ands	r1, r7
 800a44a:	04c0      	lsls	r0, r0, #19
 800a44c:	4281      	cmp	r1, r0
 800a44e:	dd00      	ble.n	800a452 <_strtod_l+0x852>
 800a450:	e08d      	b.n	800a56e <_strtod_l+0x96e>
 800a452:	23dc      	movs	r3, #220	; 0xdc
 800a454:	049b      	lsls	r3, r3, #18
 800a456:	4299      	cmp	r1, r3
 800a458:	dc00      	bgt.n	800a45c <_strtod_l+0x85c>
 800a45a:	e6a7      	b.n	800a1ac <_strtod_l+0x5ac>
 800a45c:	0030      	movs	r0, r6
 800a45e:	0039      	movs	r1, r7
 800a460:	4b31      	ldr	r3, [pc, #196]	; (800a528 <_strtod_l+0x928>)
 800a462:	2200      	movs	r2, #0
 800a464:	f7f7 f90e 	bl	8001684 <__aeabi_dmul>
 800a468:	4b2e      	ldr	r3, [pc, #184]	; (800a524 <_strtod_l+0x924>)
 800a46a:	0006      	movs	r6, r0
 800a46c:	000f      	movs	r7, r1
 800a46e:	420b      	tst	r3, r1
 800a470:	d000      	beq.n	800a474 <_strtod_l+0x874>
 800a472:	e631      	b.n	800a0d8 <_strtod_l+0x4d8>
 800a474:	2322      	movs	r3, #34	; 0x22
 800a476:	9a04      	ldr	r2, [sp, #16]
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	e62d      	b.n	800a0d8 <_strtod_l+0x4d8>
 800a47c:	234b      	movs	r3, #75	; 0x4b
 800a47e:	1a9a      	subs	r2, r3, r2
 800a480:	3b4c      	subs	r3, #76	; 0x4c
 800a482:	4093      	lsls	r3, r2
 800a484:	4019      	ands	r1, r3
 800a486:	000f      	movs	r7, r1
 800a488:	e6e3      	b.n	800a252 <_strtod_l+0x652>
 800a48a:	2201      	movs	r2, #1
 800a48c:	4252      	negs	r2, r2
 800a48e:	409a      	lsls	r2, r3
 800a490:	4016      	ands	r6, r2
 800a492:	e6de      	b.n	800a252 <_strtod_l+0x652>
 800a494:	4925      	ldr	r1, [pc, #148]	; (800a52c <_strtod_l+0x92c>)
 800a496:	1acb      	subs	r3, r1, r3
 800a498:	0001      	movs	r1, r0
 800a49a:	4099      	lsls	r1, r3
 800a49c:	9114      	str	r1, [sp, #80]	; 0x50
 800a49e:	e743      	b.n	800a328 <_strtod_l+0x728>
 800a4a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4a4:	9804      	ldr	r0, [sp, #16]
 800a4a6:	f001 fa4d 	bl	800b944 <__lshift>
 800a4aa:	901c      	str	r0, [sp, #112]	; 0x70
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d000      	beq.n	800a4b2 <_strtod_l+0x8b2>
 800a4b0:	e76e      	b.n	800a390 <_strtod_l+0x790>
 800a4b2:	e608      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a4b4:	970e      	str	r7, [sp, #56]	; 0x38
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d177      	bne.n	800a5aa <_strtod_l+0x9aa>
 800a4ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4bc:	033b      	lsls	r3, r7, #12
 800a4be:	0b1b      	lsrs	r3, r3, #12
 800a4c0:	2a00      	cmp	r2, #0
 800a4c2:	d039      	beq.n	800a538 <_strtod_l+0x938>
 800a4c4:	4a1a      	ldr	r2, [pc, #104]	; (800a530 <_strtod_l+0x930>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d139      	bne.n	800a53e <_strtod_l+0x93e>
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	9b07      	ldr	r3, [sp, #28]
 800a4ce:	4249      	negs	r1, r1
 800a4d0:	0032      	movs	r2, r6
 800a4d2:	0008      	movs	r0, r1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <_strtod_l+0x8f0>
 800a4d8:	24d4      	movs	r4, #212	; 0xd4
 800a4da:	4b12      	ldr	r3, [pc, #72]	; (800a524 <_strtod_l+0x924>)
 800a4dc:	0008      	movs	r0, r1
 800a4de:	403b      	ands	r3, r7
 800a4e0:	04e4      	lsls	r4, r4, #19
 800a4e2:	42a3      	cmp	r3, r4
 800a4e4:	d804      	bhi.n	800a4f0 <_strtod_l+0x8f0>
 800a4e6:	306c      	adds	r0, #108	; 0x6c
 800a4e8:	0d1b      	lsrs	r3, r3, #20
 800a4ea:	1ac3      	subs	r3, r0, r3
 800a4ec:	4099      	lsls	r1, r3
 800a4ee:	0008      	movs	r0, r1
 800a4f0:	4282      	cmp	r2, r0
 800a4f2:	d124      	bne.n	800a53e <_strtod_l+0x93e>
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <_strtod_l+0x934>)
 800a4f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a4f8:	4299      	cmp	r1, r3
 800a4fa:	d102      	bne.n	800a502 <_strtod_l+0x902>
 800a4fc:	3201      	adds	r2, #1
 800a4fe:	d100      	bne.n	800a502 <_strtod_l+0x902>
 800a500:	e5e1      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a502:	4b08      	ldr	r3, [pc, #32]	; (800a524 <_strtod_l+0x924>)
 800a504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a506:	2600      	movs	r6, #0
 800a508:	401a      	ands	r2, r3
 800a50a:	0013      	movs	r3, r2
 800a50c:	2280      	movs	r2, #128	; 0x80
 800a50e:	0352      	lsls	r2, r2, #13
 800a510:	189f      	adds	r7, r3, r2
 800a512:	9b07      	ldr	r3, [sp, #28]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1a1      	bne.n	800a45c <_strtod_l+0x85c>
 800a518:	e5de      	b.n	800a0d8 <_strtod_l+0x4d8>
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	0800cc10 	.word	0x0800cc10
 800a520:	fffffc02 	.word	0xfffffc02
 800a524:	7ff00000 	.word	0x7ff00000
 800a528:	39500000 	.word	0x39500000
 800a52c:	fffffbe2 	.word	0xfffffbe2
 800a530:	000fffff 	.word	0x000fffff
 800a534:	7fefffff 	.word	0x7fefffff
 800a538:	4333      	orrs	r3, r6
 800a53a:	d100      	bne.n	800a53e <_strtod_l+0x93e>
 800a53c:	e77c      	b.n	800a438 <_strtod_l+0x838>
 800a53e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01d      	beq.n	800a580 <_strtod_l+0x980>
 800a544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a546:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a548:	4213      	tst	r3, r2
 800a54a:	d0e2      	beq.n	800a512 <_strtod_l+0x912>
 800a54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a54e:	0030      	movs	r0, r6
 800a550:	0039      	movs	r1, r7
 800a552:	9a07      	ldr	r2, [sp, #28]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d017      	beq.n	800a588 <_strtod_l+0x988>
 800a558:	f7ff fb3a 	bl	8009bd0 <sulp>
 800a55c:	0002      	movs	r2, r0
 800a55e:	000b      	movs	r3, r1
 800a560:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a562:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a564:	f7f6 f934 	bl	80007d0 <__aeabi_dadd>
 800a568:	0006      	movs	r6, r0
 800a56a:	000f      	movs	r7, r1
 800a56c:	e7d1      	b.n	800a512 <_strtod_l+0x912>
 800a56e:	2601      	movs	r6, #1
 800a570:	4013      	ands	r3, r2
 800a572:	4a98      	ldr	r2, [pc, #608]	; (800a7d4 <_strtod_l+0xbd4>)
 800a574:	4276      	negs	r6, r6
 800a576:	189b      	adds	r3, r3, r2
 800a578:	4a97      	ldr	r2, [pc, #604]	; (800a7d8 <_strtod_l+0xbd8>)
 800a57a:	431a      	orrs	r2, r3
 800a57c:	0017      	movs	r7, r2
 800a57e:	e7c8      	b.n	800a512 <_strtod_l+0x912>
 800a580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a582:	4233      	tst	r3, r6
 800a584:	d0c5      	beq.n	800a512 <_strtod_l+0x912>
 800a586:	e7e1      	b.n	800a54c <_strtod_l+0x94c>
 800a588:	f7ff fb22 	bl	8009bd0 <sulp>
 800a58c:	0002      	movs	r2, r0
 800a58e:	000b      	movs	r3, r1
 800a590:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a592:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a594:	f7f7 fb38 	bl	8001c08 <__aeabi_dsub>
 800a598:	2200      	movs	r2, #0
 800a59a:	2300      	movs	r3, #0
 800a59c:	0006      	movs	r6, r0
 800a59e:	000f      	movs	r7, r1
 800a5a0:	f7f5 ff5e 	bl	8000460 <__aeabi_dcmpeq>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d0b4      	beq.n	800a512 <_strtod_l+0x912>
 800a5a8:	e600      	b.n	800a1ac <_strtod_l+0x5ac>
 800a5aa:	9906      	ldr	r1, [sp, #24]
 800a5ac:	9805      	ldr	r0, [sp, #20]
 800a5ae:	f001 fbb3 	bl	800bd18 <__ratio>
 800a5b2:	2380      	movs	r3, #128	; 0x80
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	05db      	lsls	r3, r3, #23
 800a5b8:	0004      	movs	r4, r0
 800a5ba:	000d      	movs	r5, r1
 800a5bc:	f7f5 ff60 	bl	8000480 <__aeabi_dcmple>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d06d      	beq.n	800a6a0 <_strtod_l+0xaa0>
 800a5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d000      	beq.n	800a5cc <_strtod_l+0x9cc>
 800a5ca:	e07e      	b.n	800a6ca <_strtod_l+0xaca>
 800a5cc:	2e00      	cmp	r6, #0
 800a5ce:	d158      	bne.n	800a682 <_strtod_l+0xa82>
 800a5d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5d2:	031b      	lsls	r3, r3, #12
 800a5d4:	d000      	beq.n	800a5d8 <_strtod_l+0x9d8>
 800a5d6:	e07f      	b.n	800a6d8 <_strtod_l+0xad8>
 800a5d8:	2200      	movs	r2, #0
 800a5da:	0020      	movs	r0, r4
 800a5dc:	0029      	movs	r1, r5
 800a5de:	4b7f      	ldr	r3, [pc, #508]	; (800a7dc <_strtod_l+0xbdc>)
 800a5e0:	f7f5 ff44 	bl	800046c <__aeabi_dcmplt>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d158      	bne.n	800a69a <_strtod_l+0xa9a>
 800a5e8:	0020      	movs	r0, r4
 800a5ea:	0029      	movs	r1, r5
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4b7c      	ldr	r3, [pc, #496]	; (800a7e0 <_strtod_l+0xbe0>)
 800a5f0:	f7f7 f848 	bl	8001684 <__aeabi_dmul>
 800a5f4:	0004      	movs	r4, r0
 800a5f6:	000d      	movs	r5, r1
 800a5f8:	2380      	movs	r3, #128	; 0x80
 800a5fa:	061b      	lsls	r3, r3, #24
 800a5fc:	940a      	str	r4, [sp, #40]	; 0x28
 800a5fe:	18eb      	adds	r3, r5, r3
 800a600:	930b      	str	r3, [sp, #44]	; 0x2c
 800a602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a606:	9212      	str	r2, [sp, #72]	; 0x48
 800a608:	9313      	str	r3, [sp, #76]	; 0x4c
 800a60a:	4a76      	ldr	r2, [pc, #472]	; (800a7e4 <_strtod_l+0xbe4>)
 800a60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a60e:	4013      	ands	r3, r2
 800a610:	9314      	str	r3, [sp, #80]	; 0x50
 800a612:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a614:	4b74      	ldr	r3, [pc, #464]	; (800a7e8 <_strtod_l+0xbe8>)
 800a616:	429a      	cmp	r2, r3
 800a618:	d000      	beq.n	800a61c <_strtod_l+0xa1c>
 800a61a:	e091      	b.n	800a740 <_strtod_l+0xb40>
 800a61c:	4a73      	ldr	r2, [pc, #460]	; (800a7ec <_strtod_l+0xbec>)
 800a61e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a620:	4694      	mov	ip, r2
 800a622:	4463      	add	r3, ip
 800a624:	001f      	movs	r7, r3
 800a626:	0030      	movs	r0, r6
 800a628:	0019      	movs	r1, r3
 800a62a:	f001 faad 	bl	800bb88 <__ulp>
 800a62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a632:	f7f7 f827 	bl	8001684 <__aeabi_dmul>
 800a636:	0032      	movs	r2, r6
 800a638:	003b      	movs	r3, r7
 800a63a:	f7f6 f8c9 	bl	80007d0 <__aeabi_dadd>
 800a63e:	4a69      	ldr	r2, [pc, #420]	; (800a7e4 <_strtod_l+0xbe4>)
 800a640:	4b6b      	ldr	r3, [pc, #428]	; (800a7f0 <_strtod_l+0xbf0>)
 800a642:	0006      	movs	r6, r0
 800a644:	400a      	ands	r2, r1
 800a646:	429a      	cmp	r2, r3
 800a648:	d949      	bls.n	800a6de <_strtod_l+0xade>
 800a64a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a64c:	4b69      	ldr	r3, [pc, #420]	; (800a7f4 <_strtod_l+0xbf4>)
 800a64e:	429a      	cmp	r2, r3
 800a650:	d103      	bne.n	800a65a <_strtod_l+0xa5a>
 800a652:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a654:	3301      	adds	r3, #1
 800a656:	d100      	bne.n	800a65a <_strtod_l+0xa5a>
 800a658:	e535      	b.n	800a0c6 <_strtod_l+0x4c6>
 800a65a:	2601      	movs	r6, #1
 800a65c:	4f65      	ldr	r7, [pc, #404]	; (800a7f4 <_strtod_l+0xbf4>)
 800a65e:	4276      	negs	r6, r6
 800a660:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a662:	9804      	ldr	r0, [sp, #16]
 800a664:	f000 ff4e 	bl	800b504 <_Bfree>
 800a668:	9908      	ldr	r1, [sp, #32]
 800a66a:	9804      	ldr	r0, [sp, #16]
 800a66c:	f000 ff4a 	bl	800b504 <_Bfree>
 800a670:	9906      	ldr	r1, [sp, #24]
 800a672:	9804      	ldr	r0, [sp, #16]
 800a674:	f000 ff46 	bl	800b504 <_Bfree>
 800a678:	9905      	ldr	r1, [sp, #20]
 800a67a:	9804      	ldr	r0, [sp, #16]
 800a67c:	f000 ff42 	bl	800b504 <_Bfree>
 800a680:	e60b      	b.n	800a29a <_strtod_l+0x69a>
 800a682:	2e01      	cmp	r6, #1
 800a684:	d103      	bne.n	800a68e <_strtod_l+0xa8e>
 800a686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d100      	bne.n	800a68e <_strtod_l+0xa8e>
 800a68c:	e58e      	b.n	800a1ac <_strtod_l+0x5ac>
 800a68e:	2300      	movs	r3, #0
 800a690:	4c59      	ldr	r4, [pc, #356]	; (800a7f8 <_strtod_l+0xbf8>)
 800a692:	930a      	str	r3, [sp, #40]	; 0x28
 800a694:	940b      	str	r4, [sp, #44]	; 0x2c
 800a696:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a698:	e01c      	b.n	800a6d4 <_strtod_l+0xad4>
 800a69a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a69c:	4d50      	ldr	r5, [pc, #320]	; (800a7e0 <_strtod_l+0xbe0>)
 800a69e:	e7ab      	b.n	800a5f8 <_strtod_l+0x9f8>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	0020      	movs	r0, r4
 800a6a4:	0029      	movs	r1, r5
 800a6a6:	4b4e      	ldr	r3, [pc, #312]	; (800a7e0 <_strtod_l+0xbe0>)
 800a6a8:	f7f6 ffec 	bl	8001684 <__aeabi_dmul>
 800a6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ae:	0004      	movs	r4, r0
 800a6b0:	000b      	movs	r3, r1
 800a6b2:	000d      	movs	r5, r1
 800a6b4:	2a00      	cmp	r2, #0
 800a6b6:	d104      	bne.n	800a6c2 <_strtod_l+0xac2>
 800a6b8:	2280      	movs	r2, #128	; 0x80
 800a6ba:	0612      	lsls	r2, r2, #24
 800a6bc:	900a      	str	r0, [sp, #40]	; 0x28
 800a6be:	188b      	adds	r3, r1, r2
 800a6c0:	e79e      	b.n	800a600 <_strtod_l+0xa00>
 800a6c2:	0002      	movs	r2, r0
 800a6c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a6c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6c8:	e79b      	b.n	800a602 <_strtod_l+0xa02>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4c43      	ldr	r4, [pc, #268]	; (800a7dc <_strtod_l+0xbdc>)
 800a6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a6d0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6d2:	2400      	movs	r4, #0
 800a6d4:	4d41      	ldr	r5, [pc, #260]	; (800a7dc <_strtod_l+0xbdc>)
 800a6d6:	e794      	b.n	800a602 <_strtod_l+0xa02>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4c47      	ldr	r4, [pc, #284]	; (800a7f8 <_strtod_l+0xbf8>)
 800a6dc:	e7f7      	b.n	800a6ce <_strtod_l+0xace>
 800a6de:	23d4      	movs	r3, #212	; 0xd4
 800a6e0:	049b      	lsls	r3, r3, #18
 800a6e2:	18cf      	adds	r7, r1, r3
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	970e      	str	r7, [sp, #56]	; 0x38
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1b9      	bne.n	800a660 <_strtod_l+0xa60>
 800a6ec:	4b3d      	ldr	r3, [pc, #244]	; (800a7e4 <_strtod_l+0xbe4>)
 800a6ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6f0:	403b      	ands	r3, r7
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d1b4      	bne.n	800a660 <_strtod_l+0xa60>
 800a6f6:	0020      	movs	r0, r4
 800a6f8:	0029      	movs	r1, r5
 800a6fa:	f7f5 ff4b 	bl	8000594 <__aeabi_d2lz>
 800a6fe:	f7f5 ff85 	bl	800060c <__aeabi_l2d>
 800a702:	0002      	movs	r2, r0
 800a704:	000b      	movs	r3, r1
 800a706:	0020      	movs	r0, r4
 800a708:	0029      	movs	r1, r5
 800a70a:	f7f7 fa7d 	bl	8001c08 <__aeabi_dsub>
 800a70e:	033b      	lsls	r3, r7, #12
 800a710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a712:	0b1b      	lsrs	r3, r3, #12
 800a714:	4333      	orrs	r3, r6
 800a716:	4313      	orrs	r3, r2
 800a718:	0004      	movs	r4, r0
 800a71a:	000d      	movs	r5, r1
 800a71c:	4a37      	ldr	r2, [pc, #220]	; (800a7fc <_strtod_l+0xbfc>)
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d054      	beq.n	800a7cc <_strtod_l+0xbcc>
 800a722:	4b37      	ldr	r3, [pc, #220]	; (800a800 <_strtod_l+0xc00>)
 800a724:	f7f5 fea2 	bl	800046c <__aeabi_dcmplt>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d000      	beq.n	800a72e <_strtod_l+0xb2e>
 800a72c:	e4d4      	b.n	800a0d8 <_strtod_l+0x4d8>
 800a72e:	0020      	movs	r0, r4
 800a730:	0029      	movs	r1, r5
 800a732:	4a34      	ldr	r2, [pc, #208]	; (800a804 <_strtod_l+0xc04>)
 800a734:	4b2a      	ldr	r3, [pc, #168]	; (800a7e0 <_strtod_l+0xbe0>)
 800a736:	f7f5 fead 	bl	8000494 <__aeabi_dcmpgt>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d090      	beq.n	800a660 <_strtod_l+0xa60>
 800a73e:	e4cb      	b.n	800a0d8 <_strtod_l+0x4d8>
 800a740:	9b07      	ldr	r3, [sp, #28]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d02b      	beq.n	800a79e <_strtod_l+0xb9e>
 800a746:	23d4      	movs	r3, #212	; 0xd4
 800a748:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a74a:	04db      	lsls	r3, r3, #19
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d826      	bhi.n	800a79e <_strtod_l+0xb9e>
 800a750:	0020      	movs	r0, r4
 800a752:	0029      	movs	r1, r5
 800a754:	4a2c      	ldr	r2, [pc, #176]	; (800a808 <_strtod_l+0xc08>)
 800a756:	4b2d      	ldr	r3, [pc, #180]	; (800a80c <_strtod_l+0xc0c>)
 800a758:	f7f5 fe92 	bl	8000480 <__aeabi_dcmple>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d017      	beq.n	800a790 <_strtod_l+0xb90>
 800a760:	0020      	movs	r0, r4
 800a762:	0029      	movs	r1, r5
 800a764:	f7f5 fef8 	bl	8000558 <__aeabi_d2uiz>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d100      	bne.n	800a76e <_strtod_l+0xb6e>
 800a76c:	3001      	adds	r0, #1
 800a76e:	f7f7 fe33 	bl	80023d8 <__aeabi_ui2d>
 800a772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a774:	0004      	movs	r4, r0
 800a776:	000b      	movs	r3, r1
 800a778:	000d      	movs	r5, r1
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	d122      	bne.n	800a7c4 <_strtod_l+0xbc4>
 800a77e:	2280      	movs	r2, #128	; 0x80
 800a780:	0612      	lsls	r2, r2, #24
 800a782:	188b      	adds	r3, r1, r2
 800a784:	9016      	str	r0, [sp, #88]	; 0x58
 800a786:	9317      	str	r3, [sp, #92]	; 0x5c
 800a788:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a78a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a78c:	9212      	str	r2, [sp, #72]	; 0x48
 800a78e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a790:	22d6      	movs	r2, #214	; 0xd6
 800a792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a794:	04d2      	lsls	r2, r2, #19
 800a796:	189b      	adds	r3, r3, r2
 800a798:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a79a:	1a9b      	subs	r3, r3, r2
 800a79c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a79e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a7a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7a2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a7a4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a7a6:	f001 f9ef 	bl	800bb88 <__ulp>
 800a7aa:	0002      	movs	r2, r0
 800a7ac:	000b      	movs	r3, r1
 800a7ae:	0030      	movs	r0, r6
 800a7b0:	0039      	movs	r1, r7
 800a7b2:	f7f6 ff67 	bl	8001684 <__aeabi_dmul>
 800a7b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7ba:	f7f6 f809 	bl	80007d0 <__aeabi_dadd>
 800a7be:	0006      	movs	r6, r0
 800a7c0:	000f      	movs	r7, r1
 800a7c2:	e78f      	b.n	800a6e4 <_strtod_l+0xae4>
 800a7c4:	0002      	movs	r2, r0
 800a7c6:	9216      	str	r2, [sp, #88]	; 0x58
 800a7c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a7ca:	e7dd      	b.n	800a788 <_strtod_l+0xb88>
 800a7cc:	4b10      	ldr	r3, [pc, #64]	; (800a810 <_strtod_l+0xc10>)
 800a7ce:	f7f5 fe4d 	bl	800046c <__aeabi_dcmplt>
 800a7d2:	e7b2      	b.n	800a73a <_strtod_l+0xb3a>
 800a7d4:	fff00000 	.word	0xfff00000
 800a7d8:	000fffff 	.word	0x000fffff
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	3fe00000 	.word	0x3fe00000
 800a7e4:	7ff00000 	.word	0x7ff00000
 800a7e8:	7fe00000 	.word	0x7fe00000
 800a7ec:	fcb00000 	.word	0xfcb00000
 800a7f0:	7c9fffff 	.word	0x7c9fffff
 800a7f4:	7fefffff 	.word	0x7fefffff
 800a7f8:	bff00000 	.word	0xbff00000
 800a7fc:	94a03595 	.word	0x94a03595
 800a800:	3fdfffff 	.word	0x3fdfffff
 800a804:	35afe535 	.word	0x35afe535
 800a808:	ffc00000 	.word	0xffc00000
 800a80c:	41dfffff 	.word	0x41dfffff
 800a810:	3fcfffff 	.word	0x3fcfffff

0800a814 <strtod>:
 800a814:	b510      	push	{r4, lr}
 800a816:	4c04      	ldr	r4, [pc, #16]	; (800a828 <strtod+0x14>)
 800a818:	000a      	movs	r2, r1
 800a81a:	0001      	movs	r1, r0
 800a81c:	4b03      	ldr	r3, [pc, #12]	; (800a82c <strtod+0x18>)
 800a81e:	6820      	ldr	r0, [r4, #0]
 800a820:	f7ff f9ee 	bl	8009c00 <_strtod_l>
 800a824:	bd10      	pop	{r4, pc}
 800a826:	46c0      	nop			; (mov r8, r8)
 800a828:	200001e4 	.word	0x200001e4
 800a82c:	2000002c 	.word	0x2000002c

0800a830 <_strtol_l.constprop.0>:
 800a830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a832:	b087      	sub	sp, #28
 800a834:	001e      	movs	r6, r3
 800a836:	9005      	str	r0, [sp, #20]
 800a838:	9101      	str	r1, [sp, #4]
 800a83a:	9202      	str	r2, [sp, #8]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d048      	beq.n	800a8d2 <_strtol_l.constprop.0+0xa2>
 800a840:	000b      	movs	r3, r1
 800a842:	2e24      	cmp	r6, #36	; 0x24
 800a844:	d845      	bhi.n	800a8d2 <_strtol_l.constprop.0+0xa2>
 800a846:	4a3b      	ldr	r2, [pc, #236]	; (800a934 <_strtol_l.constprop.0+0x104>)
 800a848:	2108      	movs	r1, #8
 800a84a:	4694      	mov	ip, r2
 800a84c:	001a      	movs	r2, r3
 800a84e:	4660      	mov	r0, ip
 800a850:	7814      	ldrb	r4, [r2, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	5d00      	ldrb	r0, [r0, r4]
 800a856:	001d      	movs	r5, r3
 800a858:	0007      	movs	r7, r0
 800a85a:	400f      	ands	r7, r1
 800a85c:	4208      	tst	r0, r1
 800a85e:	d1f5      	bne.n	800a84c <_strtol_l.constprop.0+0x1c>
 800a860:	2c2d      	cmp	r4, #45	; 0x2d
 800a862:	d13d      	bne.n	800a8e0 <_strtol_l.constprop.0+0xb0>
 800a864:	2701      	movs	r7, #1
 800a866:	781c      	ldrb	r4, [r3, #0]
 800a868:	1c95      	adds	r5, r2, #2
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	d05e      	beq.n	800a92c <_strtol_l.constprop.0+0xfc>
 800a86e:	2e10      	cmp	r6, #16
 800a870:	d109      	bne.n	800a886 <_strtol_l.constprop.0+0x56>
 800a872:	2c30      	cmp	r4, #48	; 0x30
 800a874:	d107      	bne.n	800a886 <_strtol_l.constprop.0+0x56>
 800a876:	2220      	movs	r2, #32
 800a878:	782b      	ldrb	r3, [r5, #0]
 800a87a:	4393      	bics	r3, r2
 800a87c:	2b58      	cmp	r3, #88	; 0x58
 800a87e:	d150      	bne.n	800a922 <_strtol_l.constprop.0+0xf2>
 800a880:	2610      	movs	r6, #16
 800a882:	786c      	ldrb	r4, [r5, #1]
 800a884:	3502      	adds	r5, #2
 800a886:	4b2c      	ldr	r3, [pc, #176]	; (800a938 <_strtol_l.constprop.0+0x108>)
 800a888:	0031      	movs	r1, r6
 800a88a:	18fb      	adds	r3, r7, r3
 800a88c:	0018      	movs	r0, r3
 800a88e:	9303      	str	r3, [sp, #12]
 800a890:	f7f5 fce6 	bl	8000260 <__aeabi_uidivmod>
 800a894:	2200      	movs	r2, #0
 800a896:	9104      	str	r1, [sp, #16]
 800a898:	2101      	movs	r1, #1
 800a89a:	4684      	mov	ip, r0
 800a89c:	0010      	movs	r0, r2
 800a89e:	4249      	negs	r1, r1
 800a8a0:	0023      	movs	r3, r4
 800a8a2:	3b30      	subs	r3, #48	; 0x30
 800a8a4:	2b09      	cmp	r3, #9
 800a8a6:	d903      	bls.n	800a8b0 <_strtol_l.constprop.0+0x80>
 800a8a8:	3b11      	subs	r3, #17
 800a8aa:	2b19      	cmp	r3, #25
 800a8ac:	d81d      	bhi.n	800a8ea <_strtol_l.constprop.0+0xba>
 800a8ae:	330a      	adds	r3, #10
 800a8b0:	429e      	cmp	r6, r3
 800a8b2:	dd1e      	ble.n	800a8f2 <_strtol_l.constprop.0+0xc2>
 800a8b4:	1c54      	adds	r4, r2, #1
 800a8b6:	d009      	beq.n	800a8cc <_strtol_l.constprop.0+0x9c>
 800a8b8:	000a      	movs	r2, r1
 800a8ba:	4584      	cmp	ip, r0
 800a8bc:	d306      	bcc.n	800a8cc <_strtol_l.constprop.0+0x9c>
 800a8be:	d102      	bne.n	800a8c6 <_strtol_l.constprop.0+0x96>
 800a8c0:	9c04      	ldr	r4, [sp, #16]
 800a8c2:	429c      	cmp	r4, r3
 800a8c4:	db02      	blt.n	800a8cc <_strtol_l.constprop.0+0x9c>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	4370      	muls	r0, r6
 800a8ca:	1818      	adds	r0, r3, r0
 800a8cc:	782c      	ldrb	r4, [r5, #0]
 800a8ce:	3501      	adds	r5, #1
 800a8d0:	e7e6      	b.n	800a8a0 <_strtol_l.constprop.0+0x70>
 800a8d2:	f000 f9d7 	bl	800ac84 <__errno>
 800a8d6:	2316      	movs	r3, #22
 800a8d8:	6003      	str	r3, [r0, #0]
 800a8da:	2000      	movs	r0, #0
 800a8dc:	b007      	add	sp, #28
 800a8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e0:	2c2b      	cmp	r4, #43	; 0x2b
 800a8e2:	d1c2      	bne.n	800a86a <_strtol_l.constprop.0+0x3a>
 800a8e4:	781c      	ldrb	r4, [r3, #0]
 800a8e6:	1c95      	adds	r5, r2, #2
 800a8e8:	e7bf      	b.n	800a86a <_strtol_l.constprop.0+0x3a>
 800a8ea:	0023      	movs	r3, r4
 800a8ec:	3b61      	subs	r3, #97	; 0x61
 800a8ee:	2b19      	cmp	r3, #25
 800a8f0:	d9dd      	bls.n	800a8ae <_strtol_l.constprop.0+0x7e>
 800a8f2:	1c53      	adds	r3, r2, #1
 800a8f4:	d109      	bne.n	800a90a <_strtol_l.constprop.0+0xda>
 800a8f6:	2322      	movs	r3, #34	; 0x22
 800a8f8:	9a05      	ldr	r2, [sp, #20]
 800a8fa:	9803      	ldr	r0, [sp, #12]
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	9b02      	ldr	r3, [sp, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0eb      	beq.n	800a8dc <_strtol_l.constprop.0+0xac>
 800a904:	1e6b      	subs	r3, r5, #1
 800a906:	9301      	str	r3, [sp, #4]
 800a908:	e007      	b.n	800a91a <_strtol_l.constprop.0+0xea>
 800a90a:	2f00      	cmp	r7, #0
 800a90c:	d000      	beq.n	800a910 <_strtol_l.constprop.0+0xe0>
 800a90e:	4240      	negs	r0, r0
 800a910:	9b02      	ldr	r3, [sp, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0e2      	beq.n	800a8dc <_strtol_l.constprop.0+0xac>
 800a916:	2a00      	cmp	r2, #0
 800a918:	d1f4      	bne.n	800a904 <_strtol_l.constprop.0+0xd4>
 800a91a:	9b02      	ldr	r3, [sp, #8]
 800a91c:	9a01      	ldr	r2, [sp, #4]
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e7dc      	b.n	800a8dc <_strtol_l.constprop.0+0xac>
 800a922:	2430      	movs	r4, #48	; 0x30
 800a924:	2e00      	cmp	r6, #0
 800a926:	d1ae      	bne.n	800a886 <_strtol_l.constprop.0+0x56>
 800a928:	3608      	adds	r6, #8
 800a92a:	e7ac      	b.n	800a886 <_strtol_l.constprop.0+0x56>
 800a92c:	2c30      	cmp	r4, #48	; 0x30
 800a92e:	d0a2      	beq.n	800a876 <_strtol_l.constprop.0+0x46>
 800a930:	260a      	movs	r6, #10
 800a932:	e7a8      	b.n	800a886 <_strtol_l.constprop.0+0x56>
 800a934:	0800cc39 	.word	0x0800cc39
 800a938:	7fffffff 	.word	0x7fffffff

0800a93c <strtol>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	4c04      	ldr	r4, [pc, #16]	; (800a950 <strtol+0x14>)
 800a940:	0013      	movs	r3, r2
 800a942:	000a      	movs	r2, r1
 800a944:	0001      	movs	r1, r0
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	f7ff ff72 	bl	800a830 <_strtol_l.constprop.0>
 800a94c:	bd10      	pop	{r4, pc}
 800a94e:	46c0      	nop			; (mov r8, r8)
 800a950:	200001e4 	.word	0x200001e4

0800a954 <std>:
 800a954:	2300      	movs	r3, #0
 800a956:	b510      	push	{r4, lr}
 800a958:	0004      	movs	r4, r0
 800a95a:	6003      	str	r3, [r0, #0]
 800a95c:	6043      	str	r3, [r0, #4]
 800a95e:	6083      	str	r3, [r0, #8]
 800a960:	8181      	strh	r1, [r0, #12]
 800a962:	6643      	str	r3, [r0, #100]	; 0x64
 800a964:	81c2      	strh	r2, [r0, #14]
 800a966:	6103      	str	r3, [r0, #16]
 800a968:	6143      	str	r3, [r0, #20]
 800a96a:	6183      	str	r3, [r0, #24]
 800a96c:	0019      	movs	r1, r3
 800a96e:	2208      	movs	r2, #8
 800a970:	305c      	adds	r0, #92	; 0x5c
 800a972:	f000 f8ff 	bl	800ab74 <memset>
 800a976:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <std+0x50>)
 800a978:	6224      	str	r4, [r4, #32]
 800a97a:	6263      	str	r3, [r4, #36]	; 0x24
 800a97c:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <std+0x54>)
 800a97e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a980:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <std+0x58>)
 800a982:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a984:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <std+0x5c>)
 800a986:	6323      	str	r3, [r4, #48]	; 0x30
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <std+0x60>)
 800a98a:	429c      	cmp	r4, r3
 800a98c:	d005      	beq.n	800a99a <std+0x46>
 800a98e:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <std+0x64>)
 800a990:	429c      	cmp	r4, r3
 800a992:	d002      	beq.n	800a99a <std+0x46>
 800a994:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <std+0x68>)
 800a996:	429c      	cmp	r4, r3
 800a998:	d103      	bne.n	800a9a2 <std+0x4e>
 800a99a:	0020      	movs	r0, r4
 800a99c:	3058      	adds	r0, #88	; 0x58
 800a99e:	f000 f99b 	bl	800acd8 <__retarget_lock_init_recursive>
 800a9a2:	bd10      	pop	{r4, pc}
 800a9a4:	0800aadd 	.word	0x0800aadd
 800a9a8:	0800ab05 	.word	0x0800ab05
 800a9ac:	0800ab3d 	.word	0x0800ab3d
 800a9b0:	0800ab69 	.word	0x0800ab69
 800a9b4:	20000dd8 	.word	0x20000dd8
 800a9b8:	20000e40 	.word	0x20000e40
 800a9bc:	20000ea8 	.word	0x20000ea8

0800a9c0 <stdio_exit_handler>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	4a03      	ldr	r2, [pc, #12]	; (800a9d0 <stdio_exit_handler+0x10>)
 800a9c4:	4903      	ldr	r1, [pc, #12]	; (800a9d4 <stdio_exit_handler+0x14>)
 800a9c6:	4804      	ldr	r0, [pc, #16]	; (800a9d8 <stdio_exit_handler+0x18>)
 800a9c8:	f000 f86c 	bl	800aaa4 <_fwalk_sglue>
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	20000020 	.word	0x20000020
 800a9d4:	0800c231 	.word	0x0800c231
 800a9d8:	20000198 	.word	0x20000198

0800a9dc <cleanup_stdio>:
 800a9dc:	6841      	ldr	r1, [r0, #4]
 800a9de:	4b0b      	ldr	r3, [pc, #44]	; (800aa0c <cleanup_stdio+0x30>)
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	0004      	movs	r4, r0
 800a9e4:	4299      	cmp	r1, r3
 800a9e6:	d001      	beq.n	800a9ec <cleanup_stdio+0x10>
 800a9e8:	f001 fc22 	bl	800c230 <_fflush_r>
 800a9ec:	68a1      	ldr	r1, [r4, #8]
 800a9ee:	4b08      	ldr	r3, [pc, #32]	; (800aa10 <cleanup_stdio+0x34>)
 800a9f0:	4299      	cmp	r1, r3
 800a9f2:	d002      	beq.n	800a9fa <cleanup_stdio+0x1e>
 800a9f4:	0020      	movs	r0, r4
 800a9f6:	f001 fc1b 	bl	800c230 <_fflush_r>
 800a9fa:	68e1      	ldr	r1, [r4, #12]
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <cleanup_stdio+0x38>)
 800a9fe:	4299      	cmp	r1, r3
 800aa00:	d002      	beq.n	800aa08 <cleanup_stdio+0x2c>
 800aa02:	0020      	movs	r0, r4
 800aa04:	f001 fc14 	bl	800c230 <_fflush_r>
 800aa08:	bd10      	pop	{r4, pc}
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	20000dd8 	.word	0x20000dd8
 800aa10:	20000e40 	.word	0x20000e40
 800aa14:	20000ea8 	.word	0x20000ea8

0800aa18 <global_stdio_init.part.0>:
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <global_stdio_init.part.0+0x28>)
 800aa1c:	4a09      	ldr	r2, [pc, #36]	; (800aa44 <global_stdio_init.part.0+0x2c>)
 800aa1e:	2104      	movs	r1, #4
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	4809      	ldr	r0, [pc, #36]	; (800aa48 <global_stdio_init.part.0+0x30>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	f7ff ff95 	bl	800a954 <std>
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	2109      	movs	r1, #9
 800aa2e:	4807      	ldr	r0, [pc, #28]	; (800aa4c <global_stdio_init.part.0+0x34>)
 800aa30:	f7ff ff90 	bl	800a954 <std>
 800aa34:	2202      	movs	r2, #2
 800aa36:	2112      	movs	r1, #18
 800aa38:	4805      	ldr	r0, [pc, #20]	; (800aa50 <global_stdio_init.part.0+0x38>)
 800aa3a:	f7ff ff8b 	bl	800a954 <std>
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	20000f10 	.word	0x20000f10
 800aa44:	0800a9c1 	.word	0x0800a9c1
 800aa48:	20000dd8 	.word	0x20000dd8
 800aa4c:	20000e40 	.word	0x20000e40
 800aa50:	20000ea8 	.word	0x20000ea8

0800aa54 <__sfp_lock_acquire>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	4802      	ldr	r0, [pc, #8]	; (800aa60 <__sfp_lock_acquire+0xc>)
 800aa58:	f000 f93f 	bl	800acda <__retarget_lock_acquire_recursive>
 800aa5c:	bd10      	pop	{r4, pc}
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	20000f19 	.word	0x20000f19

0800aa64 <__sfp_lock_release>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	4802      	ldr	r0, [pc, #8]	; (800aa70 <__sfp_lock_release+0xc>)
 800aa68:	f000 f938 	bl	800acdc <__retarget_lock_release_recursive>
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	46c0      	nop			; (mov r8, r8)
 800aa70:	20000f19 	.word	0x20000f19

0800aa74 <__sinit>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	0004      	movs	r4, r0
 800aa78:	f7ff ffec 	bl	800aa54 <__sfp_lock_acquire>
 800aa7c:	6a23      	ldr	r3, [r4, #32]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <__sinit+0x14>
 800aa82:	f7ff ffef 	bl	800aa64 <__sfp_lock_release>
 800aa86:	bd10      	pop	{r4, pc}
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <__sinit+0x28>)
 800aa8a:	6223      	str	r3, [r4, #32]
 800aa8c:	4b04      	ldr	r3, [pc, #16]	; (800aaa0 <__sinit+0x2c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1f6      	bne.n	800aa82 <__sinit+0xe>
 800aa94:	f7ff ffc0 	bl	800aa18 <global_stdio_init.part.0>
 800aa98:	e7f3      	b.n	800aa82 <__sinit+0xe>
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	0800a9dd 	.word	0x0800a9dd
 800aaa0:	20000f10 	.word	0x20000f10

0800aaa4 <_fwalk_sglue>:
 800aaa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaa6:	0014      	movs	r4, r2
 800aaa8:	2600      	movs	r6, #0
 800aaaa:	9000      	str	r0, [sp, #0]
 800aaac:	9101      	str	r1, [sp, #4]
 800aaae:	68a5      	ldr	r5, [r4, #8]
 800aab0:	6867      	ldr	r7, [r4, #4]
 800aab2:	3f01      	subs	r7, #1
 800aab4:	d504      	bpl.n	800aac0 <_fwalk_sglue+0x1c>
 800aab6:	6824      	ldr	r4, [r4, #0]
 800aab8:	2c00      	cmp	r4, #0
 800aaba:	d1f8      	bne.n	800aaae <_fwalk_sglue+0xa>
 800aabc:	0030      	movs	r0, r6
 800aabe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aac0:	89ab      	ldrh	r3, [r5, #12]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d908      	bls.n	800aad8 <_fwalk_sglue+0x34>
 800aac6:	220e      	movs	r2, #14
 800aac8:	5eab      	ldrsh	r3, [r5, r2]
 800aaca:	3301      	adds	r3, #1
 800aacc:	d004      	beq.n	800aad8 <_fwalk_sglue+0x34>
 800aace:	0029      	movs	r1, r5
 800aad0:	9800      	ldr	r0, [sp, #0]
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	4798      	blx	r3
 800aad6:	4306      	orrs	r6, r0
 800aad8:	3568      	adds	r5, #104	; 0x68
 800aada:	e7ea      	b.n	800aab2 <_fwalk_sglue+0xe>

0800aadc <__sread>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	000c      	movs	r4, r1
 800aae0:	250e      	movs	r5, #14
 800aae2:	5f49      	ldrsh	r1, [r1, r5]
 800aae4:	f000 f894 	bl	800ac10 <_read_r>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	db03      	blt.n	800aaf4 <__sread+0x18>
 800aaec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aaee:	181b      	adds	r3, r3, r0
 800aaf0:	6563      	str	r3, [r4, #84]	; 0x54
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	4a02      	ldr	r2, [pc, #8]	; (800ab00 <__sread+0x24>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	e7f9      	b.n	800aaf2 <__sread+0x16>
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	ffffefff 	.word	0xffffefff

0800ab04 <__swrite>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	001f      	movs	r7, r3
 800ab08:	898b      	ldrh	r3, [r1, #12]
 800ab0a:	0005      	movs	r5, r0
 800ab0c:	000c      	movs	r4, r1
 800ab0e:	0016      	movs	r6, r2
 800ab10:	05db      	lsls	r3, r3, #23
 800ab12:	d505      	bpl.n	800ab20 <__swrite+0x1c>
 800ab14:	230e      	movs	r3, #14
 800ab16:	5ec9      	ldrsh	r1, [r1, r3]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	f000 f864 	bl	800abe8 <_lseek_r>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	4a05      	ldr	r2, [pc, #20]	; (800ab38 <__swrite+0x34>)
 800ab24:	0028      	movs	r0, r5
 800ab26:	4013      	ands	r3, r2
 800ab28:	81a3      	strh	r3, [r4, #12]
 800ab2a:	0032      	movs	r2, r6
 800ab2c:	230e      	movs	r3, #14
 800ab2e:	5ee1      	ldrsh	r1, [r4, r3]
 800ab30:	003b      	movs	r3, r7
 800ab32:	f000 f893 	bl	800ac5c <_write_r>
 800ab36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab38:	ffffefff 	.word	0xffffefff

0800ab3c <__sseek>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	000c      	movs	r4, r1
 800ab40:	250e      	movs	r5, #14
 800ab42:	5f49      	ldrsh	r1, [r1, r5]
 800ab44:	f000 f850 	bl	800abe8 <_lseek_r>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	1c42      	adds	r2, r0, #1
 800ab4c:	d103      	bne.n	800ab56 <__sseek+0x1a>
 800ab4e:	4a05      	ldr	r2, [pc, #20]	; (800ab64 <__sseek+0x28>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	bd70      	pop	{r4, r5, r6, pc}
 800ab56:	2280      	movs	r2, #128	; 0x80
 800ab58:	0152      	lsls	r2, r2, #5
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab60:	e7f8      	b.n	800ab54 <__sseek+0x18>
 800ab62:	46c0      	nop			; (mov r8, r8)
 800ab64:	ffffefff 	.word	0xffffefff

0800ab68 <__sclose>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	230e      	movs	r3, #14
 800ab6c:	5ec9      	ldrsh	r1, [r1, r3]
 800ab6e:	f000 f829 	bl	800abc4 <_close_r>
 800ab72:	bd10      	pop	{r4, pc}

0800ab74 <memset>:
 800ab74:	0003      	movs	r3, r0
 800ab76:	1882      	adds	r2, r0, r2
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d100      	bne.n	800ab7e <memset+0xa>
 800ab7c:	4770      	bx	lr
 800ab7e:	7019      	strb	r1, [r3, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	e7f9      	b.n	800ab78 <memset+0x4>

0800ab84 <strchr>:
 800ab84:	b2c9      	uxtb	r1, r1
 800ab86:	7803      	ldrb	r3, [r0, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d004      	beq.n	800ab96 <strchr+0x12>
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	d100      	bne.n	800ab92 <strchr+0xe>
 800ab90:	4770      	bx	lr
 800ab92:	3001      	adds	r0, #1
 800ab94:	e7f7      	b.n	800ab86 <strchr+0x2>
 800ab96:	424b      	negs	r3, r1
 800ab98:	4159      	adcs	r1, r3
 800ab9a:	4249      	negs	r1, r1
 800ab9c:	4008      	ands	r0, r1
 800ab9e:	e7f7      	b.n	800ab90 <strchr+0xc>

0800aba0 <strncmp>:
 800aba0:	b530      	push	{r4, r5, lr}
 800aba2:	0005      	movs	r5, r0
 800aba4:	1e10      	subs	r0, r2, #0
 800aba6:	d00b      	beq.n	800abc0 <strncmp+0x20>
 800aba8:	2400      	movs	r4, #0
 800abaa:	3a01      	subs	r2, #1
 800abac:	5d2b      	ldrb	r3, [r5, r4]
 800abae:	5d08      	ldrb	r0, [r1, r4]
 800abb0:	4283      	cmp	r3, r0
 800abb2:	d104      	bne.n	800abbe <strncmp+0x1e>
 800abb4:	42a2      	cmp	r2, r4
 800abb6:	d002      	beq.n	800abbe <strncmp+0x1e>
 800abb8:	3401      	adds	r4, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f6      	bne.n	800abac <strncmp+0xc>
 800abbe:	1a18      	subs	r0, r3, r0
 800abc0:	bd30      	pop	{r4, r5, pc}
	...

0800abc4 <_close_r>:
 800abc4:	2300      	movs	r3, #0
 800abc6:	b570      	push	{r4, r5, r6, lr}
 800abc8:	4d06      	ldr	r5, [pc, #24]	; (800abe4 <_close_r+0x20>)
 800abca:	0004      	movs	r4, r0
 800abcc:	0008      	movs	r0, r1
 800abce:	602b      	str	r3, [r5, #0]
 800abd0:	f7fe fd2c 	bl	800962c <_close>
 800abd4:	1c43      	adds	r3, r0, #1
 800abd6:	d103      	bne.n	800abe0 <_close_r+0x1c>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d000      	beq.n	800abe0 <_close_r+0x1c>
 800abde:	6023      	str	r3, [r4, #0]
 800abe0:	bd70      	pop	{r4, r5, r6, pc}
 800abe2:	46c0      	nop			; (mov r8, r8)
 800abe4:	20000f14 	.word	0x20000f14

0800abe8 <_lseek_r>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	0004      	movs	r4, r0
 800abec:	0008      	movs	r0, r1
 800abee:	0011      	movs	r1, r2
 800abf0:	001a      	movs	r2, r3
 800abf2:	2300      	movs	r3, #0
 800abf4:	4d05      	ldr	r5, [pc, #20]	; (800ac0c <_lseek_r+0x24>)
 800abf6:	602b      	str	r3, [r5, #0]
 800abf8:	f7fe fcd9 	bl	80095ae <_lseek>
 800abfc:	1c43      	adds	r3, r0, #1
 800abfe:	d103      	bne.n	800ac08 <_lseek_r+0x20>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d000      	beq.n	800ac08 <_lseek_r+0x20>
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
 800ac0a:	46c0      	nop			; (mov r8, r8)
 800ac0c:	20000f14 	.word	0x20000f14

0800ac10 <_read_r>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	0004      	movs	r4, r0
 800ac14:	0008      	movs	r0, r1
 800ac16:	0011      	movs	r1, r2
 800ac18:	001a      	movs	r2, r3
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4d05      	ldr	r5, [pc, #20]	; (800ac34 <_read_r+0x24>)
 800ac1e:	602b      	str	r3, [r5, #0]
 800ac20:	f7fe fc70 	bl	8009504 <_read>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d103      	bne.n	800ac30 <_read_r+0x20>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d000      	beq.n	800ac30 <_read_r+0x20>
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	20000f14 	.word	0x20000f14

0800ac38 <_sbrk_r>:
 800ac38:	2300      	movs	r3, #0
 800ac3a:	b570      	push	{r4, r5, r6, lr}
 800ac3c:	4d06      	ldr	r5, [pc, #24]	; (800ac58 <_sbrk_r+0x20>)
 800ac3e:	0004      	movs	r4, r0
 800ac40:	0008      	movs	r0, r1
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	f7f8 fae2 	bl	800320c <_sbrk>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d103      	bne.n	800ac54 <_sbrk_r+0x1c>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d000      	beq.n	800ac54 <_sbrk_r+0x1c>
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	bd70      	pop	{r4, r5, r6, pc}
 800ac56:	46c0      	nop			; (mov r8, r8)
 800ac58:	20000f14 	.word	0x20000f14

0800ac5c <_write_r>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	0004      	movs	r4, r0
 800ac60:	0008      	movs	r0, r1
 800ac62:	0011      	movs	r1, r2
 800ac64:	001a      	movs	r2, r3
 800ac66:	2300      	movs	r3, #0
 800ac68:	4d05      	ldr	r5, [pc, #20]	; (800ac80 <_write_r+0x24>)
 800ac6a:	602b      	str	r3, [r5, #0]
 800ac6c:	f7fe fcb3 	bl	80095d6 <_write>
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	d103      	bne.n	800ac7c <_write_r+0x20>
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d000      	beq.n	800ac7c <_write_r+0x20>
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	bd70      	pop	{r4, r5, r6, pc}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	20000f14 	.word	0x20000f14

0800ac84 <__errno>:
 800ac84:	4b01      	ldr	r3, [pc, #4]	; (800ac8c <__errno+0x8>)
 800ac86:	6818      	ldr	r0, [r3, #0]
 800ac88:	4770      	bx	lr
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	200001e4 	.word	0x200001e4

0800ac90 <__libc_init_array>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	2600      	movs	r6, #0
 800ac94:	4c0c      	ldr	r4, [pc, #48]	; (800acc8 <__libc_init_array+0x38>)
 800ac96:	4d0d      	ldr	r5, [pc, #52]	; (800accc <__libc_init_array+0x3c>)
 800ac98:	1b64      	subs	r4, r4, r5
 800ac9a:	10a4      	asrs	r4, r4, #2
 800ac9c:	42a6      	cmp	r6, r4
 800ac9e:	d109      	bne.n	800acb4 <__libc_init_array+0x24>
 800aca0:	2600      	movs	r6, #0
 800aca2:	f001 fe25 	bl	800c8f0 <_init>
 800aca6:	4c0a      	ldr	r4, [pc, #40]	; (800acd0 <__libc_init_array+0x40>)
 800aca8:	4d0a      	ldr	r5, [pc, #40]	; (800acd4 <__libc_init_array+0x44>)
 800acaa:	1b64      	subs	r4, r4, r5
 800acac:	10a4      	asrs	r4, r4, #2
 800acae:	42a6      	cmp	r6, r4
 800acb0:	d105      	bne.n	800acbe <__libc_init_array+0x2e>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	00b3      	lsls	r3, r6, #2
 800acb6:	58eb      	ldr	r3, [r5, r3]
 800acb8:	4798      	blx	r3
 800acba:	3601      	adds	r6, #1
 800acbc:	e7ee      	b.n	800ac9c <__libc_init_array+0xc>
 800acbe:	00b3      	lsls	r3, r6, #2
 800acc0:	58eb      	ldr	r3, [r5, r3]
 800acc2:	4798      	blx	r3
 800acc4:	3601      	adds	r6, #1
 800acc6:	e7f2      	b.n	800acae <__libc_init_array+0x1e>
 800acc8:	0800cf9c 	.word	0x0800cf9c
 800accc:	0800cf9c 	.word	0x0800cf9c
 800acd0:	0800cfa0 	.word	0x0800cfa0
 800acd4:	0800cf9c 	.word	0x0800cf9c

0800acd8 <__retarget_lock_init_recursive>:
 800acd8:	4770      	bx	lr

0800acda <__retarget_lock_acquire_recursive>:
 800acda:	4770      	bx	lr

0800acdc <__retarget_lock_release_recursive>:
 800acdc:	4770      	bx	lr

0800acde <strcpy>:
 800acde:	0003      	movs	r3, r0
 800ace0:	780a      	ldrb	r2, [r1, #0]
 800ace2:	3101      	adds	r1, #1
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	3301      	adds	r3, #1
 800ace8:	2a00      	cmp	r2, #0
 800acea:	d1f9      	bne.n	800ace0 <strcpy+0x2>
 800acec:	4770      	bx	lr

0800acee <memcpy>:
 800acee:	2300      	movs	r3, #0
 800acf0:	b510      	push	{r4, lr}
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d100      	bne.n	800acf8 <memcpy+0xa>
 800acf6:	bd10      	pop	{r4, pc}
 800acf8:	5ccc      	ldrb	r4, [r1, r3]
 800acfa:	54c4      	strb	r4, [r0, r3]
 800acfc:	3301      	adds	r3, #1
 800acfe:	e7f8      	b.n	800acf2 <memcpy+0x4>

0800ad00 <nan>:
 800ad00:	2000      	movs	r0, #0
 800ad02:	4901      	ldr	r1, [pc, #4]	; (800ad08 <nan+0x8>)
 800ad04:	4770      	bx	lr
 800ad06:	46c0      	nop			; (mov r8, r8)
 800ad08:	7ff80000 	.word	0x7ff80000

0800ad0c <_free_r>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	0005      	movs	r5, r0
 800ad10:	2900      	cmp	r1, #0
 800ad12:	d010      	beq.n	800ad36 <_free_r+0x2a>
 800ad14:	1f0c      	subs	r4, r1, #4
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	da00      	bge.n	800ad1e <_free_r+0x12>
 800ad1c:	18e4      	adds	r4, r4, r3
 800ad1e:	0028      	movs	r0, r5
 800ad20:	f7fe ff0c 	bl	8009b3c <__malloc_lock>
 800ad24:	4a1d      	ldr	r2, [pc, #116]	; (800ad9c <_free_r+0x90>)
 800ad26:	6813      	ldr	r3, [r2, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d105      	bne.n	800ad38 <_free_r+0x2c>
 800ad2c:	6063      	str	r3, [r4, #4]
 800ad2e:	6014      	str	r4, [r2, #0]
 800ad30:	0028      	movs	r0, r5
 800ad32:	f7fe ff0b 	bl	8009b4c <__malloc_unlock>
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	d908      	bls.n	800ad4e <_free_r+0x42>
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	1821      	adds	r1, r4, r0
 800ad40:	428b      	cmp	r3, r1
 800ad42:	d1f3      	bne.n	800ad2c <_free_r+0x20>
 800ad44:	6819      	ldr	r1, [r3, #0]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	1809      	adds	r1, r1, r0
 800ad4a:	6021      	str	r1, [r4, #0]
 800ad4c:	e7ee      	b.n	800ad2c <_free_r+0x20>
 800ad4e:	001a      	movs	r2, r3
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <_free_r+0x4e>
 800ad56:	42a3      	cmp	r3, r4
 800ad58:	d9f9      	bls.n	800ad4e <_free_r+0x42>
 800ad5a:	6811      	ldr	r1, [r2, #0]
 800ad5c:	1850      	adds	r0, r2, r1
 800ad5e:	42a0      	cmp	r0, r4
 800ad60:	d10b      	bne.n	800ad7a <_free_r+0x6e>
 800ad62:	6820      	ldr	r0, [r4, #0]
 800ad64:	1809      	adds	r1, r1, r0
 800ad66:	1850      	adds	r0, r2, r1
 800ad68:	6011      	str	r1, [r2, #0]
 800ad6a:	4283      	cmp	r3, r0
 800ad6c:	d1e0      	bne.n	800ad30 <_free_r+0x24>
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	1841      	adds	r1, r0, r1
 800ad74:	6011      	str	r1, [r2, #0]
 800ad76:	6053      	str	r3, [r2, #4]
 800ad78:	e7da      	b.n	800ad30 <_free_r+0x24>
 800ad7a:	42a0      	cmp	r0, r4
 800ad7c:	d902      	bls.n	800ad84 <_free_r+0x78>
 800ad7e:	230c      	movs	r3, #12
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	e7d5      	b.n	800ad30 <_free_r+0x24>
 800ad84:	6820      	ldr	r0, [r4, #0]
 800ad86:	1821      	adds	r1, r4, r0
 800ad88:	428b      	cmp	r3, r1
 800ad8a:	d103      	bne.n	800ad94 <_free_r+0x88>
 800ad8c:	6819      	ldr	r1, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	1809      	adds	r1, r1, r0
 800ad92:	6021      	str	r1, [r4, #0]
 800ad94:	6063      	str	r3, [r4, #4]
 800ad96:	6054      	str	r4, [r2, #4]
 800ad98:	e7ca      	b.n	800ad30 <_free_r+0x24>
 800ad9a:	46c0      	nop			; (mov r8, r8)
 800ad9c:	20000dd0 	.word	0x20000dd0

0800ada0 <rshift>:
 800ada0:	0002      	movs	r2, r0
 800ada2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada4:	6904      	ldr	r4, [r0, #16]
 800ada6:	114b      	asrs	r3, r1, #5
 800ada8:	b085      	sub	sp, #20
 800adaa:	3214      	adds	r2, #20
 800adac:	9302      	str	r3, [sp, #8]
 800adae:	114d      	asrs	r5, r1, #5
 800adb0:	0013      	movs	r3, r2
 800adb2:	42ac      	cmp	r4, r5
 800adb4:	dd32      	ble.n	800ae1c <rshift+0x7c>
 800adb6:	261f      	movs	r6, #31
 800adb8:	000f      	movs	r7, r1
 800adba:	114b      	asrs	r3, r1, #5
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	00a5      	lsls	r5, r4, #2
 800adc0:	18d3      	adds	r3, r2, r3
 800adc2:	4037      	ands	r7, r6
 800adc4:	1955      	adds	r5, r2, r5
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	9701      	str	r7, [sp, #4]
 800adca:	4231      	tst	r1, r6
 800adcc:	d10d      	bne.n	800adea <rshift+0x4a>
 800adce:	0016      	movs	r6, r2
 800add0:	0019      	movs	r1, r3
 800add2:	428d      	cmp	r5, r1
 800add4:	d836      	bhi.n	800ae44 <rshift+0xa4>
 800add6:	9900      	ldr	r1, [sp, #0]
 800add8:	2300      	movs	r3, #0
 800adda:	3903      	subs	r1, #3
 800addc:	428d      	cmp	r5, r1
 800adde:	d302      	bcc.n	800ade6 <rshift+0x46>
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	1ae4      	subs	r4, r4, r3
 800ade4:	00a3      	lsls	r3, r4, #2
 800ade6:	18d3      	adds	r3, r2, r3
 800ade8:	e018      	b.n	800ae1c <rshift+0x7c>
 800adea:	2120      	movs	r1, #32
 800adec:	9e01      	ldr	r6, [sp, #4]
 800adee:	9f01      	ldr	r7, [sp, #4]
 800adf0:	1b89      	subs	r1, r1, r6
 800adf2:	9e00      	ldr	r6, [sp, #0]
 800adf4:	9103      	str	r1, [sp, #12]
 800adf6:	ce02      	ldmia	r6!, {r1}
 800adf8:	4694      	mov	ip, r2
 800adfa:	40f9      	lsrs	r1, r7
 800adfc:	42b5      	cmp	r5, r6
 800adfe:	d816      	bhi.n	800ae2e <rshift+0x8e>
 800ae00:	9e00      	ldr	r6, [sp, #0]
 800ae02:	2300      	movs	r3, #0
 800ae04:	3601      	adds	r6, #1
 800ae06:	42b5      	cmp	r5, r6
 800ae08:	d303      	bcc.n	800ae12 <rshift+0x72>
 800ae0a:	9b02      	ldr	r3, [sp, #8]
 800ae0c:	1ae3      	subs	r3, r4, r3
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	3b04      	subs	r3, #4
 800ae12:	18d3      	adds	r3, r2, r3
 800ae14:	6019      	str	r1, [r3, #0]
 800ae16:	2900      	cmp	r1, #0
 800ae18:	d000      	beq.n	800ae1c <rshift+0x7c>
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	1a99      	subs	r1, r3, r2
 800ae1e:	1089      	asrs	r1, r1, #2
 800ae20:	6101      	str	r1, [r0, #16]
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d101      	bne.n	800ae2a <rshift+0x8a>
 800ae26:	2300      	movs	r3, #0
 800ae28:	6143      	str	r3, [r0, #20]
 800ae2a:	b005      	add	sp, #20
 800ae2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae2e:	6837      	ldr	r7, [r6, #0]
 800ae30:	9b03      	ldr	r3, [sp, #12]
 800ae32:	409f      	lsls	r7, r3
 800ae34:	430f      	orrs	r7, r1
 800ae36:	4661      	mov	r1, ip
 800ae38:	c180      	stmia	r1!, {r7}
 800ae3a:	468c      	mov	ip, r1
 800ae3c:	9b01      	ldr	r3, [sp, #4]
 800ae3e:	ce02      	ldmia	r6!, {r1}
 800ae40:	40d9      	lsrs	r1, r3
 800ae42:	e7db      	b.n	800adfc <rshift+0x5c>
 800ae44:	c980      	ldmia	r1!, {r7}
 800ae46:	c680      	stmia	r6!, {r7}
 800ae48:	e7c3      	b.n	800add2 <rshift+0x32>

0800ae4a <__hexdig_fun>:
 800ae4a:	0002      	movs	r2, r0
 800ae4c:	3a30      	subs	r2, #48	; 0x30
 800ae4e:	0003      	movs	r3, r0
 800ae50:	2a09      	cmp	r2, #9
 800ae52:	d802      	bhi.n	800ae5a <__hexdig_fun+0x10>
 800ae54:	3b20      	subs	r3, #32
 800ae56:	b2d8      	uxtb	r0, r3
 800ae58:	4770      	bx	lr
 800ae5a:	0002      	movs	r2, r0
 800ae5c:	3a61      	subs	r2, #97	; 0x61
 800ae5e:	2a05      	cmp	r2, #5
 800ae60:	d801      	bhi.n	800ae66 <__hexdig_fun+0x1c>
 800ae62:	3b47      	subs	r3, #71	; 0x47
 800ae64:	e7f7      	b.n	800ae56 <__hexdig_fun+0xc>
 800ae66:	001a      	movs	r2, r3
 800ae68:	3a41      	subs	r2, #65	; 0x41
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	2a05      	cmp	r2, #5
 800ae6e:	d8f3      	bhi.n	800ae58 <__hexdig_fun+0xe>
 800ae70:	3b27      	subs	r3, #39	; 0x27
 800ae72:	e7f0      	b.n	800ae56 <__hexdig_fun+0xc>

0800ae74 <__gethex>:
 800ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae76:	b089      	sub	sp, #36	; 0x24
 800ae78:	9307      	str	r3, [sp, #28]
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	9201      	str	r2, [sp, #4]
 800ae7e:	680a      	ldr	r2, [r1, #0]
 800ae80:	425b      	negs	r3, r3
 800ae82:	9003      	str	r0, [sp, #12]
 800ae84:	9106      	str	r1, [sp, #24]
 800ae86:	1c96      	adds	r6, r2, #2
 800ae88:	1a9b      	subs	r3, r3, r2
 800ae8a:	199a      	adds	r2, r3, r6
 800ae8c:	9600      	str	r6, [sp, #0]
 800ae8e:	9205      	str	r2, [sp, #20]
 800ae90:	9a00      	ldr	r2, [sp, #0]
 800ae92:	3601      	adds	r6, #1
 800ae94:	7810      	ldrb	r0, [r2, #0]
 800ae96:	2830      	cmp	r0, #48	; 0x30
 800ae98:	d0f7      	beq.n	800ae8a <__gethex+0x16>
 800ae9a:	f7ff ffd6 	bl	800ae4a <__hexdig_fun>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	001d      	movs	r5, r3
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	4298      	cmp	r0, r3
 800aea6:	d11d      	bne.n	800aee4 <__gethex+0x70>
 800aea8:	2201      	movs	r2, #1
 800aeaa:	49a6      	ldr	r1, [pc, #664]	; (800b144 <__gethex+0x2d0>)
 800aeac:	9800      	ldr	r0, [sp, #0]
 800aeae:	f7ff fe77 	bl	800aba0 <strncmp>
 800aeb2:	0007      	movs	r7, r0
 800aeb4:	42a8      	cmp	r0, r5
 800aeb6:	d169      	bne.n	800af8c <__gethex+0x118>
 800aeb8:	9b00      	ldr	r3, [sp, #0]
 800aeba:	0034      	movs	r4, r6
 800aebc:	7858      	ldrb	r0, [r3, #1]
 800aebe:	f7ff ffc4 	bl	800ae4a <__hexdig_fun>
 800aec2:	2301      	movs	r3, #1
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	42a8      	cmp	r0, r5
 800aec8:	d02f      	beq.n	800af2a <__gethex+0xb6>
 800aeca:	9600      	str	r6, [sp, #0]
 800aecc:	9b00      	ldr	r3, [sp, #0]
 800aece:	7818      	ldrb	r0, [r3, #0]
 800aed0:	2830      	cmp	r0, #48	; 0x30
 800aed2:	d009      	beq.n	800aee8 <__gethex+0x74>
 800aed4:	f7ff ffb9 	bl	800ae4a <__hexdig_fun>
 800aed8:	4242      	negs	r2, r0
 800aeda:	4142      	adcs	r2, r0
 800aedc:	2301      	movs	r3, #1
 800aede:	0035      	movs	r5, r6
 800aee0:	9202      	str	r2, [sp, #8]
 800aee2:	9305      	str	r3, [sp, #20]
 800aee4:	9c00      	ldr	r4, [sp, #0]
 800aee6:	e004      	b.n	800aef2 <__gethex+0x7e>
 800aee8:	9b00      	ldr	r3, [sp, #0]
 800aeea:	3301      	adds	r3, #1
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	e7ed      	b.n	800aecc <__gethex+0x58>
 800aef0:	3401      	adds	r4, #1
 800aef2:	7820      	ldrb	r0, [r4, #0]
 800aef4:	f7ff ffa9 	bl	800ae4a <__hexdig_fun>
 800aef8:	1e07      	subs	r7, r0, #0
 800aefa:	d1f9      	bne.n	800aef0 <__gethex+0x7c>
 800aefc:	2201      	movs	r2, #1
 800aefe:	0020      	movs	r0, r4
 800af00:	4990      	ldr	r1, [pc, #576]	; (800b144 <__gethex+0x2d0>)
 800af02:	f7ff fe4d 	bl	800aba0 <strncmp>
 800af06:	2800      	cmp	r0, #0
 800af08:	d10d      	bne.n	800af26 <__gethex+0xb2>
 800af0a:	2d00      	cmp	r5, #0
 800af0c:	d106      	bne.n	800af1c <__gethex+0xa8>
 800af0e:	3401      	adds	r4, #1
 800af10:	0025      	movs	r5, r4
 800af12:	7820      	ldrb	r0, [r4, #0]
 800af14:	f7ff ff99 	bl	800ae4a <__hexdig_fun>
 800af18:	2800      	cmp	r0, #0
 800af1a:	d102      	bne.n	800af22 <__gethex+0xae>
 800af1c:	1b2d      	subs	r5, r5, r4
 800af1e:	00af      	lsls	r7, r5, #2
 800af20:	e003      	b.n	800af2a <__gethex+0xb6>
 800af22:	3401      	adds	r4, #1
 800af24:	e7f5      	b.n	800af12 <__gethex+0x9e>
 800af26:	2d00      	cmp	r5, #0
 800af28:	d1f8      	bne.n	800af1c <__gethex+0xa8>
 800af2a:	2220      	movs	r2, #32
 800af2c:	7823      	ldrb	r3, [r4, #0]
 800af2e:	0026      	movs	r6, r4
 800af30:	4393      	bics	r3, r2
 800af32:	2b50      	cmp	r3, #80	; 0x50
 800af34:	d11d      	bne.n	800af72 <__gethex+0xfe>
 800af36:	7863      	ldrb	r3, [r4, #1]
 800af38:	2b2b      	cmp	r3, #43	; 0x2b
 800af3a:	d02c      	beq.n	800af96 <__gethex+0x122>
 800af3c:	2b2d      	cmp	r3, #45	; 0x2d
 800af3e:	d02e      	beq.n	800af9e <__gethex+0x12a>
 800af40:	2300      	movs	r3, #0
 800af42:	1c66      	adds	r6, r4, #1
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	7830      	ldrb	r0, [r6, #0]
 800af48:	f7ff ff7f 	bl	800ae4a <__hexdig_fun>
 800af4c:	1e43      	subs	r3, r0, #1
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b18      	cmp	r3, #24
 800af52:	d82b      	bhi.n	800afac <__gethex+0x138>
 800af54:	3810      	subs	r0, #16
 800af56:	0005      	movs	r5, r0
 800af58:	7870      	ldrb	r0, [r6, #1]
 800af5a:	f7ff ff76 	bl	800ae4a <__hexdig_fun>
 800af5e:	1e43      	subs	r3, r0, #1
 800af60:	b2db      	uxtb	r3, r3
 800af62:	3601      	adds	r6, #1
 800af64:	2b18      	cmp	r3, #24
 800af66:	d91c      	bls.n	800afa2 <__gethex+0x12e>
 800af68:	9b04      	ldr	r3, [sp, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d000      	beq.n	800af70 <__gethex+0xfc>
 800af6e:	426d      	negs	r5, r5
 800af70:	197f      	adds	r7, r7, r5
 800af72:	9b06      	ldr	r3, [sp, #24]
 800af74:	601e      	str	r6, [r3, #0]
 800af76:	9b02      	ldr	r3, [sp, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d019      	beq.n	800afb0 <__gethex+0x13c>
 800af7c:	2600      	movs	r6, #0
 800af7e:	9b05      	ldr	r3, [sp, #20]
 800af80:	42b3      	cmp	r3, r6
 800af82:	d100      	bne.n	800af86 <__gethex+0x112>
 800af84:	3606      	adds	r6, #6
 800af86:	0030      	movs	r0, r6
 800af88:	b009      	add	sp, #36	; 0x24
 800af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8c:	2301      	movs	r3, #1
 800af8e:	2700      	movs	r7, #0
 800af90:	9c00      	ldr	r4, [sp, #0]
 800af92:	9302      	str	r3, [sp, #8]
 800af94:	e7c9      	b.n	800af2a <__gethex+0xb6>
 800af96:	2300      	movs	r3, #0
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	1ca6      	adds	r6, r4, #2
 800af9c:	e7d3      	b.n	800af46 <__gethex+0xd2>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e7fa      	b.n	800af98 <__gethex+0x124>
 800afa2:	230a      	movs	r3, #10
 800afa4:	435d      	muls	r5, r3
 800afa6:	182d      	adds	r5, r5, r0
 800afa8:	3d10      	subs	r5, #16
 800afaa:	e7d5      	b.n	800af58 <__gethex+0xe4>
 800afac:	0026      	movs	r6, r4
 800afae:	e7e0      	b.n	800af72 <__gethex+0xfe>
 800afb0:	9b00      	ldr	r3, [sp, #0]
 800afb2:	9902      	ldr	r1, [sp, #8]
 800afb4:	1ae3      	subs	r3, r4, r3
 800afb6:	3b01      	subs	r3, #1
 800afb8:	2b07      	cmp	r3, #7
 800afba:	dc0a      	bgt.n	800afd2 <__gethex+0x15e>
 800afbc:	9803      	ldr	r0, [sp, #12]
 800afbe:	f000 fa5d 	bl	800b47c <_Balloc>
 800afc2:	1e05      	subs	r5, r0, #0
 800afc4:	d108      	bne.n	800afd8 <__gethex+0x164>
 800afc6:	002a      	movs	r2, r5
 800afc8:	21e4      	movs	r1, #228	; 0xe4
 800afca:	4b5f      	ldr	r3, [pc, #380]	; (800b148 <__gethex+0x2d4>)
 800afcc:	485f      	ldr	r0, [pc, #380]	; (800b14c <__gethex+0x2d8>)
 800afce:	f001 f965 	bl	800c29c <__assert_func>
 800afd2:	3101      	adds	r1, #1
 800afd4:	105b      	asrs	r3, r3, #1
 800afd6:	e7ef      	b.n	800afb8 <__gethex+0x144>
 800afd8:	0003      	movs	r3, r0
 800afda:	3314      	adds	r3, #20
 800afdc:	9302      	str	r3, [sp, #8]
 800afde:	9305      	str	r3, [sp, #20]
 800afe0:	2300      	movs	r3, #0
 800afe2:	001e      	movs	r6, r3
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	9b00      	ldr	r3, [sp, #0]
 800afe8:	42a3      	cmp	r3, r4
 800afea:	d33f      	bcc.n	800b06c <__gethex+0x1f8>
 800afec:	9c05      	ldr	r4, [sp, #20]
 800afee:	9b02      	ldr	r3, [sp, #8]
 800aff0:	c440      	stmia	r4!, {r6}
 800aff2:	1ae4      	subs	r4, r4, r3
 800aff4:	10a4      	asrs	r4, r4, #2
 800aff6:	0030      	movs	r0, r6
 800aff8:	612c      	str	r4, [r5, #16]
 800affa:	f000 fb37 	bl	800b66c <__hi0bits>
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	0164      	lsls	r4, r4, #5
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	1a26      	subs	r6, r4, r0
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	429e      	cmp	r6, r3
 800b00a:	dd51      	ble.n	800b0b0 <__gethex+0x23c>
 800b00c:	1af6      	subs	r6, r6, r3
 800b00e:	0031      	movs	r1, r6
 800b010:	0028      	movs	r0, r5
 800b012:	f000 fecb 	bl	800bdac <__any_on>
 800b016:	1e04      	subs	r4, r0, #0
 800b018:	d016      	beq.n	800b048 <__gethex+0x1d4>
 800b01a:	2401      	movs	r4, #1
 800b01c:	231f      	movs	r3, #31
 800b01e:	0020      	movs	r0, r4
 800b020:	1e72      	subs	r2, r6, #1
 800b022:	4013      	ands	r3, r2
 800b024:	4098      	lsls	r0, r3
 800b026:	0003      	movs	r3, r0
 800b028:	1151      	asrs	r1, r2, #5
 800b02a:	9802      	ldr	r0, [sp, #8]
 800b02c:	0089      	lsls	r1, r1, #2
 800b02e:	5809      	ldr	r1, [r1, r0]
 800b030:	4219      	tst	r1, r3
 800b032:	d009      	beq.n	800b048 <__gethex+0x1d4>
 800b034:	42a2      	cmp	r2, r4
 800b036:	dd06      	ble.n	800b046 <__gethex+0x1d2>
 800b038:	0028      	movs	r0, r5
 800b03a:	1eb1      	subs	r1, r6, #2
 800b03c:	f000 feb6 	bl	800bdac <__any_on>
 800b040:	3402      	adds	r4, #2
 800b042:	2800      	cmp	r0, #0
 800b044:	d100      	bne.n	800b048 <__gethex+0x1d4>
 800b046:	2402      	movs	r4, #2
 800b048:	0031      	movs	r1, r6
 800b04a:	0028      	movs	r0, r5
 800b04c:	f7ff fea8 	bl	800ada0 <rshift>
 800b050:	19bf      	adds	r7, r7, r6
 800b052:	9b01      	ldr	r3, [sp, #4]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	42bb      	cmp	r3, r7
 800b058:	da3a      	bge.n	800b0d0 <__gethex+0x25c>
 800b05a:	0029      	movs	r1, r5
 800b05c:	9803      	ldr	r0, [sp, #12]
 800b05e:	f000 fa51 	bl	800b504 <_Bfree>
 800b062:	2300      	movs	r3, #0
 800b064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b066:	26a3      	movs	r6, #163	; 0xa3
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	e78c      	b.n	800af86 <__gethex+0x112>
 800b06c:	3c01      	subs	r4, #1
 800b06e:	7823      	ldrb	r3, [r4, #0]
 800b070:	2b2e      	cmp	r3, #46	; 0x2e
 800b072:	d012      	beq.n	800b09a <__gethex+0x226>
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	2b20      	cmp	r3, #32
 800b078:	d104      	bne.n	800b084 <__gethex+0x210>
 800b07a:	9b05      	ldr	r3, [sp, #20]
 800b07c:	c340      	stmia	r3!, {r6}
 800b07e:	2600      	movs	r6, #0
 800b080:	9305      	str	r3, [sp, #20]
 800b082:	9604      	str	r6, [sp, #16]
 800b084:	7820      	ldrb	r0, [r4, #0]
 800b086:	f7ff fee0 	bl	800ae4a <__hexdig_fun>
 800b08a:	230f      	movs	r3, #15
 800b08c:	4018      	ands	r0, r3
 800b08e:	9b04      	ldr	r3, [sp, #16]
 800b090:	4098      	lsls	r0, r3
 800b092:	3304      	adds	r3, #4
 800b094:	4306      	orrs	r6, r0
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	e7a5      	b.n	800afe6 <__gethex+0x172>
 800b09a:	9b00      	ldr	r3, [sp, #0]
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	d8e9      	bhi.n	800b074 <__gethex+0x200>
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	0020      	movs	r0, r4
 800b0a4:	4927      	ldr	r1, [pc, #156]	; (800b144 <__gethex+0x2d0>)
 800b0a6:	f7ff fd7b 	bl	800aba0 <strncmp>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d1e2      	bne.n	800b074 <__gethex+0x200>
 800b0ae:	e79a      	b.n	800afe6 <__gethex+0x172>
 800b0b0:	9b00      	ldr	r3, [sp, #0]
 800b0b2:	2400      	movs	r4, #0
 800b0b4:	429e      	cmp	r6, r3
 800b0b6:	dacc      	bge.n	800b052 <__gethex+0x1de>
 800b0b8:	1b9e      	subs	r6, r3, r6
 800b0ba:	0029      	movs	r1, r5
 800b0bc:	0032      	movs	r2, r6
 800b0be:	9803      	ldr	r0, [sp, #12]
 800b0c0:	f000 fc40 	bl	800b944 <__lshift>
 800b0c4:	0003      	movs	r3, r0
 800b0c6:	3314      	adds	r3, #20
 800b0c8:	0005      	movs	r5, r0
 800b0ca:	1bbf      	subs	r7, r7, r6
 800b0cc:	9302      	str	r3, [sp, #8]
 800b0ce:	e7c0      	b.n	800b052 <__gethex+0x1de>
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	685e      	ldr	r6, [r3, #4]
 800b0d4:	42be      	cmp	r6, r7
 800b0d6:	dd70      	ble.n	800b1ba <__gethex+0x346>
 800b0d8:	9b00      	ldr	r3, [sp, #0]
 800b0da:	1bf6      	subs	r6, r6, r7
 800b0dc:	42b3      	cmp	r3, r6
 800b0de:	dc37      	bgt.n	800b150 <__gethex+0x2dc>
 800b0e0:	9b01      	ldr	r3, [sp, #4]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d024      	beq.n	800b132 <__gethex+0x2be>
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d026      	beq.n	800b13a <__gethex+0x2c6>
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d117      	bne.n	800b120 <__gethex+0x2ac>
 800b0f0:	9b00      	ldr	r3, [sp, #0]
 800b0f2:	42b3      	cmp	r3, r6
 800b0f4:	d114      	bne.n	800b120 <__gethex+0x2ac>
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d10b      	bne.n	800b112 <__gethex+0x29e>
 800b0fa:	9b01      	ldr	r3, [sp, #4]
 800b0fc:	9a07      	ldr	r2, [sp, #28]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	2662      	movs	r6, #98	; 0x62
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	2301      	movs	r3, #1
 800b106:	9a02      	ldr	r2, [sp, #8]
 800b108:	612b      	str	r3, [r5, #16]
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b10e:	601d      	str	r5, [r3, #0]
 800b110:	e739      	b.n	800af86 <__gethex+0x112>
 800b112:	9900      	ldr	r1, [sp, #0]
 800b114:	0028      	movs	r0, r5
 800b116:	3901      	subs	r1, #1
 800b118:	f000 fe48 	bl	800bdac <__any_on>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d1ec      	bne.n	800b0fa <__gethex+0x286>
 800b120:	0029      	movs	r1, r5
 800b122:	9803      	ldr	r0, [sp, #12]
 800b124:	f000 f9ee 	bl	800b504 <_Bfree>
 800b128:	2300      	movs	r3, #0
 800b12a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b12c:	2650      	movs	r6, #80	; 0x50
 800b12e:	6013      	str	r3, [r2, #0]
 800b130:	e729      	b.n	800af86 <__gethex+0x112>
 800b132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1f3      	bne.n	800b120 <__gethex+0x2ac>
 800b138:	e7df      	b.n	800b0fa <__gethex+0x286>
 800b13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1dc      	bne.n	800b0fa <__gethex+0x286>
 800b140:	e7ee      	b.n	800b120 <__gethex+0x2ac>
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	0800cbd6 	.word	0x0800cbd6
 800b148:	0800cd41 	.word	0x0800cd41
 800b14c:	0800cd52 	.word	0x0800cd52
 800b150:	1e77      	subs	r7, r6, #1
 800b152:	2c00      	cmp	r4, #0
 800b154:	d12f      	bne.n	800b1b6 <__gethex+0x342>
 800b156:	2f00      	cmp	r7, #0
 800b158:	d004      	beq.n	800b164 <__gethex+0x2f0>
 800b15a:	0039      	movs	r1, r7
 800b15c:	0028      	movs	r0, r5
 800b15e:	f000 fe25 	bl	800bdac <__any_on>
 800b162:	0004      	movs	r4, r0
 800b164:	231f      	movs	r3, #31
 800b166:	117a      	asrs	r2, r7, #5
 800b168:	401f      	ands	r7, r3
 800b16a:	3b1e      	subs	r3, #30
 800b16c:	40bb      	lsls	r3, r7
 800b16e:	9902      	ldr	r1, [sp, #8]
 800b170:	0092      	lsls	r2, r2, #2
 800b172:	5852      	ldr	r2, [r2, r1]
 800b174:	421a      	tst	r2, r3
 800b176:	d001      	beq.n	800b17c <__gethex+0x308>
 800b178:	2302      	movs	r3, #2
 800b17a:	431c      	orrs	r4, r3
 800b17c:	9b00      	ldr	r3, [sp, #0]
 800b17e:	0031      	movs	r1, r6
 800b180:	1b9b      	subs	r3, r3, r6
 800b182:	2602      	movs	r6, #2
 800b184:	0028      	movs	r0, r5
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	f7ff fe0a 	bl	800ada0 <rshift>
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	685f      	ldr	r7, [r3, #4]
 800b190:	2c00      	cmp	r4, #0
 800b192:	d041      	beq.n	800b218 <__gethex+0x3a4>
 800b194:	9b01      	ldr	r3, [sp, #4]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d010      	beq.n	800b1be <__gethex+0x34a>
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d012      	beq.n	800b1c6 <__gethex+0x352>
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d106      	bne.n	800b1b2 <__gethex+0x33e>
 800b1a4:	07a2      	lsls	r2, r4, #30
 800b1a6:	d504      	bpl.n	800b1b2 <__gethex+0x33e>
 800b1a8:	9a02      	ldr	r2, [sp, #8]
 800b1aa:	6812      	ldr	r2, [r2, #0]
 800b1ac:	4314      	orrs	r4, r2
 800b1ae:	421c      	tst	r4, r3
 800b1b0:	d10c      	bne.n	800b1cc <__gethex+0x358>
 800b1b2:	2310      	movs	r3, #16
 800b1b4:	e02f      	b.n	800b216 <__gethex+0x3a2>
 800b1b6:	2401      	movs	r4, #1
 800b1b8:	e7d4      	b.n	800b164 <__gethex+0x2f0>
 800b1ba:	2601      	movs	r6, #1
 800b1bc:	e7e8      	b.n	800b190 <__gethex+0x31c>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1c2:	1a9b      	subs	r3, r3, r2
 800b1c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0f2      	beq.n	800b1b2 <__gethex+0x33e>
 800b1cc:	692b      	ldr	r3, [r5, #16]
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	9302      	str	r3, [sp, #8]
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	002b      	movs	r3, r5
 800b1d8:	9a04      	ldr	r2, [sp, #16]
 800b1da:	3314      	adds	r3, #20
 800b1dc:	1899      	adds	r1, r3, r2
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	1c54      	adds	r4, r2, #1
 800b1e2:	d01e      	beq.n	800b222 <__gethex+0x3ae>
 800b1e4:	3201      	adds	r2, #1
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	002b      	movs	r3, r5
 800b1ea:	3314      	adds	r3, #20
 800b1ec:	2e02      	cmp	r6, #2
 800b1ee:	d141      	bne.n	800b274 <__gethex+0x400>
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	9900      	ldr	r1, [sp, #0]
 800b1f4:	6812      	ldr	r2, [r2, #0]
 800b1f6:	3a01      	subs	r2, #1
 800b1f8:	428a      	cmp	r2, r1
 800b1fa:	d10b      	bne.n	800b214 <__gethex+0x3a0>
 800b1fc:	221f      	movs	r2, #31
 800b1fe:	9800      	ldr	r0, [sp, #0]
 800b200:	1149      	asrs	r1, r1, #5
 800b202:	4002      	ands	r2, r0
 800b204:	2001      	movs	r0, #1
 800b206:	0004      	movs	r4, r0
 800b208:	4094      	lsls	r4, r2
 800b20a:	0089      	lsls	r1, r1, #2
 800b20c:	58cb      	ldr	r3, [r1, r3]
 800b20e:	4223      	tst	r3, r4
 800b210:	d000      	beq.n	800b214 <__gethex+0x3a0>
 800b212:	2601      	movs	r6, #1
 800b214:	2320      	movs	r3, #32
 800b216:	431e      	orrs	r6, r3
 800b218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b21a:	601d      	str	r5, [r3, #0]
 800b21c:	9b07      	ldr	r3, [sp, #28]
 800b21e:	601f      	str	r7, [r3, #0]
 800b220:	e6b1      	b.n	800af86 <__gethex+0x112>
 800b222:	c301      	stmia	r3!, {r0}
 800b224:	4299      	cmp	r1, r3
 800b226:	d8da      	bhi.n	800b1de <__gethex+0x36a>
 800b228:	68ab      	ldr	r3, [r5, #8]
 800b22a:	9a02      	ldr	r2, [sp, #8]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	db18      	blt.n	800b262 <__gethex+0x3ee>
 800b230:	6869      	ldr	r1, [r5, #4]
 800b232:	9803      	ldr	r0, [sp, #12]
 800b234:	3101      	adds	r1, #1
 800b236:	f000 f921 	bl	800b47c <_Balloc>
 800b23a:	1e04      	subs	r4, r0, #0
 800b23c:	d104      	bne.n	800b248 <__gethex+0x3d4>
 800b23e:	0022      	movs	r2, r4
 800b240:	2184      	movs	r1, #132	; 0x84
 800b242:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <__gethex+0x440>)
 800b244:	481c      	ldr	r0, [pc, #112]	; (800b2b8 <__gethex+0x444>)
 800b246:	e6c2      	b.n	800afce <__gethex+0x15a>
 800b248:	0029      	movs	r1, r5
 800b24a:	692a      	ldr	r2, [r5, #16]
 800b24c:	310c      	adds	r1, #12
 800b24e:	3202      	adds	r2, #2
 800b250:	0092      	lsls	r2, r2, #2
 800b252:	300c      	adds	r0, #12
 800b254:	f7ff fd4b 	bl	800acee <memcpy>
 800b258:	0029      	movs	r1, r5
 800b25a:	9803      	ldr	r0, [sp, #12]
 800b25c:	f000 f952 	bl	800b504 <_Bfree>
 800b260:	0025      	movs	r5, r4
 800b262:	692b      	ldr	r3, [r5, #16]
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	612a      	str	r2, [r5, #16]
 800b268:	2201      	movs	r2, #1
 800b26a:	3304      	adds	r3, #4
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	18eb      	adds	r3, r5, r3
 800b270:	605a      	str	r2, [r3, #4]
 800b272:	e7b9      	b.n	800b1e8 <__gethex+0x374>
 800b274:	692a      	ldr	r2, [r5, #16]
 800b276:	9902      	ldr	r1, [sp, #8]
 800b278:	428a      	cmp	r2, r1
 800b27a:	dd09      	ble.n	800b290 <__gethex+0x41c>
 800b27c:	2101      	movs	r1, #1
 800b27e:	0028      	movs	r0, r5
 800b280:	f7ff fd8e 	bl	800ada0 <rshift>
 800b284:	9b01      	ldr	r3, [sp, #4]
 800b286:	3701      	adds	r7, #1
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	42bb      	cmp	r3, r7
 800b28c:	dac1      	bge.n	800b212 <__gethex+0x39e>
 800b28e:	e6e4      	b.n	800b05a <__gethex+0x1e6>
 800b290:	221f      	movs	r2, #31
 800b292:	9c00      	ldr	r4, [sp, #0]
 800b294:	9900      	ldr	r1, [sp, #0]
 800b296:	2601      	movs	r6, #1
 800b298:	4014      	ands	r4, r2
 800b29a:	4211      	tst	r1, r2
 800b29c:	d0ba      	beq.n	800b214 <__gethex+0x3a0>
 800b29e:	9a04      	ldr	r2, [sp, #16]
 800b2a0:	189b      	adds	r3, r3, r2
 800b2a2:	3b04      	subs	r3, #4
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f000 f9e1 	bl	800b66c <__hi0bits>
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	1b1b      	subs	r3, r3, r4
 800b2ae:	4298      	cmp	r0, r3
 800b2b0:	dbe4      	blt.n	800b27c <__gethex+0x408>
 800b2b2:	e7af      	b.n	800b214 <__gethex+0x3a0>
 800b2b4:	0800cd41 	.word	0x0800cd41
 800b2b8:	0800cd52 	.word	0x0800cd52

0800b2bc <L_shift>:
 800b2bc:	2308      	movs	r3, #8
 800b2be:	b570      	push	{r4, r5, r6, lr}
 800b2c0:	2520      	movs	r5, #32
 800b2c2:	1a9a      	subs	r2, r3, r2
 800b2c4:	0092      	lsls	r2, r2, #2
 800b2c6:	1aad      	subs	r5, r5, r2
 800b2c8:	6843      	ldr	r3, [r0, #4]
 800b2ca:	6804      	ldr	r4, [r0, #0]
 800b2cc:	001e      	movs	r6, r3
 800b2ce:	40ae      	lsls	r6, r5
 800b2d0:	40d3      	lsrs	r3, r2
 800b2d2:	4334      	orrs	r4, r6
 800b2d4:	6004      	str	r4, [r0, #0]
 800b2d6:	6043      	str	r3, [r0, #4]
 800b2d8:	3004      	adds	r0, #4
 800b2da:	4288      	cmp	r0, r1
 800b2dc:	d3f4      	bcc.n	800b2c8 <L_shift+0xc>
 800b2de:	bd70      	pop	{r4, r5, r6, pc}

0800b2e0 <__match>:
 800b2e0:	b530      	push	{r4, r5, lr}
 800b2e2:	6803      	ldr	r3, [r0, #0]
 800b2e4:	780c      	ldrb	r4, [r1, #0]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	d102      	bne.n	800b2f2 <__match+0x12>
 800b2ec:	6003      	str	r3, [r0, #0]
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	bd30      	pop	{r4, r5, pc}
 800b2f2:	781a      	ldrb	r2, [r3, #0]
 800b2f4:	0015      	movs	r5, r2
 800b2f6:	3d41      	subs	r5, #65	; 0x41
 800b2f8:	2d19      	cmp	r5, #25
 800b2fa:	d800      	bhi.n	800b2fe <__match+0x1e>
 800b2fc:	3220      	adds	r2, #32
 800b2fe:	3101      	adds	r1, #1
 800b300:	42a2      	cmp	r2, r4
 800b302:	d0ef      	beq.n	800b2e4 <__match+0x4>
 800b304:	2000      	movs	r0, #0
 800b306:	e7f3      	b.n	800b2f0 <__match+0x10>

0800b308 <__hexnan>:
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	680b      	ldr	r3, [r1, #0]
 800b30c:	b08b      	sub	sp, #44	; 0x2c
 800b30e:	9201      	str	r2, [sp, #4]
 800b310:	9901      	ldr	r1, [sp, #4]
 800b312:	115a      	asrs	r2, r3, #5
 800b314:	0092      	lsls	r2, r2, #2
 800b316:	188a      	adds	r2, r1, r2
 800b318:	9202      	str	r2, [sp, #8]
 800b31a:	0019      	movs	r1, r3
 800b31c:	221f      	movs	r2, #31
 800b31e:	4011      	ands	r1, r2
 800b320:	9008      	str	r0, [sp, #32]
 800b322:	9106      	str	r1, [sp, #24]
 800b324:	4213      	tst	r3, r2
 800b326:	d002      	beq.n	800b32e <__hexnan+0x26>
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	3304      	adds	r3, #4
 800b32c:	9302      	str	r3, [sp, #8]
 800b32e:	9b02      	ldr	r3, [sp, #8]
 800b330:	2500      	movs	r5, #0
 800b332:	1f1f      	subs	r7, r3, #4
 800b334:	003e      	movs	r6, r7
 800b336:	003c      	movs	r4, r7
 800b338:	9b08      	ldr	r3, [sp, #32]
 800b33a:	603d      	str	r5, [r7, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	9507      	str	r5, [sp, #28]
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	9503      	str	r5, [sp, #12]
 800b344:	9b05      	ldr	r3, [sp, #20]
 800b346:	3301      	adds	r3, #1
 800b348:	9309      	str	r3, [sp, #36]	; 0x24
 800b34a:	9b05      	ldr	r3, [sp, #20]
 800b34c:	785b      	ldrb	r3, [r3, #1]
 800b34e:	9304      	str	r3, [sp, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d028      	beq.n	800b3a6 <__hexnan+0x9e>
 800b354:	9804      	ldr	r0, [sp, #16]
 800b356:	f7ff fd78 	bl	800ae4a <__hexdig_fun>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d154      	bne.n	800b408 <__hexnan+0x100>
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	2b20      	cmp	r3, #32
 800b362:	d819      	bhi.n	800b398 <__hexnan+0x90>
 800b364:	9b03      	ldr	r3, [sp, #12]
 800b366:	9a07      	ldr	r2, [sp, #28]
 800b368:	4293      	cmp	r3, r2
 800b36a:	dd12      	ble.n	800b392 <__hexnan+0x8a>
 800b36c:	42b4      	cmp	r4, r6
 800b36e:	d206      	bcs.n	800b37e <__hexnan+0x76>
 800b370:	2d07      	cmp	r5, #7
 800b372:	dc04      	bgt.n	800b37e <__hexnan+0x76>
 800b374:	002a      	movs	r2, r5
 800b376:	0031      	movs	r1, r6
 800b378:	0020      	movs	r0, r4
 800b37a:	f7ff ff9f 	bl	800b2bc <L_shift>
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	2508      	movs	r5, #8
 800b382:	429c      	cmp	r4, r3
 800b384:	d905      	bls.n	800b392 <__hexnan+0x8a>
 800b386:	1f26      	subs	r6, r4, #4
 800b388:	2500      	movs	r5, #0
 800b38a:	0034      	movs	r4, r6
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	6035      	str	r5, [r6, #0]
 800b390:	9307      	str	r3, [sp, #28]
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	e7d5      	b.n	800b344 <__hexnan+0x3c>
 800b398:	9b04      	ldr	r3, [sp, #16]
 800b39a:	2b29      	cmp	r3, #41	; 0x29
 800b39c:	d159      	bne.n	800b452 <__hexnan+0x14a>
 800b39e:	9b05      	ldr	r3, [sp, #20]
 800b3a0:	9a08      	ldr	r2, [sp, #32]
 800b3a2:	3302      	adds	r3, #2
 800b3a4:	6013      	str	r3, [r2, #0]
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d052      	beq.n	800b452 <__hexnan+0x14a>
 800b3ac:	42b4      	cmp	r4, r6
 800b3ae:	d206      	bcs.n	800b3be <__hexnan+0xb6>
 800b3b0:	2d07      	cmp	r5, #7
 800b3b2:	dc04      	bgt.n	800b3be <__hexnan+0xb6>
 800b3b4:	002a      	movs	r2, r5
 800b3b6:	0031      	movs	r1, r6
 800b3b8:	0020      	movs	r0, r4
 800b3ba:	f7ff ff7f 	bl	800b2bc <L_shift>
 800b3be:	9b01      	ldr	r3, [sp, #4]
 800b3c0:	429c      	cmp	r4, r3
 800b3c2:	d935      	bls.n	800b430 <__hexnan+0x128>
 800b3c4:	001a      	movs	r2, r3
 800b3c6:	0023      	movs	r3, r4
 800b3c8:	cb02      	ldmia	r3!, {r1}
 800b3ca:	c202      	stmia	r2!, {r1}
 800b3cc:	429f      	cmp	r7, r3
 800b3ce:	d2fb      	bcs.n	800b3c8 <__hexnan+0xc0>
 800b3d0:	9b02      	ldr	r3, [sp, #8]
 800b3d2:	1c62      	adds	r2, r4, #1
 800b3d4:	1ed9      	subs	r1, r3, #3
 800b3d6:	2304      	movs	r3, #4
 800b3d8:	4291      	cmp	r1, r2
 800b3da:	d305      	bcc.n	800b3e8 <__hexnan+0xe0>
 800b3dc:	9b02      	ldr	r3, [sp, #8]
 800b3de:	3b04      	subs	r3, #4
 800b3e0:	1b1b      	subs	r3, r3, r4
 800b3e2:	089b      	lsrs	r3, r3, #2
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	9a01      	ldr	r2, [sp, #4]
 800b3ea:	18d3      	adds	r3, r2, r3
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	c304      	stmia	r3!, {r2}
 800b3f0:	429f      	cmp	r7, r3
 800b3f2:	d2fc      	bcs.n	800b3ee <__hexnan+0xe6>
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d104      	bne.n	800b404 <__hexnan+0xfc>
 800b3fa:	9b01      	ldr	r3, [sp, #4]
 800b3fc:	429f      	cmp	r7, r3
 800b3fe:	d126      	bne.n	800b44e <__hexnan+0x146>
 800b400:	2301      	movs	r3, #1
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	2005      	movs	r0, #5
 800b406:	e025      	b.n	800b454 <__hexnan+0x14c>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	3501      	adds	r5, #1
 800b40c:	3301      	adds	r3, #1
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	2d08      	cmp	r5, #8
 800b412:	dd06      	ble.n	800b422 <__hexnan+0x11a>
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	429c      	cmp	r4, r3
 800b418:	d9bb      	bls.n	800b392 <__hexnan+0x8a>
 800b41a:	2300      	movs	r3, #0
 800b41c:	2501      	movs	r5, #1
 800b41e:	3c04      	subs	r4, #4
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	220f      	movs	r2, #15
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	4010      	ands	r0, r2
 800b428:	011b      	lsls	r3, r3, #4
 800b42a:	4303      	orrs	r3, r0
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	e7b0      	b.n	800b392 <__hexnan+0x8a>
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0de      	beq.n	800b3f4 <__hexnan+0xec>
 800b436:	2320      	movs	r3, #32
 800b438:	9a06      	ldr	r2, [sp, #24]
 800b43a:	9902      	ldr	r1, [sp, #8]
 800b43c:	1a9b      	subs	r3, r3, r2
 800b43e:	2201      	movs	r2, #1
 800b440:	4252      	negs	r2, r2
 800b442:	40da      	lsrs	r2, r3
 800b444:	3904      	subs	r1, #4
 800b446:	680b      	ldr	r3, [r1, #0]
 800b448:	4013      	ands	r3, r2
 800b44a:	600b      	str	r3, [r1, #0]
 800b44c:	e7d2      	b.n	800b3f4 <__hexnan+0xec>
 800b44e:	3f04      	subs	r7, #4
 800b450:	e7d0      	b.n	800b3f4 <__hexnan+0xec>
 800b452:	2004      	movs	r0, #4
 800b454:	b00b      	add	sp, #44	; 0x2c
 800b456:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b458 <__ascii_mbtowc>:
 800b458:	b082      	sub	sp, #8
 800b45a:	2900      	cmp	r1, #0
 800b45c:	d100      	bne.n	800b460 <__ascii_mbtowc+0x8>
 800b45e:	a901      	add	r1, sp, #4
 800b460:	1e10      	subs	r0, r2, #0
 800b462:	d006      	beq.n	800b472 <__ascii_mbtowc+0x1a>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d006      	beq.n	800b476 <__ascii_mbtowc+0x1e>
 800b468:	7813      	ldrb	r3, [r2, #0]
 800b46a:	600b      	str	r3, [r1, #0]
 800b46c:	7810      	ldrb	r0, [r2, #0]
 800b46e:	1e43      	subs	r3, r0, #1
 800b470:	4198      	sbcs	r0, r3
 800b472:	b002      	add	sp, #8
 800b474:	4770      	bx	lr
 800b476:	2002      	movs	r0, #2
 800b478:	4240      	negs	r0, r0
 800b47a:	e7fa      	b.n	800b472 <__ascii_mbtowc+0x1a>

0800b47c <_Balloc>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	69c5      	ldr	r5, [r0, #28]
 800b480:	0006      	movs	r6, r0
 800b482:	000c      	movs	r4, r1
 800b484:	2d00      	cmp	r5, #0
 800b486:	d10e      	bne.n	800b4a6 <_Balloc+0x2a>
 800b488:	2010      	movs	r0, #16
 800b48a:	f7fe fa9f 	bl	80099cc <malloc>
 800b48e:	1e02      	subs	r2, r0, #0
 800b490:	61f0      	str	r0, [r6, #28]
 800b492:	d104      	bne.n	800b49e <_Balloc+0x22>
 800b494:	216b      	movs	r1, #107	; 0x6b
 800b496:	4b19      	ldr	r3, [pc, #100]	; (800b4fc <_Balloc+0x80>)
 800b498:	4819      	ldr	r0, [pc, #100]	; (800b500 <_Balloc+0x84>)
 800b49a:	f000 feff 	bl	800c29c <__assert_func>
 800b49e:	6045      	str	r5, [r0, #4]
 800b4a0:	6085      	str	r5, [r0, #8]
 800b4a2:	6005      	str	r5, [r0, #0]
 800b4a4:	60c5      	str	r5, [r0, #12]
 800b4a6:	69f5      	ldr	r5, [r6, #28]
 800b4a8:	68eb      	ldr	r3, [r5, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d013      	beq.n	800b4d6 <_Balloc+0x5a>
 800b4ae:	69f3      	ldr	r3, [r6, #28]
 800b4b0:	00a2      	lsls	r2, r4, #2
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	189b      	adds	r3, r3, r2
 800b4b6:	6818      	ldr	r0, [r3, #0]
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d118      	bne.n	800b4ee <_Balloc+0x72>
 800b4bc:	2101      	movs	r1, #1
 800b4be:	000d      	movs	r5, r1
 800b4c0:	40a5      	lsls	r5, r4
 800b4c2:	1d6a      	adds	r2, r5, #5
 800b4c4:	0030      	movs	r0, r6
 800b4c6:	0092      	lsls	r2, r2, #2
 800b4c8:	f000 ff06 	bl	800c2d8 <_calloc_r>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d00c      	beq.n	800b4ea <_Balloc+0x6e>
 800b4d0:	6044      	str	r4, [r0, #4]
 800b4d2:	6085      	str	r5, [r0, #8]
 800b4d4:	e00d      	b.n	800b4f2 <_Balloc+0x76>
 800b4d6:	2221      	movs	r2, #33	; 0x21
 800b4d8:	2104      	movs	r1, #4
 800b4da:	0030      	movs	r0, r6
 800b4dc:	f000 fefc 	bl	800c2d8 <_calloc_r>
 800b4e0:	69f3      	ldr	r3, [r6, #28]
 800b4e2:	60e8      	str	r0, [r5, #12]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e1      	bne.n	800b4ae <_Balloc+0x32>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	bd70      	pop	{r4, r5, r6, pc}
 800b4ee:	6802      	ldr	r2, [r0, #0]
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	6103      	str	r3, [r0, #16]
 800b4f6:	60c3      	str	r3, [r0, #12]
 800b4f8:	e7f8      	b.n	800b4ec <_Balloc+0x70>
 800b4fa:	46c0      	nop			; (mov r8, r8)
 800b4fc:	0800cdb2 	.word	0x0800cdb2
 800b500:	0800cdc9 	.word	0x0800cdc9

0800b504 <_Bfree>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	69c6      	ldr	r6, [r0, #28]
 800b508:	0005      	movs	r5, r0
 800b50a:	000c      	movs	r4, r1
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	d10e      	bne.n	800b52e <_Bfree+0x2a>
 800b510:	2010      	movs	r0, #16
 800b512:	f7fe fa5b 	bl	80099cc <malloc>
 800b516:	1e02      	subs	r2, r0, #0
 800b518:	61e8      	str	r0, [r5, #28]
 800b51a:	d104      	bne.n	800b526 <_Bfree+0x22>
 800b51c:	218f      	movs	r1, #143	; 0x8f
 800b51e:	4b09      	ldr	r3, [pc, #36]	; (800b544 <_Bfree+0x40>)
 800b520:	4809      	ldr	r0, [pc, #36]	; (800b548 <_Bfree+0x44>)
 800b522:	f000 febb 	bl	800c29c <__assert_func>
 800b526:	6046      	str	r6, [r0, #4]
 800b528:	6086      	str	r6, [r0, #8]
 800b52a:	6006      	str	r6, [r0, #0]
 800b52c:	60c6      	str	r6, [r0, #12]
 800b52e:	2c00      	cmp	r4, #0
 800b530:	d007      	beq.n	800b542 <_Bfree+0x3e>
 800b532:	69eb      	ldr	r3, [r5, #28]
 800b534:	6862      	ldr	r2, [r4, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	0092      	lsls	r2, r2, #2
 800b53a:	189b      	adds	r3, r3, r2
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	6022      	str	r2, [r4, #0]
 800b540:	601c      	str	r4, [r3, #0]
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	0800cdb2 	.word	0x0800cdb2
 800b548:	0800cdc9 	.word	0x0800cdc9

0800b54c <__multadd>:
 800b54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b54e:	000e      	movs	r6, r1
 800b550:	9001      	str	r0, [sp, #4]
 800b552:	000c      	movs	r4, r1
 800b554:	001d      	movs	r5, r3
 800b556:	2000      	movs	r0, #0
 800b558:	690f      	ldr	r7, [r1, #16]
 800b55a:	3614      	adds	r6, #20
 800b55c:	6833      	ldr	r3, [r6, #0]
 800b55e:	3001      	adds	r0, #1
 800b560:	b299      	uxth	r1, r3
 800b562:	4351      	muls	r1, r2
 800b564:	0c1b      	lsrs	r3, r3, #16
 800b566:	4353      	muls	r3, r2
 800b568:	1949      	adds	r1, r1, r5
 800b56a:	0c0d      	lsrs	r5, r1, #16
 800b56c:	195b      	adds	r3, r3, r5
 800b56e:	0c1d      	lsrs	r5, r3, #16
 800b570:	b289      	uxth	r1, r1
 800b572:	041b      	lsls	r3, r3, #16
 800b574:	185b      	adds	r3, r3, r1
 800b576:	c608      	stmia	r6!, {r3}
 800b578:	4287      	cmp	r7, r0
 800b57a:	dcef      	bgt.n	800b55c <__multadd+0x10>
 800b57c:	2d00      	cmp	r5, #0
 800b57e:	d022      	beq.n	800b5c6 <__multadd+0x7a>
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	42bb      	cmp	r3, r7
 800b584:	dc19      	bgt.n	800b5ba <__multadd+0x6e>
 800b586:	6861      	ldr	r1, [r4, #4]
 800b588:	9801      	ldr	r0, [sp, #4]
 800b58a:	3101      	adds	r1, #1
 800b58c:	f7ff ff76 	bl	800b47c <_Balloc>
 800b590:	1e06      	subs	r6, r0, #0
 800b592:	d105      	bne.n	800b5a0 <__multadd+0x54>
 800b594:	0032      	movs	r2, r6
 800b596:	21ba      	movs	r1, #186	; 0xba
 800b598:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <__multadd+0x80>)
 800b59a:	480d      	ldr	r0, [pc, #52]	; (800b5d0 <__multadd+0x84>)
 800b59c:	f000 fe7e 	bl	800c29c <__assert_func>
 800b5a0:	0021      	movs	r1, r4
 800b5a2:	6922      	ldr	r2, [r4, #16]
 800b5a4:	310c      	adds	r1, #12
 800b5a6:	3202      	adds	r2, #2
 800b5a8:	0092      	lsls	r2, r2, #2
 800b5aa:	300c      	adds	r0, #12
 800b5ac:	f7ff fb9f 	bl	800acee <memcpy>
 800b5b0:	0021      	movs	r1, r4
 800b5b2:	9801      	ldr	r0, [sp, #4]
 800b5b4:	f7ff ffa6 	bl	800b504 <_Bfree>
 800b5b8:	0034      	movs	r4, r6
 800b5ba:	1d3b      	adds	r3, r7, #4
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	18e3      	adds	r3, r4, r3
 800b5c0:	605d      	str	r5, [r3, #4]
 800b5c2:	1c7b      	adds	r3, r7, #1
 800b5c4:	6123      	str	r3, [r4, #16]
 800b5c6:	0020      	movs	r0, r4
 800b5c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	0800cd41 	.word	0x0800cd41
 800b5d0:	0800cdc9 	.word	0x0800cdc9

0800b5d4 <__s2b>:
 800b5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5d6:	0006      	movs	r6, r0
 800b5d8:	0018      	movs	r0, r3
 800b5da:	000c      	movs	r4, r1
 800b5dc:	3008      	adds	r0, #8
 800b5de:	2109      	movs	r1, #9
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	0015      	movs	r5, r2
 800b5e4:	f7f4 fe40 	bl	8000268 <__divsi3>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4283      	cmp	r3, r0
 800b5ee:	db0a      	blt.n	800b606 <__s2b+0x32>
 800b5f0:	0030      	movs	r0, r6
 800b5f2:	f7ff ff43 	bl	800b47c <_Balloc>
 800b5f6:	1e01      	subs	r1, r0, #0
 800b5f8:	d108      	bne.n	800b60c <__s2b+0x38>
 800b5fa:	000a      	movs	r2, r1
 800b5fc:	4b19      	ldr	r3, [pc, #100]	; (800b664 <__s2b+0x90>)
 800b5fe:	481a      	ldr	r0, [pc, #104]	; (800b668 <__s2b+0x94>)
 800b600:	31d3      	adds	r1, #211	; 0xd3
 800b602:	f000 fe4b 	bl	800c29c <__assert_func>
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	3101      	adds	r1, #1
 800b60a:	e7ef      	b.n	800b5ec <__s2b+0x18>
 800b60c:	9b08      	ldr	r3, [sp, #32]
 800b60e:	6143      	str	r3, [r0, #20]
 800b610:	2301      	movs	r3, #1
 800b612:	6103      	str	r3, [r0, #16]
 800b614:	2d09      	cmp	r5, #9
 800b616:	dd18      	ble.n	800b64a <__s2b+0x76>
 800b618:	0023      	movs	r3, r4
 800b61a:	3309      	adds	r3, #9
 800b61c:	001f      	movs	r7, r3
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	1964      	adds	r4, r4, r5
 800b622:	783b      	ldrb	r3, [r7, #0]
 800b624:	220a      	movs	r2, #10
 800b626:	0030      	movs	r0, r6
 800b628:	3b30      	subs	r3, #48	; 0x30
 800b62a:	f7ff ff8f 	bl	800b54c <__multadd>
 800b62e:	3701      	adds	r7, #1
 800b630:	0001      	movs	r1, r0
 800b632:	42a7      	cmp	r7, r4
 800b634:	d1f5      	bne.n	800b622 <__s2b+0x4e>
 800b636:	002c      	movs	r4, r5
 800b638:	9b00      	ldr	r3, [sp, #0]
 800b63a:	3c08      	subs	r4, #8
 800b63c:	191c      	adds	r4, r3, r4
 800b63e:	002f      	movs	r7, r5
 800b640:	9b01      	ldr	r3, [sp, #4]
 800b642:	429f      	cmp	r7, r3
 800b644:	db04      	blt.n	800b650 <__s2b+0x7c>
 800b646:	0008      	movs	r0, r1
 800b648:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b64a:	2509      	movs	r5, #9
 800b64c:	340a      	adds	r4, #10
 800b64e:	e7f6      	b.n	800b63e <__s2b+0x6a>
 800b650:	1b63      	subs	r3, r4, r5
 800b652:	5ddb      	ldrb	r3, [r3, r7]
 800b654:	220a      	movs	r2, #10
 800b656:	0030      	movs	r0, r6
 800b658:	3b30      	subs	r3, #48	; 0x30
 800b65a:	f7ff ff77 	bl	800b54c <__multadd>
 800b65e:	3701      	adds	r7, #1
 800b660:	0001      	movs	r1, r0
 800b662:	e7ed      	b.n	800b640 <__s2b+0x6c>
 800b664:	0800cd41 	.word	0x0800cd41
 800b668:	0800cdc9 	.word	0x0800cdc9

0800b66c <__hi0bits>:
 800b66c:	0003      	movs	r3, r0
 800b66e:	0c02      	lsrs	r2, r0, #16
 800b670:	2000      	movs	r0, #0
 800b672:	4282      	cmp	r2, r0
 800b674:	d101      	bne.n	800b67a <__hi0bits+0xe>
 800b676:	041b      	lsls	r3, r3, #16
 800b678:	3010      	adds	r0, #16
 800b67a:	0e1a      	lsrs	r2, r3, #24
 800b67c:	d101      	bne.n	800b682 <__hi0bits+0x16>
 800b67e:	3008      	adds	r0, #8
 800b680:	021b      	lsls	r3, r3, #8
 800b682:	0f1a      	lsrs	r2, r3, #28
 800b684:	d101      	bne.n	800b68a <__hi0bits+0x1e>
 800b686:	3004      	adds	r0, #4
 800b688:	011b      	lsls	r3, r3, #4
 800b68a:	0f9a      	lsrs	r2, r3, #30
 800b68c:	d101      	bne.n	800b692 <__hi0bits+0x26>
 800b68e:	3002      	adds	r0, #2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	db03      	blt.n	800b69e <__hi0bits+0x32>
 800b696:	3001      	adds	r0, #1
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	d400      	bmi.n	800b69e <__hi0bits+0x32>
 800b69c:	2020      	movs	r0, #32
 800b69e:	4770      	bx	lr

0800b6a0 <__lo0bits>:
 800b6a0:	6803      	ldr	r3, [r0, #0]
 800b6a2:	0001      	movs	r1, r0
 800b6a4:	2207      	movs	r2, #7
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	4010      	ands	r0, r2
 800b6aa:	4213      	tst	r3, r2
 800b6ac:	d00d      	beq.n	800b6ca <__lo0bits+0x2a>
 800b6ae:	3a06      	subs	r2, #6
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	4213      	tst	r3, r2
 800b6b4:	d105      	bne.n	800b6c2 <__lo0bits+0x22>
 800b6b6:	3002      	adds	r0, #2
 800b6b8:	4203      	tst	r3, r0
 800b6ba:	d003      	beq.n	800b6c4 <__lo0bits+0x24>
 800b6bc:	40d3      	lsrs	r3, r2
 800b6be:	0010      	movs	r0, r2
 800b6c0:	600b      	str	r3, [r1, #0]
 800b6c2:	4770      	bx	lr
 800b6c4:	089b      	lsrs	r3, r3, #2
 800b6c6:	600b      	str	r3, [r1, #0]
 800b6c8:	e7fb      	b.n	800b6c2 <__lo0bits+0x22>
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	2a00      	cmp	r2, #0
 800b6ce:	d101      	bne.n	800b6d4 <__lo0bits+0x34>
 800b6d0:	2010      	movs	r0, #16
 800b6d2:	0c1b      	lsrs	r3, r3, #16
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	d101      	bne.n	800b6de <__lo0bits+0x3e>
 800b6da:	3008      	adds	r0, #8
 800b6dc:	0a1b      	lsrs	r3, r3, #8
 800b6de:	071a      	lsls	r2, r3, #28
 800b6e0:	d101      	bne.n	800b6e6 <__lo0bits+0x46>
 800b6e2:	3004      	adds	r0, #4
 800b6e4:	091b      	lsrs	r3, r3, #4
 800b6e6:	079a      	lsls	r2, r3, #30
 800b6e8:	d101      	bne.n	800b6ee <__lo0bits+0x4e>
 800b6ea:	3002      	adds	r0, #2
 800b6ec:	089b      	lsrs	r3, r3, #2
 800b6ee:	07da      	lsls	r2, r3, #31
 800b6f0:	d4e9      	bmi.n	800b6c6 <__lo0bits+0x26>
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	085b      	lsrs	r3, r3, #1
 800b6f6:	d1e6      	bne.n	800b6c6 <__lo0bits+0x26>
 800b6f8:	2020      	movs	r0, #32
 800b6fa:	e7e2      	b.n	800b6c2 <__lo0bits+0x22>

0800b6fc <__i2b>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	000c      	movs	r4, r1
 800b700:	2101      	movs	r1, #1
 800b702:	f7ff febb 	bl	800b47c <_Balloc>
 800b706:	2800      	cmp	r0, #0
 800b708:	d107      	bne.n	800b71a <__i2b+0x1e>
 800b70a:	2146      	movs	r1, #70	; 0x46
 800b70c:	4c05      	ldr	r4, [pc, #20]	; (800b724 <__i2b+0x28>)
 800b70e:	0002      	movs	r2, r0
 800b710:	4b05      	ldr	r3, [pc, #20]	; (800b728 <__i2b+0x2c>)
 800b712:	0020      	movs	r0, r4
 800b714:	31ff      	adds	r1, #255	; 0xff
 800b716:	f000 fdc1 	bl	800c29c <__assert_func>
 800b71a:	2301      	movs	r3, #1
 800b71c:	6144      	str	r4, [r0, #20]
 800b71e:	6103      	str	r3, [r0, #16]
 800b720:	bd10      	pop	{r4, pc}
 800b722:	46c0      	nop			; (mov r8, r8)
 800b724:	0800cdc9 	.word	0x0800cdc9
 800b728:	0800cd41 	.word	0x0800cd41

0800b72c <__multiply>:
 800b72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b72e:	0015      	movs	r5, r2
 800b730:	690a      	ldr	r2, [r1, #16]
 800b732:	692b      	ldr	r3, [r5, #16]
 800b734:	000c      	movs	r4, r1
 800b736:	b08b      	sub	sp, #44	; 0x2c
 800b738:	429a      	cmp	r2, r3
 800b73a:	da01      	bge.n	800b740 <__multiply+0x14>
 800b73c:	002c      	movs	r4, r5
 800b73e:	000d      	movs	r5, r1
 800b740:	6927      	ldr	r7, [r4, #16]
 800b742:	692e      	ldr	r6, [r5, #16]
 800b744:	6861      	ldr	r1, [r4, #4]
 800b746:	19bb      	adds	r3, r7, r6
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	19ba      	adds	r2, r7, r6
 800b74e:	4293      	cmp	r3, r2
 800b750:	da00      	bge.n	800b754 <__multiply+0x28>
 800b752:	3101      	adds	r1, #1
 800b754:	f7ff fe92 	bl	800b47c <_Balloc>
 800b758:	9002      	str	r0, [sp, #8]
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d106      	bne.n	800b76c <__multiply+0x40>
 800b75e:	21b1      	movs	r1, #177	; 0xb1
 800b760:	4b48      	ldr	r3, [pc, #288]	; (800b884 <__multiply+0x158>)
 800b762:	4849      	ldr	r0, [pc, #292]	; (800b888 <__multiply+0x15c>)
 800b764:	9a02      	ldr	r2, [sp, #8]
 800b766:	0049      	lsls	r1, r1, #1
 800b768:	f000 fd98 	bl	800c29c <__assert_func>
 800b76c:	9b02      	ldr	r3, [sp, #8]
 800b76e:	2200      	movs	r2, #0
 800b770:	3314      	adds	r3, #20
 800b772:	469c      	mov	ip, r3
 800b774:	19bb      	adds	r3, r7, r6
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4463      	add	r3, ip
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	4663      	mov	r3, ip
 800b77e:	9904      	ldr	r1, [sp, #16]
 800b780:	428b      	cmp	r3, r1
 800b782:	d32a      	bcc.n	800b7da <__multiply+0xae>
 800b784:	0023      	movs	r3, r4
 800b786:	00bf      	lsls	r7, r7, #2
 800b788:	3314      	adds	r3, #20
 800b78a:	3514      	adds	r5, #20
 800b78c:	9308      	str	r3, [sp, #32]
 800b78e:	00b6      	lsls	r6, r6, #2
 800b790:	19db      	adds	r3, r3, r7
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	19ab      	adds	r3, r5, r6
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	2304      	movs	r3, #4
 800b79a:	9306      	str	r3, [sp, #24]
 800b79c:	0023      	movs	r3, r4
 800b79e:	9a05      	ldr	r2, [sp, #20]
 800b7a0:	3315      	adds	r3, #21
 800b7a2:	9501      	str	r5, [sp, #4]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d305      	bcc.n	800b7b4 <__multiply+0x88>
 800b7a8:	1b13      	subs	r3, r2, r4
 800b7aa:	3b15      	subs	r3, #21
 800b7ac:	089b      	lsrs	r3, r3, #2
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	9306      	str	r3, [sp, #24]
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d310      	bcc.n	800b7de <__multiply+0xb2>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	dd05      	ble.n	800b7ce <__multiply+0xa2>
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	3b04      	subs	r3, #4
 800b7c6:	9304      	str	r3, [sp, #16]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d056      	beq.n	800b87c <__multiply+0x150>
 800b7ce:	9b02      	ldr	r3, [sp, #8]
 800b7d0:	9a03      	ldr	r2, [sp, #12]
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	611a      	str	r2, [r3, #16]
 800b7d6:	b00b      	add	sp, #44	; 0x2c
 800b7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7da:	c304      	stmia	r3!, {r2}
 800b7dc:	e7cf      	b.n	800b77e <__multiply+0x52>
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	6818      	ldr	r0, [r3, #0]
 800b7e2:	b280      	uxth	r0, r0
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d01e      	beq.n	800b826 <__multiply+0xfa>
 800b7e8:	4667      	mov	r7, ip
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	9e08      	ldr	r6, [sp, #32]
 800b7ee:	ce02      	ldmia	r6!, {r1}
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	9307      	str	r3, [sp, #28]
 800b7f4:	b28b      	uxth	r3, r1
 800b7f6:	4343      	muls	r3, r0
 800b7f8:	001a      	movs	r2, r3
 800b7fa:	466b      	mov	r3, sp
 800b7fc:	8b9b      	ldrh	r3, [r3, #28]
 800b7fe:	18d3      	adds	r3, r2, r3
 800b800:	195b      	adds	r3, r3, r5
 800b802:	0c0d      	lsrs	r5, r1, #16
 800b804:	4345      	muls	r5, r0
 800b806:	9a07      	ldr	r2, [sp, #28]
 800b808:	0c11      	lsrs	r1, r2, #16
 800b80a:	1869      	adds	r1, r5, r1
 800b80c:	0c1a      	lsrs	r2, r3, #16
 800b80e:	188a      	adds	r2, r1, r2
 800b810:	b29b      	uxth	r3, r3
 800b812:	0c15      	lsrs	r5, r2, #16
 800b814:	0412      	lsls	r2, r2, #16
 800b816:	431a      	orrs	r2, r3
 800b818:	9b05      	ldr	r3, [sp, #20]
 800b81a:	c704      	stmia	r7!, {r2}
 800b81c:	42b3      	cmp	r3, r6
 800b81e:	d8e6      	bhi.n	800b7ee <__multiply+0xc2>
 800b820:	4663      	mov	r3, ip
 800b822:	9a06      	ldr	r2, [sp, #24]
 800b824:	509d      	str	r5, [r3, r2]
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	0c00      	lsrs	r0, r0, #16
 800b82c:	d020      	beq.n	800b870 <__multiply+0x144>
 800b82e:	4663      	mov	r3, ip
 800b830:	0025      	movs	r5, r4
 800b832:	4661      	mov	r1, ip
 800b834:	2700      	movs	r7, #0
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3514      	adds	r5, #20
 800b83a:	682a      	ldr	r2, [r5, #0]
 800b83c:	680e      	ldr	r6, [r1, #0]
 800b83e:	b292      	uxth	r2, r2
 800b840:	4342      	muls	r2, r0
 800b842:	0c36      	lsrs	r6, r6, #16
 800b844:	1992      	adds	r2, r2, r6
 800b846:	19d2      	adds	r2, r2, r7
 800b848:	0416      	lsls	r6, r2, #16
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	431e      	orrs	r6, r3
 800b84e:	600e      	str	r6, [r1, #0]
 800b850:	cd40      	ldmia	r5!, {r6}
 800b852:	684b      	ldr	r3, [r1, #4]
 800b854:	0c36      	lsrs	r6, r6, #16
 800b856:	4346      	muls	r6, r0
 800b858:	b29b      	uxth	r3, r3
 800b85a:	0c12      	lsrs	r2, r2, #16
 800b85c:	18f3      	adds	r3, r6, r3
 800b85e:	189b      	adds	r3, r3, r2
 800b860:	9a05      	ldr	r2, [sp, #20]
 800b862:	0c1f      	lsrs	r7, r3, #16
 800b864:	3104      	adds	r1, #4
 800b866:	42aa      	cmp	r2, r5
 800b868:	d8e7      	bhi.n	800b83a <__multiply+0x10e>
 800b86a:	4662      	mov	r2, ip
 800b86c:	9906      	ldr	r1, [sp, #24]
 800b86e:	5053      	str	r3, [r2, r1]
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	2304      	movs	r3, #4
 800b878:	449c      	add	ip, r3
 800b87a:	e79b      	b.n	800b7b4 <__multiply+0x88>
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	3b01      	subs	r3, #1
 800b880:	9303      	str	r3, [sp, #12]
 800b882:	e79b      	b.n	800b7bc <__multiply+0x90>
 800b884:	0800cd41 	.word	0x0800cd41
 800b888:	0800cdc9 	.word	0x0800cdc9

0800b88c <__pow5mult>:
 800b88c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b88e:	2303      	movs	r3, #3
 800b890:	0015      	movs	r5, r2
 800b892:	0007      	movs	r7, r0
 800b894:	000e      	movs	r6, r1
 800b896:	401a      	ands	r2, r3
 800b898:	421d      	tst	r5, r3
 800b89a:	d008      	beq.n	800b8ae <__pow5mult+0x22>
 800b89c:	4925      	ldr	r1, [pc, #148]	; (800b934 <__pow5mult+0xa8>)
 800b89e:	3a01      	subs	r2, #1
 800b8a0:	0092      	lsls	r2, r2, #2
 800b8a2:	5852      	ldr	r2, [r2, r1]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	0031      	movs	r1, r6
 800b8a8:	f7ff fe50 	bl	800b54c <__multadd>
 800b8ac:	0006      	movs	r6, r0
 800b8ae:	10ad      	asrs	r5, r5, #2
 800b8b0:	d03d      	beq.n	800b92e <__pow5mult+0xa2>
 800b8b2:	69fc      	ldr	r4, [r7, #28]
 800b8b4:	2c00      	cmp	r4, #0
 800b8b6:	d10f      	bne.n	800b8d8 <__pow5mult+0x4c>
 800b8b8:	2010      	movs	r0, #16
 800b8ba:	f7fe f887 	bl	80099cc <malloc>
 800b8be:	1e02      	subs	r2, r0, #0
 800b8c0:	61f8      	str	r0, [r7, #28]
 800b8c2:	d105      	bne.n	800b8d0 <__pow5mult+0x44>
 800b8c4:	21b4      	movs	r1, #180	; 0xb4
 800b8c6:	4b1c      	ldr	r3, [pc, #112]	; (800b938 <__pow5mult+0xac>)
 800b8c8:	481c      	ldr	r0, [pc, #112]	; (800b93c <__pow5mult+0xb0>)
 800b8ca:	31ff      	adds	r1, #255	; 0xff
 800b8cc:	f000 fce6 	bl	800c29c <__assert_func>
 800b8d0:	6044      	str	r4, [r0, #4]
 800b8d2:	6084      	str	r4, [r0, #8]
 800b8d4:	6004      	str	r4, [r0, #0]
 800b8d6:	60c4      	str	r4, [r0, #12]
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	689c      	ldr	r4, [r3, #8]
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	d108      	bne.n	800b8f4 <__pow5mult+0x68>
 800b8e2:	0038      	movs	r0, r7
 800b8e4:	4916      	ldr	r1, [pc, #88]	; (800b940 <__pow5mult+0xb4>)
 800b8e6:	f7ff ff09 	bl	800b6fc <__i2b>
 800b8ea:	9b01      	ldr	r3, [sp, #4]
 800b8ec:	0004      	movs	r4, r0
 800b8ee:	6098      	str	r0, [r3, #8]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6003      	str	r3, [r0, #0]
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	421d      	tst	r5, r3
 800b8f8:	d00a      	beq.n	800b910 <__pow5mult+0x84>
 800b8fa:	0031      	movs	r1, r6
 800b8fc:	0022      	movs	r2, r4
 800b8fe:	0038      	movs	r0, r7
 800b900:	f7ff ff14 	bl	800b72c <__multiply>
 800b904:	0031      	movs	r1, r6
 800b906:	9001      	str	r0, [sp, #4]
 800b908:	0038      	movs	r0, r7
 800b90a:	f7ff fdfb 	bl	800b504 <_Bfree>
 800b90e:	9e01      	ldr	r6, [sp, #4]
 800b910:	106d      	asrs	r5, r5, #1
 800b912:	d00c      	beq.n	800b92e <__pow5mult+0xa2>
 800b914:	6820      	ldr	r0, [r4, #0]
 800b916:	2800      	cmp	r0, #0
 800b918:	d107      	bne.n	800b92a <__pow5mult+0x9e>
 800b91a:	0022      	movs	r2, r4
 800b91c:	0021      	movs	r1, r4
 800b91e:	0038      	movs	r0, r7
 800b920:	f7ff ff04 	bl	800b72c <__multiply>
 800b924:	2300      	movs	r3, #0
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	6003      	str	r3, [r0, #0]
 800b92a:	0004      	movs	r4, r0
 800b92c:	e7e2      	b.n	800b8f4 <__pow5mult+0x68>
 800b92e:	0030      	movs	r0, r6
 800b930:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	0800cf18 	.word	0x0800cf18
 800b938:	0800cdb2 	.word	0x0800cdb2
 800b93c:	0800cdc9 	.word	0x0800cdc9
 800b940:	00000271 	.word	0x00000271

0800b944 <__lshift>:
 800b944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b946:	000c      	movs	r4, r1
 800b948:	0017      	movs	r7, r2
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	1155      	asrs	r5, r2, #5
 800b94e:	b087      	sub	sp, #28
 800b950:	18eb      	adds	r3, r5, r3
 800b952:	9302      	str	r3, [sp, #8]
 800b954:	3301      	adds	r3, #1
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	6849      	ldr	r1, [r1, #4]
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	9004      	str	r0, [sp, #16]
 800b95e:	9a01      	ldr	r2, [sp, #4]
 800b960:	4293      	cmp	r3, r2
 800b962:	db10      	blt.n	800b986 <__lshift+0x42>
 800b964:	9804      	ldr	r0, [sp, #16]
 800b966:	f7ff fd89 	bl	800b47c <_Balloc>
 800b96a:	2300      	movs	r3, #0
 800b96c:	0002      	movs	r2, r0
 800b96e:	0006      	movs	r6, r0
 800b970:	0019      	movs	r1, r3
 800b972:	3214      	adds	r2, #20
 800b974:	4298      	cmp	r0, r3
 800b976:	d10c      	bne.n	800b992 <__lshift+0x4e>
 800b978:	31df      	adds	r1, #223	; 0xdf
 800b97a:	0032      	movs	r2, r6
 800b97c:	4b26      	ldr	r3, [pc, #152]	; (800ba18 <__lshift+0xd4>)
 800b97e:	4827      	ldr	r0, [pc, #156]	; (800ba1c <__lshift+0xd8>)
 800b980:	31ff      	adds	r1, #255	; 0xff
 800b982:	f000 fc8b 	bl	800c29c <__assert_func>
 800b986:	3101      	adds	r1, #1
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	e7e8      	b.n	800b95e <__lshift+0x1a>
 800b98c:	0098      	lsls	r0, r3, #2
 800b98e:	5011      	str	r1, [r2, r0]
 800b990:	3301      	adds	r3, #1
 800b992:	42ab      	cmp	r3, r5
 800b994:	dbfa      	blt.n	800b98c <__lshift+0x48>
 800b996:	43eb      	mvns	r3, r5
 800b998:	17db      	asrs	r3, r3, #31
 800b99a:	401d      	ands	r5, r3
 800b99c:	211f      	movs	r1, #31
 800b99e:	0023      	movs	r3, r4
 800b9a0:	0038      	movs	r0, r7
 800b9a2:	00ad      	lsls	r5, r5, #2
 800b9a4:	1955      	adds	r5, r2, r5
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	3314      	adds	r3, #20
 800b9aa:	0092      	lsls	r2, r2, #2
 800b9ac:	4008      	ands	r0, r1
 800b9ae:	4684      	mov	ip, r0
 800b9b0:	189a      	adds	r2, r3, r2
 800b9b2:	420f      	tst	r7, r1
 800b9b4:	d02a      	beq.n	800ba0c <__lshift+0xc8>
 800b9b6:	3101      	adds	r1, #1
 800b9b8:	1a09      	subs	r1, r1, r0
 800b9ba:	9105      	str	r1, [sp, #20]
 800b9bc:	2100      	movs	r1, #0
 800b9be:	9503      	str	r5, [sp, #12]
 800b9c0:	4667      	mov	r7, ip
 800b9c2:	6818      	ldr	r0, [r3, #0]
 800b9c4:	40b8      	lsls	r0, r7
 800b9c6:	4308      	orrs	r0, r1
 800b9c8:	9903      	ldr	r1, [sp, #12]
 800b9ca:	c101      	stmia	r1!, {r0}
 800b9cc:	9103      	str	r1, [sp, #12]
 800b9ce:	9805      	ldr	r0, [sp, #20]
 800b9d0:	cb02      	ldmia	r3!, {r1}
 800b9d2:	40c1      	lsrs	r1, r0
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d8f3      	bhi.n	800b9c0 <__lshift+0x7c>
 800b9d8:	0020      	movs	r0, r4
 800b9da:	3015      	adds	r0, #21
 800b9dc:	2304      	movs	r3, #4
 800b9de:	4282      	cmp	r2, r0
 800b9e0:	d304      	bcc.n	800b9ec <__lshift+0xa8>
 800b9e2:	1b13      	subs	r3, r2, r4
 800b9e4:	3b15      	subs	r3, #21
 800b9e6:	089b      	lsrs	r3, r3, #2
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	50e9      	str	r1, [r5, r3]
 800b9ee:	2900      	cmp	r1, #0
 800b9f0:	d002      	beq.n	800b9f8 <__lshift+0xb4>
 800b9f2:	9b02      	ldr	r3, [sp, #8]
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	9804      	ldr	r0, [sp, #16]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	0021      	movs	r1, r4
 800ba00:	6133      	str	r3, [r6, #16]
 800ba02:	f7ff fd7f 	bl	800b504 <_Bfree>
 800ba06:	0030      	movs	r0, r6
 800ba08:	b007      	add	sp, #28
 800ba0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0c:	cb02      	ldmia	r3!, {r1}
 800ba0e:	c502      	stmia	r5!, {r1}
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d8fb      	bhi.n	800ba0c <__lshift+0xc8>
 800ba14:	e7f0      	b.n	800b9f8 <__lshift+0xb4>
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	0800cd41 	.word	0x0800cd41
 800ba1c:	0800cdc9 	.word	0x0800cdc9

0800ba20 <__mcmp>:
 800ba20:	b530      	push	{r4, r5, lr}
 800ba22:	690b      	ldr	r3, [r1, #16]
 800ba24:	6904      	ldr	r4, [r0, #16]
 800ba26:	0002      	movs	r2, r0
 800ba28:	1ae0      	subs	r0, r4, r3
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d10e      	bne.n	800ba4c <__mcmp+0x2c>
 800ba2e:	3214      	adds	r2, #20
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	3114      	adds	r1, #20
 800ba34:	0014      	movs	r4, r2
 800ba36:	18c9      	adds	r1, r1, r3
 800ba38:	18d2      	adds	r2, r2, r3
 800ba3a:	3a04      	subs	r2, #4
 800ba3c:	3904      	subs	r1, #4
 800ba3e:	6815      	ldr	r5, [r2, #0]
 800ba40:	680b      	ldr	r3, [r1, #0]
 800ba42:	429d      	cmp	r5, r3
 800ba44:	d003      	beq.n	800ba4e <__mcmp+0x2e>
 800ba46:	2001      	movs	r0, #1
 800ba48:	429d      	cmp	r5, r3
 800ba4a:	d303      	bcc.n	800ba54 <__mcmp+0x34>
 800ba4c:	bd30      	pop	{r4, r5, pc}
 800ba4e:	4294      	cmp	r4, r2
 800ba50:	d3f3      	bcc.n	800ba3a <__mcmp+0x1a>
 800ba52:	e7fb      	b.n	800ba4c <__mcmp+0x2c>
 800ba54:	4240      	negs	r0, r0
 800ba56:	e7f9      	b.n	800ba4c <__mcmp+0x2c>

0800ba58 <__mdiff>:
 800ba58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba5a:	000e      	movs	r6, r1
 800ba5c:	0007      	movs	r7, r0
 800ba5e:	0011      	movs	r1, r2
 800ba60:	0030      	movs	r0, r6
 800ba62:	b087      	sub	sp, #28
 800ba64:	0014      	movs	r4, r2
 800ba66:	f7ff ffdb 	bl	800ba20 <__mcmp>
 800ba6a:	1e05      	subs	r5, r0, #0
 800ba6c:	d110      	bne.n	800ba90 <__mdiff+0x38>
 800ba6e:	0001      	movs	r1, r0
 800ba70:	0038      	movs	r0, r7
 800ba72:	f7ff fd03 	bl	800b47c <_Balloc>
 800ba76:	1e02      	subs	r2, r0, #0
 800ba78:	d104      	bne.n	800ba84 <__mdiff+0x2c>
 800ba7a:	4b3f      	ldr	r3, [pc, #252]	; (800bb78 <__mdiff+0x120>)
 800ba7c:	483f      	ldr	r0, [pc, #252]	; (800bb7c <__mdiff+0x124>)
 800ba7e:	4940      	ldr	r1, [pc, #256]	; (800bb80 <__mdiff+0x128>)
 800ba80:	f000 fc0c 	bl	800c29c <__assert_func>
 800ba84:	2301      	movs	r3, #1
 800ba86:	6145      	str	r5, [r0, #20]
 800ba88:	6103      	str	r3, [r0, #16]
 800ba8a:	0010      	movs	r0, r2
 800ba8c:	b007      	add	sp, #28
 800ba8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba90:	2301      	movs	r3, #1
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	2800      	cmp	r0, #0
 800ba96:	db04      	blt.n	800baa2 <__mdiff+0x4a>
 800ba98:	0023      	movs	r3, r4
 800ba9a:	0034      	movs	r4, r6
 800ba9c:	001e      	movs	r6, r3
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	0038      	movs	r0, r7
 800baa4:	6861      	ldr	r1, [r4, #4]
 800baa6:	f7ff fce9 	bl	800b47c <_Balloc>
 800baaa:	1e02      	subs	r2, r0, #0
 800baac:	d103      	bne.n	800bab6 <__mdiff+0x5e>
 800baae:	4b32      	ldr	r3, [pc, #200]	; (800bb78 <__mdiff+0x120>)
 800bab0:	4832      	ldr	r0, [pc, #200]	; (800bb7c <__mdiff+0x124>)
 800bab2:	4934      	ldr	r1, [pc, #208]	; (800bb84 <__mdiff+0x12c>)
 800bab4:	e7e4      	b.n	800ba80 <__mdiff+0x28>
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	2700      	movs	r7, #0
 800baba:	60c3      	str	r3, [r0, #12]
 800babc:	6920      	ldr	r0, [r4, #16]
 800babe:	3414      	adds	r4, #20
 800bac0:	0083      	lsls	r3, r0, #2
 800bac2:	18e3      	adds	r3, r4, r3
 800bac4:	0021      	movs	r1, r4
 800bac6:	9401      	str	r4, [sp, #4]
 800bac8:	0034      	movs	r4, r6
 800baca:	9302      	str	r3, [sp, #8]
 800bacc:	6933      	ldr	r3, [r6, #16]
 800bace:	3414      	adds	r4, #20
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	18e3      	adds	r3, r4, r3
 800bad4:	9303      	str	r3, [sp, #12]
 800bad6:	0013      	movs	r3, r2
 800bad8:	3314      	adds	r3, #20
 800bada:	469c      	mov	ip, r3
 800badc:	9305      	str	r3, [sp, #20]
 800bade:	9104      	str	r1, [sp, #16]
 800bae0:	9b04      	ldr	r3, [sp, #16]
 800bae2:	cc02      	ldmia	r4!, {r1}
 800bae4:	cb20      	ldmia	r3!, {r5}
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	b2ab      	uxth	r3, r5
 800baea:	19df      	adds	r7, r3, r7
 800baec:	b28b      	uxth	r3, r1
 800baee:	1afb      	subs	r3, r7, r3
 800baf0:	0c09      	lsrs	r1, r1, #16
 800baf2:	0c2d      	lsrs	r5, r5, #16
 800baf4:	1a6d      	subs	r5, r5, r1
 800baf6:	1419      	asrs	r1, r3, #16
 800baf8:	1869      	adds	r1, r5, r1
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	140f      	asrs	r7, r1, #16
 800bafe:	0409      	lsls	r1, r1, #16
 800bb00:	4319      	orrs	r1, r3
 800bb02:	4663      	mov	r3, ip
 800bb04:	c302      	stmia	r3!, {r1}
 800bb06:	469c      	mov	ip, r3
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	42a3      	cmp	r3, r4
 800bb0c:	d8e8      	bhi.n	800bae0 <__mdiff+0x88>
 800bb0e:	0031      	movs	r1, r6
 800bb10:	9c03      	ldr	r4, [sp, #12]
 800bb12:	3115      	adds	r1, #21
 800bb14:	2304      	movs	r3, #4
 800bb16:	428c      	cmp	r4, r1
 800bb18:	d304      	bcc.n	800bb24 <__mdiff+0xcc>
 800bb1a:	1ba3      	subs	r3, r4, r6
 800bb1c:	3b15      	subs	r3, #21
 800bb1e:	089b      	lsrs	r3, r3, #2
 800bb20:	3301      	adds	r3, #1
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	9901      	ldr	r1, [sp, #4]
 800bb26:	18cd      	adds	r5, r1, r3
 800bb28:	9905      	ldr	r1, [sp, #20]
 800bb2a:	002e      	movs	r6, r5
 800bb2c:	18cb      	adds	r3, r1, r3
 800bb2e:	469c      	mov	ip, r3
 800bb30:	9902      	ldr	r1, [sp, #8]
 800bb32:	428e      	cmp	r6, r1
 800bb34:	d310      	bcc.n	800bb58 <__mdiff+0x100>
 800bb36:	9e02      	ldr	r6, [sp, #8]
 800bb38:	1ee9      	subs	r1, r5, #3
 800bb3a:	2400      	movs	r4, #0
 800bb3c:	428e      	cmp	r6, r1
 800bb3e:	d304      	bcc.n	800bb4a <__mdiff+0xf2>
 800bb40:	0031      	movs	r1, r6
 800bb42:	3103      	adds	r1, #3
 800bb44:	1b49      	subs	r1, r1, r5
 800bb46:	0889      	lsrs	r1, r1, #2
 800bb48:	008c      	lsls	r4, r1, #2
 800bb4a:	191b      	adds	r3, r3, r4
 800bb4c:	3b04      	subs	r3, #4
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	2900      	cmp	r1, #0
 800bb52:	d00f      	beq.n	800bb74 <__mdiff+0x11c>
 800bb54:	6110      	str	r0, [r2, #16]
 800bb56:	e798      	b.n	800ba8a <__mdiff+0x32>
 800bb58:	ce02      	ldmia	r6!, {r1}
 800bb5a:	b28c      	uxth	r4, r1
 800bb5c:	19e4      	adds	r4, r4, r7
 800bb5e:	0c0f      	lsrs	r7, r1, #16
 800bb60:	1421      	asrs	r1, r4, #16
 800bb62:	1879      	adds	r1, r7, r1
 800bb64:	b2a4      	uxth	r4, r4
 800bb66:	140f      	asrs	r7, r1, #16
 800bb68:	0409      	lsls	r1, r1, #16
 800bb6a:	4321      	orrs	r1, r4
 800bb6c:	4664      	mov	r4, ip
 800bb6e:	c402      	stmia	r4!, {r1}
 800bb70:	46a4      	mov	ip, r4
 800bb72:	e7dd      	b.n	800bb30 <__mdiff+0xd8>
 800bb74:	3801      	subs	r0, #1
 800bb76:	e7e9      	b.n	800bb4c <__mdiff+0xf4>
 800bb78:	0800cd41 	.word	0x0800cd41
 800bb7c:	0800cdc9 	.word	0x0800cdc9
 800bb80:	00000237 	.word	0x00000237
 800bb84:	00000245 	.word	0x00000245

0800bb88 <__ulp>:
 800bb88:	2000      	movs	r0, #0
 800bb8a:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <__ulp+0x30>)
 800bb8c:	4019      	ands	r1, r3
 800bb8e:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <__ulp+0x34>)
 800bb90:	18c9      	adds	r1, r1, r3
 800bb92:	4281      	cmp	r1, r0
 800bb94:	dc06      	bgt.n	800bba4 <__ulp+0x1c>
 800bb96:	4249      	negs	r1, r1
 800bb98:	150b      	asrs	r3, r1, #20
 800bb9a:	2b13      	cmp	r3, #19
 800bb9c:	dc03      	bgt.n	800bba6 <__ulp+0x1e>
 800bb9e:	2180      	movs	r1, #128	; 0x80
 800bba0:	0309      	lsls	r1, r1, #12
 800bba2:	4119      	asrs	r1, r3
 800bba4:	4770      	bx	lr
 800bba6:	3b14      	subs	r3, #20
 800bba8:	2001      	movs	r0, #1
 800bbaa:	2b1e      	cmp	r3, #30
 800bbac:	dc02      	bgt.n	800bbb4 <__ulp+0x2c>
 800bbae:	2080      	movs	r0, #128	; 0x80
 800bbb0:	0600      	lsls	r0, r0, #24
 800bbb2:	40d8      	lsrs	r0, r3
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	e7f5      	b.n	800bba4 <__ulp+0x1c>
 800bbb8:	7ff00000 	.word	0x7ff00000
 800bbbc:	fcc00000 	.word	0xfcc00000

0800bbc0 <__b2d>:
 800bbc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbc2:	0006      	movs	r6, r0
 800bbc4:	6903      	ldr	r3, [r0, #16]
 800bbc6:	3614      	adds	r6, #20
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	18f3      	adds	r3, r6, r3
 800bbcc:	1f1d      	subs	r5, r3, #4
 800bbce:	682c      	ldr	r4, [r5, #0]
 800bbd0:	000f      	movs	r7, r1
 800bbd2:	0020      	movs	r0, r4
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	f7ff fd49 	bl	800b66c <__hi0bits>
 800bbda:	2220      	movs	r2, #32
 800bbdc:	1a12      	subs	r2, r2, r0
 800bbde:	603a      	str	r2, [r7, #0]
 800bbe0:	0003      	movs	r3, r0
 800bbe2:	4a1c      	ldr	r2, [pc, #112]	; (800bc54 <__b2d+0x94>)
 800bbe4:	280a      	cmp	r0, #10
 800bbe6:	dc15      	bgt.n	800bc14 <__b2d+0x54>
 800bbe8:	210b      	movs	r1, #11
 800bbea:	0027      	movs	r7, r4
 800bbec:	1a09      	subs	r1, r1, r0
 800bbee:	40cf      	lsrs	r7, r1
 800bbf0:	433a      	orrs	r2, r7
 800bbf2:	468c      	mov	ip, r1
 800bbf4:	0011      	movs	r1, r2
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	42ae      	cmp	r6, r5
 800bbfa:	d202      	bcs.n	800bc02 <__b2d+0x42>
 800bbfc:	9a01      	ldr	r2, [sp, #4]
 800bbfe:	3a08      	subs	r2, #8
 800bc00:	6812      	ldr	r2, [r2, #0]
 800bc02:	3315      	adds	r3, #21
 800bc04:	409c      	lsls	r4, r3
 800bc06:	4663      	mov	r3, ip
 800bc08:	0027      	movs	r7, r4
 800bc0a:	40da      	lsrs	r2, r3
 800bc0c:	4317      	orrs	r7, r2
 800bc0e:	0038      	movs	r0, r7
 800bc10:	b003      	add	sp, #12
 800bc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc14:	2700      	movs	r7, #0
 800bc16:	42ae      	cmp	r6, r5
 800bc18:	d202      	bcs.n	800bc20 <__b2d+0x60>
 800bc1a:	9d01      	ldr	r5, [sp, #4]
 800bc1c:	3d08      	subs	r5, #8
 800bc1e:	682f      	ldr	r7, [r5, #0]
 800bc20:	210b      	movs	r1, #11
 800bc22:	4249      	negs	r1, r1
 800bc24:	468c      	mov	ip, r1
 800bc26:	449c      	add	ip, r3
 800bc28:	2b0b      	cmp	r3, #11
 800bc2a:	d010      	beq.n	800bc4e <__b2d+0x8e>
 800bc2c:	4661      	mov	r1, ip
 800bc2e:	2320      	movs	r3, #32
 800bc30:	408c      	lsls	r4, r1
 800bc32:	1a5b      	subs	r3, r3, r1
 800bc34:	0039      	movs	r1, r7
 800bc36:	40d9      	lsrs	r1, r3
 800bc38:	430c      	orrs	r4, r1
 800bc3a:	4322      	orrs	r2, r4
 800bc3c:	0011      	movs	r1, r2
 800bc3e:	2200      	movs	r2, #0
 800bc40:	42b5      	cmp	r5, r6
 800bc42:	d901      	bls.n	800bc48 <__b2d+0x88>
 800bc44:	3d04      	subs	r5, #4
 800bc46:	682a      	ldr	r2, [r5, #0]
 800bc48:	4664      	mov	r4, ip
 800bc4a:	40a7      	lsls	r7, r4
 800bc4c:	e7dd      	b.n	800bc0a <__b2d+0x4a>
 800bc4e:	4322      	orrs	r2, r4
 800bc50:	0011      	movs	r1, r2
 800bc52:	e7dc      	b.n	800bc0e <__b2d+0x4e>
 800bc54:	3ff00000 	.word	0x3ff00000

0800bc58 <__d2b>:
 800bc58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	0014      	movs	r4, r2
 800bc5e:	001d      	movs	r5, r3
 800bc60:	9f08      	ldr	r7, [sp, #32]
 800bc62:	f7ff fc0b 	bl	800b47c <_Balloc>
 800bc66:	1e06      	subs	r6, r0, #0
 800bc68:	d105      	bne.n	800bc76 <__d2b+0x1e>
 800bc6a:	0032      	movs	r2, r6
 800bc6c:	4b24      	ldr	r3, [pc, #144]	; (800bd00 <__d2b+0xa8>)
 800bc6e:	4825      	ldr	r0, [pc, #148]	; (800bd04 <__d2b+0xac>)
 800bc70:	4925      	ldr	r1, [pc, #148]	; (800bd08 <__d2b+0xb0>)
 800bc72:	f000 fb13 	bl	800c29c <__assert_func>
 800bc76:	032b      	lsls	r3, r5, #12
 800bc78:	006d      	lsls	r5, r5, #1
 800bc7a:	0b1b      	lsrs	r3, r3, #12
 800bc7c:	0d6d      	lsrs	r5, r5, #21
 800bc7e:	d125      	bne.n	800bccc <__d2b+0x74>
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	2c00      	cmp	r4, #0
 800bc84:	d028      	beq.n	800bcd8 <__d2b+0x80>
 800bc86:	4668      	mov	r0, sp
 800bc88:	9400      	str	r4, [sp, #0]
 800bc8a:	f7ff fd09 	bl	800b6a0 <__lo0bits>
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	9900      	ldr	r1, [sp, #0]
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d01e      	beq.n	800bcd4 <__d2b+0x7c>
 800bc96:	2220      	movs	r2, #32
 800bc98:	001c      	movs	r4, r3
 800bc9a:	1a12      	subs	r2, r2, r0
 800bc9c:	4094      	lsls	r4, r2
 800bc9e:	0022      	movs	r2, r4
 800bca0:	40c3      	lsrs	r3, r0
 800bca2:	430a      	orrs	r2, r1
 800bca4:	6172      	str	r2, [r6, #20]
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	9c01      	ldr	r4, [sp, #4]
 800bcaa:	61b4      	str	r4, [r6, #24]
 800bcac:	1e63      	subs	r3, r4, #1
 800bcae:	419c      	sbcs	r4, r3
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	6134      	str	r4, [r6, #16]
 800bcb4:	2d00      	cmp	r5, #0
 800bcb6:	d017      	beq.n	800bce8 <__d2b+0x90>
 800bcb8:	2435      	movs	r4, #53	; 0x35
 800bcba:	4b14      	ldr	r3, [pc, #80]	; (800bd0c <__d2b+0xb4>)
 800bcbc:	18ed      	adds	r5, r5, r3
 800bcbe:	182d      	adds	r5, r5, r0
 800bcc0:	603d      	str	r5, [r7, #0]
 800bcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc4:	1a24      	subs	r4, r4, r0
 800bcc6:	601c      	str	r4, [r3, #0]
 800bcc8:	0030      	movs	r0, r6
 800bcca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bccc:	2280      	movs	r2, #128	; 0x80
 800bcce:	0352      	lsls	r2, r2, #13
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	e7d5      	b.n	800bc80 <__d2b+0x28>
 800bcd4:	6171      	str	r1, [r6, #20]
 800bcd6:	e7e7      	b.n	800bca8 <__d2b+0x50>
 800bcd8:	a801      	add	r0, sp, #4
 800bcda:	f7ff fce1 	bl	800b6a0 <__lo0bits>
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	2401      	movs	r4, #1
 800bce2:	6173      	str	r3, [r6, #20]
 800bce4:	3020      	adds	r0, #32
 800bce6:	e7e4      	b.n	800bcb2 <__d2b+0x5a>
 800bce8:	4b09      	ldr	r3, [pc, #36]	; (800bd10 <__d2b+0xb8>)
 800bcea:	18c0      	adds	r0, r0, r3
 800bcec:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <__d2b+0xbc>)
 800bcee:	6038      	str	r0, [r7, #0]
 800bcf0:	18e3      	adds	r3, r4, r3
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	18f3      	adds	r3, r6, r3
 800bcf6:	6958      	ldr	r0, [r3, #20]
 800bcf8:	f7ff fcb8 	bl	800b66c <__hi0bits>
 800bcfc:	0164      	lsls	r4, r4, #5
 800bcfe:	e7e0      	b.n	800bcc2 <__d2b+0x6a>
 800bd00:	0800cd41 	.word	0x0800cd41
 800bd04:	0800cdc9 	.word	0x0800cdc9
 800bd08:	0000030f 	.word	0x0000030f
 800bd0c:	fffffbcd 	.word	0xfffffbcd
 800bd10:	fffffbce 	.word	0xfffffbce
 800bd14:	3fffffff 	.word	0x3fffffff

0800bd18 <__ratio>:
 800bd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	000f      	movs	r7, r1
 800bd1e:	a904      	add	r1, sp, #16
 800bd20:	0006      	movs	r6, r0
 800bd22:	f7ff ff4d 	bl	800bbc0 <__b2d>
 800bd26:	9000      	str	r0, [sp, #0]
 800bd28:	9101      	str	r1, [sp, #4]
 800bd2a:	9c00      	ldr	r4, [sp, #0]
 800bd2c:	9d01      	ldr	r5, [sp, #4]
 800bd2e:	0038      	movs	r0, r7
 800bd30:	a905      	add	r1, sp, #20
 800bd32:	f7ff ff45 	bl	800bbc0 <__b2d>
 800bd36:	9002      	str	r0, [sp, #8]
 800bd38:	9103      	str	r1, [sp, #12]
 800bd3a:	9a02      	ldr	r2, [sp, #8]
 800bd3c:	9b03      	ldr	r3, [sp, #12]
 800bd3e:	6930      	ldr	r0, [r6, #16]
 800bd40:	6939      	ldr	r1, [r7, #16]
 800bd42:	9e04      	ldr	r6, [sp, #16]
 800bd44:	1a40      	subs	r0, r0, r1
 800bd46:	9905      	ldr	r1, [sp, #20]
 800bd48:	0140      	lsls	r0, r0, #5
 800bd4a:	1a71      	subs	r1, r6, r1
 800bd4c:	1841      	adds	r1, r0, r1
 800bd4e:	0508      	lsls	r0, r1, #20
 800bd50:	2900      	cmp	r1, #0
 800bd52:	dd07      	ble.n	800bd64 <__ratio+0x4c>
 800bd54:	9901      	ldr	r1, [sp, #4]
 800bd56:	1845      	adds	r5, r0, r1
 800bd58:	0020      	movs	r0, r4
 800bd5a:	0029      	movs	r1, r5
 800bd5c:	f7f5 f898 	bl	8000e90 <__aeabi_ddiv>
 800bd60:	b007      	add	sp, #28
 800bd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd64:	9903      	ldr	r1, [sp, #12]
 800bd66:	1a0b      	subs	r3, r1, r0
 800bd68:	e7f6      	b.n	800bd58 <__ratio+0x40>

0800bd6a <__copybits>:
 800bd6a:	b570      	push	{r4, r5, r6, lr}
 800bd6c:	0014      	movs	r4, r2
 800bd6e:	0005      	movs	r5, r0
 800bd70:	3901      	subs	r1, #1
 800bd72:	6913      	ldr	r3, [r2, #16]
 800bd74:	1149      	asrs	r1, r1, #5
 800bd76:	3101      	adds	r1, #1
 800bd78:	0089      	lsls	r1, r1, #2
 800bd7a:	3414      	adds	r4, #20
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	1841      	adds	r1, r0, r1
 800bd80:	18e3      	adds	r3, r4, r3
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	d80d      	bhi.n	800bda2 <__copybits+0x38>
 800bd86:	0014      	movs	r4, r2
 800bd88:	3411      	adds	r4, #17
 800bd8a:	2500      	movs	r5, #0
 800bd8c:	429c      	cmp	r4, r3
 800bd8e:	d803      	bhi.n	800bd98 <__copybits+0x2e>
 800bd90:	1a9b      	subs	r3, r3, r2
 800bd92:	3b11      	subs	r3, #17
 800bd94:	089b      	lsrs	r3, r3, #2
 800bd96:	009d      	lsls	r5, r3, #2
 800bd98:	2300      	movs	r3, #0
 800bd9a:	1940      	adds	r0, r0, r5
 800bd9c:	4281      	cmp	r1, r0
 800bd9e:	d803      	bhi.n	800bda8 <__copybits+0x3e>
 800bda0:	bd70      	pop	{r4, r5, r6, pc}
 800bda2:	cc40      	ldmia	r4!, {r6}
 800bda4:	c540      	stmia	r5!, {r6}
 800bda6:	e7ec      	b.n	800bd82 <__copybits+0x18>
 800bda8:	c008      	stmia	r0!, {r3}
 800bdaa:	e7f7      	b.n	800bd9c <__copybits+0x32>

0800bdac <__any_on>:
 800bdac:	0002      	movs	r2, r0
 800bdae:	6900      	ldr	r0, [r0, #16]
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	3214      	adds	r2, #20
 800bdb4:	114b      	asrs	r3, r1, #5
 800bdb6:	4298      	cmp	r0, r3
 800bdb8:	db13      	blt.n	800bde2 <__any_on+0x36>
 800bdba:	dd0c      	ble.n	800bdd6 <__any_on+0x2a>
 800bdbc:	241f      	movs	r4, #31
 800bdbe:	0008      	movs	r0, r1
 800bdc0:	4020      	ands	r0, r4
 800bdc2:	4221      	tst	r1, r4
 800bdc4:	d007      	beq.n	800bdd6 <__any_on+0x2a>
 800bdc6:	0099      	lsls	r1, r3, #2
 800bdc8:	588c      	ldr	r4, [r1, r2]
 800bdca:	0021      	movs	r1, r4
 800bdcc:	40c1      	lsrs	r1, r0
 800bdce:	4081      	lsls	r1, r0
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	428c      	cmp	r4, r1
 800bdd4:	d104      	bne.n	800bde0 <__any_on+0x34>
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	18d3      	adds	r3, r2, r3
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d803      	bhi.n	800bde6 <__any_on+0x3a>
 800bdde:	2000      	movs	r0, #0
 800bde0:	bd10      	pop	{r4, pc}
 800bde2:	0003      	movs	r3, r0
 800bde4:	e7f7      	b.n	800bdd6 <__any_on+0x2a>
 800bde6:	3b04      	subs	r3, #4
 800bde8:	6819      	ldr	r1, [r3, #0]
 800bdea:	2900      	cmp	r1, #0
 800bdec:	d0f5      	beq.n	800bdda <__any_on+0x2e>
 800bdee:	2001      	movs	r0, #1
 800bdf0:	e7f6      	b.n	800bde0 <__any_on+0x34>

0800bdf2 <_malloc_usable_size_r>:
 800bdf2:	1f0b      	subs	r3, r1, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	1f18      	subs	r0, r3, #4
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	da01      	bge.n	800be00 <_malloc_usable_size_r+0xe>
 800bdfc:	580b      	ldr	r3, [r1, r0]
 800bdfe:	18c0      	adds	r0, r0, r3
 800be00:	4770      	bx	lr

0800be02 <__ascii_wctomb>:
 800be02:	0003      	movs	r3, r0
 800be04:	1e08      	subs	r0, r1, #0
 800be06:	d005      	beq.n	800be14 <__ascii_wctomb+0x12>
 800be08:	2aff      	cmp	r2, #255	; 0xff
 800be0a:	d904      	bls.n	800be16 <__ascii_wctomb+0x14>
 800be0c:	228a      	movs	r2, #138	; 0x8a
 800be0e:	2001      	movs	r0, #1
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	4240      	negs	r0, r0
 800be14:	4770      	bx	lr
 800be16:	2001      	movs	r0, #1
 800be18:	700a      	strb	r2, [r1, #0]
 800be1a:	e7fb      	b.n	800be14 <__ascii_wctomb+0x12>

0800be1c <_printf_common>:
 800be1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be1e:	0016      	movs	r6, r2
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	688a      	ldr	r2, [r1, #8]
 800be24:	690b      	ldr	r3, [r1, #16]
 800be26:	000c      	movs	r4, r1
 800be28:	9000      	str	r0, [sp, #0]
 800be2a:	4293      	cmp	r3, r2
 800be2c:	da00      	bge.n	800be30 <_printf_common+0x14>
 800be2e:	0013      	movs	r3, r2
 800be30:	0022      	movs	r2, r4
 800be32:	6033      	str	r3, [r6, #0]
 800be34:	3243      	adds	r2, #67	; 0x43
 800be36:	7812      	ldrb	r2, [r2, #0]
 800be38:	2a00      	cmp	r2, #0
 800be3a:	d001      	beq.n	800be40 <_printf_common+0x24>
 800be3c:	3301      	adds	r3, #1
 800be3e:	6033      	str	r3, [r6, #0]
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	069b      	lsls	r3, r3, #26
 800be44:	d502      	bpl.n	800be4c <_printf_common+0x30>
 800be46:	6833      	ldr	r3, [r6, #0]
 800be48:	3302      	adds	r3, #2
 800be4a:	6033      	str	r3, [r6, #0]
 800be4c:	6822      	ldr	r2, [r4, #0]
 800be4e:	2306      	movs	r3, #6
 800be50:	0015      	movs	r5, r2
 800be52:	401d      	ands	r5, r3
 800be54:	421a      	tst	r2, r3
 800be56:	d027      	beq.n	800bea8 <_printf_common+0x8c>
 800be58:	0023      	movs	r3, r4
 800be5a:	3343      	adds	r3, #67	; 0x43
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	1e5a      	subs	r2, r3, #1
 800be60:	4193      	sbcs	r3, r2
 800be62:	6822      	ldr	r2, [r4, #0]
 800be64:	0692      	lsls	r2, r2, #26
 800be66:	d430      	bmi.n	800beca <_printf_common+0xae>
 800be68:	0022      	movs	r2, r4
 800be6a:	9901      	ldr	r1, [sp, #4]
 800be6c:	9800      	ldr	r0, [sp, #0]
 800be6e:	9d08      	ldr	r5, [sp, #32]
 800be70:	3243      	adds	r2, #67	; 0x43
 800be72:	47a8      	blx	r5
 800be74:	3001      	adds	r0, #1
 800be76:	d025      	beq.n	800bec4 <_printf_common+0xa8>
 800be78:	2206      	movs	r2, #6
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	2500      	movs	r5, #0
 800be7e:	4013      	ands	r3, r2
 800be80:	2b04      	cmp	r3, #4
 800be82:	d105      	bne.n	800be90 <_printf_common+0x74>
 800be84:	6833      	ldr	r3, [r6, #0]
 800be86:	68e5      	ldr	r5, [r4, #12]
 800be88:	1aed      	subs	r5, r5, r3
 800be8a:	43eb      	mvns	r3, r5
 800be8c:	17db      	asrs	r3, r3, #31
 800be8e:	401d      	ands	r5, r3
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	6922      	ldr	r2, [r4, #16]
 800be94:	4293      	cmp	r3, r2
 800be96:	dd01      	ble.n	800be9c <_printf_common+0x80>
 800be98:	1a9b      	subs	r3, r3, r2
 800be9a:	18ed      	adds	r5, r5, r3
 800be9c:	2600      	movs	r6, #0
 800be9e:	42b5      	cmp	r5, r6
 800bea0:	d120      	bne.n	800bee4 <_printf_common+0xc8>
 800bea2:	2000      	movs	r0, #0
 800bea4:	e010      	b.n	800bec8 <_printf_common+0xac>
 800bea6:	3501      	adds	r5, #1
 800bea8:	68e3      	ldr	r3, [r4, #12]
 800beaa:	6832      	ldr	r2, [r6, #0]
 800beac:	1a9b      	subs	r3, r3, r2
 800beae:	42ab      	cmp	r3, r5
 800beb0:	ddd2      	ble.n	800be58 <_printf_common+0x3c>
 800beb2:	0022      	movs	r2, r4
 800beb4:	2301      	movs	r3, #1
 800beb6:	9901      	ldr	r1, [sp, #4]
 800beb8:	9800      	ldr	r0, [sp, #0]
 800beba:	9f08      	ldr	r7, [sp, #32]
 800bebc:	3219      	adds	r2, #25
 800bebe:	47b8      	blx	r7
 800bec0:	3001      	adds	r0, #1
 800bec2:	d1f0      	bne.n	800bea6 <_printf_common+0x8a>
 800bec4:	2001      	movs	r0, #1
 800bec6:	4240      	negs	r0, r0
 800bec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800beca:	2030      	movs	r0, #48	; 0x30
 800becc:	18e1      	adds	r1, r4, r3
 800bece:	3143      	adds	r1, #67	; 0x43
 800bed0:	7008      	strb	r0, [r1, #0]
 800bed2:	0021      	movs	r1, r4
 800bed4:	1c5a      	adds	r2, r3, #1
 800bed6:	3145      	adds	r1, #69	; 0x45
 800bed8:	7809      	ldrb	r1, [r1, #0]
 800beda:	18a2      	adds	r2, r4, r2
 800bedc:	3243      	adds	r2, #67	; 0x43
 800bede:	3302      	adds	r3, #2
 800bee0:	7011      	strb	r1, [r2, #0]
 800bee2:	e7c1      	b.n	800be68 <_printf_common+0x4c>
 800bee4:	0022      	movs	r2, r4
 800bee6:	2301      	movs	r3, #1
 800bee8:	9901      	ldr	r1, [sp, #4]
 800beea:	9800      	ldr	r0, [sp, #0]
 800beec:	9f08      	ldr	r7, [sp, #32]
 800beee:	321a      	adds	r2, #26
 800bef0:	47b8      	blx	r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	d0e6      	beq.n	800bec4 <_printf_common+0xa8>
 800bef6:	3601      	adds	r6, #1
 800bef8:	e7d1      	b.n	800be9e <_printf_common+0x82>
	...

0800befc <_printf_i>:
 800befc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800befe:	b08b      	sub	sp, #44	; 0x2c
 800bf00:	9206      	str	r2, [sp, #24]
 800bf02:	000a      	movs	r2, r1
 800bf04:	3243      	adds	r2, #67	; 0x43
 800bf06:	9307      	str	r3, [sp, #28]
 800bf08:	9005      	str	r0, [sp, #20]
 800bf0a:	9204      	str	r2, [sp, #16]
 800bf0c:	7e0a      	ldrb	r2, [r1, #24]
 800bf0e:	000c      	movs	r4, r1
 800bf10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf12:	2a78      	cmp	r2, #120	; 0x78
 800bf14:	d809      	bhi.n	800bf2a <_printf_i+0x2e>
 800bf16:	2a62      	cmp	r2, #98	; 0x62
 800bf18:	d80b      	bhi.n	800bf32 <_printf_i+0x36>
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	d100      	bne.n	800bf20 <_printf_i+0x24>
 800bf1e:	e0be      	b.n	800c09e <_printf_i+0x1a2>
 800bf20:	497c      	ldr	r1, [pc, #496]	; (800c114 <_printf_i+0x218>)
 800bf22:	9103      	str	r1, [sp, #12]
 800bf24:	2a58      	cmp	r2, #88	; 0x58
 800bf26:	d100      	bne.n	800bf2a <_printf_i+0x2e>
 800bf28:	e093      	b.n	800c052 <_printf_i+0x156>
 800bf2a:	0026      	movs	r6, r4
 800bf2c:	3642      	adds	r6, #66	; 0x42
 800bf2e:	7032      	strb	r2, [r6, #0]
 800bf30:	e022      	b.n	800bf78 <_printf_i+0x7c>
 800bf32:	0010      	movs	r0, r2
 800bf34:	3863      	subs	r0, #99	; 0x63
 800bf36:	2815      	cmp	r0, #21
 800bf38:	d8f7      	bhi.n	800bf2a <_printf_i+0x2e>
 800bf3a:	f7f4 f901 	bl	8000140 <__gnu_thumb1_case_shi>
 800bf3e:	0016      	.short	0x0016
 800bf40:	fff6001f 	.word	0xfff6001f
 800bf44:	fff6fff6 	.word	0xfff6fff6
 800bf48:	001ffff6 	.word	0x001ffff6
 800bf4c:	fff6fff6 	.word	0xfff6fff6
 800bf50:	fff6fff6 	.word	0xfff6fff6
 800bf54:	003600a3 	.word	0x003600a3
 800bf58:	fff60083 	.word	0xfff60083
 800bf5c:	00b4fff6 	.word	0x00b4fff6
 800bf60:	0036fff6 	.word	0x0036fff6
 800bf64:	fff6fff6 	.word	0xfff6fff6
 800bf68:	0087      	.short	0x0087
 800bf6a:	0026      	movs	r6, r4
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	3642      	adds	r6, #66	; 0x42
 800bf70:	1d11      	adds	r1, r2, #4
 800bf72:	6019      	str	r1, [r3, #0]
 800bf74:	6813      	ldr	r3, [r2, #0]
 800bf76:	7033      	strb	r3, [r6, #0]
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e0a2      	b.n	800c0c2 <_printf_i+0x1c6>
 800bf7c:	6818      	ldr	r0, [r3, #0]
 800bf7e:	6809      	ldr	r1, [r1, #0]
 800bf80:	1d02      	adds	r2, r0, #4
 800bf82:	060d      	lsls	r5, r1, #24
 800bf84:	d50b      	bpl.n	800bf9e <_printf_i+0xa2>
 800bf86:	6805      	ldr	r5, [r0, #0]
 800bf88:	601a      	str	r2, [r3, #0]
 800bf8a:	2d00      	cmp	r5, #0
 800bf8c:	da03      	bge.n	800bf96 <_printf_i+0x9a>
 800bf8e:	232d      	movs	r3, #45	; 0x2d
 800bf90:	9a04      	ldr	r2, [sp, #16]
 800bf92:	426d      	negs	r5, r5
 800bf94:	7013      	strb	r3, [r2, #0]
 800bf96:	4b5f      	ldr	r3, [pc, #380]	; (800c114 <_printf_i+0x218>)
 800bf98:	270a      	movs	r7, #10
 800bf9a:	9303      	str	r3, [sp, #12]
 800bf9c:	e01b      	b.n	800bfd6 <_printf_i+0xda>
 800bf9e:	6805      	ldr	r5, [r0, #0]
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	0649      	lsls	r1, r1, #25
 800bfa4:	d5f1      	bpl.n	800bf8a <_printf_i+0x8e>
 800bfa6:	b22d      	sxth	r5, r5
 800bfa8:	e7ef      	b.n	800bf8a <_printf_i+0x8e>
 800bfaa:	680d      	ldr	r5, [r1, #0]
 800bfac:	6819      	ldr	r1, [r3, #0]
 800bfae:	1d08      	adds	r0, r1, #4
 800bfb0:	6018      	str	r0, [r3, #0]
 800bfb2:	062e      	lsls	r6, r5, #24
 800bfb4:	d501      	bpl.n	800bfba <_printf_i+0xbe>
 800bfb6:	680d      	ldr	r5, [r1, #0]
 800bfb8:	e003      	b.n	800bfc2 <_printf_i+0xc6>
 800bfba:	066d      	lsls	r5, r5, #25
 800bfbc:	d5fb      	bpl.n	800bfb6 <_printf_i+0xba>
 800bfbe:	680d      	ldr	r5, [r1, #0]
 800bfc0:	b2ad      	uxth	r5, r5
 800bfc2:	4b54      	ldr	r3, [pc, #336]	; (800c114 <_printf_i+0x218>)
 800bfc4:	2708      	movs	r7, #8
 800bfc6:	9303      	str	r3, [sp, #12]
 800bfc8:	2a6f      	cmp	r2, #111	; 0x6f
 800bfca:	d000      	beq.n	800bfce <_printf_i+0xd2>
 800bfcc:	3702      	adds	r7, #2
 800bfce:	0023      	movs	r3, r4
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	3343      	adds	r3, #67	; 0x43
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	60a3      	str	r3, [r4, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	db03      	blt.n	800bfe6 <_printf_i+0xea>
 800bfde:	2104      	movs	r1, #4
 800bfe0:	6822      	ldr	r2, [r4, #0]
 800bfe2:	438a      	bics	r2, r1
 800bfe4:	6022      	str	r2, [r4, #0]
 800bfe6:	2d00      	cmp	r5, #0
 800bfe8:	d102      	bne.n	800bff0 <_printf_i+0xf4>
 800bfea:	9e04      	ldr	r6, [sp, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00c      	beq.n	800c00a <_printf_i+0x10e>
 800bff0:	9e04      	ldr	r6, [sp, #16]
 800bff2:	0028      	movs	r0, r5
 800bff4:	0039      	movs	r1, r7
 800bff6:	f7f4 f933 	bl	8000260 <__aeabi_uidivmod>
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	3e01      	subs	r6, #1
 800bffe:	5c5b      	ldrb	r3, [r3, r1]
 800c000:	7033      	strb	r3, [r6, #0]
 800c002:	002b      	movs	r3, r5
 800c004:	0005      	movs	r5, r0
 800c006:	429f      	cmp	r7, r3
 800c008:	d9f3      	bls.n	800bff2 <_printf_i+0xf6>
 800c00a:	2f08      	cmp	r7, #8
 800c00c:	d109      	bne.n	800c022 <_printf_i+0x126>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	07db      	lsls	r3, r3, #31
 800c012:	d506      	bpl.n	800c022 <_printf_i+0x126>
 800c014:	6862      	ldr	r2, [r4, #4]
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	429a      	cmp	r2, r3
 800c01a:	dc02      	bgt.n	800c022 <_printf_i+0x126>
 800c01c:	2330      	movs	r3, #48	; 0x30
 800c01e:	3e01      	subs	r6, #1
 800c020:	7033      	strb	r3, [r6, #0]
 800c022:	9b04      	ldr	r3, [sp, #16]
 800c024:	1b9b      	subs	r3, r3, r6
 800c026:	6123      	str	r3, [r4, #16]
 800c028:	9b07      	ldr	r3, [sp, #28]
 800c02a:	0021      	movs	r1, r4
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	9805      	ldr	r0, [sp, #20]
 800c030:	9b06      	ldr	r3, [sp, #24]
 800c032:	aa09      	add	r2, sp, #36	; 0x24
 800c034:	f7ff fef2 	bl	800be1c <_printf_common>
 800c038:	3001      	adds	r0, #1
 800c03a:	d147      	bne.n	800c0cc <_printf_i+0x1d0>
 800c03c:	2001      	movs	r0, #1
 800c03e:	4240      	negs	r0, r0
 800c040:	b00b      	add	sp, #44	; 0x2c
 800c042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c044:	2220      	movs	r2, #32
 800c046:	6809      	ldr	r1, [r1, #0]
 800c048:	430a      	orrs	r2, r1
 800c04a:	6022      	str	r2, [r4, #0]
 800c04c:	2278      	movs	r2, #120	; 0x78
 800c04e:	4932      	ldr	r1, [pc, #200]	; (800c118 <_printf_i+0x21c>)
 800c050:	9103      	str	r1, [sp, #12]
 800c052:	0021      	movs	r1, r4
 800c054:	3145      	adds	r1, #69	; 0x45
 800c056:	700a      	strb	r2, [r1, #0]
 800c058:	6819      	ldr	r1, [r3, #0]
 800c05a:	6822      	ldr	r2, [r4, #0]
 800c05c:	c920      	ldmia	r1!, {r5}
 800c05e:	0610      	lsls	r0, r2, #24
 800c060:	d402      	bmi.n	800c068 <_printf_i+0x16c>
 800c062:	0650      	lsls	r0, r2, #25
 800c064:	d500      	bpl.n	800c068 <_printf_i+0x16c>
 800c066:	b2ad      	uxth	r5, r5
 800c068:	6019      	str	r1, [r3, #0]
 800c06a:	07d3      	lsls	r3, r2, #31
 800c06c:	d502      	bpl.n	800c074 <_printf_i+0x178>
 800c06e:	2320      	movs	r3, #32
 800c070:	4313      	orrs	r3, r2
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	2710      	movs	r7, #16
 800c076:	2d00      	cmp	r5, #0
 800c078:	d1a9      	bne.n	800bfce <_printf_i+0xd2>
 800c07a:	2220      	movs	r2, #32
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	4393      	bics	r3, r2
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	e7a4      	b.n	800bfce <_printf_i+0xd2>
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	680d      	ldr	r5, [r1, #0]
 800c088:	1d10      	adds	r0, r2, #4
 800c08a:	6949      	ldr	r1, [r1, #20]
 800c08c:	6018      	str	r0, [r3, #0]
 800c08e:	6813      	ldr	r3, [r2, #0]
 800c090:	062e      	lsls	r6, r5, #24
 800c092:	d501      	bpl.n	800c098 <_printf_i+0x19c>
 800c094:	6019      	str	r1, [r3, #0]
 800c096:	e002      	b.n	800c09e <_printf_i+0x1a2>
 800c098:	066d      	lsls	r5, r5, #25
 800c09a:	d5fb      	bpl.n	800c094 <_printf_i+0x198>
 800c09c:	8019      	strh	r1, [r3, #0]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	9e04      	ldr	r6, [sp, #16]
 800c0a2:	6123      	str	r3, [r4, #16]
 800c0a4:	e7c0      	b.n	800c028 <_printf_i+0x12c>
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	1d11      	adds	r1, r2, #4
 800c0aa:	6019      	str	r1, [r3, #0]
 800c0ac:	6816      	ldr	r6, [r2, #0]
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	0030      	movs	r0, r6
 800c0b2:	6862      	ldr	r2, [r4, #4]
 800c0b4:	f000 f8e7 	bl	800c286 <memchr>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d001      	beq.n	800c0c0 <_printf_i+0x1c4>
 800c0bc:	1b80      	subs	r0, r0, r6
 800c0be:	6060      	str	r0, [r4, #4]
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	6123      	str	r3, [r4, #16]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	9a04      	ldr	r2, [sp, #16]
 800c0c8:	7013      	strb	r3, [r2, #0]
 800c0ca:	e7ad      	b.n	800c028 <_printf_i+0x12c>
 800c0cc:	0032      	movs	r2, r6
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	9906      	ldr	r1, [sp, #24]
 800c0d2:	9805      	ldr	r0, [sp, #20]
 800c0d4:	9d07      	ldr	r5, [sp, #28]
 800c0d6:	47a8      	blx	r5
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d0af      	beq.n	800c03c <_printf_i+0x140>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	079b      	lsls	r3, r3, #30
 800c0e0:	d415      	bmi.n	800c10e <_printf_i+0x212>
 800c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e4:	68e0      	ldr	r0, [r4, #12]
 800c0e6:	4298      	cmp	r0, r3
 800c0e8:	daaa      	bge.n	800c040 <_printf_i+0x144>
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	e7a8      	b.n	800c040 <_printf_i+0x144>
 800c0ee:	0022      	movs	r2, r4
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	9906      	ldr	r1, [sp, #24]
 800c0f4:	9805      	ldr	r0, [sp, #20]
 800c0f6:	9e07      	ldr	r6, [sp, #28]
 800c0f8:	3219      	adds	r2, #25
 800c0fa:	47b0      	blx	r6
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d09d      	beq.n	800c03c <_printf_i+0x140>
 800c100:	3501      	adds	r5, #1
 800c102:	68e3      	ldr	r3, [r4, #12]
 800c104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c106:	1a9b      	subs	r3, r3, r2
 800c108:	42ab      	cmp	r3, r5
 800c10a:	dcf0      	bgt.n	800c0ee <_printf_i+0x1f2>
 800c10c:	e7e9      	b.n	800c0e2 <_printf_i+0x1e6>
 800c10e:	2500      	movs	r5, #0
 800c110:	e7f7      	b.n	800c102 <_printf_i+0x206>
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	0800cf24 	.word	0x0800cf24
 800c118:	0800cf35 	.word	0x0800cf35

0800c11c <__sflush_r>:
 800c11c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c11e:	898b      	ldrh	r3, [r1, #12]
 800c120:	0005      	movs	r5, r0
 800c122:	000c      	movs	r4, r1
 800c124:	071a      	lsls	r2, r3, #28
 800c126:	d45c      	bmi.n	800c1e2 <__sflush_r+0xc6>
 800c128:	684a      	ldr	r2, [r1, #4]
 800c12a:	2a00      	cmp	r2, #0
 800c12c:	dc04      	bgt.n	800c138 <__sflush_r+0x1c>
 800c12e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c130:	2a00      	cmp	r2, #0
 800c132:	dc01      	bgt.n	800c138 <__sflush_r+0x1c>
 800c134:	2000      	movs	r0, #0
 800c136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c138:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	d0fa      	beq.n	800c134 <__sflush_r+0x18>
 800c13e:	2200      	movs	r2, #0
 800c140:	2080      	movs	r0, #128	; 0x80
 800c142:	682e      	ldr	r6, [r5, #0]
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	001a      	movs	r2, r3
 800c148:	0140      	lsls	r0, r0, #5
 800c14a:	6a21      	ldr	r1, [r4, #32]
 800c14c:	4002      	ands	r2, r0
 800c14e:	4203      	tst	r3, r0
 800c150:	d034      	beq.n	800c1bc <__sflush_r+0xa0>
 800c152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	075b      	lsls	r3, r3, #29
 800c158:	d506      	bpl.n	800c168 <__sflush_r+0x4c>
 800c15a:	6863      	ldr	r3, [r4, #4]
 800c15c:	1ac0      	subs	r0, r0, r3
 800c15e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <__sflush_r+0x4c>
 800c164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c166:	1ac0      	subs	r0, r0, r3
 800c168:	0002      	movs	r2, r0
 800c16a:	2300      	movs	r3, #0
 800c16c:	0028      	movs	r0, r5
 800c16e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c170:	6a21      	ldr	r1, [r4, #32]
 800c172:	47b8      	blx	r7
 800c174:	89a2      	ldrh	r2, [r4, #12]
 800c176:	1c43      	adds	r3, r0, #1
 800c178:	d106      	bne.n	800c188 <__sflush_r+0x6c>
 800c17a:	6829      	ldr	r1, [r5, #0]
 800c17c:	291d      	cmp	r1, #29
 800c17e:	d82c      	bhi.n	800c1da <__sflush_r+0xbe>
 800c180:	4b2a      	ldr	r3, [pc, #168]	; (800c22c <__sflush_r+0x110>)
 800c182:	410b      	asrs	r3, r1
 800c184:	07db      	lsls	r3, r3, #31
 800c186:	d428      	bmi.n	800c1da <__sflush_r+0xbe>
 800c188:	2300      	movs	r3, #0
 800c18a:	6063      	str	r3, [r4, #4]
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	04d2      	lsls	r2, r2, #19
 800c192:	d505      	bpl.n	800c1a0 <__sflush_r+0x84>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <__sflush_r+0x82>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d100      	bne.n	800c1a0 <__sflush_r+0x84>
 800c19e:	6560      	str	r0, [r4, #84]	; 0x54
 800c1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1a2:	602e      	str	r6, [r5, #0]
 800c1a4:	2900      	cmp	r1, #0
 800c1a6:	d0c5      	beq.n	800c134 <__sflush_r+0x18>
 800c1a8:	0023      	movs	r3, r4
 800c1aa:	3344      	adds	r3, #68	; 0x44
 800c1ac:	4299      	cmp	r1, r3
 800c1ae:	d002      	beq.n	800c1b6 <__sflush_r+0x9a>
 800c1b0:	0028      	movs	r0, r5
 800c1b2:	f7fe fdab 	bl	800ad0c <_free_r>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c1ba:	e7bc      	b.n	800c136 <__sflush_r+0x1a>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	0028      	movs	r0, r5
 800c1c0:	47b8      	blx	r7
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	d1c6      	bne.n	800c154 <__sflush_r+0x38>
 800c1c6:	682b      	ldr	r3, [r5, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d0c3      	beq.n	800c154 <__sflush_r+0x38>
 800c1cc:	2b1d      	cmp	r3, #29
 800c1ce:	d001      	beq.n	800c1d4 <__sflush_r+0xb8>
 800c1d0:	2b16      	cmp	r3, #22
 800c1d2:	d101      	bne.n	800c1d8 <__sflush_r+0xbc>
 800c1d4:	602e      	str	r6, [r5, #0]
 800c1d6:	e7ad      	b.n	800c134 <__sflush_r+0x18>
 800c1d8:	89a2      	ldrh	r2, [r4, #12]
 800c1da:	2340      	movs	r3, #64	; 0x40
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	81a3      	strh	r3, [r4, #12]
 800c1e0:	e7a9      	b.n	800c136 <__sflush_r+0x1a>
 800c1e2:	690e      	ldr	r6, [r1, #16]
 800c1e4:	2e00      	cmp	r6, #0
 800c1e6:	d0a5      	beq.n	800c134 <__sflush_r+0x18>
 800c1e8:	680f      	ldr	r7, [r1, #0]
 800c1ea:	600e      	str	r6, [r1, #0]
 800c1ec:	1bba      	subs	r2, r7, r6
 800c1ee:	9201      	str	r2, [sp, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	079b      	lsls	r3, r3, #30
 800c1f4:	d100      	bne.n	800c1f8 <__sflush_r+0xdc>
 800c1f6:	694a      	ldr	r2, [r1, #20]
 800c1f8:	60a2      	str	r2, [r4, #8]
 800c1fa:	9b01      	ldr	r3, [sp, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd99      	ble.n	800c134 <__sflush_r+0x18>
 800c200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c202:	0032      	movs	r2, r6
 800c204:	001f      	movs	r7, r3
 800c206:	0028      	movs	r0, r5
 800c208:	9b01      	ldr	r3, [sp, #4]
 800c20a:	6a21      	ldr	r1, [r4, #32]
 800c20c:	47b8      	blx	r7
 800c20e:	2800      	cmp	r0, #0
 800c210:	dc06      	bgt.n	800c220 <__sflush_r+0x104>
 800c212:	2340      	movs	r3, #64	; 0x40
 800c214:	2001      	movs	r0, #1
 800c216:	89a2      	ldrh	r2, [r4, #12]
 800c218:	4240      	negs	r0, r0
 800c21a:	4313      	orrs	r3, r2
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	e78a      	b.n	800c136 <__sflush_r+0x1a>
 800c220:	9b01      	ldr	r3, [sp, #4]
 800c222:	1836      	adds	r6, r6, r0
 800c224:	1a1b      	subs	r3, r3, r0
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	e7e7      	b.n	800c1fa <__sflush_r+0xde>
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	dfbffffe 	.word	0xdfbffffe

0800c230 <_fflush_r>:
 800c230:	690b      	ldr	r3, [r1, #16]
 800c232:	b570      	push	{r4, r5, r6, lr}
 800c234:	0005      	movs	r5, r0
 800c236:	000c      	movs	r4, r1
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <_fflush_r+0x12>
 800c23c:	2500      	movs	r5, #0
 800c23e:	0028      	movs	r0, r5
 800c240:	bd70      	pop	{r4, r5, r6, pc}
 800c242:	2800      	cmp	r0, #0
 800c244:	d004      	beq.n	800c250 <_fflush_r+0x20>
 800c246:	6a03      	ldr	r3, [r0, #32]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <_fflush_r+0x20>
 800c24c:	f7fe fc12 	bl	800aa74 <__sinit>
 800c250:	220c      	movs	r2, #12
 800c252:	5ea3      	ldrsh	r3, [r4, r2]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d0f1      	beq.n	800c23c <_fflush_r+0xc>
 800c258:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c25a:	07d2      	lsls	r2, r2, #31
 800c25c:	d404      	bmi.n	800c268 <_fflush_r+0x38>
 800c25e:	059b      	lsls	r3, r3, #22
 800c260:	d402      	bmi.n	800c268 <_fflush_r+0x38>
 800c262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c264:	f7fe fd39 	bl	800acda <__retarget_lock_acquire_recursive>
 800c268:	0028      	movs	r0, r5
 800c26a:	0021      	movs	r1, r4
 800c26c:	f7ff ff56 	bl	800c11c <__sflush_r>
 800c270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c272:	0005      	movs	r5, r0
 800c274:	07db      	lsls	r3, r3, #31
 800c276:	d4e2      	bmi.n	800c23e <_fflush_r+0xe>
 800c278:	89a3      	ldrh	r3, [r4, #12]
 800c27a:	059b      	lsls	r3, r3, #22
 800c27c:	d4df      	bmi.n	800c23e <_fflush_r+0xe>
 800c27e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c280:	f7fe fd2c 	bl	800acdc <__retarget_lock_release_recursive>
 800c284:	e7db      	b.n	800c23e <_fflush_r+0xe>

0800c286 <memchr>:
 800c286:	b2c9      	uxtb	r1, r1
 800c288:	1882      	adds	r2, r0, r2
 800c28a:	4290      	cmp	r0, r2
 800c28c:	d101      	bne.n	800c292 <memchr+0xc>
 800c28e:	2000      	movs	r0, #0
 800c290:	4770      	bx	lr
 800c292:	7803      	ldrb	r3, [r0, #0]
 800c294:	428b      	cmp	r3, r1
 800c296:	d0fb      	beq.n	800c290 <memchr+0xa>
 800c298:	3001      	adds	r0, #1
 800c29a:	e7f6      	b.n	800c28a <memchr+0x4>

0800c29c <__assert_func>:
 800c29c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c29e:	0014      	movs	r4, r2
 800c2a0:	001a      	movs	r2, r3
 800c2a2:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <__assert_func+0x2c>)
 800c2a4:	0005      	movs	r5, r0
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	000e      	movs	r6, r1
 800c2aa:	68d8      	ldr	r0, [r3, #12]
 800c2ac:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <__assert_func+0x30>)
 800c2ae:	2c00      	cmp	r4, #0
 800c2b0:	d101      	bne.n	800c2b6 <__assert_func+0x1a>
 800c2b2:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <__assert_func+0x34>)
 800c2b4:	001c      	movs	r4, r3
 800c2b6:	4907      	ldr	r1, [pc, #28]	; (800c2d4 <__assert_func+0x38>)
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	9402      	str	r4, [sp, #8]
 800c2bc:	002b      	movs	r3, r5
 800c2be:	9600      	str	r6, [sp, #0]
 800c2c0:	f000 f838 	bl	800c334 <fiprintf>
 800c2c4:	f000 f846 	bl	800c354 <abort>
 800c2c8:	200001e4 	.word	0x200001e4
 800c2cc:	0800cf46 	.word	0x0800cf46
 800c2d0:	0800cf81 	.word	0x0800cf81
 800c2d4:	0800cf53 	.word	0x0800cf53

0800c2d8 <_calloc_r>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	0c0b      	lsrs	r3, r1, #16
 800c2dc:	0c15      	lsrs	r5, r2, #16
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d11e      	bne.n	800c320 <_calloc_r+0x48>
 800c2e2:	2d00      	cmp	r5, #0
 800c2e4:	d10c      	bne.n	800c300 <_calloc_r+0x28>
 800c2e6:	b289      	uxth	r1, r1
 800c2e8:	b294      	uxth	r4, r2
 800c2ea:	434c      	muls	r4, r1
 800c2ec:	0021      	movs	r1, r4
 800c2ee:	f7fd fba3 	bl	8009a38 <_malloc_r>
 800c2f2:	1e05      	subs	r5, r0, #0
 800c2f4:	d01b      	beq.n	800c32e <_calloc_r+0x56>
 800c2f6:	0022      	movs	r2, r4
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	f7fe fc3b 	bl	800ab74 <memset>
 800c2fe:	e016      	b.n	800c32e <_calloc_r+0x56>
 800c300:	1c2b      	adds	r3, r5, #0
 800c302:	1c0c      	adds	r4, r1, #0
 800c304:	b289      	uxth	r1, r1
 800c306:	b292      	uxth	r2, r2
 800c308:	434a      	muls	r2, r1
 800c30a:	b2a1      	uxth	r1, r4
 800c30c:	b29c      	uxth	r4, r3
 800c30e:	434c      	muls	r4, r1
 800c310:	0c13      	lsrs	r3, r2, #16
 800c312:	18e4      	adds	r4, r4, r3
 800c314:	0c23      	lsrs	r3, r4, #16
 800c316:	d107      	bne.n	800c328 <_calloc_r+0x50>
 800c318:	0424      	lsls	r4, r4, #16
 800c31a:	b292      	uxth	r2, r2
 800c31c:	4314      	orrs	r4, r2
 800c31e:	e7e5      	b.n	800c2ec <_calloc_r+0x14>
 800c320:	2d00      	cmp	r5, #0
 800c322:	d101      	bne.n	800c328 <_calloc_r+0x50>
 800c324:	1c14      	adds	r4, r2, #0
 800c326:	e7ed      	b.n	800c304 <_calloc_r+0x2c>
 800c328:	230c      	movs	r3, #12
 800c32a:	2500      	movs	r5, #0
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	0028      	movs	r0, r5
 800c330:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c334 <fiprintf>:
 800c334:	b40e      	push	{r1, r2, r3}
 800c336:	b517      	push	{r0, r1, r2, r4, lr}
 800c338:	4c05      	ldr	r4, [pc, #20]	; (800c350 <fiprintf+0x1c>)
 800c33a:	ab05      	add	r3, sp, #20
 800c33c:	cb04      	ldmia	r3!, {r2}
 800c33e:	0001      	movs	r1, r0
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	f000 f834 	bl	800c3b0 <_vfiprintf_r>
 800c348:	bc1e      	pop	{r1, r2, r3, r4}
 800c34a:	bc08      	pop	{r3}
 800c34c:	b003      	add	sp, #12
 800c34e:	4718      	bx	r3
 800c350:	200001e4 	.word	0x200001e4

0800c354 <abort>:
 800c354:	2006      	movs	r0, #6
 800c356:	b510      	push	{r4, lr}
 800c358:	f000 fa16 	bl	800c788 <raise>
 800c35c:	2001      	movs	r0, #1
 800c35e:	f000 fac5 	bl	800c8ec <_exit>

0800c362 <__sfputc_r>:
 800c362:	6893      	ldr	r3, [r2, #8]
 800c364:	b510      	push	{r4, lr}
 800c366:	3b01      	subs	r3, #1
 800c368:	6093      	str	r3, [r2, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	da04      	bge.n	800c378 <__sfputc_r+0x16>
 800c36e:	6994      	ldr	r4, [r2, #24]
 800c370:	42a3      	cmp	r3, r4
 800c372:	db07      	blt.n	800c384 <__sfputc_r+0x22>
 800c374:	290a      	cmp	r1, #10
 800c376:	d005      	beq.n	800c384 <__sfputc_r+0x22>
 800c378:	6813      	ldr	r3, [r2, #0]
 800c37a:	1c58      	adds	r0, r3, #1
 800c37c:	6010      	str	r0, [r2, #0]
 800c37e:	7019      	strb	r1, [r3, #0]
 800c380:	0008      	movs	r0, r1
 800c382:	bd10      	pop	{r4, pc}
 800c384:	f000 f930 	bl	800c5e8 <__swbuf_r>
 800c388:	0001      	movs	r1, r0
 800c38a:	e7f9      	b.n	800c380 <__sfputc_r+0x1e>

0800c38c <__sfputs_r>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	0006      	movs	r6, r0
 800c390:	000f      	movs	r7, r1
 800c392:	0014      	movs	r4, r2
 800c394:	18d5      	adds	r5, r2, r3
 800c396:	42ac      	cmp	r4, r5
 800c398:	d101      	bne.n	800c39e <__sfputs_r+0x12>
 800c39a:	2000      	movs	r0, #0
 800c39c:	e007      	b.n	800c3ae <__sfputs_r+0x22>
 800c39e:	7821      	ldrb	r1, [r4, #0]
 800c3a0:	003a      	movs	r2, r7
 800c3a2:	0030      	movs	r0, r6
 800c3a4:	f7ff ffdd 	bl	800c362 <__sfputc_r>
 800c3a8:	3401      	adds	r4, #1
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d1f3      	bne.n	800c396 <__sfputs_r+0xa>
 800c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3b0 <_vfiprintf_r>:
 800c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b2:	b0a1      	sub	sp, #132	; 0x84
 800c3b4:	000f      	movs	r7, r1
 800c3b6:	0015      	movs	r5, r2
 800c3b8:	001e      	movs	r6, r3
 800c3ba:	9003      	str	r0, [sp, #12]
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d004      	beq.n	800c3ca <_vfiprintf_r+0x1a>
 800c3c0:	6a03      	ldr	r3, [r0, #32]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <_vfiprintf_r+0x1a>
 800c3c6:	f7fe fb55 	bl	800aa74 <__sinit>
 800c3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3cc:	07db      	lsls	r3, r3, #31
 800c3ce:	d405      	bmi.n	800c3dc <_vfiprintf_r+0x2c>
 800c3d0:	89bb      	ldrh	r3, [r7, #12]
 800c3d2:	059b      	lsls	r3, r3, #22
 800c3d4:	d402      	bmi.n	800c3dc <_vfiprintf_r+0x2c>
 800c3d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c3d8:	f7fe fc7f 	bl	800acda <__retarget_lock_acquire_recursive>
 800c3dc:	89bb      	ldrh	r3, [r7, #12]
 800c3de:	071b      	lsls	r3, r3, #28
 800c3e0:	d502      	bpl.n	800c3e8 <_vfiprintf_r+0x38>
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d113      	bne.n	800c410 <_vfiprintf_r+0x60>
 800c3e8:	0039      	movs	r1, r7
 800c3ea:	9803      	ldr	r0, [sp, #12]
 800c3ec:	f000 f93e 	bl	800c66c <__swsetup_r>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d00d      	beq.n	800c410 <_vfiprintf_r+0x60>
 800c3f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3f6:	07db      	lsls	r3, r3, #31
 800c3f8:	d503      	bpl.n	800c402 <_vfiprintf_r+0x52>
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	4240      	negs	r0, r0
 800c3fe:	b021      	add	sp, #132	; 0x84
 800c400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c402:	89bb      	ldrh	r3, [r7, #12]
 800c404:	059b      	lsls	r3, r3, #22
 800c406:	d4f8      	bmi.n	800c3fa <_vfiprintf_r+0x4a>
 800c408:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c40a:	f7fe fc67 	bl	800acdc <__retarget_lock_release_recursive>
 800c40e:	e7f4      	b.n	800c3fa <_vfiprintf_r+0x4a>
 800c410:	2300      	movs	r3, #0
 800c412:	ac08      	add	r4, sp, #32
 800c414:	6163      	str	r3, [r4, #20]
 800c416:	3320      	adds	r3, #32
 800c418:	7663      	strb	r3, [r4, #25]
 800c41a:	3310      	adds	r3, #16
 800c41c:	76a3      	strb	r3, [r4, #26]
 800c41e:	9607      	str	r6, [sp, #28]
 800c420:	002e      	movs	r6, r5
 800c422:	7833      	ldrb	r3, [r6, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <_vfiprintf_r+0x7c>
 800c428:	2b25      	cmp	r3, #37	; 0x25
 800c42a:	d148      	bne.n	800c4be <_vfiprintf_r+0x10e>
 800c42c:	1b73      	subs	r3, r6, r5
 800c42e:	9305      	str	r3, [sp, #20]
 800c430:	42ae      	cmp	r6, r5
 800c432:	d00b      	beq.n	800c44c <_vfiprintf_r+0x9c>
 800c434:	002a      	movs	r2, r5
 800c436:	0039      	movs	r1, r7
 800c438:	9803      	ldr	r0, [sp, #12]
 800c43a:	f7ff ffa7 	bl	800c38c <__sfputs_r>
 800c43e:	3001      	adds	r0, #1
 800c440:	d100      	bne.n	800c444 <_vfiprintf_r+0x94>
 800c442:	e0af      	b.n	800c5a4 <_vfiprintf_r+0x1f4>
 800c444:	6963      	ldr	r3, [r4, #20]
 800c446:	9a05      	ldr	r2, [sp, #20]
 800c448:	189b      	adds	r3, r3, r2
 800c44a:	6163      	str	r3, [r4, #20]
 800c44c:	7833      	ldrb	r3, [r6, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d100      	bne.n	800c454 <_vfiprintf_r+0xa4>
 800c452:	e0a7      	b.n	800c5a4 <_vfiprintf_r+0x1f4>
 800c454:	2201      	movs	r2, #1
 800c456:	2300      	movs	r3, #0
 800c458:	4252      	negs	r2, r2
 800c45a:	6062      	str	r2, [r4, #4]
 800c45c:	a904      	add	r1, sp, #16
 800c45e:	3254      	adds	r2, #84	; 0x54
 800c460:	1852      	adds	r2, r2, r1
 800c462:	1c75      	adds	r5, r6, #1
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	60e3      	str	r3, [r4, #12]
 800c468:	60a3      	str	r3, [r4, #8]
 800c46a:	7013      	strb	r3, [r2, #0]
 800c46c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c46e:	4b59      	ldr	r3, [pc, #356]	; (800c5d4 <_vfiprintf_r+0x224>)
 800c470:	2205      	movs	r2, #5
 800c472:	0018      	movs	r0, r3
 800c474:	7829      	ldrb	r1, [r5, #0]
 800c476:	9305      	str	r3, [sp, #20]
 800c478:	f7ff ff05 	bl	800c286 <memchr>
 800c47c:	1c6e      	adds	r6, r5, #1
 800c47e:	2800      	cmp	r0, #0
 800c480:	d11f      	bne.n	800c4c2 <_vfiprintf_r+0x112>
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	06d3      	lsls	r3, r2, #27
 800c486:	d504      	bpl.n	800c492 <_vfiprintf_r+0xe2>
 800c488:	2353      	movs	r3, #83	; 0x53
 800c48a:	a904      	add	r1, sp, #16
 800c48c:	185b      	adds	r3, r3, r1
 800c48e:	2120      	movs	r1, #32
 800c490:	7019      	strb	r1, [r3, #0]
 800c492:	0713      	lsls	r3, r2, #28
 800c494:	d504      	bpl.n	800c4a0 <_vfiprintf_r+0xf0>
 800c496:	2353      	movs	r3, #83	; 0x53
 800c498:	a904      	add	r1, sp, #16
 800c49a:	185b      	adds	r3, r3, r1
 800c49c:	212b      	movs	r1, #43	; 0x2b
 800c49e:	7019      	strb	r1, [r3, #0]
 800c4a0:	782b      	ldrb	r3, [r5, #0]
 800c4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a4:	d016      	beq.n	800c4d4 <_vfiprintf_r+0x124>
 800c4a6:	002e      	movs	r6, r5
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	200a      	movs	r0, #10
 800c4ac:	68e3      	ldr	r3, [r4, #12]
 800c4ae:	7832      	ldrb	r2, [r6, #0]
 800c4b0:	1c75      	adds	r5, r6, #1
 800c4b2:	3a30      	subs	r2, #48	; 0x30
 800c4b4:	2a09      	cmp	r2, #9
 800c4b6:	d94e      	bls.n	800c556 <_vfiprintf_r+0x1a6>
 800c4b8:	2900      	cmp	r1, #0
 800c4ba:	d111      	bne.n	800c4e0 <_vfiprintf_r+0x130>
 800c4bc:	e017      	b.n	800c4ee <_vfiprintf_r+0x13e>
 800c4be:	3601      	adds	r6, #1
 800c4c0:	e7af      	b.n	800c422 <_vfiprintf_r+0x72>
 800c4c2:	9b05      	ldr	r3, [sp, #20]
 800c4c4:	6822      	ldr	r2, [r4, #0]
 800c4c6:	1ac0      	subs	r0, r0, r3
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	4083      	lsls	r3, r0
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	0035      	movs	r5, r6
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	e7cc      	b.n	800c46e <_vfiprintf_r+0xbe>
 800c4d4:	9b07      	ldr	r3, [sp, #28]
 800c4d6:	1d19      	adds	r1, r3, #4
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	9107      	str	r1, [sp, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	db01      	blt.n	800c4e4 <_vfiprintf_r+0x134>
 800c4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4e2:	e004      	b.n	800c4ee <_vfiprintf_r+0x13e>
 800c4e4:	425b      	negs	r3, r3
 800c4e6:	60e3      	str	r3, [r4, #12]
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	7833      	ldrb	r3, [r6, #0]
 800c4f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f2:	d10a      	bne.n	800c50a <_vfiprintf_r+0x15a>
 800c4f4:	7873      	ldrb	r3, [r6, #1]
 800c4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4f8:	d135      	bne.n	800c566 <_vfiprintf_r+0x1b6>
 800c4fa:	9b07      	ldr	r3, [sp, #28]
 800c4fc:	3602      	adds	r6, #2
 800c4fe:	1d1a      	adds	r2, r3, #4
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	9207      	str	r2, [sp, #28]
 800c504:	2b00      	cmp	r3, #0
 800c506:	db2b      	blt.n	800c560 <_vfiprintf_r+0x1b0>
 800c508:	9309      	str	r3, [sp, #36]	; 0x24
 800c50a:	4d33      	ldr	r5, [pc, #204]	; (800c5d8 <_vfiprintf_r+0x228>)
 800c50c:	2203      	movs	r2, #3
 800c50e:	0028      	movs	r0, r5
 800c510:	7831      	ldrb	r1, [r6, #0]
 800c512:	f7ff feb8 	bl	800c286 <memchr>
 800c516:	2800      	cmp	r0, #0
 800c518:	d006      	beq.n	800c528 <_vfiprintf_r+0x178>
 800c51a:	2340      	movs	r3, #64	; 0x40
 800c51c:	1b40      	subs	r0, r0, r5
 800c51e:	4083      	lsls	r3, r0
 800c520:	6822      	ldr	r2, [r4, #0]
 800c522:	3601      	adds	r6, #1
 800c524:	4313      	orrs	r3, r2
 800c526:	6023      	str	r3, [r4, #0]
 800c528:	7831      	ldrb	r1, [r6, #0]
 800c52a:	2206      	movs	r2, #6
 800c52c:	482b      	ldr	r0, [pc, #172]	; (800c5dc <_vfiprintf_r+0x22c>)
 800c52e:	1c75      	adds	r5, r6, #1
 800c530:	7621      	strb	r1, [r4, #24]
 800c532:	f7ff fea8 	bl	800c286 <memchr>
 800c536:	2800      	cmp	r0, #0
 800c538:	d043      	beq.n	800c5c2 <_vfiprintf_r+0x212>
 800c53a:	4b29      	ldr	r3, [pc, #164]	; (800c5e0 <_vfiprintf_r+0x230>)
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d125      	bne.n	800c58c <_vfiprintf_r+0x1dc>
 800c540:	2207      	movs	r2, #7
 800c542:	9b07      	ldr	r3, [sp, #28]
 800c544:	3307      	adds	r3, #7
 800c546:	4393      	bics	r3, r2
 800c548:	3308      	adds	r3, #8
 800c54a:	9307      	str	r3, [sp, #28]
 800c54c:	6963      	ldr	r3, [r4, #20]
 800c54e:	9a04      	ldr	r2, [sp, #16]
 800c550:	189b      	adds	r3, r3, r2
 800c552:	6163      	str	r3, [r4, #20]
 800c554:	e764      	b.n	800c420 <_vfiprintf_r+0x70>
 800c556:	4343      	muls	r3, r0
 800c558:	002e      	movs	r6, r5
 800c55a:	2101      	movs	r1, #1
 800c55c:	189b      	adds	r3, r3, r2
 800c55e:	e7a6      	b.n	800c4ae <_vfiprintf_r+0xfe>
 800c560:	2301      	movs	r3, #1
 800c562:	425b      	negs	r3, r3
 800c564:	e7d0      	b.n	800c508 <_vfiprintf_r+0x158>
 800c566:	2300      	movs	r3, #0
 800c568:	200a      	movs	r0, #10
 800c56a:	001a      	movs	r2, r3
 800c56c:	3601      	adds	r6, #1
 800c56e:	6063      	str	r3, [r4, #4]
 800c570:	7831      	ldrb	r1, [r6, #0]
 800c572:	1c75      	adds	r5, r6, #1
 800c574:	3930      	subs	r1, #48	; 0x30
 800c576:	2909      	cmp	r1, #9
 800c578:	d903      	bls.n	800c582 <_vfiprintf_r+0x1d2>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d0c5      	beq.n	800c50a <_vfiprintf_r+0x15a>
 800c57e:	9209      	str	r2, [sp, #36]	; 0x24
 800c580:	e7c3      	b.n	800c50a <_vfiprintf_r+0x15a>
 800c582:	4342      	muls	r2, r0
 800c584:	002e      	movs	r6, r5
 800c586:	2301      	movs	r3, #1
 800c588:	1852      	adds	r2, r2, r1
 800c58a:	e7f1      	b.n	800c570 <_vfiprintf_r+0x1c0>
 800c58c:	aa07      	add	r2, sp, #28
 800c58e:	9200      	str	r2, [sp, #0]
 800c590:	0021      	movs	r1, r4
 800c592:	003a      	movs	r2, r7
 800c594:	4b13      	ldr	r3, [pc, #76]	; (800c5e4 <_vfiprintf_r+0x234>)
 800c596:	9803      	ldr	r0, [sp, #12]
 800c598:	e000      	b.n	800c59c <_vfiprintf_r+0x1ec>
 800c59a:	bf00      	nop
 800c59c:	9004      	str	r0, [sp, #16]
 800c59e:	9b04      	ldr	r3, [sp, #16]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	d1d3      	bne.n	800c54c <_vfiprintf_r+0x19c>
 800c5a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5a6:	07db      	lsls	r3, r3, #31
 800c5a8:	d405      	bmi.n	800c5b6 <_vfiprintf_r+0x206>
 800c5aa:	89bb      	ldrh	r3, [r7, #12]
 800c5ac:	059b      	lsls	r3, r3, #22
 800c5ae:	d402      	bmi.n	800c5b6 <_vfiprintf_r+0x206>
 800c5b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c5b2:	f7fe fb93 	bl	800acdc <__retarget_lock_release_recursive>
 800c5b6:	89bb      	ldrh	r3, [r7, #12]
 800c5b8:	065b      	lsls	r3, r3, #25
 800c5ba:	d500      	bpl.n	800c5be <_vfiprintf_r+0x20e>
 800c5bc:	e71d      	b.n	800c3fa <_vfiprintf_r+0x4a>
 800c5be:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c5c0:	e71d      	b.n	800c3fe <_vfiprintf_r+0x4e>
 800c5c2:	aa07      	add	r2, sp, #28
 800c5c4:	9200      	str	r2, [sp, #0]
 800c5c6:	0021      	movs	r1, r4
 800c5c8:	003a      	movs	r2, r7
 800c5ca:	4b06      	ldr	r3, [pc, #24]	; (800c5e4 <_vfiprintf_r+0x234>)
 800c5cc:	9803      	ldr	r0, [sp, #12]
 800c5ce:	f7ff fc95 	bl	800befc <_printf_i>
 800c5d2:	e7e3      	b.n	800c59c <_vfiprintf_r+0x1ec>
 800c5d4:	0800cf82 	.word	0x0800cf82
 800c5d8:	0800cf88 	.word	0x0800cf88
 800c5dc:	0800cf8c 	.word	0x0800cf8c
 800c5e0:	00000000 	.word	0x00000000
 800c5e4:	0800c38d 	.word	0x0800c38d

0800c5e8 <__swbuf_r>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	0006      	movs	r6, r0
 800c5ec:	000d      	movs	r5, r1
 800c5ee:	0014      	movs	r4, r2
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d004      	beq.n	800c5fe <__swbuf_r+0x16>
 800c5f4:	6a03      	ldr	r3, [r0, #32]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <__swbuf_r+0x16>
 800c5fa:	f7fe fa3b 	bl	800aa74 <__sinit>
 800c5fe:	69a3      	ldr	r3, [r4, #24]
 800c600:	60a3      	str	r3, [r4, #8]
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	071b      	lsls	r3, r3, #28
 800c606:	d528      	bpl.n	800c65a <__swbuf_r+0x72>
 800c608:	6923      	ldr	r3, [r4, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d025      	beq.n	800c65a <__swbuf_r+0x72>
 800c60e:	6923      	ldr	r3, [r4, #16]
 800c610:	6820      	ldr	r0, [r4, #0]
 800c612:	b2ef      	uxtb	r7, r5
 800c614:	1ac0      	subs	r0, r0, r3
 800c616:	6963      	ldr	r3, [r4, #20]
 800c618:	b2ed      	uxtb	r5, r5
 800c61a:	4283      	cmp	r3, r0
 800c61c:	dc05      	bgt.n	800c62a <__swbuf_r+0x42>
 800c61e:	0021      	movs	r1, r4
 800c620:	0030      	movs	r0, r6
 800c622:	f7ff fe05 	bl	800c230 <_fflush_r>
 800c626:	2800      	cmp	r0, #0
 800c628:	d11d      	bne.n	800c666 <__swbuf_r+0x7e>
 800c62a:	68a3      	ldr	r3, [r4, #8]
 800c62c:	3001      	adds	r0, #1
 800c62e:	3b01      	subs	r3, #1
 800c630:	60a3      	str	r3, [r4, #8]
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	6022      	str	r2, [r4, #0]
 800c638:	701f      	strb	r7, [r3, #0]
 800c63a:	6963      	ldr	r3, [r4, #20]
 800c63c:	4283      	cmp	r3, r0
 800c63e:	d004      	beq.n	800c64a <__swbuf_r+0x62>
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	07db      	lsls	r3, r3, #31
 800c644:	d507      	bpl.n	800c656 <__swbuf_r+0x6e>
 800c646:	2d0a      	cmp	r5, #10
 800c648:	d105      	bne.n	800c656 <__swbuf_r+0x6e>
 800c64a:	0021      	movs	r1, r4
 800c64c:	0030      	movs	r0, r6
 800c64e:	f7ff fdef 	bl	800c230 <_fflush_r>
 800c652:	2800      	cmp	r0, #0
 800c654:	d107      	bne.n	800c666 <__swbuf_r+0x7e>
 800c656:	0028      	movs	r0, r5
 800c658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c65a:	0021      	movs	r1, r4
 800c65c:	0030      	movs	r0, r6
 800c65e:	f000 f805 	bl	800c66c <__swsetup_r>
 800c662:	2800      	cmp	r0, #0
 800c664:	d0d3      	beq.n	800c60e <__swbuf_r+0x26>
 800c666:	2501      	movs	r5, #1
 800c668:	426d      	negs	r5, r5
 800c66a:	e7f4      	b.n	800c656 <__swbuf_r+0x6e>

0800c66c <__swsetup_r>:
 800c66c:	4b30      	ldr	r3, [pc, #192]	; (800c730 <__swsetup_r+0xc4>)
 800c66e:	b570      	push	{r4, r5, r6, lr}
 800c670:	0005      	movs	r5, r0
 800c672:	6818      	ldr	r0, [r3, #0]
 800c674:	000c      	movs	r4, r1
 800c676:	2800      	cmp	r0, #0
 800c678:	d004      	beq.n	800c684 <__swsetup_r+0x18>
 800c67a:	6a03      	ldr	r3, [r0, #32]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <__swsetup_r+0x18>
 800c680:	f7fe f9f8 	bl	800aa74 <__sinit>
 800c684:	230c      	movs	r3, #12
 800c686:	5ee2      	ldrsh	r2, [r4, r3]
 800c688:	b293      	uxth	r3, r2
 800c68a:	0711      	lsls	r1, r2, #28
 800c68c:	d423      	bmi.n	800c6d6 <__swsetup_r+0x6a>
 800c68e:	06d9      	lsls	r1, r3, #27
 800c690:	d407      	bmi.n	800c6a2 <__swsetup_r+0x36>
 800c692:	2309      	movs	r3, #9
 800c694:	2001      	movs	r0, #1
 800c696:	602b      	str	r3, [r5, #0]
 800c698:	3337      	adds	r3, #55	; 0x37
 800c69a:	4313      	orrs	r3, r2
 800c69c:	81a3      	strh	r3, [r4, #12]
 800c69e:	4240      	negs	r0, r0
 800c6a0:	bd70      	pop	{r4, r5, r6, pc}
 800c6a2:	075b      	lsls	r3, r3, #29
 800c6a4:	d513      	bpl.n	800c6ce <__swsetup_r+0x62>
 800c6a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6a8:	2900      	cmp	r1, #0
 800c6aa:	d008      	beq.n	800c6be <__swsetup_r+0x52>
 800c6ac:	0023      	movs	r3, r4
 800c6ae:	3344      	adds	r3, #68	; 0x44
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	d002      	beq.n	800c6ba <__swsetup_r+0x4e>
 800c6b4:	0028      	movs	r0, r5
 800c6b6:	f7fe fb29 	bl	800ad0c <_free_r>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c6be:	2224      	movs	r2, #36	; 0x24
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	4393      	bics	r3, r2
 800c6c4:	81a3      	strh	r3, [r4, #12]
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	6063      	str	r3, [r4, #4]
 800c6ca:	6923      	ldr	r3, [r4, #16]
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	2308      	movs	r3, #8
 800c6d0:	89a2      	ldrh	r2, [r4, #12]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10b      	bne.n	800c6f4 <__swsetup_r+0x88>
 800c6dc:	21a0      	movs	r1, #160	; 0xa0
 800c6de:	2280      	movs	r2, #128	; 0x80
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	0089      	lsls	r1, r1, #2
 800c6e4:	0092      	lsls	r2, r2, #2
 800c6e6:	400b      	ands	r3, r1
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d003      	beq.n	800c6f4 <__swsetup_r+0x88>
 800c6ec:	0021      	movs	r1, r4
 800c6ee:	0028      	movs	r0, r5
 800c6f0:	f000 f892 	bl	800c818 <__smakebuf_r>
 800c6f4:	220c      	movs	r2, #12
 800c6f6:	5ea3      	ldrsh	r3, [r4, r2]
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	001a      	movs	r2, r3
 800c6fc:	b299      	uxth	r1, r3
 800c6fe:	4002      	ands	r2, r0
 800c700:	4203      	tst	r3, r0
 800c702:	d00f      	beq.n	800c724 <__swsetup_r+0xb8>
 800c704:	2200      	movs	r2, #0
 800c706:	60a2      	str	r2, [r4, #8]
 800c708:	6962      	ldr	r2, [r4, #20]
 800c70a:	4252      	negs	r2, r2
 800c70c:	61a2      	str	r2, [r4, #24]
 800c70e:	2000      	movs	r0, #0
 800c710:	6922      	ldr	r2, [r4, #16]
 800c712:	4282      	cmp	r2, r0
 800c714:	d1c4      	bne.n	800c6a0 <__swsetup_r+0x34>
 800c716:	0609      	lsls	r1, r1, #24
 800c718:	d5c2      	bpl.n	800c6a0 <__swsetup_r+0x34>
 800c71a:	2240      	movs	r2, #64	; 0x40
 800c71c:	4313      	orrs	r3, r2
 800c71e:	81a3      	strh	r3, [r4, #12]
 800c720:	3801      	subs	r0, #1
 800c722:	e7bd      	b.n	800c6a0 <__swsetup_r+0x34>
 800c724:	0788      	lsls	r0, r1, #30
 800c726:	d400      	bmi.n	800c72a <__swsetup_r+0xbe>
 800c728:	6962      	ldr	r2, [r4, #20]
 800c72a:	60a2      	str	r2, [r4, #8]
 800c72c:	e7ef      	b.n	800c70e <__swsetup_r+0xa2>
 800c72e:	46c0      	nop			; (mov r8, r8)
 800c730:	200001e4 	.word	0x200001e4

0800c734 <_raise_r>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	0004      	movs	r4, r0
 800c738:	000d      	movs	r5, r1
 800c73a:	291f      	cmp	r1, #31
 800c73c:	d904      	bls.n	800c748 <_raise_r+0x14>
 800c73e:	2316      	movs	r3, #22
 800c740:	6003      	str	r3, [r0, #0]
 800c742:	2001      	movs	r0, #1
 800c744:	4240      	negs	r0, r0
 800c746:	bd70      	pop	{r4, r5, r6, pc}
 800c748:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d004      	beq.n	800c758 <_raise_r+0x24>
 800c74e:	008a      	lsls	r2, r1, #2
 800c750:	189b      	adds	r3, r3, r2
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	2a00      	cmp	r2, #0
 800c756:	d108      	bne.n	800c76a <_raise_r+0x36>
 800c758:	0020      	movs	r0, r4
 800c75a:	f000 f831 	bl	800c7c0 <_getpid_r>
 800c75e:	002a      	movs	r2, r5
 800c760:	0001      	movs	r1, r0
 800c762:	0020      	movs	r0, r4
 800c764:	f000 f81a 	bl	800c79c <_kill_r>
 800c768:	e7ed      	b.n	800c746 <_raise_r+0x12>
 800c76a:	2000      	movs	r0, #0
 800c76c:	2a01      	cmp	r2, #1
 800c76e:	d0ea      	beq.n	800c746 <_raise_r+0x12>
 800c770:	1c51      	adds	r1, r2, #1
 800c772:	d103      	bne.n	800c77c <_raise_r+0x48>
 800c774:	2316      	movs	r3, #22
 800c776:	3001      	adds	r0, #1
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	e7e4      	b.n	800c746 <_raise_r+0x12>
 800c77c:	2400      	movs	r4, #0
 800c77e:	0028      	movs	r0, r5
 800c780:	601c      	str	r4, [r3, #0]
 800c782:	4790      	blx	r2
 800c784:	0020      	movs	r0, r4
 800c786:	e7de      	b.n	800c746 <_raise_r+0x12>

0800c788 <raise>:
 800c788:	b510      	push	{r4, lr}
 800c78a:	4b03      	ldr	r3, [pc, #12]	; (800c798 <raise+0x10>)
 800c78c:	0001      	movs	r1, r0
 800c78e:	6818      	ldr	r0, [r3, #0]
 800c790:	f7ff ffd0 	bl	800c734 <_raise_r>
 800c794:	bd10      	pop	{r4, pc}
 800c796:	46c0      	nop			; (mov r8, r8)
 800c798:	200001e4 	.word	0x200001e4

0800c79c <_kill_r>:
 800c79c:	2300      	movs	r3, #0
 800c79e:	b570      	push	{r4, r5, r6, lr}
 800c7a0:	4d06      	ldr	r5, [pc, #24]	; (800c7bc <_kill_r+0x20>)
 800c7a2:	0004      	movs	r4, r0
 800c7a4:	0008      	movs	r0, r1
 800c7a6:	0011      	movs	r1, r2
 800c7a8:	602b      	str	r3, [r5, #0]
 800c7aa:	f000 f897 	bl	800c8dc <_kill>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d103      	bne.n	800c7ba <_kill_r+0x1e>
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d000      	beq.n	800c7ba <_kill_r+0x1e>
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}
 800c7bc:	20000f14 	.word	0x20000f14

0800c7c0 <_getpid_r>:
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	f7fc ff59 	bl	8009678 <_getpid>
 800c7c6:	bd10      	pop	{r4, pc}

0800c7c8 <__swhatbuf_r>:
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	000e      	movs	r6, r1
 800c7cc:	001d      	movs	r5, r3
 800c7ce:	230e      	movs	r3, #14
 800c7d0:	5ec9      	ldrsh	r1, [r1, r3]
 800c7d2:	0014      	movs	r4, r2
 800c7d4:	b096      	sub	sp, #88	; 0x58
 800c7d6:	2900      	cmp	r1, #0
 800c7d8:	da0c      	bge.n	800c7f4 <__swhatbuf_r+0x2c>
 800c7da:	89b2      	ldrh	r2, [r6, #12]
 800c7dc:	2380      	movs	r3, #128	; 0x80
 800c7de:	0011      	movs	r1, r2
 800c7e0:	4019      	ands	r1, r3
 800c7e2:	421a      	tst	r2, r3
 800c7e4:	d013      	beq.n	800c80e <__swhatbuf_r+0x46>
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	3b40      	subs	r3, #64	; 0x40
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	6029      	str	r1, [r5, #0]
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	b016      	add	sp, #88	; 0x58
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}
 800c7f4:	466a      	mov	r2, sp
 800c7f6:	f000 f84d 	bl	800c894 <_fstat_r>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	dbed      	blt.n	800c7da <__swhatbuf_r+0x12>
 800c7fe:	23f0      	movs	r3, #240	; 0xf0
 800c800:	9901      	ldr	r1, [sp, #4]
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	4019      	ands	r1, r3
 800c806:	4b03      	ldr	r3, [pc, #12]	; (800c814 <__swhatbuf_r+0x4c>)
 800c808:	18c9      	adds	r1, r1, r3
 800c80a:	424b      	negs	r3, r1
 800c80c:	4159      	adcs	r1, r3
 800c80e:	2380      	movs	r3, #128	; 0x80
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	e7ea      	b.n	800c7ea <__swhatbuf_r+0x22>
 800c814:	ffffe000 	.word	0xffffe000

0800c818 <__smakebuf_r>:
 800c818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c81a:	2602      	movs	r6, #2
 800c81c:	898b      	ldrh	r3, [r1, #12]
 800c81e:	0005      	movs	r5, r0
 800c820:	000c      	movs	r4, r1
 800c822:	4233      	tst	r3, r6
 800c824:	d006      	beq.n	800c834 <__smakebuf_r+0x1c>
 800c826:	0023      	movs	r3, r4
 800c828:	3347      	adds	r3, #71	; 0x47
 800c82a:	6023      	str	r3, [r4, #0]
 800c82c:	6123      	str	r3, [r4, #16]
 800c82e:	2301      	movs	r3, #1
 800c830:	6163      	str	r3, [r4, #20]
 800c832:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c834:	466a      	mov	r2, sp
 800c836:	ab01      	add	r3, sp, #4
 800c838:	f7ff ffc6 	bl	800c7c8 <__swhatbuf_r>
 800c83c:	9900      	ldr	r1, [sp, #0]
 800c83e:	0007      	movs	r7, r0
 800c840:	0028      	movs	r0, r5
 800c842:	f7fd f8f9 	bl	8009a38 <_malloc_r>
 800c846:	2800      	cmp	r0, #0
 800c848:	d108      	bne.n	800c85c <__smakebuf_r+0x44>
 800c84a:	220c      	movs	r2, #12
 800c84c:	5ea3      	ldrsh	r3, [r4, r2]
 800c84e:	059a      	lsls	r2, r3, #22
 800c850:	d4ef      	bmi.n	800c832 <__smakebuf_r+0x1a>
 800c852:	2203      	movs	r2, #3
 800c854:	4393      	bics	r3, r2
 800c856:	431e      	orrs	r6, r3
 800c858:	81a6      	strh	r6, [r4, #12]
 800c85a:	e7e4      	b.n	800c826 <__smakebuf_r+0xe>
 800c85c:	2380      	movs	r3, #128	; 0x80
 800c85e:	89a2      	ldrh	r2, [r4, #12]
 800c860:	6020      	str	r0, [r4, #0]
 800c862:	4313      	orrs	r3, r2
 800c864:	81a3      	strh	r3, [r4, #12]
 800c866:	9b00      	ldr	r3, [sp, #0]
 800c868:	6120      	str	r0, [r4, #16]
 800c86a:	6163      	str	r3, [r4, #20]
 800c86c:	9b01      	ldr	r3, [sp, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00c      	beq.n	800c88c <__smakebuf_r+0x74>
 800c872:	0028      	movs	r0, r5
 800c874:	230e      	movs	r3, #14
 800c876:	5ee1      	ldrsh	r1, [r4, r3]
 800c878:	f000 f81e 	bl	800c8b8 <_isatty_r>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d005      	beq.n	800c88c <__smakebuf_r+0x74>
 800c880:	2303      	movs	r3, #3
 800c882:	89a2      	ldrh	r2, [r4, #12]
 800c884:	439a      	bics	r2, r3
 800c886:	3b02      	subs	r3, #2
 800c888:	4313      	orrs	r3, r2
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	433b      	orrs	r3, r7
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	e7ce      	b.n	800c832 <__smakebuf_r+0x1a>

0800c894 <_fstat_r>:
 800c894:	2300      	movs	r3, #0
 800c896:	b570      	push	{r4, r5, r6, lr}
 800c898:	4d06      	ldr	r5, [pc, #24]	; (800c8b4 <_fstat_r+0x20>)
 800c89a:	0004      	movs	r4, r0
 800c89c:	0008      	movs	r0, r1
 800c89e:	0011      	movs	r1, r2
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	f7fc ff0d 	bl	80096c0 <_fstat>
 800c8a6:	1c43      	adds	r3, r0, #1
 800c8a8:	d103      	bne.n	800c8b2 <_fstat_r+0x1e>
 800c8aa:	682b      	ldr	r3, [r5, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d000      	beq.n	800c8b2 <_fstat_r+0x1e>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
 800c8b4:	20000f14 	.word	0x20000f14

0800c8b8 <_isatty_r>:
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	b570      	push	{r4, r5, r6, lr}
 800c8bc:	4d06      	ldr	r5, [pc, #24]	; (800c8d8 <_isatty_r+0x20>)
 800c8be:	0004      	movs	r4, r0
 800c8c0:	0008      	movs	r0, r1
 800c8c2:	602b      	str	r3, [r5, #0]
 800c8c4:	f7fd f85e 	bl	8009984 <_isatty>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d103      	bne.n	800c8d4 <_isatty_r+0x1c>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d000      	beq.n	800c8d4 <_isatty_r+0x1c>
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	bd70      	pop	{r4, r5, r6, pc}
 800c8d6:	46c0      	nop			; (mov r8, r8)
 800c8d8:	20000f14 	.word	0x20000f14

0800c8dc <_kill>:
 800c8dc:	2258      	movs	r2, #88	; 0x58
 800c8de:	2001      	movs	r0, #1
 800c8e0:	4b01      	ldr	r3, [pc, #4]	; (800c8e8 <_kill+0xc>)
 800c8e2:	4240      	negs	r0, r0
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	4770      	bx	lr
 800c8e8:	20000f14 	.word	0x20000f14

0800c8ec <_exit>:
 800c8ec:	e7fe      	b.n	800c8ec <_exit>
	...

0800c8f0 <_init>:
 800c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f2:	46c0      	nop			; (mov r8, r8)
 800c8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f6:	bc08      	pop	{r3}
 800c8f8:	469e      	mov	lr, r3
 800c8fa:	4770      	bx	lr

0800c8fc <_fini>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	46c0      	nop			; (mov r8, r8)
 800c900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c902:	bc08      	pop	{r3}
 800c904:	469e      	mov	lr, r3
 800c906:	4770      	bx	lr
