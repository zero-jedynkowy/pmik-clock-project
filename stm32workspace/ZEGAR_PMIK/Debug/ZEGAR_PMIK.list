
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fdc  08006fdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe4  08006fe4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000070  0800705c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  0800705c  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e41  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a61  00000000  00000000  00030f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00033980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4b  00000000  00000000  00034820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017115  00000000  00000000  0003536b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bfb  00000000  00000000  0004c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b84f  00000000  00000000  0005e07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003df0  00000000  00000000  000e98cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000ed6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e7c 	.word	0x08006e7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006e7c 	.word	0x08006e7c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	  if(huart == &huart5)
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <HAL_UART_RxCpltCallback+0x50>)
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d113      	bne.n	80004f0 <HAL_UART_RxCpltCallback+0x38>
	  {
		  const char * result = strchr(table, '_');
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004ca:	215f      	movs	r1, #95	; 0x5f
 80004cc:	0018      	movs	r0, r3
 80004ce:	f006 faa7 	bl	8006a20 <strchr>
 80004d2:	0003      	movs	r3, r0
 80004d4:	60fb      	str	r3, [r7, #12]
		  if (result != NULL)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d005      	beq.n	80004e8 <HAL_UART_RxCpltCallback+0x30>
		  {
			  table[result - table] = '\0';
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	54d1      	strb	r1, [r2, r3]
		  }
		  printf("%s\n", table);
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f006 f994 	bl	8006818 <puts>
	  }
	  HAL_UART_Receive_IT(&huart5, table, 500);
 80004f0:	23fa      	movs	r3, #250	; 0xfa
 80004f2:	005a      	lsls	r2, r3, #1
 80004f4:	4905      	ldr	r1, [pc, #20]	; (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <HAL_UART_RxCpltCallback+0x50>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f004 fa1f 	bl	800493c <HAL_UART_Receive_IT>
  }
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b004      	add	sp, #16
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	20000240 	.word	0x20000240
 800050c:	200002cc 	.word	0x200002cc

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 8000516:	f005 ff2d 	bl	8006374 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 fc81 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f873 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fac1 	bl	8000aa8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000526:	f000 f983 	bl	8000830 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052a:	f000 f9d7 	bl	80008dc <MX_TIM3_Init>
  MX_RTC_Init();
 800052e:	f000 f8d9 	bl	80006e4 <MX_RTC_Init>
  MX_USART4_UART_Init();
 8000532:	f000 fa59 	bl	80009e8 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8000536:	f000 fa27 	bl	8000988 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 800053a:	f000 fa85 	bl	8000a48 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  Clocker_Init(&ourClocker, &hrtc, &htim2, &htim3);
 800053e:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <main+0xd0>)
 8000540:	4a28      	ldr	r2, [pc, #160]	; (80005e4 <main+0xd4>)
 8000542:	4929      	ldr	r1, [pc, #164]	; (80005e8 <main+0xd8>)
 8000544:	4829      	ldr	r0, [pc, #164]	; (80005ec <main+0xdc>)
 8000546:	f000 fd7f 	bl	8001048 <Clocker_Init>
  Clocker_Set_Time(&ourClocker, 21, 37, 00);
 800054a:	4828      	ldr	r0, [pc, #160]	; (80005ec <main+0xdc>)
 800054c:	2300      	movs	r3, #0
 800054e:	2225      	movs	r2, #37	; 0x25
 8000550:	2115      	movs	r1, #21
 8000552:	f000 fedf 	bl	8001314 <Clocker_Set_Time>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart5, table, 500);
 8000556:	23fa      	movs	r3, #250	; 0xfa
 8000558:	005a      	lsls	r2, r3, #1
 800055a:	4925      	ldr	r1, [pc, #148]	; (80005f0 <main+0xe0>)
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <main+0xe4>)
 800055e:	0018      	movs	r0, r3
 8000560:	f004 f9ec 	bl	800493c <HAL_UART_Receive_IT>
  uint8_t alarm = 0; //Tymczasowa wartość
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
  while (1)
  {


	  if(timer_counter >= ourClocker.screenTimeChanging)
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <main+0xdc>)
 800056c:	789a      	ldrb	r2, [r3, #2]
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <main+0xe8>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	429a      	cmp	r2, r3
 8000576:	d806      	bhi.n	8000586 <main+0x76>
	  {
		  timer_counter = 0;
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <main+0xe8>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
		  Clocker_Change_Screen(&ourClocker);
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <main+0xdc>)
 8000580:	0018      	movs	r0, r3
 8000582:	f000 ffde 	bl	8001542 <Clocker_Change_Screen>
	  }

	  // Ustawienie alarmu z poziomu aplikacji.
	  if(alarm == 1)
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d108      	bne.n	80005a0 <main+0x90>
	  {
		  Clocker_Set_Alarm(&ourClocker, 22, 30); // Tymczasowodałem zmienne Godziny i Minuty, ale należy tam dać czas który ustawiliśmy na apce.
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <main+0xdc>)
 8000590:	221e      	movs	r2, #30
 8000592:	2116      	movs	r1, #22
 8000594:	0018      	movs	r0, r3
 8000596:	f000 feff 	bl	8001398 <Clocker_Set_Alarm>
		  alarm = 0;
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
	  }

	  // Flaga obsługi budzika, czyli odpala się muzyka i wyłącza RTC Alarm
	  if(budzik == 1)
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <main+0xec>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d10b      	bne.n	80005c2 <main+0xb2>
	  {
		  DF_PlayFromStart(); //Załączenie muzyki jak już budzik odmierzył swój czas.
 80005aa:	f001 f883 	bl	80016b4 <DF_PlayFromStart>
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); //Wyłączenie budzika
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	005a      	lsls	r2, r3, #1
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <main+0xd8>)
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f003 fb46 	bl	8003c48 <HAL_RTC_DeactivateAlarm>
		  budzik = 0;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0xec>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	  }
	  // Czas działania muzyki, timer robi przerwania co sekundę więc uaktualnia flagę alarm_counter co sekundę i tak 60 razy czyli razem minutę
	  if(alarm_counter >= 60)
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <main+0xf0>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b3b      	cmp	r3, #59	; 0x3b
 80005ca:	d9ce      	bls.n	800056a <main+0x5a>
	  {
		  DF_Pause();          // Tutaj w warunku damy HAL_Read_Pin w celu użycia przycisku jako wyłączenie muzyki z alarmu.
 80005cc:	f001 f89d 	bl	800170a <DF_Pause>
		  alarm_counter = 0;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <main+0xf0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
		  budzik_music = 0;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <main+0xf4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	  if(timer_counter >= ourClocker.screenTimeChanging)
 80005dc:	e7c5      	b.n	800056a <main+0x5a>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	200000f0 	.word	0x200000f0
 80005e4:	200000b0 	.word	0x200000b0
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	200004c0 	.word	0x200004c0
 80005f0:	200002cc 	.word	0x200002cc
 80005f4:	20000240 	.word	0x20000240
 80005f8:	200002c9 	.word	0x200002c9
 80005fc:	200002c8 	.word	0x200002c8
 8000600:	200002ca 	.word	0x200002ca
 8000604:	200002cb 	.word	0x200002cb

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b09f      	sub	sp, #124	; 0x7c
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	2440      	movs	r4, #64	; 0x40
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2338      	movs	r3, #56	; 0x38
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f006 f9f9 	bl	8006a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	232c      	movs	r3, #44	; 0x2c
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	0018      	movs	r0, r3
 8000624:	2314      	movs	r3, #20
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f006 f9f1 	bl	8006a10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	0018      	movs	r0, r3
 8000632:	2328      	movs	r3, #40	; 0x28
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f006 f9ea 	bl	8006a10 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xd8>)
 8000642:	401a      	ands	r2, r3
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xd4>)
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0109      	lsls	r1, r1, #4
 800064a:	430a      	orrs	r2, r1
 800064c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2206      	movs	r2, #6
 8000652:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2201      	movs	r2, #1
 8000660:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2210      	movs	r2, #16
 8000666:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	193b      	adds	r3, r7, r4
 8000670:	0018      	movs	r0, r3
 8000672:	f001 ff87 	bl	8002584 <HAL_RCC_OscConfig>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800067a:	f000 fb0b 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	212c      	movs	r1, #44	; 0x2c
 8000680:	187b      	adds	r3, r7, r1
 8000682:	220f      	movs	r2, #15
 8000684:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2201      	movs	r2, #1
 800068a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2100      	movs	r1, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 fb42 	bl	8002d2c <HAL_RCC_ClockConfig>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006ac:	f000 faf2 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2221      	movs	r2, #33	; 0x21
 80006b4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0252      	lsls	r2, r2, #9
 80006c2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	0018      	movs	r0, r3
 80006c8:	f002 fd54 	bl	8003174 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006d0:	f000 fae0 	bl	8000c94 <Error_Handler>
  }
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b01f      	add	sp, #124	; 0x7c
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	40007000 	.word	0x40007000
 80006e0:	ffffe7ff 	.word	0xffffe7ff

080006e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b090      	sub	sp, #64	; 0x40
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006ea:	232c      	movs	r3, #44	; 0x2c
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	2314      	movs	r3, #20
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f006 f98b 	bl	8006a10 <memset>
  RTC_DateTypeDef sDate = {0};
 80006fa:	2328      	movs	r3, #40	; 0x28
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000702:	003b      	movs	r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	2328      	movs	r3, #40	; 0x28
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f006 f980 	bl	8006a10 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000710:	4b44      	ldr	r3, [pc, #272]	; (8000824 <MX_RTC_Init+0x140>)
 8000712:	4a45      	ldr	r2, [pc, #276]	; (8000828 <MX_RTC_Init+0x144>)
 8000714:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000716:	4b43      	ldr	r3, [pc, #268]	; (8000824 <MX_RTC_Init+0x140>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800071c:	4b41      	ldr	r3, [pc, #260]	; (8000824 <MX_RTC_Init+0x140>)
 800071e:	227f      	movs	r2, #127	; 0x7f
 8000720:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000722:	4b40      	ldr	r3, [pc, #256]	; (8000824 <MX_RTC_Init+0x140>)
 8000724:	22ff      	movs	r2, #255	; 0xff
 8000726:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000728:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <MX_RTC_Init+0x140>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800072e:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <MX_RTC_Init+0x140>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <MX_RTC_Init+0x140>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800073a:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <MX_RTC_Init+0x140>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000740:	4b38      	ldr	r3, [pc, #224]	; (8000824 <MX_RTC_Init+0x140>)
 8000742:	0018      	movs	r0, r3
 8000744:	f002 feb4 	bl	80034b0 <HAL_RTC_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800074c:	f000 faa2 	bl	8000c94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000750:	212c      	movs	r1, #44	; 0x2c
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000770:	1879      	adds	r1, r7, r1
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <MX_RTC_Init+0x140>)
 8000774:	2201      	movs	r2, #1
 8000776:	0018      	movs	r0, r3
 8000778:	f002 ff36 	bl	80035e8 <HAL_RTC_SetTime>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000780:	f000 fa88 	bl	8000c94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000784:	2128      	movs	r1, #40	; 0x28
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2201      	movs	r2, #1
 8000790:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2201      	movs	r2, #1
 8000796:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800079e:	1879      	adds	r1, r7, r1
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_RTC_Init+0x140>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	0018      	movs	r0, r3
 80007a6:	f003 f827 	bl	80037f8 <HAL_RTC_SetDate>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80007ae:	f000 fa71 	bl	8000c94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 80007d6:	003b      	movs	r3, r7
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_RTC_Init+0x148>)
 80007da:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2220      	movs	r2, #32
 80007ec:	2101      	movs	r1, #1
 80007ee:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007f0:	003b      	movs	r3, r7
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007f8:	0039      	movs	r1, r7
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_RTC_Init+0x140>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	0018      	movs	r0, r3
 8000800:	f003 f8de 	bl	80039c0 <HAL_RTC_SetAlarm>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8000808:	f000 fa44 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	005a      	lsls	r2, r3, #1
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <MX_RTC_Init+0x140>)
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f003 fa17 	bl	8003c48 <HAL_RTC_DeactivateAlarm>
  /* USER CODE END RTC_Init 2 */

}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b010      	add	sp, #64	; 0x40
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	2000008c 	.word	0x2000008c
 8000828:	40002800 	.word	0x40002800
 800082c:	80000080 	.word	0x80000080

08000830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	2308      	movs	r3, #8
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2310      	movs	r3, #16
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f006 f8e5 	bl	8006a10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	003b      	movs	r3, r7
 8000848:	0018      	movs	r0, r3
 800084a:	2308      	movs	r3, #8
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f006 f8de 	bl	8006a10 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	05d2      	lsls	r2, r2, #23
 800085a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM2_Init+0xa4>)
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_TIM2_Init+0xa8>)
 8000860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM2_Init+0xa4>)
 800086a:	22fa      	movs	r2, #250	; 0xfa
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_TIM2_Init+0xa4>)
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM2_Init+0xa4>)
 800087e:	0018      	movs	r0, r3
 8000880:	f003 fb5a 	bl	8003f38 <HAL_TIM_Base_Init>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 fa04 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	2108      	movs	r1, #8
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0152      	lsls	r2, r2, #5
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000896:	187a      	adds	r2, r7, r1
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_TIM2_Init+0xa4>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f003 fd0f 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008a6:	f000 f9f5 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	003b      	movs	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	003b      	movs	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b6:	003a      	movs	r2, r7
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_TIM2_Init+0xa4>)
 80008ba:	0011      	movs	r1, r2
 80008bc:	0018      	movs	r0, r3
 80008be:	f003 feeb 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008c6:	f000 f9e5 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b006      	add	sp, #24
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	200000b0 	.word	0x200000b0
 80008d8:	00007cff 	.word	0x00007cff

080008dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	2308      	movs	r3, #8
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	0018      	movs	r0, r3
 80008e8:	2310      	movs	r3, #16
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f006 f88f 	bl	8006a10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f2:	003b      	movs	r3, r7
 80008f4:	0018      	movs	r0, r3
 80008f6:	2308      	movs	r3, #8
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f006 f888 	bl	8006a10 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_TIM3_Init+0xa0>)
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <MX_TIM3_Init+0xa4>)
 8000904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_TIM3_Init+0xa0>)
 8000908:	221f      	movs	r2, #31
 800090a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_TIM3_Init+0xa0>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_TIM3_Init+0xa0>)
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <MX_TIM3_Init+0xa8>)
 8000916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_TIM3_Init+0xa0>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_TIM3_Init+0xa0>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM3_Init+0xa0>)
 8000926:	0018      	movs	r0, r3
 8000928:	f003 fb06 	bl	8003f38 <HAL_TIM_Base_Init>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000930:	f000 f9b0 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	2108      	movs	r1, #8
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	0152      	lsls	r2, r2, #5
 800093c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093e:	187a      	adds	r2, r7, r1
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_TIM3_Init+0xa0>)
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f003 fcbb 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800094e:	f000 f9a1 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000952:	003b      	movs	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	003b      	movs	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800095e:	003a      	movs	r2, r7
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_TIM3_Init+0xa0>)
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f003 fe97 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800096e:	f000 f991 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b006      	add	sp, #24
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	200000f0 	.word	0x200000f0
 8000980:	40000400 	.word	0x40000400
 8000984:	0000fffe 	.word	0x0000fffe

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 8000994:	22e1      	movs	r2, #225	; 0xe1
 8000996:	0252      	lsls	r2, r2, #9
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f003 fec1 	bl	8004754 <HAL_UART_Init>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f95d 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000130 	.word	0x20000130
 80009e4:	40013800 	.word	0x40013800

080009e8 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_USART4_UART_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 80009f4:	2296      	movs	r2, #150	; 0x96
 80009f6:	0192      	lsls	r2, r2, #6
 80009f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <MX_USART4_UART_Init+0x58>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f003 fe91 	bl	8004754 <HAL_UART_Init>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 f92d 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001b8 	.word	0x200001b8
 8000a44:	40004c00 	.word	0x40004c00

08000a48 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_USART5_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a54:	2296      	movs	r2, #150	; 0x96
 8000a56:	0192      	lsls	r2, r2, #6
 8000a58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <MX_USART5_UART_Init+0x58>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f003 fe61 	bl	8004754 <HAL_UART_Init>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f8fd 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000240 	.word	0x20000240
 8000aa4:	40005000 	.word	0x40005000

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	2414      	movs	r4, #20
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	2314      	movs	r3, #20
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f005 ffa9 	bl	8006a10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac2:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aca:	4b58      	ldr	r3, [pc, #352]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	2204      	movs	r2, #4
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	4b55      	ldr	r3, [pc, #340]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ada:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae2:	4b52      	ldr	r3, [pc, #328]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b4f      	ldr	r3, [pc, #316]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af2:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000afa:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	2201      	movs	r2, #1
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b0a:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b12:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b16:	2202      	movs	r2, #2
 8000b18:	4013      	ands	r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b22:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000b24:	2108      	movs	r1, #8
 8000b26:	430a      	orrs	r2, r1
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b2a:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <MX_GPIO_Init+0x184>)
 8000b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2e:	2208      	movs	r2, #8
 8000b30:	4013      	ands	r3, r2
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin, GPIO_PIN_RESET);
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	21e0      	movs	r1, #224	; 0xe0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 fd03 	bl	800254a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8000b44:	23ea      	movs	r3, #234	; 0xea
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4839      	ldr	r0, [pc, #228]	; (8000c30 <MX_GPIO_Init+0x188>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	f001 fcfc 	bl	800254a <HAL_GPIO_WritePin>
                          |SDO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 8000b52:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <MX_GPIO_Init+0x18c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 fcf6 	bl	800254a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	0192      	lsls	r2, r2, #6
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2284      	movs	r2, #132	; 0x84
 8000b6a:	0392      	lsls	r2, r2, #14
 8000b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_GPIO_Init+0x18c>)
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	f001 fb4a 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2202      	movs	r2, #2
 8000b8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2203      	movs	r2, #3
 8000b96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	193a      	adds	r2, r7, r4
 8000ba0:	23a0      	movs	r3, #160	; 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 fb34 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	22e0      	movs	r2, #224	; 0xe0
 8000bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	193a      	adds	r2, r7, r4
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fb21 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_6_Pin D_7_Pin D_4_Pin SCLK_Pin
                           SDO_Pin */
  GPIO_InitStruct.Pin = D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	22ea      	movs	r2, #234	; 0xea
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	601a      	str	r2, [r3, #0]
                          |SDO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	000c      	movs	r4, r1
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2201      	movs	r2, #1
 8000be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <MX_GPIO_Init+0x188>)
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	f001 fb0c 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 8000bfc:	0021      	movs	r1, r4
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2201      	movs	r2, #1
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <MX_GPIO_Init+0x18c>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f001 faf9 	bl	8002214 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b00b      	add	sp, #44	; 0x2c
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	50000400 	.word	0x50000400
 8000c34:	50000800 	.word	0x50000800

08000c38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d116      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		timer_counter++;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c54:	701a      	strb	r2, [r3, #0]
		Clocker_Segment_Update(&ourClocker);
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fc01 	bl	8001460 <Clocker_Segment_Update>
		if(budzik_music == 1)
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d106      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			alarm_counter++;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c74:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	200000b0 	.word	0x200000b0
 8000c84:	200002c9 	.word	0x200002c9
 8000c88:	200004c0 	.word	0x200004c0
 8000c8c:	200002cb 	.word	0x200002cb
 8000c90:	200002ca 	.word	0x200002ca

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <HAL_MspInit+0x24>)
 8000ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x24>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	430a      	orrs	r2, r1
 8000cae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_MspInit+0x24>)
 8000cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_MspInit+0x24>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	0549      	lsls	r1, r1, #21
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_RTC_MspInit+0x28>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d106      	bne.n	8000ce8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_RTC_MspInit+0x2c>)
 8000cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_RTC_MspInit+0x2c>)
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	02c9      	lsls	r1, r1, #11
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40002800 	.word	0x40002800
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d10e      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_TIM_Base_MspInit+0x50>)
 8000d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_Base_MspInit+0x50>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f001 f9bf 	bl	80020a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f001 f9d1 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d28:	e00a      	b.n	8000d40 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_TIM_Base_MspInit+0x54>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d105      	bne.n	8000d40 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_TIM_Base_MspInit+0x50>)
 8000d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_TIM_Base_MspInit+0x50>)
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40000400 	.word	0x40000400

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08d      	sub	sp, #52	; 0x34
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	241c      	movs	r4, #28
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2314      	movs	r3, #20
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f005 fe54 	bl	8006a10 <memset>
  if(huart->Instance==USART1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a62      	ldr	r2, [pc, #392]	; (8000ef8 <HAL_UART_MspInit+0x1a8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12b      	bne.n	8000dca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d72:	4b62      	ldr	r3, [pc, #392]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d76:	4b61      	ldr	r3, [pc, #388]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	01c9      	lsls	r1, r1, #7
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d8c:	4b5b      	ldr	r3, [pc, #364]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d90:	2201      	movs	r2, #1
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	22c0      	movs	r2, #192	; 0xc0
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	0021      	movs	r1, r4
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2203      	movs	r2, #3
 8000db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2204      	movs	r2, #4
 8000db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	187a      	adds	r2, r7, r1
 8000dbc:	23a0      	movs	r3, #160	; 0xa0
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 fa26 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000dc8:	e091      	b.n	8000eee <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART4)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <HAL_UART_MspInit+0x1b0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d132      	bne.n	8000e3a <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000dd4:	4b49      	ldr	r3, [pc, #292]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd8:	4b48      	ldr	r3, [pc, #288]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0309      	lsls	r1, r1, #12
 8000dde:	430a      	orrs	r2, r1
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	2201      	movs	r2, #1
 8000df4:	4013      	ands	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dfa:	211c      	movs	r1, #28
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2202      	movs	r2, #2
 8000e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2203      	movs	r2, #3
 8000e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2206      	movs	r2, #6
 8000e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	23a0      	movs	r3, #160	; 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 f9f6 	bl	8002214 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	200e      	movs	r0, #14
 8000e2e:	f001 f937 	bl	80020a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8000e32:	200e      	movs	r0, #14
 8000e34:	f001 f949 	bl	80020ca <HAL_NVIC_EnableIRQ>
}
 8000e38:	e059      	b.n	8000eee <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART5)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <HAL_UART_MspInit+0x1b4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d154      	bne.n	8000eee <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0349      	lsls	r1, r1, #13
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e58:	2104      	movs	r1, #4
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	2204      	movs	r2, #4
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e70:	2108      	movs	r1, #8
 8000e72:	430a      	orrs	r2, r1
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_UART_MspInit+0x1ac>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e82:	211c      	movs	r1, #28
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	0152      	lsls	r2, r2, #5
 8000e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	000c      	movs	r4, r1
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2202      	movs	r2, #2
 8000e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0x1b8>)
 8000eaa:	0019      	movs	r1, r3
 8000eac:	0010      	movs	r0, r2
 8000eae:	f001 f9b1 	bl	8002214 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2206      	movs	r2, #6
 8000ed0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_UART_MspInit+0x1bc>)
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	0010      	movs	r0, r2
 8000eda:	f001 f99b 	bl	8002214 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	200e      	movs	r0, #14
 8000ee4:	f001 f8dc 	bl	80020a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8000ee8:	200e      	movs	r0, #14
 8000eea:	f001 f8ee 	bl	80020ca <HAL_NVIC_EnableIRQ>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b00d      	add	sp, #52	; 0x34
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40004c00 	.word	0x40004c00
 8000f04:	40005000 	.word	0x40005000
 8000f08:	50000800 	.word	0x50000800
 8000f0c:	50000c00 	.word	0x50000c00

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 ffc8 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <USART4_5_IRQHandler+0x1c>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f003 fd56 	bl	80049f8 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <USART4_5_IRQHandler+0x20>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f003 fd52 	bl	80049f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	200001b8 	.word	0x200001b8
 8000f60:	20000240 	.word	0x20000240

08000f64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <TIM2_IRQHandler+0x14>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f003 f8c0 	bl	80040f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	200000b0 	.word	0x200000b0

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f005 fda6 	bl	8006afc <__errno>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	425b      	negs	r3, r3
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	18d2      	adds	r2, r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b006      	add	sp, #24
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20005000 	.word	0x20005000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	20000614 	.word	0x20000614
 8000fe4:	20000818 	.word	0x20000818

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ff6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff8:	f7ff fff6 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001022:	f005 fd71 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fa73 	bl	8000510 <main>

0800102a <LoopForever>:

LoopForever:
    b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
   ldr   r0, =_estack
 800102c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001038:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 800103c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001040:	20000814 	.word	0x20000814

08001044 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_COMP_IRQHandler>
	...

08001048 <Clocker_Init>:
 *      Author: zero-jedynkowy
 */
#include "Clocker.h"

void Clocker_Init(Clocker * myClocker, RTC_HandleTypeDef * rtcHandle, TIM_HandleTypeDef * timSegment, TIM_HandleTypeDef * timScreen)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	; 0x50
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
	DF_Init(20);
 8001056:	2014      	movs	r0, #20
 8001058:	f000 fb39 	bl	80016ce <DF_Init>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4833      	ldr	r0, [pc, #204]	; (8001130 <Clocker_Init+0xe8>)
 8001062:	2201      	movs	r2, #1
 8001064:	0019      	movs	r1, r3
 8001066:	f001 fa70 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4830      	ldr	r0, [pc, #192]	; (8001130 <Clocker_Init+0xe8>)
 8001070:	2201      	movs	r2, #1
 8001072:	0019      	movs	r1, r3
 8001074:	f001 fa69 	bl	800254a <HAL_GPIO_WritePin>
	myClocker->maxScreen = 9;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2209      	movs	r2, #9
 800107c:	701a      	strb	r2, [r3, #0]
	myClocker->currentScreen = 0;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	705a      	strb	r2, [r3, #1]
	myClocker->screenTimeChanging = 1; //in seconds
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2201      	movs	r2, #1
 8001088:	709a      	strb	r2, [r3, #2]
	Clocker_Set_Screens(myClocker);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	0018      	movs	r0, r3
 800108e:	f000 f851 	bl	8001134 <Clocker_Set_Screens>
	myClocker->sTime = (RTC_TimeTypeDef *)malloc(sizeof(RTC_TimeTypeDef));
 8001092:	2014      	movs	r0, #20
 8001094:	f005 f9e8 	bl	8006468 <malloc>
 8001098:	0003      	movs	r3, r0
 800109a:	0019      	movs	r1, r3
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	23a2      	movs	r3, #162	; 0xa2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	50d1      	str	r1, [r2, r3]
	*myClocker->sTime = (RTC_TimeTypeDef){0};
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	23a2      	movs	r3, #162	; 0xa2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	58d3      	ldr	r3, [r2, r3]
 80010ac:	0018      	movs	r0, r3
 80010ae:	2314      	movs	r3, #20
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f005 fcac 	bl	8006a10 <memset>
	myClocker->sDate = (RTC_DateTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 80010b8:	2004      	movs	r0, #4
 80010ba:	f005 f9d5 	bl	8006468 <malloc>
 80010be:	0003      	movs	r3, r0
 80010c0:	0019      	movs	r1, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	23a4      	movs	r3, #164	; 0xa4
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	50d1      	str	r1, [r2, r3]
	*myClocker->sDate = (RTC_DateTypeDef){0};
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	23a4      	movs	r3, #164	; 0xa4
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	58d3      	ldr	r3, [r2, r3]
 80010d2:	0018      	movs	r0, r3
 80010d4:	2304      	movs	r3, #4
 80010d6:	001a      	movs	r2, r3
 80010d8:	2100      	movs	r1, #0
 80010da:	f005 fc99 	bl	8006a10 <memset>
	myClocker->sAlarm = (RTC_AlarmTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 80010de:	2004      	movs	r0, #4
 80010e0:	f005 f9c2 	bl	8006468 <malloc>
 80010e4:	0003      	movs	r3, r0
 80010e6:	0019      	movs	r1, r3
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	23a6      	movs	r3, #166	; 0xa6
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	50d1      	str	r1, [r2, r3]
	*myClocker->sAlarm = (RTC_AlarmTypeDef){0};
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	23a6      	movs	r3, #166	; 0xa6
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	58d3      	ldr	r3, [r2, r3]
 80010f8:	0018      	movs	r0, r3
 80010fa:	2328      	movs	r3, #40	; 0x28
 80010fc:	001a      	movs	r2, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	f005 fc86 	bl	8006a10 <memset>
	myClocker->rtcHandle = rtcHandle;
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	23a8      	movs	r3, #168	; 0xa8
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	50d1      	str	r1, [r2, r3]
	HAL_TIM_Base_Start_IT(timSegment);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f002 ff9b 	bl	800404c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(timScreen);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	0018      	movs	r0, r3
 800111a:	f002 ff4d 	bl	8003fb8 <HAL_TIM_Base_Start>
	lcd_init();
 800111e:	f000 fbe7 	bl	80018f0 <lcd_init>
	lcd_clear();
 8001122:	f000 fbbb 	bl	800189c <lcd_clear>
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b014      	add	sp, #80	; 0x50
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	50000400 	.word	0x50000400

08001134 <Clocker_Set_Screens>:

void Clocker_Set_Screens(Clocker * myClocker)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	strcpy(myClocker->tableOfScreens[0][0], "WEATHER");
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1cda      	adds	r2, r3, #3
 8001140:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <Clocker_Set_Screens+0x1a4>)
 8001142:	0010      	movs	r0, r2
 8001144:	0019      	movs	r1, r3
 8001146:	2308      	movs	r3, #8
 8001148:	001a      	movs	r2, r3
 800114a:	f005 fd04 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[0][1], "%s");
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3313      	adds	r3, #19
 8001152:	001a      	movs	r2, r3
 8001154:	4b61      	ldr	r3, [pc, #388]	; (80012dc <Clocker_Set_Screens+0x1a8>)
 8001156:	0010      	movs	r0, r2
 8001158:	0019      	movs	r1, r3
 800115a:	2303      	movs	r3, #3
 800115c:	001a      	movs	r2, r3
 800115e:	f005 fcfa 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[1][0], "TEMPERATURE");
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3323      	adds	r3, #35	; 0x23
 8001166:	001a      	movs	r2, r3
 8001168:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <Clocker_Set_Screens+0x1ac>)
 800116a:	0010      	movs	r0, r2
 800116c:	0019      	movs	r1, r3
 800116e:	230c      	movs	r3, #12
 8001170:	001a      	movs	r2, r3
 8001172:	f005 fcf0 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[1][1], "%.1f st. C");
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3333      	adds	r3, #51	; 0x33
 800117a:	001a      	movs	r2, r3
 800117c:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <Clocker_Set_Screens+0x1b0>)
 800117e:	0010      	movs	r0, r2
 8001180:	0019      	movs	r1, r3
 8001182:	230b      	movs	r3, #11
 8001184:	001a      	movs	r2, r3
 8001186:	f005 fce6 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[2][0], "FEELS LIKE");
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3343      	adds	r3, #67	; 0x43
 800118e:	001a      	movs	r2, r3
 8001190:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <Clocker_Set_Screens+0x1b4>)
 8001192:	0010      	movs	r0, r2
 8001194:	0019      	movs	r1, r3
 8001196:	230b      	movs	r3, #11
 8001198:	001a      	movs	r2, r3
 800119a:	f005 fcdc 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[2][1], "%.1f st. C");
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3353      	adds	r3, #83	; 0x53
 80011a2:	001a      	movs	r2, r3
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <Clocker_Set_Screens+0x1b0>)
 80011a6:	0010      	movs	r0, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	230b      	movs	r3, #11
 80011ac:	001a      	movs	r2, r3
 80011ae:	f005 fcd2 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[3][0], "PRESSURE");
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3363      	adds	r3, #99	; 0x63
 80011b6:	001a      	movs	r2, r3
 80011b8:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <Clocker_Set_Screens+0x1b8>)
 80011ba:	0010      	movs	r0, r2
 80011bc:	0019      	movs	r1, r3
 80011be:	2309      	movs	r3, #9
 80011c0:	001a      	movs	r2, r3
 80011c2:	f005 fcc8 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[3][1], "%.0f hPa");
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3373      	adds	r3, #115	; 0x73
 80011ca:	001a      	movs	r2, r3
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <Clocker_Set_Screens+0x1bc>)
 80011ce:	0010      	movs	r0, r2
 80011d0:	0019      	movs	r1, r3
 80011d2:	2309      	movs	r3, #9
 80011d4:	001a      	movs	r2, r3
 80011d6:	f005 fcbe 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[4][0], "HUMIDITY");
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3383      	adds	r3, #131	; 0x83
 80011de:	001a      	movs	r2, r3
 80011e0:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <Clocker_Set_Screens+0x1c0>)
 80011e2:	0010      	movs	r0, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	2309      	movs	r3, #9
 80011e8:	001a      	movs	r2, r3
 80011ea:	f005 fcb4 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[4][1], "%.1f %");
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3393      	adds	r3, #147	; 0x93
 80011f2:	001a      	movs	r2, r3
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <Clocker_Set_Screens+0x1c4>)
 80011f6:	0010      	movs	r0, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	2307      	movs	r3, #7
 80011fc:	001a      	movs	r2, r3
 80011fe:	f005 fcaa 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[5][0], "WIND SPEED");
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	33a3      	adds	r3, #163	; 0xa3
 8001206:	001a      	movs	r2, r3
 8001208:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <Clocker_Set_Screens+0x1c8>)
 800120a:	0010      	movs	r0, r2
 800120c:	0019      	movs	r1, r3
 800120e:	230b      	movs	r3, #11
 8001210:	001a      	movs	r2, r3
 8001212:	f005 fca0 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[5][1], "%.1f m.s");
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	33b3      	adds	r3, #179	; 0xb3
 800121a:	001a      	movs	r2, r3
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <Clocker_Set_Screens+0x1cc>)
 800121e:	0010      	movs	r0, r2
 8001220:	0019      	movs	r1, r3
 8001222:	2309      	movs	r3, #9
 8001224:	001a      	movs	r2, r3
 8001226:	f005 fc96 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[6][0], "WIND SPEED");
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	33c3      	adds	r3, #195	; 0xc3
 800122e:	001a      	movs	r2, r3
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <Clocker_Set_Screens+0x1c8>)
 8001232:	0010      	movs	r0, r2
 8001234:	0019      	movs	r1, r3
 8001236:	230b      	movs	r3, #11
 8001238:	001a      	movs	r2, r3
 800123a:	f005 fc8c 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[6][1], "%.1f m.s");
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	33d3      	adds	r3, #211	; 0xd3
 8001242:	001a      	movs	r2, r3
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <Clocker_Set_Screens+0x1cc>)
 8001246:	0010      	movs	r0, r2
 8001248:	0019      	movs	r1, r3
 800124a:	2309      	movs	r3, #9
 800124c:	001a      	movs	r2, r3
 800124e:	f005 fc82 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[7][0], "SUNRISE");
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	33e3      	adds	r3, #227	; 0xe3
 8001256:	001a      	movs	r2, r3
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <Clocker_Set_Screens+0x1d0>)
 800125a:	0010      	movs	r0, r2
 800125c:	0019      	movs	r1, r3
 800125e:	2308      	movs	r3, #8
 8001260:	001a      	movs	r2, r3
 8001262:	f005 fc78 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[7][1], "%d:%d");
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	33f3      	adds	r3, #243	; 0xf3
 800126a:	001a      	movs	r2, r3
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <Clocker_Set_Screens+0x1d4>)
 800126e:	0010      	movs	r0, r2
 8001270:	0019      	movs	r1, r3
 8001272:	2306      	movs	r3, #6
 8001274:	001a      	movs	r2, r3
 8001276:	f005 fc6e 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[8][0], "SUNSET");
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	1d1a      	adds	r2, r3, #4
 800127e:	32ff      	adds	r2, #255	; 0xff
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <Clocker_Set_Screens+0x1d8>)
 8001282:	0010      	movs	r0, r2
 8001284:	0019      	movs	r1, r3
 8001286:	2307      	movs	r3, #7
 8001288:	001a      	movs	r2, r3
 800128a:	f005 fc64 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[8][1], "%d:%d");
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3314      	adds	r3, #20
 8001292:	33ff      	adds	r3, #255	; 0xff
 8001294:	001a      	movs	r2, r3
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <Clocker_Set_Screens+0x1d4>)
 8001298:	0010      	movs	r0, r2
 800129a:	0019      	movs	r1, r3
 800129c:	2306      	movs	r3, #6
 800129e:	001a      	movs	r2, r3
 80012a0:	f005 fc59 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[9][0], "CITY");
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3324      	adds	r3, #36	; 0x24
 80012a8:	33ff      	adds	r3, #255	; 0xff
 80012aa:	001a      	movs	r2, r3
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <Clocker_Set_Screens+0x1dc>)
 80012ae:	0010      	movs	r0, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	2305      	movs	r3, #5
 80012b4:	001a      	movs	r2, r3
 80012b6:	f005 fc4e 	bl	8006b56 <memcpy>
	strcpy(myClocker->tableOfScreens[9][1], "%s");
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3334      	adds	r3, #52	; 0x34
 80012be:	33ff      	adds	r3, #255	; 0xff
 80012c0:	001a      	movs	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <Clocker_Set_Screens+0x1a8>)
 80012c4:	0010      	movs	r0, r2
 80012c6:	0019      	movs	r1, r3
 80012c8:	2303      	movs	r3, #3
 80012ca:	001a      	movs	r2, r3
 80012cc:	f005 fc43 	bl	8006b56 <memcpy>
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08006e94 	.word	0x08006e94
 80012dc:	08006e9c 	.word	0x08006e9c
 80012e0:	08006ea0 	.word	0x08006ea0
 80012e4:	08006eac 	.word	0x08006eac
 80012e8:	08006eb8 	.word	0x08006eb8
 80012ec:	08006ec4 	.word	0x08006ec4
 80012f0:	08006ed0 	.word	0x08006ed0
 80012f4:	08006edc 	.word	0x08006edc
 80012f8:	08006ee8 	.word	0x08006ee8
 80012fc:	08006ef0 	.word	0x08006ef0
 8001300:	08006efc 	.word	0x08006efc
 8001304:	08006f08 	.word	0x08006f08
 8001308:	08006f10 	.word	0x08006f10
 800130c:	08006f18 	.word	0x08006f18
 8001310:	08006f20 	.word	0x08006f20

08001314 <Clocker_Set_Time>:

void Clocker_Set_Time(Clocker * myClocker, uint8_t newHours, uint8_t newMinutes, uint8_t newSeconds)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	000c      	movs	r4, r1
 800131e:	0010      	movs	r0, r2
 8001320:	0019      	movs	r1, r3
 8001322:	1cfb      	adds	r3, r7, #3
 8001324:	1c22      	adds	r2, r4, #0
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	1c02      	adds	r2, r0, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	1c7b      	adds	r3, r7, #1
 8001330:	1c0a      	adds	r2, r1, #0
 8001332:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Hours = newHours;
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	23a2      	movs	r3, #162	; 0xa2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	58d3      	ldr	r3, [r2, r3]
 800133c:	1cfa      	adds	r2, r7, #3
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Minutes = newMinutes;
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	23a2      	movs	r3, #162	; 0xa2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	58d3      	ldr	r3, [r2, r3]
 800134a:	1cba      	adds	r2, r7, #2
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	705a      	strb	r2, [r3, #1]
	myClocker->sTime->Seconds = newSeconds;
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	23a2      	movs	r3, #162	; 0xa2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	58d3      	ldr	r3, [r2, r3]
 8001358:	1c7a      	adds	r2, r7, #1
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	709a      	strb	r2, [r3, #2]
	myClocker->sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	23a2      	movs	r3, #162	; 0xa2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	58d3      	ldr	r3, [r2, r3]
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
	myClocker->sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	23a2      	movs	r3, #162	; 0xa2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	58d3      	ldr	r3, [r2, r3]
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	23a8      	movs	r3, #168	; 0xa8
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	58d0      	ldr	r0, [r2, r3]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	23a2      	movs	r3, #162	; 0xa2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	58d3      	ldr	r3, [r2, r3]
 8001386:	2200      	movs	r2, #0
 8001388:	0019      	movs	r1, r3
 800138a:	f002 f92d 	bl	80035e8 <HAL_RTC_SetTime>
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b003      	add	sp, #12
 8001394:	bd90      	pop	{r4, r7, pc}
	...

08001398 <Clocker_Set_Alarm>:

void Clocker_Set_Alarm(Clocker * myClocker, uint8_t alarmHours, uint8_t alarmMinutes)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	0008      	movs	r0, r1
 80013a2:	0011      	movs	r1, r2
 80013a4:	1cfb      	adds	r3, r7, #3
 80013a6:	1c02      	adds	r2, r0, #0
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	1cbb      	adds	r3, r7, #2
 80013ac:	1c0a      	adds	r2, r1, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Hours = alarmHours;
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	23a6      	movs	r3, #166	; 0xa6
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	58d3      	ldr	r3, [r2, r3]
 80013b8:	1cfa      	adds	r2, r7, #3
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Minutes = alarmMinutes;
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	23a6      	movs	r3, #166	; 0xa6
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	58d3      	ldr	r3, [r2, r3]
 80013c6:	1cba      	adds	r2, r7, #2
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	705a      	strb	r2, [r3, #1]
	myClocker->sAlarm->AlarmTime.Seconds = 0x0;
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	23a6      	movs	r3, #166	; 0xa6
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	58d3      	ldr	r3, [r2, r3]
 80013d4:	2200      	movs	r2, #0
 80013d6:	709a      	strb	r2, [r3, #2]
	myClocker->sAlarm->AlarmTime.SubSeconds = 0x0;
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	23a6      	movs	r3, #166	; 0xa6
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	58d3      	ldr	r3, [r2, r3]
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
	myClocker->sAlarm->AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	23a6      	movs	r3, #166	; 0xa6
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	58d3      	ldr	r3, [r2, r3]
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
	myClocker->sAlarm->AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	23a6      	movs	r3, #166	; 0xa6
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	58d3      	ldr	r3, [r2, r3]
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
	myClocker->sAlarm->AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	23a6      	movs	r3, #166	; 0xa6
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	58d3      	ldr	r3, [r2, r3]
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <Clocker_Set_Alarm+0xc4>)
 8001406:	615a      	str	r2, [r3, #20]
	myClocker->sAlarm->AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	23a6      	movs	r3, #166	; 0xa6
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	58d3      	ldr	r3, [r2, r3]
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
	myClocker->sAlarm->AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	23a6      	movs	r3, #166	; 0xa6
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	58d3      	ldr	r3, [r2, r3]
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
	myClocker->sAlarm->AlarmDateWeekDay = 0x1;
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	23a6      	movs	r3, #166	; 0xa6
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	58d3      	ldr	r3, [r2, r3]
 8001428:	2220      	movs	r2, #32
 800142a:	2101      	movs	r1, #1
 800142c:	5499      	strb	r1, [r3, r2]
	myClocker->sAlarm->Alarm = RTC_ALARM_A;
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	23a6      	movs	r3, #166	; 0xa6
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0052      	lsls	r2, r2, #1
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTC_SetAlarm(myClocker->rtcHandle, myClocker->sAlarm, RTC_FORMAT_BCD);
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	23a8      	movs	r3, #168	; 0xa8
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	58d0      	ldr	r0, [r2, r3]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	23a6      	movs	r3, #166	; 0xa6
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	58d3      	ldr	r3, [r2, r3]
 800144c:	2201      	movs	r2, #1
 800144e:	0019      	movs	r1, r3
 8001450:	f002 fab6 	bl	80039c0 <HAL_RTC_SetAlarm>
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}
 800145c:	80000080 	.word	0x80000080

08001460 <Clocker_Segment_Update>:

void Clocker_Segment_Update(Clocker * myClocker)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	uint8_t tempTime[4] = {0};
 8001468:	240c      	movs	r4, #12
 800146a:	193b      	adds	r3, r7, r4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
	HAL_RTC_GetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	23a8      	movs	r3, #168	; 0xa8
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	58d0      	ldr	r0, [r2, r3]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	23a2      	movs	r3, #162	; 0xa2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	58d3      	ldr	r3, [r2, r3]
 8001480:	2200      	movs	r2, #0
 8001482:	0019      	movs	r1, r3
 8001484:	f002 f95a 	bl	800373c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(myClocker->rtcHandle, myClocker->sDate, RTC_FORMAT_BIN);
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	23a8      	movs	r3, #168	; 0xa8
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	58d0      	ldr	r0, [r2, r3]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	23a4      	movs	r3, #164	; 0xa4
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	58d3      	ldr	r3, [r2, r3]
 8001498:	2200      	movs	r2, #0
 800149a:	0019      	movs	r1, r3
 800149c:	f002 fa40 	bl	8003920 <HAL_RTC_GetDate>
	tempTime[0] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)/10);
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	23a2      	movs	r3, #162	; 0xa2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	58d3      	ldr	r3, [r2, r3]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	210a      	movs	r1, #10
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7fe fe33 	bl	8000118 <__udivsi3>
 80014b2:	0003      	movs	r3, r0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 f876 	bl	80015a8 <Clocker_Convert_Int_to_Segment>
 80014bc:	0003      	movs	r3, r0
 80014be:	001a      	movs	r2, r3
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	701a      	strb	r2, [r3, #0]
	tempTime[1] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)%10);
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	23a2      	movs	r3, #162	; 0xa2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	58d3      	ldr	r3, [r2, r3]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	210a      	movs	r1, #10
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7fe fea7 	bl	8000224 <__aeabi_uidivmod>
 80014d6:	000b      	movs	r3, r1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 f864 	bl	80015a8 <Clocker_Convert_Int_to_Segment>
 80014e0:	0003      	movs	r3, r0
 80014e2:	001a      	movs	r2, r3
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	705a      	strb	r2, [r3, #1]
	tempTime[2] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)/10);
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	23a2      	movs	r3, #162	; 0xa2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	58d3      	ldr	r3, [r2, r3]
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	210a      	movs	r1, #10
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7fe fe0f 	bl	8000118 <__udivsi3>
 80014fa:	0003      	movs	r3, r0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 f852 	bl	80015a8 <Clocker_Convert_Int_to_Segment>
 8001504:	0003      	movs	r3, r0
 8001506:	001a      	movs	r2, r3
 8001508:	193b      	adds	r3, r7, r4
 800150a:	709a      	strb	r2, [r3, #2]
	tempTime[3] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)%10);
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	23a2      	movs	r3, #162	; 0xa2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	58d3      	ldr	r3, [r2, r3]
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	210a      	movs	r1, #10
 8001518:	0018      	movs	r0, r3
 800151a:	f7fe fe83 	bl	8000224 <__aeabi_uidivmod>
 800151e:	000b      	movs	r3, r1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f840 	bl	80015a8 <Clocker_Convert_Int_to_Segment>
 8001528:	0003      	movs	r3, r0
 800152a:	001a      	movs	r2, r3
 800152c:	193b      	adds	r3, r7, r4
 800152e:	70da      	strb	r2, [r3, #3]
	tm1637_DisplayHandle(7, tempTime);
 8001530:	193b      	adds	r3, r7, r4
 8001532:	0019      	movs	r1, r3
 8001534:	2007      	movs	r0, #7
 8001536:	f000 fbdb 	bl	8001cf0 <tm1637_DisplayHandle>
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b005      	add	sp, #20
 8001540:	bd90      	pop	{r4, r7, pc}

08001542 <Clocker_Change_Screen>:

void Clocker_Change_Screen(Clocker * myClocker)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	myClocker->currentScreen++;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	3301      	adds	r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	705a      	strb	r2, [r3, #1]
	if(myClocker->currentScreen >= 10)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	2b09      	cmp	r3, #9
 800155c:	d902      	bls.n	8001564 <Clocker_Change_Screen+0x22>
	{
		myClocker->currentScreen = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	705a      	strb	r2, [r3, #1]
	}
	lcd_clear();
 8001564:	f000 f99a 	bl	800189c <lcd_clear>
	lcd_put_cur(0, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f9a1 	bl	80018b2 <lcd_put_cur>
	lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][0]);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	3303      	adds	r3, #3
 800157c:	0018      	movs	r0, r3
 800157e:	f000 f9f5 	bl	800196c <lcd_send_string>
	lcd_put_cur(1, 0);
 8001582:	2100      	movs	r1, #0
 8001584:	2001      	movs	r0, #1
 8001586:	f000 f994 	bl	80018b2 <lcd_put_cur>
	lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][1]);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	015b      	lsls	r3, r3, #5
 8001590:	3310      	adds	r3, #16
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	18d3      	adds	r3, r2, r3
 8001596:	3303      	adds	r3, #3
 8001598:	0018      	movs	r0, r3
 800159a:	f000 f9e7 	bl	800196c <lcd_send_string>
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <Clocker_Convert_Int_to_Segment>:
{
	//tutaj rób
}

uint8_t Clocker_Convert_Int_to_Segment(uint8_t c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0002      	movs	r2, r0
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	701a      	strb	r2, [r3, #0]
	switch(c)
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d818      	bhi.n	80015ee <Clocker_Convert_Int_to_Segment+0x46>
 80015bc:	009a      	lsls	r2, r3, #2
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <Clocker_Convert_Int_to_Segment+0x50>)
 80015c0:	18d3      	adds	r3, r2, r3
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 80015c6:	233f      	movs	r3, #63	; 0x3f
 80015c8:	e012      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 1 : return 0x06;
 80015ca:	2306      	movs	r3, #6
 80015cc:	e010      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 2 : return 0x5b;
 80015ce:	235b      	movs	r3, #91	; 0x5b
 80015d0:	e00e      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 3 : return 0x4f;
 80015d2:	234f      	movs	r3, #79	; 0x4f
 80015d4:	e00c      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 4 : return 0x66;
 80015d6:	2366      	movs	r3, #102	; 0x66
 80015d8:	e00a      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 5 : return 0x6d;
 80015da:	236d      	movs	r3, #109	; 0x6d
 80015dc:	e008      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 6 : return 0x7d;
 80015de:	237d      	movs	r3, #125	; 0x7d
 80015e0:	e006      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 7 : return 0x07;
 80015e2:	2307      	movs	r3, #7
 80015e4:	e004      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 8 : return 0x7f;
 80015e6:	237f      	movs	r3, #127	; 0x7f
 80015e8:	e002      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
		case 9 : return 0x6f;
 80015ea:	236f      	movs	r3, #111	; 0x6f
 80015ec:	e000      	b.n	80015f0 <Clocker_Convert_Int_to_Segment+0x48>
	}
	return 0x3f;
 80015ee:	233f      	movs	r3, #63	; 0x3f
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	08006f50 	.word	0x08006f50

080015fc <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	0004      	movs	r4, r0
 8001604:	0008      	movs	r0, r1
 8001606:	0011      	movs	r1, r2
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	1c22      	adds	r2, r4, #0
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	1dbb      	adds	r3, r7, #6
 8001610:	1c02      	adds	r2, r0, #0
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	1d7b      	adds	r3, r7, #5
 8001616:	1c0a      	adds	r2, r1, #0
 8001618:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b29a      	uxth	r2, r3
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	18d3      	adds	r3, r2, r3
 8001628:	b29a      	uxth	r2, r3
 800162a:	1d7b      	adds	r3, r7, #5
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	18d3      	adds	r3, r2, r3
 8001632:	b29a      	uxth	r2, r3
 8001634:	2016      	movs	r0, #22
 8001636:	183b      	adds	r3, r7, r0
 8001638:	3206      	adds	r2, #6
 800163a:	32ff      	adds	r2, #255	; 0xff
 800163c:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 800163e:	183b      	adds	r3, r7, r0
 8001640:	183a      	adds	r2, r7, r0
 8001642:	8812      	ldrh	r2, [r2, #0]
 8001644:	4252      	negs	r2, r2
 8001646:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8001648:	210c      	movs	r1, #12
 800164a:	187b      	adds	r3, r7, r1
 800164c:	227e      	movs	r2, #126	; 0x7e
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	187b      	adds	r3, r7, r1
 8001652:	22ff      	movs	r2, #255	; 0xff
 8001654:	705a      	strb	r2, [r3, #1]
 8001656:	187b      	adds	r3, r7, r1
 8001658:	2206      	movs	r2, #6
 800165a:	709a      	strb	r2, [r3, #2]
 800165c:	187b      	adds	r3, r7, r1
 800165e:	1dfa      	adds	r2, r7, #7
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	70da      	strb	r2, [r3, #3]
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2200      	movs	r2, #0
 8001668:	711a      	strb	r2, [r3, #4]
 800166a:	187b      	adds	r3, r7, r1
 800166c:	1dba      	adds	r2, r7, #6
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	715a      	strb	r2, [r3, #5]
 8001672:	187b      	adds	r3, r7, r1
 8001674:	1d7a      	adds	r2, r7, #5
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	719a      	strb	r2, [r3, #6]
 800167a:	183b      	adds	r3, r7, r0
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b29b      	uxth	r3, r3
 8001682:	b2da      	uxtb	r2, r3
 8001684:	187b      	adds	r3, r7, r1
 8001686:	71da      	strb	r2, [r3, #7]
 8001688:	183b      	adds	r3, r7, r0
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	187b      	adds	r3, r7, r1
 8001690:	721a      	strb	r2, [r3, #8]
 8001692:	187b      	adds	r3, r7, r1
 8001694:	22ef      	movs	r2, #239	; 0xef
 8001696:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8001698:	2301      	movs	r3, #1
 800169a:	425b      	negs	r3, r3
 800169c:	1879      	adds	r1, r7, r1
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <Send_cmd+0xb4>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	f003 f8ab 	bl	80047fc <HAL_UART_Transmit>
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b007      	add	sp, #28
 80016ac:	bd90      	pop	{r4, r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	200001b8 	.word	0x200001b8

080016b4 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2100      	movs	r1, #0
 80016bc:	2003      	movs	r0, #3
 80016be:	f7ff ff9d 	bl	80015fc <Send_cmd>
  HAL_Delay(200);
 80016c2:	20c8      	movs	r0, #200	; 0xc8
 80016c4:	f000 fc1c 	bl	8001f00 <HAL_Delay>
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <DF_Init>:


void DF_Init (uint8_t volume)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	0002      	movs	r2, r0
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 80016da:	2202      	movs	r2, #2
 80016dc:	2100      	movs	r1, #0
 80016de:	203f      	movs	r0, #63	; 0x3f
 80016e0:	f7ff ff8c 	bl	80015fc <Send_cmd>
	HAL_Delay(200);
 80016e4:	20c8      	movs	r0, #200	; 0xc8
 80016e6:	f000 fc0b 	bl	8001f00 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	001a      	movs	r2, r3
 80016f0:	2100      	movs	r1, #0
 80016f2:	2006      	movs	r0, #6
 80016f4:	f7ff ff82 	bl	80015fc <Send_cmd>
	HAL_Delay(500);
 80016f8:	23fa      	movs	r3, #250	; 0xfa
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 fbff 	bl	8001f00 <HAL_Delay>
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}

0800170a <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	200e      	movs	r0, #14
 8001714:	f7ff ff72 	bl	80015fc <Send_cmd>
	HAL_Delay(200);
 8001718:	20c8      	movs	r0, #200	; 0xc8
 800171a:	f000 fbf1 	bl	8001f00 <HAL_Delay>
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	0002      	movs	r2, r0
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <delay+0x30>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <delay+0x30>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001740:	1dbb      	adds	r3, r7, #6
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d3f8      	bcc.n	800173a <delay+0x16>
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	200000f0 	.word	0x200000f0

08001758 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	0002      	movs	r2, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	2120      	movs	r1, #32
 8001770:	0018      	movs	r0, r3
 8001772:	f000 feea 	bl	800254a <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	b2db      	uxtb	r3, r3
 8001784:	481f      	ldr	r0, [pc, #124]	; (8001804 <send_to_lcd+0xac>)
 8001786:	001a      	movs	r2, r3
 8001788:	2110      	movs	r1, #16
 800178a:	f000 fede 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	b2da      	uxtb	r2, r3
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4818      	ldr	r0, [pc, #96]	; (8001804 <send_to_lcd+0xac>)
 80017a2:	0019      	movs	r1, r3
 80017a4:	f000 fed1 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2201      	movs	r2, #1
 80017b2:	4013      	ands	r3, r2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4814      	ldr	r0, [pc, #80]	; (8001808 <send_to_lcd+0xb0>)
 80017b8:	001a      	movs	r2, r3
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	f000 fec5 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <send_to_lcd+0xac>)
 80017cc:	001a      	movs	r2, r3
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	f000 febb 	bl	800254a <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80017d4:	23a0      	movs	r3, #160	; 0xa0
 80017d6:	05db      	lsls	r3, r3, #23
 80017d8:	2201      	movs	r2, #1
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 feb4 	bl	800254a <HAL_GPIO_WritePin>
	delay (20);
 80017e2:	2014      	movs	r0, #20
 80017e4:	f7ff ff9e 	bl	8001724 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80017e8:	23a0      	movs	r3, #160	; 0xa0
 80017ea:	05db      	lsls	r3, r3, #23
 80017ec:	2200      	movs	r2, #0
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 feaa 	bl	800254a <HAL_GPIO_WritePin>
	delay (20);
 80017f6:	2014      	movs	r0, #20
 80017f8:	f7ff ff94 	bl	8001724 <delay>
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	50000400 	.word	0x50000400
 8001808:	50000800 	.word	0x50000800

0800180c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	0002      	movs	r2, r0
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8001818:	200f      	movs	r0, #15
 800181a:	183b      	adds	r3, r7, r0
 800181c:	1dfa      	adds	r2, r7, #7
 800181e:	7812      	ldrb	r2, [r2, #0]
 8001820:	0912      	lsrs	r2, r2, #4
 8001822:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001824:	0004      	movs	r4, r0
 8001826:	183b      	adds	r3, r7, r0
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2100      	movs	r1, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ff93 	bl	8001758 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8001832:	0020      	movs	r0, r4
 8001834:	183b      	adds	r3, r7, r0
 8001836:	1dfa      	adds	r2, r7, #7
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	210f      	movs	r1, #15
 800183c:	400a      	ands	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8001840:	183b      	adds	r3, r7, r0
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2100      	movs	r1, #0
 8001846:	0018      	movs	r0, r3
 8001848:	f7ff ff86 	bl	8001758 <send_to_lcd>
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b005      	add	sp, #20
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	0002      	movs	r2, r0
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8001860:	200f      	movs	r0, #15
 8001862:	183b      	adds	r3, r7, r0
 8001864:	1dfa      	adds	r2, r7, #7
 8001866:	7812      	ldrb	r2, [r2, #0]
 8001868:	0912      	lsrs	r2, r2, #4
 800186a:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 800186c:	0004      	movs	r4, r0
 800186e:	183b      	adds	r3, r7, r0
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2101      	movs	r1, #1
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ff6f 	bl	8001758 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800187a:	0020      	movs	r0, r4
 800187c:	183b      	adds	r3, r7, r0
 800187e:	1dfa      	adds	r2, r7, #7
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	210f      	movs	r1, #15
 8001884:	400a      	ands	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8001888:	183b      	adds	r3, r7, r0
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff ff62 	bl	8001758 <send_to_lcd>
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b005      	add	sp, #20
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <lcd_clear>:

void lcd_clear (void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff ffb3 	bl	800180c <lcd_send_cmd>
	HAL_Delay(2);
 80018a6:	2002      	movs	r0, #2
 80018a8:	f000 fb2a 	bl	8001f00 <HAL_Delay>
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
    switch (row)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <lcd_put_cur+0x18>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <lcd_put_cur+0x22>
 80018c8:	e009      	b.n	80018de <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	4313      	orrs	r3, r2
 80018d0:	603b      	str	r3, [r7, #0]
            break;
 80018d2:	e004      	b.n	80018de <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	22c0      	movs	r2, #192	; 0xc0
 80018d8:	4313      	orrs	r3, r2
 80018da:	603b      	str	r3, [r7, #0]
            break;
 80018dc:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff92 	bl	800180c <lcd_send_cmd>
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <lcd_init>:


void lcd_init (void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80018f4:	2032      	movs	r0, #50	; 0x32
 80018f6:	f000 fb03 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x30);
 80018fa:	2030      	movs	r0, #48	; 0x30
 80018fc:	f7ff ff86 	bl	800180c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001900:	2005      	movs	r0, #5
 8001902:	f000 fafd 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001906:	2030      	movs	r0, #48	; 0x30
 8001908:	f7ff ff80 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800190c:	2001      	movs	r0, #1
 800190e:	f000 faf7 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001912:	2030      	movs	r0, #48	; 0x30
 8001914:	f7ff ff7a 	bl	800180c <lcd_send_cmd>
	HAL_Delay(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f000 faf1 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800191e:	2020      	movs	r0, #32
 8001920:	f7ff ff74 	bl	800180c <lcd_send_cmd>
	HAL_Delay(10);
 8001924:	200a      	movs	r0, #10
 8001926:	f000 faeb 	bl	8001f00 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800192a:	2028      	movs	r0, #40	; 0x28
 800192c:	f7ff ff6e 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f000 fae5 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001936:	2008      	movs	r0, #8
 8001938:	f7ff ff68 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 800193c:	2001      	movs	r0, #1
 800193e:	f000 fadf 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff ff62 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 8001948:	2001      	movs	r0, #1
 800194a:	f000 fad9 	bl	8001f00 <HAL_Delay>
	HAL_Delay(1);
 800194e:	2001      	movs	r0, #1
 8001950:	f000 fad6 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001954:	2006      	movs	r0, #6
 8001956:	f7ff ff59 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 fad0 	bl	8001f00 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001960:	200c      	movs	r0, #12
 8001962:	f7ff ff53 	bl	800180c <lcd_send_cmd>
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001974:	e006      	b.n	8001984 <lcd_send_string+0x18>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff ff68 	bl	8001854 <lcd_send_data>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f4      	bne.n	8001976 <lcd_send_string+0xa>
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <tm1637_CLKhigh+0x34>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	0019      	movs	r1, r3
 80019a6:	f000 fdd0 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <tm1637_CLKhigh+0x34>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	0019      	movs	r1, r3
 80019b4:	f000 fdc9 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <tm1637_CLKhigh+0x34>)
 80019be:	2201      	movs	r2, #1
 80019c0:	0019      	movs	r1, r3
 80019c2:	f000 fdc2 	bl	800254a <HAL_GPIO_WritePin>
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	50000400 	.word	0x50000400

080019d0 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	480a      	ldr	r0, [pc, #40]	; (8001a04 <tm1637_CLKlow+0x34>)
 80019da:	2200      	movs	r2, #0
 80019dc:	0019      	movs	r1, r3
 80019de:	f000 fdb4 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <tm1637_CLKlow+0x34>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	0019      	movs	r1, r3
 80019ec:	f000 fdad 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <tm1637_CLKlow+0x34>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	0019      	movs	r1, r3
 80019fa:	f000 fda6 	bl	800254a <HAL_GPIO_WritePin>
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	50000400 	.word	0x50000400

08001a08 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	480a      	ldr	r0, [pc, #40]	; (8001a3c <tm1637_SDOhigh+0x34>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	0019      	movs	r1, r3
 8001a16:	f000 fd98 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <tm1637_SDOhigh+0x34>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	0019      	movs	r1, r3
 8001a24:	f000 fd91 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <tm1637_SDOhigh+0x34>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	0019      	movs	r1, r3
 8001a32:	f000 fd8a 	bl	800254a <HAL_GPIO_WritePin>
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	50000400 	.word	0x50000400

08001a40 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <tm1637_SDOlow+0x34>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	f000 fd7c 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <tm1637_SDOlow+0x34>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	f000 fd75 	bl	800254a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <tm1637_SDOlow+0x34>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	0019      	movs	r1, r3
 8001a6a:	f000 fd6e 	bl	800254a <HAL_GPIO_WritePin>
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	50000400 	.word	0x50000400

08001a78 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8001a7c:	f7ff ff8c 	bl	8001998 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8001a80:	f7ff ffc2 	bl	8001a08 <tm1637_SDOhigh>
	tm1637_SDOlow();
 8001a84:	f7ff ffdc 	bl	8001a40 <tm1637_SDOlow>

	tm1637_CLKlow();
 8001a88:	f7ff ffa2 	bl	80019d0 <tm1637_CLKlow>
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 8001a96:	f7ff ff9b 	bl	80019d0 <tm1637_CLKlow>
	tm1637_SDOlow();
 8001a9a:	f7ff ffd1 	bl	8001a40 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8001a9e:	f7ff ff7b 	bl	8001998 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8001aa2:	f7ff ffb1 	bl	8001a08 <tm1637_SDOhigh>
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e01a      	b.n	8001af4 <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8001abe:	f7ff ff87 	bl	80019d0 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	18d3      	adds	r3, r2, r3
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 8001ad4:	f7ff ff98 	bl	8001a08 <tm1637_SDOhigh>
 8001ad8:	e001      	b.n	8001ade <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8001ada:	f7ff ffb1 	bl	8001a40 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8001ade:	f7ff ff5b 	bl	8001998 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	230f      	movs	r3, #15
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	ddde      	ble.n	8001abe <tm1637_DataOut+0x12>
	} 
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b004      	add	sp, #16
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8001b12:	230c      	movs	r3, #12
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001b1e:	2317      	movs	r3, #23
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e018      	b.n	8001b5a <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	2117      	movs	r1, #23
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	411a      	asrs	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	4193      	sbcs	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	0008      	movs	r0, r1
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	0011      	movs	r1, r2
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	18ba      	adds	r2, r7, r2
 8001b4e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	183b      	adds	r3, r7, r0
 8001b56:	3201      	adds	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	2317      	movs	r3, #23
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	d9e1      	bls.n	8001b28 <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8001b64:	f7ff ff88 	bl	8001a78 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8001b68:	230c      	movs	r3, #12
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff ff9d 	bl	8001aac <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8001b72:	f7ff ff2d 	bl	80019d0 <tm1637_CLKlow>
	tm1637_CLKhigh();
 8001b76:	f7ff ff0f 	bl	8001998 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8001b7a:	f000 f89f 	bl	8001cbc <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	001a      	movs	r2, r3
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	4013      	ands	r3, r2
 8001b88:	2bc0      	cmp	r3, #192	; 0xc0
 8001b8a:	d001      	beq.n	8001b90 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8001b8c:	f7ff ff81 	bl	8001a92 <tm1637_EndPacket>
	}

}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	000a      	movs	r2, r1
 8001ba2:	1cfb      	adds	r3, r7, #3
 8001ba4:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e037      	b.n	8001c2c <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8001bbc:	2316      	movs	r3, #22
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	e01c      	b.n	8001c00 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8001bc6:	2317      	movs	r3, #23
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	2116      	movs	r1, #22
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	411a      	asrs	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	4193      	sbcs	r3, r2
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	0008      	movs	r0, r1
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	0011      	movs	r1, r2
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	18ba      	adds	r2, r7, r2
 8001bf4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	3201      	adds	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	2316      	movs	r3, #22
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d9dd      	bls.n	8001bc6 <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7ff ff4c 	bl	8001aac <tm1637_DataOut>
		tm1637_CLKlow();
 8001c14:	f7ff fedc 	bl	80019d0 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8001c18:	f7ff febe 	bl	8001998 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 8001c1c:	f000 f84e 	bl	8001cbc <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 8001c20:	2117      	movs	r1, #23
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	3201      	adds	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	2317      	movs	r3, #23
 8001c2e:	18fa      	adds	r2, r7, r3
 8001c30:	1cfb      	adds	r3, r7, #3
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3c0      	bcc.n	8001bbc <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 8001c3a:	f7ff ff2a 	bl	8001a92 <tm1637_EndPacket>


}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b006      	add	sp, #24
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	0002      	movs	r2, r0
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8001c54:	240c      	movs	r4, #12
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	0018      	movs	r0, r3
 8001c5a:	2314      	movs	r3, #20
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	f004 fed6 	bl	8006a10 <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 8001c64:	0021      	movs	r1, r4
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	0052      	lsls	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <tm1637_Initialize+0x52>
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d114      	bne.n	8001cb0 <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <tm1637_Initialize+0x70>)
 8001c90:	0019      	movs	r1, r3
 8001c92:	0010      	movs	r0, r2
 8001c94:	f000 fabe 	bl	8002214 <HAL_GPIO_Init>
			break;
 8001c98:	e00a      	b.n	8001cb0 <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	210c      	movs	r1, #12
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <tm1637_Initialize+0x70>)
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	0010      	movs	r0, r2
 8001caa:	f000 fab3 	bl	8002214 <HAL_GPIO_Init>
			break;
 8001cae:	46c0      	nop			; (mov r8, r8)

	}

}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b009      	add	sp, #36	; 0x24
 8001cb6:	bd90      	pop	{r4, r7, pc}
 8001cb8:	50000c00 	.word	0x50000c00

08001cbc <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff ffc1 	bl	8001c48 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 8001cc6:	f7ff fe83 	bl	80019d0 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001cca:	e002      	b.n	8001cd2 <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff ffbb 	bl	8001c48 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <tm1637_ACKcheck+0x30>)
 8001cd8:	0019      	movs	r1, r3
 8001cda:	0010      	movs	r0, r2
 8001cdc:	f000 fc18 	bl	8002510 <HAL_GPIO_ReadPin>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d1f3      	bne.n	8001ccc <tm1637_ACKcheck+0x10>
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	50000400 	.word	0x50000400

08001cf0 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8001cfe:	210c      	movs	r1, #12
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <tm1637_DisplayHandle+0x78>)
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8001d08:	250f      	movs	r5, #15
 8001d0a:	197b      	adds	r3, r7, r5
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8001d10:	1dfb      	adds	r3, r7, #7
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b07      	cmp	r3, #7
 8001d16:	d81f      	bhi.n	8001d58 <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8001d1e:	000c      	movs	r4, r1
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff fef1 	bl	8001b0a <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8001d28:	0021      	movs	r1, r4
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	22c0      	movs	r2, #192	; 0xc0
 8001d2e:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff fee9 	bl	8001b0a <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff ff2b 	bl	8001b98 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 f810 	bl	8001d6c <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8001d4c:	197b      	adds	r3, r7, r5
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8001d52:	197b      	adds	r3, r7, r5
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	e002      	b.n	8001d5e <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	08006f28 	.word	0x08006f28

08001d6c <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	0002      	movs	r2, r0
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 8001d78:	230c      	movs	r3, #12
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8001d84:	2316      	movs	r3, #22
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b07      	cmp	r3, #7
 8001d92:	d83e      	bhi.n	8001e12 <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	1dfa      	adds	r2, r7, #7
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	2178      	movs	r1, #120	; 0x78
 8001d9c:	4249      	negs	r1, r1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8001da2:	2317      	movs	r3, #23
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e017      	b.n	8001ddc <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	2117      	movs	r1, #23
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	411a      	asrs	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	1e5a      	subs	r2, r3, #1
 8001dc0:	4193      	sbcs	r3, r2
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	0008      	movs	r0, r1
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	0011      	movs	r1, r2
 8001dcc:	220c      	movs	r2, #12
 8001dce:	18ba      	adds	r2, r7, r2
 8001dd0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	3201      	adds	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	d9e2      	bls.n	8001dac <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 8001de6:	f7ff fe47 	bl	8001a78 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 8001dea:	230c      	movs	r3, #12
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7ff fe5c 	bl	8001aac <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8001df4:	f7ff fdec 	bl	80019d0 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8001df8:	f7ff fdce 	bl	8001998 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8001dfc:	f7ff ff5e 	bl	8001cbc <tm1637_ACKcheck>
		tm1637_EndPacket();
 8001e00:	f7ff fe47 	bl	8001a92 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8001e04:	2116      	movs	r1, #22
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	e002      	b.n	8001e18 <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 8001e12:	2316      	movs	r3, #22
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	781b      	ldrb	r3, [r3, #0]
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b006      	add	sp, #24
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_Init+0x3c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Init+0x3c>)
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f000 f811 	bl	8001e60 <HAL_InitTick>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e001      	b.n	8001e4e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e4a:	f7fe ff29 	bl	8000ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e4e:	1dfb      	adds	r3, r7, #7
 8001e50:	781b      	ldrb	r3, [r3, #0]
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	40022000 	.word	0x40022000

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_InitTick+0x5c>)
 8001e6a:	681c      	ldr	r4, [r3, #0]
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_InitTick+0x60>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	0019      	movs	r1, r3
 8001e72:	23fa      	movs	r3, #250	; 0xfa
 8001e74:	0098      	lsls	r0, r3, #2
 8001e76:	f7fe f94f 	bl	8000118 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	0020      	movs	r0, r4
 8001e80:	f7fe f94a 	bl	8000118 <__udivsi3>
 8001e84:	0003      	movs	r3, r0
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f92f 	bl	80020ea <HAL_SYSTICK_Config>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e00f      	b.n	8001eb4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d80b      	bhi.n	8001eb2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f8fc 	bl	80020a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_InitTick+0x64>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b003      	add	sp, #12
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_IncTick+0x1c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	18d2      	adds	r2, r2, r3
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_IncTick+0x20>)
 8001eda:	601a      	str	r2, [r3, #0]
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000618 	.word	0x20000618

08001eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <HAL_GetTick+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	20000618 	.word	0x20000618

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff fff0 	bl	8001eec <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3301      	adds	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	001a      	movs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	189b      	adds	r3, r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	f7ff ffe0 	bl	8001eec <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b004      	add	sp, #16
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000008 	.word	0x20000008

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	0002      	movs	r2, r0
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b7f      	cmp	r3, #127	; 0x7f
 8001f5a:	d809      	bhi.n	8001f70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5c:	1dfb      	adds	r3, r7, #7
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	001a      	movs	r2, r3
 8001f62:	231f      	movs	r3, #31
 8001f64:	401a      	ands	r2, r3
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_EnableIRQ+0x30>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4091      	lsls	r1, r2
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
  }
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	0002      	movs	r2, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f90:	d828      	bhi.n	8001fe4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f92:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <__NVIC_SetPriority+0xd4>)
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	33c0      	adds	r3, #192	; 0xc0
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	589b      	ldr	r3, [r3, r2]
 8001fa2:	1dfa      	adds	r2, r7, #7
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	2203      	movs	r2, #3
 8001faa:	400a      	ands	r2, r1
 8001fac:	00d2      	lsls	r2, r2, #3
 8001fae:	21ff      	movs	r1, #255	; 0xff
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	43d2      	mvns	r2, r2
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	22ff      	movs	r2, #255	; 0xff
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2303      	movs	r3, #3
 8001fca:	4003      	ands	r3, r0
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd0:	481f      	ldr	r0, [pc, #124]	; (8002050 <__NVIC_SetPriority+0xd4>)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	33c0      	adds	r3, #192	; 0xc0
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fe2:	e031      	b.n	8002048 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <__NVIC_SetPriority+0xd8>)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	0019      	movs	r1, r3
 8001fec:	230f      	movs	r3, #15
 8001fee:	400b      	ands	r3, r1
 8001ff0:	3b08      	subs	r3, #8
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1dfa      	adds	r2, r7, #7
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	0011      	movs	r1, r2
 8002004:	2203      	movs	r2, #3
 8002006:	400a      	ands	r2, r1
 8002008:	00d2      	lsls	r2, r2, #3
 800200a:	21ff      	movs	r1, #255	; 0xff
 800200c:	4091      	lsls	r1, r2
 800200e:	000a      	movs	r2, r1
 8002010:	43d2      	mvns	r2, r2
 8002012:	401a      	ands	r2, r3
 8002014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	401a      	ands	r2, r3
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	2303      	movs	r3, #3
 8002026:	4003      	ands	r3, r0
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	4809      	ldr	r0, [pc, #36]	; (8002054 <__NVIC_SetPriority+0xd8>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	001c      	movs	r4, r3
 8002034:	230f      	movs	r3, #15
 8002036:	4023      	ands	r3, r4
 8002038:	3b08      	subs	r3, #8
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	430a      	orrs	r2, r1
 800203e:	3306      	adds	r3, #6
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	18c3      	adds	r3, r0, r3
 8002044:	3304      	adds	r3, #4
 8002046:	601a      	str	r2, [r3, #0]
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b003      	add	sp, #12
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	045b      	lsls	r3, r3, #17
 8002068:	429a      	cmp	r2, r3
 800206a:	d301      	bcc.n	8002070 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206c:	2301      	movs	r3, #1
 800206e:	e010      	b.n	8002092 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <SysTick_Config+0x44>)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	3a01      	subs	r2, #1
 8002076:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002078:	2301      	movs	r3, #1
 800207a:	425b      	negs	r3, r3
 800207c:	2103      	movs	r1, #3
 800207e:	0018      	movs	r0, r3
 8002080:	f7ff ff7c 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x44>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x44>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	210f      	movs	r1, #15
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	1c02      	adds	r2, r0, #0
 80020b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	0011      	movs	r1, r2
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff ff5d 	bl	8001f7c <__NVIC_SetPriority>
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b004      	add	sp, #16
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	0002      	movs	r2, r0
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	b25b      	sxtb	r3, r3
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff ff33 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff ffaf 	bl	8002058 <SysTick_Config>
 80020fa:	0003      	movs	r3, r0
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	230f      	movs	r3, #15
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2225      	movs	r2, #37	; 0x25
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2204      	movs	r2, #4
 8002124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2224      	movs	r2, #36	; 0x24
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e024      	b.n	800217c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	210e      	movs	r1, #14
 800213e:	438a      	bics	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	438a      	bics	r2, r1
 8002150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	221c      	movs	r2, #28
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2101      	movs	r1, #1
 8002160:	4091      	lsls	r1, r2
 8002162:	000a      	movs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2225      	movs	r2, #37	; 0x25
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2224      	movs	r2, #36	; 0x24
 8002172:	2100      	movs	r1, #0
 8002174:	5499      	strb	r1, [r3, r2]

    return status;
 8002176:	230f      	movs	r3, #15
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	210f      	movs	r1, #15
 800218e:	187b      	adds	r3, r7, r1
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2225      	movs	r2, #37	; 0x25
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d006      	beq.n	80021ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2204      	movs	r2, #4
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e02a      	b.n	8002204 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	210e      	movs	r1, #14
 80021ba:	438a      	bics	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	438a      	bics	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	221c      	movs	r2, #28
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2101      	movs	r1, #1
 80021dc:	4091      	lsls	r1, r2
 80021de:	000a      	movs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2225      	movs	r2, #37	; 0x25
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2224      	movs	r2, #36	; 0x24
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	0010      	movs	r0, r2
 8002202:	4798      	blx	r3
    }
  }
  return status;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800222a:	e155      	b.n	80024d8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4091      	lsls	r1, r2
 8002236:	000a      	movs	r2, r1
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d100      	bne.n	8002244 <HAL_GPIO_Init+0x30>
 8002242:	e146      	b.n	80024d2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	4013      	ands	r3, r2
 800224c:	2b01      	cmp	r3, #1
 800224e:	d005      	beq.n	800225c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002258:	2b02      	cmp	r3, #2
 800225a:	d130      	bne.n	80022be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	409a      	lsls	r2, r3
 800226a:	0013      	movs	r3, r2
 800226c:	43da      	mvns	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	409a      	lsls	r2, r3
 800227e:	0013      	movs	r3, r2
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002292:	2201      	movs	r2, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	43da      	mvns	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	2201      	movs	r2, #1
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d017      	beq.n	80022fa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	43da      	mvns	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	0013      	movs	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2203      	movs	r2, #3
 8002300:	4013      	ands	r3, r2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d123      	bne.n	800234e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	58d3      	ldr	r3, [r2, r3]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2207      	movs	r2, #7
 8002318:	4013      	ands	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	43da      	mvns	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2107      	movs	r1, #7
 8002332:	400b      	ands	r3, r1
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	08da      	lsrs	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3208      	adds	r2, #8
 8002348:	0092      	lsls	r2, r2, #2
 800234a:	6939      	ldr	r1, [r7, #16]
 800234c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	43da      	mvns	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2203      	movs	r2, #3
 800236c:	401a      	ands	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	409a      	lsls	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	23c0      	movs	r3, #192	; 0xc0
 8002388:	029b      	lsls	r3, r3, #10
 800238a:	4013      	ands	r3, r2
 800238c:	d100      	bne.n	8002390 <HAL_GPIO_Init+0x17c>
 800238e:	e0a0      	b.n	80024d2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_GPIO_Init+0x2dc>)
 8002392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_GPIO_Init+0x2dc>)
 8002396:	2101      	movs	r1, #1
 8002398:	430a      	orrs	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800239c:	4a55      	ldr	r2, [pc, #340]	; (80024f4 <HAL_GPIO_Init+0x2e0>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	589b      	ldr	r3, [r3, r2]
 80023a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4013      	ands	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	409a      	lsls	r2, r3
 80023b6:	0013      	movs	r3, r2
 80023b8:	43da      	mvns	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	23a0      	movs	r3, #160	; 0xa0
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x1f6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4a      	ldr	r2, [pc, #296]	; (80024f8 <HAL_GPIO_Init+0x2e4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x1f2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a49      	ldr	r2, [pc, #292]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a48      	ldr	r2, [pc, #288]	; (8002500 <HAL_GPIO_Init+0x2ec>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x1ea>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a47      	ldr	r2, [pc, #284]	; (8002504 <HAL_GPIO_Init+0x2f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x1e6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a46      	ldr	r2, [pc, #280]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x1e2>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e00a      	b.n	800240c <HAL_GPIO_Init+0x1f8>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x1f8>
 80023fa:	2304      	movs	r3, #4
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x1f8>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x1f8>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x1f8>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x1f8>
 800240a:	2300      	movs	r3, #0
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	2103      	movs	r1, #3
 8002410:	400a      	ands	r2, r1
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	; (80024f4 <HAL_GPIO_Init+0x2e0>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_GPIO_Init+0x2f8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43da      	mvns	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	035b      	lsls	r3, r3, #13
 8002442:	4013      	ands	r3, r2
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_GPIO_Init+0x2f8>)
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x2f8>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43da      	mvns	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	039b      	lsls	r3, r3, #14
 800246c:	4013      	ands	r3, r2
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_GPIO_Init+0x2f8>)
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x2f8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43da      	mvns	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	029b      	lsls	r3, r3, #10
 8002496:	4013      	ands	r3, r2
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43da      	mvns	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	025b      	lsls	r3, r3, #9
 80024c0:	4013      	ands	r3, r2
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	40da      	lsrs	r2, r3
 80024e0:	1e13      	subs	r3, r2, #0
 80024e2:	d000      	beq.n	80024e6 <HAL_GPIO_Init+0x2d2>
 80024e4:	e6a2      	b.n	800222c <HAL_GPIO_Init+0x18>
  }
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b006      	add	sp, #24
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000
 80024f8:	50000400 	.word	0x50000400
 80024fc:	50000800 	.word	0x50000800
 8002500:	50000c00 	.word	0x50000c00
 8002504:	50001000 	.word	0x50001000
 8002508:	50001c00 	.word	0x50001c00
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	000a      	movs	r2, r1
 800251a:	1cbb      	adds	r3, r7, #2
 800251c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	1cba      	adds	r2, r7, #2
 8002524:	8812      	ldrh	r2, [r2, #0]
 8002526:	4013      	ands	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800252a:	230f      	movs	r3, #15
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	e003      	b.n	800253c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002534:	230f      	movs	r3, #15
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800253c:	230f      	movs	r3, #15
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	781b      	ldrb	r3, [r3, #0]
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	0008      	movs	r0, r1
 8002554:	0011      	movs	r1, r2
 8002556:	1cbb      	adds	r3, r7, #2
 8002558:	1c02      	adds	r2, r0, #0
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	1c7b      	adds	r3, r7, #1
 800255e:	1c0a      	adds	r2, r1, #0
 8002560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002562:	1c7b      	adds	r3, r7, #1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	1cbb      	adds	r3, r7, #2
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002572:	e003      	b.n	800257c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002574:	1cbb      	adds	r3, r7, #2
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f000 fbbf 	bl	8002d16 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002598:	4bc9      	ldr	r3, [pc, #804]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	220c      	movs	r2, #12
 800259e:	4013      	ands	r3, r2
 80025a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a2:	4bc7      	ldr	r3, [pc, #796]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x36>
 80025b8:	e07e      	b.n	80026b8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d007      	beq.n	80025d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d112      	bne.n	80025ec <HAL_RCC_OscConfig+0x68>
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	025b      	lsls	r3, r3, #9
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d10d      	bne.n	80025ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	4bbb      	ldr	r3, [pc, #748]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	029b      	lsls	r3, r3, #10
 80025d8:	4013      	ands	r3, r2
 80025da:	d100      	bne.n	80025de <HAL_RCC_OscConfig+0x5a>
 80025dc:	e06b      	b.n	80026b6 <HAL_RCC_OscConfig+0x132>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d167      	bne.n	80026b6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f000 fb95 	bl	8002d16 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x84>
 80025f8:	4bb1      	ldr	r3, [pc, #708]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4bb0      	ldr	r3, [pc, #704]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0249      	lsls	r1, r1, #9
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e027      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	23a0      	movs	r3, #160	; 0xa0
 800260e:	02db      	lsls	r3, r3, #11
 8002610:	429a      	cmp	r2, r3
 8002612:	d10e      	bne.n	8002632 <HAL_RCC_OscConfig+0xae>
 8002614:	4baa      	ldr	r3, [pc, #680]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4ba9      	ldr	r3, [pc, #676]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	02c9      	lsls	r1, r1, #11
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	4ba7      	ldr	r3, [pc, #668]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4ba6      	ldr	r3, [pc, #664]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	0249      	lsls	r1, r1, #9
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e012      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4ba2      	ldr	r3, [pc, #648]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002638:	49a2      	ldr	r1, [pc, #648]	; (80028c4 <HAL_RCC_OscConfig+0x340>)
 800263a:	400a      	ands	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	4ba0      	ldr	r3, [pc, #640]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4b9c      	ldr	r3, [pc, #624]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b9b      	ldr	r3, [pc, #620]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002652:	499d      	ldr	r1, [pc, #628]	; (80028c8 <HAL_RCC_OscConfig+0x344>)
 8002654:	400a      	ands	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d015      	beq.n	800268c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fc44 	bl	8001eec <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002668:	e009      	b.n	800267e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266a:	f7ff fc3f 	bl	8001eec <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d902      	bls.n	800267e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	f000 fb4c 	bl	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800267e:	4b90      	ldr	r3, [pc, #576]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	029b      	lsls	r3, r3, #10
 8002686:	4013      	ands	r3, r2
 8002688:	d0ef      	beq.n	800266a <HAL_RCC_OscConfig+0xe6>
 800268a:	e015      	b.n	80026b8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff fc2e 	bl	8001eec <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002696:	f7ff fc29 	bl	8001eec <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e336      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026a8:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	029b      	lsls	r3, r3, #10
 80026b0:	4013      	ands	r3, r2
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x112>
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2202      	movs	r2, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_RCC_OscConfig+0x140>
 80026c2:	e099      	b.n	80027f8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	2220      	movs	r2, #32
 80026ce:	4013      	ands	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80026d2:	4b7b      	ldr	r3, [pc, #492]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80026d8:	2120      	movs	r1, #32
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2220      	movs	r2, #32
 80026e2:	4393      	bics	r3, r2
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d13e      	bne.n	8002770 <HAL_RCC_OscConfig+0x1ec>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d13b      	bne.n	8002770 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80026f8:	4b71      	ldr	r3, [pc, #452]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2204      	movs	r2, #4
 80026fe:	4013      	ands	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_RCC_OscConfig+0x188>
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e304      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x348>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	021a      	lsls	r2, r3, #8
 800271c:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2209      	movs	r2, #9
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800272e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002734:	f000 fc42 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002738:	0001      	movs	r1, r0
 800273a:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	220f      	movs	r2, #15
 8002742:	4013      	ands	r3, r2
 8002744:	4a62      	ldr	r2, [pc, #392]	; (80028d0 <HAL_RCC_OscConfig+0x34c>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	000a      	movs	r2, r1
 800274a:	40da      	lsrs	r2, r3
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCC_OscConfig+0x350>)
 800274e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002750:	4b61      	ldr	r3, [pc, #388]	; (80028d8 <HAL_RCC_OscConfig+0x354>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2513      	movs	r5, #19
 8002756:	197c      	adds	r4, r7, r5
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff fb81 	bl	8001e60 <HAL_InitTick>
 800275e:	0003      	movs	r3, r0
 8002760:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002762:	197b      	adds	r3, r7, r5
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d046      	beq.n	80027f8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800276a:	197b      	adds	r3, r7, r5
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	e2d2      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d027      	beq.n	80027c6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002776:	4b52      	ldr	r3, [pc, #328]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2209      	movs	r2, #9
 800277c:	4393      	bics	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fbb0 	bl	8001eec <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002792:	f7ff fbab 	bl	8001eec <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e2b8      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2204      	movs	r2, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	d0f1      	beq.n	8002792 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a46      	ldr	r2, [pc, #280]	; (80028cc <HAL_RCC_OscConfig+0x348>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	e018      	b.n	80027f8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	438a      	bics	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff fb8b 	bl	8001eec <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7ff fb86 	bl	8001eec <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e293      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d1f1      	bne.n	80027dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2210      	movs	r2, #16
 80027fe:	4013      	ands	r3, r2
 8002800:	d100      	bne.n	8002804 <HAL_RCC_OscConfig+0x280>
 8002802:	e0a2      	b.n	800294a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d140      	bne.n	800288c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4013      	ands	r3, r2
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x29e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e279      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002822:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_RCC_OscConfig+0x358>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002836:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	0a19      	lsrs	r1, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	061a      	lsls	r2, r3, #24
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	0b5b      	lsrs	r3, r3, #13
 8002850:	3301      	adds	r3, #1
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	0212      	lsls	r2, r2, #8
 8002856:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	210f      	movs	r1, #15
 8002860:	400b      	ands	r3, r1
 8002862:	491b      	ldr	r1, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x34c>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_OscConfig+0x350>)
 800286a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_RCC_OscConfig+0x354>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2513      	movs	r5, #19
 8002872:	197c      	adds	r4, r7, r5
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff faf3 	bl	8001e60 <HAL_InitTick>
 800287a:	0003      	movs	r3, r0
 800287c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800287e:	197b      	adds	r3, r7, r5
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d061      	beq.n	800294a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002886:	197b      	adds	r3, r7, r5
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	e244      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d040      	beq.n	8002916 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_OscConfig+0x33c>)
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	0049      	lsls	r1, r1, #1
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff fb23 	bl	8001eec <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028aa:	e019      	b.n	80028e0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ac:	f7ff fb1e 	bl	8001eec <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d912      	bls.n	80028e0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e22b      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40021000 	.word	0x40021000
 80028c4:	fffeffff 	.word	0xfffeffff
 80028c8:	fffbffff 	.word	0xfffbffff
 80028cc:	ffffe0ff 	.word	0xffffe0ff
 80028d0:	08006f2c 	.word	0x08006f2c
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004
 80028dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028e0:	4bca      	ldr	r3, [pc, #808]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d0df      	beq.n	80028ac <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ec:	4bc7      	ldr	r3, [pc, #796]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4ac7      	ldr	r2, [pc, #796]	; (8002c10 <HAL_RCC_OscConfig+0x68c>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fa:	4bc4      	ldr	r3, [pc, #784]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002900:	4bc2      	ldr	r3, [pc, #776]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	0a19      	lsrs	r1, r3, #8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	061a      	lsls	r2, r3, #24
 800290e:	4bbf      	ldr	r3, [pc, #764]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	e019      	b.n	800294a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002916:	4bbd      	ldr	r3, [pc, #756]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4bbc      	ldr	r3, [pc, #752]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 800291c:	49bd      	ldr	r1, [pc, #756]	; (8002c14 <HAL_RCC_OscConfig+0x690>)
 800291e:	400a      	ands	r2, r1
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7ff fae3 	bl	8001eec <HAL_GetTick>
 8002926:	0003      	movs	r3, r0
 8002928:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800292c:	f7ff fade 	bl	8001eec <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1eb      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800293e:	4bb3      	ldr	r3, [pc, #716]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4013      	ands	r3, r2
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2208      	movs	r2, #8
 8002950:	4013      	ands	r3, r2
 8002952:	d036      	beq.n	80029c2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d019      	beq.n	8002990 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295c:	4bab      	ldr	r3, [pc, #684]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 800295e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002960:	4baa      	ldr	r3, [pc, #680]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002962:	2101      	movs	r1, #1
 8002964:	430a      	orrs	r2, r1
 8002966:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7ff fac0 	bl	8001eec <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002972:	f7ff fabb 	bl	8001eec <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1c8      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002984:	4ba1      	ldr	r3, [pc, #644]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d0f1      	beq.n	8002972 <HAL_RCC_OscConfig+0x3ee>
 800298e:	e018      	b.n	80029c2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b9e      	ldr	r3, [pc, #632]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002994:	4b9d      	ldr	r3, [pc, #628]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002996:	2101      	movs	r1, #1
 8002998:	438a      	bics	r2, r1
 800299a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7ff faa6 	bl	8001eec <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a6:	f7ff faa1 	bl	8001eec <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1ae      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b8:	4b94      	ldr	r3, [pc, #592]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 80029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	d1f1      	bne.n	80029a6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2204      	movs	r2, #4
 80029c8:	4013      	ands	r3, r2
 80029ca:	d100      	bne.n	80029ce <HAL_RCC_OscConfig+0x44a>
 80029cc:	e0ae      	b.n	8002b2c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2023      	movs	r0, #35	; 0x23
 80029d0:	183b      	adds	r3, r7, r0
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b8d      	ldr	r3, [pc, #564]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 80029d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	055b      	lsls	r3, r3, #21
 80029de:	4013      	ands	r3, r2
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	4b8a      	ldr	r3, [pc, #552]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 80029e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e6:	4b89      	ldr	r3, [pc, #548]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	0549      	lsls	r1, r1, #21
 80029ec:	430a      	orrs	r2, r1
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x694>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4013      	ands	r3, r2
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4b85      	ldr	r3, [pc, #532]	; (8002c18 <HAL_RCC_OscConfig+0x694>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b84      	ldr	r3, [pc, #528]	; (8002c18 <HAL_RCC_OscConfig+0x694>)
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	0049      	lsls	r1, r1, #1
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a10:	f7ff fa6c 	bl	8001eec <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7ff fa67 	bl	8001eec <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e174      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x694>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4d0>
 8002a44:	4b71      	ldr	r3, [pc, #452]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a48:	4b70      	ldr	r3, [pc, #448]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a4a:	2180      	movs	r1, #128	; 0x80
 8002a4c:	0049      	lsls	r1, r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	651a      	str	r2, [r3, #80]	; 0x50
 8002a52:	e031      	b.n	8002ab8 <HAL_RCC_OscConfig+0x534>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x4f2>
 8002a5c:	4b6b      	ldr	r3, [pc, #428]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a62:	496c      	ldr	r1, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x690>)
 8002a64:	400a      	ands	r2, r1
 8002a66:	651a      	str	r2, [r3, #80]	; 0x50
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a6c:	4b67      	ldr	r3, [pc, #412]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a6e:	496b      	ldr	r1, [pc, #428]	; (8002c1c <HAL_RCC_OscConfig+0x698>)
 8002a70:	400a      	ands	r2, r1
 8002a72:	651a      	str	r2, [r3, #80]	; 0x50
 8002a74:	e020      	b.n	8002ab8 <HAL_RCC_OscConfig+0x534>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	23a0      	movs	r3, #160	; 0xa0
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d10e      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x51c>
 8002a82:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a86:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	00c9      	lsls	r1, r1, #3
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a90:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a94:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0049      	lsls	r1, r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x534>
 8002aa0:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002aa6:	495b      	ldr	r1, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x690>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8002aac:	4b57      	ldr	r3, [pc, #348]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab0:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002ab2:	495a      	ldr	r1, [pc, #360]	; (8002c1c <HAL_RCC_OscConfig+0x698>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7ff fa14 	bl	8001eec <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac8:	e009      	b.n	8002ade <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7ff fa0f 	bl	8001eec <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_RCC_OscConfig+0x69c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e11b      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d0ef      	beq.n	8002aca <HAL_RCC_OscConfig+0x546>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7ff f9fe 	bl	8001eec <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002af4:	e009      	b.n	8002b0a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7ff f9f9 	bl	8001eec <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	4a47      	ldr	r2, [pc, #284]	; (8002c20 <HAL_RCC_OscConfig+0x69c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e105      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4013      	ands	r3, r2
 8002b14:	d1ef      	bne.n	8002af6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b16:	2323      	movs	r3, #35	; 0x23
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b20:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b24:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b26:	493f      	ldr	r1, [pc, #252]	; (8002c24 <HAL_RCC_OscConfig+0x6a0>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2220      	movs	r2, #32
 8002b32:	4013      	ands	r3, r2
 8002b34:	d049      	beq.n	8002bca <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d026      	beq.n	8002b8c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	430a      	orrs	r2, r1
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
 8002b56:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <HAL_RCC_OscConfig+0x6a4>)
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_RCC_OscConfig+0x6a4>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0189      	lsls	r1, r1, #6
 8002b60:	430a      	orrs	r2, r1
 8002b62:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff f9c2 	bl	8001eec <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b6e:	f7ff f9bd 	bl	8001eec <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0ca      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2202      	movs	r2, #2
 8002b86:	4013      	ands	r3, r2
 8002b88:	d0f1      	beq.n	8002b6e <HAL_RCC_OscConfig+0x5ea>
 8002b8a:	e01e      	b.n	8002bca <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002b92:	2101      	movs	r1, #1
 8002b94:	438a      	bics	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <HAL_RCC_OscConfig+0x6a4>)
 8002b9a:	6a1a      	ldr	r2, [r3, #32]
 8002b9c:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_RCC_OscConfig+0x6a4>)
 8002b9e:	4923      	ldr	r1, [pc, #140]	; (8002c2c <HAL_RCC_OscConfig+0x6a8>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff f9a2 	bl	8001eec <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bae:	f7ff f99d 	bl	8001eec <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0aa      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d1f1      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d100      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x650>
 8002bd2:	e09f      	b.n	8002d14 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d100      	bne.n	8002bdc <HAL_RCC_OscConfig+0x658>
 8002bda:	e078      	b.n	8002cce <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d159      	bne.n	8002c98 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_RCC_OscConfig+0x688>)
 8002bea:	4911      	ldr	r1, [pc, #68]	; (8002c30 <HAL_RCC_OscConfig+0x6ac>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f97c 	bl	8001eec <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff f977 	bl	8001eec <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d915      	bls.n	8002c34 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e084      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	ffff1fff 	.word	0xffff1fff
 8002c14:	fffffeff 	.word	0xfffffeff
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	fffffbff 	.word	0xfffffbff
 8002c20:	00001388 	.word	0x00001388
 8002c24:	efffffff 	.word	0xefffffff
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	ffffdfff 	.word	0xffffdfff
 8002c30:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c34:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	049b      	lsls	r3, r3, #18
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d1dc      	bne.n	8002bfa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a37      	ldr	r2, [pc, #220]	; (8002d24 <HAL_RCC_OscConfig+0x7a0>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c66:	2180      	movs	r1, #128	; 0x80
 8002c68:	0449      	lsls	r1, r1, #17
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7ff f93d 	bl	8001eec <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7ff f938 	bl	8001eec <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e045      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	049b      	lsls	r3, r3, #18
 8002c92:	4013      	ands	r3, r2
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x6f4>
 8002c96:	e03d      	b.n	8002d14 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002c9e:	4922      	ldr	r1, [pc, #136]	; (8002d28 <HAL_RCC_OscConfig+0x7a4>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7ff f922 	bl	8001eec <HAL_GetTick>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f91d 	bl	8001eec <HAL_GetTick>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e02a      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	049b      	lsls	r3, r3, #18
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x72a>
 8002ccc:	e022      	b.n	8002d14 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e01d      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x79c>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d10f      	bne.n	8002d10 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	23f0      	movs	r3, #240	; 0xf0
 8002cf4:	039b      	lsls	r3, r3, #14
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	23c0      	movs	r3, #192	; 0xc0
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	401a      	ands	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b00a      	add	sp, #40	; 0x28
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40021000 	.word	0x40021000
 8002d24:	ff02ffff 	.word	0xff02ffff
 8002d28:	feffffff 	.word	0xfeffffff

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e128      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b96      	ldr	r3, [pc, #600]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d91e      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b93      	ldr	r3, [pc, #588]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4393      	bics	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	4b90      	ldr	r3, [pc, #576]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d60:	f7ff f8c4 	bl	8001eec <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d68:	e009      	b.n	8002d7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6a:	f7ff f8bf 	bl	8001eec <HAL_GetTick>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	4a8a      	ldr	r2, [pc, #552]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e109      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b87      	ldr	r3, [pc, #540]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2202      	movs	r2, #2
 8002d92:	4013      	ands	r3, r2
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d96:	4b83      	ldr	r3, [pc, #524]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	22f0      	movs	r2, #240	; 0xf0
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	0019      	movs	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002da6:	430a      	orrs	r2, r1
 8002da8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	d100      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
 8002db4:	e089      	b.n	8002eca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dbe:	4b79      	ldr	r3, [pc, #484]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d120      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0e1      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dd6:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	049b      	lsls	r3, r3, #18
 8002dde:	4013      	ands	r3, r2
 8002de0:	d114      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0d5      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2204      	movs	r2, #4
 8002df4:	4013      	ands	r3, r2
 8002df6:	d109      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0ca      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dfc:	4b69      	ldr	r3, [pc, #420]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0c2      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0c:	4b65      	ldr	r3, [pc, #404]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2203      	movs	r2, #3
 8002e12:	4393      	bics	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e20:	f7ff f864 	bl	8001eec <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d111      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e32:	f7ff f85b 	bl	8001eec <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0a5      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e46:	4b57      	ldr	r3, [pc, #348]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d1ef      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x106>
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d111      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5c:	e009      	b.n	8002e72 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5e:	f7ff f845 	bl	8001eec <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	4a4d      	ldr	r2, [pc, #308]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e08f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	220c      	movs	r2, #12
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d1ef      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x132>
 8002e7e:	e024      	b.n	8002eca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d11b      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8a:	f7ff f82f 	bl	8001eec <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	4a42      	ldr	r2, [pc, #264]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e079      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d1ef      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x15e>
 8002eaa:	e00e      	b.n	8002eca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7ff f81e 	bl	8001eec <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e068      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ec0:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	220c      	movs	r2, #12
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eca:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d21e      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed8:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4393      	bics	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eea:	f7fe ffff 	bl	8001eec <HAL_GetTick>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	e009      	b.n	8002f08 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fe fffa 	bl	8001eec <HAL_GetTick>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e044      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_ClockConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d009      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <HAL_RCC_ClockConfig+0x27c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a1a      	ldr	r2, [pc, #104]	; (8002fac <HAL_RCC_ClockConfig+0x280>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	00da      	lsls	r2, r3, #3
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002f50:	430a      	orrs	r2, r1
 8002f52:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f54:	f000 f832 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f58:	0001      	movs	r1, r0
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x278>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	220f      	movs	r2, #15
 8002f62:	4013      	ands	r3, r2
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <HAL_RCC_ClockConfig+0x284>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	000a      	movs	r2, r1
 8002f6a:	40da      	lsrs	r2, r3
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_RCC_ClockConfig+0x288>)
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_ClockConfig+0x28c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	250b      	movs	r5, #11
 8002f76:	197c      	adds	r4, r7, r5
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7fe ff71 	bl	8001e60 <HAL_InitTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f82:	197b      	adds	r3, r7, r5
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002f8a:	197b      	adds	r3, r7, r5
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b004      	add	sp, #16
 8002f98:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	00001388 	.word	0x00001388
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	fffff8ff 	.word	0xfffff8ff
 8002fac:	ffffc7ff 	.word	0xffffc7ff
 8002fb0:	08006f2c 	.word	0x08006f2c
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b5b0      	push	{r4, r5, r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	230c      	movs	r3, #12
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d014      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x40>
 8002fd2:	d900      	bls.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x1a>
 8002fd4:	e07b      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x112>
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x24>
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fde:	e076      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002fe0:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d002      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002fea:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002fee:	e07c      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <HAL_RCC_GetSysClockFreq+0x140>)
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ff4:	e079      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ff6:	4b42      	ldr	r3, [pc, #264]	; (8003100 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ffa:	e076      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	0c9a      	lsrs	r2, r3, #18
 8003000:	230f      	movs	r3, #15
 8003002:	401a      	ands	r2, r3
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_GetSysClockFreq+0x148>)
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	0d9a      	lsrs	r2, r3, #22
 800300e:	2303      	movs	r3, #3
 8003010:	4013      	ands	r3, r2
 8003012:	3301      	adds	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	025b      	lsls	r3, r3, #9
 800301e:	4013      	ands	r3, r2
 8003020:	d01a      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	4a35      	ldr	r2, [pc, #212]	; (8003100 <HAL_RCC_GetSysClockFreq+0x144>)
 800302c:	2300      	movs	r3, #0
 800302e:	69b8      	ldr	r0, [r7, #24]
 8003030:	69f9      	ldr	r1, [r7, #28]
 8003032:	f7fd f91d 	bl	8000270 <__aeabi_lmul>
 8003036:	0002      	movs	r2, r0
 8003038:	000b      	movs	r3, r1
 800303a:	0010      	movs	r0, r2
 800303c:	0019      	movs	r1, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f7fd f8f1 	bl	8000230 <__aeabi_uldivmod>
 800304e:	0002      	movs	r2, r0
 8003050:	000b      	movs	r3, r1
 8003052:	0013      	movs	r3, r2
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
 8003056:	e037      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003058:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2210      	movs	r2, #16
 800305e:	4013      	ands	r3, r2
 8003060:	d01a      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800306c:	2300      	movs	r3, #0
 800306e:	68b8      	ldr	r0, [r7, #8]
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	f7fd f8fd 	bl	8000270 <__aeabi_lmul>
 8003076:	0002      	movs	r2, r0
 8003078:	000b      	movs	r3, r1
 800307a:	0010      	movs	r0, r2
 800307c:	0019      	movs	r1, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f7fd f8d1 	bl	8000230 <__aeabi_uldivmod>
 800308e:	0002      	movs	r2, r0
 8003090:	000b      	movs	r3, r1
 8003092:	0013      	movs	r3, r2
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
 8003096:	e017      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	0018      	movs	r0, r3
 800309c:	2300      	movs	r3, #0
 800309e:	0019      	movs	r1, r3
 80030a0:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_RCC_GetSysClockFreq+0x140>)
 80030a2:	2300      	movs	r3, #0
 80030a4:	f7fd f8e4 	bl	8000270 <__aeabi_lmul>
 80030a8:	0002      	movs	r2, r0
 80030aa:	000b      	movs	r3, r1
 80030ac:	0010      	movs	r0, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	001c      	movs	r4, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	001d      	movs	r5, r3
 80030b8:	0022      	movs	r2, r4
 80030ba:	002b      	movs	r3, r5
 80030bc:	f7fd f8b8 	bl	8000230 <__aeabi_uldivmod>
 80030c0:	0002      	movs	r2, r0
 80030c2:	000b      	movs	r3, r1
 80030c4:	0013      	movs	r3, r2
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030cc:	e00d      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0b5b      	lsrs	r3, r3, #13
 80030d4:	2207      	movs	r2, #7
 80030d6:	4013      	ands	r3, r2
 80030d8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	3301      	adds	r3, #1
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	0212      	lsls	r2, r2, #8
 80030e2:	409a      	lsls	r2, r3
 80030e4:	0013      	movs	r3, r2
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030e8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b00e      	add	sp, #56	; 0x38
 80030f2:	bdb0      	pop	{r4, r5, r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	003d0900 	.word	0x003d0900
 80030fc:	00f42400 	.word	0x00f42400
 8003100:	007a1200 	.word	0x007a1200
 8003104:	08006f44 	.word	0x08006f44

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800310c:	4b02      	ldr	r3, [pc, #8]	; (8003118 <HAL_RCC_GetHCLKFreq+0x10>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	20000000 	.word	0x20000000

0800311c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003120:	f7ff fff2 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003124:	0001      	movs	r1, r0
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	2207      	movs	r2, #7
 800312e:	4013      	ands	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	40d9      	lsrs	r1, r3
 8003136:	000b      	movs	r3, r1
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	40021000 	.word	0x40021000
 8003144:	08006f3c 	.word	0x08006f3c

08003148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800314c:	f7ff ffdc 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003150:	0001      	movs	r1, r0
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	0adb      	lsrs	r3, r3, #11
 8003158:	2207      	movs	r2, #7
 800315a:	4013      	ands	r3, r2
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	40d9      	lsrs	r1, r3
 8003162:	000b      	movs	r3, r1
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40021000 	.word	0x40021000
 8003170:	08006f3c 	.word	0x08006f3c

08003174 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800317c:	2317      	movs	r3, #23
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2220      	movs	r2, #32
 800318a:	4013      	ands	r3, r2
 800318c:	d106      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	4013      	ands	r3, r2
 8003198:	d100      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800319a:	e104      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319c:	4bb9      	ldr	r3, [pc, #740]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800319e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	055b      	lsls	r3, r3, #21
 80031a4:	4013      	ands	r3, r2
 80031a6:	d10a      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4bb6      	ldr	r3, [pc, #728]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ac:	4bb5      	ldr	r3, [pc, #724]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	0549      	lsls	r1, r1, #21
 80031b2:	430a      	orrs	r2, r1
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031b6:	2317      	movs	r3, #23
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4bb2      	ldr	r3, [pc, #712]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d11a      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4baf      	ldr	r3, [pc, #700]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4bae      	ldr	r3, [pc, #696]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	0049      	lsls	r1, r1, #1
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d8:	f7fe fe88 	bl	8001eec <HAL_GetTick>
 80031dc:	0003      	movs	r3, r0
 80031de:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe fe83 	bl	8001eec <HAL_GetTick>
 80031e6:	0002      	movs	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e143      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4ba4      	ldr	r3, [pc, #656]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003200:	4ba0      	ldr	r3, [pc, #640]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	23c0      	movs	r3, #192	; 0xc0
 8003206:	039b      	lsls	r3, r3, #14
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	039b      	lsls	r3, r3, #14
 8003214:	4013      	ands	r3, r2
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	23c0      	movs	r3, #192	; 0xc0
 8003222:	039b      	lsls	r3, r3, #14
 8003224:	4013      	ands	r3, r2
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d013      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	23c0      	movs	r3, #192	; 0xc0
 8003232:	029b      	lsls	r3, r3, #10
 8003234:	401a      	ands	r2, r3
 8003236:	23c0      	movs	r3, #192	; 0xc0
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	429a      	cmp	r2, r3
 800323c:	d10a      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800323e:	4b91      	ldr	r3, [pc, #580]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	401a      	ands	r2, r3
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	029b      	lsls	r3, r3, #10
 800324c:	429a      	cmp	r2, r3
 800324e:	d101      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e113      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003254:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003258:	23c0      	movs	r3, #192	; 0xc0
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d049      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	23c0      	movs	r3, #192	; 0xc0
 800326c:	029b      	lsls	r3, r3, #10
 800326e:	4013      	ands	r3, r2
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	429a      	cmp	r2, r3
 8003274:	d004      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2220      	movs	r2, #32
 800327c:	4013      	ands	r3, r2
 800327e:	d10d      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	23c0      	movs	r3, #192	; 0xc0
 8003286:	029b      	lsls	r3, r3, #10
 8003288:	4013      	ands	r3, r2
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	429a      	cmp	r2, r3
 800328e:	d034      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d02e      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a0:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a6:	4b77      	ldr	r3, [pc, #476]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	0309      	lsls	r1, r1, #12
 80032b0:	430a      	orrs	r2, r1
 80032b2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b4:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b8:	4b72      	ldr	r3, [pc, #456]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032ba:	4975      	ldr	r1, [pc, #468]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80032bc:	400a      	ands	r2, r1
 80032be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80032c0:	4b70      	ldr	r3, [pc, #448]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4013      	ands	r3, r2
 80032ce:	d014      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fe0c 	bl	8001eec <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032d8:	e009      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe fe07 	bl	8001eec <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	4a6b      	ldr	r2, [pc, #428]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0c6      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ee:	4b65      	ldr	r3, [pc, #404]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4013      	ands	r3, r2
 80032f8:	d0ef      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	4013      	ands	r3, r2
 8003304:	d01f      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	23c0      	movs	r3, #192	; 0xc0
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	401a      	ands	r2, r3
 8003310:	23c0      	movs	r3, #192	; 0xc0
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	429a      	cmp	r2, r3
 8003316:	d10c      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003318:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a5e      	ldr	r2, [pc, #376]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800331e:	4013      	ands	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	23c0      	movs	r3, #192	; 0xc0
 8003328:	039b      	lsls	r3, r3, #14
 800332a:	401a      	ands	r2, r3
 800332c:	4b55      	ldr	r3, [pc, #340]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003334:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	23c0      	movs	r3, #192	; 0xc0
 800333c:	029b      	lsls	r3, r3, #10
 800333e:	401a      	ands	r2, r3
 8003340:	4b50      	ldr	r3, [pc, #320]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003342:	430a      	orrs	r2, r1
 8003344:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2220      	movs	r2, #32
 800334c:	4013      	ands	r3, r2
 800334e:	d01f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	029b      	lsls	r3, r3, #10
 8003358:	401a      	ands	r2, r3
 800335a:	23c0      	movs	r3, #192	; 0xc0
 800335c:	029b      	lsls	r3, r3, #10
 800335e:	429a      	cmp	r2, r3
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003362:	4b48      	ldr	r3, [pc, #288]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	23c0      	movs	r3, #192	; 0xc0
 8003372:	039b      	lsls	r3, r3, #14
 8003374:	401a      	ands	r2, r3
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800337e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	23c0      	movs	r3, #192	; 0xc0
 8003386:	029b      	lsls	r3, r3, #10
 8003388:	401a      	ands	r2, r3
 800338a:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800338c:	430a      	orrs	r2, r1
 800338e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003390:	2317      	movs	r3, #23
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800339c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033a0:	493e      	ldr	r1, [pc, #248]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	2203      	movs	r2, #3
 80033b6:	4393      	bics	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2202      	movs	r2, #2
 80033ca:	4013      	ands	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	220c      	movs	r2, #12
 80033d4:	4393      	bics	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2204      	movs	r2, #4
 80033e8:	4013      	ands	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f0:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	4013      	ands	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800341a:	430a      	orrs	r2, r1
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4013      	ands	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003430:	4013      	ands	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800343a:	430a      	orrs	r2, r1
 800343c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2240      	movs	r2, #64	; 0x40
 8003444:	4013      	ands	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003458:	430a      	orrs	r2, r1
 800345a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	4013      	ands	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003476:	430a      	orrs	r2, r1
 8003478:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b006      	add	sp, #24
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
 800348c:	fffcffff 	.word	0xfffcffff
 8003490:	fff7ffff 	.word	0xfff7ffff
 8003494:	00001388 	.word	0x00001388
 8003498:	ffcfffff 	.word	0xffcfffff
 800349c:	efffffff 	.word	0xefffffff
 80034a0:	fffff3ff 	.word	0xfffff3ff
 80034a4:	ffffcfff 	.word	0xffffcfff
 80034a8:	fbffffff 	.word	0xfbffffff
 80034ac:	fff3ffff 	.word	0xfff3ffff

080034b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034b0:	b5b0      	push	{r4, r5, r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034b8:	230f      	movs	r3, #15
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e088      	b.n	80035dc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2221      	movs	r2, #33	; 0x21
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fd fbf1 	bl	8000cc8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2221      	movs	r2, #33	; 0x21
 80034ea:	2102      	movs	r1, #2
 80034ec:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2210      	movs	r2, #16
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d05f      	beq.n	80035bc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	22ca      	movs	r2, #202	; 0xca
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2253      	movs	r2, #83	; 0x53
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800350c:	250f      	movs	r5, #15
 800350e:	197c      	adds	r4, r7, r5
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 fc62 	bl	8003ddc <RTC_EnterInitMode>
 8003518:	0003      	movs	r3, r0
 800351a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800351c:	0028      	movs	r0, r5
 800351e:	183b      	adds	r3, r7, r0
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d12c      	bne.n	8003580 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	492c      	ldr	r1, [pc, #176]	; (80035e4 <HAL_RTC_Init+0x134>)
 8003532:	400a      	ands	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68d2      	ldr	r2, [r2, #12]
 800355c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6919      	ldr	r1, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	041a      	lsls	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003572:	183c      	adds	r4, r7, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 fc74 	bl	8003e64 <RTC_ExitInitMode>
 800357c:	0003      	movs	r3, r0
 800357e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003580:	230f      	movs	r3, #15
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d113      	bne.n	80035b2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2103      	movs	r1, #3
 8003596:	438a      	bics	r2, r1
 8003598:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	22ff      	movs	r2, #255	; 0xff
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
 80035ba:	e003      	b.n	80035c4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80035bc:	230f      	movs	r3, #15
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80035c4:	230f      	movs	r3, #15
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2221      	movs	r2, #33	; 0x21
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80035d6:	230f      	movs	r3, #15
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	781b      	ldrb	r3, [r3, #0]
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b004      	add	sp, #16
 80035e2:	bdb0      	pop	{r4, r5, r7, pc}
 80035e4:	ff8fffbf 	.word	0xff8fffbf

080035e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035e8:	b5b0      	push	{r4, r5, r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	5c9b      	ldrb	r3, [r3, r2]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_RTC_SetTime+0x1e>
 8003602:	2302      	movs	r3, #2
 8003604:	e092      	b.n	800372c <HAL_RTC_SetTime+0x144>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2221      	movs	r2, #33	; 0x21
 8003612:	2102      	movs	r1, #2
 8003614:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d125      	bne.n	8003668 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	4013      	ands	r3, r2
 8003626:	d102      	bne.n	800362e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	0018      	movs	r0, r3
 8003634:	f000 fc40 	bl	8003eb8 <RTC_ByteToBcd2>
 8003638:	0003      	movs	r3, r0
 800363a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 fc39 	bl	8003eb8 <RTC_ByteToBcd2>
 8003646:	0003      	movs	r3, r0
 8003648:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800364a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	789b      	ldrb	r3, [r3, #2]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 fc31 	bl	8003eb8 <RTC_ByteToBcd2>
 8003656:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003658:	0022      	movs	r2, r4
 800365a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	78db      	ldrb	r3, [r3, #3]
 8003660:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e017      	b.n	8003698 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	4013      	ands	r3, r2
 8003672:	d102      	bne.n	800367a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003686:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800368c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	22ca      	movs	r2, #202	; 0xca
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2253      	movs	r2, #83	; 0x53
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036a8:	2513      	movs	r5, #19
 80036aa:	197c      	adds	r4, r7, r5
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 fb94 	bl	8003ddc <RTC_EnterInitMode>
 80036b4:	0003      	movs	r3, r0
 80036b6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80036b8:	0028      	movs	r0, r5
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d120      	bne.n	8003704 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	491a      	ldr	r1, [pc, #104]	; (8003734 <HAL_RTC_SetTime+0x14c>)
 80036ca:	400a      	ands	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4917      	ldr	r1, [pc, #92]	; (8003738 <HAL_RTC_SetTime+0x150>)
 80036da:	400a      	ands	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036f6:	183c      	adds	r4, r7, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fbb2 	bl	8003e64 <RTC_ExitInitMode>
 8003700:	0003      	movs	r3, r0
 8003702:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003704:	2313      	movs	r3, #19
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2221      	movs	r2, #33	; 0x21
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	2100      	movs	r1, #0
 8003724:	5499      	strb	r1, [r3, r2]

  return status;
 8003726:	2313      	movs	r3, #19
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	781b      	ldrb	r3, [r3, #0]
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b006      	add	sp, #24
 8003732:	bdb0      	pop	{r4, r5, r7, pc}
 8003734:	007f7f7f 	.word	0x007f7f7f
 8003738:	fffbffff 	.word	0xfffbffff

0800373c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	045b      	lsls	r3, r3, #17
 800375e:	0c5a      	lsrs	r2, r3, #17
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_RTC_GetTime+0xb8>)
 800376c:	4013      	ands	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	223f      	movs	r2, #63	; 0x3f
 8003778:	4013      	ands	r3, r2
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	b2db      	uxtb	r3, r3
 8003786:	227f      	movs	r2, #127	; 0x7f
 8003788:	4013      	ands	r3, r2
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	227f      	movs	r2, #127	; 0x7f
 8003796:	4013      	ands	r3, r2
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	0d9b      	lsrs	r3, r3, #22
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2201      	movs	r2, #1
 80037a6:	4013      	ands	r3, r2
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11a      	bne.n	80037ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 fb9e 	bl	8003efa <RTC_Bcd2ToByte>
 80037be:	0003      	movs	r3, r0
 80037c0:	001a      	movs	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 fb95 	bl	8003efa <RTC_Bcd2ToByte>
 80037d0:	0003      	movs	r3, r0
 80037d2:	001a      	movs	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	789b      	ldrb	r3, [r3, #2]
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fb8c 	bl	8003efa <RTC_Bcd2ToByte>
 80037e2:	0003      	movs	r3, r0
 80037e4:	001a      	movs	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b006      	add	sp, #24
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	007f7f7f 	.word	0x007f7f7f

080037f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	5c9b      	ldrb	r3, [r3, r2]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_RTC_SetDate+0x1e>
 8003812:	2302      	movs	r3, #2
 8003814:	e07e      	b.n	8003914 <HAL_RTC_SetDate+0x11c>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2221      	movs	r2, #33	; 0x21
 8003822:	2102      	movs	r1, #2
 8003824:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10e      	bne.n	800384a <HAL_RTC_SetDate+0x52>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	785b      	ldrb	r3, [r3, #1]
 8003830:	001a      	movs	r2, r3
 8003832:	2310      	movs	r3, #16
 8003834:	4013      	ands	r3, r2
 8003836:	d008      	beq.n	800384a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2210      	movs	r2, #16
 800383e:	4393      	bics	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	330a      	adds	r3, #10
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11c      	bne.n	800388a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	78db      	ldrb	r3, [r3, #3]
 8003854:	0018      	movs	r0, r3
 8003856:	f000 fb2f 	bl	8003eb8 <RTC_ByteToBcd2>
 800385a:	0003      	movs	r3, r0
 800385c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	0018      	movs	r0, r3
 8003864:	f000 fb28 	bl	8003eb8 <RTC_ByteToBcd2>
 8003868:	0003      	movs	r3, r0
 800386a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800386c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	789b      	ldrb	r3, [r3, #2]
 8003872:	0018      	movs	r0, r3
 8003874:	f000 fb20 	bl	8003eb8 <RTC_ByteToBcd2>
 8003878:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800387a:	0022      	movs	r2, r4
 800387c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e00e      	b.n	80038a8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	78db      	ldrb	r3, [r3, #3]
 800388e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003896:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800389c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	22ca      	movs	r2, #202	; 0xca
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2253      	movs	r2, #83	; 0x53
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038b8:	2513      	movs	r5, #19
 80038ba:	197c      	adds	r4, r7, r5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 fa8c 	bl	8003ddc <RTC_EnterInitMode>
 80038c4:	0003      	movs	r3, r0
 80038c6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80038c8:	0028      	movs	r0, r5
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10c      	bne.n	80038ec <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4910      	ldr	r1, [pc, #64]	; (800391c <HAL_RTC_SetDate+0x124>)
 80038da:	400a      	ands	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038de:	183c      	adds	r4, r7, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 fabe 	bl	8003e64 <RTC_ExitInitMode>
 80038e8:	0003      	movs	r3, r0
 80038ea:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80038ec:	2313      	movs	r3, #19
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2221      	movs	r2, #33	; 0x21
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	22ff      	movs	r2, #255	; 0xff
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	2100      	movs	r1, #0
 800390c:	5499      	strb	r1, [r3, r2]

  return status;
 800390e:	2313      	movs	r3, #19
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	781b      	ldrb	r3, [r3, #0]
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b006      	add	sp, #24
 800391a:	bdb0      	pop	{r4, r5, r7, pc}
 800391c:	00ffff3f 	.word	0x00ffff3f

08003920 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a21      	ldr	r2, [pc, #132]	; (80039bc <HAL_RTC_GetDate+0x9c>)
 8003938:	4013      	ands	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	b2db      	uxtb	r3, r3
 800394c:	221f      	movs	r2, #31
 800394e:	4013      	ands	r3, r2
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	223f      	movs	r2, #63	; 0x3f
 800395c:	4013      	ands	r3, r2
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2207      	movs	r2, #7
 800396c:	4013      	ands	r3, r2
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11a      	bne.n	80039b0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	78db      	ldrb	r3, [r3, #3]
 800397e:	0018      	movs	r0, r3
 8003980:	f000 fabb 	bl	8003efa <RTC_Bcd2ToByte>
 8003984:	0003      	movs	r3, r0
 8003986:	001a      	movs	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	0018      	movs	r0, r3
 8003992:	f000 fab2 	bl	8003efa <RTC_Bcd2ToByte>
 8003996:	0003      	movs	r3, r0
 8003998:	001a      	movs	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	789b      	ldrb	r3, [r3, #2]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 faa9 	bl	8003efa <RTC_Bcd2ToByte>
 80039a8:	0003      	movs	r3, r0
 80039aa:	001a      	movs	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b006      	add	sp, #24
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	00ffff3f 	.word	0x00ffff3f

080039c0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	5c9b      	ldrb	r3, [r3, r2]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_RTC_SetAlarm+0x26>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e120      	b.n	8003c28 <HAL_RTC_SetAlarm+0x268>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2221      	movs	r2, #33	; 0x21
 80039f2:	2102      	movs	r1, #2
 80039f4:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d136      	bne.n	8003a6a <HAL_RTC_SetAlarm+0xaa>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2240      	movs	r2, #64	; 0x40
 8003a04:	4013      	ands	r3, r2
 8003a06:	d102      	bne.n	8003a0e <HAL_RTC_SetAlarm+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fa50 	bl	8003eb8 <RTC_ByteToBcd2>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 fa49 	bl	8003eb8 <RTC_ByteToBcd2>
 8003a26:	0003      	movs	r3, r0
 8003a28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003a2a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	789b      	ldrb	r3, [r3, #2]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 fa41 	bl	8003eb8 <RTC_ByteToBcd2>
 8003a36:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a38:	0022      	movs	r2, r4
 8003a3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	78db      	ldrb	r3, [r3, #3]
 8003a40:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003a42:	431a      	orrs	r2, r3
 8003a44:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	5c9b      	ldrb	r3, [r3, r2]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 fa33 	bl	8003eb8 <RTC_ByteToBcd2>
 8003a52:	0003      	movs	r3, r0
 8003a54:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003a56:	0022      	movs	r2, r4
 8003a58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003a5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e022      	b.n	8003ab0 <HAL_RTC_SetAlarm+0xf0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	4013      	ands	r3, r2
 8003a74:	d102      	bne.n	8003a7c <HAL_RTC_SetAlarm+0xbc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003a88:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003a8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	78db      	ldrb	r3, [r3, #3]
 8003a94:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003a96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2120      	movs	r1, #32
 8003a9c:	5c5b      	ldrb	r3, [r3, r1]
 8003a9e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003aa0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003aa6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	22ca      	movs	r2, #202	; 0xca
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2253      	movs	r2, #83	; 0x53
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d14d      	bne.n	8003b74 <HAL_RTC_SetAlarm+0x1b4>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4953      	ldr	r1, [pc, #332]	; (8003c30 <HAL_RTC_SetAlarm+0x270>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4950      	ldr	r1, [pc, #320]	; (8003c34 <HAL_RTC_SetAlarm+0x274>)
 8003af4:	400a      	ands	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	22ff      	movs	r2, #255	; 0xff
 8003b00:	401a      	ands	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	494c      	ldr	r1, [pc, #304]	; (8003c38 <HAL_RTC_SetAlarm+0x278>)
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe f9ee 	bl	8001eec <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b14:	e016      	b.n	8003b44 <HAL_RTC_SetAlarm+0x184>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b16:	f7fe f9e9 	bl	8001eec <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	23fa      	movs	r3, #250	; 0xfa
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d90d      	bls.n	8003b44 <HAL_RTC_SetAlarm+0x184>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2221      	movs	r2, #33	; 0x21
 8003b34:	2103      	movs	r1, #3
 8003b36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e071      	b.n	8003c28 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d0e2      	beq.n	8003b16 <HAL_RTC_SetAlarm+0x156>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	0049      	lsls	r1, r1, #1
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	e04c      	b.n	8003c0e <HAL_RTC_SetAlarm+0x24e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	492f      	ldr	r1, [pc, #188]	; (8003c3c <HAL_RTC_SetAlarm+0x27c>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	492c      	ldr	r1, [pc, #176]	; (8003c40 <HAL_RTC_SetAlarm+0x280>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	22ff      	movs	r2, #255	; 0xff
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4928      	ldr	r1, [pc, #160]	; (8003c44 <HAL_RTC_SetAlarm+0x284>)
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba8:	f7fe f9a0 	bl	8001eec <HAL_GetTick>
 8003bac:	0003      	movs	r3, r0
 8003bae:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003bb0:	e016      	b.n	8003be0 <HAL_RTC_SetAlarm+0x220>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bb2:	f7fe f99b 	bl	8001eec <HAL_GetTick>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad2      	subs	r2, r2, r3
 8003bbc:	23fa      	movs	r3, #250	; 0xfa
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d90d      	bls.n	8003be0 <HAL_RTC_SetAlarm+0x220>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2221      	movs	r2, #33	; 0x21
 8003bd0:	2103      	movs	r1, #3
 8003bd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e023      	b.n	8003c28 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d0e2      	beq.n	8003bb2 <HAL_RTC_SetAlarm+0x1f2>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	0089      	lsls	r1, r1, #2
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	2100      	movs	r1, #0
 8003c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b009      	add	sp, #36	; 0x24
 8003c2e:	bd90      	pop	{r4, r7, pc}
 8003c30:	fffffeff 	.word	0xfffffeff
 8003c34:	ffffefff 	.word	0xffffefff
 8003c38:	fffffe7f 	.word	0xfffffe7f
 8003c3c:	fffffdff 	.word	0xfffffdff
 8003c40:	ffffdfff 	.word	0xffffdfff
 8003c44:	fffffd7f 	.word	0xfffffd7f

08003c48 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	5c9b      	ldrb	r3, [r3, r2]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_RTC_DeactivateAlarm+0x1c>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e086      	b.n	8003d72 <HAL_RTC_DeactivateAlarm+0x12a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	2101      	movs	r1, #1
 8003c6a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2221      	movs	r2, #33	; 0x21
 8003c70:	2102      	movs	r1, #2
 8003c72:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	22ca      	movs	r2, #202	; 0xca
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2253      	movs	r2, #83	; 0x53
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d132      	bne.n	8003cf4 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4938      	ldr	r1, [pc, #224]	; (8003d7c <HAL_RTC_DeactivateAlarm+0x134>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4935      	ldr	r1, [pc, #212]	; (8003d80 <HAL_RTC_DeactivateAlarm+0x138>)
 8003caa:	400a      	ands	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cae:	f7fe f91d 	bl	8001eec <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003cb6:	e016      	b.n	8003ce6 <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cb8:	f7fe f918 	bl	8001eec <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad2      	subs	r2, r2, r3
 8003cc2:	23fa      	movs	r3, #250	; 0xfa
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d90d      	bls.n	8003ce6 <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2221      	movs	r2, #33	; 0x21
 8003cd6:	2103      	movs	r1, #3
 8003cd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e045      	b.n	8003d72 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d0e2      	beq.n	8003cb8 <HAL_RTC_DeactivateAlarm+0x70>
 8003cf2:	e031      	b.n	8003d58 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4921      	ldr	r1, [pc, #132]	; (8003d84 <HAL_RTC_DeactivateAlarm+0x13c>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	491e      	ldr	r1, [pc, #120]	; (8003d88 <HAL_RTC_DeactivateAlarm+0x140>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fe f8ea 	bl	8001eec <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003d1c:	e016      	b.n	8003d4c <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d1e:	f7fe f8e5 	bl	8001eec <HAL_GetTick>
 8003d22:	0002      	movs	r2, r0
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1ad2      	subs	r2, r2, r3
 8003d28:	23fa      	movs	r3, #250	; 0xfa
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d90d      	bls.n	8003d4c <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	22ff      	movs	r2, #255	; 0xff
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2221      	movs	r2, #33	; 0x21
 8003d3c:	2103      	movs	r1, #3
 8003d3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	2100      	movs	r1, #0
 8003d46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e012      	b.n	8003d72 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	d0e2      	beq.n	8003d1e <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	22ff      	movs	r2, #255	; 0xff
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2221      	movs	r2, #33	; 0x21
 8003d64:	2101      	movs	r1, #1
 8003d66:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	fffffeff 	.word	0xfffffeff
 8003d80:	ffffefff 	.word	0xffffefff
 8003d84:	fffffdff 	.word	0xfffffdff
 8003d88:	ffffdfff 	.word	0xffffdfff

08003d8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <HAL_RTC_WaitForSynchro+0x4c>)
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da0:	f7fe f8a4 	bl	8001eec <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003daa:	f7fe f89f 	bl	8001eec <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad2      	subs	r2, r2, r3
 8003db4:	23fa      	movs	r3, #250	; 0xfa
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d901      	bls.n	8003dc0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e006      	b.n	8003dce <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d0ee      	beq.n	8003daa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b004      	add	sp, #16
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	0001ff5f 	.word	0x0001ff5f

08003ddc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	230f      	movs	r3, #15
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d12c      	bne.n	8003e56 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e0c:	f7fe f86e 	bl	8001eec <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e14:	e014      	b.n	8003e40 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e16:	f7fe f869 	bl	8001eec <HAL_GetTick>
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	200f      	movs	r0, #15
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	1839      	adds	r1, r7, r0
 8003e26:	7809      	ldrb	r1, [r1, #0]
 8003e28:	7019      	strb	r1, [r3, #0]
 8003e2a:	23fa      	movs	r3, #250	; 0xfa
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d906      	bls.n	8003e40 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2221      	movs	r2, #33	; 0x21
 8003e36:	2104      	movs	r1, #4
 8003e38:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d104      	bne.n	8003e56 <RTC_EnterInitMode+0x7a>
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d1df      	bne.n	8003e16 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003e56:	230f      	movs	r3, #15
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	781b      	ldrb	r3, [r3, #0]
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b004      	add	sp, #16
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	240f      	movs	r4, #15
 8003e6e:	193b      	adds	r3, r7, r4
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	438a      	bics	r2, r1
 8003e82:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d10c      	bne.n	8003eaa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff ff7a 	bl	8003d8c <HAL_RTC_WaitForSynchro>
 8003e98:	1e03      	subs	r3, r0, #0
 8003e9a:	d006      	beq.n	8003eaa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	2104      	movs	r1, #4
 8003ea2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003eaa:	230f      	movs	r3, #15
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	781b      	ldrb	r3, [r3, #0]
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b005      	add	sp, #20
 8003eb6:	bd90      	pop	{r4, r7, pc}

08003eb8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	1dfb      	adds	r3, r7, #7
 8003ec2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003ec8:	e007      	b.n	8003eda <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003ed0:	1dfb      	adds	r3, r7, #7
 8003ed2:	1dfa      	adds	r2, r7, #7
 8003ed4:	7812      	ldrb	r2, [r2, #0]
 8003ed6:	3a0a      	subs	r2, #10
 8003ed8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003eda:	1dfb      	adds	r3, r7, #7
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b09      	cmp	r3, #9
 8003ee0:	d8f3      	bhi.n	8003eca <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	b2db      	uxtb	r3, r3
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	0002      	movs	r2, r0
 8003f02:	1dfb      	adds	r3, r7, #7
 8003f04:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003f0a:	1dfb      	adds	r3, r7, #7
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	001a      	movs	r2, r3
 8003f14:	0013      	movs	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	210f      	movs	r1, #15
 8003f28:	400b      	ands	r3, r1
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	18d3      	adds	r3, r2, r3
 8003f2e:	b2db      	uxtb	r3, r3
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b004      	add	sp, #16
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e032      	b.n	8003fb0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2239      	movs	r2, #57	; 0x39
 8003f4e:	5c9b      	ldrb	r3, [r3, r2]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2238      	movs	r2, #56	; 0x38
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fc fec9 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2239      	movs	r2, #57	; 0x39
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	0019      	movs	r1, r3
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f000 fa95 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223e      	movs	r2, #62	; 0x3e
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	223a      	movs	r2, #58	; 0x3a
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	223b      	movs	r2, #59	; 0x3b
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	223c      	movs	r2, #60	; 0x3c
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223d      	movs	r2, #61	; 0x3d
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2239      	movs	r2, #57	; 0x39
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2239      	movs	r2, #57	; 0x39
 8003fc4:	5c9b      	ldrb	r3, [r3, r2]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d001      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e033      	b.n	8004038 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2239      	movs	r2, #57	; 0x39
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	05db      	lsls	r3, r3, #23
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIM_Base_Start+0x4a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <HAL_TIM_Base_Start+0x88>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_TIM_Base_Start+0x4a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a14      	ldr	r2, [pc, #80]	; (8004044 <HAL_TIM_Base_Start+0x8c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIM_Base_Start+0x4a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a12      	ldr	r2, [pc, #72]	; (8004048 <HAL_TIM_Base_Start+0x90>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d111      	bne.n	8004026 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2207      	movs	r2, #7
 800400a:	4013      	ands	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d010      	beq.n	8004036 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2101      	movs	r1, #1
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	e007      	b.n	8004036 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2101      	movs	r1, #1
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b004      	add	sp, #16
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40000400 	.word	0x40000400
 8004044:	40010800 	.word	0x40010800
 8004048:	40011400 	.word	0x40011400

0800404c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2239      	movs	r2, #57	; 0x39
 8004058:	5c9b      	ldrb	r3, [r3, r2]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d001      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e03b      	b.n	80040dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2239      	movs	r2, #57	; 0x39
 8004068:	2102      	movs	r1, #2
 800406a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2101      	movs	r1, #1
 8004078:	430a      	orrs	r2, r1
 800407a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	05db      	lsls	r3, r3, #23
 8004084:	429a      	cmp	r2, r3
 8004086:	d00e      	beq.n	80040a6 <HAL_TIM_Base_Start_IT+0x5a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <HAL_TIM_Base_Start_IT+0x98>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d009      	beq.n	80040a6 <HAL_TIM_Base_Start_IT+0x5a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_TIM_Base_Start_IT+0x5a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_TIM_Base_Start_IT+0xa0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2207      	movs	r2, #7
 80040ae:	4013      	ands	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d010      	beq.n	80040da <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2101      	movs	r1, #1
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	e007      	b.n	80040da <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b004      	add	sp, #16
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40010800 	.word	0x40010800
 80040ec:	40011400 	.word	0x40011400

080040f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2202      	movs	r2, #2
 8004100:	4013      	ands	r3, r2
 8004102:	2b02      	cmp	r3, #2
 8004104:	d124      	bne.n	8004150 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d11d      	bne.n	8004150 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2203      	movs	r2, #3
 800411a:	4252      	negs	r2, r2
 800411c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2203      	movs	r2, #3
 800412c:	4013      	ands	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f9a0 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004138:	e007      	b.n	800414a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 f993 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 f99f 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2204      	movs	r2, #4
 8004158:	4013      	ands	r3, r2
 800415a:	2b04      	cmp	r3, #4
 800415c:	d125      	bne.n	80041aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2204      	movs	r2, #4
 8004166:	4013      	ands	r3, r2
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11e      	bne.n	80041aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2205      	movs	r2, #5
 8004172:	4252      	negs	r2, r2
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	23c0      	movs	r3, #192	; 0xc0
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4013      	ands	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 f973 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004192:	e007      	b.n	80041a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f966 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 f972 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2208      	movs	r2, #8
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d124      	bne.n	8004202 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2208      	movs	r2, #8
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d11d      	bne.n	8004202 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2209      	movs	r2, #9
 80041cc:	4252      	negs	r2, r2
 80041ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2203      	movs	r2, #3
 80041de:	4013      	ands	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 f947 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 80041ea:	e007      	b.n	80041fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 f93a 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f946 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2210      	movs	r2, #16
 800420a:	4013      	ands	r3, r2
 800420c:	2b10      	cmp	r3, #16
 800420e:	d125      	bne.n	800425c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2210      	movs	r2, #16
 8004218:	4013      	ands	r3, r2
 800421a:	2b10      	cmp	r3, #16
 800421c:	d11e      	bne.n	800425c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2211      	movs	r2, #17
 8004224:	4252      	negs	r2, r2
 8004226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2208      	movs	r2, #8
 800422c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	23c0      	movs	r3, #192	; 0xc0
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f91a 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004244:	e007      	b.n	8004256 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f000 f90d 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	0018      	movs	r0, r3
 8004252:	f000 f919 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2201      	movs	r2, #1
 8004264:	4013      	ands	r3, r2
 8004266:	2b01      	cmp	r3, #1
 8004268:	d10f      	bne.n	800428a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	4013      	ands	r3, r2
 8004274:	2b01      	cmp	r3, #1
 8004276:	d108      	bne.n	800428a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2202      	movs	r2, #2
 800427e:	4252      	negs	r2, r2
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f7fc fcd7 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2240      	movs	r2, #64	; 0x40
 8004292:	4013      	ands	r3, r2
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d10f      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2240      	movs	r2, #64	; 0x40
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d108      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2241      	movs	r2, #65	; 0x41
 80042ac:	4252      	negs	r2, r2
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f000 f8f0 	bl	8004498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	230f      	movs	r3, #15
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2238      	movs	r2, #56	; 0x38
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIM_ConfigClockSource+0x20>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0bc      	b.n	800445a <HAL_TIM_ConfigClockSource+0x19a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2238      	movs	r2, #56	; 0x38
 80042e4:	2101      	movs	r1, #1
 80042e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2239      	movs	r2, #57	; 0x39
 80042ec:	2102      	movs	r1, #2
 80042ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2277      	movs	r2, #119	; 0x77
 80042fc:	4393      	bics	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a58      	ldr	r2, [pc, #352]	; (8004464 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	0192      	lsls	r2, r2, #6
 8004318:	4293      	cmp	r3, r2
 800431a:	d040      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xde>
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	0192      	lsls	r2, r2, #6
 8004320:	4293      	cmp	r3, r2
 8004322:	d900      	bls.n	8004326 <HAL_TIM_ConfigClockSource+0x66>
 8004324:	e088      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	0152      	lsls	r2, r2, #5
 800432a:	4293      	cmp	r3, r2
 800432c:	d100      	bne.n	8004330 <HAL_TIM_ConfigClockSource+0x70>
 800432e:	e088      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x182>
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	0152      	lsls	r2, r2, #5
 8004334:	4293      	cmp	r3, r2
 8004336:	d900      	bls.n	800433a <HAL_TIM_ConfigClockSource+0x7a>
 8004338:	e07e      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 800433a:	2b70      	cmp	r3, #112	; 0x70
 800433c:	d018      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0xb0>
 800433e:	d900      	bls.n	8004342 <HAL_TIM_ConfigClockSource+0x82>
 8004340:	e07a      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004342:	2b60      	cmp	r3, #96	; 0x60
 8004344:	d04f      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x126>
 8004346:	d900      	bls.n	800434a <HAL_TIM_ConfigClockSource+0x8a>
 8004348:	e076      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 800434a:	2b50      	cmp	r3, #80	; 0x50
 800434c:	d03b      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x106>
 800434e:	d900      	bls.n	8004352 <HAL_TIM_ConfigClockSource+0x92>
 8004350:	e072      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d057      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x146>
 8004356:	d900      	bls.n	800435a <HAL_TIM_ConfigClockSource+0x9a>
 8004358:	e06e      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 800435a:	2b30      	cmp	r3, #48	; 0x30
 800435c:	d063      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 800435e:	d86b      	bhi.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004360:	2b20      	cmp	r3, #32
 8004362:	d060      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 8004364:	d868      	bhi.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d05d      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 800436a:	2b10      	cmp	r3, #16
 800436c:	d05b      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 800436e:	e063      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004380:	f000 f96a 	bl	8004658 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2277      	movs	r2, #119	; 0x77
 8004390:	4313      	orrs	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
      break;
 800439c:	e052      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ae:	f000 f953 	bl	8004658 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	01c9      	lsls	r1, r1, #7
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
      break;
 80043c4:	e03e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	001a      	movs	r2, r3
 80043d4:	f000 f8c6 	bl	8004564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2150      	movs	r1, #80	; 0x50
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 f920 	bl	8004624 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e02e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	001a      	movs	r2, r3
 80043f4:	f000 f8e4 	bl	80045c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2160      	movs	r1, #96	; 0x60
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f910 	bl	8004624 <TIM_ITRx_SetConfig>
      break;
 8004404:	e01e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	001a      	movs	r2, r3
 8004414:	f000 f8a6 	bl	8004564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2140      	movs	r1, #64	; 0x40
 800441e:	0018      	movs	r0, r3
 8004420:	f000 f900 	bl	8004624 <TIM_ITRx_SetConfig>
      break;
 8004424:	e00e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0019      	movs	r1, r3
 8004430:	0010      	movs	r0, r2
 8004432:	f000 f8f7 	bl	8004624 <TIM_ITRx_SetConfig>
      break;
 8004436:	e005      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004438:	230f      	movs	r3, #15
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004442:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2239      	movs	r2, #57	; 0x39
 8004448:	2101      	movs	r1, #1
 800444a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2238      	movs	r2, #56	; 0x38
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

  return status;
 8004454:	230f      	movs	r3, #15
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781b      	ldrb	r3, [r3, #0]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	ffff00ff 	.word	0xffff00ff

08004468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	05db      	lsls	r3, r3, #23
 80044be:	429a      	cmp	r2, r3
 80044c0:	d00b      	beq.n	80044da <TIM_Base_SetConfig+0x32>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <TIM_Base_SetConfig+0xac>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <TIM_Base_SetConfig+0x32>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <TIM_Base_SetConfig+0xb0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_Base_SetConfig+0x32>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a21      	ldr	r2, [pc, #132]	; (800455c <TIM_Base_SetConfig+0xb4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2270      	movs	r2, #112	; 0x70
 80044de:	4393      	bics	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	05db      	lsls	r3, r3, #23
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d00b      	beq.n	800450e <TIM_Base_SetConfig+0x66>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <TIM_Base_SetConfig+0xac>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <TIM_Base_SetConfig+0x66>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <TIM_Base_SetConfig+0xb0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_Base_SetConfig+0x66>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a14      	ldr	r2, [pc, #80]	; (800455c <TIM_Base_SetConfig+0xb4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <TIM_Base_SetConfig+0xb8>)
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	4393      	bics	r3, r2
 8004526:	001a      	movs	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	615a      	str	r2, [r3, #20]
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b004      	add	sp, #16
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40000400 	.word	0x40000400
 8004558:	40010800 	.word	0x40010800
 800455c:	40011400 	.word	0x40011400
 8004560:	fffffcff 	.word	0xfffffcff

08004564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	2201      	movs	r2, #1
 800457c:	4393      	bics	r3, r2
 800457e:	001a      	movs	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	22f0      	movs	r2, #240	; 0xf0
 800458e:	4393      	bics	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	220a      	movs	r2, #10
 80045a0:	4393      	bics	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b006      	add	sp, #24
 80045be:	bd80      	pop	{r7, pc}

080045c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	2210      	movs	r2, #16
 80045d2:	4393      	bics	r3, r2
 80045d4:	001a      	movs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <TIM_TI2_ConfigInputStage+0x60>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	22a0      	movs	r2, #160	; 0xa0
 80045fc:	4393      	bics	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	b006      	add	sp, #24
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	ffff0fff 	.word	0xffff0fff

08004624 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2270      	movs	r2, #112	; 0x70
 8004638:	4393      	bics	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	2207      	movs	r2, #7
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b004      	add	sp, #16
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <TIM_ETR_SetConfig+0x3c>)
 8004670:	4013      	ands	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	021a      	lsls	r2, r3, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	431a      	orrs	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b006      	add	sp, #24
 8004692:	bd80      	pop	{r7, pc}
 8004694:	ffff00ff 	.word	0xffff00ff

08004698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2238      	movs	r2, #56	; 0x38
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e047      	b.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2238      	movs	r2, #56	; 0x38
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2239      	movs	r2, #57	; 0x39
 80046bc:	2102      	movs	r1, #2
 80046be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2270      	movs	r2, #112	; 0x70
 80046d4:	4393      	bics	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d00e      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a11      	ldr	r2, [pc, #68]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a10      	ldr	r2, [pc, #64]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10c      	bne.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	4393      	bics	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2239      	movs	r2, #57	; 0x39
 8004732:	2101      	movs	r1, #1
 8004734:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2238      	movs	r2, #56	; 0x38
 800473a:	2100      	movs	r1, #0
 800473c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b004      	add	sp, #16
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40000400 	.word	0x40000400
 800474c:	40010800 	.word	0x40010800
 8004750:	40011400 	.word	0x40011400

08004754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e044      	b.n	80047f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2278      	movs	r2, #120	; 0x78
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f7fc fae9 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2224      	movs	r2, #36	; 0x24
 8004782:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2101      	movs	r1, #1
 8004790:	438a      	bics	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0018      	movs	r0, r3
 8004798:	f000 fc2c 	bl	8004ff4 <UART_SetConfig>
 800479c:	0003      	movs	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e024      	b.n	80047f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 febd 	bl	8005530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	490d      	ldr	r1, [pc, #52]	; (80047f8 <HAL_UART_Init+0xa4>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	212a      	movs	r1, #42	; 0x2a
 80047d2:	438a      	bics	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	430a      	orrs	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 ff55 	bl	8005698 <UART_CheckIdleState>
 80047ee:	0003      	movs	r3, r0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	ffffb7ff 	.word	0xffffb7ff

080047fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	1dbb      	adds	r3, r7, #6
 800480a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004810:	2b20      	cmp	r3, #32
 8004812:	d000      	beq.n	8004816 <HAL_UART_Transmit+0x1a>
 8004814:	e08c      	b.n	8004930 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_UART_Transmit+0x28>
 800481c:	1dbb      	adds	r3, r7, #6
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e084      	b.n	8004932 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	015b      	lsls	r3, r3, #5
 8004830:	429a      	cmp	r2, r3
 8004832:	d109      	bne.n	8004848 <HAL_UART_Transmit+0x4c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2201      	movs	r2, #1
 8004840:	4013      	ands	r3, r2
 8004842:	d001      	beq.n	8004848 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e074      	b.n	8004932 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2284      	movs	r2, #132	; 0x84
 800484c:	2100      	movs	r1, #0
 800484e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2221      	movs	r2, #33	; 0x21
 8004854:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004856:	f7fd fb49 	bl	8001eec <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1dba      	adds	r2, r7, #6
 8004862:	2150      	movs	r1, #80	; 0x50
 8004864:	8812      	ldrh	r2, [r2, #0]
 8004866:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1dba      	adds	r2, r7, #6
 800486c:	2152      	movs	r1, #82	; 0x52
 800486e:	8812      	ldrh	r2, [r2, #0]
 8004870:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	015b      	lsls	r3, r3, #5
 800487a:	429a      	cmp	r2, r3
 800487c:	d108      	bne.n	8004890 <HAL_UART_Transmit+0x94>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e003      	b.n	8004898 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004898:	e02f      	b.n	80048fa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	0013      	movs	r3, r2
 80048a4:	2200      	movs	r2, #0
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	f000 ff9e 	bl	80057e8 <UART_WaitOnFlagUntilTimeout>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d004      	beq.n	80048ba <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e03b      	b.n	8004932 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	001a      	movs	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	05d2      	lsls	r2, r2, #23
 80048cc:	0dd2      	lsrs	r2, r2, #23
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	3302      	adds	r3, #2
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	e007      	b.n	80048e8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2252      	movs	r2, #82	; 0x52
 80048ec:	5a9b      	ldrh	r3, [r3, r2]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b299      	uxth	r1, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2252      	movs	r2, #82	; 0x52
 80048f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2252      	movs	r2, #82	; 0x52
 80048fe:	5a9b      	ldrh	r3, [r3, r2]
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1c9      	bne.n	800489a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	0013      	movs	r3, r2
 8004910:	2200      	movs	r2, #0
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	f000 ff68 	bl	80057e8 <UART_WaitOnFlagUntilTimeout>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d004      	beq.n	8004926 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e005      	b.n	8004932 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b008      	add	sp, #32
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	1dbb      	adds	r3, r7, #6
 8004948:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2280      	movs	r2, #128	; 0x80
 800494e:	589b      	ldr	r3, [r3, r2]
 8004950:	2b20      	cmp	r3, #32
 8004952:	d14a      	bne.n	80049ea <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_UART_Receive_IT+0x26>
 800495a:	1dbb      	adds	r3, r7, #6
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e042      	b.n	80049ec <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	015b      	lsls	r3, r3, #5
 800496e:	429a      	cmp	r2, r3
 8004970:	d109      	bne.n	8004986 <HAL_UART_Receive_IT+0x4a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2201      	movs	r2, #1
 800497e:	4013      	ands	r3, r2
 8004980:	d001      	beq.n	8004986 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e032      	b.n	80049ec <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_UART_Receive_IT+0xb8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d020      	beq.n	80049d8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	4013      	ands	r3, r2
 80049a2:	d019      	beq.n	80049d8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a4:	f3ef 8310 	mrs	r3, PRIMASK
 80049a8:	613b      	str	r3, [r7, #16]
  return(result);
 80049aa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2301      	movs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f383 8810 	msr	PRIMASK, r3
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	04c9      	lsls	r1, r1, #19
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f383 8810 	msr	PRIMASK, r3
}
 80049d6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049d8:	1dbb      	adds	r3, r7, #6
 80049da:	881a      	ldrh	r2, [r3, #0]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 ff6b 	bl	80058bc <UART_Start_Receive_IT>
 80049e6:	0003      	movs	r3, r0
 80049e8:	e000      	b.n	80049ec <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b008      	add	sp, #32
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40004800 	.word	0x40004800

080049f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f8:	b590      	push	{r4, r7, lr}
 80049fa:	b0ab      	sub	sp, #172	; 0xac
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	22a4      	movs	r2, #164	; 0xa4
 8004a08:	18b9      	adds	r1, r7, r2
 8004a0a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	20a0      	movs	r0, #160	; 0xa0
 8004a14:	1839      	adds	r1, r7, r0
 8004a16:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	219c      	movs	r1, #156	; 0x9c
 8004a20:	1879      	adds	r1, r7, r1
 8004a22:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a24:	0011      	movs	r1, r2
 8004a26:	18bb      	adds	r3, r7, r2
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a99      	ldr	r2, [pc, #612]	; (8004c90 <HAL_UART_IRQHandler+0x298>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2298      	movs	r2, #152	; 0x98
 8004a30:	18bc      	adds	r4, r7, r2
 8004a32:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a34:	18bb      	adds	r3, r7, r2
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d114      	bne.n	8004a66 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2220      	movs	r2, #32
 8004a42:	4013      	ands	r3, r2
 8004a44:	d00f      	beq.n	8004a66 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a46:	183b      	adds	r3, r7, r0
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d00a      	beq.n	8004a66 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d100      	bne.n	8004a5a <HAL_UART_IRQHandler+0x62>
 8004a58:	e2a0      	b.n	8004f9c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	0010      	movs	r0, r2
 8004a62:	4798      	blx	r3
      }
      return;
 8004a64:	e29a      	b.n	8004f9c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a66:	2398      	movs	r3, #152	; 0x98
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d100      	bne.n	8004a72 <HAL_UART_IRQHandler+0x7a>
 8004a70:	e114      	b.n	8004c9c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a72:	239c      	movs	r3, #156	; 0x9c
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d106      	bne.n	8004a8c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a7e:	23a0      	movs	r3, #160	; 0xa0
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_UART_IRQHandler+0x29c>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	d100      	bne.n	8004a8c <HAL_UART_IRQHandler+0x94>
 8004a8a:	e107      	b.n	8004c9c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a8c:	23a4      	movs	r3, #164	; 0xa4
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2201      	movs	r2, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	d012      	beq.n	8004abe <HAL_UART_IRQHandler+0xc6>
 8004a98:	23a0      	movs	r3, #160	; 0xa0
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2284      	movs	r2, #132	; 0x84
 8004ab2:	589b      	ldr	r3, [r3, r2]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2184      	movs	r1, #132	; 0x84
 8004abc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004abe:	23a4      	movs	r3, #164	; 0xa4
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d011      	beq.n	8004aee <HAL_UART_IRQHandler+0xf6>
 8004aca:	239c      	movs	r3, #156	; 0x9c
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2202      	movs	r2, #2
 8004adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2284      	movs	r2, #132	; 0x84
 8004ae2:	589b      	ldr	r3, [r3, r2]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2184      	movs	r1, #132	; 0x84
 8004aec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aee:	23a4      	movs	r3, #164	; 0xa4
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2204      	movs	r2, #4
 8004af6:	4013      	ands	r3, r2
 8004af8:	d011      	beq.n	8004b1e <HAL_UART_IRQHandler+0x126>
 8004afa:	239c      	movs	r3, #156	; 0x9c
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2201      	movs	r2, #1
 8004b02:	4013      	ands	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2284      	movs	r2, #132	; 0x84
 8004b12:	589b      	ldr	r3, [r3, r2]
 8004b14:	2202      	movs	r2, #2
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2184      	movs	r1, #132	; 0x84
 8004b1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b1e:	23a4      	movs	r3, #164	; 0xa4
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2208      	movs	r2, #8
 8004b26:	4013      	ands	r3, r2
 8004b28:	d017      	beq.n	8004b5a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b2a:	23a0      	movs	r3, #160	; 0xa0
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2220      	movs	r2, #32
 8004b32:	4013      	ands	r3, r2
 8004b34:	d105      	bne.n	8004b42 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b36:	239c      	movs	r3, #156	; 0x9c
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b40:	d00b      	beq.n	8004b5a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2208      	movs	r2, #8
 8004b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2284      	movs	r2, #132	; 0x84
 8004b4e:	589b      	ldr	r3, [r3, r2]
 8004b50:	2208      	movs	r2, #8
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2184      	movs	r1, #132	; 0x84
 8004b58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b5a:	23a4      	movs	r3, #164	; 0xa4
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	4013      	ands	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_UART_IRQHandler+0x198>
 8004b68:	23a0      	movs	r3, #160	; 0xa0
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	04db      	lsls	r3, r3, #19
 8004b72:	4013      	ands	r3, r2
 8004b74:	d00c      	beq.n	8004b90 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	0112      	lsls	r2, r2, #4
 8004b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2284      	movs	r2, #132	; 0x84
 8004b84:	589b      	ldr	r3, [r3, r2]
 8004b86:	2220      	movs	r2, #32
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2184      	movs	r1, #132	; 0x84
 8004b8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2284      	movs	r2, #132	; 0x84
 8004b94:	589b      	ldr	r3, [r3, r2]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d100      	bne.n	8004b9c <HAL_UART_IRQHandler+0x1a4>
 8004b9a:	e201      	b.n	8004fa0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b9c:	23a4      	movs	r3, #164	; 0xa4
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ba8:	23a0      	movs	r3, #160	; 0xa0
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d008      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	0010      	movs	r0, r2
 8004bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2284      	movs	r2, #132	; 0x84
 8004bca:	589b      	ldr	r3, [r3, r2]
 8004bcc:	2194      	movs	r1, #148	; 0x94
 8004bce:	187a      	adds	r2, r7, r1
 8004bd0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2240      	movs	r2, #64	; 0x40
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d004      	beq.n	8004bea <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2228      	movs	r2, #40	; 0x28
 8004be6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004be8:	d047      	beq.n	8004c7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	0018      	movs	r0, r3
 8004bee:	f000 ff2f 	bl	8005a50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2240      	movs	r2, #64	; 0x40
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d137      	bne.n	8004c70 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c00:	f3ef 8310 	mrs	r3, PRIMASK
 8004c04:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c08:	2090      	movs	r0, #144	; 0x90
 8004c0a:	183a      	adds	r2, r7, r0
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	438a      	bics	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
 8004c2a:	183b      	adds	r3, r7, r0
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c32:	f383 8810 	msr	PRIMASK, r3
}
 8004c36:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d012      	beq.n	8004c66 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <HAL_UART_IRQHandler+0x2a0>)
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7fd fa99 	bl	8002184 <HAL_DMA_Abort_IT>
 8004c52:	1e03      	subs	r3, r0, #0
 8004c54:	d01a      	beq.n	8004c8c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c60:	0018      	movs	r0, r3
 8004c62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	e012      	b.n	8004c8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 f9af 	bl	8004fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6e:	e00d      	b.n	8004c8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 f9aa 	bl	8004fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	e008      	b.n	8004c8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 f9a5 	bl	8004fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2284      	movs	r2, #132	; 0x84
 8004c86:	2100      	movs	r1, #0
 8004c88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c8a:	e189      	b.n	8004fa0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	46c0      	nop			; (mov r8, r8)
    return;
 8004c8e:	e187      	b.n	8004fa0 <HAL_UART_IRQHandler+0x5a8>
 8004c90:	0000080f 	.word	0x0000080f
 8004c94:	04000120 	.word	0x04000120
 8004c98:	08005b19 	.word	0x08005b19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d000      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x2ae>
 8004ca4:	e13b      	b.n	8004f1e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ca6:	23a4      	movs	r3, #164	; 0xa4
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2210      	movs	r2, #16
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d100      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x2bc>
 8004cb2:	e134      	b.n	8004f1e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cb4:	23a0      	movs	r3, #160	; 0xa0
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x2ca>
 8004cc0:	e12d      	b.n	8004f1e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2240      	movs	r2, #64	; 0x40
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d000      	beq.n	8004cda <HAL_UART_IRQHandler+0x2e2>
 8004cd8:	e0a1      	b.n	8004e1e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	217e      	movs	r1, #126	; 0x7e
 8004ce4:	187b      	adds	r3, r7, r1
 8004ce6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d100      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x2fa>
 8004cf0:	e158      	b.n	8004fa4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2258      	movs	r2, #88	; 0x58
 8004cf6:	5a9b      	ldrh	r3, [r3, r2]
 8004cf8:	187a      	adds	r2, r7, r1
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d300      	bcc.n	8004d02 <HAL_UART_IRQHandler+0x30a>
 8004d00:	e150      	b.n	8004fa4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	187a      	adds	r2, r7, r1
 8004d06:	215a      	movs	r1, #90	; 0x5a
 8004d08:	8812      	ldrh	r2, [r2, #0]
 8004d0a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2220      	movs	r2, #32
 8004d16:	4013      	ands	r3, r2
 8004d18:	d16f      	bne.n	8004dfa <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d22:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d24:	2301      	movs	r3, #1
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2a:	f383 8810 	msr	PRIMASK, r3
}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	499e      	ldr	r1, [pc, #632]	; (8004fb4 <HAL_UART_IRQHandler+0x5bc>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	f383 8810 	msr	PRIMASK, r3
}
 8004d4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d54:	677b      	str	r3, [r7, #116]	; 0x74
 8004d56:	2301      	movs	r3, #1
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	438a      	bics	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d86:	673b      	str	r3, [r7, #112]	; 0x70
 8004d88:	2301      	movs	r3, #1
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8e:	f383 8810 	msr	PRIMASK, r3
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2140      	movs	r1, #64	; 0x40
 8004da0:	438a      	bics	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004daa:	f383 8810 	msr	PRIMASK, r3
}
 8004dae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2280      	movs	r2, #128	; 0x80
 8004db4:	2120      	movs	r1, #32
 8004db6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc8:	2301      	movs	r3, #1
 8004dca:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dce:	f383 8810 	msr	PRIMASK, r3
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2110      	movs	r1, #16
 8004de0:	438a      	bics	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dea:	f383 8810 	msr	PRIMASK, r3
}
 8004dee:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fd f985 	bl	8002104 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2258      	movs	r2, #88	; 0x58
 8004e04:	5a9a      	ldrh	r2, [r3, r2]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	215a      	movs	r1, #90	; 0x5a
 8004e0a:	5a5b      	ldrh	r3, [r3, r1]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0011      	movs	r1, r2
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 f8e0 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e1c:	e0c2      	b.n	8004fa4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2258      	movs	r2, #88	; 0x58
 8004e22:	5a99      	ldrh	r1, [r3, r2]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	225a      	movs	r2, #90	; 0x5a
 8004e28:	5a9b      	ldrh	r3, [r3, r2]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	208e      	movs	r0, #142	; 0x8e
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	1a8a      	subs	r2, r1, r2
 8004e32:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	225a      	movs	r2, #90	; 0x5a
 8004e38:	5a9b      	ldrh	r3, [r3, r2]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d100      	bne.n	8004e42 <HAL_UART_IRQHandler+0x44a>
 8004e40:	e0b2      	b.n	8004fa8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004e42:	183b      	adds	r3, r7, r0
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d100      	bne.n	8004e4c <HAL_UART_IRQHandler+0x454>
 8004e4a:	e0ad      	b.n	8004fa8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e52:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e54:	2488      	movs	r4, #136	; 0x88
 8004e56:	193a      	adds	r2, r7, r4
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4951      	ldr	r1, [pc, #324]	; (8004fb8 <HAL_UART_IRQHandler+0x5c0>)
 8004e72:	400a      	ands	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	193b      	adds	r3, r7, r4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e8a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	2484      	movs	r4, #132	; 0x84
 8004e8e:	193a      	adds	r2, r7, r4
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	2301      	movs	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	438a      	bics	r2, r1
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	193b      	adds	r3, r7, r4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f383 8810 	msr	PRIMASK, r3
}
 8004eba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	2120      	movs	r1, #32
 8004ec2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed8:	2480      	movs	r4, #128	; 0x80
 8004eda:	193a      	adds	r2, r7, r4
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	193b      	adds	r3, r7, r4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0e:	183b      	adds	r3, r7, r0
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0011      	movs	r1, r2
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 f860 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f1c:	e044      	b.n	8004fa8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f1e:	23a4      	movs	r3, #164	; 0xa4
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	035b      	lsls	r3, r3, #13
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d010      	beq.n	8004f4e <HAL_UART_IRQHandler+0x556>
 8004f2c:	239c      	movs	r3, #156	; 0x9c
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	03db      	lsls	r3, r3, #15
 8004f36:	4013      	ands	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	0352      	lsls	r2, r2, #13
 8004f42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 ffec 	bl	8005f24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f4c:	e02f      	b.n	8004fae <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f4e:	23a4      	movs	r3, #164	; 0xa4
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	4013      	ands	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f5a:	23a0      	movs	r3, #160	; 0xa0
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2280      	movs	r2, #128	; 0x80
 8004f62:	4013      	ands	r3, r2
 8004f64:	d009      	beq.n	8004f7a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01e      	beq.n	8004fac <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	0010      	movs	r0, r2
 8004f76:	4798      	blx	r3
    }
    return;
 8004f78:	e018      	b.n	8004fac <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f7a:	23a4      	movs	r3, #164	; 0xa4
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2240      	movs	r2, #64	; 0x40
 8004f82:	4013      	ands	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_UART_IRQHandler+0x5b6>
 8004f86:	23a0      	movs	r3, #160	; 0xa0
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2240      	movs	r2, #64	; 0x40
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d00d      	beq.n	8004fae <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f000 fdd6 	bl	8005b46 <UART_EndTransmit_IT>
    return;
 8004f9a:	e008      	b.n	8004fae <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	e006      	b.n	8004fae <HAL_UART_IRQHandler+0x5b6>
    return;
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	e004      	b.n	8004fae <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	e002      	b.n	8004fae <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	e000      	b.n	8004fae <HAL_UART_IRQHandler+0x5b6>
    return;
 8004fac:	46c0      	nop			; (mov r8, r8)
  }

}
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b02b      	add	sp, #172	; 0xac
 8004fb2:	bd90      	pop	{r4, r7, pc}
 8004fb4:	fffffeff 	.word	0xfffffeff
 8004fb8:	fffffedf 	.word	0xfffffedf

08004fbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fc4:	46c0      	nop			; (mov r8, r8)
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	000a      	movs	r2, r1
 8004fe6:	1cbb      	adds	r3, r7, #2
 8004fe8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b002      	add	sp, #8
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b5b0      	push	{r4, r5, r7, lr}
 8004ff6:	b08e      	sub	sp, #56	; 0x38
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ffc:	231a      	movs	r3, #26
 8004ffe:	2218      	movs	r2, #24
 8005000:	189b      	adds	r3, r3, r2
 8005002:	19db      	adds	r3, r3, r7
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	431a      	orrs	r2, r3
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4313      	orrs	r3, r2
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4ac3      	ldr	r2, [pc, #780]	; (8005334 <UART_SetConfig+0x340>)
 8005028:	4013      	ands	r3, r2
 800502a:	0019      	movs	r1, r3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005032:	430a      	orrs	r2, r1
 8005034:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4abe      	ldr	r2, [pc, #760]	; (8005338 <UART_SetConfig+0x344>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4ab8      	ldr	r2, [pc, #736]	; (800533c <UART_SetConfig+0x348>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005064:	4313      	orrs	r3, r2
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4ab4      	ldr	r2, [pc, #720]	; (8005340 <UART_SetConfig+0x34c>)
 8005070:	4013      	ands	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4ab0      	ldr	r2, [pc, #704]	; (8005344 <UART_SetConfig+0x350>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d131      	bne.n	80050ec <UART_SetConfig+0xf8>
 8005088:	4baf      	ldr	r3, [pc, #700]	; (8005348 <UART_SetConfig+0x354>)
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	2203      	movs	r2, #3
 800508e:	4013      	ands	r3, r2
 8005090:	2b03      	cmp	r3, #3
 8005092:	d01d      	beq.n	80050d0 <UART_SetConfig+0xdc>
 8005094:	d823      	bhi.n	80050de <UART_SetConfig+0xea>
 8005096:	2b02      	cmp	r3, #2
 8005098:	d00c      	beq.n	80050b4 <UART_SetConfig+0xc0>
 800509a:	d820      	bhi.n	80050de <UART_SetConfig+0xea>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <UART_SetConfig+0xb2>
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d00e      	beq.n	80050c2 <UART_SetConfig+0xce>
 80050a4:	e01b      	b.n	80050de <UART_SetConfig+0xea>
 80050a6:	231b      	movs	r3, #27
 80050a8:	2218      	movs	r2, #24
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	19db      	adds	r3, r3, r7
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	e0b4      	b.n	800521e <UART_SetConfig+0x22a>
 80050b4:	231b      	movs	r3, #27
 80050b6:	2218      	movs	r2, #24
 80050b8:	189b      	adds	r3, r3, r2
 80050ba:	19db      	adds	r3, r3, r7
 80050bc:	2202      	movs	r2, #2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e0ad      	b.n	800521e <UART_SetConfig+0x22a>
 80050c2:	231b      	movs	r3, #27
 80050c4:	2218      	movs	r2, #24
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	19db      	adds	r3, r3, r7
 80050ca:	2204      	movs	r2, #4
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e0a6      	b.n	800521e <UART_SetConfig+0x22a>
 80050d0:	231b      	movs	r3, #27
 80050d2:	2218      	movs	r2, #24
 80050d4:	189b      	adds	r3, r3, r2
 80050d6:	19db      	adds	r3, r3, r7
 80050d8:	2208      	movs	r2, #8
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e09f      	b.n	800521e <UART_SetConfig+0x22a>
 80050de:	231b      	movs	r3, #27
 80050e0:	2218      	movs	r2, #24
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	19db      	adds	r3, r3, r7
 80050e6:	2210      	movs	r2, #16
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e098      	b.n	800521e <UART_SetConfig+0x22a>
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a96      	ldr	r2, [pc, #600]	; (800534c <UART_SetConfig+0x358>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d131      	bne.n	800515a <UART_SetConfig+0x166>
 80050f6:	4b94      	ldr	r3, [pc, #592]	; (8005348 <UART_SetConfig+0x354>)
 80050f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fa:	220c      	movs	r2, #12
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d01d      	beq.n	800513e <UART_SetConfig+0x14a>
 8005102:	d823      	bhi.n	800514c <UART_SetConfig+0x158>
 8005104:	2b08      	cmp	r3, #8
 8005106:	d00c      	beq.n	8005122 <UART_SetConfig+0x12e>
 8005108:	d820      	bhi.n	800514c <UART_SetConfig+0x158>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <UART_SetConfig+0x120>
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00e      	beq.n	8005130 <UART_SetConfig+0x13c>
 8005112:	e01b      	b.n	800514c <UART_SetConfig+0x158>
 8005114:	231b      	movs	r3, #27
 8005116:	2218      	movs	r2, #24
 8005118:	189b      	adds	r3, r3, r2
 800511a:	19db      	adds	r3, r3, r7
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e07d      	b.n	800521e <UART_SetConfig+0x22a>
 8005122:	231b      	movs	r3, #27
 8005124:	2218      	movs	r2, #24
 8005126:	189b      	adds	r3, r3, r2
 8005128:	19db      	adds	r3, r3, r7
 800512a:	2202      	movs	r2, #2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e076      	b.n	800521e <UART_SetConfig+0x22a>
 8005130:	231b      	movs	r3, #27
 8005132:	2218      	movs	r2, #24
 8005134:	189b      	adds	r3, r3, r2
 8005136:	19db      	adds	r3, r3, r7
 8005138:	2204      	movs	r2, #4
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e06f      	b.n	800521e <UART_SetConfig+0x22a>
 800513e:	231b      	movs	r3, #27
 8005140:	2218      	movs	r2, #24
 8005142:	189b      	adds	r3, r3, r2
 8005144:	19db      	adds	r3, r3, r7
 8005146:	2208      	movs	r2, #8
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	e068      	b.n	800521e <UART_SetConfig+0x22a>
 800514c:	231b      	movs	r3, #27
 800514e:	2218      	movs	r2, #24
 8005150:	189b      	adds	r3, r3, r2
 8005152:	19db      	adds	r3, r3, r7
 8005154:	2210      	movs	r2, #16
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	e061      	b.n	800521e <UART_SetConfig+0x22a>
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7c      	ldr	r2, [pc, #496]	; (8005350 <UART_SetConfig+0x35c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d106      	bne.n	8005172 <UART_SetConfig+0x17e>
 8005164:	231b      	movs	r3, #27
 8005166:	2218      	movs	r2, #24
 8005168:	189b      	adds	r3, r3, r2
 800516a:	19db      	adds	r3, r3, r7
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e055      	b.n	800521e <UART_SetConfig+0x22a>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a77      	ldr	r2, [pc, #476]	; (8005354 <UART_SetConfig+0x360>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d106      	bne.n	800518a <UART_SetConfig+0x196>
 800517c:	231b      	movs	r3, #27
 800517e:	2218      	movs	r2, #24
 8005180:	189b      	adds	r3, r3, r2
 8005182:	19db      	adds	r3, r3, r7
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e049      	b.n	800521e <UART_SetConfig+0x22a>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a6b      	ldr	r2, [pc, #428]	; (800533c <UART_SetConfig+0x348>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d13e      	bne.n	8005212 <UART_SetConfig+0x21e>
 8005194:	4b6c      	ldr	r3, [pc, #432]	; (8005348 <UART_SetConfig+0x354>)
 8005196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005198:	23c0      	movs	r3, #192	; 0xc0
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4013      	ands	r3, r2
 800519e:	22c0      	movs	r2, #192	; 0xc0
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d027      	beq.n	80051f6 <UART_SetConfig+0x202>
 80051a6:	22c0      	movs	r2, #192	; 0xc0
 80051a8:	0112      	lsls	r2, r2, #4
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d82a      	bhi.n	8005204 <UART_SetConfig+0x210>
 80051ae:	2280      	movs	r2, #128	; 0x80
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d011      	beq.n	80051da <UART_SetConfig+0x1e6>
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	0112      	lsls	r2, r2, #4
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d822      	bhi.n	8005204 <UART_SetConfig+0x210>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <UART_SetConfig+0x1d8>
 80051c2:	2280      	movs	r2, #128	; 0x80
 80051c4:	00d2      	lsls	r2, r2, #3
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <UART_SetConfig+0x1f4>
 80051ca:	e01b      	b.n	8005204 <UART_SetConfig+0x210>
 80051cc:	231b      	movs	r3, #27
 80051ce:	2218      	movs	r2, #24
 80051d0:	189b      	adds	r3, r3, r2
 80051d2:	19db      	adds	r3, r3, r7
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e021      	b.n	800521e <UART_SetConfig+0x22a>
 80051da:	231b      	movs	r3, #27
 80051dc:	2218      	movs	r2, #24
 80051de:	189b      	adds	r3, r3, r2
 80051e0:	19db      	adds	r3, r3, r7
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e01a      	b.n	800521e <UART_SetConfig+0x22a>
 80051e8:	231b      	movs	r3, #27
 80051ea:	2218      	movs	r2, #24
 80051ec:	189b      	adds	r3, r3, r2
 80051ee:	19db      	adds	r3, r3, r7
 80051f0:	2204      	movs	r2, #4
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e013      	b.n	800521e <UART_SetConfig+0x22a>
 80051f6:	231b      	movs	r3, #27
 80051f8:	2218      	movs	r2, #24
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	19db      	adds	r3, r3, r7
 80051fe:	2208      	movs	r2, #8
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e00c      	b.n	800521e <UART_SetConfig+0x22a>
 8005204:	231b      	movs	r3, #27
 8005206:	2218      	movs	r2, #24
 8005208:	189b      	adds	r3, r3, r2
 800520a:	19db      	adds	r3, r3, r7
 800520c:	2210      	movs	r2, #16
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e005      	b.n	800521e <UART_SetConfig+0x22a>
 8005212:	231b      	movs	r3, #27
 8005214:	2218      	movs	r2, #24
 8005216:	189b      	adds	r3, r3, r2
 8005218:	19db      	adds	r3, r3, r7
 800521a:	2210      	movs	r2, #16
 800521c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a46      	ldr	r2, [pc, #280]	; (800533c <UART_SetConfig+0x348>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d000      	beq.n	800522a <UART_SetConfig+0x236>
 8005228:	e09a      	b.n	8005360 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800522a:	231b      	movs	r3, #27
 800522c:	2218      	movs	r2, #24
 800522e:	189b      	adds	r3, r3, r2
 8005230:	19db      	adds	r3, r3, r7
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d01d      	beq.n	8005274 <UART_SetConfig+0x280>
 8005238:	dc20      	bgt.n	800527c <UART_SetConfig+0x288>
 800523a:	2b04      	cmp	r3, #4
 800523c:	d015      	beq.n	800526a <UART_SetConfig+0x276>
 800523e:	dc1d      	bgt.n	800527c <UART_SetConfig+0x288>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <UART_SetConfig+0x256>
 8005244:	2b02      	cmp	r3, #2
 8005246:	d005      	beq.n	8005254 <UART_SetConfig+0x260>
 8005248:	e018      	b.n	800527c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800524a:	f7fd ff67 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 800524e:	0003      	movs	r3, r0
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005252:	e01c      	b.n	800528e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005254:	4b3c      	ldr	r3, [pc, #240]	; (8005348 <UART_SetConfig+0x354>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2210      	movs	r2, #16
 800525a:	4013      	ands	r3, r2
 800525c:	d002      	beq.n	8005264 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800525e:	4b3e      	ldr	r3, [pc, #248]	; (8005358 <UART_SetConfig+0x364>)
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005262:	e014      	b.n	800528e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005264:	4b3d      	ldr	r3, [pc, #244]	; (800535c <UART_SetConfig+0x368>)
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005268:	e011      	b.n	800528e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526a:	f7fd fea7 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 800526e:	0003      	movs	r3, r0
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005272:	e00c      	b.n	800528e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800527a:	e008      	b.n	800528e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005280:	231a      	movs	r3, #26
 8005282:	2218      	movs	r2, #24
 8005284:	189b      	adds	r3, r3, r2
 8005286:	19db      	adds	r3, r3, r7
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
        break;
 800528c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d100      	bne.n	8005296 <UART_SetConfig+0x2a2>
 8005294:	e133      	b.n	80054fe <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	0013      	movs	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d305      	bcc.n	80052b2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d906      	bls.n	80052c0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80052b2:	231a      	movs	r3, #26
 80052b4:	2218      	movs	r2, #24
 80052b6:	189b      	adds	r3, r3, r2
 80052b8:	19db      	adds	r3, r3, r7
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	e11e      	b.n	80054fe <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	6939      	ldr	r1, [r7, #16]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	000b      	movs	r3, r1
 80052ce:	0e1b      	lsrs	r3, r3, #24
 80052d0:	0010      	movs	r0, r2
 80052d2:	0205      	lsls	r5, r0, #8
 80052d4:	431d      	orrs	r5, r3
 80052d6:	000b      	movs	r3, r1
 80052d8:	021c      	lsls	r4, r3, #8
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68b8      	ldr	r0, [r7, #8]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	1900      	adds	r0, r0, r4
 80052ec:	4169      	adcs	r1, r5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	2300      	movs	r3, #0
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f7fa ff98 	bl	8000230 <__aeabi_uldivmod>
 8005300:	0002      	movs	r2, r0
 8005302:	000b      	movs	r3, r1
 8005304:	0013      	movs	r3, r2
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530a:	23c0      	movs	r3, #192	; 0xc0
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	429a      	cmp	r2, r3
 8005310:	d309      	bcc.n	8005326 <UART_SetConfig+0x332>
 8005312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	035b      	lsls	r3, r3, #13
 8005318:	429a      	cmp	r2, r3
 800531a:	d204      	bcs.n	8005326 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	e0eb      	b.n	80054fe <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005326:	231a      	movs	r3, #26
 8005328:	2218      	movs	r2, #24
 800532a:	189b      	adds	r3, r3, r2
 800532c:	19db      	adds	r3, r3, r7
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e0e4      	b.n	80054fe <UART_SetConfig+0x50a>
 8005334:	efff69f3 	.word	0xefff69f3
 8005338:	ffffcfff 	.word	0xffffcfff
 800533c:	40004800 	.word	0x40004800
 8005340:	fffff4ff 	.word	0xfffff4ff
 8005344:	40013800 	.word	0x40013800
 8005348:	40021000 	.word	0x40021000
 800534c:	40004400 	.word	0x40004400
 8005350:	40004c00 	.word	0x40004c00
 8005354:	40005000 	.word	0x40005000
 8005358:	003d0900 	.word	0x003d0900
 800535c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	429a      	cmp	r2, r3
 800536a:	d000      	beq.n	800536e <UART_SetConfig+0x37a>
 800536c:	e070      	b.n	8005450 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800536e:	231b      	movs	r3, #27
 8005370:	2218      	movs	r2, #24
 8005372:	189b      	adds	r3, r3, r2
 8005374:	19db      	adds	r3, r3, r7
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d822      	bhi.n	80053c2 <UART_SetConfig+0x3ce>
 800537c:	009a      	lsls	r2, r3, #2
 800537e:	4b67      	ldr	r3, [pc, #412]	; (800551c <UART_SetConfig+0x528>)
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005386:	f7fd fec9 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 800538a:	0003      	movs	r3, r0
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800538e:	e021      	b.n	80053d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005390:	f7fd feda 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 8005394:	0003      	movs	r3, r0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005398:	e01c      	b.n	80053d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800539a:	4b61      	ldr	r3, [pc, #388]	; (8005520 <UART_SetConfig+0x52c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2210      	movs	r2, #16
 80053a0:	4013      	ands	r3, r2
 80053a2:	d002      	beq.n	80053aa <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053a4:	4b5f      	ldr	r3, [pc, #380]	; (8005524 <UART_SetConfig+0x530>)
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053a8:	e014      	b.n	80053d4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80053aa:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <UART_SetConfig+0x534>)
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053ae:	e011      	b.n	80053d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b0:	f7fd fe04 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80053b4:	0003      	movs	r3, r0
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053b8:	e00c      	b.n	80053d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053c0:	e008      	b.n	80053d4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80053c6:	231a      	movs	r3, #26
 80053c8:	2218      	movs	r2, #24
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	19db      	adds	r3, r3, r7
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
        break;
 80053d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d100      	bne.n	80053dc <UART_SetConfig+0x3e8>
 80053da:	e090      	b.n	80054fe <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	005a      	lsls	r2, r3, #1
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	18d2      	adds	r2, r2, r3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	0019      	movs	r1, r3
 80053ee:	0010      	movs	r0, r2
 80053f0:	f7fa fe92 	bl	8000118 <__udivsi3>
 80053f4:	0003      	movs	r3, r0
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d921      	bls.n	8005442 <UART_SetConfig+0x44e>
 80053fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	025b      	lsls	r3, r3, #9
 8005404:	429a      	cmp	r2, r3
 8005406:	d21c      	bcs.n	8005442 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	b29a      	uxth	r2, r3
 800540c:	200e      	movs	r0, #14
 800540e:	2418      	movs	r4, #24
 8005410:	1903      	adds	r3, r0, r4
 8005412:	19db      	adds	r3, r3, r7
 8005414:	210f      	movs	r1, #15
 8005416:	438a      	bics	r2, r1
 8005418:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	b29b      	uxth	r3, r3
 8005420:	2207      	movs	r2, #7
 8005422:	4013      	ands	r3, r2
 8005424:	b299      	uxth	r1, r3
 8005426:	1903      	adds	r3, r0, r4
 8005428:	19db      	adds	r3, r3, r7
 800542a:	1902      	adds	r2, r0, r4
 800542c:	19d2      	adds	r2, r2, r7
 800542e:	8812      	ldrh	r2, [r2, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	1902      	adds	r2, r0, r4
 800543a:	19d2      	adds	r2, r2, r7
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	60da      	str	r2, [r3, #12]
 8005440:	e05d      	b.n	80054fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005442:	231a      	movs	r3, #26
 8005444:	2218      	movs	r2, #24
 8005446:	189b      	adds	r3, r3, r2
 8005448:	19db      	adds	r3, r3, r7
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e056      	b.n	80054fe <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005450:	231b      	movs	r3, #27
 8005452:	2218      	movs	r2, #24
 8005454:	189b      	adds	r3, r3, r2
 8005456:	19db      	adds	r3, r3, r7
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d822      	bhi.n	80054a4 <UART_SetConfig+0x4b0>
 800545e:	009a      	lsls	r2, r3, #2
 8005460:	4b32      	ldr	r3, [pc, #200]	; (800552c <UART_SetConfig+0x538>)
 8005462:	18d3      	adds	r3, r2, r3
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005468:	f7fd fe58 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 800546c:	0003      	movs	r3, r0
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005470:	e021      	b.n	80054b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005472:	f7fd fe69 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 8005476:	0003      	movs	r3, r0
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800547a:	e01c      	b.n	80054b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547c:	4b28      	ldr	r3, [pc, #160]	; (8005520 <UART_SetConfig+0x52c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2210      	movs	r2, #16
 8005482:	4013      	ands	r3, r2
 8005484:	d002      	beq.n	800548c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <UART_SetConfig+0x530>)
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800548a:	e014      	b.n	80054b6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800548c:	4b26      	ldr	r3, [pc, #152]	; (8005528 <UART_SetConfig+0x534>)
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005490:	e011      	b.n	80054b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005492:	f7fd fd93 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8005496:	0003      	movs	r3, r0
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800549a:	e00c      	b.n	80054b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054a2:	e008      	b.n	80054b6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054a8:	231a      	movs	r3, #26
 80054aa:	2218      	movs	r2, #24
 80054ac:	189b      	adds	r3, r3, r2
 80054ae:	19db      	adds	r3, r3, r7
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
        break;
 80054b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	085a      	lsrs	r2, r3, #1
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	18d2      	adds	r2, r2, r3
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	0019      	movs	r1, r3
 80054cc:	0010      	movs	r0, r2
 80054ce:	f7fa fe23 	bl	8000118 <__udivsi3>
 80054d2:	0003      	movs	r3, r0
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	2b0f      	cmp	r3, #15
 80054da:	d90a      	bls.n	80054f2 <UART_SetConfig+0x4fe>
 80054dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	025b      	lsls	r3, r3, #9
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d205      	bcs.n	80054f2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60da      	str	r2, [r3, #12]
 80054f0:	e005      	b.n	80054fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80054f2:	231a      	movs	r3, #26
 80054f4:	2218      	movs	r2, #24
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	19db      	adds	r3, r3, r7
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2200      	movs	r2, #0
 8005502:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2200      	movs	r2, #0
 8005508:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800550a:	231a      	movs	r3, #26
 800550c:	2218      	movs	r2, #24
 800550e:	189b      	adds	r3, r3, r2
 8005510:	19db      	adds	r3, r3, r7
 8005512:	781b      	ldrb	r3, [r3, #0]
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b00e      	add	sp, #56	; 0x38
 800551a:	bdb0      	pop	{r4, r5, r7, pc}
 800551c:	08006f78 	.word	0x08006f78
 8005520:	40021000 	.word	0x40021000
 8005524:	003d0900 	.word	0x003d0900
 8005528:	00f42400 	.word	0x00f42400
 800552c:	08006f9c 	.word	0x08006f9c

08005530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2201      	movs	r2, #1
 800553e:	4013      	ands	r3, r2
 8005540:	d00b      	beq.n	800555a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a4a      	ldr	r2, [pc, #296]	; (8005674 <UART_AdvFeatureConfig+0x144>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2202      	movs	r2, #2
 8005560:	4013      	ands	r3, r2
 8005562:	d00b      	beq.n	800557c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	4a43      	ldr	r2, [pc, #268]	; (8005678 <UART_AdvFeatureConfig+0x148>)
 800556c:	4013      	ands	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2204      	movs	r2, #4
 8005582:	4013      	ands	r3, r2
 8005584:	d00b      	beq.n	800559e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	4a3b      	ldr	r2, [pc, #236]	; (800567c <UART_AdvFeatureConfig+0x14c>)
 800558e:	4013      	ands	r3, r2
 8005590:	0019      	movs	r1, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2208      	movs	r2, #8
 80055a4:	4013      	ands	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4a34      	ldr	r2, [pc, #208]	; (8005680 <UART_AdvFeatureConfig+0x150>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	0019      	movs	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2210      	movs	r2, #16
 80055c6:	4013      	ands	r3, r2
 80055c8:	d00b      	beq.n	80055e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <UART_AdvFeatureConfig+0x154>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	0019      	movs	r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2220      	movs	r2, #32
 80055e8:	4013      	ands	r3, r2
 80055ea:	d00b      	beq.n	8005604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	4a25      	ldr	r2, [pc, #148]	; (8005688 <UART_AdvFeatureConfig+0x158>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	0019      	movs	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2240      	movs	r2, #64	; 0x40
 800560a:	4013      	ands	r3, r2
 800560c:	d01d      	beq.n	800564a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <UART_AdvFeatureConfig+0x15c>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	035b      	lsls	r3, r3, #13
 800562e:	429a      	cmp	r2, r3
 8005630:	d10b      	bne.n	800564a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a15      	ldr	r2, [pc, #84]	; (8005690 <UART_AdvFeatureConfig+0x160>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	4013      	ands	r3, r2
 8005652:	d00b      	beq.n	800566c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4a0e      	ldr	r2, [pc, #56]	; (8005694 <UART_AdvFeatureConfig+0x164>)
 800565c:	4013      	ands	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }
}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}
 8005674:	fffdffff 	.word	0xfffdffff
 8005678:	fffeffff 	.word	0xfffeffff
 800567c:	fffbffff 	.word	0xfffbffff
 8005680:	ffff7fff 	.word	0xffff7fff
 8005684:	ffffefff 	.word	0xffffefff
 8005688:	ffffdfff 	.word	0xffffdfff
 800568c:	ffefffff 	.word	0xffefffff
 8005690:	ff9fffff 	.word	0xff9fffff
 8005694:	fff7ffff 	.word	0xfff7ffff

08005698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b092      	sub	sp, #72	; 0x48
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2284      	movs	r2, #132	; 0x84
 80056a4:	2100      	movs	r1, #0
 80056a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a8:	f7fc fc20 	bl	8001eec <HAL_GetTick>
 80056ac:	0003      	movs	r3, r0
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2208      	movs	r2, #8
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d12c      	bne.n	8005718 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c0:	2280      	movs	r2, #128	; 0x80
 80056c2:	0391      	lsls	r1, r2, #14
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4a46      	ldr	r2, [pc, #280]	; (80057e0 <UART_CheckIdleState+0x148>)
 80056c8:	9200      	str	r2, [sp, #0]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f000 f88c 	bl	80057e8 <UART_WaitOnFlagUntilTimeout>
 80056d0:	1e03      	subs	r3, r0, #0
 80056d2:	d021      	beq.n	8005718 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d4:	f3ef 8310 	mrs	r3, PRIMASK
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80056de:	2301      	movs	r3, #1
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	f383 8810 	msr	PRIMASK, r3
}
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	438a      	bics	r2, r1
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	f383 8810 	msr	PRIMASK, r3
}
 8005704:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2278      	movs	r2, #120	; 0x78
 8005710:	2100      	movs	r1, #0
 8005712:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e05f      	b.n	80057d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2204      	movs	r2, #4
 8005720:	4013      	ands	r3, r2
 8005722:	2b04      	cmp	r3, #4
 8005724:	d146      	bne.n	80057b4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	2280      	movs	r2, #128	; 0x80
 800572a:	03d1      	lsls	r1, r2, #15
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4a2c      	ldr	r2, [pc, #176]	; (80057e0 <UART_CheckIdleState+0x148>)
 8005730:	9200      	str	r2, [sp, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	f000 f858 	bl	80057e8 <UART_WaitOnFlagUntilTimeout>
 8005738:	1e03      	subs	r3, r0, #0
 800573a:	d03b      	beq.n	80057b4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8310 	mrs	r3, PRIMASK
 8005740:	60fb      	str	r3, [r7, #12]
  return(result);
 8005742:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
 8005746:	2301      	movs	r3, #1
 8005748:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4921      	ldr	r1, [pc, #132]	; (80057e4 <UART_CheckIdleState+0x14c>)
 800575e:	400a      	ands	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f383 8810 	msr	PRIMASK, r3
}
 800576c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576e:	f3ef 8310 	mrs	r3, PRIMASK
 8005772:	61bb      	str	r3, [r7, #24]
  return(result);
 8005774:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
 8005778:	2301      	movs	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f383 8810 	msr	PRIMASK, r3
}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2101      	movs	r1, #1
 8005790:	438a      	bics	r2, r1
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f383 8810 	msr	PRIMASK, r3
}
 800579e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2280      	movs	r2, #128	; 0x80
 80057a4:	2120      	movs	r1, #32
 80057a6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2278      	movs	r2, #120	; 0x78
 80057ac:	2100      	movs	r1, #0
 80057ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e011      	b.n	80057d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2280      	movs	r2, #128	; 0x80
 80057be:	2120      	movs	r1, #32
 80057c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2278      	movs	r2, #120	; 0x78
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b010      	add	sp, #64	; 0x40
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	01ffffff 	.word	0x01ffffff
 80057e4:	fffffedf 	.word	0xfffffedf

080057e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	1dfb      	adds	r3, r7, #7
 80057f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f8:	e04b      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	3301      	adds	r3, #1
 80057fe:	d048      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7fc fb74 	bl	8001eec <HAL_GetTick>
 8005804:	0002      	movs	r2, r0
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e04b      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2204      	movs	r2, #4
 8005822:	4013      	ands	r3, r2
 8005824:	d035      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	2208      	movs	r2, #8
 800582e:	4013      	ands	r3, r2
 8005830:	2b08      	cmp	r3, #8
 8005832:	d111      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2208      	movs	r2, #8
 800583a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	0018      	movs	r0, r3
 8005840:	f000 f906 	bl	8005a50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2284      	movs	r2, #132	; 0x84
 8005848:	2108      	movs	r1, #8
 800584a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2278      	movs	r2, #120	; 0x78
 8005850:	2100      	movs	r1, #0
 8005852:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e02c      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	401a      	ands	r2, r3
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	429a      	cmp	r2, r3
 800586a:	d112      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	0018      	movs	r0, r3
 800587a:	f000 f8e9 	bl	8005a50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2284      	movs	r2, #132	; 0x84
 8005882:	2120      	movs	r1, #32
 8005884:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2278      	movs	r2, #120	; 0x78
 800588a:	2100      	movs	r1, #0
 800588c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e00f      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	425a      	negs	r2, r3
 80058a2:	4153      	adcs	r3, r2
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	001a      	movs	r2, r3
 80058a8:	1dfb      	adds	r3, r7, #7
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d0a4      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	0018      	movs	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b004      	add	sp, #16
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b090      	sub	sp, #64	; 0x40
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	1dbb      	adds	r3, r7, #6
 80058c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1dba      	adds	r2, r7, #6
 80058d4:	2158      	movs	r1, #88	; 0x58
 80058d6:	8812      	ldrh	r2, [r2, #0]
 80058d8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1dba      	adds	r2, r7, #6
 80058de:	215a      	movs	r1, #90	; 0x5a
 80058e0:	8812      	ldrh	r2, [r2, #0]
 80058e2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	015b      	lsls	r3, r3, #5
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d10d      	bne.n	8005912 <UART_Start_Receive_IT+0x56>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <UART_Start_Receive_IT+0x4c>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	225c      	movs	r2, #92	; 0x5c
 8005902:	4950      	ldr	r1, [pc, #320]	; (8005a44 <UART_Start_Receive_IT+0x188>)
 8005904:	5299      	strh	r1, [r3, r2]
 8005906:	e02e      	b.n	8005966 <UART_Start_Receive_IT+0xaa>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	225c      	movs	r2, #92	; 0x5c
 800590c:	21ff      	movs	r1, #255	; 0xff
 800590e:	5299      	strh	r1, [r3, r2]
 8005910:	e029      	b.n	8005966 <UART_Start_Receive_IT+0xaa>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10d      	bne.n	8005936 <UART_Start_Receive_IT+0x7a>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <UART_Start_Receive_IT+0x70>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	225c      	movs	r2, #92	; 0x5c
 8005926:	21ff      	movs	r1, #255	; 0xff
 8005928:	5299      	strh	r1, [r3, r2]
 800592a:	e01c      	b.n	8005966 <UART_Start_Receive_IT+0xaa>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	225c      	movs	r2, #92	; 0x5c
 8005930:	217f      	movs	r1, #127	; 0x7f
 8005932:	5299      	strh	r1, [r3, r2]
 8005934:	e017      	b.n	8005966 <UART_Start_Receive_IT+0xaa>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	055b      	lsls	r3, r3, #21
 800593e:	429a      	cmp	r2, r3
 8005940:	d10d      	bne.n	800595e <UART_Start_Receive_IT+0xa2>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <UART_Start_Receive_IT+0x98>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	225c      	movs	r2, #92	; 0x5c
 800594e:	217f      	movs	r1, #127	; 0x7f
 8005950:	5299      	strh	r1, [r3, r2]
 8005952:	e008      	b.n	8005966 <UART_Start_Receive_IT+0xaa>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	225c      	movs	r2, #92	; 0x5c
 8005958:	213f      	movs	r1, #63	; 0x3f
 800595a:	5299      	strh	r1, [r3, r2]
 800595c:	e003      	b.n	8005966 <UART_Start_Receive_IT+0xaa>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	225c      	movs	r2, #92	; 0x5c
 8005962:	2100      	movs	r1, #0
 8005964:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2284      	movs	r2, #132	; 0x84
 800596a:	2100      	movs	r1, #0
 800596c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	2122      	movs	r1, #34	; 0x22
 8005974:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005976:	f3ef 8310 	mrs	r3, PRIMASK
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005980:	2301      	movs	r3, #1
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2101      	movs	r1, #1
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]
 800599c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	015b      	lsls	r3, r3, #5
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d107      	bne.n	80059c4 <UART_Start_Receive_IT+0x108>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <UART_Start_Receive_IT+0x18c>)
 80059c0:	669a      	str	r2, [r3, #104]	; 0x68
 80059c2:	e002      	b.n	80059ca <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a21      	ldr	r2, [pc, #132]	; (8005a4c <UART_Start_Receive_IT+0x190>)
 80059c8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d019      	beq.n	8005a06 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d2:	f3ef 8310 	mrs	r3, PRIMASK
 80059d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80059d8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80059da:	637b      	str	r3, [r7, #52]	; 0x34
 80059dc:	2301      	movs	r3, #1
 80059de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	f383 8810 	msr	PRIMASK, r3
}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2190      	movs	r1, #144	; 0x90
 80059f4:	0049      	lsls	r1, r1, #1
 80059f6:	430a      	orrs	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	f383 8810 	msr	PRIMASK, r3
}
 8005a04:	e018      	b.n	8005a38 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a06:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a0c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f383 8810 	msr	PRIMASK, r3
}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2120      	movs	r1, #32
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f383 8810 	msr	PRIMASK, r3
}
 8005a36:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b010      	add	sp, #64	; 0x40
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	000001ff 	.word	0x000001ff
 8005a48:	08005d61 	.word	0x08005d61
 8005a4c:	08005b9d 	.word	0x08005b9d

08005a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08e      	sub	sp, #56	; 0x38
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a58:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
 8005a62:	2301      	movs	r3, #1
 8005a64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f383 8810 	msr	PRIMASK, r3
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4926      	ldr	r1, [pc, #152]	; (8005b14 <UART_EndRxTransfer+0xc4>)
 8005a7a:	400a      	ands	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8e:	623b      	str	r3, [r7, #32]
  return(result);
 8005a90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	633b      	str	r3, [r7, #48]	; 0x30
 8005a94:	2301      	movs	r3, #1
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	f383 8810 	msr	PRIMASK, r3
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2101      	movs	r1, #1
 8005aac:	438a      	bics	r2, r1
 8005aae:	609a      	str	r2, [r3, #8]
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d118      	bne.n	8005af6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ace:	2301      	movs	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f383 8810 	msr	PRIMASK, r3
}
 8005ad8:	46c0      	nop			; (mov r8, r8)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2110      	movs	r1, #16
 8005ae6:	438a      	bics	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f383 8810 	msr	PRIMASK, r3
}
 8005af4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2280      	movs	r2, #128	; 0x80
 8005afa:	2120      	movs	r1, #32
 8005afc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b00e      	add	sp, #56	; 0x38
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	fffffedf 	.word	0xfffffedf

08005b18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	225a      	movs	r2, #90	; 0x5a
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2252      	movs	r2, #82	; 0x52
 8005b32:	2100      	movs	r1, #0
 8005b34:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7ff fa47 	bl	8004fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b004      	add	sp, #16
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f383 8810 	msr	PRIMASK, r3
}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2140      	movs	r1, #64	; 0x40
 8005b70:	438a      	bics	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f383 8810 	msr	PRIMASK, r3
}
 8005b7e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f7ff fa14 	bl	8004fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b94:	46c0      	nop			; (mov r8, r8)
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b006      	add	sp, #24
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b094      	sub	sp, #80	; 0x50
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ba4:	204e      	movs	r0, #78	; 0x4e
 8005ba6:	183b      	adds	r3, r7, r0
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	215c      	movs	r1, #92	; 0x5c
 8005bac:	5a52      	ldrh	r2, [r2, r1]
 8005bae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	589b      	ldr	r3, [r3, r2]
 8005bb6:	2b22      	cmp	r3, #34	; 0x22
 8005bb8:	d000      	beq.n	8005bbc <UART_RxISR_8BIT+0x20>
 8005bba:	e0bf      	b.n	8005d3c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bc2:	214c      	movs	r1, #76	; 0x4c
 8005bc4:	187b      	adds	r3, r7, r1
 8005bc6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bc8:	187b      	adds	r3, r7, r1
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	183b      	adds	r3, r7, r0
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b2d9      	uxtb	r1, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	400a      	ands	r2, r1
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	225a      	movs	r2, #90	; 0x5a
 8005bec:	5a9b      	ldrh	r3, [r3, r2]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	225a      	movs	r2, #90	; 0x5a
 8005bf8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	225a      	movs	r2, #90	; 0x5a
 8005bfe:	5a9b      	ldrh	r3, [r3, r2]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d000      	beq.n	8005c08 <UART_RxISR_8BIT+0x6c>
 8005c06:	e0a1      	b.n	8005d4c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c08:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c12:	2301      	movs	r3, #1
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	f383 8810 	msr	PRIMASK, r3
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	494a      	ldr	r1, [pc, #296]	; (8005d54 <UART_RxISR_8BIT+0x1b8>)
 8005c2a:	400a      	ands	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	f383 8810 	msr	PRIMASK, r3
}
 8005c38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	647b      	str	r3, [r7, #68]	; 0x44
 8005c44:	2301      	movs	r3, #1
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4a:	f383 8810 	msr	PRIMASK, r3
}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	438a      	bics	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	f383 8810 	msr	PRIMASK, r3
}
 8005c6a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2280      	movs	r2, #128	; 0x80
 8005c70:	2120      	movs	r1, #32
 8005c72:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a34      	ldr	r2, [pc, #208]	; (8005d58 <UART_RxISR_8BIT+0x1bc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01f      	beq.n	8005cca <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	4013      	ands	r3, r2
 8005c96:	d018      	beq.n	8005cca <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c98:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f383 8810 	msr	PRIMASK, r3
}
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4928      	ldr	r1, [pc, #160]	; (8005d5c <UART_RxISR_8BIT+0x1c0>)
 8005cba:	400a      	ands	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d12f      	bne.n	8005d32 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cde:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f383 8810 	msr	PRIMASK, r3
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2110      	movs	r1, #16
 8005cfa:	438a      	bics	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f383 8810 	msr	PRIMASK, r3
}
 8005d08:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	2210      	movs	r2, #16
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d103      	bne.n	8005d20 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2258      	movs	r2, #88	; 0x58
 8005d24:	5a9a      	ldrh	r2, [r3, r2]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0011      	movs	r1, r2
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f7ff f956 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d30:	e00c      	b.n	8005d4c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7fa fbbf 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 8005d3a:	e007      	b.n	8005d4c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2108      	movs	r1, #8
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	619a      	str	r2, [r3, #24]
}
 8005d4c:	46c0      	nop			; (mov r8, r8)
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b014      	add	sp, #80	; 0x50
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	fffffedf 	.word	0xfffffedf
 8005d58:	40004800 	.word	0x40004800
 8005d5c:	fbffffff 	.word	0xfbffffff

08005d60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b094      	sub	sp, #80	; 0x50
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d68:	204e      	movs	r0, #78	; 0x4e
 8005d6a:	183b      	adds	r3, r7, r0
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	215c      	movs	r1, #92	; 0x5c
 8005d70:	5a52      	ldrh	r2, [r2, r1]
 8005d72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2280      	movs	r2, #128	; 0x80
 8005d78:	589b      	ldr	r3, [r3, r2]
 8005d7a:	2b22      	cmp	r3, #34	; 0x22
 8005d7c:	d000      	beq.n	8005d80 <UART_RxISR_16BIT+0x20>
 8005d7e:	e0bf      	b.n	8005f00 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d86:	214c      	movs	r1, #76	; 0x4c
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d92:	187b      	adds	r3, r7, r1
 8005d94:	183a      	adds	r2, r7, r0
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	8812      	ldrh	r2, [r2, #0]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	225a      	movs	r2, #90	; 0x5a
 8005db0:	5a9b      	ldrh	r3, [r3, r2]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b299      	uxth	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	225a      	movs	r2, #90	; 0x5a
 8005dbc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	225a      	movs	r2, #90	; 0x5a
 8005dc2:	5a9b      	ldrh	r3, [r3, r2]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d000      	beq.n	8005dcc <UART_RxISR_16BIT+0x6c>
 8005dca:	e0a1      	b.n	8005f10 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd0:	623b      	str	r3, [r7, #32]
  return(result);
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	f383 8810 	msr	PRIMASK, r3
}
 8005de0:	46c0      	nop			; (mov r8, r8)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	494a      	ldr	r1, [pc, #296]	; (8005f18 <UART_RxISR_16BIT+0x1b8>)
 8005dee:	400a      	ands	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	643b      	str	r3, [r7, #64]	; 0x40
 8005e08:	2301      	movs	r3, #1
 8005e0a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	f383 8810 	msr	PRIMASK, r3
}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	438a      	bics	r2, r1
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2280      	movs	r2, #128	; 0x80
 8005e34:	2120      	movs	r1, #32
 8005e36:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a34      	ldr	r2, [pc, #208]	; (8005f1c <UART_RxISR_16BIT+0x1bc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01f      	beq.n	8005e8e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e60:	617b      	str	r3, [r7, #20]
  return(result);
 8005e62:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e66:	2301      	movs	r3, #1
 8005e68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4928      	ldr	r1, [pc, #160]	; (8005f20 <UART_RxISR_16BIT+0x1c0>)
 8005e7e:	400a      	ands	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f383 8810 	msr	PRIMASK, r3
}
 8005e8c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d12f      	bne.n	8005ef6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ea2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f383 8810 	msr	PRIMASK, r3
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2110      	movs	r1, #16
 8005ebe:	438a      	bics	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f383 8810 	msr	PRIMASK, r3
}
 8005ecc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d103      	bne.n	8005ee4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2258      	movs	r2, #88	; 0x58
 8005ee8:	5a9a      	ldrh	r2, [r3, r2]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0011      	movs	r1, r2
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7ff f874 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ef4:	e00c      	b.n	8005f10 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f7fa fadd 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 8005efe:	e007      	b.n	8005f10 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2108      	movs	r1, #8
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	619a      	str	r2, [r3, #24]
}
 8005f10:	46c0      	nop			; (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b014      	add	sp, #80	; 0x50
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	fffffedf 	.word	0xfffffedf
 8005f1c:	40004800 	.word	0x40004800
 8005f20:	fbffffff 	.word	0xfbffffff

08005f24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <findslot>:
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <findslot+0x2c>)
 8005f36:	b510      	push	{r4, lr}
 8005f38:	0004      	movs	r4, r0
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d004      	beq.n	8005f4a <findslot+0x16>
 8005f40:	6a03      	ldr	r3, [r0, #32]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <findslot+0x16>
 8005f46:	f000 fbdd 	bl	8006704 <__sinit>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	2c13      	cmp	r4, #19
 8005f4e:	d805      	bhi.n	8005f5c <findslot+0x28>
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <findslot+0x30>)
 8005f52:	00e4      	lsls	r4, r4, #3
 8005f54:	58e2      	ldr	r2, [r4, r3]
 8005f56:	3201      	adds	r2, #1
 8005f58:	d000      	beq.n	8005f5c <findslot+0x28>
 8005f5a:	18e0      	adds	r0, r4, r3
 8005f5c:	bd10      	pop	{r4, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	2000006c 	.word	0x2000006c
 8005f64:	20000628 	.word	0x20000628

08005f68 <error>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	0004      	movs	r4, r0
 8005f6c:	f000 fdc6 	bl	8006afc <__errno>
 8005f70:	2613      	movs	r6, #19
 8005f72:	0005      	movs	r5, r0
 8005f74:	2700      	movs	r7, #0
 8005f76:	1c30      	adds	r0, r6, #0
 8005f78:	1c39      	adds	r1, r7, #0
 8005f7a:	beab      	bkpt	0x00ab
 8005f7c:	1c06      	adds	r6, r0, #0
 8005f7e:	602e      	str	r6, [r5, #0]
 8005f80:	0020      	movs	r0, r4
 8005f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f84 <checkerror>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d101      	bne.n	8005f8e <checkerror+0xa>
 8005f8a:	f7ff ffed 	bl	8005f68 <error>
 8005f8e:	bd10      	pop	{r4, pc}

08005f90 <_swiread>:
 8005f90:	b530      	push	{r4, r5, lr}
 8005f92:	b085      	sub	sp, #20
 8005f94:	ad01      	add	r5, sp, #4
 8005f96:	9001      	str	r0, [sp, #4]
 8005f98:	9102      	str	r1, [sp, #8]
 8005f9a:	9203      	str	r2, [sp, #12]
 8005f9c:	2406      	movs	r4, #6
 8005f9e:	1c20      	adds	r0, r4, #0
 8005fa0:	1c29      	adds	r1, r5, #0
 8005fa2:	beab      	bkpt	0x00ab
 8005fa4:	1c04      	adds	r4, r0, #0
 8005fa6:	0020      	movs	r0, r4
 8005fa8:	f7ff ffec 	bl	8005f84 <checkerror>
 8005fac:	b005      	add	sp, #20
 8005fae:	bd30      	pop	{r4, r5, pc}

08005fb0 <_read>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	000e      	movs	r6, r1
 8005fb4:	0015      	movs	r5, r2
 8005fb6:	f7ff ffbd 	bl	8005f34 <findslot>
 8005fba:	1e04      	subs	r4, r0, #0
 8005fbc:	d106      	bne.n	8005fcc <_read+0x1c>
 8005fbe:	f000 fd9d 	bl	8006afc <__errno>
 8005fc2:	2309      	movs	r3, #9
 8005fc4:	6003      	str	r3, [r0, #0]
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	4240      	negs	r0, r0
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	002a      	movs	r2, r5
 8005fce:	0031      	movs	r1, r6
 8005fd0:	6800      	ldr	r0, [r0, #0]
 8005fd2:	f7ff ffdd 	bl	8005f90 <_swiread>
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d0f7      	beq.n	8005fca <_read+0x1a>
 8005fda:	6863      	ldr	r3, [r4, #4]
 8005fdc:	1a28      	subs	r0, r5, r0
 8005fde:	181b      	adds	r3, r3, r0
 8005fe0:	6063      	str	r3, [r4, #4]
 8005fe2:	e7f2      	b.n	8005fca <_read+0x1a>

08005fe4 <_swilseek>:
 8005fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fe6:	000c      	movs	r4, r1
 8005fe8:	0016      	movs	r6, r2
 8005fea:	f7ff ffa3 	bl	8005f34 <findslot>
 8005fee:	1e05      	subs	r5, r0, #0
 8005ff0:	d107      	bne.n	8006002 <_swilseek+0x1e>
 8005ff2:	f000 fd83 	bl	8006afc <__errno>
 8005ff6:	2309      	movs	r3, #9
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	2401      	movs	r4, #1
 8005ffc:	4264      	negs	r4, r4
 8005ffe:	0020      	movs	r0, r4
 8006000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006002:	2e02      	cmp	r6, #2
 8006004:	d903      	bls.n	800600e <_swilseek+0x2a>
 8006006:	f000 fd79 	bl	8006afc <__errno>
 800600a:	2316      	movs	r3, #22
 800600c:	e7f4      	b.n	8005ff8 <_swilseek+0x14>
 800600e:	2e01      	cmp	r6, #1
 8006010:	d112      	bne.n	8006038 <_swilseek+0x54>
 8006012:	6843      	ldr	r3, [r0, #4]
 8006014:	18e4      	adds	r4, r4, r3
 8006016:	d4f6      	bmi.n	8006006 <_swilseek+0x22>
 8006018:	466f      	mov	r7, sp
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	260a      	movs	r6, #10
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	607c      	str	r4, [r7, #4]
 8006022:	1c30      	adds	r0, r6, #0
 8006024:	1c39      	adds	r1, r7, #0
 8006026:	beab      	bkpt	0x00ab
 8006028:	1c06      	adds	r6, r0, #0
 800602a:	0030      	movs	r0, r6
 800602c:	f7ff ffaa 	bl	8005f84 <checkerror>
 8006030:	2800      	cmp	r0, #0
 8006032:	dbe2      	blt.n	8005ffa <_swilseek+0x16>
 8006034:	606c      	str	r4, [r5, #4]
 8006036:	e7e2      	b.n	8005ffe <_swilseek+0x1a>
 8006038:	6803      	ldr	r3, [r0, #0]
 800603a:	2e02      	cmp	r6, #2
 800603c:	d1ec      	bne.n	8006018 <_swilseek+0x34>
 800603e:	466f      	mov	r7, sp
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	360a      	adds	r6, #10
 8006044:	1c30      	adds	r0, r6, #0
 8006046:	1c39      	adds	r1, r7, #0
 8006048:	beab      	bkpt	0x00ab
 800604a:	1c06      	adds	r6, r0, #0
 800604c:	0030      	movs	r0, r6
 800604e:	f7ff ff99 	bl	8005f84 <checkerror>
 8006052:	1824      	adds	r4, r4, r0
 8006054:	3001      	adds	r0, #1
 8006056:	d1df      	bne.n	8006018 <_swilseek+0x34>
 8006058:	e7cf      	b.n	8005ffa <_swilseek+0x16>

0800605a <_lseek>:
 800605a:	b510      	push	{r4, lr}
 800605c:	f7ff ffc2 	bl	8005fe4 <_swilseek>
 8006060:	bd10      	pop	{r4, pc}

08006062 <_swiwrite>:
 8006062:	b530      	push	{r4, r5, lr}
 8006064:	b085      	sub	sp, #20
 8006066:	ad01      	add	r5, sp, #4
 8006068:	9001      	str	r0, [sp, #4]
 800606a:	9102      	str	r1, [sp, #8]
 800606c:	9203      	str	r2, [sp, #12]
 800606e:	2405      	movs	r4, #5
 8006070:	1c20      	adds	r0, r4, #0
 8006072:	1c29      	adds	r1, r5, #0
 8006074:	beab      	bkpt	0x00ab
 8006076:	1c04      	adds	r4, r0, #0
 8006078:	0020      	movs	r0, r4
 800607a:	f7ff ff83 	bl	8005f84 <checkerror>
 800607e:	b005      	add	sp, #20
 8006080:	bd30      	pop	{r4, r5, pc}

08006082 <_write>:
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	000e      	movs	r6, r1
 8006086:	0015      	movs	r5, r2
 8006088:	f7ff ff54 	bl	8005f34 <findslot>
 800608c:	1e04      	subs	r4, r0, #0
 800608e:	d106      	bne.n	800609e <_write+0x1c>
 8006090:	f000 fd34 	bl	8006afc <__errno>
 8006094:	2309      	movs	r3, #9
 8006096:	6003      	str	r3, [r0, #0]
 8006098:	2001      	movs	r0, #1
 800609a:	4240      	negs	r0, r0
 800609c:	e00f      	b.n	80060be <_write+0x3c>
 800609e:	002a      	movs	r2, r5
 80060a0:	0031      	movs	r1, r6
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	f7ff ffdd 	bl	8006062 <_swiwrite>
 80060a8:	1e03      	subs	r3, r0, #0
 80060aa:	dbf5      	blt.n	8006098 <_write+0x16>
 80060ac:	6862      	ldr	r2, [r4, #4]
 80060ae:	1a28      	subs	r0, r5, r0
 80060b0:	1812      	adds	r2, r2, r0
 80060b2:	6062      	str	r2, [r4, #4]
 80060b4:	42ab      	cmp	r3, r5
 80060b6:	d102      	bne.n	80060be <_write+0x3c>
 80060b8:	2000      	movs	r0, #0
 80060ba:	f7ff ff55 	bl	8005f68 <error>
 80060be:	bd70      	pop	{r4, r5, r6, pc}

080060c0 <_swiclose>:
 80060c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c2:	2402      	movs	r4, #2
 80060c4:	9001      	str	r0, [sp, #4]
 80060c6:	ad01      	add	r5, sp, #4
 80060c8:	1c20      	adds	r0, r4, #0
 80060ca:	1c29      	adds	r1, r5, #0
 80060cc:	beab      	bkpt	0x00ab
 80060ce:	1c04      	adds	r4, r0, #0
 80060d0:	0020      	movs	r0, r4
 80060d2:	f7ff ff57 	bl	8005f84 <checkerror>
 80060d6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080060d8 <_close>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	0005      	movs	r5, r0
 80060dc:	f7ff ff2a 	bl	8005f34 <findslot>
 80060e0:	1e04      	subs	r4, r0, #0
 80060e2:	d106      	bne.n	80060f2 <_close+0x1a>
 80060e4:	f000 fd0a 	bl	8006afc <__errno>
 80060e8:	2309      	movs	r3, #9
 80060ea:	6003      	str	r3, [r0, #0]
 80060ec:	2001      	movs	r0, #1
 80060ee:	4240      	negs	r0, r0
 80060f0:	bd70      	pop	{r4, r5, r6, pc}
 80060f2:	3d01      	subs	r5, #1
 80060f4:	2d01      	cmp	r5, #1
 80060f6:	d809      	bhi.n	800610c <_close+0x34>
 80060f8:	4b09      	ldr	r3, [pc, #36]	; (8006120 <_close+0x48>)
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d104      	bne.n	800610c <_close+0x34>
 8006102:	2301      	movs	r3, #1
 8006104:	425b      	negs	r3, r3
 8006106:	6003      	str	r3, [r0, #0]
 8006108:	2000      	movs	r0, #0
 800610a:	e7f1      	b.n	80060f0 <_close+0x18>
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	f7ff ffd7 	bl	80060c0 <_swiclose>
 8006112:	2800      	cmp	r0, #0
 8006114:	d1ec      	bne.n	80060f0 <_close+0x18>
 8006116:	2301      	movs	r3, #1
 8006118:	425b      	negs	r3, r3
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	e7e8      	b.n	80060f0 <_close+0x18>
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	20000628 	.word	0x20000628

08006124 <_swistat>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	000c      	movs	r4, r1
 8006128:	f7ff ff04 	bl	8005f34 <findslot>
 800612c:	1e05      	subs	r5, r0, #0
 800612e:	d106      	bne.n	800613e <_swistat+0x1a>
 8006130:	f000 fce4 	bl	8006afc <__errno>
 8006134:	2309      	movs	r3, #9
 8006136:	6003      	str	r3, [r0, #0]
 8006138:	2001      	movs	r0, #1
 800613a:	4240      	negs	r0, r0
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	6862      	ldr	r2, [r4, #4]
 8006142:	019b      	lsls	r3, r3, #6
 8006144:	4313      	orrs	r3, r2
 8006146:	6063      	str	r3, [r4, #4]
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	260c      	movs	r6, #12
 800614e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006150:	1c30      	adds	r0, r6, #0
 8006152:	1c29      	adds	r1, r5, #0
 8006154:	beab      	bkpt	0x00ab
 8006156:	1c05      	adds	r5, r0, #0
 8006158:	0028      	movs	r0, r5
 800615a:	f7ff ff13 	bl	8005f84 <checkerror>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	d0ec      	beq.n	800613c <_swistat+0x18>
 8006162:	6120      	str	r0, [r4, #16]
 8006164:	2000      	movs	r0, #0
 8006166:	e7e9      	b.n	800613c <_swistat+0x18>

08006168 <_fstat>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	000c      	movs	r4, r1
 800616c:	0005      	movs	r5, r0
 800616e:	2258      	movs	r2, #88	; 0x58
 8006170:	2100      	movs	r1, #0
 8006172:	0020      	movs	r0, r4
 8006174:	f000 fc4c 	bl	8006a10 <memset>
 8006178:	0028      	movs	r0, r5
 800617a:	0021      	movs	r1, r4
 800617c:	f7ff ffd2 	bl	8006124 <_swistat>
 8006180:	bd70      	pop	{r4, r5, r6, pc}

08006182 <_stat>:
 8006182:	b570      	push	{r4, r5, r6, lr}
 8006184:	000d      	movs	r5, r1
 8006186:	0004      	movs	r4, r0
 8006188:	2258      	movs	r2, #88	; 0x58
 800618a:	2100      	movs	r1, #0
 800618c:	0028      	movs	r0, r5
 800618e:	f000 fc3f 	bl	8006a10 <memset>
 8006192:	0020      	movs	r0, r4
 8006194:	2100      	movs	r1, #0
 8006196:	f000 f813 	bl	80061c0 <_swiopen>
 800619a:	0004      	movs	r4, r0
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d00c      	beq.n	80061ba <_stat+0x38>
 80061a0:	2381      	movs	r3, #129	; 0x81
 80061a2:	686a      	ldr	r2, [r5, #4]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	4313      	orrs	r3, r2
 80061a8:	0029      	movs	r1, r5
 80061aa:	606b      	str	r3, [r5, #4]
 80061ac:	f7ff ffba 	bl	8006124 <_swistat>
 80061b0:	0005      	movs	r5, r0
 80061b2:	0020      	movs	r0, r4
 80061b4:	f7ff ff90 	bl	80060d8 <_close>
 80061b8:	002c      	movs	r4, r5
 80061ba:	0020      	movs	r0, r4
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080061c0 <_swiopen>:
 80061c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c2:	000d      	movs	r5, r1
 80061c4:	2600      	movs	r6, #0
 80061c6:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <_swiopen+0xb4>)
 80061c8:	b09b      	sub	sp, #108	; 0x6c
 80061ca:	9001      	str	r0, [sp, #4]
 80061cc:	9302      	str	r3, [sp, #8]
 80061ce:	00f3      	lsls	r3, r6, #3
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	9b02      	ldr	r3, [sp, #8]
 80061d4:	00f2      	lsls	r2, r6, #3
 80061d6:	589c      	ldr	r4, [r3, r2]
 80061d8:	1c63      	adds	r3, r4, #1
 80061da:	d036      	beq.n	800624a <_swiopen+0x8a>
 80061dc:	3601      	adds	r6, #1
 80061de:	2e14      	cmp	r6, #20
 80061e0:	d1f5      	bne.n	80061ce <_swiopen+0xe>
 80061e2:	f000 fc8b 	bl	8006afc <__errno>
 80061e6:	2401      	movs	r4, #1
 80061e8:	2318      	movs	r3, #24
 80061ea:	4264      	negs	r4, r4
 80061ec:	6003      	str	r3, [r0, #0]
 80061ee:	e03d      	b.n	800626c <_swiopen+0xac>
 80061f0:	2302      	movs	r3, #2
 80061f2:	03ec      	lsls	r4, r5, #15
 80061f4:	0fe4      	lsrs	r4, r4, #31
 80061f6:	421d      	tst	r5, r3
 80061f8:	d000      	beq.n	80061fc <_swiopen+0x3c>
 80061fa:	431c      	orrs	r4, r3
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <_swiopen+0xb8>)
 80061fe:	421d      	tst	r5, r3
 8006200:	d001      	beq.n	8006206 <_swiopen+0x46>
 8006202:	2304      	movs	r3, #4
 8006204:	431c      	orrs	r4, r3
 8006206:	2308      	movs	r3, #8
 8006208:	421d      	tst	r5, r3
 800620a:	d002      	beq.n	8006212 <_swiopen+0x52>
 800620c:	2204      	movs	r2, #4
 800620e:	4394      	bics	r4, r2
 8006210:	431c      	orrs	r4, r3
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	0018      	movs	r0, r3
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	f7f9 ff76 	bl	8000108 <strlen>
 800621c:	607c      	str	r4, [r7, #4]
 800621e:	60b8      	str	r0, [r7, #8]
 8006220:	2401      	movs	r4, #1
 8006222:	1c20      	adds	r0, r4, #0
 8006224:	1c39      	adds	r1, r7, #0
 8006226:	beab      	bkpt	0x00ab
 8006228:	1c04      	adds	r4, r0, #0
 800622a:	2c00      	cmp	r4, #0
 800622c:	db08      	blt.n	8006240 <_swiopen+0x80>
 800622e:	00f2      	lsls	r2, r6, #3
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	4694      	mov	ip, r2
 8006234:	509c      	str	r4, [r3, r2]
 8006236:	2200      	movs	r2, #0
 8006238:	4463      	add	r3, ip
 800623a:	0034      	movs	r4, r6
 800623c:	605a      	str	r2, [r3, #4]
 800623e:	e015      	b.n	800626c <_swiopen+0xac>
 8006240:	0020      	movs	r0, r4
 8006242:	f7ff fe91 	bl	8005f68 <error>
 8006246:	0004      	movs	r4, r0
 8006248:	e010      	b.n	800626c <_swiopen+0xac>
 800624a:	23a0      	movs	r3, #160	; 0xa0
 800624c:	002a      	movs	r2, r5
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	401a      	ands	r2, r3
 8006252:	af04      	add	r7, sp, #16
 8006254:	429a      	cmp	r2, r3
 8006256:	d1cb      	bne.n	80061f0 <_swiopen+0x30>
 8006258:	0039      	movs	r1, r7
 800625a:	9801      	ldr	r0, [sp, #4]
 800625c:	f7ff ff91 	bl	8006182 <_stat>
 8006260:	3001      	adds	r0, #1
 8006262:	d0c5      	beq.n	80061f0 <_swiopen+0x30>
 8006264:	f000 fc4a 	bl	8006afc <__errno>
 8006268:	2311      	movs	r3, #17
 800626a:	6003      	str	r3, [r0, #0]
 800626c:	0020      	movs	r0, r4
 800626e:	b01b      	add	sp, #108	; 0x6c
 8006270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	20000628 	.word	0x20000628
 8006278:	00000601 	.word	0x00000601

0800627c <_get_semihosting_exts>:
 800627c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627e:	b085      	sub	sp, #20
 8006280:	9000      	str	r0, [sp, #0]
 8006282:	9101      	str	r1, [sp, #4]
 8006284:	4827      	ldr	r0, [pc, #156]	; (8006324 <_get_semihosting_exts+0xa8>)
 8006286:	2100      	movs	r1, #0
 8006288:	0015      	movs	r5, r2
 800628a:	f7ff ff99 	bl	80061c0 <_swiopen>
 800628e:	0004      	movs	r4, r0
 8006290:	002a      	movs	r2, r5
 8006292:	2100      	movs	r1, #0
 8006294:	9800      	ldr	r0, [sp, #0]
 8006296:	f000 fbbb 	bl	8006a10 <memset>
 800629a:	1c63      	adds	r3, r4, #1
 800629c:	d015      	beq.n	80062ca <_get_semihosting_exts+0x4e>
 800629e:	0020      	movs	r0, r4
 80062a0:	f7ff fe48 	bl	8005f34 <findslot>
 80062a4:	260c      	movs	r6, #12
 80062a6:	0007      	movs	r7, r0
 80062a8:	1c30      	adds	r0, r6, #0
 80062aa:	1c39      	adds	r1, r7, #0
 80062ac:	beab      	bkpt	0x00ab
 80062ae:	1c06      	adds	r6, r0, #0
 80062b0:	0030      	movs	r0, r6
 80062b2:	f7ff fe67 	bl	8005f84 <checkerror>
 80062b6:	2803      	cmp	r0, #3
 80062b8:	dd02      	ble.n	80062c0 <_get_semihosting_exts+0x44>
 80062ba:	3803      	subs	r0, #3
 80062bc:	42a8      	cmp	r0, r5
 80062be:	dc07      	bgt.n	80062d0 <_get_semihosting_exts+0x54>
 80062c0:	0020      	movs	r0, r4
 80062c2:	2401      	movs	r4, #1
 80062c4:	f7ff ff08 	bl	80060d8 <_close>
 80062c8:	4264      	negs	r4, r4
 80062ca:	0020      	movs	r0, r4
 80062cc:	b005      	add	sp, #20
 80062ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d0:	ae03      	add	r6, sp, #12
 80062d2:	2204      	movs	r2, #4
 80062d4:	0031      	movs	r1, r6
 80062d6:	0020      	movs	r0, r4
 80062d8:	f7ff fe6a 	bl	8005fb0 <_read>
 80062dc:	2803      	cmp	r0, #3
 80062de:	ddef      	ble.n	80062c0 <_get_semihosting_exts+0x44>
 80062e0:	7833      	ldrb	r3, [r6, #0]
 80062e2:	2b53      	cmp	r3, #83	; 0x53
 80062e4:	d1ec      	bne.n	80062c0 <_get_semihosting_exts+0x44>
 80062e6:	7873      	ldrb	r3, [r6, #1]
 80062e8:	2b48      	cmp	r3, #72	; 0x48
 80062ea:	d1e9      	bne.n	80062c0 <_get_semihosting_exts+0x44>
 80062ec:	78b3      	ldrb	r3, [r6, #2]
 80062ee:	2b46      	cmp	r3, #70	; 0x46
 80062f0:	d1e6      	bne.n	80062c0 <_get_semihosting_exts+0x44>
 80062f2:	78f3      	ldrb	r3, [r6, #3]
 80062f4:	2b42      	cmp	r3, #66	; 0x42
 80062f6:	d1e3      	bne.n	80062c0 <_get_semihosting_exts+0x44>
 80062f8:	2201      	movs	r2, #1
 80062fa:	0020      	movs	r0, r4
 80062fc:	9901      	ldr	r1, [sp, #4]
 80062fe:	f7ff fe71 	bl	8005fe4 <_swilseek>
 8006302:	2800      	cmp	r0, #0
 8006304:	dbdc      	blt.n	80062c0 <_get_semihosting_exts+0x44>
 8006306:	002a      	movs	r2, r5
 8006308:	9900      	ldr	r1, [sp, #0]
 800630a:	0020      	movs	r0, r4
 800630c:	f7ff fe50 	bl	8005fb0 <_read>
 8006310:	0005      	movs	r5, r0
 8006312:	0020      	movs	r0, r4
 8006314:	f7ff fee0 	bl	80060d8 <_close>
 8006318:	0028      	movs	r0, r5
 800631a:	f7ff fe33 	bl	8005f84 <checkerror>
 800631e:	0004      	movs	r4, r0
 8006320:	e7d3      	b.n	80062ca <_get_semihosting_exts+0x4e>
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	08006fc0 	.word	0x08006fc0

08006328 <initialise_semihosting_exts>:
 8006328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800632a:	2401      	movs	r4, #1
 800632c:	2100      	movs	r1, #0
 800632e:	4e09      	ldr	r6, [pc, #36]	; (8006354 <initialise_semihosting_exts+0x2c>)
 8006330:	4d09      	ldr	r5, [pc, #36]	; (8006358 <initialise_semihosting_exts+0x30>)
 8006332:	af01      	add	r7, sp, #4
 8006334:	0022      	movs	r2, r4
 8006336:	0038      	movs	r0, r7
 8006338:	6031      	str	r1, [r6, #0]
 800633a:	602c      	str	r4, [r5, #0]
 800633c:	f7ff ff9e 	bl	800627c <_get_semihosting_exts>
 8006340:	2800      	cmp	r0, #0
 8006342:	dd05      	ble.n	8006350 <initialise_semihosting_exts+0x28>
 8006344:	2202      	movs	r2, #2
 8006346:	783b      	ldrb	r3, [r7, #0]
 8006348:	401c      	ands	r4, r3
 800634a:	4013      	ands	r3, r2
 800634c:	6034      	str	r4, [r6, #0]
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	2000000c 	.word	0x2000000c
 8006358:	20000010 	.word	0x20000010

0800635c <_has_ext_stdout_stderr>:
 800635c:	b510      	push	{r4, lr}
 800635e:	4c04      	ldr	r4, [pc, #16]	; (8006370 <_has_ext_stdout_stderr+0x14>)
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	da01      	bge.n	800636a <_has_ext_stdout_stderr+0xe>
 8006366:	f7ff ffdf 	bl	8006328 <initialise_semihosting_exts>
 800636a:	6820      	ldr	r0, [r4, #0]
 800636c:	bd10      	pop	{r4, pc}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	20000010 	.word	0x20000010

08006374 <initialise_monitor_handles>:
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	4b28      	ldr	r3, [pc, #160]	; (8006418 <initialise_monitor_handles+0xa4>)
 8006378:	b087      	sub	sp, #28
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	2500      	movs	r5, #0
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2303      	movs	r3, #3
 8006382:	ac03      	add	r4, sp, #12
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	2601      	movs	r6, #1
 8006388:	6065      	str	r5, [r4, #4]
 800638a:	1c30      	adds	r0, r6, #0
 800638c:	1c21      	adds	r1, r4, #0
 800638e:	beab      	bkpt	0x00ab
 8006390:	1c06      	adds	r6, r0, #0
 8006392:	2101      	movs	r1, #1
 8006394:	4b21      	ldr	r3, [pc, #132]	; (800641c <initialise_monitor_handles+0xa8>)
 8006396:	4249      	negs	r1, r1
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	601e      	str	r6, [r3, #0]
 800639c:	002b      	movs	r3, r5
 800639e:	4d20      	ldr	r5, [pc, #128]	; (8006420 <initialise_monitor_handles+0xac>)
 80063a0:	00da      	lsls	r2, r3, #3
 80063a2:	3301      	adds	r3, #1
 80063a4:	50a9      	str	r1, [r5, r2]
 80063a6:	2b14      	cmp	r3, #20
 80063a8:	d1fa      	bne.n	80063a0 <initialise_monitor_handles+0x2c>
 80063aa:	f7ff ffd7 	bl	800635c <_has_ext_stdout_stderr>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d018      	beq.n	80063e4 <initialise_monitor_handles+0x70>
 80063b2:	9b00      	ldr	r3, [sp, #0]
 80063b4:	2601      	movs	r6, #1
 80063b6:	9303      	str	r3, [sp, #12]
 80063b8:	2303      	movs	r3, #3
 80063ba:	60a3      	str	r3, [r4, #8]
 80063bc:	3301      	adds	r3, #1
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	1c30      	adds	r0, r6, #0
 80063c2:	1c21      	adds	r1, r4, #0
 80063c4:	beab      	bkpt	0x00ab
 80063c6:	1c07      	adds	r7, r0, #0
 80063c8:	4b16      	ldr	r3, [pc, #88]	; (8006424 <initialise_monitor_handles+0xb0>)
 80063ca:	9a00      	ldr	r2, [sp, #0]
 80063cc:	601f      	str	r7, [r3, #0]
 80063ce:	2303      	movs	r3, #3
 80063d0:	9203      	str	r2, [sp, #12]
 80063d2:	60a3      	str	r3, [r4, #8]
 80063d4:	3305      	adds	r3, #5
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	1c30      	adds	r0, r6, #0
 80063da:	1c21      	adds	r1, r4, #0
 80063dc:	beab      	bkpt	0x00ab
 80063de:	1c06      	adds	r6, r0, #0
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <initialise_monitor_handles+0xb4>)
 80063e2:	601e      	str	r6, [r3, #0]
 80063e4:	4e10      	ldr	r6, [pc, #64]	; (8006428 <initialise_monitor_handles+0xb4>)
 80063e6:	6833      	ldr	r3, [r6, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	d102      	bne.n	80063f2 <initialise_monitor_handles+0x7e>
 80063ec:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <initialise_monitor_handles+0xb0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6033      	str	r3, [r6, #0]
 80063f2:	2400      	movs	r4, #0
 80063f4:	9b01      	ldr	r3, [sp, #4]
 80063f6:	606c      	str	r4, [r5, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7ff ffae 	bl	800635c <_has_ext_stdout_stderr>
 8006400:	42a0      	cmp	r0, r4
 8006402:	d006      	beq.n	8006412 <initialise_monitor_handles+0x9e>
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <initialise_monitor_handles+0xb0>)
 8006406:	60ec      	str	r4, [r5, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	616c      	str	r4, [r5, #20]
 800640c:	60ab      	str	r3, [r5, #8]
 800640e:	6833      	ldr	r3, [r6, #0]
 8006410:	612b      	str	r3, [r5, #16]
 8006412:	b007      	add	sp, #28
 8006414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	08006fd6 	.word	0x08006fd6
 800641c:	20000620 	.word	0x20000620
 8006420:	20000628 	.word	0x20000628
 8006424:	20000624 	.word	0x20000624
 8006428:	2000061c 	.word	0x2000061c

0800642c <_isatty>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	f7ff fd81 	bl	8005f34 <findslot>
 8006432:	2509      	movs	r5, #9
 8006434:	1e04      	subs	r4, r0, #0
 8006436:	d104      	bne.n	8006442 <_isatty+0x16>
 8006438:	f000 fb60 	bl	8006afc <__errno>
 800643c:	6005      	str	r5, [r0, #0]
 800643e:	0020      	movs	r0, r4
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	1c28      	adds	r0, r5, #0
 8006444:	1c21      	adds	r1, r4, #0
 8006446:	beab      	bkpt	0x00ab
 8006448:	1c04      	adds	r4, r0, #0
 800644a:	0020      	movs	r0, r4
 800644c:	2c01      	cmp	r4, #1
 800644e:	d0f7      	beq.n	8006440 <_isatty+0x14>
 8006450:	f000 fb54 	bl	8006afc <__errno>
 8006454:	2400      	movs	r4, #0
 8006456:	0005      	movs	r5, r0
 8006458:	2613      	movs	r6, #19
 800645a:	1c30      	adds	r0, r6, #0
 800645c:	1c21      	adds	r1, r4, #0
 800645e:	beab      	bkpt	0x00ab
 8006460:	1c06      	adds	r6, r0, #0
 8006462:	602e      	str	r6, [r5, #0]
 8006464:	e7eb      	b.n	800643e <_isatty+0x12>
	...

08006468 <malloc>:
 8006468:	b510      	push	{r4, lr}
 800646a:	4b03      	ldr	r3, [pc, #12]	; (8006478 <malloc+0x10>)
 800646c:	0001      	movs	r1, r0
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	f000 f826 	bl	80064c0 <_malloc_r>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	2000006c 	.word	0x2000006c

0800647c <sbrk_aligned>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4e0f      	ldr	r6, [pc, #60]	; (80064bc <sbrk_aligned+0x40>)
 8006480:	000d      	movs	r5, r1
 8006482:	6831      	ldr	r1, [r6, #0]
 8006484:	0004      	movs	r4, r0
 8006486:	2900      	cmp	r1, #0
 8006488:	d102      	bne.n	8006490 <sbrk_aligned+0x14>
 800648a:	f000 fb11 	bl	8006ab0 <_sbrk_r>
 800648e:	6030      	str	r0, [r6, #0]
 8006490:	0029      	movs	r1, r5
 8006492:	0020      	movs	r0, r4
 8006494:	f000 fb0c 	bl	8006ab0 <_sbrk_r>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d00a      	beq.n	80064b2 <sbrk_aligned+0x36>
 800649c:	2303      	movs	r3, #3
 800649e:	1cc5      	adds	r5, r0, #3
 80064a0:	439d      	bics	r5, r3
 80064a2:	42a8      	cmp	r0, r5
 80064a4:	d007      	beq.n	80064b6 <sbrk_aligned+0x3a>
 80064a6:	1a29      	subs	r1, r5, r0
 80064a8:	0020      	movs	r0, r4
 80064aa:	f000 fb01 	bl	8006ab0 <_sbrk_r>
 80064ae:	3001      	adds	r0, #1
 80064b0:	d101      	bne.n	80064b6 <sbrk_aligned+0x3a>
 80064b2:	2501      	movs	r5, #1
 80064b4:	426d      	negs	r5, r5
 80064b6:	0028      	movs	r0, r5
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	200006cc 	.word	0x200006cc

080064c0 <_malloc_r>:
 80064c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c2:	2203      	movs	r2, #3
 80064c4:	1ccb      	adds	r3, r1, #3
 80064c6:	4393      	bics	r3, r2
 80064c8:	3308      	adds	r3, #8
 80064ca:	0006      	movs	r6, r0
 80064cc:	001f      	movs	r7, r3
 80064ce:	2b0c      	cmp	r3, #12
 80064d0:	d238      	bcs.n	8006544 <_malloc_r+0x84>
 80064d2:	270c      	movs	r7, #12
 80064d4:	42b9      	cmp	r1, r7
 80064d6:	d837      	bhi.n	8006548 <_malloc_r+0x88>
 80064d8:	0030      	movs	r0, r6
 80064da:	f000 f873 	bl	80065c4 <__malloc_lock>
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <_malloc_r+0x100>)
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	001c      	movs	r4, r3
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d133      	bne.n	8006552 <_malloc_r+0x92>
 80064ea:	0039      	movs	r1, r7
 80064ec:	0030      	movs	r0, r6
 80064ee:	f7ff ffc5 	bl	800647c <sbrk_aligned>
 80064f2:	0004      	movs	r4, r0
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d15e      	bne.n	80065b6 <_malloc_r+0xf6>
 80064f8:	9b00      	ldr	r3, [sp, #0]
 80064fa:	681c      	ldr	r4, [r3, #0]
 80064fc:	0025      	movs	r5, r4
 80064fe:	2d00      	cmp	r5, #0
 8006500:	d14e      	bne.n	80065a0 <_malloc_r+0xe0>
 8006502:	2c00      	cmp	r4, #0
 8006504:	d051      	beq.n	80065aa <_malloc_r+0xea>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	0029      	movs	r1, r5
 800650a:	18e3      	adds	r3, r4, r3
 800650c:	0030      	movs	r0, r6
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	f000 face 	bl	8006ab0 <_sbrk_r>
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	4283      	cmp	r3, r0
 8006518:	d147      	bne.n	80065aa <_malloc_r+0xea>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	0030      	movs	r0, r6
 800651e:	1aff      	subs	r7, r7, r3
 8006520:	0039      	movs	r1, r7
 8006522:	f7ff ffab 	bl	800647c <sbrk_aligned>
 8006526:	3001      	adds	r0, #1
 8006528:	d03f      	beq.n	80065aa <_malloc_r+0xea>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	19db      	adds	r3, r3, r7
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	9b00      	ldr	r3, [sp, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d040      	beq.n	80065ba <_malloc_r+0xfa>
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	42a2      	cmp	r2, r4
 800653c:	d133      	bne.n	80065a6 <_malloc_r+0xe6>
 800653e:	2200      	movs	r2, #0
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e014      	b.n	800656e <_malloc_r+0xae>
 8006544:	2b00      	cmp	r3, #0
 8006546:	dac5      	bge.n	80064d4 <_malloc_r+0x14>
 8006548:	230c      	movs	r3, #12
 800654a:	2500      	movs	r5, #0
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	0028      	movs	r0, r5
 8006550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006552:	6821      	ldr	r1, [r4, #0]
 8006554:	1bc9      	subs	r1, r1, r7
 8006556:	d420      	bmi.n	800659a <_malloc_r+0xda>
 8006558:	290b      	cmp	r1, #11
 800655a:	d918      	bls.n	800658e <_malloc_r+0xce>
 800655c:	19e2      	adds	r2, r4, r7
 800655e:	6027      	str	r7, [r4, #0]
 8006560:	42a3      	cmp	r3, r4
 8006562:	d112      	bne.n	800658a <_malloc_r+0xca>
 8006564:	9b00      	ldr	r3, [sp, #0]
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	6011      	str	r1, [r2, #0]
 800656c:	6053      	str	r3, [r2, #4]
 800656e:	0030      	movs	r0, r6
 8006570:	0025      	movs	r5, r4
 8006572:	f000 f82f 	bl	80065d4 <__malloc_unlock>
 8006576:	2207      	movs	r2, #7
 8006578:	350b      	adds	r5, #11
 800657a:	1d23      	adds	r3, r4, #4
 800657c:	4395      	bics	r5, r2
 800657e:	1aea      	subs	r2, r5, r3
 8006580:	429d      	cmp	r5, r3
 8006582:	d0e4      	beq.n	800654e <_malloc_r+0x8e>
 8006584:	1b5b      	subs	r3, r3, r5
 8006586:	50a3      	str	r3, [r4, r2]
 8006588:	e7e1      	b.n	800654e <_malloc_r+0x8e>
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	e7ec      	b.n	8006568 <_malloc_r+0xa8>
 800658e:	6862      	ldr	r2, [r4, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	d1d5      	bne.n	8006540 <_malloc_r+0x80>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e7e9      	b.n	800656e <_malloc_r+0xae>
 800659a:	0023      	movs	r3, r4
 800659c:	6864      	ldr	r4, [r4, #4]
 800659e:	e7a2      	b.n	80064e6 <_malloc_r+0x26>
 80065a0:	002c      	movs	r4, r5
 80065a2:	686d      	ldr	r5, [r5, #4]
 80065a4:	e7ab      	b.n	80064fe <_malloc_r+0x3e>
 80065a6:	0013      	movs	r3, r2
 80065a8:	e7c4      	b.n	8006534 <_malloc_r+0x74>
 80065aa:	230c      	movs	r3, #12
 80065ac:	0030      	movs	r0, r6
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	f000 f810 	bl	80065d4 <__malloc_unlock>
 80065b4:	e7cb      	b.n	800654e <_malloc_r+0x8e>
 80065b6:	6027      	str	r7, [r4, #0]
 80065b8:	e7d9      	b.n	800656e <_malloc_r+0xae>
 80065ba:	605b      	str	r3, [r3, #4]
 80065bc:	deff      	udf	#255	; 0xff
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	200006c8 	.word	0x200006c8

080065c4 <__malloc_lock>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4802      	ldr	r0, [pc, #8]	; (80065d0 <__malloc_lock+0xc>)
 80065c8:	f000 fac3 	bl	8006b52 <__retarget_lock_acquire_recursive>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	20000810 	.word	0x20000810

080065d4 <__malloc_unlock>:
 80065d4:	b510      	push	{r4, lr}
 80065d6:	4802      	ldr	r0, [pc, #8]	; (80065e0 <__malloc_unlock+0xc>)
 80065d8:	f000 fabc 	bl	8006b54 <__retarget_lock_release_recursive>
 80065dc:	bd10      	pop	{r4, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	20000810 	.word	0x20000810

080065e4 <std>:
 80065e4:	2300      	movs	r3, #0
 80065e6:	b510      	push	{r4, lr}
 80065e8:	0004      	movs	r4, r0
 80065ea:	6003      	str	r3, [r0, #0]
 80065ec:	6043      	str	r3, [r0, #4]
 80065ee:	6083      	str	r3, [r0, #8]
 80065f0:	8181      	strh	r1, [r0, #12]
 80065f2:	6643      	str	r3, [r0, #100]	; 0x64
 80065f4:	81c2      	strh	r2, [r0, #14]
 80065f6:	6103      	str	r3, [r0, #16]
 80065f8:	6143      	str	r3, [r0, #20]
 80065fa:	6183      	str	r3, [r0, #24]
 80065fc:	0019      	movs	r1, r3
 80065fe:	2208      	movs	r2, #8
 8006600:	305c      	adds	r0, #92	; 0x5c
 8006602:	f000 fa05 	bl	8006a10 <memset>
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <std+0x50>)
 8006608:	6224      	str	r4, [r4, #32]
 800660a:	6263      	str	r3, [r4, #36]	; 0x24
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <std+0x54>)
 800660e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <std+0x58>)
 8006612:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <std+0x5c>)
 8006616:	6323      	str	r3, [r4, #48]	; 0x30
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <std+0x60>)
 800661a:	429c      	cmp	r4, r3
 800661c:	d005      	beq.n	800662a <std+0x46>
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <std+0x64>)
 8006620:	429c      	cmp	r4, r3
 8006622:	d002      	beq.n	800662a <std+0x46>
 8006624:	4b09      	ldr	r3, [pc, #36]	; (800664c <std+0x68>)
 8006626:	429c      	cmp	r4, r3
 8006628:	d103      	bne.n	8006632 <std+0x4e>
 800662a:	0020      	movs	r0, r4
 800662c:	3058      	adds	r0, #88	; 0x58
 800662e:	f000 fa8f 	bl	8006b50 <__retarget_lock_init_recursive>
 8006632:	bd10      	pop	{r4, pc}
 8006634:	0800682d 	.word	0x0800682d
 8006638:	08006855 	.word	0x08006855
 800663c:	0800688d 	.word	0x0800688d
 8006640:	080068b9 	.word	0x080068b9
 8006644:	200006d0 	.word	0x200006d0
 8006648:	20000738 	.word	0x20000738
 800664c:	200007a0 	.word	0x200007a0

08006650 <stdio_exit_handler>:
 8006650:	b510      	push	{r4, lr}
 8006652:	4a03      	ldr	r2, [pc, #12]	; (8006660 <stdio_exit_handler+0x10>)
 8006654:	4903      	ldr	r1, [pc, #12]	; (8006664 <stdio_exit_handler+0x14>)
 8006656:	4804      	ldr	r0, [pc, #16]	; (8006668 <stdio_exit_handler+0x18>)
 8006658:	f000 f86c 	bl	8006734 <_fwalk_sglue>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	20000014 	.word	0x20000014
 8006664:	08006d11 	.word	0x08006d11
 8006668:	20000020 	.word	0x20000020

0800666c <cleanup_stdio>:
 800666c:	6841      	ldr	r1, [r0, #4]
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <cleanup_stdio+0x30>)
 8006670:	b510      	push	{r4, lr}
 8006672:	0004      	movs	r4, r0
 8006674:	4299      	cmp	r1, r3
 8006676:	d001      	beq.n	800667c <cleanup_stdio+0x10>
 8006678:	f000 fb4a 	bl	8006d10 <_fflush_r>
 800667c:	68a1      	ldr	r1, [r4, #8]
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <cleanup_stdio+0x34>)
 8006680:	4299      	cmp	r1, r3
 8006682:	d002      	beq.n	800668a <cleanup_stdio+0x1e>
 8006684:	0020      	movs	r0, r4
 8006686:	f000 fb43 	bl	8006d10 <_fflush_r>
 800668a:	68e1      	ldr	r1, [r4, #12]
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <cleanup_stdio+0x38>)
 800668e:	4299      	cmp	r1, r3
 8006690:	d002      	beq.n	8006698 <cleanup_stdio+0x2c>
 8006692:	0020      	movs	r0, r4
 8006694:	f000 fb3c 	bl	8006d10 <_fflush_r>
 8006698:	bd10      	pop	{r4, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	200006d0 	.word	0x200006d0
 80066a0:	20000738 	.word	0x20000738
 80066a4:	200007a0 	.word	0x200007a0

080066a8 <global_stdio_init.part.0>:
 80066a8:	b510      	push	{r4, lr}
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <global_stdio_init.part.0+0x28>)
 80066ac:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <global_stdio_init.part.0+0x2c>)
 80066ae:	2104      	movs	r1, #4
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	4809      	ldr	r0, [pc, #36]	; (80066d8 <global_stdio_init.part.0+0x30>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	f7ff ff95 	bl	80065e4 <std>
 80066ba:	2201      	movs	r2, #1
 80066bc:	2109      	movs	r1, #9
 80066be:	4807      	ldr	r0, [pc, #28]	; (80066dc <global_stdio_init.part.0+0x34>)
 80066c0:	f7ff ff90 	bl	80065e4 <std>
 80066c4:	2202      	movs	r2, #2
 80066c6:	2112      	movs	r1, #18
 80066c8:	4805      	ldr	r0, [pc, #20]	; (80066e0 <global_stdio_init.part.0+0x38>)
 80066ca:	f7ff ff8b 	bl	80065e4 <std>
 80066ce:	bd10      	pop	{r4, pc}
 80066d0:	20000808 	.word	0x20000808
 80066d4:	08006651 	.word	0x08006651
 80066d8:	200006d0 	.word	0x200006d0
 80066dc:	20000738 	.word	0x20000738
 80066e0:	200007a0 	.word	0x200007a0

080066e4 <__sfp_lock_acquire>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	4802      	ldr	r0, [pc, #8]	; (80066f0 <__sfp_lock_acquire+0xc>)
 80066e8:	f000 fa33 	bl	8006b52 <__retarget_lock_acquire_recursive>
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	20000811 	.word	0x20000811

080066f4 <__sfp_lock_release>:
 80066f4:	b510      	push	{r4, lr}
 80066f6:	4802      	ldr	r0, [pc, #8]	; (8006700 <__sfp_lock_release+0xc>)
 80066f8:	f000 fa2c 	bl	8006b54 <__retarget_lock_release_recursive>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	20000811 	.word	0x20000811

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	0004      	movs	r4, r0
 8006708:	f7ff ffec 	bl	80066e4 <__sfp_lock_acquire>
 800670c:	6a23      	ldr	r3, [r4, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <__sinit+0x14>
 8006712:	f7ff ffef 	bl	80066f4 <__sfp_lock_release>
 8006716:	bd10      	pop	{r4, pc}
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__sinit+0x28>)
 800671a:	6223      	str	r3, [r4, #32]
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <__sinit+0x2c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f6      	bne.n	8006712 <__sinit+0xe>
 8006724:	f7ff ffc0 	bl	80066a8 <global_stdio_init.part.0>
 8006728:	e7f3      	b.n	8006712 <__sinit+0xe>
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	0800666d 	.word	0x0800666d
 8006730:	20000808 	.word	0x20000808

08006734 <_fwalk_sglue>:
 8006734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006736:	0014      	movs	r4, r2
 8006738:	2600      	movs	r6, #0
 800673a:	9000      	str	r0, [sp, #0]
 800673c:	9101      	str	r1, [sp, #4]
 800673e:	68a5      	ldr	r5, [r4, #8]
 8006740:	6867      	ldr	r7, [r4, #4]
 8006742:	3f01      	subs	r7, #1
 8006744:	d504      	bpl.n	8006750 <_fwalk_sglue+0x1c>
 8006746:	6824      	ldr	r4, [r4, #0]
 8006748:	2c00      	cmp	r4, #0
 800674a:	d1f8      	bne.n	800673e <_fwalk_sglue+0xa>
 800674c:	0030      	movs	r0, r6
 800674e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006750:	89ab      	ldrh	r3, [r5, #12]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d908      	bls.n	8006768 <_fwalk_sglue+0x34>
 8006756:	220e      	movs	r2, #14
 8006758:	5eab      	ldrsh	r3, [r5, r2]
 800675a:	3301      	adds	r3, #1
 800675c:	d004      	beq.n	8006768 <_fwalk_sglue+0x34>
 800675e:	0029      	movs	r1, r5
 8006760:	9800      	ldr	r0, [sp, #0]
 8006762:	9b01      	ldr	r3, [sp, #4]
 8006764:	4798      	blx	r3
 8006766:	4306      	orrs	r6, r0
 8006768:	3568      	adds	r5, #104	; 0x68
 800676a:	e7ea      	b.n	8006742 <_fwalk_sglue+0xe>

0800676c <_puts_r>:
 800676c:	6a03      	ldr	r3, [r0, #32]
 800676e:	b570      	push	{r4, r5, r6, lr}
 8006770:	0005      	movs	r5, r0
 8006772:	000e      	movs	r6, r1
 8006774:	6884      	ldr	r4, [r0, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <_puts_r+0x12>
 800677a:	f7ff ffc3 	bl	8006704 <__sinit>
 800677e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006780:	07db      	lsls	r3, r3, #31
 8006782:	d405      	bmi.n	8006790 <_puts_r+0x24>
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	059b      	lsls	r3, r3, #22
 8006788:	d402      	bmi.n	8006790 <_puts_r+0x24>
 800678a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678c:	f000 f9e1 	bl	8006b52 <__retarget_lock_acquire_recursive>
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	071b      	lsls	r3, r3, #28
 8006794:	d502      	bpl.n	800679c <_puts_r+0x30>
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11f      	bne.n	80067dc <_puts_r+0x70>
 800679c:	0021      	movs	r1, r4
 800679e:	0028      	movs	r0, r5
 80067a0:	f000 f8d2 	bl	8006948 <__swsetup_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d019      	beq.n	80067dc <_puts_r+0x70>
 80067a8:	2501      	movs	r5, #1
 80067aa:	426d      	negs	r5, r5
 80067ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ae:	07db      	lsls	r3, r3, #31
 80067b0:	d405      	bmi.n	80067be <_puts_r+0x52>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	059b      	lsls	r3, r3, #22
 80067b6:	d402      	bmi.n	80067be <_puts_r+0x52>
 80067b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ba:	f000 f9cb 	bl	8006b54 <__retarget_lock_release_recursive>
 80067be:	0028      	movs	r0, r5
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	3601      	adds	r6, #1
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da04      	bge.n	80067d4 <_puts_r+0x68>
 80067ca:	69a2      	ldr	r2, [r4, #24]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	dc16      	bgt.n	80067fe <_puts_r+0x92>
 80067d0:	290a      	cmp	r1, #10
 80067d2:	d014      	beq.n	80067fe <_puts_r+0x92>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	6022      	str	r2, [r4, #0]
 80067da:	7019      	strb	r1, [r3, #0]
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	7831      	ldrb	r1, [r6, #0]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d1ed      	bne.n	80067c2 <_puts_r+0x56>
 80067e6:	60a3      	str	r3, [r4, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da0f      	bge.n	800680c <_puts_r+0xa0>
 80067ec:	0028      	movs	r0, r5
 80067ee:	0022      	movs	r2, r4
 80067f0:	310a      	adds	r1, #10
 80067f2:	f000 f867 	bl	80068c4 <__swbuf_r>
 80067f6:	250a      	movs	r5, #10
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1d7      	bne.n	80067ac <_puts_r+0x40>
 80067fc:	e7d4      	b.n	80067a8 <_puts_r+0x3c>
 80067fe:	0022      	movs	r2, r4
 8006800:	0028      	movs	r0, r5
 8006802:	f000 f85f 	bl	80068c4 <__swbuf_r>
 8006806:	3001      	adds	r0, #1
 8006808:	d1e8      	bne.n	80067dc <_puts_r+0x70>
 800680a:	e7cd      	b.n	80067a8 <_puts_r+0x3c>
 800680c:	250a      	movs	r5, #10
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	6022      	str	r2, [r4, #0]
 8006814:	701d      	strb	r5, [r3, #0]
 8006816:	e7c9      	b.n	80067ac <_puts_r+0x40>

08006818 <puts>:
 8006818:	b510      	push	{r4, lr}
 800681a:	4b03      	ldr	r3, [pc, #12]	; (8006828 <puts+0x10>)
 800681c:	0001      	movs	r1, r0
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	f7ff ffa4 	bl	800676c <_puts_r>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	2000006c 	.word	0x2000006c

0800682c <__sread>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	000c      	movs	r4, r1
 8006830:	250e      	movs	r5, #14
 8006832:	5f49      	ldrsh	r1, [r1, r5]
 8006834:	f000 f928 	bl	8006a88 <_read_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	db03      	blt.n	8006844 <__sread+0x18>
 800683c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800683e:	181b      	adds	r3, r3, r0
 8006840:	6563      	str	r3, [r4, #84]	; 0x54
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	4a02      	ldr	r2, [pc, #8]	; (8006850 <__sread+0x24>)
 8006848:	4013      	ands	r3, r2
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	e7f9      	b.n	8006842 <__sread+0x16>
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	ffffefff 	.word	0xffffefff

08006854 <__swrite>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	001f      	movs	r7, r3
 8006858:	898b      	ldrh	r3, [r1, #12]
 800685a:	0005      	movs	r5, r0
 800685c:	000c      	movs	r4, r1
 800685e:	0016      	movs	r6, r2
 8006860:	05db      	lsls	r3, r3, #23
 8006862:	d505      	bpl.n	8006870 <__swrite+0x1c>
 8006864:	230e      	movs	r3, #14
 8006866:	5ec9      	ldrsh	r1, [r1, r3]
 8006868:	2200      	movs	r2, #0
 800686a:	2302      	movs	r3, #2
 800686c:	f000 f8f8 	bl	8006a60 <_lseek_r>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	4a05      	ldr	r2, [pc, #20]	; (8006888 <__swrite+0x34>)
 8006874:	0028      	movs	r0, r5
 8006876:	4013      	ands	r3, r2
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	0032      	movs	r2, r6
 800687c:	230e      	movs	r3, #14
 800687e:	5ee1      	ldrsh	r1, [r4, r3]
 8006880:	003b      	movs	r3, r7
 8006882:	f000 f927 	bl	8006ad4 <_write_r>
 8006886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006888:	ffffefff 	.word	0xffffefff

0800688c <__sseek>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	000c      	movs	r4, r1
 8006890:	250e      	movs	r5, #14
 8006892:	5f49      	ldrsh	r1, [r1, r5]
 8006894:	f000 f8e4 	bl	8006a60 <_lseek_r>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	1c42      	adds	r2, r0, #1
 800689c:	d103      	bne.n	80068a6 <__sseek+0x1a>
 800689e:	4a05      	ldr	r2, [pc, #20]	; (80068b4 <__sseek+0x28>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	2280      	movs	r2, #128	; 0x80
 80068a8:	0152      	lsls	r2, r2, #5
 80068aa:	4313      	orrs	r3, r2
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	6560      	str	r0, [r4, #84]	; 0x54
 80068b0:	e7f8      	b.n	80068a4 <__sseek+0x18>
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	ffffefff 	.word	0xffffefff

080068b8 <__sclose>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	230e      	movs	r3, #14
 80068bc:	5ec9      	ldrsh	r1, [r1, r3]
 80068be:	f000 f8bd 	bl	8006a3c <_close_r>
 80068c2:	bd10      	pop	{r4, pc}

080068c4 <__swbuf_r>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	0006      	movs	r6, r0
 80068c8:	000d      	movs	r5, r1
 80068ca:	0014      	movs	r4, r2
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d004      	beq.n	80068da <__swbuf_r+0x16>
 80068d0:	6a03      	ldr	r3, [r0, #32]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <__swbuf_r+0x16>
 80068d6:	f7ff ff15 	bl	8006704 <__sinit>
 80068da:	69a3      	ldr	r3, [r4, #24]
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	89a3      	ldrh	r3, [r4, #12]
 80068e0:	071b      	lsls	r3, r3, #28
 80068e2:	d528      	bpl.n	8006936 <__swbuf_r+0x72>
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d025      	beq.n	8006936 <__swbuf_r+0x72>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	b2ef      	uxtb	r7, r5
 80068f0:	1ac0      	subs	r0, r0, r3
 80068f2:	6963      	ldr	r3, [r4, #20]
 80068f4:	b2ed      	uxtb	r5, r5
 80068f6:	4283      	cmp	r3, r0
 80068f8:	dc05      	bgt.n	8006906 <__swbuf_r+0x42>
 80068fa:	0021      	movs	r1, r4
 80068fc:	0030      	movs	r0, r6
 80068fe:	f000 fa07 	bl	8006d10 <_fflush_r>
 8006902:	2800      	cmp	r0, #0
 8006904:	d11d      	bne.n	8006942 <__swbuf_r+0x7e>
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	3001      	adds	r0, #1
 800690a:	3b01      	subs	r3, #1
 800690c:	60a3      	str	r3, [r4, #8]
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	6022      	str	r2, [r4, #0]
 8006914:	701f      	strb	r7, [r3, #0]
 8006916:	6963      	ldr	r3, [r4, #20]
 8006918:	4283      	cmp	r3, r0
 800691a:	d004      	beq.n	8006926 <__swbuf_r+0x62>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	07db      	lsls	r3, r3, #31
 8006920:	d507      	bpl.n	8006932 <__swbuf_r+0x6e>
 8006922:	2d0a      	cmp	r5, #10
 8006924:	d105      	bne.n	8006932 <__swbuf_r+0x6e>
 8006926:	0021      	movs	r1, r4
 8006928:	0030      	movs	r0, r6
 800692a:	f000 f9f1 	bl	8006d10 <_fflush_r>
 800692e:	2800      	cmp	r0, #0
 8006930:	d107      	bne.n	8006942 <__swbuf_r+0x7e>
 8006932:	0028      	movs	r0, r5
 8006934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006936:	0021      	movs	r1, r4
 8006938:	0030      	movs	r0, r6
 800693a:	f000 f805 	bl	8006948 <__swsetup_r>
 800693e:	2800      	cmp	r0, #0
 8006940:	d0d3      	beq.n	80068ea <__swbuf_r+0x26>
 8006942:	2501      	movs	r5, #1
 8006944:	426d      	negs	r5, r5
 8006946:	e7f4      	b.n	8006932 <__swbuf_r+0x6e>

08006948 <__swsetup_r>:
 8006948:	4b30      	ldr	r3, [pc, #192]	; (8006a0c <__swsetup_r+0xc4>)
 800694a:	b570      	push	{r4, r5, r6, lr}
 800694c:	0005      	movs	r5, r0
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	000c      	movs	r4, r1
 8006952:	2800      	cmp	r0, #0
 8006954:	d004      	beq.n	8006960 <__swsetup_r+0x18>
 8006956:	6a03      	ldr	r3, [r0, #32]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <__swsetup_r+0x18>
 800695c:	f7ff fed2 	bl	8006704 <__sinit>
 8006960:	230c      	movs	r3, #12
 8006962:	5ee2      	ldrsh	r2, [r4, r3]
 8006964:	b293      	uxth	r3, r2
 8006966:	0711      	lsls	r1, r2, #28
 8006968:	d423      	bmi.n	80069b2 <__swsetup_r+0x6a>
 800696a:	06d9      	lsls	r1, r3, #27
 800696c:	d407      	bmi.n	800697e <__swsetup_r+0x36>
 800696e:	2309      	movs	r3, #9
 8006970:	2001      	movs	r0, #1
 8006972:	602b      	str	r3, [r5, #0]
 8006974:	3337      	adds	r3, #55	; 0x37
 8006976:	4313      	orrs	r3, r2
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	4240      	negs	r0, r0
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	075b      	lsls	r3, r3, #29
 8006980:	d513      	bpl.n	80069aa <__swsetup_r+0x62>
 8006982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006984:	2900      	cmp	r1, #0
 8006986:	d008      	beq.n	800699a <__swsetup_r+0x52>
 8006988:	0023      	movs	r3, r4
 800698a:	3344      	adds	r3, #68	; 0x44
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <__swsetup_r+0x4e>
 8006990:	0028      	movs	r0, r5
 8006992:	f000 f8e9 	bl	8006b68 <_free_r>
 8006996:	2300      	movs	r3, #0
 8006998:	6363      	str	r3, [r4, #52]	; 0x34
 800699a:	2224      	movs	r2, #36	; 0x24
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	4393      	bics	r3, r2
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	2300      	movs	r3, #0
 80069a4:	6063      	str	r3, [r4, #4]
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	2308      	movs	r3, #8
 80069ac:	89a2      	ldrh	r2, [r4, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <__swsetup_r+0x88>
 80069b8:	21a0      	movs	r1, #160	; 0xa0
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	0089      	lsls	r1, r1, #2
 80069c0:	0092      	lsls	r2, r2, #2
 80069c2:	400b      	ands	r3, r1
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <__swsetup_r+0x88>
 80069c8:	0021      	movs	r1, r4
 80069ca:	0028      	movs	r0, r5
 80069cc:	f000 f9f4 	bl	8006db8 <__smakebuf_r>
 80069d0:	220c      	movs	r2, #12
 80069d2:	5ea3      	ldrsh	r3, [r4, r2]
 80069d4:	2001      	movs	r0, #1
 80069d6:	001a      	movs	r2, r3
 80069d8:	b299      	uxth	r1, r3
 80069da:	4002      	ands	r2, r0
 80069dc:	4203      	tst	r3, r0
 80069de:	d00f      	beq.n	8006a00 <__swsetup_r+0xb8>
 80069e0:	2200      	movs	r2, #0
 80069e2:	60a2      	str	r2, [r4, #8]
 80069e4:	6962      	ldr	r2, [r4, #20]
 80069e6:	4252      	negs	r2, r2
 80069e8:	61a2      	str	r2, [r4, #24]
 80069ea:	2000      	movs	r0, #0
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	4282      	cmp	r2, r0
 80069f0:	d1c4      	bne.n	800697c <__swsetup_r+0x34>
 80069f2:	0609      	lsls	r1, r1, #24
 80069f4:	d5c2      	bpl.n	800697c <__swsetup_r+0x34>
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	4313      	orrs	r3, r2
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	3801      	subs	r0, #1
 80069fe:	e7bd      	b.n	800697c <__swsetup_r+0x34>
 8006a00:	0788      	lsls	r0, r1, #30
 8006a02:	d400      	bmi.n	8006a06 <__swsetup_r+0xbe>
 8006a04:	6962      	ldr	r2, [r4, #20]
 8006a06:	60a2      	str	r2, [r4, #8]
 8006a08:	e7ef      	b.n	80069ea <__swsetup_r+0xa2>
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	2000006c 	.word	0x2000006c

08006a10 <memset>:
 8006a10:	0003      	movs	r3, r0
 8006a12:	1882      	adds	r2, r0, r2
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	7019      	strb	r1, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <strchr>:
 8006a20:	b2c9      	uxtb	r1, r1
 8006a22:	7803      	ldrb	r3, [r0, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <strchr+0x12>
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	d100      	bne.n	8006a2e <strchr+0xe>
 8006a2c:	4770      	bx	lr
 8006a2e:	3001      	adds	r0, #1
 8006a30:	e7f7      	b.n	8006a22 <strchr+0x2>
 8006a32:	424b      	negs	r3, r1
 8006a34:	4159      	adcs	r1, r3
 8006a36:	4249      	negs	r1, r1
 8006a38:	4008      	ands	r0, r1
 8006a3a:	e7f7      	b.n	8006a2c <strchr+0xc>

08006a3c <_close_r>:
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	b570      	push	{r4, r5, r6, lr}
 8006a40:	4d06      	ldr	r5, [pc, #24]	; (8006a5c <_close_r+0x20>)
 8006a42:	0004      	movs	r4, r0
 8006a44:	0008      	movs	r0, r1
 8006a46:	602b      	str	r3, [r5, #0]
 8006a48:	f7ff fb46 	bl	80060d8 <_close>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d103      	bne.n	8006a58 <_close_r+0x1c>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d000      	beq.n	8006a58 <_close_r+0x1c>
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	2000080c 	.word	0x2000080c

08006a60 <_lseek_r>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	0004      	movs	r4, r0
 8006a64:	0008      	movs	r0, r1
 8006a66:	0011      	movs	r1, r2
 8006a68:	001a      	movs	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4d05      	ldr	r5, [pc, #20]	; (8006a84 <_lseek_r+0x24>)
 8006a6e:	602b      	str	r3, [r5, #0]
 8006a70:	f7ff faf3 	bl	800605a <_lseek>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d103      	bne.n	8006a80 <_lseek_r+0x20>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d000      	beq.n	8006a80 <_lseek_r+0x20>
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	2000080c 	.word	0x2000080c

08006a88 <_read_r>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	0004      	movs	r4, r0
 8006a8c:	0008      	movs	r0, r1
 8006a8e:	0011      	movs	r1, r2
 8006a90:	001a      	movs	r2, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	4d05      	ldr	r5, [pc, #20]	; (8006aac <_read_r+0x24>)
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	f7ff fa8a 	bl	8005fb0 <_read>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d103      	bne.n	8006aa8 <_read_r+0x20>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d000      	beq.n	8006aa8 <_read_r+0x20>
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	2000080c 	.word	0x2000080c

08006ab0 <_sbrk_r>:
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	b570      	push	{r4, r5, r6, lr}
 8006ab4:	4d06      	ldr	r5, [pc, #24]	; (8006ad0 <_sbrk_r+0x20>)
 8006ab6:	0004      	movs	r4, r0
 8006ab8:	0008      	movs	r0, r1
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fa fa5e 	bl	8000f7c <_sbrk>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d103      	bne.n	8006acc <_sbrk_r+0x1c>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d000      	beq.n	8006acc <_sbrk_r+0x1c>
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	2000080c 	.word	0x2000080c

08006ad4 <_write_r>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	0004      	movs	r4, r0
 8006ad8:	0008      	movs	r0, r1
 8006ada:	0011      	movs	r1, r2
 8006adc:	001a      	movs	r2, r3
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4d05      	ldr	r5, [pc, #20]	; (8006af8 <_write_r+0x24>)
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7ff facd 	bl	8006082 <_write>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d103      	bne.n	8006af4 <_write_r+0x20>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d000      	beq.n	8006af4 <_write_r+0x20>
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	bd70      	pop	{r4, r5, r6, pc}
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	2000080c 	.word	0x2000080c

08006afc <__errno>:
 8006afc:	4b01      	ldr	r3, [pc, #4]	; (8006b04 <__errno+0x8>)
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	4770      	bx	lr
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	2000006c 	.word	0x2000006c

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	4c0c      	ldr	r4, [pc, #48]	; (8006b40 <__libc_init_array+0x38>)
 8006b0e:	4d0d      	ldr	r5, [pc, #52]	; (8006b44 <__libc_init_array+0x3c>)
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	2600      	movs	r6, #0
 8006b1a:	f000 f9af 	bl	8006e7c <_init>
 8006b1e:	4c0a      	ldr	r4, [pc, #40]	; (8006b48 <__libc_init_array+0x40>)
 8006b20:	4d0a      	ldr	r5, [pc, #40]	; (8006b4c <__libc_init_array+0x44>)
 8006b22:	1b64      	subs	r4, r4, r5
 8006b24:	10a4      	asrs	r4, r4, #2
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	00b3      	lsls	r3, r6, #2
 8006b2e:	58eb      	ldr	r3, [r5, r3]
 8006b30:	4798      	blx	r3
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	00b3      	lsls	r3, r6, #2
 8006b38:	58eb      	ldr	r3, [r5, r3]
 8006b3a:	4798      	blx	r3
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08006fe4 	.word	0x08006fe4
 8006b44:	08006fe4 	.word	0x08006fe4
 8006b48:	08006fe8 	.word	0x08006fe8
 8006b4c:	08006fe4 	.word	0x08006fe4

08006b50 <__retarget_lock_init_recursive>:
 8006b50:	4770      	bx	lr

08006b52 <__retarget_lock_acquire_recursive>:
 8006b52:	4770      	bx	lr

08006b54 <__retarget_lock_release_recursive>:
 8006b54:	4770      	bx	lr

08006b56 <memcpy>:
 8006b56:	2300      	movs	r3, #0
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d100      	bne.n	8006b60 <memcpy+0xa>
 8006b5e:	bd10      	pop	{r4, pc}
 8006b60:	5ccc      	ldrb	r4, [r1, r3]
 8006b62:	54c4      	strb	r4, [r0, r3]
 8006b64:	3301      	adds	r3, #1
 8006b66:	e7f8      	b.n	8006b5a <memcpy+0x4>

08006b68 <_free_r>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	0005      	movs	r5, r0
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d010      	beq.n	8006b92 <_free_r+0x2a>
 8006b70:	1f0c      	subs	r4, r1, #4
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	da00      	bge.n	8006b7a <_free_r+0x12>
 8006b78:	18e4      	adds	r4, r4, r3
 8006b7a:	0028      	movs	r0, r5
 8006b7c:	f7ff fd22 	bl	80065c4 <__malloc_lock>
 8006b80:	4a1d      	ldr	r2, [pc, #116]	; (8006bf8 <_free_r+0x90>)
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d105      	bne.n	8006b94 <_free_r+0x2c>
 8006b88:	6063      	str	r3, [r4, #4]
 8006b8a:	6014      	str	r4, [r2, #0]
 8006b8c:	0028      	movs	r0, r5
 8006b8e:	f7ff fd21 	bl	80065d4 <__malloc_unlock>
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d908      	bls.n	8006baa <_free_r+0x42>
 8006b98:	6820      	ldr	r0, [r4, #0]
 8006b9a:	1821      	adds	r1, r4, r0
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	d1f3      	bne.n	8006b88 <_free_r+0x20>
 8006ba0:	6819      	ldr	r1, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	1809      	adds	r1, r1, r0
 8006ba6:	6021      	str	r1, [r4, #0]
 8006ba8:	e7ee      	b.n	8006b88 <_free_r+0x20>
 8006baa:	001a      	movs	r2, r3
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <_free_r+0x4e>
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	d9f9      	bls.n	8006baa <_free_r+0x42>
 8006bb6:	6811      	ldr	r1, [r2, #0]
 8006bb8:	1850      	adds	r0, r2, r1
 8006bba:	42a0      	cmp	r0, r4
 8006bbc:	d10b      	bne.n	8006bd6 <_free_r+0x6e>
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	1809      	adds	r1, r1, r0
 8006bc2:	1850      	adds	r0, r2, r1
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	4283      	cmp	r3, r0
 8006bc8:	d1e0      	bne.n	8006b8c <_free_r+0x24>
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	1841      	adds	r1, r0, r1
 8006bd0:	6011      	str	r1, [r2, #0]
 8006bd2:	6053      	str	r3, [r2, #4]
 8006bd4:	e7da      	b.n	8006b8c <_free_r+0x24>
 8006bd6:	42a0      	cmp	r0, r4
 8006bd8:	d902      	bls.n	8006be0 <_free_r+0x78>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	e7d5      	b.n	8006b8c <_free_r+0x24>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	1821      	adds	r1, r4, r0
 8006be4:	428b      	cmp	r3, r1
 8006be6:	d103      	bne.n	8006bf0 <_free_r+0x88>
 8006be8:	6819      	ldr	r1, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	1809      	adds	r1, r1, r0
 8006bee:	6021      	str	r1, [r4, #0]
 8006bf0:	6063      	str	r3, [r4, #4]
 8006bf2:	6054      	str	r4, [r2, #4]
 8006bf4:	e7ca      	b.n	8006b8c <_free_r+0x24>
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	200006c8 	.word	0x200006c8

08006bfc <__sflush_r>:
 8006bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bfe:	898b      	ldrh	r3, [r1, #12]
 8006c00:	0005      	movs	r5, r0
 8006c02:	000c      	movs	r4, r1
 8006c04:	071a      	lsls	r2, r3, #28
 8006c06:	d45c      	bmi.n	8006cc2 <__sflush_r+0xc6>
 8006c08:	684a      	ldr	r2, [r1, #4]
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	dc04      	bgt.n	8006c18 <__sflush_r+0x1c>
 8006c0e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006c10:	2a00      	cmp	r2, #0
 8006c12:	dc01      	bgt.n	8006c18 <__sflush_r+0x1c>
 8006c14:	2000      	movs	r0, #0
 8006c16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006c1a:	2f00      	cmp	r7, #0
 8006c1c:	d0fa      	beq.n	8006c14 <__sflush_r+0x18>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2080      	movs	r0, #128	; 0x80
 8006c22:	682e      	ldr	r6, [r5, #0]
 8006c24:	602a      	str	r2, [r5, #0]
 8006c26:	001a      	movs	r2, r3
 8006c28:	0140      	lsls	r0, r0, #5
 8006c2a:	6a21      	ldr	r1, [r4, #32]
 8006c2c:	4002      	ands	r2, r0
 8006c2e:	4203      	tst	r3, r0
 8006c30:	d034      	beq.n	8006c9c <__sflush_r+0xa0>
 8006c32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	075b      	lsls	r3, r3, #29
 8006c38:	d506      	bpl.n	8006c48 <__sflush_r+0x4c>
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	1ac0      	subs	r0, r0, r3
 8006c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <__sflush_r+0x4c>
 8006c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c46:	1ac0      	subs	r0, r0, r3
 8006c48:	0002      	movs	r2, r0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	0028      	movs	r0, r5
 8006c4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006c50:	6a21      	ldr	r1, [r4, #32]
 8006c52:	47b8      	blx	r7
 8006c54:	89a2      	ldrh	r2, [r4, #12]
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	d106      	bne.n	8006c68 <__sflush_r+0x6c>
 8006c5a:	6829      	ldr	r1, [r5, #0]
 8006c5c:	291d      	cmp	r1, #29
 8006c5e:	d82c      	bhi.n	8006cba <__sflush_r+0xbe>
 8006c60:	4b2a      	ldr	r3, [pc, #168]	; (8006d0c <__sflush_r+0x110>)
 8006c62:	410b      	asrs	r3, r1
 8006c64:	07db      	lsls	r3, r3, #31
 8006c66:	d428      	bmi.n	8006cba <__sflush_r+0xbe>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6063      	str	r3, [r4, #4]
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	04d2      	lsls	r2, r2, #19
 8006c72:	d505      	bpl.n	8006c80 <__sflush_r+0x84>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <__sflush_r+0x82>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d100      	bne.n	8006c80 <__sflush_r+0x84>
 8006c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c82:	602e      	str	r6, [r5, #0]
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d0c5      	beq.n	8006c14 <__sflush_r+0x18>
 8006c88:	0023      	movs	r3, r4
 8006c8a:	3344      	adds	r3, #68	; 0x44
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	d002      	beq.n	8006c96 <__sflush_r+0x9a>
 8006c90:	0028      	movs	r0, r5
 8006c92:	f7ff ff69 	bl	8006b68 <_free_r>
 8006c96:	2000      	movs	r0, #0
 8006c98:	6360      	str	r0, [r4, #52]	; 0x34
 8006c9a:	e7bc      	b.n	8006c16 <__sflush_r+0x1a>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	0028      	movs	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	d1c6      	bne.n	8006c34 <__sflush_r+0x38>
 8006ca6:	682b      	ldr	r3, [r5, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0c3      	beq.n	8006c34 <__sflush_r+0x38>
 8006cac:	2b1d      	cmp	r3, #29
 8006cae:	d001      	beq.n	8006cb4 <__sflush_r+0xb8>
 8006cb0:	2b16      	cmp	r3, #22
 8006cb2:	d101      	bne.n	8006cb8 <__sflush_r+0xbc>
 8006cb4:	602e      	str	r6, [r5, #0]
 8006cb6:	e7ad      	b.n	8006c14 <__sflush_r+0x18>
 8006cb8:	89a2      	ldrh	r2, [r4, #12]
 8006cba:	2340      	movs	r3, #64	; 0x40
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	e7a9      	b.n	8006c16 <__sflush_r+0x1a>
 8006cc2:	690e      	ldr	r6, [r1, #16]
 8006cc4:	2e00      	cmp	r6, #0
 8006cc6:	d0a5      	beq.n	8006c14 <__sflush_r+0x18>
 8006cc8:	680f      	ldr	r7, [r1, #0]
 8006cca:	600e      	str	r6, [r1, #0]
 8006ccc:	1bba      	subs	r2, r7, r6
 8006cce:	9201      	str	r2, [sp, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	079b      	lsls	r3, r3, #30
 8006cd4:	d100      	bne.n	8006cd8 <__sflush_r+0xdc>
 8006cd6:	694a      	ldr	r2, [r1, #20]
 8006cd8:	60a2      	str	r2, [r4, #8]
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dd99      	ble.n	8006c14 <__sflush_r+0x18>
 8006ce0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ce2:	0032      	movs	r2, r6
 8006ce4:	001f      	movs	r7, r3
 8006ce6:	0028      	movs	r0, r5
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	6a21      	ldr	r1, [r4, #32]
 8006cec:	47b8      	blx	r7
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	dc06      	bgt.n	8006d00 <__sflush_r+0x104>
 8006cf2:	2340      	movs	r3, #64	; 0x40
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	89a2      	ldrh	r2, [r4, #12]
 8006cf8:	4240      	negs	r0, r0
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	e78a      	b.n	8006c16 <__sflush_r+0x1a>
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	1836      	adds	r6, r6, r0
 8006d04:	1a1b      	subs	r3, r3, r0
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	e7e7      	b.n	8006cda <__sflush_r+0xde>
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	dfbffffe 	.word	0xdfbffffe

08006d10 <_fflush_r>:
 8006d10:	690b      	ldr	r3, [r1, #16]
 8006d12:	b570      	push	{r4, r5, r6, lr}
 8006d14:	0005      	movs	r5, r0
 8006d16:	000c      	movs	r4, r1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <_fflush_r+0x12>
 8006d1c:	2500      	movs	r5, #0
 8006d1e:	0028      	movs	r0, r5
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d004      	beq.n	8006d30 <_fflush_r+0x20>
 8006d26:	6a03      	ldr	r3, [r0, #32]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <_fflush_r+0x20>
 8006d2c:	f7ff fcea 	bl	8006704 <__sinit>
 8006d30:	220c      	movs	r2, #12
 8006d32:	5ea3      	ldrsh	r3, [r4, r2]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f1      	beq.n	8006d1c <_fflush_r+0xc>
 8006d38:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d3a:	07d2      	lsls	r2, r2, #31
 8006d3c:	d404      	bmi.n	8006d48 <_fflush_r+0x38>
 8006d3e:	059b      	lsls	r3, r3, #22
 8006d40:	d402      	bmi.n	8006d48 <_fflush_r+0x38>
 8006d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d44:	f7ff ff05 	bl	8006b52 <__retarget_lock_acquire_recursive>
 8006d48:	0028      	movs	r0, r5
 8006d4a:	0021      	movs	r1, r4
 8006d4c:	f7ff ff56 	bl	8006bfc <__sflush_r>
 8006d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d52:	0005      	movs	r5, r0
 8006d54:	07db      	lsls	r3, r3, #31
 8006d56:	d4e2      	bmi.n	8006d1e <_fflush_r+0xe>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	059b      	lsls	r3, r3, #22
 8006d5c:	d4df      	bmi.n	8006d1e <_fflush_r+0xe>
 8006d5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d60:	f7ff fef8 	bl	8006b54 <__retarget_lock_release_recursive>
 8006d64:	e7db      	b.n	8006d1e <_fflush_r+0xe>
	...

08006d68 <__swhatbuf_r>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	000e      	movs	r6, r1
 8006d6c:	001d      	movs	r5, r3
 8006d6e:	230e      	movs	r3, #14
 8006d70:	5ec9      	ldrsh	r1, [r1, r3]
 8006d72:	0014      	movs	r4, r2
 8006d74:	b096      	sub	sp, #88	; 0x58
 8006d76:	2900      	cmp	r1, #0
 8006d78:	da0c      	bge.n	8006d94 <__swhatbuf_r+0x2c>
 8006d7a:	89b2      	ldrh	r2, [r6, #12]
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	0011      	movs	r1, r2
 8006d80:	4019      	ands	r1, r3
 8006d82:	421a      	tst	r2, r3
 8006d84:	d013      	beq.n	8006dae <__swhatbuf_r+0x46>
 8006d86:	2100      	movs	r1, #0
 8006d88:	3b40      	subs	r3, #64	; 0x40
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	6029      	str	r1, [r5, #0]
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	b016      	add	sp, #88	; 0x58
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	466a      	mov	r2, sp
 8006d96:	f000 f84d 	bl	8006e34 <_fstat_r>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	dbed      	blt.n	8006d7a <__swhatbuf_r+0x12>
 8006d9e:	23f0      	movs	r3, #240	; 0xf0
 8006da0:	9901      	ldr	r1, [sp, #4]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	4019      	ands	r1, r3
 8006da6:	4b03      	ldr	r3, [pc, #12]	; (8006db4 <__swhatbuf_r+0x4c>)
 8006da8:	18c9      	adds	r1, r1, r3
 8006daa:	424b      	negs	r3, r1
 8006dac:	4159      	adcs	r1, r3
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	e7ea      	b.n	8006d8a <__swhatbuf_r+0x22>
 8006db4:	ffffe000 	.word	0xffffe000

08006db8 <__smakebuf_r>:
 8006db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dba:	2602      	movs	r6, #2
 8006dbc:	898b      	ldrh	r3, [r1, #12]
 8006dbe:	0005      	movs	r5, r0
 8006dc0:	000c      	movs	r4, r1
 8006dc2:	4233      	tst	r3, r6
 8006dc4:	d006      	beq.n	8006dd4 <__smakebuf_r+0x1c>
 8006dc6:	0023      	movs	r3, r4
 8006dc8:	3347      	adds	r3, #71	; 0x47
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	2301      	movs	r3, #1
 8006dd0:	6163      	str	r3, [r4, #20]
 8006dd2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006dd4:	466a      	mov	r2, sp
 8006dd6:	ab01      	add	r3, sp, #4
 8006dd8:	f7ff ffc6 	bl	8006d68 <__swhatbuf_r>
 8006ddc:	9900      	ldr	r1, [sp, #0]
 8006dde:	0007      	movs	r7, r0
 8006de0:	0028      	movs	r0, r5
 8006de2:	f7ff fb6d 	bl	80064c0 <_malloc_r>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d108      	bne.n	8006dfc <__smakebuf_r+0x44>
 8006dea:	220c      	movs	r2, #12
 8006dec:	5ea3      	ldrsh	r3, [r4, r2]
 8006dee:	059a      	lsls	r2, r3, #22
 8006df0:	d4ef      	bmi.n	8006dd2 <__smakebuf_r+0x1a>
 8006df2:	2203      	movs	r2, #3
 8006df4:	4393      	bics	r3, r2
 8006df6:	431e      	orrs	r6, r3
 8006df8:	81a6      	strh	r6, [r4, #12]
 8006dfa:	e7e4      	b.n	8006dc6 <__smakebuf_r+0xe>
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	89a2      	ldrh	r2, [r4, #12]
 8006e00:	6020      	str	r0, [r4, #0]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	9b00      	ldr	r3, [sp, #0]
 8006e08:	6120      	str	r0, [r4, #16]
 8006e0a:	6163      	str	r3, [r4, #20]
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <__smakebuf_r+0x74>
 8006e12:	0028      	movs	r0, r5
 8006e14:	230e      	movs	r3, #14
 8006e16:	5ee1      	ldrsh	r1, [r4, r3]
 8006e18:	f000 f81e 	bl	8006e58 <_isatty_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d005      	beq.n	8006e2c <__smakebuf_r+0x74>
 8006e20:	2303      	movs	r3, #3
 8006e22:	89a2      	ldrh	r2, [r4, #12]
 8006e24:	439a      	bics	r2, r3
 8006e26:	3b02      	subs	r3, #2
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	433b      	orrs	r3, r7
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	e7ce      	b.n	8006dd2 <__smakebuf_r+0x1a>

08006e34 <_fstat_r>:
 8006e34:	2300      	movs	r3, #0
 8006e36:	b570      	push	{r4, r5, r6, lr}
 8006e38:	4d06      	ldr	r5, [pc, #24]	; (8006e54 <_fstat_r+0x20>)
 8006e3a:	0004      	movs	r4, r0
 8006e3c:	0008      	movs	r0, r1
 8006e3e:	0011      	movs	r1, r2
 8006e40:	602b      	str	r3, [r5, #0]
 8006e42:	f7ff f991 	bl	8006168 <_fstat>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d103      	bne.n	8006e52 <_fstat_r+0x1e>
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d000      	beq.n	8006e52 <_fstat_r+0x1e>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	2000080c 	.word	0x2000080c

08006e58 <_isatty_r>:
 8006e58:	2300      	movs	r3, #0
 8006e5a:	b570      	push	{r4, r5, r6, lr}
 8006e5c:	4d06      	ldr	r5, [pc, #24]	; (8006e78 <_isatty_r+0x20>)
 8006e5e:	0004      	movs	r4, r0
 8006e60:	0008      	movs	r0, r1
 8006e62:	602b      	str	r3, [r5, #0]
 8006e64:	f7ff fae2 	bl	800642c <_isatty>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d103      	bne.n	8006e74 <_isatty_r+0x1c>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d000      	beq.n	8006e74 <_isatty_r+0x1c>
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	2000080c 	.word	0x2000080c

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
