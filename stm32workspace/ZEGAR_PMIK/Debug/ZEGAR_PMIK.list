
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005cd4  08005cd4  00015cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e1c  08005e1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e24  08005e24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000070  08005e9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08005e9c  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f578  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b4  00000000  00000000  0002f653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00031c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a80  00000000  00000000  000329a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d47  00000000  00000000  00033420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011090  00000000  00000000  0004a167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b437  00000000  00000000  0005b1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038e8  00000000  00000000  000e6630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e9f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005cbc 	.word	0x08005cbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005cbc 	.word	0x08005cbc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 80004be:	f005 f835 	bl	800552c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f001 fc53 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f867 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fab5 	bl	8000a38 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ce:	f000 f977 	bl	80007c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d2:	f000 f9cb 	bl	800086c <MX_TIM3_Init>
  MX_RTC_Init();
 80004d6:	f000 f8cd 	bl	8000674 <MX_RTC_Init>
  MX_USART4_UART_Init();
 80004da:	f000 fa4d 	bl	8000978 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 80004de:	f000 fa1b 	bl	8000918 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 80004e2:	f000 fa79 	bl	80009d8 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  Clocker_Init(&ourClocker, &hrtc, &htim2, &htim3);
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <main+0xc0>)
 80004e8:	4a24      	ldr	r2, [pc, #144]	; (800057c <main+0xc4>)
 80004ea:	4925      	ldr	r1, [pc, #148]	; (8000580 <main+0xc8>)
 80004ec:	4825      	ldr	r0, [pc, #148]	; (8000584 <main+0xcc>)
 80004ee:	f000 fd51 	bl	8000f94 <Clocker_Init>
  Clocker_Set_Time(&ourClocker, 21, 37, 00);
 80004f2:	4824      	ldr	r0, [pc, #144]	; (8000584 <main+0xcc>)
 80004f4:	2300      	movs	r3, #0
 80004f6:	2225      	movs	r2, #37	; 0x25
 80004f8:	2115      	movs	r1, #21
 80004fa:	f000 feb1 	bl	8001260 <Clocker_Set_Time>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t alarm = 0; //Tymczasowa wartość
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
  while (1)
  {


	  if(timer_counter >= ourClocker.screenTimeChanging)
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <main+0xcc>)
 8000506:	789a      	ldrb	r2, [r3, #2]
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <main+0xd0>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	429a      	cmp	r2, r3
 8000510:	d806      	bhi.n	8000520 <main+0x68>
	  {
		  timer_counter = 0;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <main+0xd0>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
		  Clocker_Change_Screen(&ourClocker);
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <main+0xcc>)
 800051a:	0018      	movs	r0, r3
 800051c:	f000 ffb7 	bl	800148e <Clocker_Change_Screen>
	  }

	  // Ustawienie alarmu z poziomu aplikacji.
	  if(alarm == 1)
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d108      	bne.n	800053a <main+0x82>
	  {
		  Clocker_Set_Alarm(&ourClocker, 22, 30); // Tymczasowodałem zmienne Godziny i Minuty, ale należy tam dać czas który ustawiliśmy na apce.
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <main+0xcc>)
 800052a:	221e      	movs	r2, #30
 800052c:	2116      	movs	r1, #22
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fed8 	bl	80012e4 <Clocker_Set_Alarm>
		  alarm = 0;
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	  }

	  // Flaga obsługi budzika, czyli odpala się muzyka i wyłącza RTC Alarm
	  if(budzik == 1)
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <main+0xd4>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b01      	cmp	r3, #1
 8000542:	d10b      	bne.n	800055c <main+0xa4>
	  {
		  DF_PlayFromStart(); //Załączenie muzyki jak już budzik odmierzył swój czas.
 8000544:	f001 f85c 	bl	8001600 <DF_PlayFromStart>
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); //Wyłączenie budzika
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	005a      	lsls	r2, r3, #1
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <main+0xc8>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f003 fa97 	bl	8003a84 <HAL_RTC_DeactivateAlarm>
		  budzik = 0;
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <main+0xd4>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
	  }
	  // Czas działania muzyki, timer robi przerwania co sekundę więc uaktualnia flagę alarm_counter co sekundę i tak 60 razy czyli razem minutę
	  if(alarm_counter >= 60)
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0xd8>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b3b      	cmp	r3, #59	; 0x3b
 8000564:	d9ce      	bls.n	8000504 <main+0x4c>
	  {
		  DF_Pause();          // Tutaj w warunku damy HAL_Read_Pin w celu użycia przycisku jako wyłączenie muzyki z alarmu.
 8000566:	f001 f876 	bl	8001656 <DF_Pause>
		  alarm_counter = 0;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0xd8>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
		  budzik_music = 0;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <main+0xdc>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	  if(timer_counter >= ourClocker.screenTimeChanging)
 8000576:	e7c5      	b.n	8000504 <main+0x4c>
 8000578:	200000f0 	.word	0x200000f0
 800057c:	200000b0 	.word	0x200000b0
 8000580:	2000008c 	.word	0x2000008c
 8000584:	200002cc 	.word	0x200002cc
 8000588:	200002c9 	.word	0x200002c9
 800058c:	200002c8 	.word	0x200002c8
 8000590:	200002ca 	.word	0x200002ca
 8000594:	200002cb 	.word	0x200002cb

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b09f      	sub	sp, #124	; 0x7c
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	2440      	movs	r4, #64	; 0x40
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	0018      	movs	r0, r3
 80005a4:	2338      	movs	r3, #56	; 0x38
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f005 f9e9 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ae:	232c      	movs	r3, #44	; 0x2c
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	0018      	movs	r0, r3
 80005b4:	2314      	movs	r3, #20
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f005 f9e1 	bl	8005980 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	0018      	movs	r0, r3
 80005c2:	2328      	movs	r3, #40	; 0x28
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f005 f9da 	bl	8005980 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xd8>)
 80005d2:	401a      	ands	r2, r3
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xd4>)
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	0109      	lsls	r1, r1, #4
 80005da:	430a      	orrs	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2206      	movs	r2, #6
 80005e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	0052      	lsls	r2, r2, #1
 80005ea:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2210      	movs	r2, #16
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fedd 	bl	80023c0 <HAL_RCC_OscConfig>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800060a:	f000 fb0b 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	212c      	movs	r1, #44	; 0x2c
 8000610:	187b      	adds	r3, r7, r1
 8000612:	220f      	movs	r2, #15
 8000614:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2201      	movs	r2, #1
 800061a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2100      	movs	r1, #0
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fa98 	bl	8002b68 <HAL_RCC_ClockConfig>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800063c:	f000 faf2 	bl	8000c24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2221      	movs	r2, #33	; 0x21
 8000644:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	0252      	lsls	r2, r2, #9
 8000652:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fcaa 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000660:	f000 fae0 	bl	8000c24 <Error_Handler>
  }
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b01f      	add	sp, #124	; 0x7c
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40007000 	.word	0x40007000
 8000670:	ffffe7ff 	.word	0xffffe7ff

08000674 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b090      	sub	sp, #64	; 0x40
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800067a:	232c      	movs	r3, #44	; 0x2c
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f005 f97b 	bl	8005980 <memset>
  RTC_DateTypeDef sDate = {0};
 800068a:	2328      	movs	r3, #40	; 0x28
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000692:	003b      	movs	r3, r7
 8000694:	0018      	movs	r0, r3
 8000696:	2328      	movs	r3, #40	; 0x28
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f005 f970 	bl	8005980 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006a0:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <MX_RTC_Init+0x140>)
 80006a2:	4a45      	ldr	r2, [pc, #276]	; (80007b8 <MX_RTC_Init+0x144>)
 80006a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006a6:	4b43      	ldr	r3, [pc, #268]	; (80007b4 <MX_RTC_Init+0x140>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006ac:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <MX_RTC_Init+0x140>)
 80006ae:	227f      	movs	r2, #127	; 0x7f
 80006b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006b2:	4b40      	ldr	r3, [pc, #256]	; (80007b4 <MX_RTC_Init+0x140>)
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b8:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <MX_RTC_Init+0x140>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <MX_RTC_Init+0x140>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <MX_RTC_Init+0x140>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ca:	4b3a      	ldr	r3, [pc, #232]	; (80007b4 <MX_RTC_Init+0x140>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d0:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <MX_RTC_Init+0x140>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fe0a 	bl	80032ec <HAL_RTC_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80006dc:	f000 faa2 	bl	8000c24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006e0:	212c      	movs	r1, #44	; 0x2c
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000700:	1879      	adds	r1, r7, r1
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_RTC_Init+0x140>)
 8000704:	2201      	movs	r2, #1
 8000706:	0018      	movs	r0, r3
 8000708:	f002 fe8c 	bl	8003424 <HAL_RTC_SetTime>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000710:	f000 fa88 	bl	8000c24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000714:	2128      	movs	r1, #40	; 0x28
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2201      	movs	r2, #1
 8000726:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800072e:	1879      	adds	r1, r7, r1
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_RTC_Init+0x140>)
 8000732:	2201      	movs	r2, #1
 8000734:	0018      	movs	r0, r3
 8000736:	f002 ff7d 	bl	8003634 <HAL_RTC_SetDate>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800073e:	f000 fa71 	bl	8000c24 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000742:	003b      	movs	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800074e:	003b      	movs	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000754:	003b      	movs	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 8000766:	003b      	movs	r3, r7
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <MX_RTC_Init+0x148>)
 800076a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800076c:	003b      	movs	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000772:	003b      	movs	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000778:	003b      	movs	r3, r7
 800077a:	2220      	movs	r2, #32
 800077c:	2101      	movs	r1, #1
 800077e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000780:	003b      	movs	r3, r7
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	0052      	lsls	r2, r2, #1
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000788:	0039      	movs	r1, r7
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_RTC_Init+0x140>)
 800078c:	2201      	movs	r2, #1
 800078e:	0018      	movs	r0, r3
 8000790:	f003 f834 	bl	80037fc <HAL_RTC_SetAlarm>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8000798:	f000 fa44 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	005a      	lsls	r2, r3, #1
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <MX_RTC_Init+0x140>)
 80007a2:	0011      	movs	r1, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f003 f96d 	bl	8003a84 <HAL_RTC_DeactivateAlarm>
  /* USER CODE END RTC_Init 2 */

}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b010      	add	sp, #64	; 0x40
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	40002800 	.word	0x40002800
 80007bc:	80000080 	.word	0x80000080

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	2308      	movs	r3, #8
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	0018      	movs	r0, r3
 80007cc:	2310      	movs	r3, #16
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f005 f8d5 	bl	8005980 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d6:	003b      	movs	r3, r7
 80007d8:	0018      	movs	r0, r3
 80007da:	2308      	movs	r3, #8
 80007dc:	001a      	movs	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	f005 f8ce 	bl	8005980 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_TIM2_Init+0xa4>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	05d2      	lsls	r2, r2, #23
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_TIM2_Init+0xa4>)
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <MX_TIM2_Init+0xa8>)
 80007f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_TIM2_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM2_Init+0xa4>)
 80007fa:	22fa      	movs	r2, #250	; 0xfa
 80007fc:	0092      	lsls	r2, r2, #2
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_TIM2_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_TIM2_Init+0xa4>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_TIM2_Init+0xa4>)
 800080e:	0018      	movs	r0, r3
 8000810:	f003 fab0 	bl	8003d74 <HAL_TIM_Base_Init>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fa04 	bl	8000c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	2108      	movs	r1, #8
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0152      	lsls	r2, r2, #5
 8000824:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000826:	187a      	adds	r2, r7, r1
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_TIM2_Init+0xa4>)
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f003 fc65 	bl	80040fc <HAL_TIM_ConfigClockSource>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000836:	f000 f9f5 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	003b      	movs	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	003b      	movs	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000846:	003a      	movs	r2, r7
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_TIM2_Init+0xa4>)
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f003 fe41 	bl	80044d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000856:	f000 f9e5 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b006      	add	sp, #24
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	200000b0 	.word	0x200000b0
 8000868:	00007cff 	.word	0x00007cff

0800086c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	2308      	movs	r3, #8
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	0018      	movs	r0, r3
 8000878:	2310      	movs	r3, #16
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f005 f87f 	bl	8005980 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	003b      	movs	r3, r7
 8000884:	0018      	movs	r0, r3
 8000886:	2308      	movs	r3, #8
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f005 f878 	bl	8005980 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_TIM3_Init+0xa0>)
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_TIM3_Init+0xa4>)
 8000894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_TIM3_Init+0xa0>)
 8000898:	221f      	movs	r2, #31
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_TIM3_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM3_Init+0xa0>)
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <MX_TIM3_Init+0xa8>)
 80008a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM3_Init+0xa0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_TIM3_Init+0xa0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_TIM3_Init+0xa0>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f003 fa5c 	bl	8003d74 <HAL_TIM_Base_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 f9b0 	bl	8000c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	2108      	movs	r1, #8
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	0152      	lsls	r2, r2, #5
 80008cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_TIM3_Init+0xa0>)
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f003 fc11 	bl	80040fc <HAL_TIM_ConfigClockSource>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008de:	f000 f9a1 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	003b      	movs	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	003b      	movs	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ee:	003a      	movs	r2, r7
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_TIM3_Init+0xa0>)
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 fded 	bl	80044d4 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008fe:	f000 f991 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b006      	add	sp, #24
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	200000f0 	.word	0x200000f0
 8000910:	40000400 	.word	0x40000400
 8000914:	0000fffe 	.word	0x0000fffe

08000918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART1_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000924:	22e1      	movs	r2, #225	; 0xe1
 8000926:	0252      	lsls	r2, r2, #9
 8000928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x58>)
 800095c:	0018      	movs	r0, r3
 800095e:	f003 fe17 	bl	8004590 <HAL_UART_Init>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f95d 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000130 	.word	0x20000130
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_USART4_UART_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 8000984:	2296      	movs	r2, #150	; 0x96
 8000986:	0192      	lsls	r2, r2, #6
 8000988:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <MX_USART4_UART_Init+0x58>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f003 fde7 	bl	8004590 <HAL_UART_Init>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f92d 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001b8 	.word	0x200001b8
 80009d4:	40004c00 	.word	0x40004c00

080009d8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_USART5_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 80009e4:	2296      	movs	r2, #150	; 0x96
 80009e6:	0192      	lsls	r2, r2, #6
 80009e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <MX_USART5_UART_Init+0x58>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f003 fdb7 	bl	8004590 <HAL_UART_Init>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8fd 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000240 	.word	0x20000240
 8000a34:	40005000 	.word	0x40005000

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b08b      	sub	sp, #44	; 0x2c
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	2414      	movs	r4, #20
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	0018      	movs	r0, r3
 8000a44:	2314      	movs	r3, #20
 8000a46:	001a      	movs	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f004 ff99 	bl	8005980 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a52:	4b5a      	ldr	r3, [pc, #360]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a54:	2104      	movs	r1, #4
 8000a56:	430a      	orrs	r2, r1
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	2204      	movs	r2, #4
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6a:	4b54      	ldr	r3, [pc, #336]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a72:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a82:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9a:	4b48      	ldr	r3, [pc, #288]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa2:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab2:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <MX_GPIO_Init+0x184>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	2208      	movs	r2, #8
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin, GPIO_PIN_RESET);
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	2200      	movs	r2, #0
 8000acc:	21e0      	movs	r1, #224	; 0xe0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 fc59 	bl	8002386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8000ad4:	23ea      	movs	r3, #234	; 0xea
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	4839      	ldr	r0, [pc, #228]	; (8000bc0 <MX_GPIO_Init+0x188>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	0019      	movs	r1, r3
 8000ade:	f001 fc52 	bl	8002386 <HAL_GPIO_WritePin>
                          |SDO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <MX_GPIO_Init+0x18c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fc4c 	bl	8002386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	0192      	lsls	r2, r2, #6
 8000af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2284      	movs	r2, #132	; 0x84
 8000afa:	0392      	lsls	r2, r2, #14
 8000afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <MX_GPIO_Init+0x18c>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f001 faa0 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2202      	movs	r2, #2
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2203      	movs	r2, #3
 8000b26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	193a      	adds	r2, r7, r4
 8000b30:	23a0      	movs	r3, #160	; 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 fa8a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	22e0      	movs	r2, #224	; 0xe0
 8000b40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2201      	movs	r2, #1
 8000b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	193a      	adds	r2, r7, r4
 8000b56:	23a0      	movs	r3, #160	; 0xa0
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 fa77 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_6_Pin D_7_Pin D_4_Pin SCLK_Pin
                           SDO_Pin */
  GPIO_InitStruct.Pin = D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8000b62:	0021      	movs	r1, r4
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	22ea      	movs	r2, #234	; 0xea
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	601a      	str	r2, [r3, #0]
                          |SDO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2201      	movs	r2, #1
 8000b72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <MX_GPIO_Init+0x188>)
 8000b84:	0019      	movs	r1, r3
 8000b86:	0010      	movs	r0, r2
 8000b88:	f001 fa62 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 8000b8c:	0021      	movs	r1, r4
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2201      	movs	r2, #1
 8000b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <MX_GPIO_Init+0x18c>)
 8000baa:	0019      	movs	r1, r3
 8000bac:	0010      	movs	r0, r2
 8000bae:	f001 fa4f 	bl	8002050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b00b      	add	sp, #44	; 0x2c
 8000bb8:	bd90      	pop	{r4, r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	50000400 	.word	0x50000400
 8000bc4:	50000800 	.word	0x50000800

08000bc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d116      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		timer_counter++;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	3301      	adds	r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000be4:	701a      	strb	r2, [r3, #0]
		Clocker_Segment_Update(&ourClocker);
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 fbdf 	bl	80013ac <Clocker_Segment_Update>
		if(budzik_music == 1)
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d106      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			alarm_counter++;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c04:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	200000b0 	.word	0x200000b0
 8000c14:	200002c9 	.word	0x200002c9
 8000c18:	200002cc 	.word	0x200002cc
 8000c1c:	200002cb 	.word	0x200002cb
 8000c20:	200002ca 	.word	0x200002ca

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <HAL_MspInit+0x24>)
 8000c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x24>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_MspInit+0x24>)
 8000c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_MspInit+0x24>)
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	0549      	lsls	r1, r1, #21
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_RTC_MspInit+0x28>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d106      	bne.n	8000c78 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_RTC_MspInit+0x2c>)
 8000c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_RTC_MspInit+0x2c>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	02c9      	lsls	r1, r1, #11
 8000c74:	430a      	orrs	r2, r1
 8000c76:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40002800 	.word	0x40002800
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d10e      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_TIM_Base_MspInit+0x50>)
 8000c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_TIM_Base_MspInit+0x50>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	200f      	movs	r0, #15
 8000cae:	f001 f99d 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f001 f9af 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cb8:	e00a      	b.n	8000cd0 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_TIM_Base_MspInit+0x54>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d105      	bne.n	8000cd0 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <HAL_TIM_Base_MspInit+0x50>)
 8000cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_TIM_Base_MspInit+0x50>)
 8000cca:	2102      	movs	r1, #2
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40000400 	.word	0x40000400

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08d      	sub	sp, #52	; 0x34
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	241c      	movs	r4, #28
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f004 fe44 	bl	8005980 <memset>
  if(huart->Instance==USART1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a5a      	ldr	r2, [pc, #360]	; (8000e68 <HAL_UART_MspInit+0x188>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d02:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d06:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	01c9      	lsls	r1, r1, #7
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d14:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1c:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2201      	movs	r2, #1
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	22c0      	movs	r2, #192	; 0xc0
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	0021      	movs	r1, r4
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2202      	movs	r2, #2
 8000d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2203      	movs	r2, #3
 8000d42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2204      	movs	r2, #4
 8000d48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	187a      	adds	r2, r7, r1
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 f97c 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000d58:	e081      	b.n	8000e5e <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART4)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a44      	ldr	r2, [pc, #272]	; (8000e70 <HAL_UART_MspInit+0x190>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d12a      	bne.n	8000dba <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000d64:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d68:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0309      	lsls	r1, r1, #12
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d8a:	211c      	movs	r1, #28
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2202      	movs	r2, #2
 8000d96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2203      	movs	r2, #3
 8000da2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2206      	movs	r2, #6
 8000da8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	187a      	adds	r2, r7, r1
 8000dac:	23a0      	movs	r3, #160	; 0xa0
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	0011      	movs	r1, r2
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 f94c 	bl	8002050 <HAL_GPIO_Init>
}
 8000db8:	e051      	b.n	8000e5e <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART5)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a2d      	ldr	r2, [pc, #180]	; (8000e74 <HAL_UART_MspInit+0x194>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d14c      	bne.n	8000e5e <HAL_UART_MspInit+0x17e>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	0349      	lsls	r1, r1, #13
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000dd8:	2104      	movs	r1, #4
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	2204      	movs	r2, #4
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000df0:	2108      	movs	r1, #8
 8000df2:	430a      	orrs	r2, r1
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e02:	211c      	movs	r1, #28
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	0152      	lsls	r2, r2, #5
 8000e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2202      	movs	r2, #2
 8000e12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	2202      	movs	r2, #2
 8000e24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	0010      	movs	r0, r2
 8000e2e:	f001 f90f 	bl	8002050 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e32:	0021      	movs	r1, r4
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2204      	movs	r2, #4
 8000e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2206      	movs	r2, #6
 8000e50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <HAL_UART_MspInit+0x19c>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f001 f8f9 	bl	8002050 <HAL_GPIO_Init>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b00d      	add	sp, #52	; 0x34
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40004c00 	.word	0x40004c00
 8000e74:	40005000 	.word	0x40005000
 8000e78:	50000800 	.word	0x50000800
 8000e7c:	50000c00 	.word	0x50000c00

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 ffb6 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <TIM2_IRQHandler+0x14>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f003 f838 	bl	8003f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	200000b0 	.word	0x200000b0

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f004 fdaa 	bl	8005a50 <__errno>
 8000efc:	0003      	movs	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	18d2      	adds	r2, r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20005000 	.word	0x20005000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000420 	.word	0x20000420
 8000f30:	20000620 	.word	0x20000620

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f44:	f7ff fff6 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f004 fd75 	bl	8005a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff faa1 	bl	80004b8 <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
   ldr   r0, =_estack
 8000f78:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f84:	08005e2c 	.word	0x08005e2c
  ldr r2, =_sbss
 8000f88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f8c:	20000620 	.word	0x20000620

08000f90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_COMP_IRQHandler>
	...

08000f94 <Clocker_Init>:
 *      Author: zero-jedynkowy
 */
#include "Clocker.h"

void Clocker_Init(Clocker * myClocker, RTC_HandleTypeDef * rtcHandle, TIM_HandleTypeDef * timSegment, TIM_HandleTypeDef * timScreen)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
	DF_Init(20);
 8000fa2:	2014      	movs	r0, #20
 8000fa4:	f000 fb39 	bl	800161a <DF_Init>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4833      	ldr	r0, [pc, #204]	; (800107c <Clocker_Init+0xe8>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	f001 f9e8 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4830      	ldr	r0, [pc, #192]	; (800107c <Clocker_Init+0xe8>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	f001 f9e1 	bl	8002386 <HAL_GPIO_WritePin>
	myClocker->maxScreen = 9;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2209      	movs	r2, #9
 8000fc8:	701a      	strb	r2, [r3, #0]
	myClocker->currentScreen = 0;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	705a      	strb	r2, [r3, #1]
	myClocker->screenTimeChanging = 1; //in seconds
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	709a      	strb	r2, [r3, #2]
	Clocker_Set_Screens(myClocker);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 f851 	bl	8001080 <Clocker_Set_Screens>
	myClocker->sTime = (RTC_TimeTypeDef *)malloc(sizeof(RTC_TimeTypeDef));
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f004 fb00 	bl	80055e4 <malloc>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	23a2      	movs	r3, #162	; 0xa2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	50d1      	str	r1, [r2, r3]
	*myClocker->sTime = (RTC_TimeTypeDef){0};
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	23a2      	movs	r3, #162	; 0xa2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	58d3      	ldr	r3, [r2, r3]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	2314      	movs	r3, #20
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f004 fcbe 	bl	8005980 <memset>
	myClocker->sDate = (RTC_DateTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8001004:	2004      	movs	r0, #4
 8001006:	f004 faed 	bl	80055e4 <malloc>
 800100a:	0003      	movs	r3, r0
 800100c:	0019      	movs	r1, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	23a4      	movs	r3, #164	; 0xa4
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	50d1      	str	r1, [r2, r3]
	*myClocker->sDate = (RTC_DateTypeDef){0};
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	23a4      	movs	r3, #164	; 0xa4
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	58d3      	ldr	r3, [r2, r3]
 800101e:	0018      	movs	r0, r3
 8001020:	2304      	movs	r3, #4
 8001022:	001a      	movs	r2, r3
 8001024:	2100      	movs	r1, #0
 8001026:	f004 fcab 	bl	8005980 <memset>
	myClocker->sAlarm = (RTC_AlarmTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 800102a:	2004      	movs	r0, #4
 800102c:	f004 fada 	bl	80055e4 <malloc>
 8001030:	0003      	movs	r3, r0
 8001032:	0019      	movs	r1, r3
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	23a6      	movs	r3, #166	; 0xa6
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	50d1      	str	r1, [r2, r3]
	*myClocker->sAlarm = (RTC_AlarmTypeDef){0};
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	23a6      	movs	r3, #166	; 0xa6
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	58d3      	ldr	r3, [r2, r3]
 8001044:	0018      	movs	r0, r3
 8001046:	2328      	movs	r3, #40	; 0x28
 8001048:	001a      	movs	r2, r3
 800104a:	2100      	movs	r1, #0
 800104c:	f004 fc98 	bl	8005980 <memset>
	myClocker->rtcHandle = rtcHandle;
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	23a8      	movs	r3, #168	; 0xa8
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	50d1      	str	r1, [r2, r3]
	HAL_TIM_Base_Start_IT(timSegment);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0018      	movs	r0, r3
 800105e:	f002 ff13 	bl	8003e88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(timScreen);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	0018      	movs	r0, r3
 8001066:	f002 fec5 	bl	8003df4 <HAL_TIM_Base_Start>
	lcd_init();
 800106a:	f000 fbe7 	bl	800183c <lcd_init>
	lcd_clear();
 800106e:	f000 fbbb 	bl	80017e8 <lcd_clear>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b014      	add	sp, #80	; 0x50
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	50000400 	.word	0x50000400

08001080 <Clocker_Set_Screens>:

void Clocker_Set_Screens(Clocker * myClocker)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	strcpy(myClocker->tableOfScreens[0][0], "WEATHER");
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1cda      	adds	r2, r3, #3
 800108c:	4b65      	ldr	r3, [pc, #404]	; (8001224 <Clocker_Set_Screens+0x1a4>)
 800108e:	0010      	movs	r0, r2
 8001090:	0019      	movs	r1, r3
 8001092:	2308      	movs	r3, #8
 8001094:	001a      	movs	r2, r3
 8001096:	f004 fd08 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[0][1], "%s");
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3313      	adds	r3, #19
 800109e:	001a      	movs	r2, r3
 80010a0:	4b61      	ldr	r3, [pc, #388]	; (8001228 <Clocker_Set_Screens+0x1a8>)
 80010a2:	0010      	movs	r0, r2
 80010a4:	0019      	movs	r1, r3
 80010a6:	2303      	movs	r3, #3
 80010a8:	001a      	movs	r2, r3
 80010aa:	f004 fcfe 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[1][0], "TEMPERATURE");
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3323      	adds	r3, #35	; 0x23
 80010b2:	001a      	movs	r2, r3
 80010b4:	4b5d      	ldr	r3, [pc, #372]	; (800122c <Clocker_Set_Screens+0x1ac>)
 80010b6:	0010      	movs	r0, r2
 80010b8:	0019      	movs	r1, r3
 80010ba:	230c      	movs	r3, #12
 80010bc:	001a      	movs	r2, r3
 80010be:	f004 fcf4 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[1][1], "%.1f st. C");
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3333      	adds	r3, #51	; 0x33
 80010c6:	001a      	movs	r2, r3
 80010c8:	4b59      	ldr	r3, [pc, #356]	; (8001230 <Clocker_Set_Screens+0x1b0>)
 80010ca:	0010      	movs	r0, r2
 80010cc:	0019      	movs	r1, r3
 80010ce:	230b      	movs	r3, #11
 80010d0:	001a      	movs	r2, r3
 80010d2:	f004 fcea 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[2][0], "FEELS LIKE");
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3343      	adds	r3, #67	; 0x43
 80010da:	001a      	movs	r2, r3
 80010dc:	4b55      	ldr	r3, [pc, #340]	; (8001234 <Clocker_Set_Screens+0x1b4>)
 80010de:	0010      	movs	r0, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	230b      	movs	r3, #11
 80010e4:	001a      	movs	r2, r3
 80010e6:	f004 fce0 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[2][1], "%.1f st. C");
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3353      	adds	r3, #83	; 0x53
 80010ee:	001a      	movs	r2, r3
 80010f0:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <Clocker_Set_Screens+0x1b0>)
 80010f2:	0010      	movs	r0, r2
 80010f4:	0019      	movs	r1, r3
 80010f6:	230b      	movs	r3, #11
 80010f8:	001a      	movs	r2, r3
 80010fa:	f004 fcd6 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[3][0], "PRESSURE");
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3363      	adds	r3, #99	; 0x63
 8001102:	001a      	movs	r2, r3
 8001104:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <Clocker_Set_Screens+0x1b8>)
 8001106:	0010      	movs	r0, r2
 8001108:	0019      	movs	r1, r3
 800110a:	2309      	movs	r3, #9
 800110c:	001a      	movs	r2, r3
 800110e:	f004 fccc 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[3][1], "%.0f hPa");
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3373      	adds	r3, #115	; 0x73
 8001116:	001a      	movs	r2, r3
 8001118:	4b48      	ldr	r3, [pc, #288]	; (800123c <Clocker_Set_Screens+0x1bc>)
 800111a:	0010      	movs	r0, r2
 800111c:	0019      	movs	r1, r3
 800111e:	2309      	movs	r3, #9
 8001120:	001a      	movs	r2, r3
 8001122:	f004 fcc2 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[4][0], "HUMIDITY");
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3383      	adds	r3, #131	; 0x83
 800112a:	001a      	movs	r2, r3
 800112c:	4b44      	ldr	r3, [pc, #272]	; (8001240 <Clocker_Set_Screens+0x1c0>)
 800112e:	0010      	movs	r0, r2
 8001130:	0019      	movs	r1, r3
 8001132:	2309      	movs	r3, #9
 8001134:	001a      	movs	r2, r3
 8001136:	f004 fcb8 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[4][1], "%.1f %");
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3393      	adds	r3, #147	; 0x93
 800113e:	001a      	movs	r2, r3
 8001140:	4b40      	ldr	r3, [pc, #256]	; (8001244 <Clocker_Set_Screens+0x1c4>)
 8001142:	0010      	movs	r0, r2
 8001144:	0019      	movs	r1, r3
 8001146:	2307      	movs	r3, #7
 8001148:	001a      	movs	r2, r3
 800114a:	f004 fcae 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[5][0], "WIND SPEED");
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	33a3      	adds	r3, #163	; 0xa3
 8001152:	001a      	movs	r2, r3
 8001154:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <Clocker_Set_Screens+0x1c8>)
 8001156:	0010      	movs	r0, r2
 8001158:	0019      	movs	r1, r3
 800115a:	230b      	movs	r3, #11
 800115c:	001a      	movs	r2, r3
 800115e:	f004 fca4 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[5][1], "%.1f m.s");
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	33b3      	adds	r3, #179	; 0xb3
 8001166:	001a      	movs	r2, r3
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <Clocker_Set_Screens+0x1cc>)
 800116a:	0010      	movs	r0, r2
 800116c:	0019      	movs	r1, r3
 800116e:	2309      	movs	r3, #9
 8001170:	001a      	movs	r2, r3
 8001172:	f004 fc9a 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[6][0], "WIND SPEED");
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	33c3      	adds	r3, #195	; 0xc3
 800117a:	001a      	movs	r2, r3
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <Clocker_Set_Screens+0x1c8>)
 800117e:	0010      	movs	r0, r2
 8001180:	0019      	movs	r1, r3
 8001182:	230b      	movs	r3, #11
 8001184:	001a      	movs	r2, r3
 8001186:	f004 fc90 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[6][1], "%.1f m.s");
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	33d3      	adds	r3, #211	; 0xd3
 800118e:	001a      	movs	r2, r3
 8001190:	4b2e      	ldr	r3, [pc, #184]	; (800124c <Clocker_Set_Screens+0x1cc>)
 8001192:	0010      	movs	r0, r2
 8001194:	0019      	movs	r1, r3
 8001196:	2309      	movs	r3, #9
 8001198:	001a      	movs	r2, r3
 800119a:	f004 fc86 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[7][0], "SUNRISE");
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	33e3      	adds	r3, #227	; 0xe3
 80011a2:	001a      	movs	r2, r3
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <Clocker_Set_Screens+0x1d0>)
 80011a6:	0010      	movs	r0, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	2308      	movs	r3, #8
 80011ac:	001a      	movs	r2, r3
 80011ae:	f004 fc7c 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[7][1], "%d:%d");
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	33f3      	adds	r3, #243	; 0xf3
 80011b6:	001a      	movs	r2, r3
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <Clocker_Set_Screens+0x1d4>)
 80011ba:	0010      	movs	r0, r2
 80011bc:	0019      	movs	r1, r3
 80011be:	2306      	movs	r3, #6
 80011c0:	001a      	movs	r2, r3
 80011c2:	f004 fc72 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[8][0], "SUNSET");
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	1d1a      	adds	r2, r3, #4
 80011ca:	32ff      	adds	r2, #255	; 0xff
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <Clocker_Set_Screens+0x1d8>)
 80011ce:	0010      	movs	r0, r2
 80011d0:	0019      	movs	r1, r3
 80011d2:	2307      	movs	r3, #7
 80011d4:	001a      	movs	r2, r3
 80011d6:	f004 fc68 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[8][1], "%d:%d");
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3314      	adds	r3, #20
 80011de:	33ff      	adds	r3, #255	; 0xff
 80011e0:	001a      	movs	r2, r3
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <Clocker_Set_Screens+0x1d4>)
 80011e4:	0010      	movs	r0, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	2306      	movs	r3, #6
 80011ea:	001a      	movs	r2, r3
 80011ec:	f004 fc5d 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[9][0], "CITY");
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3324      	adds	r3, #36	; 0x24
 80011f4:	33ff      	adds	r3, #255	; 0xff
 80011f6:	001a      	movs	r2, r3
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <Clocker_Set_Screens+0x1dc>)
 80011fa:	0010      	movs	r0, r2
 80011fc:	0019      	movs	r1, r3
 80011fe:	2305      	movs	r3, #5
 8001200:	001a      	movs	r2, r3
 8001202:	f004 fc52 	bl	8005aaa <memcpy>
	strcpy(myClocker->tableOfScreens[9][1], "%s");
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3334      	adds	r3, #52	; 0x34
 800120a:	33ff      	adds	r3, #255	; 0xff
 800120c:	001a      	movs	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <Clocker_Set_Screens+0x1a8>)
 8001210:	0010      	movs	r0, r2
 8001212:	0019      	movs	r1, r3
 8001214:	2303      	movs	r3, #3
 8001216:	001a      	movs	r2, r3
 8001218:	f004 fc47 	bl	8005aaa <memcpy>
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08005cd4 	.word	0x08005cd4
 8001228:	08005cdc 	.word	0x08005cdc
 800122c:	08005ce0 	.word	0x08005ce0
 8001230:	08005cec 	.word	0x08005cec
 8001234:	08005cf8 	.word	0x08005cf8
 8001238:	08005d04 	.word	0x08005d04
 800123c:	08005d10 	.word	0x08005d10
 8001240:	08005d1c 	.word	0x08005d1c
 8001244:	08005d28 	.word	0x08005d28
 8001248:	08005d30 	.word	0x08005d30
 800124c:	08005d3c 	.word	0x08005d3c
 8001250:	08005d48 	.word	0x08005d48
 8001254:	08005d50 	.word	0x08005d50
 8001258:	08005d58 	.word	0x08005d58
 800125c:	08005d60 	.word	0x08005d60

08001260 <Clocker_Set_Time>:

void Clocker_Set_Time(Clocker * myClocker, uint8_t newHours, uint8_t newMinutes, uint8_t newSeconds)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	000c      	movs	r4, r1
 800126a:	0010      	movs	r0, r2
 800126c:	0019      	movs	r1, r3
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	1c22      	adds	r2, r4, #0
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	1cbb      	adds	r3, r7, #2
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	1c7b      	adds	r3, r7, #1
 800127c:	1c0a      	adds	r2, r1, #0
 800127e:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Hours = newHours;
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	23a2      	movs	r3, #162	; 0xa2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	58d3      	ldr	r3, [r2, r3]
 8001288:	1cfa      	adds	r2, r7, #3
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Minutes = newMinutes;
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	23a2      	movs	r3, #162	; 0xa2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	58d3      	ldr	r3, [r2, r3]
 8001296:	1cba      	adds	r2, r7, #2
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	705a      	strb	r2, [r3, #1]
	myClocker->sTime->Seconds = newSeconds;
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	23a2      	movs	r3, #162	; 0xa2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	58d3      	ldr	r3, [r2, r3]
 80012a4:	1c7a      	adds	r2, r7, #1
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	709a      	strb	r2, [r3, #2]
	myClocker->sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	23a2      	movs	r3, #162	; 0xa2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	58d3      	ldr	r3, [r2, r3]
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
	myClocker->sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	23a2      	movs	r3, #162	; 0xa2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	58d3      	ldr	r3, [r2, r3]
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	23a8      	movs	r3, #168	; 0xa8
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	58d0      	ldr	r0, [r2, r3]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	23a2      	movs	r3, #162	; 0xa2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	58d3      	ldr	r3, [r2, r3]
 80012d2:	2200      	movs	r2, #0
 80012d4:	0019      	movs	r1, r3
 80012d6:	f002 f8a5 	bl	8003424 <HAL_RTC_SetTime>
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b003      	add	sp, #12
 80012e0:	bd90      	pop	{r4, r7, pc}
	...

080012e4 <Clocker_Set_Alarm>:

void Clocker_Set_Alarm(Clocker * myClocker, uint8_t alarmHours, uint8_t alarmMinutes)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	0008      	movs	r0, r1
 80012ee:	0011      	movs	r1, r2
 80012f0:	1cfb      	adds	r3, r7, #3
 80012f2:	1c02      	adds	r2, r0, #0
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	1cbb      	adds	r3, r7, #2
 80012f8:	1c0a      	adds	r2, r1, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Hours = alarmHours;
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	23a6      	movs	r3, #166	; 0xa6
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	58d3      	ldr	r3, [r2, r3]
 8001304:	1cfa      	adds	r2, r7, #3
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Minutes = alarmMinutes;
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	23a6      	movs	r3, #166	; 0xa6
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	1cba      	adds	r2, r7, #2
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	705a      	strb	r2, [r3, #1]
	myClocker->sAlarm->AlarmTime.Seconds = 0x0;
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	23a6      	movs	r3, #166	; 0xa6
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	58d3      	ldr	r3, [r2, r3]
 8001320:	2200      	movs	r2, #0
 8001322:	709a      	strb	r2, [r3, #2]
	myClocker->sAlarm->AlarmTime.SubSeconds = 0x0;
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	23a6      	movs	r3, #166	; 0xa6
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	58d3      	ldr	r3, [r2, r3]
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
	myClocker->sAlarm->AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	23a6      	movs	r3, #166	; 0xa6
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	58d3      	ldr	r3, [r2, r3]
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
	myClocker->sAlarm->AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	23a6      	movs	r3, #166	; 0xa6
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	58d3      	ldr	r3, [r2, r3]
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
	myClocker->sAlarm->AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	23a6      	movs	r3, #166	; 0xa6
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	58d3      	ldr	r3, [r2, r3]
 8001350:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <Clocker_Set_Alarm+0xc4>)
 8001352:	615a      	str	r2, [r3, #20]
	myClocker->sAlarm->AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	23a6      	movs	r3, #166	; 0xa6
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	58d3      	ldr	r3, [r2, r3]
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
	myClocker->sAlarm->AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	23a6      	movs	r3, #166	; 0xa6
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	58d3      	ldr	r3, [r2, r3]
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
	myClocker->sAlarm->AlarmDateWeekDay = 0x1;
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	23a6      	movs	r3, #166	; 0xa6
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	58d3      	ldr	r3, [r2, r3]
 8001374:	2220      	movs	r2, #32
 8001376:	2101      	movs	r1, #1
 8001378:	5499      	strb	r1, [r3, r2]
	myClocker->sAlarm->Alarm = RTC_ALARM_A;
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	23a6      	movs	r3, #166	; 0xa6
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	58d3      	ldr	r3, [r2, r3]
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0052      	lsls	r2, r2, #1
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTC_SetAlarm(myClocker->rtcHandle, myClocker->sAlarm, RTC_FORMAT_BCD);
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	23a8      	movs	r3, #168	; 0xa8
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	58d0      	ldr	r0, [r2, r3]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	23a6      	movs	r3, #166	; 0xa6
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	58d3      	ldr	r3, [r2, r3]
 8001398:	2201      	movs	r2, #1
 800139a:	0019      	movs	r1, r3
 800139c:	f002 fa2e 	bl	80037fc <HAL_RTC_SetAlarm>
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	80000080 	.word	0x80000080

080013ac <Clocker_Segment_Update>:

void Clocker_Segment_Update(Clocker * myClocker)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	uint8_t tempTime[4] = {0};
 80013b4:	240c      	movs	r4, #12
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
	HAL_RTC_GetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	23a8      	movs	r3, #168	; 0xa8
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	58d0      	ldr	r0, [r2, r3]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	23a2      	movs	r3, #162	; 0xa2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	58d3      	ldr	r3, [r2, r3]
 80013cc:	2200      	movs	r2, #0
 80013ce:	0019      	movs	r1, r3
 80013d0:	f002 f8d2 	bl	8003578 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(myClocker->rtcHandle, myClocker->sDate, RTC_FORMAT_BIN);
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	23a8      	movs	r3, #168	; 0xa8
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	58d0      	ldr	r0, [r2, r3]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	23a4      	movs	r3, #164	; 0xa4
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	58d3      	ldr	r3, [r2, r3]
 80013e4:	2200      	movs	r2, #0
 80013e6:	0019      	movs	r1, r3
 80013e8:	f002 f9b8 	bl	800375c <HAL_RTC_GetDate>
	tempTime[0] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)/10);
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	23a2      	movs	r3, #162	; 0xa2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	58d3      	ldr	r3, [r2, r3]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	210a      	movs	r1, #10
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7fe fe8d 	bl	8000118 <__udivsi3>
 80013fe:	0003      	movs	r3, r0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	0018      	movs	r0, r3
 8001404:	f000 f876 	bl	80014f4 <Clocker_Convert_Int_to_Segment>
 8001408:	0003      	movs	r3, r0
 800140a:	001a      	movs	r2, r3
 800140c:	193b      	adds	r3, r7, r4
 800140e:	701a      	strb	r2, [r3, #0]
	tempTime[1] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)%10);
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	23a2      	movs	r3, #162	; 0xa2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	58d3      	ldr	r3, [r2, r3]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	210a      	movs	r1, #10
 800141c:	0018      	movs	r0, r3
 800141e:	f7fe ff01 	bl	8000224 <__aeabi_uidivmod>
 8001422:	000b      	movs	r3, r1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	0018      	movs	r0, r3
 8001428:	f000 f864 	bl	80014f4 <Clocker_Convert_Int_to_Segment>
 800142c:	0003      	movs	r3, r0
 800142e:	001a      	movs	r2, r3
 8001430:	193b      	adds	r3, r7, r4
 8001432:	705a      	strb	r2, [r3, #1]
	tempTime[2] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)/10);
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	23a2      	movs	r3, #162	; 0xa2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	58d3      	ldr	r3, [r2, r3]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	210a      	movs	r1, #10
 8001440:	0018      	movs	r0, r3
 8001442:	f7fe fe69 	bl	8000118 <__udivsi3>
 8001446:	0003      	movs	r3, r0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	0018      	movs	r0, r3
 800144c:	f000 f852 	bl	80014f4 <Clocker_Convert_Int_to_Segment>
 8001450:	0003      	movs	r3, r0
 8001452:	001a      	movs	r2, r3
 8001454:	193b      	adds	r3, r7, r4
 8001456:	709a      	strb	r2, [r3, #2]
	tempTime[3] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)%10);
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	23a2      	movs	r3, #162	; 0xa2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	58d3      	ldr	r3, [r2, r3]
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	210a      	movs	r1, #10
 8001464:	0018      	movs	r0, r3
 8001466:	f7fe fedd 	bl	8000224 <__aeabi_uidivmod>
 800146a:	000b      	movs	r3, r1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f840 	bl	80014f4 <Clocker_Convert_Int_to_Segment>
 8001474:	0003      	movs	r3, r0
 8001476:	001a      	movs	r2, r3
 8001478:	193b      	adds	r3, r7, r4
 800147a:	70da      	strb	r2, [r3, #3]
	tm1637_DisplayHandle(7, tempTime);
 800147c:	193b      	adds	r3, r7, r4
 800147e:	0019      	movs	r1, r3
 8001480:	2007      	movs	r0, #7
 8001482:	f000 fbdb 	bl	8001c3c <tm1637_DisplayHandle>
}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b005      	add	sp, #20
 800148c:	bd90      	pop	{r4, r7, pc}

0800148e <Clocker_Change_Screen>:

void Clocker_Change_Screen(Clocker * myClocker)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	myClocker->currentScreen++;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	705a      	strb	r2, [r3, #1]
	if(myClocker->currentScreen >= 10)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	2b09      	cmp	r3, #9
 80014a8:	d902      	bls.n	80014b0 <Clocker_Change_Screen+0x22>
	{
		myClocker->currentScreen = 0;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	705a      	strb	r2, [r3, #1]
	}
	lcd_clear();
 80014b0:	f000 f99a 	bl	80017e8 <lcd_clear>
	lcd_put_cur(0, 0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f9a1 	bl	80017fe <lcd_put_cur>
	lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][0]);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	785b      	ldrb	r3, [r3, #1]
 80014c0:	015b      	lsls	r3, r3, #5
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	18d3      	adds	r3, r2, r3
 80014c6:	3303      	adds	r3, #3
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f9f5 	bl	80018b8 <lcd_send_string>
	lcd_put_cur(1, 0);
 80014ce:	2100      	movs	r1, #0
 80014d0:	2001      	movs	r0, #1
 80014d2:	f000 f994 	bl	80017fe <lcd_put_cur>
	lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][1]);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	3310      	adds	r3, #16
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	3303      	adds	r3, #3
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 f9e7 	bl	80018b8 <lcd_send_string>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <Clocker_Convert_Int_to_Segment>:
{
	//tutaj rób
}

uint8_t Clocker_Convert_Int_to_Segment(uint8_t c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	0002      	movs	r2, r0
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	701a      	strb	r2, [r3, #0]
	switch(c)
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b09      	cmp	r3, #9
 8001506:	d818      	bhi.n	800153a <Clocker_Convert_Int_to_Segment+0x46>
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <Clocker_Convert_Int_to_Segment+0x50>)
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 8001512:	233f      	movs	r3, #63	; 0x3f
 8001514:	e012      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 1 : return 0x06;
 8001516:	2306      	movs	r3, #6
 8001518:	e010      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 2 : return 0x5b;
 800151a:	235b      	movs	r3, #91	; 0x5b
 800151c:	e00e      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 3 : return 0x4f;
 800151e:	234f      	movs	r3, #79	; 0x4f
 8001520:	e00c      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 4 : return 0x66;
 8001522:	2366      	movs	r3, #102	; 0x66
 8001524:	e00a      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 5 : return 0x6d;
 8001526:	236d      	movs	r3, #109	; 0x6d
 8001528:	e008      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 6 : return 0x7d;
 800152a:	237d      	movs	r3, #125	; 0x7d
 800152c:	e006      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 7 : return 0x07;
 800152e:	2307      	movs	r3, #7
 8001530:	e004      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 8 : return 0x7f;
 8001532:	237f      	movs	r3, #127	; 0x7f
 8001534:	e002      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
		case 9 : return 0x6f;
 8001536:	236f      	movs	r3, #111	; 0x6f
 8001538:	e000      	b.n	800153c <Clocker_Convert_Int_to_Segment+0x48>
	}
	return 0x3f;
 800153a:	233f      	movs	r3, #63	; 0x3f
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}
 8001544:	08005d90 	.word	0x08005d90

08001548 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	0004      	movs	r4, r0
 8001550:	0008      	movs	r0, r1
 8001552:	0011      	movs	r1, r2
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	1c22      	adds	r2, r4, #0
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	1dbb      	adds	r3, r7, #6
 800155c:	1c02      	adds	r2, r0, #0
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	1d7b      	adds	r3, r7, #5
 8001562:	1c0a      	adds	r2, r1, #0
 8001564:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b29a      	uxth	r2, r3
 800156c:	1dbb      	adds	r3, r7, #6
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	18d3      	adds	r3, r2, r3
 8001574:	b29a      	uxth	r2, r3
 8001576:	1d7b      	adds	r3, r7, #5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	18d3      	adds	r3, r2, r3
 800157e:	b29a      	uxth	r2, r3
 8001580:	2016      	movs	r0, #22
 8001582:	183b      	adds	r3, r7, r0
 8001584:	3206      	adds	r2, #6
 8001586:	32ff      	adds	r2, #255	; 0xff
 8001588:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 800158a:	183b      	adds	r3, r7, r0
 800158c:	183a      	adds	r2, r7, r0
 800158e:	8812      	ldrh	r2, [r2, #0]
 8001590:	4252      	negs	r2, r2
 8001592:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8001594:	210c      	movs	r1, #12
 8001596:	187b      	adds	r3, r7, r1
 8001598:	227e      	movs	r2, #126	; 0x7e
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	187b      	adds	r3, r7, r1
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	705a      	strb	r2, [r3, #1]
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2206      	movs	r2, #6
 80015a6:	709a      	strb	r2, [r3, #2]
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	1dfa      	adds	r2, r7, #7
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	70da      	strb	r2, [r3, #3]
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2200      	movs	r2, #0
 80015b4:	711a      	strb	r2, [r3, #4]
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	1dba      	adds	r2, r7, #6
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	715a      	strb	r2, [r3, #5]
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	1d7a      	adds	r2, r7, #5
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	719a      	strb	r2, [r3, #6]
 80015c6:	183b      	adds	r3, r7, r0
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	71da      	strb	r2, [r3, #7]
 80015d4:	183b      	adds	r3, r7, r0
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	721a      	strb	r2, [r3, #8]
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	22ef      	movs	r2, #239	; 0xef
 80015e2:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 80015e4:	2301      	movs	r3, #1
 80015e6:	425b      	negs	r3, r3
 80015e8:	1879      	adds	r1, r7, r1
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <Send_cmd+0xb4>)
 80015ec:	220a      	movs	r2, #10
 80015ee:	f003 f823 	bl	8004638 <HAL_UART_Transmit>
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b007      	add	sp, #28
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	200001b8 	.word	0x200001b8

08001600 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8001604:	2201      	movs	r2, #1
 8001606:	2100      	movs	r1, #0
 8001608:	2003      	movs	r0, #3
 800160a:	f7ff ff9d 	bl	8001548 <Send_cmd>
  HAL_Delay(200);
 800160e:	20c8      	movs	r0, #200	; 0xc8
 8001610:	f000 fc1c 	bl	8001e4c <HAL_Delay>
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <DF_Init>:


void DF_Init (uint8_t volume)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	0002      	movs	r2, r0
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 8001626:	2202      	movs	r2, #2
 8001628:	2100      	movs	r1, #0
 800162a:	203f      	movs	r0, #63	; 0x3f
 800162c:	f7ff ff8c 	bl	8001548 <Send_cmd>
	HAL_Delay(200);
 8001630:	20c8      	movs	r0, #200	; 0xc8
 8001632:	f000 fc0b 	bl	8001e4c <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	001a      	movs	r2, r3
 800163c:	2100      	movs	r1, #0
 800163e:	2006      	movs	r0, #6
 8001640:	f7ff ff82 	bl	8001548 <Send_cmd>
	HAL_Delay(500);
 8001644:	23fa      	movs	r3, #250	; 0xfa
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	0018      	movs	r0, r3
 800164a:	f000 fbff 	bl	8001e4c <HAL_Delay>
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}

08001656 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	200e      	movs	r0, #14
 8001660:	f7ff ff72 	bl	8001548 <Send_cmd>
	HAL_Delay(200);
 8001664:	20c8      	movs	r0, #200	; 0xc8
 8001666:	f000 fbf1 	bl	8001e4c <HAL_Delay>
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	0002      	movs	r2, r0
 8001678:	1dbb      	adds	r3, r7, #6
 800167a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <delay+0x30>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <delay+0x30>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168c:	1dbb      	adds	r3, r7, #6
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d3f8      	bcc.n	8001686 <delay+0x16>
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	200000f0 	.word	0x200000f0

080016a4 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	0002      	movs	r2, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	23a0      	movs	r3, #160	; 0xa0
 80016b8:	05db      	lsls	r3, r3, #23
 80016ba:	2120      	movs	r1, #32
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 fe62 	bl	8002386 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2201      	movs	r2, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	481f      	ldr	r0, [pc, #124]	; (8001750 <send_to_lcd+0xac>)
 80016d2:	001a      	movs	r2, r3
 80016d4:	2110      	movs	r1, #16
 80016d6:	f000 fe56 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2201      	movs	r2, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4818      	ldr	r0, [pc, #96]	; (8001750 <send_to_lcd+0xac>)
 80016ee:	0019      	movs	r1, r3
 80016f0:	f000 fe49 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <send_to_lcd+0xb0>)
 8001704:	001a      	movs	r2, r3
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	f000 fe3d 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <send_to_lcd+0xac>)
 8001718:	001a      	movs	r2, r3
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	f000 fe33 	bl	8002386 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001720:	23a0      	movs	r3, #160	; 0xa0
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	2201      	movs	r2, #1
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0018      	movs	r0, r3
 800172a:	f000 fe2c 	bl	8002386 <HAL_GPIO_WritePin>
	delay (20);
 800172e:	2014      	movs	r0, #20
 8001730:	f7ff ff9e 	bl	8001670 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001734:	23a0      	movs	r3, #160	; 0xa0
 8001736:	05db      	lsls	r3, r3, #23
 8001738:	2200      	movs	r2, #0
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	0018      	movs	r0, r3
 800173e:	f000 fe22 	bl	8002386 <HAL_GPIO_WritePin>
	delay (20);
 8001742:	2014      	movs	r0, #20
 8001744:	f7ff ff94 	bl	8001670 <delay>
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}
 8001750:	50000400 	.word	0x50000400
 8001754:	50000800 	.word	0x50000800

08001758 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	0002      	movs	r2, r0
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8001764:	200f      	movs	r0, #15
 8001766:	183b      	adds	r3, r7, r0
 8001768:	1dfa      	adds	r2, r7, #7
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	0912      	lsrs	r2, r2, #4
 800176e:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001770:	0004      	movs	r4, r0
 8001772:	183b      	adds	r3, r7, r0
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2100      	movs	r1, #0
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff ff93 	bl	80016a4 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800177e:	0020      	movs	r0, r4
 8001780:	183b      	adds	r3, r7, r0
 8001782:	1dfa      	adds	r2, r7, #7
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	210f      	movs	r1, #15
 8001788:	400a      	ands	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 800178c:	183b      	adds	r3, r7, r0
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ff86 	bl	80016a4 <send_to_lcd>
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b005      	add	sp, #20
 800179e:	bd90      	pop	{r4, r7, pc}

080017a0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	0002      	movs	r2, r0
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80017ac:	200f      	movs	r0, #15
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	1dfa      	adds	r2, r7, #7
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	0912      	lsrs	r2, r2, #4
 80017b6:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80017b8:	0004      	movs	r4, r0
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2101      	movs	r1, #1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ff6f 	bl	80016a4 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80017c6:	0020      	movs	r0, r4
 80017c8:	183b      	adds	r3, r7, r0
 80017ca:	1dfa      	adds	r2, r7, #7
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	210f      	movs	r1, #15
 80017d0:	400a      	ands	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 80017d4:	183b      	adds	r3, r7, r0
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	0018      	movs	r0, r3
 80017dc:	f7ff ff62 	bl	80016a4 <send_to_lcd>
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b005      	add	sp, #20
 80017e6:	bd90      	pop	{r4, r7, pc}

080017e8 <lcd_clear>:

void lcd_clear (void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff ffb3 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(2);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f000 fb2a 	bl	8001e4c <HAL_Delay>
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
    switch (row)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <lcd_put_cur+0x18>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d005      	beq.n	8001820 <lcd_put_cur+0x22>
 8001814:	e009      	b.n	800182a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	4313      	orrs	r3, r2
 800181c:	603b      	str	r3, [r7, #0]
            break;
 800181e:	e004      	b.n	800182a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	22c0      	movs	r2, #192	; 0xc0
 8001824:	4313      	orrs	r3, r2
 8001826:	603b      	str	r3, [r7, #0]
            break;
 8001828:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff ff92 	bl	8001758 <lcd_send_cmd>
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}

0800183c <lcd_init>:


void lcd_init (void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001840:	2032      	movs	r0, #50	; 0x32
 8001842:	f000 fb03 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001846:	2030      	movs	r0, #48	; 0x30
 8001848:	f7ff ff86 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800184c:	2005      	movs	r0, #5
 800184e:	f000 fafd 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001852:	2030      	movs	r0, #48	; 0x30
 8001854:	f7ff ff80 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001858:	2001      	movs	r0, #1
 800185a:	f000 faf7 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 800185e:	2030      	movs	r0, #48	; 0x30
 8001860:	f7ff ff7a 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f000 faf1 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800186a:	2020      	movs	r0, #32
 800186c:	f7ff ff74 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(10);
 8001870:	200a      	movs	r0, #10
 8001872:	f000 faeb 	bl	8001e4c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001876:	2028      	movs	r0, #40	; 0x28
 8001878:	f7ff ff6e 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(1);
 800187c:	2001      	movs	r0, #1
 800187e:	f000 fae5 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001882:	2008      	movs	r0, #8
 8001884:	f7ff ff68 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(1);
 8001888:	2001      	movs	r0, #1
 800188a:	f000 fadf 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff ff62 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f000 fad9 	bl	8001e4c <HAL_Delay>
	HAL_Delay(1);
 800189a:	2001      	movs	r0, #1
 800189c:	f000 fad6 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80018a0:	2006      	movs	r0, #6
 80018a2:	f7ff ff59 	bl	8001758 <lcd_send_cmd>
	HAL_Delay(1);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 fad0 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80018ac:	200c      	movs	r0, #12
 80018ae:	f7ff ff53 	bl	8001758 <lcd_send_cmd>
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80018c0:	e006      	b.n	80018d0 <lcd_send_string+0x18>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7ff ff68 	bl	80017a0 <lcd_send_data>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f4      	bne.n	80018c2 <lcd_send_string+0xa>
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	480a      	ldr	r0, [pc, #40]	; (8001918 <tm1637_CLKhigh+0x34>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	0019      	movs	r1, r3
 80018f2:	f000 fd48 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4807      	ldr	r0, [pc, #28]	; (8001918 <tm1637_CLKhigh+0x34>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	0019      	movs	r1, r3
 8001900:	f000 fd41 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <tm1637_CLKhigh+0x34>)
 800190a:	2201      	movs	r2, #1
 800190c:	0019      	movs	r1, r3
 800190e:	f000 fd3a 	bl	8002386 <HAL_GPIO_WritePin>
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	50000400 	.word	0x50000400

0800191c <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	480a      	ldr	r0, [pc, #40]	; (8001950 <tm1637_CLKlow+0x34>)
 8001926:	2200      	movs	r2, #0
 8001928:	0019      	movs	r1, r3
 800192a:	f000 fd2c 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <tm1637_CLKlow+0x34>)
 8001934:	2200      	movs	r2, #0
 8001936:	0019      	movs	r1, r3
 8001938:	f000 fd25 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <tm1637_CLKlow+0x34>)
 8001942:	2200      	movs	r2, #0
 8001944:	0019      	movs	r1, r3
 8001946:	f000 fd1e 	bl	8002386 <HAL_GPIO_WritePin>
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	50000400 	.word	0x50000400

08001954 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	480a      	ldr	r0, [pc, #40]	; (8001988 <tm1637_SDOhigh+0x34>)
 800195e:	2201      	movs	r2, #1
 8001960:	0019      	movs	r1, r3
 8001962:	f000 fd10 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <tm1637_SDOhigh+0x34>)
 800196c:	2201      	movs	r2, #1
 800196e:	0019      	movs	r1, r3
 8001970:	f000 fd09 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <tm1637_SDOhigh+0x34>)
 800197a:	2201      	movs	r2, #1
 800197c:	0019      	movs	r1, r3
 800197e:	f000 fd02 	bl	8002386 <HAL_GPIO_WritePin>
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	50000400 	.word	0x50000400

0800198c <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	480a      	ldr	r0, [pc, #40]	; (80019c0 <tm1637_SDOlow+0x34>)
 8001996:	2200      	movs	r2, #0
 8001998:	0019      	movs	r1, r3
 800199a:	f000 fcf4 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <tm1637_SDOlow+0x34>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	0019      	movs	r1, r3
 80019a8:	f000 fced 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <tm1637_SDOlow+0x34>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	0019      	movs	r1, r3
 80019b6:	f000 fce6 	bl	8002386 <HAL_GPIO_WritePin>
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	50000400 	.word	0x50000400

080019c4 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 80019c8:	f7ff ff8c 	bl	80018e4 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 80019cc:	f7ff ffc2 	bl	8001954 <tm1637_SDOhigh>
	tm1637_SDOlow();
 80019d0:	f7ff ffdc 	bl	800198c <tm1637_SDOlow>

	tm1637_CLKlow();
 80019d4:	f7ff ffa2 	bl	800191c <tm1637_CLKlow>
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 80019e2:	f7ff ff9b 	bl	800191c <tm1637_CLKlow>
	tm1637_SDOlow();
 80019e6:	f7ff ffd1 	bl	800198c <tm1637_SDOlow>

	tm1637_CLKhigh();
 80019ea:	f7ff ff7b 	bl	80018e4 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 80019ee:	f7ff ffb1 	bl	8001954 <tm1637_SDOhigh>
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8001a00:	230f      	movs	r3, #15
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e01a      	b.n	8001a40 <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8001a0a:	f7ff ff87 	bl	800191c <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8001a0e:	230f      	movs	r3, #15
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	18d3      	adds	r3, r2, r3
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d102      	bne.n	8001a26 <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 8001a20:	f7ff ff98 	bl	8001954 <tm1637_SDOhigh>
 8001a24:	e001      	b.n	8001a2a <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8001a26:	f7ff ffb1 	bl	800198c <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8001a2a:	f7ff ff5b 	bl	80018e4 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8001a2e:	210f      	movs	r1, #15
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	230f      	movs	r3, #15
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	2b07      	cmp	r3, #7
 8001a4a:	ddde      	ble.n	8001a0a <tm1637_DataOut+0x12>
	} 
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8001a5e:	230c      	movs	r3, #12
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001a6a:	2317      	movs	r3, #23
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	e018      	b.n	8001aa6 <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	001a      	movs	r2, r3
 8001a7a:	2117      	movs	r1, #23
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	411a      	asrs	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	2201      	movs	r2, #1
 8001a86:	4013      	ands	r3, r2
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	4193      	sbcs	r3, r2
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	0008      	movs	r0, r1
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	0011      	movs	r1, r2
 8001a96:	220c      	movs	r2, #12
 8001a98:	18ba      	adds	r2, r7, r2
 8001a9a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001a9c:	183b      	adds	r3, r7, r0
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	183b      	adds	r3, r7, r0
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b07      	cmp	r3, #7
 8001aae:	d9e1      	bls.n	8001a74 <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8001ab0:	f7ff ff88 	bl	80019c4 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff ff9d 	bl	80019f8 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8001abe:	f7ff ff2d 	bl	800191c <tm1637_CLKlow>
	tm1637_CLKhigh();
 8001ac2:	f7ff ff0f 	bl	80018e4 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8001ac6:	f000 f89f 	bl	8001c08 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	001a      	movs	r2, r3
 8001ad0:	23c0      	movs	r3, #192	; 0xc0
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2bc0      	cmp	r3, #192	; 0xc0
 8001ad6:	d001      	beq.n	8001adc <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8001ad8:	f7ff ff81 	bl	80019de <tm1637_EndPacket>
	}

}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b006      	add	sp, #24
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	000a      	movs	r2, r1
 8001aee:	1cfb      	adds	r3, r7, #3
 8001af0:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 8001af2:	230c      	movs	r3, #12
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 8001afe:	2317      	movs	r3, #23
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e037      	b.n	8001b78 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8001b08:	2316      	movs	r3, #22
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e01c      	b.n	8001b4c <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8001b12:	2317      	movs	r3, #23
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	18d3      	adds	r3, r2, r3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	001a      	movs	r2, r3
 8001b20:	2116      	movs	r1, #22
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	411a      	asrs	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	1e5a      	subs	r2, r3, #1
 8001b30:	4193      	sbcs	r3, r2
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	0008      	movs	r0, r1
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	18ba      	adds	r2, r7, r2
 8001b40:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 8001b42:	183b      	adds	r3, r7, r0
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	3201      	adds	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	2316      	movs	r3, #22
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	d9dd      	bls.n	8001b12 <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 8001b56:	230c      	movs	r3, #12
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7ff ff4c 	bl	80019f8 <tm1637_DataOut>
		tm1637_CLKlow();
 8001b60:	f7ff fedc 	bl	800191c <tm1637_CLKlow>
		tm1637_CLKhigh();
 8001b64:	f7ff febe 	bl	80018e4 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 8001b68:	f000 f84e 	bl	8001c08 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 8001b6c:	2117      	movs	r1, #23
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	3201      	adds	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	2317      	movs	r3, #23
 8001b7a:	18fa      	adds	r2, r7, r3
 8001b7c:	1cfb      	adds	r3, r7, #3
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3c0      	bcc.n	8001b08 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 8001b86:	f7ff ff2a 	bl	80019de <tm1637_EndPacket>


}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b006      	add	sp, #24
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8001ba0:	240c      	movs	r4, #12
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	2314      	movs	r3, #20
 8001ba8:	001a      	movs	r2, r3
 8001baa:	2100      	movs	r1, #0
 8001bac:	f003 fee8 	bl	8005980 <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 8001bb0:	0021      	movs	r1, r4
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <tm1637_Initialize+0x52>
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d114      	bne.n	8001bfc <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <tm1637_Initialize+0x70>)
 8001bdc:	0019      	movs	r1, r3
 8001bde:	0010      	movs	r0, r2
 8001be0:	f000 fa36 	bl	8002050 <HAL_GPIO_Init>
			break;
 8001be4:	e00a      	b.n	8001bfc <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	210c      	movs	r1, #12
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2201      	movs	r2, #1
 8001bec:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <tm1637_Initialize+0x70>)
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	f000 fa2b 	bl	8002050 <HAL_GPIO_Init>
			break;
 8001bfa:	46c0      	nop			; (mov r8, r8)

	}

}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b009      	add	sp, #36	; 0x24
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	50000c00 	.word	0x50000c00

08001c08 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff ffc1 	bl	8001b94 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 8001c12:	f7ff fe83 	bl	800191c <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001c16:	e002      	b.n	8001c1e <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff ffbb 	bl	8001b94 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <tm1637_ACKcheck+0x30>)
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f000 fb90 	bl	800234c <HAL_GPIO_ReadPin>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d1f3      	bne.n	8001c18 <tm1637_ACKcheck+0x10>
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	50000400 	.word	0x50000400

08001c3c <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	0002      	movs	r2, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8001c4a:	210c      	movs	r1, #12
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <tm1637_DisplayHandle+0x78>)
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8001c54:	250f      	movs	r5, #15
 8001c56:	197b      	adds	r3, r7, r5
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b07      	cmp	r3, #7
 8001c62:	d81f      	bhi.n	8001ca4 <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8001c6a:	000c      	movs	r4, r1
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7ff fef1 	bl	8001a56 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8001c74:	0021      	movs	r1, r4
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	22c0      	movs	r2, #192	; 0xc0
 8001c7a:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff fee9 	bl	8001a56 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2104      	movs	r1, #4
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff ff2b 	bl	8001ae4 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 f810 	bl	8001cb8 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8001c98:	197b      	adds	r3, r7, r5
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8001c9e:	197b      	adds	r3, r7, r5
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	e002      	b.n	8001caa <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	08005d68 	.word	0x08005d68

08001cb8 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	1dfb      	adds	r3, r7, #7
 8001cc2:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8001cd0:	2316      	movs	r3, #22
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b07      	cmp	r3, #7
 8001cde:	d83e      	bhi.n	8001d5e <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	1dfa      	adds	r2, r7, #7
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	2178      	movs	r1, #120	; 0x78
 8001ce8:	4249      	negs	r1, r1
 8001cea:	430a      	orrs	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8001cee:	2317      	movs	r3, #23
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	e017      	b.n	8001d28 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	2117      	movs	r1, #23
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	411a      	asrs	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	4193      	sbcs	r3, r2
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	0008      	movs	r0, r1
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	0011      	movs	r1, r2
 8001d18:	220c      	movs	r2, #12
 8001d1a:	18ba      	adds	r2, r7, r2
 8001d1c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8001d1e:	183b      	adds	r3, r7, r0
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	3201      	adds	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	2317      	movs	r3, #23
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b07      	cmp	r3, #7
 8001d30:	d9e2      	bls.n	8001cf8 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 8001d32:	f7ff fe47 	bl	80019c4 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 8001d36:	230c      	movs	r3, #12
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fe5c 	bl	80019f8 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8001d40:	f7ff fdec 	bl	800191c <tm1637_CLKlow>
		tm1637_CLKhigh();
 8001d44:	f7ff fdce 	bl	80018e4 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8001d48:	f7ff ff5e 	bl	8001c08 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8001d4c:	f7ff fe47 	bl	80019de <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8001d50:	2116      	movs	r1, #22
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	e002      	b.n	8001d64 <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 8001d5e:	2316      	movs	r3, #22
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	781b      	ldrb	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b006      	add	sp, #24
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_Init+0x3c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Init+0x3c>)
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d84:	2000      	movs	r0, #0
 8001d86:	f000 f811 	bl	8001dac <HAL_InitTick>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e001      	b.n	8001d9a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d96:	f7fe ff4b 	bl	8000c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40022000 	.word	0x40022000

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_InitTick+0x5c>)
 8001db6:	681c      	ldr	r4, [r3, #0]
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_InitTick+0x60>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	23fa      	movs	r3, #250	; 0xfa
 8001dc0:	0098      	lsls	r0, r3, #2
 8001dc2:	f7fe f9a9 	bl	8000118 <__udivsi3>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	0019      	movs	r1, r3
 8001dca:	0020      	movs	r0, r4
 8001dcc:	f7fe f9a4 	bl	8000118 <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f92f 	bl	8002036 <HAL_SYSTICK_Config>
 8001dd8:	1e03      	subs	r3, r0, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e00f      	b.n	8001e00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d80b      	bhi.n	8001dfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	2301      	movs	r3, #1
 8001dea:	425b      	negs	r3, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f8fc 	bl	8001fec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_InitTick+0x64>)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b003      	add	sp, #12
 8001e06:	bd90      	pop	{r4, r7, pc}
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x1c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x20>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	18d2      	adds	r2, r2, r3
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_IncTick+0x20>)
 8001e26:	601a      	str	r2, [r3, #0]
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000424 	.word	0x20000424

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <HAL_GetTick+0x10>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	20000424 	.word	0x20000424

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3301      	adds	r3, #1
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	189b      	adds	r3, r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	f7ff ffe0 	bl	8001e38 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b004      	add	sp, #16
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	20000008 	.word	0x20000008

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea6:	d809      	bhi.n	8001ebc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	001a      	movs	r2, r3
 8001eae:	231f      	movs	r3, #31
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_EnableIRQ+0x30>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4091      	lsls	r1, r2
 8001eb8:	000a      	movs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
  }
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b7f      	cmp	r3, #127	; 0x7f
 8001edc:	d828      	bhi.n	8001f30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	33c0      	adds	r3, #192	; 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	589b      	ldr	r3, [r3, r2]
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	21ff      	movs	r1, #255	; 0xff
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	2303      	movs	r3, #3
 8001f16:	4003      	ands	r3, r0
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	430a      	orrs	r2, r1
 8001f28:	33c0      	adds	r3, #192	; 0xc0
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f2e:	e031      	b.n	8001f94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0019      	movs	r1, r3
 8001f38:	230f      	movs	r3, #15
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3306      	adds	r3, #6
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	; 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001c      	movs	r4, r3
 8001f80:	230f      	movs	r3, #15
 8001f82:	4023      	ands	r3, r4
 8001f84:	3b08      	subs	r3, #8
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	18c3      	adds	r3, r0, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b003      	add	sp, #12
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045b      	lsls	r3, r3, #17
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d301      	bcc.n	8001fbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <SysTick_Config+0x44>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	2103      	movs	r1, #3
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff ff7c 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	0002      	movs	r2, r0
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ff33 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff ffaf 	bl	8001fa4 <SysTick_Config>
 8002046:	0003      	movs	r3, r0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002066:	e155      	b.n	8002314 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4091      	lsls	r1, r2
 8002072:	000a      	movs	r2, r1
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <HAL_GPIO_Init+0x30>
 800207e:	e146      	b.n	800230e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	4013      	ands	r3, r2
 8002088:	2b01      	cmp	r3, #1
 800208a:	d005      	beq.n	8002098 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002094:	2b02      	cmp	r3, #2
 8002096:	d130      	bne.n	80020fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	409a      	lsls	r2, r3
 80020a6:	0013      	movs	r3, r2
 80020a8:	43da      	mvns	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	409a      	lsls	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	43da      	mvns	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	2201      	movs	r2, #1
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	4013      	ands	r3, r2
 8002102:	2b03      	cmp	r3, #3
 8002104:	d017      	beq.n	8002136 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	409a      	lsls	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	43da      	mvns	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	4013      	ands	r3, r2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d123      	bne.n	800218a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	58d3      	ldr	r3, [r2, r3]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2207      	movs	r2, #7
 8002154:	4013      	ands	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	43da      	mvns	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2107      	movs	r1, #7
 800216e:	400b      	ands	r3, r1
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	6939      	ldr	r1, [r7, #16]
 8002188:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	43da      	mvns	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	401a      	ands	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	23c0      	movs	r3, #192	; 0xc0
 80021c4:	029b      	lsls	r3, r3, #10
 80021c6:	4013      	ands	r3, r2
 80021c8:	d100      	bne.n	80021cc <HAL_GPIO_Init+0x17c>
 80021ca:	e0a0      	b.n	800230e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021cc:	4b57      	ldr	r3, [pc, #348]	; (800232c <HAL_GPIO_Init+0x2dc>)
 80021ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d0:	4b56      	ldr	r3, [pc, #344]	; (800232c <HAL_GPIO_Init+0x2dc>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d8:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_GPIO_Init+0x2e0>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	589b      	ldr	r3, [r3, r2]
 80021e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	43da      	mvns	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	23a0      	movs	r3, #160	; 0xa0
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	429a      	cmp	r2, r3
 8002204:	d01f      	beq.n	8002246 <HAL_GPIO_Init+0x1f6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_GPIO_Init+0x2e4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x1f2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x1ee>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a48      	ldr	r2, [pc, #288]	; (800233c <HAL_GPIO_Init+0x2ec>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x1ea>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a47      	ldr	r2, [pc, #284]	; (8002340 <HAL_GPIO_Init+0x2f0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x1e6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_GPIO_Init+0x2f4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x1e2>
 800222e:	2305      	movs	r3, #5
 8002230:	e00a      	b.n	8002248 <HAL_GPIO_Init+0x1f8>
 8002232:	2306      	movs	r3, #6
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x1f8>
 8002236:	2304      	movs	r3, #4
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x1f8>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x1f8>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x1f8>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x1f8>
 8002246:	2300      	movs	r3, #0
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	2103      	movs	r1, #3
 800224c:	400a      	ands	r2, r1
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002258:	4935      	ldr	r1, [pc, #212]	; (8002330 <HAL_GPIO_Init+0x2e0>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43da      	mvns	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	035b      	lsls	r3, r3, #13
 800227e:	4013      	ands	r3, r2
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43da      	mvns	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	039b      	lsls	r3, r3, #14
 80022a8:	4013      	ands	r3, r2
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43da      	mvns	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	029b      	lsls	r3, r3, #10
 80022d2:	4013      	ands	r3, r2
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43da      	mvns	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	4013      	ands	r3, r2
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_GPIO_Init+0x2f8>)
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	40da      	lsrs	r2, r3
 800231c:	1e13      	subs	r3, r2, #0
 800231e:	d000      	beq.n	8002322 <HAL_GPIO_Init+0x2d2>
 8002320:	e6a2      	b.n	8002068 <HAL_GPIO_Init+0x18>
  }
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b006      	add	sp, #24
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000
 8002334:	50000400 	.word	0x50000400
 8002338:	50000800 	.word	0x50000800
 800233c:	50000c00 	.word	0x50000c00
 8002340:	50001000 	.word	0x50001000
 8002344:	50001c00 	.word	0x50001c00
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	000a      	movs	r2, r1
 8002356:	1cbb      	adds	r3, r7, #2
 8002358:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	1cba      	adds	r2, r7, #2
 8002360:	8812      	ldrh	r2, [r2, #0]
 8002362:	4013      	ands	r3, r2
 8002364:	d004      	beq.n	8002370 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002366:	230f      	movs	r3, #15
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e003      	b.n	8002378 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002370:	230f      	movs	r3, #15
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002378:	230f      	movs	r3, #15
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	0008      	movs	r0, r1
 8002390:	0011      	movs	r1, r2
 8002392:	1cbb      	adds	r3, r7, #2
 8002394:	1c02      	adds	r2, r0, #0
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	1c7b      	adds	r3, r7, #1
 800239a:	1c0a      	adds	r2, r1, #0
 800239c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239e:	1c7b      	adds	r3, r7, #1
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	1cbb      	adds	r3, r7, #2
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80023ae:	e003      	b.n	80023b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80023b0:	1cbb      	adds	r3, r7, #2
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f000 fbbf 	bl	8002b52 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d4:	4bc9      	ldr	r3, [pc, #804]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	220c      	movs	r2, #12
 80023da:	4013      	ands	r3, r2
 80023dc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023de:	4bc7      	ldr	r3, [pc, #796]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	025b      	lsls	r3, r3, #9
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x36>
 80023f4:	e07e      	b.n	80024f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d007      	beq.n	800240c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d112      	bne.n	8002428 <HAL_RCC_OscConfig+0x68>
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	025b      	lsls	r3, r3, #9
 8002408:	429a      	cmp	r2, r3
 800240a:	d10d      	bne.n	8002428 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	4bbb      	ldr	r3, [pc, #748]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	4013      	ands	r3, r2
 8002416:	d100      	bne.n	800241a <HAL_RCC_OscConfig+0x5a>
 8002418:	e06b      	b.n	80024f2 <HAL_RCC_OscConfig+0x132>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d167      	bne.n	80024f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f000 fb95 	bl	8002b52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	025b      	lsls	r3, r3, #9
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x84>
 8002434:	4bb1      	ldr	r3, [pc, #708]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4bb0      	ldr	r3, [pc, #704]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0249      	lsls	r1, r1, #9
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e027      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	23a0      	movs	r3, #160	; 0xa0
 800244a:	02db      	lsls	r3, r3, #11
 800244c:	429a      	cmp	r2, r3
 800244e:	d10e      	bne.n	800246e <HAL_RCC_OscConfig+0xae>
 8002450:	4baa      	ldr	r3, [pc, #680]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4ba9      	ldr	r3, [pc, #676]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	02c9      	lsls	r1, r1, #11
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	4ba7      	ldr	r3, [pc, #668]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4ba6      	ldr	r3, [pc, #664]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	0249      	lsls	r1, r1, #9
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e012      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 800246e:	4ba3      	ldr	r3, [pc, #652]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4ba2      	ldr	r3, [pc, #648]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002474:	49a2      	ldr	r1, [pc, #648]	; (8002700 <HAL_RCC_OscConfig+0x340>)
 8002476:	400a      	ands	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	4ba0      	ldr	r3, [pc, #640]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4b9c      	ldr	r3, [pc, #624]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b9b      	ldr	r3, [pc, #620]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800248e:	499d      	ldr	r1, [pc, #628]	; (8002704 <HAL_RCC_OscConfig+0x344>)
 8002490:	400a      	ands	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d015      	beq.n	80024c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fccc 	bl	8001e38 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a6:	f7ff fcc7 	bl	8001e38 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	; 0x64
 80024b2:	d902      	bls.n	80024ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	f000 fb4c 	bl	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ba:	4b90      	ldr	r3, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	029b      	lsls	r3, r3, #10
 80024c2:	4013      	ands	r3, r2
 80024c4:	d0ef      	beq.n	80024a6 <HAL_RCC_OscConfig+0xe6>
 80024c6:	e015      	b.n	80024f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fcb6 	bl	8001e38 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d2:	f7ff fcb1 	bl	8001e38 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	; 0x64
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e336      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024e4:	4b85      	ldr	r3, [pc, #532]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x112>
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d100      	bne.n	8002500 <HAL_RCC_OscConfig+0x140>
 80024fe:	e099      	b.n	8002634 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	2220      	movs	r2, #32
 800250a:	4013      	ands	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800250e:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002514:	2120      	movs	r1, #32
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	2220      	movs	r2, #32
 800251e:	4393      	bics	r3, r2
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d13e      	bne.n	80025ac <HAL_RCC_OscConfig+0x1ec>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d13b      	bne.n	80025ac <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002534:	4b71      	ldr	r3, [pc, #452]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2204      	movs	r2, #4
 800253a:	4013      	ands	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_RCC_OscConfig+0x188>
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e304      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0x348>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	021a      	lsls	r2, r3, #8
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800255e:	4b67      	ldr	r3, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2209      	movs	r2, #9
 8002564:	4393      	bics	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	4b64      	ldr	r3, [pc, #400]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002570:	f000 fc42 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002574:	0001      	movs	r1, r0
 8002576:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	220f      	movs	r2, #15
 800257e:	4013      	ands	r3, r2
 8002580:	4a62      	ldr	r2, [pc, #392]	; (800270c <HAL_RCC_OscConfig+0x34c>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	000a      	movs	r2, r1
 8002586:	40da      	lsrs	r2, r3
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_OscConfig+0x350>)
 800258a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800258c:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCC_OscConfig+0x354>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2513      	movs	r5, #19
 8002592:	197c      	adds	r4, r7, r5
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff fc09 	bl	8001dac <HAL_InitTick>
 800259a:	0003      	movs	r3, r0
 800259c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800259e:	197b      	adds	r3, r7, r5
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d046      	beq.n	8002634 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80025a6:	197b      	adds	r3, r7, r5
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	e2d2      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d027      	beq.n	8002602 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2209      	movs	r2, #9
 80025b8:	4393      	bics	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fc38 	bl	8001e38 <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff fc33 	bl	8001e38 <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e2b8      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2204      	movs	r2, #4
 80025e6:	4013      	ands	r3, r2
 80025e8:	d0f1      	beq.n	80025ce <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a46      	ldr	r2, [pc, #280]	; (8002708 <HAL_RCC_OscConfig+0x348>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	e018      	b.n	8002634 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002608:	2101      	movs	r1, #1
 800260a:	438a      	bics	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fc13 	bl	8001e38 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002618:	f7ff fc0e 	bl	8001e38 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e293      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d1f1      	bne.n	8002618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2210      	movs	r2, #16
 800263a:	4013      	ands	r3, r2
 800263c:	d100      	bne.n	8002640 <HAL_RCC_OscConfig+0x280>
 800263e:	e0a2      	b.n	8002786 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d140      	bne.n	80026c8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4013      	ands	r3, r2
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x29e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e279      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a2d      	ldr	r2, [pc, #180]	; (8002718 <HAL_RCC_OscConfig+0x358>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	0a19      	lsrs	r1, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	061a      	lsls	r2, r3, #24
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	0b5b      	lsrs	r3, r3, #13
 800268c:	3301      	adds	r3, #1
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	0212      	lsls	r2, r2, #8
 8002692:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	210f      	movs	r1, #15
 800269c:	400b      	ands	r3, r1
 800269e:	491b      	ldr	r1, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x34c>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_RCC_OscConfig+0x350>)
 80026a6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCC_OscConfig+0x354>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2513      	movs	r5, #19
 80026ae:	197c      	adds	r4, r7, r5
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff fb7b 	bl	8001dac <HAL_InitTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80026ba:	197b      	adds	r3, r7, r5
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d061      	beq.n	8002786 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80026c2:	197b      	adds	r3, r7, r5
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	e244      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d040      	beq.n	8002752 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x33c>)
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	0049      	lsls	r1, r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7ff fbab 	bl	8001e38 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026e6:	e019      	b.n	800271c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e8:	f7ff fba6 	bl	8001e38 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d912      	bls.n	800271c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e22b      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	40021000 	.word	0x40021000
 8002700:	fffeffff 	.word	0xfffeffff
 8002704:	fffbffff 	.word	0xfffbffff
 8002708:	ffffe0ff 	.word	0xffffe0ff
 800270c:	08005d6c 	.word	0x08005d6c
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004
 8002718:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800271c:	4bca      	ldr	r3, [pc, #808]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4013      	ands	r3, r2
 8002726:	d0df      	beq.n	80026e8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002728:	4bc7      	ldr	r3, [pc, #796]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4ac7      	ldr	r2, [pc, #796]	; (8002a4c <HAL_RCC_OscConfig+0x68c>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002736:	4bc4      	ldr	r3, [pc, #784]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273c:	4bc2      	ldr	r3, [pc, #776]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	0a19      	lsrs	r1, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	061a      	lsls	r2, r3, #24
 800274a:	4bbf      	ldr	r3, [pc, #764]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	e019      	b.n	8002786 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002752:	4bbd      	ldr	r3, [pc, #756]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4bbc      	ldr	r3, [pc, #752]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002758:	49bd      	ldr	r1, [pc, #756]	; (8002a50 <HAL_RCC_OscConfig+0x690>)
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7ff fb6b 	bl	8001e38 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002768:	f7ff fb66 	bl	8001e38 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1eb      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800277a:	4bb3      	ldr	r3, [pc, #716]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4013      	ands	r3, r2
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2208      	movs	r2, #8
 800278c:	4013      	ands	r3, r2
 800278e:	d036      	beq.n	80027fe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d019      	beq.n	80027cc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002798:	4bab      	ldr	r3, [pc, #684]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800279a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800279c:	4baa      	ldr	r3, [pc, #680]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800279e:	2101      	movs	r1, #1
 80027a0:	430a      	orrs	r2, r1
 80027a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7ff fb48 	bl	8001e38 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ae:	f7ff fb43 	bl	8001e38 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1c8      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027c0:	4ba1      	ldr	r3, [pc, #644]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	2202      	movs	r2, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d0f1      	beq.n	80027ae <HAL_RCC_OscConfig+0x3ee>
 80027ca:	e018      	b.n	80027fe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027cc:	4b9e      	ldr	r3, [pc, #632]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80027ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d0:	4b9d      	ldr	r3, [pc, #628]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	438a      	bics	r2, r1
 80027d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7ff fb2e 	bl	8001e38 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e2:	f7ff fb29 	bl	8001e38 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1ae      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027f4:	4b94      	ldr	r3, [pc, #592]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80027f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d1f1      	bne.n	80027e2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2204      	movs	r2, #4
 8002804:	4013      	ands	r3, r2
 8002806:	d100      	bne.n	800280a <HAL_RCC_OscConfig+0x44a>
 8002808:	e0ae      	b.n	8002968 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2023      	movs	r0, #35	; 0x23
 800280c:	183b      	adds	r3, r7, r0
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002812:	4b8d      	ldr	r3, [pc, #564]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	055b      	lsls	r3, r3, #21
 800281a:	4013      	ands	r3, r2
 800281c:	d109      	bne.n	8002832 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b8a      	ldr	r3, [pc, #552]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002822:	4b89      	ldr	r3, [pc, #548]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0549      	lsls	r1, r1, #21
 8002828:	430a      	orrs	r2, r1
 800282a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800282c:	183b      	adds	r3, r7, r0
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x694>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4013      	ands	r3, r2
 800283c:	d11a      	bne.n	8002874 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x694>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <HAL_RCC_OscConfig+0x694>)
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0049      	lsls	r1, r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284c:	f7ff faf4 	bl	8001e38 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7ff faef 	bl	8001e38 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b64      	cmp	r3, #100	; 0x64
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e174      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <HAL_RCC_OscConfig+0x694>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4013      	ands	r3, r2
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	429a      	cmp	r2, r3
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x4d0>
 8002880:	4b71      	ldr	r3, [pc, #452]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002884:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	651a      	str	r2, [r3, #80]	; 0x50
 800288e:	e031      	b.n	80028f4 <HAL_RCC_OscConfig+0x534>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_OscConfig+0x4f2>
 8002898:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800289a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800289e:	496c      	ldr	r1, [pc, #432]	; (8002a50 <HAL_RCC_OscConfig+0x690>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	651a      	str	r2, [r3, #80]	; 0x50
 80028a4:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a8:	4b67      	ldr	r3, [pc, #412]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028aa:	496b      	ldr	r1, [pc, #428]	; (8002a58 <HAL_RCC_OscConfig+0x698>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	651a      	str	r2, [r3, #80]	; 0x50
 80028b0:	e020      	b.n	80028f4 <HAL_RCC_OscConfig+0x534>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	23a0      	movs	r3, #160	; 0xa0
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d10e      	bne.n	80028dc <HAL_RCC_OscConfig+0x51c>
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c2:	4b61      	ldr	r3, [pc, #388]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	00c9      	lsls	r1, r1, #3
 80028c8:	430a      	orrs	r2, r1
 80028ca:	651a      	str	r2, [r3, #80]	; 0x50
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028d0:	4b5d      	ldr	r3, [pc, #372]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	0049      	lsls	r1, r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	651a      	str	r2, [r3, #80]	; 0x50
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0x534>
 80028dc:	4b5a      	ldr	r3, [pc, #360]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028e2:	495b      	ldr	r1, [pc, #364]	; (8002a50 <HAL_RCC_OscConfig+0x690>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	651a      	str	r2, [r3, #80]	; 0x50
 80028e8:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ec:	4b56      	ldr	r3, [pc, #344]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80028ee:	495a      	ldr	r1, [pc, #360]	; (8002a58 <HAL_RCC_OscConfig+0x698>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7ff fa9c 	bl	8001e38 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002904:	e009      	b.n	800291a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7ff fa97 	bl	8001e38 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_RCC_OscConfig+0x69c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e11b      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800291a:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800291c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4013      	ands	r3, r2
 8002924:	d0ef      	beq.n	8002906 <HAL_RCC_OscConfig+0x546>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7ff fa86 	bl	8001e38 <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002930:	e009      	b.n	8002946 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7ff fa81 	bl	8001e38 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <HAL_RCC_OscConfig+0x69c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e105      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002946:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002952:	2323      	movs	r3, #35	; 0x23
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800295e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002962:	493f      	ldr	r1, [pc, #252]	; (8002a60 <HAL_RCC_OscConfig+0x6a0>)
 8002964:	400a      	ands	r2, r1
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	4013      	ands	r3, r2
 8002970:	d049      	beq.n	8002a06 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d026      	beq.n	80029c8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800297a:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002980:	2101      	movs	r1, #1
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 800298c:	2101      	movs	r1, #1
 800298e:	430a      	orrs	r2, r1
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_OscConfig+0x6a4>)
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <HAL_RCC_OscConfig+0x6a4>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0189      	lsls	r1, r1, #6
 800299c:	430a      	orrs	r2, r1
 800299e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff fa4a 	bl	8001e38 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029aa:	f7ff fa45 	bl	8001e38 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0ca      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029bc:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d0f1      	beq.n	80029aa <HAL_RCC_OscConfig+0x5ea>
 80029c6:	e01e      	b.n	8002a06 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80029ce:	2101      	movs	r1, #1
 80029d0:	438a      	bics	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_RCC_OscConfig+0x6a4>)
 80029d6:	6a1a      	ldr	r2, [r3, #32]
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <HAL_RCC_OscConfig+0x6a4>)
 80029da:	4923      	ldr	r1, [pc, #140]	; (8002a68 <HAL_RCC_OscConfig+0x6a8>)
 80029dc:	400a      	ands	r2, r1
 80029de:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff fa2a 	bl	8001e38 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ea:	f7ff fa25 	bl	8001e38 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0aa      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d1f1      	bne.n	80029ea <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d100      	bne.n	8002a10 <HAL_RCC_OscConfig+0x650>
 8002a0e:	e09f      	b.n	8002b50 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d100      	bne.n	8002a18 <HAL_RCC_OscConfig+0x658>
 8002a16:	e078      	b.n	8002b0a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d159      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_RCC_OscConfig+0x688>)
 8002a26:	4911      	ldr	r1, [pc, #68]	; (8002a6c <HAL_RCC_OscConfig+0x6ac>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fa04 	bl	8001e38 <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a34:	e01c      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a36:	f7ff f9ff 	bl	8001e38 <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d915      	bls.n	8002a70 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e084      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	ffff1fff 	.word	0xffff1fff
 8002a50:	fffffeff 	.word	0xfffffeff
 8002a54:	40007000 	.word	0x40007000
 8002a58:	fffffbff 	.word	0xfffffbff
 8002a5c:	00001388 	.word	0x00001388
 8002a60:	efffffff 	.word	0xefffffff
 8002a64:	40010000 	.word	0x40010000
 8002a68:	ffffdfff 	.word	0xffffdfff
 8002a6c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a70:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	049b      	lsls	r3, r3, #18
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d1dc      	bne.n	8002a36 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7c:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a37      	ldr	r2, [pc, #220]	; (8002b60 <HAL_RCC_OscConfig+0x7a0>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a94:	431a      	orrs	r2, r3
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b2f      	ldr	r3, [pc, #188]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	0449      	lsls	r1, r1, #17
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff f9c5 	bl	8001e38 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7ff f9c0 	bl	8001e38 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e045      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ac6:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	049b      	lsls	r3, r3, #18
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x6f4>
 8002ad2:	e03d      	b.n	8002b50 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002ada:	4922      	ldr	r1, [pc, #136]	; (8002b64 <HAL_RCC_OscConfig+0x7a4>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f9aa 	bl	8001e38 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff f9a5 	bl	8001e38 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e02a      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	049b      	lsls	r3, r3, #18
 8002b04:	4013      	ands	r3, r2
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x72a>
 8002b08:	e022      	b.n	8002b50 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e01d      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_OscConfig+0x79c>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	025b      	lsls	r3, r3, #9
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d10f      	bne.n	8002b4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	23f0      	movs	r3, #240	; 0xf0
 8002b30:	039b      	lsls	r3, r3, #14
 8002b32:	401a      	ands	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	23c0      	movs	r3, #192	; 0xc0
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	401a      	ands	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b00a      	add	sp, #40	; 0x28
 8002b58:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	ff02ffff 	.word	0xff02ffff
 8002b64:	feffffff 	.word	0xfeffffff

08002b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e128      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d91e      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4393      	bics	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	4b90      	ldr	r3, [pc, #576]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b9c:	f7ff f94c 	bl	8001e38 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba6:	f7ff f947 	bl	8001e38 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a8a      	ldr	r2, [pc, #552]	; (8002ddc <HAL_RCC_ClockConfig+0x274>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e109      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b87      	ldr	r3, [pc, #540]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1ee      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd2:	4b83      	ldr	r3, [pc, #524]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	22f0      	movs	r2, #240	; 0xf0
 8002bd8:	4393      	bics	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0x8a>
 8002bf0:	e089      	b.n	8002d06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bfa:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	029b      	lsls	r3, r3, #10
 8002c02:	4013      	ands	r3, r2
 8002c04:	d120      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0e1      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c12:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	049b      	lsls	r3, r3, #18
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d114      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0d5      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	4013      	ands	r3, r2
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0ca      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c38:	4b69      	ldr	r3, [pc, #420]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0c2      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c48:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	4393      	bics	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4b62      	ldr	r3, [pc, #392]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7ff f8ec 	bl	8001e38 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6c:	e009      	b.n	8002c82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6e:	f7ff f8e3 	bl	8001e38 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_ClockConfig+0x274>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0a5      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c82:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	220c      	movs	r2, #12
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d1ef      	bne.n	8002c6e <HAL_RCC_ClockConfig+0x106>
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c98:	e009      	b.n	8002cae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7ff f8cd 	bl	8001e38 <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a4d      	ldr	r2, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e08f      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cae:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d1ef      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x132>
 8002cba:	e024      	b.n	8002d06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d11b      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc4:	e009      	b.n	8002cda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc6:	f7ff f8b7 	bl	8001e38 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	4a42      	ldr	r2, [pc, #264]	; (8002ddc <HAL_RCC_ClockConfig+0x274>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e079      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	4b41      	ldr	r3, [pc, #260]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d1ef      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x15e>
 8002ce6:	e00e      	b.n	8002d06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7ff f8a6 	bl	8001e38 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <HAL_RCC_ClockConfig+0x274>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e068      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cfc:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	220c      	movs	r2, #12
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d06:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d21e      	bcs.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d26:	f7ff f887 	bl	8001e38 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	e009      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7ff f882 	bl	8001e38 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_RCC_ClockConfig+0x274>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e044      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_ClockConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d1ee      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_RCC_ClockConfig+0x27c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2208      	movs	r2, #8
 8002d76:	4013      	ands	r3, r2
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_RCC_ClockConfig+0x280>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00da      	lsls	r2, r3, #3
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d90:	f000 f832 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002d94:	0001      	movs	r1, r0
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x278>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	4013      	ands	r3, r2
 8002da0:	4a12      	ldr	r2, [pc, #72]	; (8002dec <HAL_RCC_ClockConfig+0x284>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	000a      	movs	r2, r1
 8002da6:	40da      	lsrs	r2, r3
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_ClockConfig+0x288>)
 8002daa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_RCC_ClockConfig+0x28c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	250b      	movs	r5, #11
 8002db2:	197c      	adds	r4, r7, r5
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe fff9 	bl	8001dac <HAL_InitTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002dbe:	197b      	adds	r3, r7, r5
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002dc6:	197b      	adds	r3, r7, r5
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	e000      	b.n	8002dce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b004      	add	sp, #16
 8002dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	00001388 	.word	0x00001388
 8002de0:	40021000 	.word	0x40021000
 8002de4:	fffff8ff 	.word	0xfffff8ff
 8002de8:	ffffc7ff 	.word	0xffffc7ff
 8002dec:	08005d6c 	.word	0x08005d6c
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000004 	.word	0x20000004

08002df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b08e      	sub	sp, #56	; 0x38
 8002dfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	230c      	movs	r3, #12
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d014      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x40>
 8002e0e:	d900      	bls.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1a>
 8002e10:	e07b      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x112>
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x24>
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1a:	e076      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e1c:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2210      	movs	r2, #16
 8002e22:	4013      	ands	r3, r2
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e2a:	e07c      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e30:	e079      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e32:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x144>)
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e36:	e076      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	0c9a      	lsrs	r2, r3, #18
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	401a      	ands	r2, r3
 8002e40:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x148>)
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	0d9a      	lsrs	r2, r3, #22
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	3301      	adds	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	025b      	lsls	r3, r3, #9
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d01a      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	4a35      	ldr	r2, [pc, #212]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x144>)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	69b8      	ldr	r0, [r7, #24]
 8002e6c:	69f9      	ldr	r1, [r7, #28]
 8002e6e:	f7fd f9ff 	bl	8000270 <__aeabi_lmul>
 8002e72:	0002      	movs	r2, r0
 8002e74:	000b      	movs	r3, r1
 8002e76:	0010      	movs	r0, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f7fd f9d3 	bl	8000230 <__aeabi_uldivmod>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	000b      	movs	r3, r1
 8002e8e:	0013      	movs	r3, r2
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
 8002e92:	e037      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e94:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d01a      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	68b8      	ldr	r0, [r7, #8]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	f7fd f9df 	bl	8000270 <__aeabi_lmul>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	000b      	movs	r3, r1
 8002eb6:	0010      	movs	r0, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f7fd f9b3 	bl	8000230 <__aeabi_uldivmod>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	000b      	movs	r3, r1
 8002ece:	0013      	movs	r3, r2
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed2:	e017      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	0019      	movs	r1, r3
 8002edc:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f7fd f9c6 	bl	8000270 <__aeabi_lmul>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	0010      	movs	r0, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	001c      	movs	r4, r3
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	001d      	movs	r5, r3
 8002ef4:	0022      	movs	r2, r4
 8002ef6:	002b      	movs	r3, r5
 8002ef8:	f7fd f99a 	bl	8000230 <__aeabi_uldivmod>
 8002efc:	0002      	movs	r2, r0
 8002efe:	000b      	movs	r3, r1
 8002f00:	0013      	movs	r3, r2
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f08:	e00d      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	2207      	movs	r2, #7
 8002f12:	4013      	ands	r3, r2
 8002f14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	0212      	lsls	r2, r2, #8
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b00e      	add	sp, #56	; 0x38
 8002f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	003d0900 	.word	0x003d0900
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	08005d84 	.word	0x08005d84

08002f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff2 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f60:	0001      	movs	r1, r0
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	2207      	movs	r2, #7
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	40d9      	lsrs	r1, r3
 8002f72:	000b      	movs	r3, r1
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08005d7c 	.word	0x08005d7c

08002f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f88:	f7ff ffdc 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f8c:	0001      	movs	r1, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	0adb      	lsrs	r3, r3, #11
 8002f94:	2207      	movs	r2, #7
 8002f96:	4013      	ands	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	40d9      	lsrs	r1, r3
 8002f9e:	000b      	movs	r3, r1
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08005d7c 	.word	0x08005d7c

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002fb8:	2317      	movs	r3, #23
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d100      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002fd6:	e104      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd8:	4bb9      	ldr	r3, [pc, #740]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	055b      	lsls	r3, r3, #21
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d10a      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4bb6      	ldr	r3, [pc, #728]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe8:	4bb5      	ldr	r3, [pc, #724]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	0549      	lsls	r1, r1, #21
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ff2:	2317      	movs	r3, #23
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	4bb2      	ldr	r3, [pc, #712]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4013      	ands	r3, r2
 8003004:	d11a      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003006:	4baf      	ldr	r3, [pc, #700]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4bae      	ldr	r3, [pc, #696]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0049      	lsls	r1, r1, #1
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fe ff10 	bl	8001e38 <HAL_GetTick>
 8003018:	0003      	movs	r3, r0
 800301a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fe ff0b 	bl	8001e38 <HAL_GetTick>
 8003022:	0002      	movs	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	; 0x64
 800302a:	d901      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e143      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	4ba4      	ldr	r3, [pc, #656]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4013      	ands	r3, r2
 800303a:	d0f0      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800303c:	4ba0      	ldr	r3, [pc, #640]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	23c0      	movs	r3, #192	; 0xc0
 8003042:	039b      	lsls	r3, r3, #14
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	23c0      	movs	r3, #192	; 0xc0
 800304e:	039b      	lsls	r3, r3, #14
 8003050:	4013      	ands	r3, r2
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d107      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	23c0      	movs	r3, #192	; 0xc0
 800305e:	039b      	lsls	r3, r3, #14
 8003060:	4013      	ands	r3, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d013      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	23c0      	movs	r3, #192	; 0xc0
 800306e:	029b      	lsls	r3, r3, #10
 8003070:	401a      	ands	r2, r3
 8003072:	23c0      	movs	r3, #192	; 0xc0
 8003074:	029b      	lsls	r3, r3, #10
 8003076:	429a      	cmp	r2, r3
 8003078:	d10a      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800307a:	4b91      	ldr	r3, [pc, #580]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	029b      	lsls	r3, r3, #10
 8003082:	401a      	ands	r2, r3
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	029b      	lsls	r3, r3, #10
 8003088:	429a      	cmp	r2, r3
 800308a:	d101      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e113      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003090:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003092:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003094:	23c0      	movs	r3, #192	; 0xc0
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d049      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	23c0      	movs	r3, #192	; 0xc0
 80030a8:	029b      	lsls	r3, r3, #10
 80030aa:	4013      	ands	r3, r2
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d004      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2220      	movs	r2, #32
 80030b8:	4013      	ands	r3, r2
 80030ba:	d10d      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	23c0      	movs	r3, #192	; 0xc0
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	4013      	ands	r3, r2
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d034      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	4013      	ands	r3, r2
 80030d6:	d02e      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030d8:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030dc:	4a7a      	ldr	r2, [pc, #488]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80030de:	4013      	ands	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e2:	4b77      	ldr	r3, [pc, #476]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	0309      	lsls	r1, r1, #12
 80030ec:	430a      	orrs	r2, r1
 80030ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f0:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f4:	4b72      	ldr	r3, [pc, #456]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030f6:	4975      	ldr	r1, [pc, #468]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80030fc:	4b70      	ldr	r3, [pc, #448]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4013      	ands	r3, r2
 800310a:	d014      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fe94 	bl	8001e38 <HAL_GetTick>
 8003110:	0003      	movs	r3, r0
 8003112:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003114:	e009      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fe fe8f 	bl	8001e38 <HAL_GetTick>
 800311a:	0002      	movs	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0c6      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800312c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4013      	ands	r3, r2
 8003134:	d0ef      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	4013      	ands	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	23c0      	movs	r3, #192	; 0xc0
 8003148:	029b      	lsls	r3, r3, #10
 800314a:	401a      	ands	r2, r3
 800314c:	23c0      	movs	r3, #192	; 0xc0
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	429a      	cmp	r2, r3
 8003152:	d10c      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003154:	4b5a      	ldr	r3, [pc, #360]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	23c0      	movs	r3, #192	; 0xc0
 8003164:	039b      	lsls	r3, r3, #14
 8003166:	401a      	ands	r2, r3
 8003168:	4b55      	ldr	r3, [pc, #340]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003170:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	23c0      	movs	r3, #192	; 0xc0
 8003178:	029b      	lsls	r3, r3, #10
 800317a:	401a      	ands	r2, r3
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800317e:	430a      	orrs	r2, r1
 8003180:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2220      	movs	r2, #32
 8003188:	4013      	ands	r3, r2
 800318a:	d01f      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	23c0      	movs	r3, #192	; 0xc0
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	401a      	ands	r2, r3
 8003196:	23c0      	movs	r3, #192	; 0xc0
 8003198:	029b      	lsls	r3, r3, #10
 800319a:	429a      	cmp	r2, r3
 800319c:	d10c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800319e:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4c      	ldr	r2, [pc, #304]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	23c0      	movs	r3, #192	; 0xc0
 80031ae:	039b      	lsls	r3, r3, #14
 80031b0:	401a      	ands	r2, r3
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ba:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	23c0      	movs	r3, #192	; 0xc0
 80031c2:	029b      	lsls	r3, r3, #10
 80031c4:	401a      	ands	r2, r3
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031cc:	2317      	movs	r3, #23
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d6:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031dc:	493e      	ldr	r1, [pc, #248]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80031de:	400a      	ands	r2, r1
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2201      	movs	r2, #1
 80031e8:	4013      	ands	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ec:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	2203      	movs	r2, #3
 80031f2:	4393      	bics	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2202      	movs	r2, #2
 8003206:	4013      	ands	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	220c      	movs	r2, #12
 8003210:	4393      	bics	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800321a:	430a      	orrs	r2, r1
 800321c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2204      	movs	r2, #4
 8003224:	4013      	ands	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800322a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800322e:	4013      	ands	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003238:	430a      	orrs	r2, r1
 800323a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2208      	movs	r2, #8
 8003242:	4013      	ands	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003246:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003256:	430a      	orrs	r2, r1
 8003258:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4013      	ands	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003276:	430a      	orrs	r2, r1
 8003278:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	4013      	ands	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003288:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003294:	430a      	orrs	r2, r1
 8003296:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	4013      	ands	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b006      	add	sp, #24
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	fffcffff 	.word	0xfffcffff
 80032cc:	fff7ffff 	.word	0xfff7ffff
 80032d0:	00001388 	.word	0x00001388
 80032d4:	ffcfffff 	.word	0xffcfffff
 80032d8:	efffffff 	.word	0xefffffff
 80032dc:	fffff3ff 	.word	0xfffff3ff
 80032e0:	ffffcfff 	.word	0xffffcfff
 80032e4:	fbffffff 	.word	0xfbffffff
 80032e8:	fff3ffff 	.word	0xfff3ffff

080032ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032ec:	b5b0      	push	{r4, r5, r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032f4:	230f      	movs	r3, #15
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e088      	b.n	8003418 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2221      	movs	r2, #33	; 0x21
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd fc9b 	bl	8000c58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2221      	movs	r2, #33	; 0x21
 8003326:	2102      	movs	r1, #2
 8003328:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2210      	movs	r2, #16
 8003332:	4013      	ands	r3, r2
 8003334:	2b10      	cmp	r3, #16
 8003336:	d05f      	beq.n	80033f8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	22ca      	movs	r2, #202	; 0xca
 800333e:	625a      	str	r2, [r3, #36]	; 0x24
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2253      	movs	r2, #83	; 0x53
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003348:	250f      	movs	r5, #15
 800334a:	197c      	adds	r4, r7, r5
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 fc62 	bl	8003c18 <RTC_EnterInitMode>
 8003354:	0003      	movs	r3, r0
 8003356:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003358:	0028      	movs	r0, r5
 800335a:	183b      	adds	r3, r7, r0
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d12c      	bne.n	80033bc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	492c      	ldr	r1, [pc, #176]	; (8003420 <HAL_RTC_Init+0x134>)
 800336e:	400a      	ands	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6899      	ldr	r1, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68d2      	ldr	r2, [r2, #12]
 8003398:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6919      	ldr	r1, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	041a      	lsls	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033ae:	183c      	adds	r4, r7, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 fc74 	bl	8003ca0 <RTC_ExitInitMode>
 80033b8:	0003      	movs	r3, r0
 80033ba:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80033bc:	230f      	movs	r3, #15
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d113      	bne.n	80033ee <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2103      	movs	r1, #3
 80033d2:	438a      	bics	r2, r1
 80033d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	22ff      	movs	r2, #255	; 0xff
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
 80033f6:	e003      	b.n	8003400 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80033f8:	230f      	movs	r3, #15
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003400:	230f      	movs	r3, #15
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2221      	movs	r2, #33	; 0x21
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003412:	230f      	movs	r3, #15
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	781b      	ldrb	r3, [r3, #0]
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b004      	add	sp, #16
 800341e:	bdb0      	pop	{r4, r5, r7, pc}
 8003420:	ff8fffbf 	.word	0xff8fffbf

08003424 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003424:	b5b0      	push	{r4, r5, r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	5c9b      	ldrb	r3, [r3, r2]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_RTC_SetTime+0x1e>
 800343e:	2302      	movs	r3, #2
 8003440:	e092      	b.n	8003568 <HAL_RTC_SetTime+0x144>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2221      	movs	r2, #33	; 0x21
 800344e:	2102      	movs	r1, #2
 8003450:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d125      	bne.n	80034a4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2240      	movs	r2, #64	; 0x40
 8003460:	4013      	ands	r3, r2
 8003462:	d102      	bne.n	800346a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2200      	movs	r2, #0
 8003468:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 fc40 	bl	8003cf4 <RTC_ByteToBcd2>
 8003474:	0003      	movs	r3, r0
 8003476:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fc39 	bl	8003cf4 <RTC_ByteToBcd2>
 8003482:	0003      	movs	r3, r0
 8003484:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003486:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	789b      	ldrb	r3, [r3, #2]
 800348c:	0018      	movs	r0, r3
 800348e:	f000 fc31 	bl	8003cf4 <RTC_ByteToBcd2>
 8003492:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003494:	0022      	movs	r2, r4
 8003496:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	78db      	ldrb	r3, [r3, #3]
 800349c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e017      	b.n	80034d4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2240      	movs	r2, #64	; 0x40
 80034ac:	4013      	ands	r3, r2
 80034ae:	d102      	bne.n	80034b6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2200      	movs	r2, #0
 80034b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	78db      	ldrb	r3, [r3, #3]
 80034ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	22ca      	movs	r2, #202	; 0xca
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2253      	movs	r2, #83	; 0x53
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034e4:	2513      	movs	r5, #19
 80034e6:	197c      	adds	r4, r7, r5
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fb94 	bl	8003c18 <RTC_EnterInitMode>
 80034f0:	0003      	movs	r3, r0
 80034f2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80034f4:	0028      	movs	r0, r5
 80034f6:	183b      	adds	r3, r7, r0
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d120      	bne.n	8003540 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	491a      	ldr	r1, [pc, #104]	; (8003570 <HAL_RTC_SetTime+0x14c>)
 8003506:	400a      	ands	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4917      	ldr	r1, [pc, #92]	; (8003574 <HAL_RTC_SetTime+0x150>)
 8003516:	400a      	ands	r2, r1
 8003518:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003532:	183c      	adds	r4, r7, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	0018      	movs	r0, r3
 8003538:	f000 fbb2 	bl	8003ca0 <RTC_ExitInitMode>
 800353c:	0003      	movs	r3, r0
 800353e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003540:	2313      	movs	r3, #19
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2221      	movs	r2, #33	; 0x21
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	22ff      	movs	r2, #255	; 0xff
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]

  return status;
 8003562:	2313      	movs	r3, #19
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	781b      	ldrb	r3, [r3, #0]
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b006      	add	sp, #24
 800356e:	bdb0      	pop	{r4, r5, r7, pc}
 8003570:	007f7f7f 	.word	0x007f7f7f
 8003574:	fffbffff 	.word	0xfffbffff

08003578 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	045b      	lsls	r3, r3, #17
 800359a:	0c5a      	lsrs	r2, r3, #17
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a22      	ldr	r2, [pc, #136]	; (8003630 <HAL_RTC_GetTime+0xb8>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	223f      	movs	r2, #63	; 0x3f
 80035b4:	4013      	ands	r3, r2
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	227f      	movs	r2, #127	; 0x7f
 80035c4:	4013      	ands	r3, r2
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	227f      	movs	r2, #127	; 0x7f
 80035d2:	4013      	ands	r3, r2
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	0d9b      	lsrs	r3, r3, #22
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2201      	movs	r2, #1
 80035e2:	4013      	ands	r3, r2
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11a      	bne.n	8003626 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fb9e 	bl	8003d36 <RTC_Bcd2ToByte>
 80035fa:	0003      	movs	r3, r0
 80035fc:	001a      	movs	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fb95 	bl	8003d36 <RTC_Bcd2ToByte>
 800360c:	0003      	movs	r3, r0
 800360e:	001a      	movs	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	789b      	ldrb	r3, [r3, #2]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 fb8c 	bl	8003d36 <RTC_Bcd2ToByte>
 800361e:	0003      	movs	r3, r0
 8003620:	001a      	movs	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b006      	add	sp, #24
 800362e:	bd80      	pop	{r7, pc}
 8003630:	007f7f7f 	.word	0x007f7f7f

08003634 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003634:	b5b0      	push	{r4, r5, r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_RTC_SetDate+0x1e>
 800364e:	2302      	movs	r3, #2
 8003650:	e07e      	b.n	8003750 <HAL_RTC_SetDate+0x11c>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2221      	movs	r2, #33	; 0x21
 800365e:	2102      	movs	r1, #2
 8003660:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10e      	bne.n	8003686 <HAL_RTC_SetDate+0x52>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	001a      	movs	r2, r3
 800366e:	2310      	movs	r3, #16
 8003670:	4013      	ands	r3, r2
 8003672:	d008      	beq.n	8003686 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2210      	movs	r2, #16
 800367a:	4393      	bics	r3, r2
 800367c:	b2db      	uxtb	r3, r3
 800367e:	330a      	adds	r3, #10
 8003680:	b2da      	uxtb	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11c      	bne.n	80036c6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 fb2f 	bl	8003cf4 <RTC_ByteToBcd2>
 8003696:	0003      	movs	r3, r0
 8003698:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fb28 	bl	8003cf4 <RTC_ByteToBcd2>
 80036a4:	0003      	movs	r3, r0
 80036a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	789b      	ldrb	r3, [r3, #2]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 fb20 	bl	8003cf4 <RTC_ByteToBcd2>
 80036b4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036b6:	0022      	movs	r2, r4
 80036b8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e00e      	b.n	80036e4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	78db      	ldrb	r3, [r3, #3]
 80036ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036d2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	22ca      	movs	r2, #202	; 0xca
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2253      	movs	r2, #83	; 0x53
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036f4:	2513      	movs	r5, #19
 80036f6:	197c      	adds	r4, r7, r5
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fa8c 	bl	8003c18 <RTC_EnterInitMode>
 8003700:	0003      	movs	r3, r0
 8003702:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003704:	0028      	movs	r0, r5
 8003706:	183b      	adds	r3, r7, r0
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4910      	ldr	r1, [pc, #64]	; (8003758 <HAL_RTC_SetDate+0x124>)
 8003716:	400a      	ands	r2, r1
 8003718:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800371a:	183c      	adds	r4, r7, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fabe 	bl	8003ca0 <RTC_ExitInitMode>
 8003724:	0003      	movs	r3, r0
 8003726:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003728:	2313      	movs	r3, #19
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2221      	movs	r2, #33	; 0x21
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	22ff      	movs	r2, #255	; 0xff
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

  return status;
 800374a:	2313      	movs	r3, #19
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b006      	add	sp, #24
 8003756:	bdb0      	pop	{r4, r5, r7, pc}
 8003758:	00ffff3f 	.word	0x00ffff3f

0800375c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <HAL_RTC_GetDate+0x9c>)
 8003774:	4013      	ands	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	b2db      	uxtb	r3, r3
 8003788:	221f      	movs	r2, #31
 800378a:	4013      	ands	r3, r2
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	223f      	movs	r2, #63	; 0x3f
 8003798:	4013      	ands	r3, r2
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	0b5b      	lsrs	r3, r3, #13
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2207      	movs	r2, #7
 80037a8:	4013      	ands	r3, r2
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11a      	bne.n	80037ec <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	78db      	ldrb	r3, [r3, #3]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 fabb 	bl	8003d36 <RTC_Bcd2ToByte>
 80037c0:	0003      	movs	r3, r0
 80037c2:	001a      	movs	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 fab2 	bl	8003d36 <RTC_Bcd2ToByte>
 80037d2:	0003      	movs	r3, r0
 80037d4:	001a      	movs	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	789b      	ldrb	r3, [r3, #2]
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 faa9 	bl	8003d36 <RTC_Bcd2ToByte>
 80037e4:	0003      	movs	r3, r0
 80037e6:	001a      	movs	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b006      	add	sp, #24
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	00ffff3f 	.word	0x00ffff3f

080037fc <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	5c9b      	ldrb	r3, [r3, r2]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_RTC_SetAlarm+0x26>
 800381e:	2302      	movs	r3, #2
 8003820:	e120      	b.n	8003a64 <HAL_RTC_SetAlarm+0x268>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2221      	movs	r2, #33	; 0x21
 800382e:	2102      	movs	r1, #2
 8003830:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d136      	bne.n	80038a6 <HAL_RTC_SetAlarm+0xaa>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	4013      	ands	r3, r2
 8003842:	d102      	bne.n	800384a <HAL_RTC_SetAlarm+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	0018      	movs	r0, r3
 8003850:	f000 fa50 	bl	8003cf4 <RTC_ByteToBcd2>
 8003854:	0003      	movs	r3, r0
 8003856:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 fa49 	bl	8003cf4 <RTC_ByteToBcd2>
 8003862:	0003      	movs	r3, r0
 8003864:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003866:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	789b      	ldrb	r3, [r3, #2]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 fa41 	bl	8003cf4 <RTC_ByteToBcd2>
 8003872:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003874:	0022      	movs	r2, r4
 8003876:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	78db      	ldrb	r3, [r3, #3]
 800387c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800387e:	431a      	orrs	r2, r3
 8003880:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2220      	movs	r2, #32
 8003886:	5c9b      	ldrb	r3, [r3, r2]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fa33 	bl	8003cf4 <RTC_ByteToBcd2>
 800388e:	0003      	movs	r3, r0
 8003890:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003892:	0022      	movs	r2, r4
 8003894:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800389a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	e022      	b.n	80038ec <HAL_RTC_SetAlarm+0xf0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2240      	movs	r2, #64	; 0x40
 80038ae:	4013      	ands	r3, r2
 80038b0:	d102      	bne.n	80038b8 <HAL_RTC_SetAlarm+0xbc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2200      	movs	r2, #0
 80038b6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80038c4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80038ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	78db      	ldrb	r3, [r3, #3]
 80038d0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80038d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2120      	movs	r1, #32
 80038d8:	5c5b      	ldrb	r3, [r3, r1]
 80038da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80038dc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80038e2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	22ca      	movs	r2, #202	; 0xca
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2253      	movs	r2, #83	; 0x53
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	429a      	cmp	r2, r3
 8003912:	d14d      	bne.n	80039b0 <HAL_RTC_SetAlarm+0x1b4>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4953      	ldr	r1, [pc, #332]	; (8003a6c <HAL_RTC_SetAlarm+0x270>)
 8003920:	400a      	ands	r2, r1
 8003922:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4950      	ldr	r1, [pc, #320]	; (8003a70 <HAL_RTC_SetAlarm+0x274>)
 8003930:	400a      	ands	r2, r1
 8003932:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	22ff      	movs	r2, #255	; 0xff
 800393c:	401a      	ands	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	494c      	ldr	r1, [pc, #304]	; (8003a74 <HAL_RTC_SetAlarm+0x278>)
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003948:	f7fe fa76 	bl	8001e38 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003950:	e016      	b.n	8003980 <HAL_RTC_SetAlarm+0x184>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003952:	f7fe fa71 	bl	8001e38 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	23fa      	movs	r3, #250	; 0xfa
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d90d      	bls.n	8003980 <HAL_RTC_SetAlarm+0x184>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2221      	movs	r2, #33	; 0x21
 8003970:	2103      	movs	r1, #3
 8003972:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	2100      	movs	r1, #0
 800397a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e071      	b.n	8003a64 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	4013      	ands	r3, r2
 800398a:	d0e2      	beq.n	8003952 <HAL_RTC_SetAlarm+0x156>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	0049      	lsls	r1, r1, #1
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	e04c      	b.n	8003a4a <HAL_RTC_SetAlarm+0x24e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	492f      	ldr	r1, [pc, #188]	; (8003a78 <HAL_RTC_SetAlarm+0x27c>)
 80039bc:	400a      	ands	r2, r1
 80039be:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	492c      	ldr	r1, [pc, #176]	; (8003a7c <HAL_RTC_SetAlarm+0x280>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	401a      	ands	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4928      	ldr	r1, [pc, #160]	; (8003a80 <HAL_RTC_SetAlarm+0x284>)
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fe fa28 	bl	8001e38 <HAL_GetTick>
 80039e8:	0003      	movs	r3, r0
 80039ea:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039ec:	e016      	b.n	8003a1c <HAL_RTC_SetAlarm+0x220>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039ee:	f7fe fa23 	bl	8001e38 <HAL_GetTick>
 80039f2:	0002      	movs	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	23fa      	movs	r3, #250	; 0xfa
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d90d      	bls.n	8003a1c <HAL_RTC_SetAlarm+0x220>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2221      	movs	r2, #33	; 0x21
 8003a0c:	2103      	movs	r1, #3
 8003a0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e023      	b.n	8003a64 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d0e2      	beq.n	80039ee <HAL_RTC_SetAlarm+0x1f2>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2180      	movs	r1, #128	; 0x80
 8003a44:	0089      	lsls	r1, r1, #2
 8003a46:	430a      	orrs	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	22ff      	movs	r2, #255	; 0xff
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2221      	movs	r2, #33	; 0x21
 8003a56:	2101      	movs	r1, #1
 8003a58:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b009      	add	sp, #36	; 0x24
 8003a6a:	bd90      	pop	{r4, r7, pc}
 8003a6c:	fffffeff 	.word	0xfffffeff
 8003a70:	ffffefff 	.word	0xffffefff
 8003a74:	fffffe7f 	.word	0xfffffe7f
 8003a78:	fffffdff 	.word	0xfffffdff
 8003a7c:	ffffdfff 	.word	0xffffdfff
 8003a80:	fffffd7f 	.word	0xfffffd7f

08003a84 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RTC_DeactivateAlarm+0x1c>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e086      	b.n	8003bae <HAL_RTC_DeactivateAlarm+0x12a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2221      	movs	r2, #33	; 0x21
 8003aac:	2102      	movs	r1, #2
 8003aae:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	22ca      	movs	r2, #202	; 0xca
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2253      	movs	r2, #83	; 0x53
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d132      	bne.n	8003b30 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4938      	ldr	r1, [pc, #224]	; (8003bb8 <HAL_RTC_DeactivateAlarm+0x134>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4935      	ldr	r1, [pc, #212]	; (8003bbc <HAL_RTC_DeactivateAlarm+0x138>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aea:	f7fe f9a5 	bl	8001e38 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003af2:	e016      	b.n	8003b22 <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003af4:	f7fe f9a0 	bl	8001e38 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad2      	subs	r2, r2, r3
 8003afe:	23fa      	movs	r3, #250	; 0xfa
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d90d      	bls.n	8003b22 <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	2103      	movs	r1, #3
 8003b14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e045      	b.n	8003bae <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d0e2      	beq.n	8003af4 <HAL_RTC_DeactivateAlarm+0x70>
 8003b2e:	e031      	b.n	8003b94 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4921      	ldr	r1, [pc, #132]	; (8003bc0 <HAL_RTC_DeactivateAlarm+0x13c>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	491e      	ldr	r1, [pc, #120]	; (8003bc4 <HAL_RTC_DeactivateAlarm+0x140>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fe f972 	bl	8001e38 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b58:	e016      	b.n	8003b88 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b5a:	f7fe f96d 	bl	8001e38 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	23fa      	movs	r3, #250	; 0xfa
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d90d      	bls.n	8003b88 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2221      	movs	r2, #33	; 0x21
 8003b78:	2103      	movs	r1, #3
 8003b7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e012      	b.n	8003bae <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	4013      	ands	r3, r2
 8003b92:	d0e2      	beq.n	8003b5a <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	22ff      	movs	r2, #255	; 0xff
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2221      	movs	r2, #33	; 0x21
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b004      	add	sp, #16
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	fffffeff 	.word	0xfffffeff
 8003bbc:	ffffefff 	.word	0xffffefff
 8003bc0:	fffffdff 	.word	0xfffffdff
 8003bc4:	ffffdfff 	.word	0xffffdfff

08003bc8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <HAL_RTC_WaitForSynchro+0x4c>)
 8003bda:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bdc:	f7fe f92c 	bl	8001e38 <HAL_GetTick>
 8003be0:	0003      	movs	r3, r0
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003be4:	e00a      	b.n	8003bfc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003be6:	f7fe f927 	bl	8001e38 <HAL_GetTick>
 8003bea:	0002      	movs	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad2      	subs	r2, r2, r3
 8003bf0:	23fa      	movs	r3, #250	; 0xfa
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d901      	bls.n	8003bfc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e006      	b.n	8003c0a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	4013      	ands	r3, r2
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	0001ff5f 	.word	0x0001ff5f

08003c18 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	230f      	movs	r3, #15
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	4013      	ands	r3, r2
 8003c36:	d12c      	bne.n	8003c92 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c48:	f7fe f8f6 	bl	8001e38 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c50:	e014      	b.n	8003c7c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c52:	f7fe f8f1 	bl	8001e38 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	200f      	movs	r0, #15
 8003c5e:	183b      	adds	r3, r7, r0
 8003c60:	1839      	adds	r1, r7, r0
 8003c62:	7809      	ldrb	r1, [r1, #0]
 8003c64:	7019      	strb	r1, [r3, #0]
 8003c66:	23fa      	movs	r3, #250	; 0xfa
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d906      	bls.n	8003c7c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2221      	movs	r2, #33	; 0x21
 8003c72:	2104      	movs	r1, #4
 8003c74:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003c76:	183b      	adds	r3, r7, r0
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	4013      	ands	r3, r2
 8003c86:	d104      	bne.n	8003c92 <RTC_EnterInitMode+0x7a>
 8003c88:	230f      	movs	r3, #15
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d1df      	bne.n	8003c52 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003c92:	230f      	movs	r3, #15
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	781b      	ldrb	r3, [r3, #0]
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b004      	add	sp, #16
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	240f      	movs	r4, #15
 8003caa:	193b      	adds	r3, r7, r4
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d10c      	bne.n	8003ce6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff ff7a 	bl	8003bc8 <HAL_RTC_WaitForSynchro>
 8003cd4:	1e03      	subs	r3, r0, #0
 8003cd6:	d006      	beq.n	8003ce6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2221      	movs	r2, #33	; 0x21
 8003cdc:	2104      	movs	r1, #4
 8003cde:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003ce0:	193b      	adds	r3, r7, r4
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003ce6:	230f      	movs	r3, #15
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b005      	add	sp, #20
 8003cf2:	bd90      	pop	{r4, r7, pc}

08003cf4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	1dfb      	adds	r3, r7, #7
 8003cfe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003d04:	e007      	b.n	8003d16 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003d0c:	1dfb      	adds	r3, r7, #7
 8003d0e:	1dfa      	adds	r2, r7, #7
 8003d10:	7812      	ldrb	r2, [r2, #0]
 8003d12:	3a0a      	subs	r2, #10
 8003d14:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003d16:	1dfb      	adds	r3, r7, #7
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b09      	cmp	r3, #9
 8003d1c:	d8f3      	bhi.n	8003d06 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	b2db      	uxtb	r3, r3
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	0002      	movs	r2, r0
 8003d3e:	1dfb      	adds	r3, r7, #7
 8003d40:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003d46:	1dfb      	adds	r3, r7, #7
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	001a      	movs	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	1dfb      	adds	r3, r7, #7
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	210f      	movs	r1, #15
 8003d64:	400b      	ands	r3, r1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	b2db      	uxtb	r3, r3
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b004      	add	sp, #16
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e032      	b.n	8003dec <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2239      	movs	r2, #57	; 0x39
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2238      	movs	r2, #56	; 0x38
 8003d96:	2100      	movs	r1, #0
 8003d98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fc ff73 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2239      	movs	r2, #57	; 0x39
 8003da6:	2102      	movs	r1, #2
 8003da8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	0019      	movs	r1, r3
 8003db4:	0010      	movs	r0, r2
 8003db6:	f000 fa95 	bl	80042e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	223e      	movs	r2, #62	; 0x3e
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	223a      	movs	r2, #58	; 0x3a
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	223b      	movs	r2, #59	; 0x3b
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	223c      	movs	r2, #60	; 0x3c
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	223d      	movs	r2, #61	; 0x3d
 8003dde:	2101      	movs	r1, #1
 8003de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2239      	movs	r2, #57	; 0x39
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2239      	movs	r2, #57	; 0x39
 8003e00:	5c9b      	ldrb	r3, [r3, r2]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e033      	b.n	8003e74 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2239      	movs	r2, #57	; 0x39
 8003e10:	2102      	movs	r1, #2
 8003e12:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	05db      	lsls	r3, r3, #23
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d00e      	beq.n	8003e3e <HAL_TIM_Base_Start+0x4a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <HAL_TIM_Base_Start+0x88>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_TIM_Base_Start+0x4a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_TIM_Base_Start+0x8c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIM_Base_Start+0x4a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <HAL_TIM_Base_Start+0x90>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d111      	bne.n	8003e62 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2207      	movs	r2, #7
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b06      	cmp	r3, #6
 8003e4e:	d010      	beq.n	8003e72 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e60:	e007      	b.n	8003e72 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40010800 	.word	0x40010800
 8003e84:	40011400 	.word	0x40011400

08003e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2239      	movs	r2, #57	; 0x39
 8003e94:	5c9b      	ldrb	r3, [r3, r2]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d001      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e03b      	b.n	8003f18 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2239      	movs	r2, #57	; 0x39
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	05db      	lsls	r3, r3, #23
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x5a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <HAL_TIM_Base_Start_IT+0x98>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x5a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_TIM_Base_Start_IT+0x5a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2207      	movs	r2, #7
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d010      	beq.n	8003f16 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e007      	b.n	8003f16 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40010800 	.word	0x40010800
 8003f28:	40011400 	.word	0x40011400

08003f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d124      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d11d      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2203      	movs	r2, #3
 8003f56:	4252      	negs	r2, r2
 8003f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2203      	movs	r2, #3
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f9a0 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003f74:	e007      	b.n	8003f86 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 f993 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 f99f 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2204      	movs	r2, #4
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d125      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d11e      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2205      	movs	r2, #5
 8003fae:	4252      	negs	r2, r2
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	23c0      	movs	r3, #192	; 0xc0
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 f973 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003fce:	e007      	b.n	8003fe0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f000 f966 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 f972 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2208      	movs	r2, #8
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d124      	bne.n	800403e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11d      	bne.n	800403e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2209      	movs	r2, #9
 8004008:	4252      	negs	r2, r2
 800400a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2204      	movs	r2, #4
 8004010:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2203      	movs	r2, #3
 800401a:	4013      	ands	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 f947 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8004026:	e007      	b.n	8004038 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	0018      	movs	r0, r3
 800402c:	f000 f93a 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0018      	movs	r0, r3
 8004034:	f000 f946 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2210      	movs	r2, #16
 8004046:	4013      	ands	r3, r2
 8004048:	2b10      	cmp	r3, #16
 800404a:	d125      	bne.n	8004098 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2210      	movs	r2, #16
 8004054:	4013      	ands	r3, r2
 8004056:	2b10      	cmp	r3, #16
 8004058:	d11e      	bne.n	8004098 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2211      	movs	r2, #17
 8004060:	4252      	negs	r2, r2
 8004062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2208      	movs	r2, #8
 8004068:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	23c0      	movs	r3, #192	; 0xc0
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 f91a 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8004080:	e007      	b.n	8004092 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f90d 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0018      	movs	r0, r3
 800408e:	f000 f919 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2201      	movs	r2, #1
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10f      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d108      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	4252      	negs	r2, r2
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7fc fd81 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2240      	movs	r2, #64	; 0x40
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d10f      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	4013      	ands	r3, r2
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d108      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2241      	movs	r2, #65	; 0x41
 80040e8:	4252      	negs	r2, r2
 80040ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 f8f0 	bl	80042d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	230f      	movs	r3, #15
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2238      	movs	r2, #56	; 0x38
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_TIM_ConfigClockSource+0x20>
 8004118:	2302      	movs	r3, #2
 800411a:	e0bc      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x19a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2238      	movs	r2, #56	; 0x38
 8004120:	2101      	movs	r1, #1
 8004122:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2239      	movs	r2, #57	; 0x39
 8004128:	2102      	movs	r1, #2
 800412a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2277      	movs	r2, #119	; 0x77
 8004138:	4393      	bics	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004140:	4013      	ands	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	0192      	lsls	r2, r2, #6
 8004154:	4293      	cmp	r3, r2
 8004156:	d040      	beq.n	80041da <HAL_TIM_ConfigClockSource+0xde>
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	0192      	lsls	r2, r2, #6
 800415c:	4293      	cmp	r3, r2
 800415e:	d900      	bls.n	8004162 <HAL_TIM_ConfigClockSource+0x66>
 8004160:	e088      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	0152      	lsls	r2, r2, #5
 8004166:	4293      	cmp	r3, r2
 8004168:	d100      	bne.n	800416c <HAL_TIM_ConfigClockSource+0x70>
 800416a:	e088      	b.n	800427e <HAL_TIM_ConfigClockSource+0x182>
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	0152      	lsls	r2, r2, #5
 8004170:	4293      	cmp	r3, r2
 8004172:	d900      	bls.n	8004176 <HAL_TIM_ConfigClockSource+0x7a>
 8004174:	e07e      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 8004176:	2b70      	cmp	r3, #112	; 0x70
 8004178:	d018      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0xb0>
 800417a:	d900      	bls.n	800417e <HAL_TIM_ConfigClockSource+0x82>
 800417c:	e07a      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 800417e:	2b60      	cmp	r3, #96	; 0x60
 8004180:	d04f      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x126>
 8004182:	d900      	bls.n	8004186 <HAL_TIM_ConfigClockSource+0x8a>
 8004184:	e076      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 8004186:	2b50      	cmp	r3, #80	; 0x50
 8004188:	d03b      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x106>
 800418a:	d900      	bls.n	800418e <HAL_TIM_ConfigClockSource+0x92>
 800418c:	e072      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d057      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x146>
 8004192:	d900      	bls.n	8004196 <HAL_TIM_ConfigClockSource+0x9a>
 8004194:	e06e      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 8004196:	2b30      	cmp	r3, #48	; 0x30
 8004198:	d063      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x166>
 800419a:	d86b      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 800419c:	2b20      	cmp	r3, #32
 800419e:	d060      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x166>
 80041a0:	d868      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d05d      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x166>
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d05b      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x166>
 80041aa:	e063      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041bc:	f000 f96a 	bl	8004494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2277      	movs	r2, #119	; 0x77
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	609a      	str	r2, [r3, #8]
      break;
 80041d8:	e052      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ea:	f000 f953 	bl	8004494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	01c9      	lsls	r1, r1, #7
 80041fc:	430a      	orrs	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
      break;
 8004200:	e03e      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	001a      	movs	r2, r3
 8004210:	f000 f8c6 	bl	80043a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2150      	movs	r1, #80	; 0x50
 800421a:	0018      	movs	r0, r3
 800421c:	f000 f920 	bl	8004460 <TIM_ITRx_SetConfig>
      break;
 8004220:	e02e      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	001a      	movs	r2, r3
 8004230:	f000 f8e4 	bl	80043fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2160      	movs	r1, #96	; 0x60
 800423a:	0018      	movs	r0, r3
 800423c:	f000 f910 	bl	8004460 <TIM_ITRx_SetConfig>
      break;
 8004240:	e01e      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	001a      	movs	r2, r3
 8004250:	f000 f8a6 	bl	80043a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	0018      	movs	r0, r3
 800425c:	f000 f900 	bl	8004460 <TIM_ITRx_SetConfig>
      break;
 8004260:	e00e      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	0019      	movs	r1, r3
 800426c:	0010      	movs	r0, r2
 800426e:	f000 f8f7 	bl	8004460 <TIM_ITRx_SetConfig>
      break;
 8004272:	e005      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004274:	230f      	movs	r3, #15
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
      break;
 800427c:	e000      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800427e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2239      	movs	r2, #57	; 0x39
 8004284:	2101      	movs	r1, #1
 8004286:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2238      	movs	r2, #56	; 0x38
 800428c:	2100      	movs	r1, #0
 800428e:	5499      	strb	r1, [r3, r2]

  return status;
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b004      	add	sp, #16
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	ffff00ff 	.word	0xffff00ff

080042a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	05db      	lsls	r3, r3, #23
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d00b      	beq.n	8004316 <TIM_Base_SetConfig+0x32>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a23      	ldr	r2, [pc, #140]	; (8004390 <TIM_Base_SetConfig+0xac>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_Base_SetConfig+0x32>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a22      	ldr	r2, [pc, #136]	; (8004394 <TIM_Base_SetConfig+0xb0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_Base_SetConfig+0x32>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a21      	ldr	r2, [pc, #132]	; (8004398 <TIM_Base_SetConfig+0xb4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2270      	movs	r2, #112	; 0x70
 800431a:	4393      	bics	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	05db      	lsls	r3, r3, #23
 800432e:	429a      	cmp	r2, r3
 8004330:	d00b      	beq.n	800434a <TIM_Base_SetConfig+0x66>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a16      	ldr	r2, [pc, #88]	; (8004390 <TIM_Base_SetConfig+0xac>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_Base_SetConfig+0x66>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <TIM_Base_SetConfig+0xb0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0x66>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <TIM_Base_SetConfig+0xb4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <TIM_Base_SetConfig+0xb8>)
 800434e:	4013      	ands	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2280      	movs	r2, #128	; 0x80
 8004360:	4393      	bics	r3, r2
 8004362:	001a      	movs	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	615a      	str	r2, [r3, #20]
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b004      	add	sp, #16
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40000400 	.word	0x40000400
 8004394:	40010800 	.word	0x40010800
 8004398:	40011400 	.word	0x40011400
 800439c:	fffffcff 	.word	0xfffffcff

080043a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	2201      	movs	r2, #1
 80043b8:	4393      	bics	r3, r2
 80043ba:	001a      	movs	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	22f0      	movs	r2, #240	; 0xf0
 80043ca:	4393      	bics	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	220a      	movs	r2, #10
 80043dc:	4393      	bics	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b006      	add	sp, #24
 80043fa:	bd80      	pop	{r7, pc}

080043fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	2210      	movs	r2, #16
 800440e:	4393      	bics	r3, r2
 8004410:	001a      	movs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <TIM_TI2_ConfigInputStage+0x60>)
 8004426:	4013      	ands	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	031b      	lsls	r3, r3, #12
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	22a0      	movs	r2, #160	; 0xa0
 8004438:	4393      	bics	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b006      	add	sp, #24
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	ffff0fff 	.word	0xffff0fff

08004460 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2270      	movs	r2, #112	; 0x70
 8004474:	4393      	bics	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	2207      	movs	r2, #7
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b004      	add	sp, #16
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <TIM_ETR_SetConfig+0x3c>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b006      	add	sp, #24
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	ffff00ff 	.word	0xffff00ff

080044d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2238      	movs	r2, #56	; 0x38
 80044e2:	5c9b      	ldrb	r3, [r3, r2]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e047      	b.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2238      	movs	r2, #56	; 0x38
 80044f0:	2101      	movs	r1, #1
 80044f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2239      	movs	r2, #57	; 0x39
 80044f8:	2102      	movs	r1, #2
 80044fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2270      	movs	r2, #112	; 0x70
 8004510:	4393      	bics	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	05db      	lsls	r3, r3, #23
 800452e:	429a      	cmp	r2, r3
 8004530:	d00e      	beq.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a11      	ldr	r2, [pc, #68]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10c      	bne.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	4393      	bics	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	4313      	orrs	r3, r2
 8004560:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2239      	movs	r2, #57	; 0x39
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2238      	movs	r2, #56	; 0x38
 8004576:	2100      	movs	r1, #0
 8004578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40000400 	.word	0x40000400
 8004588:	40010800 	.word	0x40010800
 800458c:	40011400 	.word	0x40011400

08004590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e044      	b.n	800462c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2278      	movs	r2, #120	; 0x78
 80045ae:	2100      	movs	r1, #0
 80045b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7fc fb93 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2224      	movs	r2, #36	; 0x24
 80045be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2101      	movs	r1, #1
 80045cc:	438a      	bics	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 f8d0 	bl	8004778 <UART_SetConfig>
 80045d8:	0003      	movs	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e024      	b.n	800462c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 fb61 	bl	8004cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	490d      	ldr	r1, [pc, #52]	; (8004634 <HAL_UART_Init+0xa4>)
 80045fe:	400a      	ands	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	212a      	movs	r1, #42	; 0x2a
 800460e:	438a      	bics	r2, r1
 8004610:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2101      	movs	r1, #1
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0018      	movs	r0, r3
 8004626:	f000 fbf9 	bl	8004e1c <UART_CheckIdleState>
 800462a:	0003      	movs	r3, r0
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}
 8004634:	ffffb7ff 	.word	0xffffb7ff

08004638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	1dbb      	adds	r3, r7, #6
 8004646:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464c:	2b20      	cmp	r3, #32
 800464e:	d000      	beq.n	8004652 <HAL_UART_Transmit+0x1a>
 8004650:	e08c      	b.n	800476c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_UART_Transmit+0x28>
 8004658:	1dbb      	adds	r3, r7, #6
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e084      	b.n	800476e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	015b      	lsls	r3, r3, #5
 800466c:	429a      	cmp	r2, r3
 800466e:	d109      	bne.n	8004684 <HAL_UART_Transmit+0x4c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2201      	movs	r2, #1
 800467c:	4013      	ands	r3, r2
 800467e:	d001      	beq.n	8004684 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e074      	b.n	800476e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2284      	movs	r2, #132	; 0x84
 8004688:	2100      	movs	r1, #0
 800468a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2221      	movs	r2, #33	; 0x21
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004692:	f7fd fbd1 	bl	8001e38 <HAL_GetTick>
 8004696:	0003      	movs	r3, r0
 8004698:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1dba      	adds	r2, r7, #6
 800469e:	2150      	movs	r1, #80	; 0x50
 80046a0:	8812      	ldrh	r2, [r2, #0]
 80046a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1dba      	adds	r2, r7, #6
 80046a8:	2152      	movs	r1, #82	; 0x52
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	015b      	lsls	r3, r3, #5
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d108      	bne.n	80046cc <HAL_UART_Transmit+0x94>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e003      	b.n	80046d4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d4:	e02f      	b.n	8004736 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	0013      	movs	r3, r2
 80046e0:	2200      	movs	r2, #0
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	f000 fc42 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 80046e8:	1e03      	subs	r3, r0, #0
 80046ea:	d004      	beq.n	80046f6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e03b      	b.n	800476e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	001a      	movs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	05d2      	lsls	r2, r2, #23
 8004708:	0dd2      	lsrs	r2, r2, #23
 800470a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	3302      	adds	r3, #2
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e007      	b.n	8004724 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3301      	adds	r3, #1
 8004722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2252      	movs	r2, #82	; 0x52
 8004728:	5a9b      	ldrh	r3, [r3, r2]
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b299      	uxth	r1, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2252      	movs	r2, #82	; 0x52
 8004734:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2252      	movs	r2, #82	; 0x52
 800473a:	5a9b      	ldrh	r3, [r3, r2]
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1c9      	bne.n	80046d6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	0013      	movs	r3, r2
 800474c:	2200      	movs	r2, #0
 800474e:	2140      	movs	r1, #64	; 0x40
 8004750:	f000 fc0c 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d004      	beq.n	8004762 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e005      	b.n	800476e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b008      	add	sp, #32
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b5b0      	push	{r4, r5, r7, lr}
 800477a:	b08e      	sub	sp, #56	; 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004780:	231a      	movs	r3, #26
 8004782:	2218      	movs	r2, #24
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	431a      	orrs	r2, r3
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4ac3      	ldr	r2, [pc, #780]	; (8004ab8 <UART_SetConfig+0x340>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4abe      	ldr	r2, [pc, #760]	; (8004abc <UART_SetConfig+0x344>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	0019      	movs	r1, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4ab8      	ldr	r2, [pc, #736]	; (8004ac0 <UART_SetConfig+0x348>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e8:	4313      	orrs	r3, r2
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4ab4      	ldr	r2, [pc, #720]	; (8004ac4 <UART_SetConfig+0x34c>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4ab0      	ldr	r2, [pc, #704]	; (8004ac8 <UART_SetConfig+0x350>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d131      	bne.n	8004870 <UART_SetConfig+0xf8>
 800480c:	4baf      	ldr	r3, [pc, #700]	; (8004acc <UART_SetConfig+0x354>)
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	2203      	movs	r2, #3
 8004812:	4013      	ands	r3, r2
 8004814:	2b03      	cmp	r3, #3
 8004816:	d01d      	beq.n	8004854 <UART_SetConfig+0xdc>
 8004818:	d823      	bhi.n	8004862 <UART_SetConfig+0xea>
 800481a:	2b02      	cmp	r3, #2
 800481c:	d00c      	beq.n	8004838 <UART_SetConfig+0xc0>
 800481e:	d820      	bhi.n	8004862 <UART_SetConfig+0xea>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <UART_SetConfig+0xb2>
 8004824:	2b01      	cmp	r3, #1
 8004826:	d00e      	beq.n	8004846 <UART_SetConfig+0xce>
 8004828:	e01b      	b.n	8004862 <UART_SetConfig+0xea>
 800482a:	231b      	movs	r3, #27
 800482c:	2218      	movs	r2, #24
 800482e:	189b      	adds	r3, r3, r2
 8004830:	19db      	adds	r3, r3, r7
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e0b4      	b.n	80049a2 <UART_SetConfig+0x22a>
 8004838:	231b      	movs	r3, #27
 800483a:	2218      	movs	r2, #24
 800483c:	189b      	adds	r3, r3, r2
 800483e:	19db      	adds	r3, r3, r7
 8004840:	2202      	movs	r2, #2
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e0ad      	b.n	80049a2 <UART_SetConfig+0x22a>
 8004846:	231b      	movs	r3, #27
 8004848:	2218      	movs	r2, #24
 800484a:	189b      	adds	r3, r3, r2
 800484c:	19db      	adds	r3, r3, r7
 800484e:	2204      	movs	r2, #4
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e0a6      	b.n	80049a2 <UART_SetConfig+0x22a>
 8004854:	231b      	movs	r3, #27
 8004856:	2218      	movs	r2, #24
 8004858:	189b      	adds	r3, r3, r2
 800485a:	19db      	adds	r3, r3, r7
 800485c:	2208      	movs	r2, #8
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e09f      	b.n	80049a2 <UART_SetConfig+0x22a>
 8004862:	231b      	movs	r3, #27
 8004864:	2218      	movs	r2, #24
 8004866:	189b      	adds	r3, r3, r2
 8004868:	19db      	adds	r3, r3, r7
 800486a:	2210      	movs	r2, #16
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e098      	b.n	80049a2 <UART_SetConfig+0x22a>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a96      	ldr	r2, [pc, #600]	; (8004ad0 <UART_SetConfig+0x358>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d131      	bne.n	80048de <UART_SetConfig+0x166>
 800487a:	4b94      	ldr	r3, [pc, #592]	; (8004acc <UART_SetConfig+0x354>)
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	220c      	movs	r2, #12
 8004880:	4013      	ands	r3, r2
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d01d      	beq.n	80048c2 <UART_SetConfig+0x14a>
 8004886:	d823      	bhi.n	80048d0 <UART_SetConfig+0x158>
 8004888:	2b08      	cmp	r3, #8
 800488a:	d00c      	beq.n	80048a6 <UART_SetConfig+0x12e>
 800488c:	d820      	bhi.n	80048d0 <UART_SetConfig+0x158>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <UART_SetConfig+0x120>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00e      	beq.n	80048b4 <UART_SetConfig+0x13c>
 8004896:	e01b      	b.n	80048d0 <UART_SetConfig+0x158>
 8004898:	231b      	movs	r3, #27
 800489a:	2218      	movs	r2, #24
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e07d      	b.n	80049a2 <UART_SetConfig+0x22a>
 80048a6:	231b      	movs	r3, #27
 80048a8:	2218      	movs	r2, #24
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	19db      	adds	r3, r3, r7
 80048ae:	2202      	movs	r2, #2
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e076      	b.n	80049a2 <UART_SetConfig+0x22a>
 80048b4:	231b      	movs	r3, #27
 80048b6:	2218      	movs	r2, #24
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	19db      	adds	r3, r3, r7
 80048bc:	2204      	movs	r2, #4
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e06f      	b.n	80049a2 <UART_SetConfig+0x22a>
 80048c2:	231b      	movs	r3, #27
 80048c4:	2218      	movs	r2, #24
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	19db      	adds	r3, r3, r7
 80048ca:	2208      	movs	r2, #8
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e068      	b.n	80049a2 <UART_SetConfig+0x22a>
 80048d0:	231b      	movs	r3, #27
 80048d2:	2218      	movs	r2, #24
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	19db      	adds	r3, r3, r7
 80048d8:	2210      	movs	r2, #16
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e061      	b.n	80049a2 <UART_SetConfig+0x22a>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a7c      	ldr	r2, [pc, #496]	; (8004ad4 <UART_SetConfig+0x35c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d106      	bne.n	80048f6 <UART_SetConfig+0x17e>
 80048e8:	231b      	movs	r3, #27
 80048ea:	2218      	movs	r2, #24
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e055      	b.n	80049a2 <UART_SetConfig+0x22a>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a77      	ldr	r2, [pc, #476]	; (8004ad8 <UART_SetConfig+0x360>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d106      	bne.n	800490e <UART_SetConfig+0x196>
 8004900:	231b      	movs	r3, #27
 8004902:	2218      	movs	r2, #24
 8004904:	189b      	adds	r3, r3, r2
 8004906:	19db      	adds	r3, r3, r7
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e049      	b.n	80049a2 <UART_SetConfig+0x22a>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a6b      	ldr	r2, [pc, #428]	; (8004ac0 <UART_SetConfig+0x348>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d13e      	bne.n	8004996 <UART_SetConfig+0x21e>
 8004918:	4b6c      	ldr	r3, [pc, #432]	; (8004acc <UART_SetConfig+0x354>)
 800491a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800491c:	23c0      	movs	r3, #192	; 0xc0
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	4013      	ands	r3, r2
 8004922:	22c0      	movs	r2, #192	; 0xc0
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	4293      	cmp	r3, r2
 8004928:	d027      	beq.n	800497a <UART_SetConfig+0x202>
 800492a:	22c0      	movs	r2, #192	; 0xc0
 800492c:	0112      	lsls	r2, r2, #4
 800492e:	4293      	cmp	r3, r2
 8004930:	d82a      	bhi.n	8004988 <UART_SetConfig+0x210>
 8004932:	2280      	movs	r2, #128	; 0x80
 8004934:	0112      	lsls	r2, r2, #4
 8004936:	4293      	cmp	r3, r2
 8004938:	d011      	beq.n	800495e <UART_SetConfig+0x1e6>
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	4293      	cmp	r3, r2
 8004940:	d822      	bhi.n	8004988 <UART_SetConfig+0x210>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <UART_SetConfig+0x1d8>
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	00d2      	lsls	r2, r2, #3
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <UART_SetConfig+0x1f4>
 800494e:	e01b      	b.n	8004988 <UART_SetConfig+0x210>
 8004950:	231b      	movs	r3, #27
 8004952:	2218      	movs	r2, #24
 8004954:	189b      	adds	r3, r3, r2
 8004956:	19db      	adds	r3, r3, r7
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e021      	b.n	80049a2 <UART_SetConfig+0x22a>
 800495e:	231b      	movs	r3, #27
 8004960:	2218      	movs	r2, #24
 8004962:	189b      	adds	r3, r3, r2
 8004964:	19db      	adds	r3, r3, r7
 8004966:	2202      	movs	r2, #2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e01a      	b.n	80049a2 <UART_SetConfig+0x22a>
 800496c:	231b      	movs	r3, #27
 800496e:	2218      	movs	r2, #24
 8004970:	189b      	adds	r3, r3, r2
 8004972:	19db      	adds	r3, r3, r7
 8004974:	2204      	movs	r2, #4
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e013      	b.n	80049a2 <UART_SetConfig+0x22a>
 800497a:	231b      	movs	r3, #27
 800497c:	2218      	movs	r2, #24
 800497e:	189b      	adds	r3, r3, r2
 8004980:	19db      	adds	r3, r3, r7
 8004982:	2208      	movs	r2, #8
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e00c      	b.n	80049a2 <UART_SetConfig+0x22a>
 8004988:	231b      	movs	r3, #27
 800498a:	2218      	movs	r2, #24
 800498c:	189b      	adds	r3, r3, r2
 800498e:	19db      	adds	r3, r3, r7
 8004990:	2210      	movs	r2, #16
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e005      	b.n	80049a2 <UART_SetConfig+0x22a>
 8004996:	231b      	movs	r3, #27
 8004998:	2218      	movs	r2, #24
 800499a:	189b      	adds	r3, r3, r2
 800499c:	19db      	adds	r3, r3, r7
 800499e:	2210      	movs	r2, #16
 80049a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a46      	ldr	r2, [pc, #280]	; (8004ac0 <UART_SetConfig+0x348>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d000      	beq.n	80049ae <UART_SetConfig+0x236>
 80049ac:	e09a      	b.n	8004ae4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049ae:	231b      	movs	r3, #27
 80049b0:	2218      	movs	r2, #24
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	19db      	adds	r3, r3, r7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d01d      	beq.n	80049f8 <UART_SetConfig+0x280>
 80049bc:	dc20      	bgt.n	8004a00 <UART_SetConfig+0x288>
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d015      	beq.n	80049ee <UART_SetConfig+0x276>
 80049c2:	dc1d      	bgt.n	8004a00 <UART_SetConfig+0x288>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <UART_SetConfig+0x256>
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d005      	beq.n	80049d8 <UART_SetConfig+0x260>
 80049cc:	e018      	b.n	8004a00 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ce:	f7fe fac3 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 80049d2:	0003      	movs	r3, r0
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049d6:	e01c      	b.n	8004a12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <UART_SetConfig+0x354>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2210      	movs	r2, #16
 80049de:	4013      	ands	r3, r2
 80049e0:	d002      	beq.n	80049e8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049e2:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <UART_SetConfig+0x364>)
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049e6:	e014      	b.n	8004a12 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <UART_SetConfig+0x368>)
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ec:	e011      	b.n	8004a12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7fe fa03 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 80049f2:	0003      	movs	r3, r0
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049f6:	e00c      	b.n	8004a12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049fe:	e008      	b.n	8004a12 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a04:	231a      	movs	r3, #26
 8004a06:	2218      	movs	r2, #24
 8004a08:	189b      	adds	r3, r3, r2
 8004a0a:	19db      	adds	r3, r3, r7
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
        break;
 8004a10:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d100      	bne.n	8004a1a <UART_SetConfig+0x2a2>
 8004a18:	e133      	b.n	8004c82 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	0013      	movs	r3, r2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d305      	bcc.n	8004a36 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d906      	bls.n	8004a44 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004a36:	231a      	movs	r3, #26
 8004a38:	2218      	movs	r2, #24
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	19db      	adds	r3, r3, r7
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e11e      	b.n	8004c82 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	6939      	ldr	r1, [r7, #16]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	000b      	movs	r3, r1
 8004a52:	0e1b      	lsrs	r3, r3, #24
 8004a54:	0010      	movs	r0, r2
 8004a56:	0205      	lsls	r5, r0, #8
 8004a58:	431d      	orrs	r5, r3
 8004a5a:	000b      	movs	r3, r1
 8004a5c:	021c      	lsls	r4, r3, #8
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	68f9      	ldr	r1, [r7, #12]
 8004a6e:	1900      	adds	r0, r0, r4
 8004a70:	4169      	adcs	r1, r5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f7fb fbd6 	bl	8000230 <__aeabi_uldivmod>
 8004a84:	0002      	movs	r2, r0
 8004a86:	000b      	movs	r3, r1
 8004a88:	0013      	movs	r3, r2
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a8e:	23c0      	movs	r3, #192	; 0xc0
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d309      	bcc.n	8004aaa <UART_SetConfig+0x332>
 8004a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	035b      	lsls	r3, r3, #13
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d204      	bcs.n	8004aaa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa6:	60da      	str	r2, [r3, #12]
 8004aa8:	e0eb      	b.n	8004c82 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004aaa:	231a      	movs	r3, #26
 8004aac:	2218      	movs	r2, #24
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	19db      	adds	r3, r3, r7
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e0e4      	b.n	8004c82 <UART_SetConfig+0x50a>
 8004ab8:	efff69f3 	.word	0xefff69f3
 8004abc:	ffffcfff 	.word	0xffffcfff
 8004ac0:	40004800 	.word	0x40004800
 8004ac4:	fffff4ff 	.word	0xfffff4ff
 8004ac8:	40013800 	.word	0x40013800
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40004400 	.word	0x40004400
 8004ad4:	40004c00 	.word	0x40004c00
 8004ad8:	40005000 	.word	0x40005000
 8004adc:	003d0900 	.word	0x003d0900
 8004ae0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d000      	beq.n	8004af2 <UART_SetConfig+0x37a>
 8004af0:	e070      	b.n	8004bd4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004af2:	231b      	movs	r3, #27
 8004af4:	2218      	movs	r2, #24
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	19db      	adds	r3, r3, r7
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d822      	bhi.n	8004b46 <UART_SetConfig+0x3ce>
 8004b00:	009a      	lsls	r2, r3, #2
 8004b02:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <UART_SetConfig+0x528>)
 8004b04:	18d3      	adds	r3, r2, r3
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7fe fa25 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b12:	e021      	b.n	8004b58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fe fa36 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b1c:	e01c      	b.n	8004b58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b1e:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <UART_SetConfig+0x52c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2210      	movs	r2, #16
 8004b24:	4013      	ands	r3, r2
 8004b26:	d002      	beq.n	8004b2e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b28:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <UART_SetConfig+0x530>)
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b2c:	e014      	b.n	8004b58 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <UART_SetConfig+0x534>)
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b32:	e011      	b.n	8004b58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b34:	f7fe f960 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b3c:	e00c      	b.n	8004b58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b44:	e008      	b.n	8004b58 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b4a:	231a      	movs	r3, #26
 8004b4c:	2218      	movs	r2, #24
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	19db      	adds	r3, r3, r7
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
        break;
 8004b56:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d100      	bne.n	8004b60 <UART_SetConfig+0x3e8>
 8004b5e:	e090      	b.n	8004c82 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	005a      	lsls	r2, r3, #1
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	18d2      	adds	r2, r2, r3
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0019      	movs	r1, r3
 8004b72:	0010      	movs	r0, r2
 8004b74:	f7fb fad0 	bl	8000118 <__udivsi3>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d921      	bls.n	8004bc6 <UART_SetConfig+0x44e>
 8004b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	025b      	lsls	r3, r3, #9
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d21c      	bcs.n	8004bc6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	200e      	movs	r0, #14
 8004b92:	2418      	movs	r4, #24
 8004b94:	1903      	adds	r3, r0, r4
 8004b96:	19db      	adds	r3, r3, r7
 8004b98:	210f      	movs	r1, #15
 8004b9a:	438a      	bics	r2, r1
 8004b9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	b299      	uxth	r1, r3
 8004baa:	1903      	adds	r3, r0, r4
 8004bac:	19db      	adds	r3, r3, r7
 8004bae:	1902      	adds	r2, r0, r4
 8004bb0:	19d2      	adds	r2, r2, r7
 8004bb2:	8812      	ldrh	r2, [r2, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	1902      	adds	r2, r0, r4
 8004bbe:	19d2      	adds	r2, r2, r7
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e05d      	b.n	8004c82 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc6:	231a      	movs	r3, #26
 8004bc8:	2218      	movs	r2, #24
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	19db      	adds	r3, r3, r7
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e056      	b.n	8004c82 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd4:	231b      	movs	r3, #27
 8004bd6:	2218      	movs	r2, #24
 8004bd8:	189b      	adds	r3, r3, r2
 8004bda:	19db      	adds	r3, r3, r7
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d822      	bhi.n	8004c28 <UART_SetConfig+0x4b0>
 8004be2:	009a      	lsls	r2, r3, #2
 8004be4:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <UART_SetConfig+0x538>)
 8004be6:	18d3      	adds	r3, r2, r3
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe f9b4 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bf4:	e021      	b.n	8004c3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf6:	f7fe f9c5 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bfe:	e01c      	b.n	8004c3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <UART_SetConfig+0x52c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2210      	movs	r2, #16
 8004c06:	4013      	ands	r3, r2
 8004c08:	d002      	beq.n	8004c10 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <UART_SetConfig+0x530>)
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c0e:	e014      	b.n	8004c3a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <UART_SetConfig+0x534>)
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c14:	e011      	b.n	8004c3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c16:	f7fe f8ef 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c1e:	e00c      	b.n	8004c3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c26:	e008      	b.n	8004c3a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c2c:	231a      	movs	r3, #26
 8004c2e:	2218      	movs	r2, #24
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	19db      	adds	r3, r3, r7
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
        break;
 8004c38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	085a      	lsrs	r2, r3, #1
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	18d2      	adds	r2, r2, r3
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	0019      	movs	r1, r3
 8004c50:	0010      	movs	r0, r2
 8004c52:	f7fb fa61 	bl	8000118 <__udivsi3>
 8004c56:	0003      	movs	r3, r0
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b0f      	cmp	r3, #15
 8004c5e:	d90a      	bls.n	8004c76 <UART_SetConfig+0x4fe>
 8004c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	025b      	lsls	r3, r3, #9
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d205      	bcs.n	8004c76 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	e005      	b.n	8004c82 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004c76:	231a      	movs	r3, #26
 8004c78:	2218      	movs	r2, #24
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	19db      	adds	r3, r3, r7
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2200      	movs	r2, #0
 8004c86:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c8e:	231a      	movs	r3, #26
 8004c90:	2218      	movs	r2, #24
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	19db      	adds	r3, r3, r7
 8004c96:	781b      	ldrb	r3, [r3, #0]
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b00e      	add	sp, #56	; 0x38
 8004c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca0:	08005db8 	.word	0x08005db8
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	003d0900 	.word	0x003d0900
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	08005ddc 	.word	0x08005ddc

08004cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4a4a      	ldr	r2, [pc, #296]	; (8004df8 <UART_AdvFeatureConfig+0x144>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4a43      	ldr	r2, [pc, #268]	; (8004dfc <UART_AdvFeatureConfig+0x148>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2204      	movs	r2, #4
 8004d06:	4013      	ands	r3, r2
 8004d08:	d00b      	beq.n	8004d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a3b      	ldr	r2, [pc, #236]	; (8004e00 <UART_AdvFeatureConfig+0x14c>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2208      	movs	r2, #8
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4a34      	ldr	r2, [pc, #208]	; (8004e04 <UART_AdvFeatureConfig+0x150>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	2210      	movs	r2, #16
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a2c      	ldr	r2, [pc, #176]	; (8004e08 <UART_AdvFeatureConfig+0x154>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	0019      	movs	r1, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d00b      	beq.n	8004d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <UART_AdvFeatureConfig+0x158>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	0019      	movs	r1, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2240      	movs	r2, #64	; 0x40
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d01d      	beq.n	8004dce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <UART_AdvFeatureConfig+0x15c>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	035b      	lsls	r3, r3, #13
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d10b      	bne.n	8004dce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <UART_AdvFeatureConfig+0x160>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4a0e      	ldr	r2, [pc, #56]	; (8004e18 <UART_AdvFeatureConfig+0x164>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }
}
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b002      	add	sp, #8
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	fffdffff 	.word	0xfffdffff
 8004dfc:	fffeffff 	.word	0xfffeffff
 8004e00:	fffbffff 	.word	0xfffbffff
 8004e04:	ffff7fff 	.word	0xffff7fff
 8004e08:	ffffefff 	.word	0xffffefff
 8004e0c:	ffffdfff 	.word	0xffffdfff
 8004e10:	ffefffff 	.word	0xffefffff
 8004e14:	ff9fffff 	.word	0xff9fffff
 8004e18:	fff7ffff 	.word	0xfff7ffff

08004e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b092      	sub	sp, #72	; 0x48
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2284      	movs	r2, #132	; 0x84
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e2c:	f7fd f804 	bl	8001e38 <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d12c      	bne.n	8004e9c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e44:	2280      	movs	r2, #128	; 0x80
 8004e46:	0391      	lsls	r1, r2, #14
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	4a46      	ldr	r2, [pc, #280]	; (8004f64 <UART_CheckIdleState+0x148>)
 8004e4c:	9200      	str	r2, [sp, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f000 f88c 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 8004e54:	1e03      	subs	r3, r0, #0
 8004e56:	d021      	beq.n	8004e9c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e58:	f3ef 8310 	mrs	r3, PRIMASK
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e62:	2301      	movs	r3, #1
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	f383 8810 	msr	PRIMASK, r3
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2180      	movs	r1, #128	; 0x80
 8004e7a:	438a      	bics	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	f383 8810 	msr	PRIMASK, r3
}
 8004e88:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2278      	movs	r2, #120	; 0x78
 8004e94:	2100      	movs	r1, #0
 8004e96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e05f      	b.n	8004f5c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2204      	movs	r2, #4
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d146      	bne.n	8004f38 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	03d1      	lsls	r1, r2, #15
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <UART_CheckIdleState+0x148>)
 8004eb4:	9200      	str	r2, [sp, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f000 f858 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 8004ebc:	1e03      	subs	r3, r0, #0
 8004ebe:	d03b      	beq.n	8004f38 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eca:	2301      	movs	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4921      	ldr	r1, [pc, #132]	; (8004f68 <UART_CheckIdleState+0x14c>)
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ef8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
 8004efc:	2301      	movs	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2101      	movs	r1, #1
 8004f14:	438a      	bics	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2280      	movs	r2, #128	; 0x80
 8004f28:	2120      	movs	r1, #32
 8004f2a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2278      	movs	r2, #120	; 0x78
 8004f30:	2100      	movs	r1, #0
 8004f32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e011      	b.n	8004f5c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	2120      	movs	r1, #32
 8004f44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2278      	movs	r2, #120	; 0x78
 8004f56:	2100      	movs	r1, #0
 8004f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b010      	add	sp, #64	; 0x40
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	01ffffff 	.word	0x01ffffff
 8004f68:	fffffedf 	.word	0xfffffedf

08004f6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	e04b      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	3301      	adds	r3, #1
 8004f82:	d048      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f84:	f7fc ff58 	bl	8001e38 <HAL_GetTick>
 8004f88:	0002      	movs	r2, r0
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d302      	bcc.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e04b      	b.n	8005036 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d035      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d111      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 f83c 	bl	8005040 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2284      	movs	r2, #132	; 0x84
 8004fcc:	2108      	movs	r1, #8
 8004fce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2278      	movs	r2, #120	; 0x78
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e02c      	b.n	8005036 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	2380      	movs	r3, #128	; 0x80
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d112      	bne.n	8005016 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2280      	movs	r2, #128	; 0x80
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f000 f81f 	bl	8005040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2284      	movs	r2, #132	; 0x84
 8005006:	2120      	movs	r1, #32
 8005008:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2278      	movs	r2, #120	; 0x78
 800500e:	2100      	movs	r1, #0
 8005010:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e00f      	b.n	8005036 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	425a      	negs	r2, r3
 8005026:	4153      	adcs	r3, r2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	001a      	movs	r2, r3
 800502c:	1dfb      	adds	r3, r7, #7
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d0a4      	beq.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b004      	add	sp, #16
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	; 0x38
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005048:	f3ef 8310 	mrs	r3, PRIMASK
 800504c:	617b      	str	r3, [r7, #20]
  return(result);
 800504e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
 8005052:	2301      	movs	r3, #1
 8005054:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f383 8810 	msr	PRIMASK, r3
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4926      	ldr	r1, [pc, #152]	; (8005104 <UART_EndRxTransfer+0xc4>)
 800506a:	400a      	ands	r2, r1
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f383 8810 	msr	PRIMASK, r3
}
 8005078:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507a:	f3ef 8310 	mrs	r3, PRIMASK
 800507e:	623b      	str	r3, [r7, #32]
  return(result);
 8005080:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	633b      	str	r3, [r7, #48]	; 0x30
 8005084:	2301      	movs	r3, #1
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2101      	movs	r1, #1
 800509c:	438a      	bics	r2, r1
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	f383 8810 	msr	PRIMASK, r3
}
 80050aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d118      	bne.n	80050e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050be:	2301      	movs	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2110      	movs	r1, #16
 80050d6:	438a      	bics	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2280      	movs	r2, #128	; 0x80
 80050ea:	2120      	movs	r1, #32
 80050ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b00e      	add	sp, #56	; 0x38
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	fffffedf 	.word	0xfffffedf

08005108 <findslot>:
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <findslot+0x2c>)
 800510a:	b510      	push	{r4, lr}
 800510c:	0004      	movs	r4, r0
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	2800      	cmp	r0, #0
 8005112:	d004      	beq.n	800511e <findslot+0x16>
 8005114:	6a03      	ldr	r3, [r0, #32]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <findslot+0x16>
 800511a:	f000 fbb1 	bl	8005880 <__sinit>
 800511e:	2000      	movs	r0, #0
 8005120:	2c13      	cmp	r4, #19
 8005122:	d805      	bhi.n	8005130 <findslot+0x28>
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <findslot+0x30>)
 8005126:	00e4      	lsls	r4, r4, #3
 8005128:	58e2      	ldr	r2, [r4, r3]
 800512a:	3201      	adds	r2, #1
 800512c:	d000      	beq.n	8005130 <findslot+0x28>
 800512e:	18e0      	adds	r0, r4, r3
 8005130:	bd10      	pop	{r4, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	2000006c 	.word	0x2000006c
 8005138:	20000434 	.word	0x20000434

0800513c <error>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	0004      	movs	r4, r0
 8005140:	f000 fc86 	bl	8005a50 <__errno>
 8005144:	2613      	movs	r6, #19
 8005146:	0005      	movs	r5, r0
 8005148:	2700      	movs	r7, #0
 800514a:	1c30      	adds	r0, r6, #0
 800514c:	1c39      	adds	r1, r7, #0
 800514e:	beab      	bkpt	0x00ab
 8005150:	1c06      	adds	r6, r0, #0
 8005152:	602e      	str	r6, [r5, #0]
 8005154:	0020      	movs	r0, r4
 8005156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005158 <checkerror>:
 8005158:	b510      	push	{r4, lr}
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	d101      	bne.n	8005162 <checkerror+0xa>
 800515e:	f7ff ffed 	bl	800513c <error>
 8005162:	bd10      	pop	{r4, pc}

08005164 <_swiread>:
 8005164:	b530      	push	{r4, r5, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	ad01      	add	r5, sp, #4
 800516a:	9001      	str	r0, [sp, #4]
 800516c:	9102      	str	r1, [sp, #8]
 800516e:	9203      	str	r2, [sp, #12]
 8005170:	2406      	movs	r4, #6
 8005172:	1c20      	adds	r0, r4, #0
 8005174:	1c29      	adds	r1, r5, #0
 8005176:	beab      	bkpt	0x00ab
 8005178:	1c04      	adds	r4, r0, #0
 800517a:	0020      	movs	r0, r4
 800517c:	f7ff ffec 	bl	8005158 <checkerror>
 8005180:	b005      	add	sp, #20
 8005182:	bd30      	pop	{r4, r5, pc}

08005184 <_read>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	000e      	movs	r6, r1
 8005188:	0015      	movs	r5, r2
 800518a:	f7ff ffbd 	bl	8005108 <findslot>
 800518e:	1e04      	subs	r4, r0, #0
 8005190:	d106      	bne.n	80051a0 <_read+0x1c>
 8005192:	f000 fc5d 	bl	8005a50 <__errno>
 8005196:	2309      	movs	r3, #9
 8005198:	6003      	str	r3, [r0, #0]
 800519a:	2001      	movs	r0, #1
 800519c:	4240      	negs	r0, r0
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	002a      	movs	r2, r5
 80051a2:	0031      	movs	r1, r6
 80051a4:	6800      	ldr	r0, [r0, #0]
 80051a6:	f7ff ffdd 	bl	8005164 <_swiread>
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	d0f7      	beq.n	800519e <_read+0x1a>
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	1a28      	subs	r0, r5, r0
 80051b2:	181b      	adds	r3, r3, r0
 80051b4:	6063      	str	r3, [r4, #4]
 80051b6:	e7f2      	b.n	800519e <_read+0x1a>

080051b8 <_swilseek>:
 80051b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ba:	000c      	movs	r4, r1
 80051bc:	0016      	movs	r6, r2
 80051be:	f7ff ffa3 	bl	8005108 <findslot>
 80051c2:	1e05      	subs	r5, r0, #0
 80051c4:	d107      	bne.n	80051d6 <_swilseek+0x1e>
 80051c6:	f000 fc43 	bl	8005a50 <__errno>
 80051ca:	2309      	movs	r3, #9
 80051cc:	6003      	str	r3, [r0, #0]
 80051ce:	2401      	movs	r4, #1
 80051d0:	4264      	negs	r4, r4
 80051d2:	0020      	movs	r0, r4
 80051d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051d6:	2e02      	cmp	r6, #2
 80051d8:	d903      	bls.n	80051e2 <_swilseek+0x2a>
 80051da:	f000 fc39 	bl	8005a50 <__errno>
 80051de:	2316      	movs	r3, #22
 80051e0:	e7f4      	b.n	80051cc <_swilseek+0x14>
 80051e2:	2e01      	cmp	r6, #1
 80051e4:	d112      	bne.n	800520c <_swilseek+0x54>
 80051e6:	6843      	ldr	r3, [r0, #4]
 80051e8:	18e4      	adds	r4, r4, r3
 80051ea:	d4f6      	bmi.n	80051da <_swilseek+0x22>
 80051ec:	466f      	mov	r7, sp
 80051ee:	682b      	ldr	r3, [r5, #0]
 80051f0:	260a      	movs	r6, #10
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	607c      	str	r4, [r7, #4]
 80051f6:	1c30      	adds	r0, r6, #0
 80051f8:	1c39      	adds	r1, r7, #0
 80051fa:	beab      	bkpt	0x00ab
 80051fc:	1c06      	adds	r6, r0, #0
 80051fe:	0030      	movs	r0, r6
 8005200:	f7ff ffaa 	bl	8005158 <checkerror>
 8005204:	2800      	cmp	r0, #0
 8005206:	dbe2      	blt.n	80051ce <_swilseek+0x16>
 8005208:	606c      	str	r4, [r5, #4]
 800520a:	e7e2      	b.n	80051d2 <_swilseek+0x1a>
 800520c:	6803      	ldr	r3, [r0, #0]
 800520e:	2e02      	cmp	r6, #2
 8005210:	d1ec      	bne.n	80051ec <_swilseek+0x34>
 8005212:	466f      	mov	r7, sp
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	360a      	adds	r6, #10
 8005218:	1c30      	adds	r0, r6, #0
 800521a:	1c39      	adds	r1, r7, #0
 800521c:	beab      	bkpt	0x00ab
 800521e:	1c06      	adds	r6, r0, #0
 8005220:	0030      	movs	r0, r6
 8005222:	f7ff ff99 	bl	8005158 <checkerror>
 8005226:	1824      	adds	r4, r4, r0
 8005228:	3001      	adds	r0, #1
 800522a:	d1df      	bne.n	80051ec <_swilseek+0x34>
 800522c:	e7cf      	b.n	80051ce <_swilseek+0x16>

0800522e <_lseek>:
 800522e:	b510      	push	{r4, lr}
 8005230:	f7ff ffc2 	bl	80051b8 <_swilseek>
 8005234:	bd10      	pop	{r4, pc}

08005236 <_swiwrite>:
 8005236:	b530      	push	{r4, r5, lr}
 8005238:	b085      	sub	sp, #20
 800523a:	ad01      	add	r5, sp, #4
 800523c:	9001      	str	r0, [sp, #4]
 800523e:	9102      	str	r1, [sp, #8]
 8005240:	9203      	str	r2, [sp, #12]
 8005242:	2405      	movs	r4, #5
 8005244:	1c20      	adds	r0, r4, #0
 8005246:	1c29      	adds	r1, r5, #0
 8005248:	beab      	bkpt	0x00ab
 800524a:	1c04      	adds	r4, r0, #0
 800524c:	0020      	movs	r0, r4
 800524e:	f7ff ff83 	bl	8005158 <checkerror>
 8005252:	b005      	add	sp, #20
 8005254:	bd30      	pop	{r4, r5, pc}

08005256 <_write>:
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	000e      	movs	r6, r1
 800525a:	0015      	movs	r5, r2
 800525c:	f7ff ff54 	bl	8005108 <findslot>
 8005260:	1e04      	subs	r4, r0, #0
 8005262:	d106      	bne.n	8005272 <_write+0x1c>
 8005264:	f000 fbf4 	bl	8005a50 <__errno>
 8005268:	2309      	movs	r3, #9
 800526a:	6003      	str	r3, [r0, #0]
 800526c:	2001      	movs	r0, #1
 800526e:	4240      	negs	r0, r0
 8005270:	e00f      	b.n	8005292 <_write+0x3c>
 8005272:	002a      	movs	r2, r5
 8005274:	0031      	movs	r1, r6
 8005276:	6800      	ldr	r0, [r0, #0]
 8005278:	f7ff ffdd 	bl	8005236 <_swiwrite>
 800527c:	1e03      	subs	r3, r0, #0
 800527e:	dbf5      	blt.n	800526c <_write+0x16>
 8005280:	6862      	ldr	r2, [r4, #4]
 8005282:	1a28      	subs	r0, r5, r0
 8005284:	1812      	adds	r2, r2, r0
 8005286:	6062      	str	r2, [r4, #4]
 8005288:	42ab      	cmp	r3, r5
 800528a:	d102      	bne.n	8005292 <_write+0x3c>
 800528c:	2000      	movs	r0, #0
 800528e:	f7ff ff55 	bl	800513c <error>
 8005292:	bd70      	pop	{r4, r5, r6, pc}

08005294 <_swiclose>:
 8005294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005296:	2402      	movs	r4, #2
 8005298:	9001      	str	r0, [sp, #4]
 800529a:	ad01      	add	r5, sp, #4
 800529c:	1c20      	adds	r0, r4, #0
 800529e:	1c29      	adds	r1, r5, #0
 80052a0:	beab      	bkpt	0x00ab
 80052a2:	1c04      	adds	r4, r0, #0
 80052a4:	0020      	movs	r0, r4
 80052a6:	f7ff ff57 	bl	8005158 <checkerror>
 80052aa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080052ac <_close>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	0005      	movs	r5, r0
 80052b0:	f7ff ff2a 	bl	8005108 <findslot>
 80052b4:	1e04      	subs	r4, r0, #0
 80052b6:	d106      	bne.n	80052c6 <_close+0x1a>
 80052b8:	f000 fbca 	bl	8005a50 <__errno>
 80052bc:	2309      	movs	r3, #9
 80052be:	6003      	str	r3, [r0, #0]
 80052c0:	2001      	movs	r0, #1
 80052c2:	4240      	negs	r0, r0
 80052c4:	bd70      	pop	{r4, r5, r6, pc}
 80052c6:	3d01      	subs	r5, #1
 80052c8:	2d01      	cmp	r5, #1
 80052ca:	d809      	bhi.n	80052e0 <_close+0x34>
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <_close+0x48>)
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d104      	bne.n	80052e0 <_close+0x34>
 80052d6:	2301      	movs	r3, #1
 80052d8:	425b      	negs	r3, r3
 80052da:	6003      	str	r3, [r0, #0]
 80052dc:	2000      	movs	r0, #0
 80052de:	e7f1      	b.n	80052c4 <_close+0x18>
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	f7ff ffd7 	bl	8005294 <_swiclose>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1ec      	bne.n	80052c4 <_close+0x18>
 80052ea:	2301      	movs	r3, #1
 80052ec:	425b      	negs	r3, r3
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	e7e8      	b.n	80052c4 <_close+0x18>
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	20000434 	.word	0x20000434

080052f8 <_swistat>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	000c      	movs	r4, r1
 80052fc:	f7ff ff04 	bl	8005108 <findslot>
 8005300:	1e05      	subs	r5, r0, #0
 8005302:	d106      	bne.n	8005312 <_swistat+0x1a>
 8005304:	f000 fba4 	bl	8005a50 <__errno>
 8005308:	2309      	movs	r3, #9
 800530a:	6003      	str	r3, [r0, #0]
 800530c:	2001      	movs	r0, #1
 800530e:	4240      	negs	r0, r0
 8005310:	bd70      	pop	{r4, r5, r6, pc}
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	6862      	ldr	r2, [r4, #4]
 8005316:	019b      	lsls	r3, r3, #6
 8005318:	4313      	orrs	r3, r2
 800531a:	6063      	str	r3, [r4, #4]
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	260c      	movs	r6, #12
 8005322:	64a3      	str	r3, [r4, #72]	; 0x48
 8005324:	1c30      	adds	r0, r6, #0
 8005326:	1c29      	adds	r1, r5, #0
 8005328:	beab      	bkpt	0x00ab
 800532a:	1c05      	adds	r5, r0, #0
 800532c:	0028      	movs	r0, r5
 800532e:	f7ff ff13 	bl	8005158 <checkerror>
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	d0ec      	beq.n	8005310 <_swistat+0x18>
 8005336:	6120      	str	r0, [r4, #16]
 8005338:	2000      	movs	r0, #0
 800533a:	e7e9      	b.n	8005310 <_swistat+0x18>

0800533c <_stat>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	000d      	movs	r5, r1
 8005340:	0004      	movs	r4, r0
 8005342:	2258      	movs	r2, #88	; 0x58
 8005344:	2100      	movs	r1, #0
 8005346:	0028      	movs	r0, r5
 8005348:	f000 fb1a 	bl	8005980 <memset>
 800534c:	0020      	movs	r0, r4
 800534e:	2100      	movs	r1, #0
 8005350:	f000 f812 	bl	8005378 <_swiopen>
 8005354:	0004      	movs	r4, r0
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d00c      	beq.n	8005374 <_stat+0x38>
 800535a:	2381      	movs	r3, #129	; 0x81
 800535c:	686a      	ldr	r2, [r5, #4]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	4313      	orrs	r3, r2
 8005362:	0029      	movs	r1, r5
 8005364:	606b      	str	r3, [r5, #4]
 8005366:	f7ff ffc7 	bl	80052f8 <_swistat>
 800536a:	0005      	movs	r5, r0
 800536c:	0020      	movs	r0, r4
 800536e:	f7ff ff9d 	bl	80052ac <_close>
 8005372:	002c      	movs	r4, r5
 8005374:	0020      	movs	r0, r4
 8005376:	bd70      	pop	{r4, r5, r6, pc}

08005378 <_swiopen>:
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	000d      	movs	r5, r1
 800537c:	2600      	movs	r6, #0
 800537e:	4b2b      	ldr	r3, [pc, #172]	; (800542c <_swiopen+0xb4>)
 8005380:	b09b      	sub	sp, #108	; 0x6c
 8005382:	9001      	str	r0, [sp, #4]
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	00f3      	lsls	r3, r6, #3
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	9b02      	ldr	r3, [sp, #8]
 800538c:	00f2      	lsls	r2, r6, #3
 800538e:	589c      	ldr	r4, [r3, r2]
 8005390:	1c63      	adds	r3, r4, #1
 8005392:	d036      	beq.n	8005402 <_swiopen+0x8a>
 8005394:	3601      	adds	r6, #1
 8005396:	2e14      	cmp	r6, #20
 8005398:	d1f5      	bne.n	8005386 <_swiopen+0xe>
 800539a:	f000 fb59 	bl	8005a50 <__errno>
 800539e:	2401      	movs	r4, #1
 80053a0:	2318      	movs	r3, #24
 80053a2:	4264      	negs	r4, r4
 80053a4:	6003      	str	r3, [r0, #0]
 80053a6:	e03d      	b.n	8005424 <_swiopen+0xac>
 80053a8:	2302      	movs	r3, #2
 80053aa:	03ec      	lsls	r4, r5, #15
 80053ac:	0fe4      	lsrs	r4, r4, #31
 80053ae:	421d      	tst	r5, r3
 80053b0:	d000      	beq.n	80053b4 <_swiopen+0x3c>
 80053b2:	431c      	orrs	r4, r3
 80053b4:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <_swiopen+0xb8>)
 80053b6:	421d      	tst	r5, r3
 80053b8:	d001      	beq.n	80053be <_swiopen+0x46>
 80053ba:	2304      	movs	r3, #4
 80053bc:	431c      	orrs	r4, r3
 80053be:	2308      	movs	r3, #8
 80053c0:	421d      	tst	r5, r3
 80053c2:	d002      	beq.n	80053ca <_swiopen+0x52>
 80053c4:	2204      	movs	r2, #4
 80053c6:	4394      	bics	r4, r2
 80053c8:	431c      	orrs	r4, r3
 80053ca:	9b01      	ldr	r3, [sp, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	f7fa fe9a 	bl	8000108 <strlen>
 80053d4:	607c      	str	r4, [r7, #4]
 80053d6:	60b8      	str	r0, [r7, #8]
 80053d8:	2401      	movs	r4, #1
 80053da:	1c20      	adds	r0, r4, #0
 80053dc:	1c39      	adds	r1, r7, #0
 80053de:	beab      	bkpt	0x00ab
 80053e0:	1c04      	adds	r4, r0, #0
 80053e2:	2c00      	cmp	r4, #0
 80053e4:	db08      	blt.n	80053f8 <_swiopen+0x80>
 80053e6:	00f2      	lsls	r2, r6, #3
 80053e8:	9b02      	ldr	r3, [sp, #8]
 80053ea:	4694      	mov	ip, r2
 80053ec:	509c      	str	r4, [r3, r2]
 80053ee:	2200      	movs	r2, #0
 80053f0:	4463      	add	r3, ip
 80053f2:	0034      	movs	r4, r6
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	e015      	b.n	8005424 <_swiopen+0xac>
 80053f8:	0020      	movs	r0, r4
 80053fa:	f7ff fe9f 	bl	800513c <error>
 80053fe:	0004      	movs	r4, r0
 8005400:	e010      	b.n	8005424 <_swiopen+0xac>
 8005402:	23a0      	movs	r3, #160	; 0xa0
 8005404:	002a      	movs	r2, r5
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	401a      	ands	r2, r3
 800540a:	af04      	add	r7, sp, #16
 800540c:	429a      	cmp	r2, r3
 800540e:	d1cb      	bne.n	80053a8 <_swiopen+0x30>
 8005410:	0039      	movs	r1, r7
 8005412:	9801      	ldr	r0, [sp, #4]
 8005414:	f7ff ff92 	bl	800533c <_stat>
 8005418:	3001      	adds	r0, #1
 800541a:	d0c5      	beq.n	80053a8 <_swiopen+0x30>
 800541c:	f000 fb18 	bl	8005a50 <__errno>
 8005420:	2311      	movs	r3, #17
 8005422:	6003      	str	r3, [r0, #0]
 8005424:	0020      	movs	r0, r4
 8005426:	b01b      	add	sp, #108	; 0x6c
 8005428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	20000434 	.word	0x20000434
 8005430:	00000601 	.word	0x00000601

08005434 <_get_semihosting_exts>:
 8005434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005436:	b085      	sub	sp, #20
 8005438:	9000      	str	r0, [sp, #0]
 800543a:	9101      	str	r1, [sp, #4]
 800543c:	4827      	ldr	r0, [pc, #156]	; (80054dc <_get_semihosting_exts+0xa8>)
 800543e:	2100      	movs	r1, #0
 8005440:	0015      	movs	r5, r2
 8005442:	f7ff ff99 	bl	8005378 <_swiopen>
 8005446:	0004      	movs	r4, r0
 8005448:	002a      	movs	r2, r5
 800544a:	2100      	movs	r1, #0
 800544c:	9800      	ldr	r0, [sp, #0]
 800544e:	f000 fa97 	bl	8005980 <memset>
 8005452:	1c63      	adds	r3, r4, #1
 8005454:	d015      	beq.n	8005482 <_get_semihosting_exts+0x4e>
 8005456:	0020      	movs	r0, r4
 8005458:	f7ff fe56 	bl	8005108 <findslot>
 800545c:	260c      	movs	r6, #12
 800545e:	0007      	movs	r7, r0
 8005460:	1c30      	adds	r0, r6, #0
 8005462:	1c39      	adds	r1, r7, #0
 8005464:	beab      	bkpt	0x00ab
 8005466:	1c06      	adds	r6, r0, #0
 8005468:	0030      	movs	r0, r6
 800546a:	f7ff fe75 	bl	8005158 <checkerror>
 800546e:	2803      	cmp	r0, #3
 8005470:	dd02      	ble.n	8005478 <_get_semihosting_exts+0x44>
 8005472:	3803      	subs	r0, #3
 8005474:	42a8      	cmp	r0, r5
 8005476:	dc07      	bgt.n	8005488 <_get_semihosting_exts+0x54>
 8005478:	0020      	movs	r0, r4
 800547a:	2401      	movs	r4, #1
 800547c:	f7ff ff16 	bl	80052ac <_close>
 8005480:	4264      	negs	r4, r4
 8005482:	0020      	movs	r0, r4
 8005484:	b005      	add	sp, #20
 8005486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005488:	ae03      	add	r6, sp, #12
 800548a:	2204      	movs	r2, #4
 800548c:	0031      	movs	r1, r6
 800548e:	0020      	movs	r0, r4
 8005490:	f7ff fe78 	bl	8005184 <_read>
 8005494:	2803      	cmp	r0, #3
 8005496:	ddef      	ble.n	8005478 <_get_semihosting_exts+0x44>
 8005498:	7833      	ldrb	r3, [r6, #0]
 800549a:	2b53      	cmp	r3, #83	; 0x53
 800549c:	d1ec      	bne.n	8005478 <_get_semihosting_exts+0x44>
 800549e:	7873      	ldrb	r3, [r6, #1]
 80054a0:	2b48      	cmp	r3, #72	; 0x48
 80054a2:	d1e9      	bne.n	8005478 <_get_semihosting_exts+0x44>
 80054a4:	78b3      	ldrb	r3, [r6, #2]
 80054a6:	2b46      	cmp	r3, #70	; 0x46
 80054a8:	d1e6      	bne.n	8005478 <_get_semihosting_exts+0x44>
 80054aa:	78f3      	ldrb	r3, [r6, #3]
 80054ac:	2b42      	cmp	r3, #66	; 0x42
 80054ae:	d1e3      	bne.n	8005478 <_get_semihosting_exts+0x44>
 80054b0:	2201      	movs	r2, #1
 80054b2:	0020      	movs	r0, r4
 80054b4:	9901      	ldr	r1, [sp, #4]
 80054b6:	f7ff fe7f 	bl	80051b8 <_swilseek>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	dbdc      	blt.n	8005478 <_get_semihosting_exts+0x44>
 80054be:	002a      	movs	r2, r5
 80054c0:	9900      	ldr	r1, [sp, #0]
 80054c2:	0020      	movs	r0, r4
 80054c4:	f7ff fe5e 	bl	8005184 <_read>
 80054c8:	0005      	movs	r5, r0
 80054ca:	0020      	movs	r0, r4
 80054cc:	f7ff feee 	bl	80052ac <_close>
 80054d0:	0028      	movs	r0, r5
 80054d2:	f7ff fe41 	bl	8005158 <checkerror>
 80054d6:	0004      	movs	r4, r0
 80054d8:	e7d3      	b.n	8005482 <_get_semihosting_exts+0x4e>
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	08005e00 	.word	0x08005e00

080054e0 <initialise_semihosting_exts>:
 80054e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054e2:	2401      	movs	r4, #1
 80054e4:	2100      	movs	r1, #0
 80054e6:	4e09      	ldr	r6, [pc, #36]	; (800550c <initialise_semihosting_exts+0x2c>)
 80054e8:	4d09      	ldr	r5, [pc, #36]	; (8005510 <initialise_semihosting_exts+0x30>)
 80054ea:	af01      	add	r7, sp, #4
 80054ec:	0022      	movs	r2, r4
 80054ee:	0038      	movs	r0, r7
 80054f0:	6031      	str	r1, [r6, #0]
 80054f2:	602c      	str	r4, [r5, #0]
 80054f4:	f7ff ff9e 	bl	8005434 <_get_semihosting_exts>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	dd05      	ble.n	8005508 <initialise_semihosting_exts+0x28>
 80054fc:	2202      	movs	r2, #2
 80054fe:	783b      	ldrb	r3, [r7, #0]
 8005500:	401c      	ands	r4, r3
 8005502:	4013      	ands	r3, r2
 8005504:	6034      	str	r4, [r6, #0]
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	2000000c 	.word	0x2000000c
 8005510:	20000010 	.word	0x20000010

08005514 <_has_ext_stdout_stderr>:
 8005514:	b510      	push	{r4, lr}
 8005516:	4c04      	ldr	r4, [pc, #16]	; (8005528 <_has_ext_stdout_stderr+0x14>)
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da01      	bge.n	8005522 <_has_ext_stdout_stderr+0xe>
 800551e:	f7ff ffdf 	bl	80054e0 <initialise_semihosting_exts>
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	bd10      	pop	{r4, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	20000010 	.word	0x20000010

0800552c <initialise_monitor_handles>:
 800552c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552e:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <initialise_monitor_handles+0xa4>)
 8005530:	b087      	sub	sp, #28
 8005532:	9303      	str	r3, [sp, #12]
 8005534:	2500      	movs	r5, #0
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	2303      	movs	r3, #3
 800553a:	ac03      	add	r4, sp, #12
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	2601      	movs	r6, #1
 8005540:	6065      	str	r5, [r4, #4]
 8005542:	1c30      	adds	r0, r6, #0
 8005544:	1c21      	adds	r1, r4, #0
 8005546:	beab      	bkpt	0x00ab
 8005548:	1c06      	adds	r6, r0, #0
 800554a:	2101      	movs	r1, #1
 800554c:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <initialise_monitor_handles+0xa8>)
 800554e:	4249      	negs	r1, r1
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	601e      	str	r6, [r3, #0]
 8005554:	002b      	movs	r3, r5
 8005556:	4d20      	ldr	r5, [pc, #128]	; (80055d8 <initialise_monitor_handles+0xac>)
 8005558:	00da      	lsls	r2, r3, #3
 800555a:	3301      	adds	r3, #1
 800555c:	50a9      	str	r1, [r5, r2]
 800555e:	2b14      	cmp	r3, #20
 8005560:	d1fa      	bne.n	8005558 <initialise_monitor_handles+0x2c>
 8005562:	f7ff ffd7 	bl	8005514 <_has_ext_stdout_stderr>
 8005566:	2800      	cmp	r0, #0
 8005568:	d018      	beq.n	800559c <initialise_monitor_handles+0x70>
 800556a:	9b00      	ldr	r3, [sp, #0]
 800556c:	2601      	movs	r6, #1
 800556e:	9303      	str	r3, [sp, #12]
 8005570:	2303      	movs	r3, #3
 8005572:	60a3      	str	r3, [r4, #8]
 8005574:	3301      	adds	r3, #1
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	1c30      	adds	r0, r6, #0
 800557a:	1c21      	adds	r1, r4, #0
 800557c:	beab      	bkpt	0x00ab
 800557e:	1c07      	adds	r7, r0, #0
 8005580:	4b16      	ldr	r3, [pc, #88]	; (80055dc <initialise_monitor_handles+0xb0>)
 8005582:	9a00      	ldr	r2, [sp, #0]
 8005584:	601f      	str	r7, [r3, #0]
 8005586:	2303      	movs	r3, #3
 8005588:	9203      	str	r2, [sp, #12]
 800558a:	60a3      	str	r3, [r4, #8]
 800558c:	3305      	adds	r3, #5
 800558e:	6063      	str	r3, [r4, #4]
 8005590:	1c30      	adds	r0, r6, #0
 8005592:	1c21      	adds	r1, r4, #0
 8005594:	beab      	bkpt	0x00ab
 8005596:	1c06      	adds	r6, r0, #0
 8005598:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <initialise_monitor_handles+0xb4>)
 800559a:	601e      	str	r6, [r3, #0]
 800559c:	4e10      	ldr	r6, [pc, #64]	; (80055e0 <initialise_monitor_handles+0xb4>)
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	d102      	bne.n	80055aa <initialise_monitor_handles+0x7e>
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <initialise_monitor_handles+0xb0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	2400      	movs	r4, #0
 80055ac:	9b01      	ldr	r3, [sp, #4]
 80055ae:	606c      	str	r4, [r5, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7ff ffae 	bl	8005514 <_has_ext_stdout_stderr>
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d006      	beq.n	80055ca <initialise_monitor_handles+0x9e>
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <initialise_monitor_handles+0xb0>)
 80055be:	60ec      	str	r4, [r5, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	616c      	str	r4, [r5, #20]
 80055c4:	60ab      	str	r3, [r5, #8]
 80055c6:	6833      	ldr	r3, [r6, #0]
 80055c8:	612b      	str	r3, [r5, #16]
 80055ca:	b007      	add	sp, #28
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	08005e16 	.word	0x08005e16
 80055d4:	2000042c 	.word	0x2000042c
 80055d8:	20000434 	.word	0x20000434
 80055dc:	20000430 	.word	0x20000430
 80055e0:	20000428 	.word	0x20000428

080055e4 <malloc>:
 80055e4:	b510      	push	{r4, lr}
 80055e6:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <malloc+0x10>)
 80055e8:	0001      	movs	r1, r0
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	f000 f826 	bl	800563c <_malloc_r>
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	2000006c 	.word	0x2000006c

080055f8 <sbrk_aligned>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4e0f      	ldr	r6, [pc, #60]	; (8005638 <sbrk_aligned+0x40>)
 80055fc:	000d      	movs	r5, r1
 80055fe:	6831      	ldr	r1, [r6, #0]
 8005600:	0004      	movs	r4, r0
 8005602:	2900      	cmp	r1, #0
 8005604:	d102      	bne.n	800560c <sbrk_aligned+0x14>
 8005606:	f000 f9fd 	bl	8005a04 <_sbrk_r>
 800560a:	6030      	str	r0, [r6, #0]
 800560c:	0029      	movs	r1, r5
 800560e:	0020      	movs	r0, r4
 8005610:	f000 f9f8 	bl	8005a04 <_sbrk_r>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d00a      	beq.n	800562e <sbrk_aligned+0x36>
 8005618:	2303      	movs	r3, #3
 800561a:	1cc5      	adds	r5, r0, #3
 800561c:	439d      	bics	r5, r3
 800561e:	42a8      	cmp	r0, r5
 8005620:	d007      	beq.n	8005632 <sbrk_aligned+0x3a>
 8005622:	1a29      	subs	r1, r5, r0
 8005624:	0020      	movs	r0, r4
 8005626:	f000 f9ed 	bl	8005a04 <_sbrk_r>
 800562a:	3001      	adds	r0, #1
 800562c:	d101      	bne.n	8005632 <sbrk_aligned+0x3a>
 800562e:	2501      	movs	r5, #1
 8005630:	426d      	negs	r5, r5
 8005632:	0028      	movs	r0, r5
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	200004d8 	.word	0x200004d8

0800563c <_malloc_r>:
 800563c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800563e:	2203      	movs	r2, #3
 8005640:	1ccb      	adds	r3, r1, #3
 8005642:	4393      	bics	r3, r2
 8005644:	3308      	adds	r3, #8
 8005646:	0006      	movs	r6, r0
 8005648:	001f      	movs	r7, r3
 800564a:	2b0c      	cmp	r3, #12
 800564c:	d238      	bcs.n	80056c0 <_malloc_r+0x84>
 800564e:	270c      	movs	r7, #12
 8005650:	42b9      	cmp	r1, r7
 8005652:	d837      	bhi.n	80056c4 <_malloc_r+0x88>
 8005654:	0030      	movs	r0, r6
 8005656:	f000 f873 	bl	8005740 <__malloc_lock>
 800565a:	4b38      	ldr	r3, [pc, #224]	; (800573c <_malloc_r+0x100>)
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	001c      	movs	r4, r3
 8005662:	2c00      	cmp	r4, #0
 8005664:	d133      	bne.n	80056ce <_malloc_r+0x92>
 8005666:	0039      	movs	r1, r7
 8005668:	0030      	movs	r0, r6
 800566a:	f7ff ffc5 	bl	80055f8 <sbrk_aligned>
 800566e:	0004      	movs	r4, r0
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d15e      	bne.n	8005732 <_malloc_r+0xf6>
 8005674:	9b00      	ldr	r3, [sp, #0]
 8005676:	681c      	ldr	r4, [r3, #0]
 8005678:	0025      	movs	r5, r4
 800567a:	2d00      	cmp	r5, #0
 800567c:	d14e      	bne.n	800571c <_malloc_r+0xe0>
 800567e:	2c00      	cmp	r4, #0
 8005680:	d051      	beq.n	8005726 <_malloc_r+0xea>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	0029      	movs	r1, r5
 8005686:	18e3      	adds	r3, r4, r3
 8005688:	0030      	movs	r0, r6
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	f000 f9ba 	bl	8005a04 <_sbrk_r>
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	4283      	cmp	r3, r0
 8005694:	d147      	bne.n	8005726 <_malloc_r+0xea>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	0030      	movs	r0, r6
 800569a:	1aff      	subs	r7, r7, r3
 800569c:	0039      	movs	r1, r7
 800569e:	f7ff ffab 	bl	80055f8 <sbrk_aligned>
 80056a2:	3001      	adds	r0, #1
 80056a4:	d03f      	beq.n	8005726 <_malloc_r+0xea>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	19db      	adds	r3, r3, r7
 80056aa:	6023      	str	r3, [r4, #0]
 80056ac:	9b00      	ldr	r3, [sp, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d040      	beq.n	8005736 <_malloc_r+0xfa>
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	42a2      	cmp	r2, r4
 80056b8:	d133      	bne.n	8005722 <_malloc_r+0xe6>
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	e014      	b.n	80056ea <_malloc_r+0xae>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	dac5      	bge.n	8005650 <_malloc_r+0x14>
 80056c4:	230c      	movs	r3, #12
 80056c6:	2500      	movs	r5, #0
 80056c8:	6033      	str	r3, [r6, #0]
 80056ca:	0028      	movs	r0, r5
 80056cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056ce:	6821      	ldr	r1, [r4, #0]
 80056d0:	1bc9      	subs	r1, r1, r7
 80056d2:	d420      	bmi.n	8005716 <_malloc_r+0xda>
 80056d4:	290b      	cmp	r1, #11
 80056d6:	d918      	bls.n	800570a <_malloc_r+0xce>
 80056d8:	19e2      	adds	r2, r4, r7
 80056da:	6027      	str	r7, [r4, #0]
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d112      	bne.n	8005706 <_malloc_r+0xca>
 80056e0:	9b00      	ldr	r3, [sp, #0]
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	6011      	str	r1, [r2, #0]
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	0030      	movs	r0, r6
 80056ec:	0025      	movs	r5, r4
 80056ee:	f000 f82f 	bl	8005750 <__malloc_unlock>
 80056f2:	2207      	movs	r2, #7
 80056f4:	350b      	adds	r5, #11
 80056f6:	1d23      	adds	r3, r4, #4
 80056f8:	4395      	bics	r5, r2
 80056fa:	1aea      	subs	r2, r5, r3
 80056fc:	429d      	cmp	r5, r3
 80056fe:	d0e4      	beq.n	80056ca <_malloc_r+0x8e>
 8005700:	1b5b      	subs	r3, r3, r5
 8005702:	50a3      	str	r3, [r4, r2]
 8005704:	e7e1      	b.n	80056ca <_malloc_r+0x8e>
 8005706:	605a      	str	r2, [r3, #4]
 8005708:	e7ec      	b.n	80056e4 <_malloc_r+0xa8>
 800570a:	6862      	ldr	r2, [r4, #4]
 800570c:	42a3      	cmp	r3, r4
 800570e:	d1d5      	bne.n	80056bc <_malloc_r+0x80>
 8005710:	9b00      	ldr	r3, [sp, #0]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e7e9      	b.n	80056ea <_malloc_r+0xae>
 8005716:	0023      	movs	r3, r4
 8005718:	6864      	ldr	r4, [r4, #4]
 800571a:	e7a2      	b.n	8005662 <_malloc_r+0x26>
 800571c:	002c      	movs	r4, r5
 800571e:	686d      	ldr	r5, [r5, #4]
 8005720:	e7ab      	b.n	800567a <_malloc_r+0x3e>
 8005722:	0013      	movs	r3, r2
 8005724:	e7c4      	b.n	80056b0 <_malloc_r+0x74>
 8005726:	230c      	movs	r3, #12
 8005728:	0030      	movs	r0, r6
 800572a:	6033      	str	r3, [r6, #0]
 800572c:	f000 f810 	bl	8005750 <__malloc_unlock>
 8005730:	e7cb      	b.n	80056ca <_malloc_r+0x8e>
 8005732:	6027      	str	r7, [r4, #0]
 8005734:	e7d9      	b.n	80056ea <_malloc_r+0xae>
 8005736:	605b      	str	r3, [r3, #4]
 8005738:	deff      	udf	#255	; 0xff
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	200004d4 	.word	0x200004d4

08005740 <__malloc_lock>:
 8005740:	b510      	push	{r4, lr}
 8005742:	4802      	ldr	r0, [pc, #8]	; (800574c <__malloc_lock+0xc>)
 8005744:	f000 f9af 	bl	8005aa6 <__retarget_lock_acquire_recursive>
 8005748:	bd10      	pop	{r4, pc}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	2000061c 	.word	0x2000061c

08005750 <__malloc_unlock>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4802      	ldr	r0, [pc, #8]	; (800575c <__malloc_unlock+0xc>)
 8005754:	f000 f9a8 	bl	8005aa8 <__retarget_lock_release_recursive>
 8005758:	bd10      	pop	{r4, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	2000061c 	.word	0x2000061c

08005760 <std>:
 8005760:	2300      	movs	r3, #0
 8005762:	b510      	push	{r4, lr}
 8005764:	0004      	movs	r4, r0
 8005766:	6003      	str	r3, [r0, #0]
 8005768:	6043      	str	r3, [r0, #4]
 800576a:	6083      	str	r3, [r0, #8]
 800576c:	8181      	strh	r1, [r0, #12]
 800576e:	6643      	str	r3, [r0, #100]	; 0x64
 8005770:	81c2      	strh	r2, [r0, #14]
 8005772:	6103      	str	r3, [r0, #16]
 8005774:	6143      	str	r3, [r0, #20]
 8005776:	6183      	str	r3, [r0, #24]
 8005778:	0019      	movs	r1, r3
 800577a:	2208      	movs	r2, #8
 800577c:	305c      	adds	r0, #92	; 0x5c
 800577e:	f000 f8ff 	bl	8005980 <memset>
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <std+0x50>)
 8005784:	6224      	str	r4, [r4, #32]
 8005786:	6263      	str	r3, [r4, #36]	; 0x24
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <std+0x54>)
 800578a:	62a3      	str	r3, [r4, #40]	; 0x28
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <std+0x58>)
 800578e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <std+0x5c>)
 8005792:	6323      	str	r3, [r4, #48]	; 0x30
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <std+0x60>)
 8005796:	429c      	cmp	r4, r3
 8005798:	d005      	beq.n	80057a6 <std+0x46>
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <std+0x64>)
 800579c:	429c      	cmp	r4, r3
 800579e:	d002      	beq.n	80057a6 <std+0x46>
 80057a0:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <std+0x68>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d103      	bne.n	80057ae <std+0x4e>
 80057a6:	0020      	movs	r0, r4
 80057a8:	3058      	adds	r0, #88	; 0x58
 80057aa:	f000 f97b 	bl	8005aa4 <__retarget_lock_init_recursive>
 80057ae:	bd10      	pop	{r4, pc}
 80057b0:	080058e9 	.word	0x080058e9
 80057b4:	08005911 	.word	0x08005911
 80057b8:	08005949 	.word	0x08005949
 80057bc:	08005975 	.word	0x08005975
 80057c0:	200004dc 	.word	0x200004dc
 80057c4:	20000544 	.word	0x20000544
 80057c8:	200005ac 	.word	0x200005ac

080057cc <stdio_exit_handler>:
 80057cc:	b510      	push	{r4, lr}
 80057ce:	4a03      	ldr	r2, [pc, #12]	; (80057dc <stdio_exit_handler+0x10>)
 80057d0:	4903      	ldr	r1, [pc, #12]	; (80057e0 <stdio_exit_handler+0x14>)
 80057d2:	4804      	ldr	r0, [pc, #16]	; (80057e4 <stdio_exit_handler+0x18>)
 80057d4:	f000 f86c 	bl	80058b0 <_fwalk_sglue>
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	20000014 	.word	0x20000014
 80057e0:	08005c65 	.word	0x08005c65
 80057e4:	20000020 	.word	0x20000020

080057e8 <cleanup_stdio>:
 80057e8:	6841      	ldr	r1, [r0, #4]
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <cleanup_stdio+0x30>)
 80057ec:	b510      	push	{r4, lr}
 80057ee:	0004      	movs	r4, r0
 80057f0:	4299      	cmp	r1, r3
 80057f2:	d001      	beq.n	80057f8 <cleanup_stdio+0x10>
 80057f4:	f000 fa36 	bl	8005c64 <_fflush_r>
 80057f8:	68a1      	ldr	r1, [r4, #8]
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <cleanup_stdio+0x34>)
 80057fc:	4299      	cmp	r1, r3
 80057fe:	d002      	beq.n	8005806 <cleanup_stdio+0x1e>
 8005800:	0020      	movs	r0, r4
 8005802:	f000 fa2f 	bl	8005c64 <_fflush_r>
 8005806:	68e1      	ldr	r1, [r4, #12]
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <cleanup_stdio+0x38>)
 800580a:	4299      	cmp	r1, r3
 800580c:	d002      	beq.n	8005814 <cleanup_stdio+0x2c>
 800580e:	0020      	movs	r0, r4
 8005810:	f000 fa28 	bl	8005c64 <_fflush_r>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	200004dc 	.word	0x200004dc
 800581c:	20000544 	.word	0x20000544
 8005820:	200005ac 	.word	0x200005ac

08005824 <global_stdio_init.part.0>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <global_stdio_init.part.0+0x28>)
 8005828:	4a09      	ldr	r2, [pc, #36]	; (8005850 <global_stdio_init.part.0+0x2c>)
 800582a:	2104      	movs	r1, #4
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	4809      	ldr	r0, [pc, #36]	; (8005854 <global_stdio_init.part.0+0x30>)
 8005830:	2200      	movs	r2, #0
 8005832:	f7ff ff95 	bl	8005760 <std>
 8005836:	2201      	movs	r2, #1
 8005838:	2109      	movs	r1, #9
 800583a:	4807      	ldr	r0, [pc, #28]	; (8005858 <global_stdio_init.part.0+0x34>)
 800583c:	f7ff ff90 	bl	8005760 <std>
 8005840:	2202      	movs	r2, #2
 8005842:	2112      	movs	r1, #18
 8005844:	4805      	ldr	r0, [pc, #20]	; (800585c <global_stdio_init.part.0+0x38>)
 8005846:	f7ff ff8b 	bl	8005760 <std>
 800584a:	bd10      	pop	{r4, pc}
 800584c:	20000614 	.word	0x20000614
 8005850:	080057cd 	.word	0x080057cd
 8005854:	200004dc 	.word	0x200004dc
 8005858:	20000544 	.word	0x20000544
 800585c:	200005ac 	.word	0x200005ac

08005860 <__sfp_lock_acquire>:
 8005860:	b510      	push	{r4, lr}
 8005862:	4802      	ldr	r0, [pc, #8]	; (800586c <__sfp_lock_acquire+0xc>)
 8005864:	f000 f91f 	bl	8005aa6 <__retarget_lock_acquire_recursive>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	2000061d 	.word	0x2000061d

08005870 <__sfp_lock_release>:
 8005870:	b510      	push	{r4, lr}
 8005872:	4802      	ldr	r0, [pc, #8]	; (800587c <__sfp_lock_release+0xc>)
 8005874:	f000 f918 	bl	8005aa8 <__retarget_lock_release_recursive>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	2000061d 	.word	0x2000061d

08005880 <__sinit>:
 8005880:	b510      	push	{r4, lr}
 8005882:	0004      	movs	r4, r0
 8005884:	f7ff ffec 	bl	8005860 <__sfp_lock_acquire>
 8005888:	6a23      	ldr	r3, [r4, #32]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <__sinit+0x14>
 800588e:	f7ff ffef 	bl	8005870 <__sfp_lock_release>
 8005892:	bd10      	pop	{r4, pc}
 8005894:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <__sinit+0x28>)
 8005896:	6223      	str	r3, [r4, #32]
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <__sinit+0x2c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f6      	bne.n	800588e <__sinit+0xe>
 80058a0:	f7ff ffc0 	bl	8005824 <global_stdio_init.part.0>
 80058a4:	e7f3      	b.n	800588e <__sinit+0xe>
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	080057e9 	.word	0x080057e9
 80058ac:	20000614 	.word	0x20000614

080058b0 <_fwalk_sglue>:
 80058b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b2:	0014      	movs	r4, r2
 80058b4:	2600      	movs	r6, #0
 80058b6:	9000      	str	r0, [sp, #0]
 80058b8:	9101      	str	r1, [sp, #4]
 80058ba:	68a5      	ldr	r5, [r4, #8]
 80058bc:	6867      	ldr	r7, [r4, #4]
 80058be:	3f01      	subs	r7, #1
 80058c0:	d504      	bpl.n	80058cc <_fwalk_sglue+0x1c>
 80058c2:	6824      	ldr	r4, [r4, #0]
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d1f8      	bne.n	80058ba <_fwalk_sglue+0xa>
 80058c8:	0030      	movs	r0, r6
 80058ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058cc:	89ab      	ldrh	r3, [r5, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d908      	bls.n	80058e4 <_fwalk_sglue+0x34>
 80058d2:	220e      	movs	r2, #14
 80058d4:	5eab      	ldrsh	r3, [r5, r2]
 80058d6:	3301      	adds	r3, #1
 80058d8:	d004      	beq.n	80058e4 <_fwalk_sglue+0x34>
 80058da:	0029      	movs	r1, r5
 80058dc:	9800      	ldr	r0, [sp, #0]
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	4798      	blx	r3
 80058e2:	4306      	orrs	r6, r0
 80058e4:	3568      	adds	r5, #104	; 0x68
 80058e6:	e7ea      	b.n	80058be <_fwalk_sglue+0xe>

080058e8 <__sread>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	000c      	movs	r4, r1
 80058ec:	250e      	movs	r5, #14
 80058ee:	5f49      	ldrsh	r1, [r1, r5]
 80058f0:	f000 f874 	bl	80059dc <_read_r>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	db03      	blt.n	8005900 <__sread+0x18>
 80058f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058fa:	181b      	adds	r3, r3, r0
 80058fc:	6563      	str	r3, [r4, #84]	; 0x54
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	4a02      	ldr	r2, [pc, #8]	; (800590c <__sread+0x24>)
 8005904:	4013      	ands	r3, r2
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	e7f9      	b.n	80058fe <__sread+0x16>
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	ffffefff 	.word	0xffffefff

08005910 <__swrite>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	001f      	movs	r7, r3
 8005914:	898b      	ldrh	r3, [r1, #12]
 8005916:	0005      	movs	r5, r0
 8005918:	000c      	movs	r4, r1
 800591a:	0016      	movs	r6, r2
 800591c:	05db      	lsls	r3, r3, #23
 800591e:	d505      	bpl.n	800592c <__swrite+0x1c>
 8005920:	230e      	movs	r3, #14
 8005922:	5ec9      	ldrsh	r1, [r1, r3]
 8005924:	2200      	movs	r2, #0
 8005926:	2302      	movs	r3, #2
 8005928:	f000 f844 	bl	80059b4 <_lseek_r>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	4a05      	ldr	r2, [pc, #20]	; (8005944 <__swrite+0x34>)
 8005930:	0028      	movs	r0, r5
 8005932:	4013      	ands	r3, r2
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	0032      	movs	r2, r6
 8005938:	230e      	movs	r3, #14
 800593a:	5ee1      	ldrsh	r1, [r4, r3]
 800593c:	003b      	movs	r3, r7
 800593e:	f000 f873 	bl	8005a28 <_write_r>
 8005942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005944:	ffffefff 	.word	0xffffefff

08005948 <__sseek>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	000c      	movs	r4, r1
 800594c:	250e      	movs	r5, #14
 800594e:	5f49      	ldrsh	r1, [r1, r5]
 8005950:	f000 f830 	bl	80059b4 <_lseek_r>
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	1c42      	adds	r2, r0, #1
 8005958:	d103      	bne.n	8005962 <__sseek+0x1a>
 800595a:	4a05      	ldr	r2, [pc, #20]	; (8005970 <__sseek+0x28>)
 800595c:	4013      	ands	r3, r2
 800595e:	81a3      	strh	r3, [r4, #12]
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	0152      	lsls	r2, r2, #5
 8005966:	4313      	orrs	r3, r2
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	6560      	str	r0, [r4, #84]	; 0x54
 800596c:	e7f8      	b.n	8005960 <__sseek+0x18>
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	ffffefff 	.word	0xffffefff

08005974 <__sclose>:
 8005974:	b510      	push	{r4, lr}
 8005976:	230e      	movs	r3, #14
 8005978:	5ec9      	ldrsh	r1, [r1, r3]
 800597a:	f000 f809 	bl	8005990 <_close_r>
 800597e:	bd10      	pop	{r4, pc}

08005980 <memset>:
 8005980:	0003      	movs	r3, r0
 8005982:	1882      	adds	r2, r0, r2
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	7019      	strb	r1, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <_close_r>:
 8005990:	2300      	movs	r3, #0
 8005992:	b570      	push	{r4, r5, r6, lr}
 8005994:	4d06      	ldr	r5, [pc, #24]	; (80059b0 <_close_r+0x20>)
 8005996:	0004      	movs	r4, r0
 8005998:	0008      	movs	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f7ff fc86 	bl	80052ac <_close>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d103      	bne.n	80059ac <_close_r+0x1c>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d000      	beq.n	80059ac <_close_r+0x1c>
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	20000618 	.word	0x20000618

080059b4 <_lseek_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	0004      	movs	r4, r0
 80059b8:	0008      	movs	r0, r1
 80059ba:	0011      	movs	r1, r2
 80059bc:	001a      	movs	r2, r3
 80059be:	2300      	movs	r3, #0
 80059c0:	4d05      	ldr	r5, [pc, #20]	; (80059d8 <_lseek_r+0x24>)
 80059c2:	602b      	str	r3, [r5, #0]
 80059c4:	f7ff fc33 	bl	800522e <_lseek>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d103      	bne.n	80059d4 <_lseek_r+0x20>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d000      	beq.n	80059d4 <_lseek_r+0x20>
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	20000618 	.word	0x20000618

080059dc <_read_r>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	0004      	movs	r4, r0
 80059e0:	0008      	movs	r0, r1
 80059e2:	0011      	movs	r1, r2
 80059e4:	001a      	movs	r2, r3
 80059e6:	2300      	movs	r3, #0
 80059e8:	4d05      	ldr	r5, [pc, #20]	; (8005a00 <_read_r+0x24>)
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7ff fbca 	bl	8005184 <_read>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d103      	bne.n	80059fc <_read_r+0x20>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d000      	beq.n	80059fc <_read_r+0x20>
 80059fa:	6023      	str	r3, [r4, #0]
 80059fc:	bd70      	pop	{r4, r5, r6, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	20000618 	.word	0x20000618

08005a04 <_sbrk_r>:
 8005a04:	2300      	movs	r3, #0
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	4d06      	ldr	r5, [pc, #24]	; (8005a24 <_sbrk_r+0x20>)
 8005a0a:	0004      	movs	r4, r0
 8005a0c:	0008      	movs	r0, r1
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	f7fb fa5a 	bl	8000ec8 <_sbrk>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d103      	bne.n	8005a20 <_sbrk_r+0x1c>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d000      	beq.n	8005a20 <_sbrk_r+0x1c>
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	20000618 	.word	0x20000618

08005a28 <_write_r>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	0004      	movs	r4, r0
 8005a2c:	0008      	movs	r0, r1
 8005a2e:	0011      	movs	r1, r2
 8005a30:	001a      	movs	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	4d05      	ldr	r5, [pc, #20]	; (8005a4c <_write_r+0x24>)
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	f7ff fc0d 	bl	8005256 <_write>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d103      	bne.n	8005a48 <_write_r+0x20>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d000      	beq.n	8005a48 <_write_r+0x20>
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	bd70      	pop	{r4, r5, r6, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	20000618 	.word	0x20000618

08005a50 <__errno>:
 8005a50:	4b01      	ldr	r3, [pc, #4]	; (8005a58 <__errno+0x8>)
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	4770      	bx	lr
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	2000006c 	.word	0x2000006c

08005a5c <__libc_init_array>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	2600      	movs	r6, #0
 8005a60:	4c0c      	ldr	r4, [pc, #48]	; (8005a94 <__libc_init_array+0x38>)
 8005a62:	4d0d      	ldr	r5, [pc, #52]	; (8005a98 <__libc_init_array+0x3c>)
 8005a64:	1b64      	subs	r4, r4, r5
 8005a66:	10a4      	asrs	r4, r4, #2
 8005a68:	42a6      	cmp	r6, r4
 8005a6a:	d109      	bne.n	8005a80 <__libc_init_array+0x24>
 8005a6c:	2600      	movs	r6, #0
 8005a6e:	f000 f925 	bl	8005cbc <_init>
 8005a72:	4c0a      	ldr	r4, [pc, #40]	; (8005a9c <__libc_init_array+0x40>)
 8005a74:	4d0a      	ldr	r5, [pc, #40]	; (8005aa0 <__libc_init_array+0x44>)
 8005a76:	1b64      	subs	r4, r4, r5
 8005a78:	10a4      	asrs	r4, r4, #2
 8005a7a:	42a6      	cmp	r6, r4
 8005a7c:	d105      	bne.n	8005a8a <__libc_init_array+0x2e>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	00b3      	lsls	r3, r6, #2
 8005a82:	58eb      	ldr	r3, [r5, r3]
 8005a84:	4798      	blx	r3
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7ee      	b.n	8005a68 <__libc_init_array+0xc>
 8005a8a:	00b3      	lsls	r3, r6, #2
 8005a8c:	58eb      	ldr	r3, [r5, r3]
 8005a8e:	4798      	blx	r3
 8005a90:	3601      	adds	r6, #1
 8005a92:	e7f2      	b.n	8005a7a <__libc_init_array+0x1e>
 8005a94:	08005e24 	.word	0x08005e24
 8005a98:	08005e24 	.word	0x08005e24
 8005a9c:	08005e28 	.word	0x08005e28
 8005aa0:	08005e24 	.word	0x08005e24

08005aa4 <__retarget_lock_init_recursive>:
 8005aa4:	4770      	bx	lr

08005aa6 <__retarget_lock_acquire_recursive>:
 8005aa6:	4770      	bx	lr

08005aa8 <__retarget_lock_release_recursive>:
 8005aa8:	4770      	bx	lr

08005aaa <memcpy>:
 8005aaa:	2300      	movs	r3, #0
 8005aac:	b510      	push	{r4, lr}
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d100      	bne.n	8005ab4 <memcpy+0xa>
 8005ab2:	bd10      	pop	{r4, pc}
 8005ab4:	5ccc      	ldrb	r4, [r1, r3]
 8005ab6:	54c4      	strb	r4, [r0, r3]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	e7f8      	b.n	8005aae <memcpy+0x4>

08005abc <_free_r>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	0005      	movs	r5, r0
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d010      	beq.n	8005ae6 <_free_r+0x2a>
 8005ac4:	1f0c      	subs	r4, r1, #4
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da00      	bge.n	8005ace <_free_r+0x12>
 8005acc:	18e4      	adds	r4, r4, r3
 8005ace:	0028      	movs	r0, r5
 8005ad0:	f7ff fe36 	bl	8005740 <__malloc_lock>
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <_free_r+0x90>)
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <_free_r+0x2c>
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	6014      	str	r4, [r2, #0]
 8005ae0:	0028      	movs	r0, r5
 8005ae2:	f7ff fe35 	bl	8005750 <__malloc_unlock>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d908      	bls.n	8005afe <_free_r+0x42>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	1821      	adds	r1, r4, r0
 8005af0:	428b      	cmp	r3, r1
 8005af2:	d1f3      	bne.n	8005adc <_free_r+0x20>
 8005af4:	6819      	ldr	r1, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	1809      	adds	r1, r1, r0
 8005afa:	6021      	str	r1, [r4, #0]
 8005afc:	e7ee      	b.n	8005adc <_free_r+0x20>
 8005afe:	001a      	movs	r2, r3
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <_free_r+0x4e>
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	d9f9      	bls.n	8005afe <_free_r+0x42>
 8005b0a:	6811      	ldr	r1, [r2, #0]
 8005b0c:	1850      	adds	r0, r2, r1
 8005b0e:	42a0      	cmp	r0, r4
 8005b10:	d10b      	bne.n	8005b2a <_free_r+0x6e>
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	1809      	adds	r1, r1, r0
 8005b16:	1850      	adds	r0, r2, r1
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	4283      	cmp	r3, r0
 8005b1c:	d1e0      	bne.n	8005ae0 <_free_r+0x24>
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	1841      	adds	r1, r0, r1
 8005b24:	6011      	str	r1, [r2, #0]
 8005b26:	6053      	str	r3, [r2, #4]
 8005b28:	e7da      	b.n	8005ae0 <_free_r+0x24>
 8005b2a:	42a0      	cmp	r0, r4
 8005b2c:	d902      	bls.n	8005b34 <_free_r+0x78>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	e7d5      	b.n	8005ae0 <_free_r+0x24>
 8005b34:	6820      	ldr	r0, [r4, #0]
 8005b36:	1821      	adds	r1, r4, r0
 8005b38:	428b      	cmp	r3, r1
 8005b3a:	d103      	bne.n	8005b44 <_free_r+0x88>
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	1809      	adds	r1, r1, r0
 8005b42:	6021      	str	r1, [r4, #0]
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	6054      	str	r4, [r2, #4]
 8005b48:	e7ca      	b.n	8005ae0 <_free_r+0x24>
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	200004d4 	.word	0x200004d4

08005b50 <__sflush_r>:
 8005b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b52:	898b      	ldrh	r3, [r1, #12]
 8005b54:	0005      	movs	r5, r0
 8005b56:	000c      	movs	r4, r1
 8005b58:	071a      	lsls	r2, r3, #28
 8005b5a:	d45c      	bmi.n	8005c16 <__sflush_r+0xc6>
 8005b5c:	684a      	ldr	r2, [r1, #4]
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	dc04      	bgt.n	8005b6c <__sflush_r+0x1c>
 8005b62:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	dc01      	bgt.n	8005b6c <__sflush_r+0x1c>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	d0fa      	beq.n	8005b68 <__sflush_r+0x18>
 8005b72:	2200      	movs	r2, #0
 8005b74:	2080      	movs	r0, #128	; 0x80
 8005b76:	682e      	ldr	r6, [r5, #0]
 8005b78:	602a      	str	r2, [r5, #0]
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	0140      	lsls	r0, r0, #5
 8005b7e:	6a21      	ldr	r1, [r4, #32]
 8005b80:	4002      	ands	r2, r0
 8005b82:	4203      	tst	r3, r0
 8005b84:	d034      	beq.n	8005bf0 <__sflush_r+0xa0>
 8005b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	075b      	lsls	r3, r3, #29
 8005b8c:	d506      	bpl.n	8005b9c <__sflush_r+0x4c>
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	1ac0      	subs	r0, r0, r3
 8005b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <__sflush_r+0x4c>
 8005b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b9a:	1ac0      	subs	r0, r0, r3
 8005b9c:	0002      	movs	r2, r0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	0028      	movs	r0, r5
 8005ba2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005ba4:	6a21      	ldr	r1, [r4, #32]
 8005ba6:	47b8      	blx	r7
 8005ba8:	89a2      	ldrh	r2, [r4, #12]
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d106      	bne.n	8005bbc <__sflush_r+0x6c>
 8005bae:	6829      	ldr	r1, [r5, #0]
 8005bb0:	291d      	cmp	r1, #29
 8005bb2:	d82c      	bhi.n	8005c0e <__sflush_r+0xbe>
 8005bb4:	4b2a      	ldr	r3, [pc, #168]	; (8005c60 <__sflush_r+0x110>)
 8005bb6:	410b      	asrs	r3, r1
 8005bb8:	07db      	lsls	r3, r3, #31
 8005bba:	d428      	bmi.n	8005c0e <__sflush_r+0xbe>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	04d2      	lsls	r2, r2, #19
 8005bc6:	d505      	bpl.n	8005bd4 <__sflush_r+0x84>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <__sflush_r+0x82>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d100      	bne.n	8005bd4 <__sflush_r+0x84>
 8005bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8005bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd6:	602e      	str	r6, [r5, #0]
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	d0c5      	beq.n	8005b68 <__sflush_r+0x18>
 8005bdc:	0023      	movs	r3, r4
 8005bde:	3344      	adds	r3, #68	; 0x44
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d002      	beq.n	8005bea <__sflush_r+0x9a>
 8005be4:	0028      	movs	r0, r5
 8005be6:	f7ff ff69 	bl	8005abc <_free_r>
 8005bea:	2000      	movs	r0, #0
 8005bec:	6360      	str	r0, [r4, #52]	; 0x34
 8005bee:	e7bc      	b.n	8005b6a <__sflush_r+0x1a>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d1c6      	bne.n	8005b88 <__sflush_r+0x38>
 8005bfa:	682b      	ldr	r3, [r5, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0c3      	beq.n	8005b88 <__sflush_r+0x38>
 8005c00:	2b1d      	cmp	r3, #29
 8005c02:	d001      	beq.n	8005c08 <__sflush_r+0xb8>
 8005c04:	2b16      	cmp	r3, #22
 8005c06:	d101      	bne.n	8005c0c <__sflush_r+0xbc>
 8005c08:	602e      	str	r6, [r5, #0]
 8005c0a:	e7ad      	b.n	8005b68 <__sflush_r+0x18>
 8005c0c:	89a2      	ldrh	r2, [r4, #12]
 8005c0e:	2340      	movs	r3, #64	; 0x40
 8005c10:	4313      	orrs	r3, r2
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	e7a9      	b.n	8005b6a <__sflush_r+0x1a>
 8005c16:	690e      	ldr	r6, [r1, #16]
 8005c18:	2e00      	cmp	r6, #0
 8005c1a:	d0a5      	beq.n	8005b68 <__sflush_r+0x18>
 8005c1c:	680f      	ldr	r7, [r1, #0]
 8005c1e:	600e      	str	r6, [r1, #0]
 8005c20:	1bba      	subs	r2, r7, r6
 8005c22:	9201      	str	r2, [sp, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	079b      	lsls	r3, r3, #30
 8005c28:	d100      	bne.n	8005c2c <__sflush_r+0xdc>
 8005c2a:	694a      	ldr	r2, [r1, #20]
 8005c2c:	60a2      	str	r2, [r4, #8]
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dd99      	ble.n	8005b68 <__sflush_r+0x18>
 8005c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c36:	0032      	movs	r2, r6
 8005c38:	001f      	movs	r7, r3
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	9b01      	ldr	r3, [sp, #4]
 8005c3e:	6a21      	ldr	r1, [r4, #32]
 8005c40:	47b8      	blx	r7
 8005c42:	2800      	cmp	r0, #0
 8005c44:	dc06      	bgt.n	8005c54 <__sflush_r+0x104>
 8005c46:	2340      	movs	r3, #64	; 0x40
 8005c48:	2001      	movs	r0, #1
 8005c4a:	89a2      	ldrh	r2, [r4, #12]
 8005c4c:	4240      	negs	r0, r0
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	e78a      	b.n	8005b6a <__sflush_r+0x1a>
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	1836      	adds	r6, r6, r0
 8005c58:	1a1b      	subs	r3, r3, r0
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	e7e7      	b.n	8005c2e <__sflush_r+0xde>
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	dfbffffe 	.word	0xdfbffffe

08005c64 <_fflush_r>:
 8005c64:	690b      	ldr	r3, [r1, #16]
 8005c66:	b570      	push	{r4, r5, r6, lr}
 8005c68:	0005      	movs	r5, r0
 8005c6a:	000c      	movs	r4, r1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <_fflush_r+0x12>
 8005c70:	2500      	movs	r5, #0
 8005c72:	0028      	movs	r0, r5
 8005c74:	bd70      	pop	{r4, r5, r6, pc}
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d004      	beq.n	8005c84 <_fflush_r+0x20>
 8005c7a:	6a03      	ldr	r3, [r0, #32]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <_fflush_r+0x20>
 8005c80:	f7ff fdfe 	bl	8005880 <__sinit>
 8005c84:	220c      	movs	r2, #12
 8005c86:	5ea3      	ldrsh	r3, [r4, r2]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f1      	beq.n	8005c70 <_fflush_r+0xc>
 8005c8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c8e:	07d2      	lsls	r2, r2, #31
 8005c90:	d404      	bmi.n	8005c9c <_fflush_r+0x38>
 8005c92:	059b      	lsls	r3, r3, #22
 8005c94:	d402      	bmi.n	8005c9c <_fflush_r+0x38>
 8005c96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c98:	f7ff ff05 	bl	8005aa6 <__retarget_lock_acquire_recursive>
 8005c9c:	0028      	movs	r0, r5
 8005c9e:	0021      	movs	r1, r4
 8005ca0:	f7ff ff56 	bl	8005b50 <__sflush_r>
 8005ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ca6:	0005      	movs	r5, r0
 8005ca8:	07db      	lsls	r3, r3, #31
 8005caa:	d4e2      	bmi.n	8005c72 <_fflush_r+0xe>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	059b      	lsls	r3, r3, #22
 8005cb0:	d4df      	bmi.n	8005c72 <_fflush_r+0xe>
 8005cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb4:	f7ff fef8 	bl	8005aa8 <__retarget_lock_release_recursive>
 8005cb8:	e7db      	b.n	8005c72 <_fflush_r+0xe>
	...

08005cbc <_init>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr

08005cc8 <_fini>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr
