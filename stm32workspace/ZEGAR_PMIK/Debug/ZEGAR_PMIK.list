
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800c970  0800c970  0001c970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cffc  0800cffc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cffc  0800cffc  0001cffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d004  0800d004  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d004  0800d004  0001d004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d008  0800d008  0001d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  200001e8  0800d1f4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f1c  0800d1f4  00020f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013743  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e10  00000000  00000000  00033996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000367a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e85  00000000  00000000  00037a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a61  00000000  00000000  0003888d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001499a  00000000  00000000  000502ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e5d7  00000000  00000000  00064c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000590c  00000000  00000000  000f3260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000f8b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c958 	.word	0x0800c958

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800c958 	.word	0x0800c958

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 f8b3 	bl	80015bc <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f803 	bl	800146c <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8a5 	bl	80015bc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f89b 	bl	80015bc <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f82b 	bl	80014f0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f821 	bl	80014f0 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f8a4 	bl	8000638 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	46ce      	mov	lr, r9
 8000500:	4699      	mov	r9, r3
 8000502:	0c03      	lsrs	r3, r0, #16
 8000504:	469c      	mov	ip, r3
 8000506:	0413      	lsls	r3, r2, #16
 8000508:	4647      	mov	r7, r8
 800050a:	0c1b      	lsrs	r3, r3, #16
 800050c:	001d      	movs	r5, r3
 800050e:	000e      	movs	r6, r1
 8000510:	4661      	mov	r1, ip
 8000512:	0404      	lsls	r4, r0, #16
 8000514:	0c24      	lsrs	r4, r4, #16
 8000516:	b580      	push	{r7, lr}
 8000518:	0007      	movs	r7, r0
 800051a:	0c10      	lsrs	r0, r2, #16
 800051c:	434b      	muls	r3, r1
 800051e:	4365      	muls	r5, r4
 8000520:	4341      	muls	r1, r0
 8000522:	4360      	muls	r0, r4
 8000524:	0c2c      	lsrs	r4, r5, #16
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	1820      	adds	r0, r4, r0
 800052a:	468c      	mov	ip, r1
 800052c:	4283      	cmp	r3, r0
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x3c>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	4649      	mov	r1, r9
 800053a:	4379      	muls	r1, r7
 800053c:	4356      	muls	r6, r2
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	042d      	lsls	r5, r5, #16
 8000542:	0c2d      	lsrs	r5, r5, #16
 8000544:	1989      	adds	r1, r1, r6
 8000546:	4463      	add	r3, ip
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	1940      	adds	r0, r0, r5
 800054c:	18c9      	adds	r1, r1, r3
 800054e:	bcc0      	pop	{r6, r7}
 8000550:	46b9      	mov	r9, r7
 8000552:	46b0      	mov	r8, r6
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ffa1 	bl	80004a8 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f001 fecd 	bl	800230c <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fb44 	bl	8001c08 <__aeabi_dsub>
 8000580:	f001 fec4 	bl	800230c <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff63 	bl	800046c <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 f853 	bl	8001684 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f001 fef8 	bl	80023d8 <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 f84a 	bl	8001684 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f001 fb06 	bl	8001c08 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f001 feb1 	bl	8002378 <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 f833 	bl	8001684 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f001 fed8 	bl	80023d8 <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 f8d0 	bl	80007d0 <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f001 ff02 	bl	8002460 <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f001 fefd 	bl	8002460 <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	d434      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 800066e:	469b      	mov	fp, r3
 8000670:	4653      	mov	r3, sl
 8000672:	465a      	mov	r2, fp
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83b      	bhi.n	80006fc <__udivmoddi4+0xc4>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e079      	b.n	800077e <__udivmoddi4+0x146>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e076      	b.n	8000784 <__udivmoddi4+0x14c>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e029      	b.n	8000704 <__udivmoddi4+0xcc>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	469b      	mov	fp, r3
 80006dc:	2320      	movs	r3, #32
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	4652      	mov	r2, sl
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	4641      	mov	r1, r8
 80006e6:	0013      	movs	r3, r2
 80006e8:	464a      	mov	r2, r9
 80006ea:	408a      	lsls	r2, r1
 80006ec:	0017      	movs	r7, r2
 80006ee:	4642      	mov	r2, r8
 80006f0:	431f      	orrs	r7, r3
 80006f2:	4653      	mov	r3, sl
 80006f4:	4093      	lsls	r3, r2
 80006f6:	001e      	movs	r6, r3
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d9c3      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2300      	movs	r3, #0
 8000700:	9200      	str	r2, [sp, #0]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	4643      	mov	r3, r8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0d8      	beq.n	80006bc <__udivmoddi4+0x84>
 800070a:	07fb      	lsls	r3, r7, #31
 800070c:	0872      	lsrs	r2, r6, #1
 800070e:	431a      	orrs	r2, r3
 8000710:	4646      	mov	r6, r8
 8000712:	087b      	lsrs	r3, r7, #1
 8000714:	e00e      	b.n	8000734 <__udivmoddi4+0xfc>
 8000716:	42ab      	cmp	r3, r5
 8000718:	d101      	bne.n	800071e <__udivmoddi4+0xe6>
 800071a:	42a2      	cmp	r2, r4
 800071c:	d80c      	bhi.n	8000738 <__udivmoddi4+0x100>
 800071e:	1aa4      	subs	r4, r4, r2
 8000720:	419d      	sbcs	r5, r3
 8000722:	2001      	movs	r0, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2100      	movs	r1, #0
 800072a:	3e01      	subs	r6, #1
 800072c:	1824      	adds	r4, r4, r0
 800072e:	414d      	adcs	r5, r1
 8000730:	2e00      	cmp	r6, #0
 8000732:	d006      	beq.n	8000742 <__udivmoddi4+0x10a>
 8000734:	42ab      	cmp	r3, r5
 8000736:	d9ee      	bls.n	8000716 <__udivmoddi4+0xde>
 8000738:	3e01      	subs	r6, #1
 800073a:	1924      	adds	r4, r4, r4
 800073c:	416d      	adcs	r5, r5
 800073e:	2e00      	cmp	r6, #0
 8000740:	d1f8      	bne.n	8000734 <__udivmoddi4+0xfc>
 8000742:	9800      	ldr	r0, [sp, #0]
 8000744:	9901      	ldr	r1, [sp, #4]
 8000746:	465b      	mov	r3, fp
 8000748:	1900      	adds	r0, r0, r4
 800074a:	4169      	adcs	r1, r5
 800074c:	2b00      	cmp	r3, #0
 800074e:	db24      	blt.n	800079a <__udivmoddi4+0x162>
 8000750:	002b      	movs	r3, r5
 8000752:	465a      	mov	r2, fp
 8000754:	4644      	mov	r4, r8
 8000756:	40d3      	lsrs	r3, r2
 8000758:	002a      	movs	r2, r5
 800075a:	40e2      	lsrs	r2, r4
 800075c:	001c      	movs	r4, r3
 800075e:	465b      	mov	r3, fp
 8000760:	0015      	movs	r5, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	db2a      	blt.n	80007bc <__udivmoddi4+0x184>
 8000766:	0026      	movs	r6, r4
 8000768:	409e      	lsls	r6, r3
 800076a:	0033      	movs	r3, r6
 800076c:	0026      	movs	r6, r4
 800076e:	4647      	mov	r7, r8
 8000770:	40be      	lsls	r6, r7
 8000772:	0032      	movs	r2, r6
 8000774:	1a80      	subs	r0, r0, r2
 8000776:	4199      	sbcs	r1, r3
 8000778:	9000      	str	r0, [sp, #0]
 800077a:	9101      	str	r1, [sp, #4]
 800077c:	e79e      	b.n	80006bc <__udivmoddi4+0x84>
 800077e:	42a3      	cmp	r3, r4
 8000780:	d8bc      	bhi.n	80006fc <__udivmoddi4+0xc4>
 8000782:	e782      	b.n	800068a <__udivmoddi4+0x52>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	2100      	movs	r1, #0
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	9100      	str	r1, [sp, #0]
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	40da      	lsrs	r2, r3
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	e785      	b.n	80006a6 <__udivmoddi4+0x6e>
 800079a:	4642      	mov	r2, r8
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	002a      	movs	r2, r5
 80007a2:	4646      	mov	r6, r8
 80007a4:	409a      	lsls	r2, r3
 80007a6:	0023      	movs	r3, r4
 80007a8:	40f3      	lsrs	r3, r6
 80007aa:	4644      	mov	r4, r8
 80007ac:	4313      	orrs	r3, r2
 80007ae:	002a      	movs	r2, r5
 80007b0:	40e2      	lsrs	r2, r4
 80007b2:	001c      	movs	r4, r3
 80007b4:	465b      	mov	r3, fp
 80007b6:	0015      	movs	r5, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dad4      	bge.n	8000766 <__udivmoddi4+0x12e>
 80007bc:	4642      	mov	r2, r8
 80007be:	002f      	movs	r7, r5
 80007c0:	2320      	movs	r3, #32
 80007c2:	0026      	movs	r6, r4
 80007c4:	4097      	lsls	r7, r2
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	40de      	lsrs	r6, r3
 80007ca:	003b      	movs	r3, r7
 80007cc:	4333      	orrs	r3, r6
 80007ce:	e7cd      	b.n	800076c <__udivmoddi4+0x134>

080007d0 <__aeabi_dadd>:
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d2:	464f      	mov	r7, r9
 80007d4:	4646      	mov	r6, r8
 80007d6:	46d6      	mov	lr, sl
 80007d8:	0004      	movs	r4, r0
 80007da:	b5c0      	push	{r6, r7, lr}
 80007dc:	001f      	movs	r7, r3
 80007de:	030b      	lsls	r3, r1, #12
 80007e0:	0010      	movs	r0, r2
 80007e2:	004e      	lsls	r6, r1, #1
 80007e4:	0a5b      	lsrs	r3, r3, #9
 80007e6:	0fcd      	lsrs	r5, r1, #31
 80007e8:	0f61      	lsrs	r1, r4, #29
 80007ea:	007a      	lsls	r2, r7, #1
 80007ec:	4319      	orrs	r1, r3
 80007ee:	00e3      	lsls	r3, r4, #3
 80007f0:	033c      	lsls	r4, r7, #12
 80007f2:	0fff      	lsrs	r7, r7, #31
 80007f4:	46bc      	mov	ip, r7
 80007f6:	0a64      	lsrs	r4, r4, #9
 80007f8:	0f47      	lsrs	r7, r0, #29
 80007fa:	4327      	orrs	r7, r4
 80007fc:	0d76      	lsrs	r6, r6, #21
 80007fe:	0d52      	lsrs	r2, r2, #21
 8000800:	00c0      	lsls	r0, r0, #3
 8000802:	46b9      	mov	r9, r7
 8000804:	4680      	mov	r8, r0
 8000806:	1ab7      	subs	r7, r6, r2
 8000808:	4565      	cmp	r5, ip
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x3e>
 800080c:	e09b      	b.n	8000946 <__aeabi_dadd+0x176>
 800080e:	2f00      	cmp	r7, #0
 8000810:	dc00      	bgt.n	8000814 <__aeabi_dadd+0x44>
 8000812:	e084      	b.n	800091e <__aeabi_dadd+0x14e>
 8000814:	2a00      	cmp	r2, #0
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x4a>
 8000818:	e0be      	b.n	8000998 <__aeabi_dadd+0x1c8>
 800081a:	4ac8      	ldr	r2, [pc, #800]	; (8000b3c <__aeabi_dadd+0x36c>)
 800081c:	4296      	cmp	r6, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x52>
 8000820:	e124      	b.n	8000a6c <__aeabi_dadd+0x29c>
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	464c      	mov	r4, r9
 8000826:	0412      	lsls	r2, r2, #16
 8000828:	4314      	orrs	r4, r2
 800082a:	46a1      	mov	r9, r4
 800082c:	2f38      	cmp	r7, #56	; 0x38
 800082e:	dd00      	ble.n	8000832 <__aeabi_dadd+0x62>
 8000830:	e167      	b.n	8000b02 <__aeabi_dadd+0x332>
 8000832:	2f1f      	cmp	r7, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x68>
 8000836:	e1d6      	b.n	8000be6 <__aeabi_dadd+0x416>
 8000838:	2220      	movs	r2, #32
 800083a:	464c      	mov	r4, r9
 800083c:	1bd2      	subs	r2, r2, r7
 800083e:	4094      	lsls	r4, r2
 8000840:	46a2      	mov	sl, r4
 8000842:	4644      	mov	r4, r8
 8000844:	40fc      	lsrs	r4, r7
 8000846:	0020      	movs	r0, r4
 8000848:	4654      	mov	r4, sl
 800084a:	4304      	orrs	r4, r0
 800084c:	4640      	mov	r0, r8
 800084e:	4090      	lsls	r0, r2
 8000850:	1e42      	subs	r2, r0, #1
 8000852:	4190      	sbcs	r0, r2
 8000854:	464a      	mov	r2, r9
 8000856:	40fa      	lsrs	r2, r7
 8000858:	4304      	orrs	r4, r0
 800085a:	1a89      	subs	r1, r1, r2
 800085c:	1b1c      	subs	r4, r3, r4
 800085e:	42a3      	cmp	r3, r4
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	1a8b      	subs	r3, r1, r2
 8000866:	469a      	mov	sl, r3
 8000868:	4653      	mov	r3, sl
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	d400      	bmi.n	8000870 <__aeabi_dadd+0xa0>
 800086e:	e0d4      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000870:	4653      	mov	r3, sl
 8000872:	025a      	lsls	r2, r3, #9
 8000874:	0a53      	lsrs	r3, r2, #9
 8000876:	469a      	mov	sl, r3
 8000878:	4653      	mov	r3, sl
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0xb0>
 800087e:	e104      	b.n	8000a8a <__aeabi_dadd+0x2ba>
 8000880:	4650      	mov	r0, sl
 8000882:	f001 fdcf 	bl	8002424 <__clzsi2>
 8000886:	0003      	movs	r3, r0
 8000888:	3b08      	subs	r3, #8
 800088a:	2220      	movs	r2, #32
 800088c:	0020      	movs	r0, r4
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	4651      	mov	r1, sl
 8000892:	40d0      	lsrs	r0, r2
 8000894:	4099      	lsls	r1, r3
 8000896:	0002      	movs	r2, r0
 8000898:	409c      	lsls	r4, r3
 800089a:	430a      	orrs	r2, r1
 800089c:	42b3      	cmp	r3, r6
 800089e:	da00      	bge.n	80008a2 <__aeabi_dadd+0xd2>
 80008a0:	e102      	b.n	8000aa8 <__aeabi_dadd+0x2d8>
 80008a2:	1b9b      	subs	r3, r3, r6
 80008a4:	1c59      	adds	r1, r3, #1
 80008a6:	291f      	cmp	r1, #31
 80008a8:	dd00      	ble.n	80008ac <__aeabi_dadd+0xdc>
 80008aa:	e0a7      	b.n	80009fc <__aeabi_dadd+0x22c>
 80008ac:	2320      	movs	r3, #32
 80008ae:	0010      	movs	r0, r2
 80008b0:	0026      	movs	r6, r4
 80008b2:	1a5b      	subs	r3, r3, r1
 80008b4:	409c      	lsls	r4, r3
 80008b6:	4098      	lsls	r0, r3
 80008b8:	40ce      	lsrs	r6, r1
 80008ba:	40ca      	lsrs	r2, r1
 80008bc:	1e63      	subs	r3, r4, #1
 80008be:	419c      	sbcs	r4, r3
 80008c0:	4330      	orrs	r0, r6
 80008c2:	4692      	mov	sl, r2
 80008c4:	2600      	movs	r6, #0
 80008c6:	4304      	orrs	r4, r0
 80008c8:	0763      	lsls	r3, r4, #29
 80008ca:	d009      	beq.n	80008e0 <__aeabi_dadd+0x110>
 80008cc:	230f      	movs	r3, #15
 80008ce:	4023      	ands	r3, r4
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d005      	beq.n	80008e0 <__aeabi_dadd+0x110>
 80008d4:	1d23      	adds	r3, r4, #4
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	41a4      	sbcs	r4, r4
 80008da:	4264      	negs	r4, r4
 80008dc:	44a2      	add	sl, r4
 80008de:	001c      	movs	r4, r3
 80008e0:	4653      	mov	r3, sl
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_dadd+0x118>
 80008e6:	e09b      	b.n	8000a20 <__aeabi_dadd+0x250>
 80008e8:	4b94      	ldr	r3, [pc, #592]	; (8000b3c <__aeabi_dadd+0x36c>)
 80008ea:	3601      	adds	r6, #1
 80008ec:	429e      	cmp	r6, r3
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x122>
 80008f0:	e0b8      	b.n	8000a64 <__aeabi_dadd+0x294>
 80008f2:	4653      	mov	r3, sl
 80008f4:	4992      	ldr	r1, [pc, #584]	; (8000b40 <__aeabi_dadd+0x370>)
 80008f6:	08e4      	lsrs	r4, r4, #3
 80008f8:	400b      	ands	r3, r1
 80008fa:	0019      	movs	r1, r3
 80008fc:	075b      	lsls	r3, r3, #29
 80008fe:	4323      	orrs	r3, r4
 8000900:	0572      	lsls	r2, r6, #21
 8000902:	024c      	lsls	r4, r1, #9
 8000904:	0b24      	lsrs	r4, r4, #12
 8000906:	0d52      	lsrs	r2, r2, #21
 8000908:	0512      	lsls	r2, r2, #20
 800090a:	07ed      	lsls	r5, r5, #31
 800090c:	4322      	orrs	r2, r4
 800090e:	432a      	orrs	r2, r5
 8000910:	0018      	movs	r0, r3
 8000912:	0011      	movs	r1, r2
 8000914:	bce0      	pop	{r5, r6, r7}
 8000916:	46ba      	mov	sl, r7
 8000918:	46b1      	mov	r9, r6
 800091a:	46a8      	mov	r8, r5
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	2f00      	cmp	r7, #0
 8000920:	d048      	beq.n	80009b4 <__aeabi_dadd+0x1e4>
 8000922:	1b97      	subs	r7, r2, r6
 8000924:	2e00      	cmp	r6, #0
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x15a>
 8000928:	e10e      	b.n	8000b48 <__aeabi_dadd+0x378>
 800092a:	000c      	movs	r4, r1
 800092c:	431c      	orrs	r4, r3
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x162>
 8000930:	e1b7      	b.n	8000ca2 <__aeabi_dadd+0x4d2>
 8000932:	1e7c      	subs	r4, r7, #1
 8000934:	2f01      	cmp	r7, #1
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x16a>
 8000938:	e226      	b.n	8000d88 <__aeabi_dadd+0x5b8>
 800093a:	4d80      	ldr	r5, [pc, #512]	; (8000b3c <__aeabi_dadd+0x36c>)
 800093c:	42af      	cmp	r7, r5
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x172>
 8000940:	e1d5      	b.n	8000cee <__aeabi_dadd+0x51e>
 8000942:	0027      	movs	r7, r4
 8000944:	e107      	b.n	8000b56 <__aeabi_dadd+0x386>
 8000946:	2f00      	cmp	r7, #0
 8000948:	dc00      	bgt.n	800094c <__aeabi_dadd+0x17c>
 800094a:	e0b2      	b.n	8000ab2 <__aeabi_dadd+0x2e2>
 800094c:	2a00      	cmp	r2, #0
 800094e:	d047      	beq.n	80009e0 <__aeabi_dadd+0x210>
 8000950:	4a7a      	ldr	r2, [pc, #488]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000952:	4296      	cmp	r6, r2
 8000954:	d100      	bne.n	8000958 <__aeabi_dadd+0x188>
 8000956:	e089      	b.n	8000a6c <__aeabi_dadd+0x29c>
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	464c      	mov	r4, r9
 800095c:	0412      	lsls	r2, r2, #16
 800095e:	4314      	orrs	r4, r2
 8000960:	46a1      	mov	r9, r4
 8000962:	2f38      	cmp	r7, #56	; 0x38
 8000964:	dc6b      	bgt.n	8000a3e <__aeabi_dadd+0x26e>
 8000966:	2f1f      	cmp	r7, #31
 8000968:	dc00      	bgt.n	800096c <__aeabi_dadd+0x19c>
 800096a:	e16e      	b.n	8000c4a <__aeabi_dadd+0x47a>
 800096c:	003a      	movs	r2, r7
 800096e:	4648      	mov	r0, r9
 8000970:	3a20      	subs	r2, #32
 8000972:	40d0      	lsrs	r0, r2
 8000974:	4684      	mov	ip, r0
 8000976:	2f20      	cmp	r7, #32
 8000978:	d007      	beq.n	800098a <__aeabi_dadd+0x1ba>
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	4648      	mov	r0, r9
 800097e:	1bd2      	subs	r2, r2, r7
 8000980:	4090      	lsls	r0, r2
 8000982:	0002      	movs	r2, r0
 8000984:	4640      	mov	r0, r8
 8000986:	4310      	orrs	r0, r2
 8000988:	4680      	mov	r8, r0
 800098a:	4640      	mov	r0, r8
 800098c:	1e42      	subs	r2, r0, #1
 800098e:	4190      	sbcs	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	0004      	movs	r4, r0
 8000994:	4314      	orrs	r4, r2
 8000996:	e057      	b.n	8000a48 <__aeabi_dadd+0x278>
 8000998:	464a      	mov	r2, r9
 800099a:	4302      	orrs	r2, r0
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x1d0>
 800099e:	e103      	b.n	8000ba8 <__aeabi_dadd+0x3d8>
 80009a0:	1e7a      	subs	r2, r7, #1
 80009a2:	2f01      	cmp	r7, #1
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x1d8>
 80009a6:	e193      	b.n	8000cd0 <__aeabi_dadd+0x500>
 80009a8:	4c64      	ldr	r4, [pc, #400]	; (8000b3c <__aeabi_dadd+0x36c>)
 80009aa:	42a7      	cmp	r7, r4
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x1e0>
 80009ae:	e18a      	b.n	8000cc6 <__aeabi_dadd+0x4f6>
 80009b0:	0017      	movs	r7, r2
 80009b2:	e73b      	b.n	800082c <__aeabi_dadd+0x5c>
 80009b4:	4c63      	ldr	r4, [pc, #396]	; (8000b44 <__aeabi_dadd+0x374>)
 80009b6:	1c72      	adds	r2, r6, #1
 80009b8:	4222      	tst	r2, r4
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x1ee>
 80009bc:	e0e0      	b.n	8000b80 <__aeabi_dadd+0x3b0>
 80009be:	000a      	movs	r2, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_dadd+0x1f8>
 80009c6:	e174      	b.n	8000cb2 <__aeabi_dadd+0x4e2>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x1fe>
 80009cc:	e1d0      	b.n	8000d70 <__aeabi_dadd+0x5a0>
 80009ce:	464a      	mov	r2, r9
 80009d0:	4302      	orrs	r2, r0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x206>
 80009d4:	e1e3      	b.n	8000d9e <__aeabi_dadd+0x5ce>
 80009d6:	074a      	lsls	r2, r1, #29
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	4313      	orrs	r3, r2
 80009dc:	08c9      	lsrs	r1, r1, #3
 80009de:	e029      	b.n	8000a34 <__aeabi_dadd+0x264>
 80009e0:	464a      	mov	r2, r9
 80009e2:	4302      	orrs	r2, r0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x218>
 80009e6:	e17d      	b.n	8000ce4 <__aeabi_dadd+0x514>
 80009e8:	1e7a      	subs	r2, r7, #1
 80009ea:	2f01      	cmp	r7, #1
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x220>
 80009ee:	e0e0      	b.n	8000bb2 <__aeabi_dadd+0x3e2>
 80009f0:	4c52      	ldr	r4, [pc, #328]	; (8000b3c <__aeabi_dadd+0x36c>)
 80009f2:	42a7      	cmp	r7, r4
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x228>
 80009f6:	e166      	b.n	8000cc6 <__aeabi_dadd+0x4f6>
 80009f8:	0017      	movs	r7, r2
 80009fa:	e7b2      	b.n	8000962 <__aeabi_dadd+0x192>
 80009fc:	0010      	movs	r0, r2
 80009fe:	3b1f      	subs	r3, #31
 8000a00:	40d8      	lsrs	r0, r3
 8000a02:	2920      	cmp	r1, #32
 8000a04:	d003      	beq.n	8000a0e <__aeabi_dadd+0x23e>
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	4314      	orrs	r4, r2
 8000a0e:	1e63      	subs	r3, r4, #1
 8000a10:	419c      	sbcs	r4, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	2600      	movs	r6, #0
 8000a16:	469a      	mov	sl, r3
 8000a18:	4304      	orrs	r4, r0
 8000a1a:	0763      	lsls	r3, r4, #29
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x250>
 8000a1e:	e755      	b.n	80008cc <__aeabi_dadd+0xfc>
 8000a20:	4652      	mov	r2, sl
 8000a22:	08e3      	lsrs	r3, r4, #3
 8000a24:	0752      	lsls	r2, r2, #29
 8000a26:	4313      	orrs	r3, r2
 8000a28:	4652      	mov	r2, sl
 8000a2a:	0037      	movs	r7, r6
 8000a2c:	08d1      	lsrs	r1, r2, #3
 8000a2e:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000a30:	4297      	cmp	r7, r2
 8000a32:	d01f      	beq.n	8000a74 <__aeabi_dadd+0x2a4>
 8000a34:	0309      	lsls	r1, r1, #12
 8000a36:	057a      	lsls	r2, r7, #21
 8000a38:	0b0c      	lsrs	r4, r1, #12
 8000a3a:	0d52      	lsrs	r2, r2, #21
 8000a3c:	e764      	b.n	8000908 <__aeabi_dadd+0x138>
 8000a3e:	4642      	mov	r2, r8
 8000a40:	464c      	mov	r4, r9
 8000a42:	4314      	orrs	r4, r2
 8000a44:	1e62      	subs	r2, r4, #1
 8000a46:	4194      	sbcs	r4, r2
 8000a48:	18e4      	adds	r4, r4, r3
 8000a4a:	429c      	cmp	r4, r3
 8000a4c:	4192      	sbcs	r2, r2
 8000a4e:	4252      	negs	r2, r2
 8000a50:	4692      	mov	sl, r2
 8000a52:	448a      	add	sl, r1
 8000a54:	4653      	mov	r3, sl
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	d5df      	bpl.n	8000a1a <__aeabi_dadd+0x24a>
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000a5c:	3601      	adds	r6, #1
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d000      	beq.n	8000a64 <__aeabi_dadd+0x294>
 8000a62:	e0b3      	b.n	8000bcc <__aeabi_dadd+0x3fc>
 8000a64:	0032      	movs	r2, r6
 8000a66:	2400      	movs	r4, #0
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e74d      	b.n	8000908 <__aeabi_dadd+0x138>
 8000a6c:	074a      	lsls	r2, r1, #29
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	001a      	movs	r2, r3
 8000a76:	430a      	orrs	r2, r1
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x2ac>
 8000a7a:	e200      	b.n	8000e7e <__aeabi_dadd+0x6ae>
 8000a7c:	2480      	movs	r4, #128	; 0x80
 8000a7e:	0324      	lsls	r4, r4, #12
 8000a80:	430c      	orrs	r4, r1
 8000a82:	0324      	lsls	r4, r4, #12
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000a86:	0b24      	lsrs	r4, r4, #12
 8000a88:	e73e      	b.n	8000908 <__aeabi_dadd+0x138>
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f001 fcca 	bl	8002424 <__clzsi2>
 8000a90:	0003      	movs	r3, r0
 8000a92:	3318      	adds	r3, #24
 8000a94:	2b1f      	cmp	r3, #31
 8000a96:	dc00      	bgt.n	8000a9a <__aeabi_dadd+0x2ca>
 8000a98:	e6f7      	b.n	800088a <__aeabi_dadd+0xba>
 8000a9a:	0022      	movs	r2, r4
 8000a9c:	3808      	subs	r0, #8
 8000a9e:	4082      	lsls	r2, r0
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	42b3      	cmp	r3, r6
 8000aa4:	db00      	blt.n	8000aa8 <__aeabi_dadd+0x2d8>
 8000aa6:	e6fc      	b.n	80008a2 <__aeabi_dadd+0xd2>
 8000aa8:	1af6      	subs	r6, r6, r3
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <__aeabi_dadd+0x370>)
 8000aac:	401a      	ands	r2, r3
 8000aae:	4692      	mov	sl, r2
 8000ab0:	e70a      	b.n	80008c8 <__aeabi_dadd+0xf8>
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	d02b      	beq.n	8000b0e <__aeabi_dadd+0x33e>
 8000ab6:	1b97      	subs	r7, r2, r6
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x2ee>
 8000abc:	e0b8      	b.n	8000c30 <__aeabi_dadd+0x460>
 8000abe:	4c1f      	ldr	r4, [pc, #124]	; (8000b3c <__aeabi_dadd+0x36c>)
 8000ac0:	42a2      	cmp	r2, r4
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x2f6>
 8000ac4:	e11c      	b.n	8000d00 <__aeabi_dadd+0x530>
 8000ac6:	2480      	movs	r4, #128	; 0x80
 8000ac8:	0424      	lsls	r4, r4, #16
 8000aca:	4321      	orrs	r1, r4
 8000acc:	2f38      	cmp	r7, #56	; 0x38
 8000ace:	dd00      	ble.n	8000ad2 <__aeabi_dadd+0x302>
 8000ad0:	e11e      	b.n	8000d10 <__aeabi_dadd+0x540>
 8000ad2:	2f1f      	cmp	r7, #31
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_dadd+0x308>
 8000ad6:	e19e      	b.n	8000e16 <__aeabi_dadd+0x646>
 8000ad8:	2620      	movs	r6, #32
 8000ada:	000c      	movs	r4, r1
 8000adc:	1bf6      	subs	r6, r6, r7
 8000ade:	0018      	movs	r0, r3
 8000ae0:	40b3      	lsls	r3, r6
 8000ae2:	40b4      	lsls	r4, r6
 8000ae4:	40f8      	lsrs	r0, r7
 8000ae6:	1e5e      	subs	r6, r3, #1
 8000ae8:	41b3      	sbcs	r3, r6
 8000aea:	40f9      	lsrs	r1, r7
 8000aec:	4304      	orrs	r4, r0
 8000aee:	431c      	orrs	r4, r3
 8000af0:	4489      	add	r9, r1
 8000af2:	4444      	add	r4, r8
 8000af4:	4544      	cmp	r4, r8
 8000af6:	419b      	sbcs	r3, r3
 8000af8:	425b      	negs	r3, r3
 8000afa:	444b      	add	r3, r9
 8000afc:	469a      	mov	sl, r3
 8000afe:	0016      	movs	r6, r2
 8000b00:	e7a8      	b.n	8000a54 <__aeabi_dadd+0x284>
 8000b02:	4642      	mov	r2, r8
 8000b04:	464c      	mov	r4, r9
 8000b06:	4314      	orrs	r4, r2
 8000b08:	1e62      	subs	r2, r4, #1
 8000b0a:	4194      	sbcs	r4, r2
 8000b0c:	e6a6      	b.n	800085c <__aeabi_dadd+0x8c>
 8000b0e:	4c0d      	ldr	r4, [pc, #52]	; (8000b44 <__aeabi_dadd+0x374>)
 8000b10:	1c72      	adds	r2, r6, #1
 8000b12:	4222      	tst	r2, r4
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x348>
 8000b16:	e0a8      	b.n	8000c6a <__aeabi_dadd+0x49a>
 8000b18:	000a      	movs	r2, r1
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dadd+0x352>
 8000b20:	e10a      	b.n	8000d38 <__aeabi_dadd+0x568>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x358>
 8000b26:	e15e      	b.n	8000de6 <__aeabi_dadd+0x616>
 8000b28:	464a      	mov	r2, r9
 8000b2a:	4302      	orrs	r2, r0
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_dadd+0x360>
 8000b2e:	e161      	b.n	8000df4 <__aeabi_dadd+0x624>
 8000b30:	074a      	lsls	r2, r1, #29
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	08c9      	lsrs	r1, r1, #3
 8000b38:	e77c      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	000007ff 	.word	0x000007ff
 8000b40:	ff7fffff 	.word	0xff7fffff
 8000b44:	000007fe 	.word	0x000007fe
 8000b48:	4ccf      	ldr	r4, [pc, #828]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000b4a:	42a2      	cmp	r2, r4
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x380>
 8000b4e:	e0ce      	b.n	8000cee <__aeabi_dadd+0x51e>
 8000b50:	2480      	movs	r4, #128	; 0x80
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	4321      	orrs	r1, r4
 8000b56:	2f38      	cmp	r7, #56	; 0x38
 8000b58:	dc5b      	bgt.n	8000c12 <__aeabi_dadd+0x442>
 8000b5a:	2f1f      	cmp	r7, #31
 8000b5c:	dd00      	ble.n	8000b60 <__aeabi_dadd+0x390>
 8000b5e:	e0dc      	b.n	8000d1a <__aeabi_dadd+0x54a>
 8000b60:	2520      	movs	r5, #32
 8000b62:	000c      	movs	r4, r1
 8000b64:	1bed      	subs	r5, r5, r7
 8000b66:	001e      	movs	r6, r3
 8000b68:	40ab      	lsls	r3, r5
 8000b6a:	40ac      	lsls	r4, r5
 8000b6c:	40fe      	lsrs	r6, r7
 8000b6e:	1e5d      	subs	r5, r3, #1
 8000b70:	41ab      	sbcs	r3, r5
 8000b72:	4334      	orrs	r4, r6
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	431c      	orrs	r4, r3
 8000b78:	464b      	mov	r3, r9
 8000b7a:	1a5b      	subs	r3, r3, r1
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	e04c      	b.n	8000c1a <__aeabi_dadd+0x44a>
 8000b80:	464a      	mov	r2, r9
 8000b82:	1a1c      	subs	r4, r3, r0
 8000b84:	1a88      	subs	r0, r1, r2
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	4192      	sbcs	r2, r2
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	4692      	mov	sl, r2
 8000b8e:	0002      	movs	r2, r0
 8000b90:	4650      	mov	r0, sl
 8000b92:	1a12      	subs	r2, r2, r0
 8000b94:	4692      	mov	sl, r2
 8000b96:	0212      	lsls	r2, r2, #8
 8000b98:	d478      	bmi.n	8000c8c <__aeabi_dadd+0x4bc>
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x3d2>
 8000ba0:	e66a      	b.n	8000878 <__aeabi_dadd+0xa8>
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	e745      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000ba8:	074a      	lsls	r2, r1, #29
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	08c9      	lsrs	r1, r1, #3
 8000bb0:	e73d      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000bb2:	181c      	adds	r4, r3, r0
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	419b      	sbcs	r3, r3
 8000bb8:	4449      	add	r1, r9
 8000bba:	468a      	mov	sl, r1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	449a      	add	sl, r3
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	d400      	bmi.n	8000bca <__aeabi_dadd+0x3fa>
 8000bc8:	e727      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000bca:	2602      	movs	r6, #2
 8000bcc:	4652      	mov	r2, sl
 8000bce:	4baf      	ldr	r3, [pc, #700]	; (8000e8c <__aeabi_dadd+0x6bc>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	4021      	ands	r1, r4
 8000bd8:	0862      	lsrs	r2, r4, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	07dc      	lsls	r4, r3, #31
 8000bde:	085b      	lsrs	r3, r3, #1
 8000be0:	469a      	mov	sl, r3
 8000be2:	4314      	orrs	r4, r2
 8000be4:	e670      	b.n	80008c8 <__aeabi_dadd+0xf8>
 8000be6:	003a      	movs	r2, r7
 8000be8:	464c      	mov	r4, r9
 8000bea:	3a20      	subs	r2, #32
 8000bec:	40d4      	lsrs	r4, r2
 8000bee:	46a4      	mov	ip, r4
 8000bf0:	2f20      	cmp	r7, #32
 8000bf2:	d007      	beq.n	8000c04 <__aeabi_dadd+0x434>
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	4648      	mov	r0, r9
 8000bf8:	1bd2      	subs	r2, r2, r7
 8000bfa:	4090      	lsls	r0, r2
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	4640      	mov	r0, r8
 8000c00:	4310      	orrs	r0, r2
 8000c02:	4680      	mov	r8, r0
 8000c04:	4640      	mov	r0, r8
 8000c06:	1e42      	subs	r2, r0, #1
 8000c08:	4190      	sbcs	r0, r2
 8000c0a:	4662      	mov	r2, ip
 8000c0c:	0004      	movs	r4, r0
 8000c0e:	4314      	orrs	r4, r2
 8000c10:	e624      	b.n	800085c <__aeabi_dadd+0x8c>
 8000c12:	4319      	orrs	r1, r3
 8000c14:	000c      	movs	r4, r1
 8000c16:	1e63      	subs	r3, r4, #1
 8000c18:	419c      	sbcs	r4, r3
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	1b1c      	subs	r4, r3, r4
 8000c1e:	45a0      	cmp	r8, r4
 8000c20:	419b      	sbcs	r3, r3
 8000c22:	4649      	mov	r1, r9
 8000c24:	425b      	negs	r3, r3
 8000c26:	1acb      	subs	r3, r1, r3
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	0016      	movs	r6, r2
 8000c2e:	e61b      	b.n	8000868 <__aeabi_dadd+0x98>
 8000c30:	000c      	movs	r4, r1
 8000c32:	431c      	orrs	r4, r3
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dadd+0x468>
 8000c36:	e0c7      	b.n	8000dc8 <__aeabi_dadd+0x5f8>
 8000c38:	1e7c      	subs	r4, r7, #1
 8000c3a:	2f01      	cmp	r7, #1
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x470>
 8000c3e:	e0f9      	b.n	8000e34 <__aeabi_dadd+0x664>
 8000c40:	4e91      	ldr	r6, [pc, #580]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000c42:	42b7      	cmp	r7, r6
 8000c44:	d05c      	beq.n	8000d00 <__aeabi_dadd+0x530>
 8000c46:	0027      	movs	r7, r4
 8000c48:	e740      	b.n	8000acc <__aeabi_dadd+0x2fc>
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4640      	mov	r0, r8
 8000c50:	1bd2      	subs	r2, r2, r7
 8000c52:	4094      	lsls	r4, r2
 8000c54:	40f8      	lsrs	r0, r7
 8000c56:	4304      	orrs	r4, r0
 8000c58:	4640      	mov	r0, r8
 8000c5a:	4090      	lsls	r0, r2
 8000c5c:	1e42      	subs	r2, r0, #1
 8000c5e:	4190      	sbcs	r0, r2
 8000c60:	464a      	mov	r2, r9
 8000c62:	40fa      	lsrs	r2, r7
 8000c64:	4304      	orrs	r4, r0
 8000c66:	1889      	adds	r1, r1, r2
 8000c68:	e6ee      	b.n	8000a48 <__aeabi_dadd+0x278>
 8000c6a:	4c87      	ldr	r4, [pc, #540]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x4a2>
 8000c70:	e6f9      	b.n	8000a66 <__aeabi_dadd+0x296>
 8000c72:	1818      	adds	r0, r3, r0
 8000c74:	4298      	cmp	r0, r3
 8000c76:	419b      	sbcs	r3, r3
 8000c78:	4449      	add	r1, r9
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	18cb      	adds	r3, r1, r3
 8000c7e:	07dc      	lsls	r4, r3, #31
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	469a      	mov	sl, r3
 8000c86:	0016      	movs	r6, r2
 8000c88:	4304      	orrs	r4, r0
 8000c8a:	e6c6      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	1ad4      	subs	r4, r2, r3
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	4180      	sbcs	r0, r0
 8000c94:	464b      	mov	r3, r9
 8000c96:	4240      	negs	r0, r0
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	1a0b      	subs	r3, r1, r0
 8000c9c:	469a      	mov	sl, r3
 8000c9e:	4665      	mov	r5, ip
 8000ca0:	e5ea      	b.n	8000878 <__aeabi_dadd+0xa8>
 8000ca2:	464b      	mov	r3, r9
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	08c0      	lsrs	r0, r0, #3
 8000ca8:	075b      	lsls	r3, r3, #29
 8000caa:	4665      	mov	r5, ip
 8000cac:	4303      	orrs	r3, r0
 8000cae:	08d1      	lsrs	r1, r2, #3
 8000cb0:	e6bd      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_dadd+0x4e8>
 8000cb6:	e08e      	b.n	8000dd6 <__aeabi_dadd+0x606>
 8000cb8:	464b      	mov	r3, r9
 8000cba:	4303      	orrs	r3, r0
 8000cbc:	d117      	bne.n	8000cee <__aeabi_dadd+0x51e>
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	2500      	movs	r5, #0
 8000cc2:	0309      	lsls	r1, r1, #12
 8000cc4:	e6da      	b.n	8000a7c <__aeabi_dadd+0x2ac>
 8000cc6:	074a      	lsls	r2, r1, #29
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	08c9      	lsrs	r1, r1, #3
 8000cce:	e6d1      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000cd0:	1a1c      	subs	r4, r3, r0
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	419b      	sbcs	r3, r3
 8000cd8:	1a89      	subs	r1, r1, r2
 8000cda:	425b      	negs	r3, r3
 8000cdc:	1acb      	subs	r3, r1, r3
 8000cde:	469a      	mov	sl, r3
 8000ce0:	2601      	movs	r6, #1
 8000ce2:	e5c1      	b.n	8000868 <__aeabi_dadd+0x98>
 8000ce4:	074a      	lsls	r2, r1, #29
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	08c9      	lsrs	r1, r1, #3
 8000cec:	e69f      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000cee:	4643      	mov	r3, r8
 8000cf0:	08d8      	lsrs	r0, r3, #3
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	075b      	lsls	r3, r3, #29
 8000cf8:	4665      	mov	r5, ip
 8000cfa:	4303      	orrs	r3, r0
 8000cfc:	08d1      	lsrs	r1, r2, #3
 8000cfe:	e6b9      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000d00:	4643      	mov	r3, r8
 8000d02:	08d8      	lsrs	r0, r3, #3
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	075b      	lsls	r3, r3, #29
 8000d0a:	4303      	orrs	r3, r0
 8000d0c:	08d1      	lsrs	r1, r2, #3
 8000d0e:	e6b1      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000d10:	4319      	orrs	r1, r3
 8000d12:	000c      	movs	r4, r1
 8000d14:	1e63      	subs	r3, r4, #1
 8000d16:	419c      	sbcs	r4, r3
 8000d18:	e6eb      	b.n	8000af2 <__aeabi_dadd+0x322>
 8000d1a:	003c      	movs	r4, r7
 8000d1c:	000d      	movs	r5, r1
 8000d1e:	3c20      	subs	r4, #32
 8000d20:	40e5      	lsrs	r5, r4
 8000d22:	2f20      	cmp	r7, #32
 8000d24:	d003      	beq.n	8000d2e <__aeabi_dadd+0x55e>
 8000d26:	2440      	movs	r4, #64	; 0x40
 8000d28:	1be4      	subs	r4, r4, r7
 8000d2a:	40a1      	lsls	r1, r4
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	001c      	movs	r4, r3
 8000d30:	1e63      	subs	r3, r4, #1
 8000d32:	419c      	sbcs	r4, r3
 8000d34:	432c      	orrs	r4, r5
 8000d36:	e770      	b.n	8000c1a <__aeabi_dadd+0x44a>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d0e1      	beq.n	8000d00 <__aeabi_dadd+0x530>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	d0c1      	beq.n	8000cc6 <__aeabi_dadd+0x4f6>
 8000d42:	074a      	lsls	r2, r1, #29
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	08c9      	lsrs	r1, r1, #3
 8000d4c:	0312      	lsls	r2, r2, #12
 8000d4e:	4211      	tst	r1, r2
 8000d50:	d008      	beq.n	8000d64 <__aeabi_dadd+0x594>
 8000d52:	4648      	mov	r0, r9
 8000d54:	08c4      	lsrs	r4, r0, #3
 8000d56:	4214      	tst	r4, r2
 8000d58:	d104      	bne.n	8000d64 <__aeabi_dadd+0x594>
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	0021      	movs	r1, r4
 8000d5e:	08db      	lsrs	r3, r3, #3
 8000d60:	0742      	lsls	r2, r0, #29
 8000d62:	4313      	orrs	r3, r2
 8000d64:	0f5a      	lsrs	r2, r3, #29
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	0752      	lsls	r2, r2, #29
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	e681      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000d70:	464b      	mov	r3, r9
 8000d72:	4303      	orrs	r3, r0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x5a8>
 8000d76:	e714      	b.n	8000ba2 <__aeabi_dadd+0x3d2>
 8000d78:	464b      	mov	r3, r9
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	08c0      	lsrs	r0, r0, #3
 8000d7e:	075b      	lsls	r3, r3, #29
 8000d80:	4665      	mov	r5, ip
 8000d82:	4303      	orrs	r3, r0
 8000d84:	08d1      	lsrs	r1, r2, #3
 8000d86:	e655      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000d88:	1ac4      	subs	r4, r0, r3
 8000d8a:	45a0      	cmp	r8, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	464b      	mov	r3, r9
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a59      	subs	r1, r3, r1
 8000d94:	1a0b      	subs	r3, r1, r0
 8000d96:	469a      	mov	sl, r3
 8000d98:	4665      	mov	r5, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	e564      	b.n	8000868 <__aeabi_dadd+0x98>
 8000d9e:	1a1c      	subs	r4, r3, r0
 8000da0:	464a      	mov	r2, r9
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	1a8a      	subs	r2, r1, r2
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a12      	subs	r2, r2, r0
 8000dac:	4692      	mov	sl, r2
 8000dae:	0212      	lsls	r2, r2, #8
 8000db0:	d549      	bpl.n	8000e46 <__aeabi_dadd+0x676>
 8000db2:	4642      	mov	r2, r8
 8000db4:	1ad4      	subs	r4, r2, r3
 8000db6:	45a0      	cmp	r8, r4
 8000db8:	4180      	sbcs	r0, r0
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4240      	negs	r0, r0
 8000dbe:	1a59      	subs	r1, r3, r1
 8000dc0:	1a0b      	subs	r3, r1, r0
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	4665      	mov	r5, ip
 8000dc6:	e57f      	b.n	80008c8 <__aeabi_dadd+0xf8>
 8000dc8:	464b      	mov	r3, r9
 8000dca:	464a      	mov	r2, r9
 8000dcc:	08c0      	lsrs	r0, r0, #3
 8000dce:	075b      	lsls	r3, r3, #29
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	08d1      	lsrs	r1, r2, #3
 8000dd4:	e62b      	b.n	8000a2e <__aeabi_dadd+0x25e>
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	4302      	orrs	r2, r0
 8000ddc:	d138      	bne.n	8000e50 <__aeabi_dadd+0x680>
 8000dde:	074a      	lsls	r2, r1, #29
 8000de0:	4313      	orrs	r3, r2
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	e646      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000de6:	464b      	mov	r3, r9
 8000de8:	464a      	mov	r2, r9
 8000dea:	08c0      	lsrs	r0, r0, #3
 8000dec:	075b      	lsls	r3, r3, #29
 8000dee:	4303      	orrs	r3, r0
 8000df0:	08d1      	lsrs	r1, r2, #3
 8000df2:	e61f      	b.n	8000a34 <__aeabi_dadd+0x264>
 8000df4:	181c      	adds	r4, r3, r0
 8000df6:	429c      	cmp	r4, r3
 8000df8:	419b      	sbcs	r3, r3
 8000dfa:	4449      	add	r1, r9
 8000dfc:	468a      	mov	sl, r1
 8000dfe:	425b      	negs	r3, r3
 8000e00:	449a      	add	sl, r3
 8000e02:	4653      	mov	r3, sl
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_dadd+0x63a>
 8000e08:	e607      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000e0a:	4652      	mov	r2, sl
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <__aeabi_dadd+0x6bc>)
 8000e0e:	2601      	movs	r6, #1
 8000e10:	401a      	ands	r2, r3
 8000e12:	4692      	mov	sl, r2
 8000e14:	e601      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000e16:	003c      	movs	r4, r7
 8000e18:	000e      	movs	r6, r1
 8000e1a:	3c20      	subs	r4, #32
 8000e1c:	40e6      	lsrs	r6, r4
 8000e1e:	2f20      	cmp	r7, #32
 8000e20:	d003      	beq.n	8000e2a <__aeabi_dadd+0x65a>
 8000e22:	2440      	movs	r4, #64	; 0x40
 8000e24:	1be4      	subs	r4, r4, r7
 8000e26:	40a1      	lsls	r1, r4
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	001c      	movs	r4, r3
 8000e2c:	1e63      	subs	r3, r4, #1
 8000e2e:	419c      	sbcs	r4, r3
 8000e30:	4334      	orrs	r4, r6
 8000e32:	e65e      	b.n	8000af2 <__aeabi_dadd+0x322>
 8000e34:	4443      	add	r3, r8
 8000e36:	4283      	cmp	r3, r0
 8000e38:	4180      	sbcs	r0, r0
 8000e3a:	4449      	add	r1, r9
 8000e3c:	468a      	mov	sl, r1
 8000e3e:	4240      	negs	r0, r0
 8000e40:	001c      	movs	r4, r3
 8000e42:	4482      	add	sl, r0
 8000e44:	e6bc      	b.n	8000bc0 <__aeabi_dadd+0x3f0>
 8000e46:	4653      	mov	r3, sl
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x67e>
 8000e4c:	e6a9      	b.n	8000ba2 <__aeabi_dadd+0x3d2>
 8000e4e:	e5e4      	b.n	8000a1a <__aeabi_dadd+0x24a>
 8000e50:	074a      	lsls	r2, r1, #29
 8000e52:	4313      	orrs	r3, r2
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	08c9      	lsrs	r1, r1, #3
 8000e58:	0312      	lsls	r2, r2, #12
 8000e5a:	4211      	tst	r1, r2
 8000e5c:	d009      	beq.n	8000e72 <__aeabi_dadd+0x6a2>
 8000e5e:	4648      	mov	r0, r9
 8000e60:	08c4      	lsrs	r4, r0, #3
 8000e62:	4214      	tst	r4, r2
 8000e64:	d105      	bne.n	8000e72 <__aeabi_dadd+0x6a2>
 8000e66:	4643      	mov	r3, r8
 8000e68:	4665      	mov	r5, ip
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	0742      	lsls	r2, r0, #29
 8000e70:	4313      	orrs	r3, r2
 8000e72:	0f5a      	lsrs	r2, r3, #29
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	0752      	lsls	r2, r2, #29
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	e5fa      	b.n	8000a74 <__aeabi_dadd+0x2a4>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	4a01      	ldr	r2, [pc, #4]	; (8000e88 <__aeabi_dadd+0x6b8>)
 8000e82:	001c      	movs	r4, r3
 8000e84:	e540      	b.n	8000908 <__aeabi_dadd+0x138>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	000007ff 	.word	0x000007ff
 8000e8c:	ff7fffff 	.word	0xff7fffff

08000e90 <__aeabi_ddiv>:
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	4657      	mov	r7, sl
 8000e94:	464e      	mov	r6, r9
 8000e96:	4645      	mov	r5, r8
 8000e98:	46de      	mov	lr, fp
 8000e9a:	b5e0      	push	{r5, r6, r7, lr}
 8000e9c:	030c      	lsls	r4, r1, #12
 8000e9e:	001f      	movs	r7, r3
 8000ea0:	004b      	lsls	r3, r1, #1
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	4692      	mov	sl, r2
 8000ea6:	0005      	movs	r5, r0
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	0b24      	lsrs	r4, r4, #12
 8000eac:	0d5b      	lsrs	r3, r3, #21
 8000eae:	0fce      	lsrs	r6, r1, #31
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_ddiv+0x26>
 8000eb4:	e152      	b.n	800115c <__aeabi_ddiv+0x2cc>
 8000eb6:	4ad2      	ldr	r2, [pc, #840]	; (8001200 <__aeabi_ddiv+0x370>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0x2e>
 8000ebc:	e16e      	b.n	800119c <__aeabi_ddiv+0x30c>
 8000ebe:	0f42      	lsrs	r2, r0, #29
 8000ec0:	00e4      	lsls	r4, r4, #3
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	0412      	lsls	r2, r2, #16
 8000ec8:	4322      	orrs	r2, r4
 8000eca:	4690      	mov	r8, r2
 8000ecc:	4acd      	ldr	r2, [pc, #820]	; (8001204 <__aeabi_ddiv+0x374>)
 8000ece:	00c5      	lsls	r5, r0, #3
 8000ed0:	4693      	mov	fp, r2
 8000ed2:	449b      	add	fp, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	033c      	lsls	r4, r7, #12
 8000edc:	007b      	lsls	r3, r7, #1
 8000ede:	4650      	mov	r0, sl
 8000ee0:	0b24      	lsrs	r4, r4, #12
 8000ee2:	0d5b      	lsrs	r3, r3, #21
 8000ee4:	0fff      	lsrs	r7, r7, #31
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d100      	bne.n	8000eec <__aeabi_ddiv+0x5c>
 8000eea:	e11a      	b.n	8001122 <__aeabi_ddiv+0x292>
 8000eec:	4ac4      	ldr	r2, [pc, #784]	; (8001200 <__aeabi_ddiv+0x370>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_ddiv+0x64>
 8000ef2:	e15e      	b.n	80011b2 <__aeabi_ddiv+0x322>
 8000ef4:	0f42      	lsrs	r2, r0, #29
 8000ef6:	00e4      	lsls	r4, r4, #3
 8000ef8:	4322      	orrs	r2, r4
 8000efa:	2480      	movs	r4, #128	; 0x80
 8000efc:	0424      	lsls	r4, r4, #16
 8000efe:	4314      	orrs	r4, r2
 8000f00:	4ac0      	ldr	r2, [pc, #768]	; (8001204 <__aeabi_ddiv+0x374>)
 8000f02:	00c1      	lsls	r1, r0, #3
 8000f04:	4694      	mov	ip, r2
 8000f06:	465a      	mov	r2, fp
 8000f08:	4463      	add	r3, ip
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	2000      	movs	r0, #0
 8000f10:	0033      	movs	r3, r6
 8000f12:	407b      	eors	r3, r7
 8000f14:	469a      	mov	sl, r3
 8000f16:	464b      	mov	r3, r9
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d827      	bhi.n	8000f6c <__aeabi_ddiv+0xdc>
 8000f1c:	4aba      	ldr	r2, [pc, #744]	; (8001208 <__aeabi_ddiv+0x378>)
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	58d3      	ldr	r3, [r2, r3]
 8000f22:	469f      	mov	pc, r3
 8000f24:	46b2      	mov	sl, r6
 8000f26:	9b00      	ldr	r3, [sp, #0]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d016      	beq.n	8000f5a <__aeabi_ddiv+0xca>
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_ddiv+0xa2>
 8000f30:	e287      	b.n	8001442 <__aeabi_ddiv+0x5b2>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d000      	beq.n	8000f38 <__aeabi_ddiv+0xa8>
 8000f36:	e0d5      	b.n	80010e4 <__aeabi_ddiv+0x254>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	051b      	lsls	r3, r3, #20
 8000f40:	4313      	orrs	r3, r2
 8000f42:	4652      	mov	r2, sl
 8000f44:	07d2      	lsls	r2, r2, #31
 8000f46:	4313      	orrs	r3, r2
 8000f48:	0028      	movs	r0, r5
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	b005      	add	sp, #20
 8000f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f50:	46bb      	mov	fp, r7
 8000f52:	46b2      	mov	sl, r6
 8000f54:	46a9      	mov	r9, r5
 8000f56:	46a0      	mov	r8, r4
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4ba8      	ldr	r3, [pc, #672]	; (8001200 <__aeabi_ddiv+0x370>)
 8000f60:	e7ed      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8000f62:	46ba      	mov	sl, r7
 8000f64:	46a0      	mov	r8, r4
 8000f66:	000d      	movs	r5, r1
 8000f68:	9000      	str	r0, [sp, #0]
 8000f6a:	e7dc      	b.n	8000f26 <__aeabi_ddiv+0x96>
 8000f6c:	4544      	cmp	r4, r8
 8000f6e:	d200      	bcs.n	8000f72 <__aeabi_ddiv+0xe2>
 8000f70:	e1c4      	b.n	80012fc <__aeabi_ddiv+0x46c>
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0xe6>
 8000f74:	e1bf      	b.n	80012f6 <__aeabi_ddiv+0x466>
 8000f76:	2301      	movs	r3, #1
 8000f78:	425b      	negs	r3, r3
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	002e      	movs	r6, r5
 8000f7e:	4640      	mov	r0, r8
 8000f80:	2500      	movs	r5, #0
 8000f82:	44e3      	add	fp, ip
 8000f84:	0223      	lsls	r3, r4, #8
 8000f86:	0e0c      	lsrs	r4, r1, #24
 8000f88:	431c      	orrs	r4, r3
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	0423      	lsls	r3, r4, #16
 8000f90:	020a      	lsls	r2, r1, #8
 8000f92:	0c1f      	lsrs	r7, r3, #16
 8000f94:	4649      	mov	r1, r9
 8000f96:	9200      	str	r2, [sp, #0]
 8000f98:	9701      	str	r7, [sp, #4]
 8000f9a:	f7ff f961 	bl	8000260 <__aeabi_uidivmod>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	437a      	muls	r2, r7
 8000fa2:	040b      	lsls	r3, r1, #16
 8000fa4:	0c31      	lsrs	r1, r6, #16
 8000fa6:	4680      	mov	r8, r0
 8000fa8:	4319      	orrs	r1, r3
 8000faa:	428a      	cmp	r2, r1
 8000fac:	d907      	bls.n	8000fbe <__aeabi_ddiv+0x12e>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	469c      	mov	ip, r3
 8000fb4:	1909      	adds	r1, r1, r4
 8000fb6:	44e0      	add	r8, ip
 8000fb8:	428c      	cmp	r4, r1
 8000fba:	d800      	bhi.n	8000fbe <__aeabi_ddiv+0x12e>
 8000fbc:	e201      	b.n	80013c2 <__aeabi_ddiv+0x532>
 8000fbe:	1a88      	subs	r0, r1, r2
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	f7ff f94d 	bl	8000260 <__aeabi_uidivmod>
 8000fc6:	9a01      	ldr	r2, [sp, #4]
 8000fc8:	0436      	lsls	r6, r6, #16
 8000fca:	4342      	muls	r2, r0
 8000fcc:	0409      	lsls	r1, r1, #16
 8000fce:	0c36      	lsrs	r6, r6, #16
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	430e      	orrs	r6, r1
 8000fd4:	42b2      	cmp	r2, r6
 8000fd6:	d904      	bls.n	8000fe2 <__aeabi_ddiv+0x152>
 8000fd8:	1936      	adds	r6, r6, r4
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	42b4      	cmp	r4, r6
 8000fde:	d800      	bhi.n	8000fe2 <__aeabi_ddiv+0x152>
 8000fe0:	e1e9      	b.n	80013b6 <__aeabi_ddiv+0x526>
 8000fe2:	1ab0      	subs	r0, r6, r2
 8000fe4:	4642      	mov	r2, r8
 8000fe6:	9e00      	ldr	r6, [sp, #0]
 8000fe8:	0412      	lsls	r2, r2, #16
 8000fea:	431a      	orrs	r2, r3
 8000fec:	0c33      	lsrs	r3, r6, #16
 8000fee:	001f      	movs	r7, r3
 8000ff0:	0c11      	lsrs	r1, r2, #16
 8000ff2:	4690      	mov	r8, r2
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	0413      	lsls	r3, r2, #16
 8000ff8:	0432      	lsls	r2, r6, #16
 8000ffa:	0c16      	lsrs	r6, r2, #16
 8000ffc:	0032      	movs	r2, r6
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	435a      	muls	r2, r3
 8001002:	9603      	str	r6, [sp, #12]
 8001004:	437b      	muls	r3, r7
 8001006:	434e      	muls	r6, r1
 8001008:	4379      	muls	r1, r7
 800100a:	0c17      	lsrs	r7, r2, #16
 800100c:	46bc      	mov	ip, r7
 800100e:	199b      	adds	r3, r3, r6
 8001010:	4463      	add	r3, ip
 8001012:	429e      	cmp	r6, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x18e>
 8001016:	2680      	movs	r6, #128	; 0x80
 8001018:	0276      	lsls	r6, r6, #9
 800101a:	46b4      	mov	ip, r6
 800101c:	4461      	add	r1, ip
 800101e:	0c1e      	lsrs	r6, r3, #16
 8001020:	1871      	adds	r1, r6, r1
 8001022:	0416      	lsls	r6, r2, #16
 8001024:	041b      	lsls	r3, r3, #16
 8001026:	0c36      	lsrs	r6, r6, #16
 8001028:	199e      	adds	r6, r3, r6
 800102a:	4288      	cmp	r0, r1
 800102c:	d302      	bcc.n	8001034 <__aeabi_ddiv+0x1a4>
 800102e:	d112      	bne.n	8001056 <__aeabi_ddiv+0x1c6>
 8001030:	42b5      	cmp	r5, r6
 8001032:	d210      	bcs.n	8001056 <__aeabi_ddiv+0x1c6>
 8001034:	4643      	mov	r3, r8
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	9b00      	ldr	r3, [sp, #0]
 800103a:	469c      	mov	ip, r3
 800103c:	4465      	add	r5, ip
 800103e:	001f      	movs	r7, r3
 8001040:	429d      	cmp	r5, r3
 8001042:	419b      	sbcs	r3, r3
 8001044:	425b      	negs	r3, r3
 8001046:	191b      	adds	r3, r3, r4
 8001048:	18c0      	adds	r0, r0, r3
 800104a:	4284      	cmp	r4, r0
 800104c:	d200      	bcs.n	8001050 <__aeabi_ddiv+0x1c0>
 800104e:	e19e      	b.n	800138e <__aeabi_ddiv+0x4fe>
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1c4>
 8001052:	e199      	b.n	8001388 <__aeabi_ddiv+0x4f8>
 8001054:	4690      	mov	r8, r2
 8001056:	1bae      	subs	r6, r5, r6
 8001058:	42b5      	cmp	r5, r6
 800105a:	41ad      	sbcs	r5, r5
 800105c:	1a40      	subs	r0, r0, r1
 800105e:	426d      	negs	r5, r5
 8001060:	1b40      	subs	r0, r0, r5
 8001062:	4284      	cmp	r4, r0
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x1d8>
 8001066:	e1d2      	b.n	800140e <__aeabi_ddiv+0x57e>
 8001068:	4649      	mov	r1, r9
 800106a:	f7ff f8f9 	bl	8000260 <__aeabi_uidivmod>
 800106e:	9a01      	ldr	r2, [sp, #4]
 8001070:	040b      	lsls	r3, r1, #16
 8001072:	4342      	muls	r2, r0
 8001074:	0c31      	lsrs	r1, r6, #16
 8001076:	0005      	movs	r5, r0
 8001078:	4319      	orrs	r1, r3
 800107a:	428a      	cmp	r2, r1
 800107c:	d900      	bls.n	8001080 <__aeabi_ddiv+0x1f0>
 800107e:	e16c      	b.n	800135a <__aeabi_ddiv+0x4ca>
 8001080:	1a88      	subs	r0, r1, r2
 8001082:	4649      	mov	r1, r9
 8001084:	f7ff f8ec 	bl	8000260 <__aeabi_uidivmod>
 8001088:	9a01      	ldr	r2, [sp, #4]
 800108a:	0436      	lsls	r6, r6, #16
 800108c:	4342      	muls	r2, r0
 800108e:	0409      	lsls	r1, r1, #16
 8001090:	0c36      	lsrs	r6, r6, #16
 8001092:	0003      	movs	r3, r0
 8001094:	430e      	orrs	r6, r1
 8001096:	42b2      	cmp	r2, r6
 8001098:	d900      	bls.n	800109c <__aeabi_ddiv+0x20c>
 800109a:	e153      	b.n	8001344 <__aeabi_ddiv+0x4b4>
 800109c:	9803      	ldr	r0, [sp, #12]
 800109e:	1ab6      	subs	r6, r6, r2
 80010a0:	0002      	movs	r2, r0
 80010a2:	042d      	lsls	r5, r5, #16
 80010a4:	431d      	orrs	r5, r3
 80010a6:	9f02      	ldr	r7, [sp, #8]
 80010a8:	042b      	lsls	r3, r5, #16
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	435a      	muls	r2, r3
 80010ae:	437b      	muls	r3, r7
 80010b0:	469c      	mov	ip, r3
 80010b2:	0c29      	lsrs	r1, r5, #16
 80010b4:	4348      	muls	r0, r1
 80010b6:	0c13      	lsrs	r3, r2, #16
 80010b8:	4484      	add	ip, r0
 80010ba:	4463      	add	r3, ip
 80010bc:	4379      	muls	r1, r7
 80010be:	4298      	cmp	r0, r3
 80010c0:	d903      	bls.n	80010ca <__aeabi_ddiv+0x23a>
 80010c2:	2080      	movs	r0, #128	; 0x80
 80010c4:	0240      	lsls	r0, r0, #9
 80010c6:	4684      	mov	ip, r0
 80010c8:	4461      	add	r1, ip
 80010ca:	0c18      	lsrs	r0, r3, #16
 80010cc:	0412      	lsls	r2, r2, #16
 80010ce:	041b      	lsls	r3, r3, #16
 80010d0:	0c12      	lsrs	r2, r2, #16
 80010d2:	1840      	adds	r0, r0, r1
 80010d4:	189b      	adds	r3, r3, r2
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d200      	bcs.n	80010dc <__aeabi_ddiv+0x24c>
 80010da:	e100      	b.n	80012de <__aeabi_ddiv+0x44e>
 80010dc:	d100      	bne.n	80010e0 <__aeabi_ddiv+0x250>
 80010de:	e0fb      	b.n	80012d8 <__aeabi_ddiv+0x448>
 80010e0:	2301      	movs	r3, #1
 80010e2:	431d      	orrs	r5, r3
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <__aeabi_ddiv+0x37c>)
 80010e6:	445b      	add	r3, fp
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	dc00      	bgt.n	80010ee <__aeabi_ddiv+0x25e>
 80010ec:	e0aa      	b.n	8001244 <__aeabi_ddiv+0x3b4>
 80010ee:	076a      	lsls	r2, r5, #29
 80010f0:	d000      	beq.n	80010f4 <__aeabi_ddiv+0x264>
 80010f2:	e13d      	b.n	8001370 <__aeabi_ddiv+0x4e0>
 80010f4:	08e9      	lsrs	r1, r5, #3
 80010f6:	4642      	mov	r2, r8
 80010f8:	01d2      	lsls	r2, r2, #7
 80010fa:	d506      	bpl.n	800110a <__aeabi_ddiv+0x27a>
 80010fc:	4642      	mov	r2, r8
 80010fe:	4b44      	ldr	r3, [pc, #272]	; (8001210 <__aeabi_ddiv+0x380>)
 8001100:	401a      	ands	r2, r3
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	4690      	mov	r8, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	445b      	add	r3, fp
 800110a:	4a42      	ldr	r2, [pc, #264]	; (8001214 <__aeabi_ddiv+0x384>)
 800110c:	4293      	cmp	r3, r2
 800110e:	dd00      	ble.n	8001112 <__aeabi_ddiv+0x282>
 8001110:	e723      	b.n	8000f5a <__aeabi_ddiv+0xca>
 8001112:	4642      	mov	r2, r8
 8001114:	055b      	lsls	r3, r3, #21
 8001116:	0755      	lsls	r5, r2, #29
 8001118:	0252      	lsls	r2, r2, #9
 800111a:	430d      	orrs	r5, r1
 800111c:	0b12      	lsrs	r2, r2, #12
 800111e:	0d5b      	lsrs	r3, r3, #21
 8001120:	e70d      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8001122:	4651      	mov	r1, sl
 8001124:	4321      	orrs	r1, r4
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x29a>
 8001128:	e07c      	b.n	8001224 <__aeabi_ddiv+0x394>
 800112a:	2c00      	cmp	r4, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x2a0>
 800112e:	e0fb      	b.n	8001328 <__aeabi_ddiv+0x498>
 8001130:	0020      	movs	r0, r4
 8001132:	f001 f977 	bl	8002424 <__clzsi2>
 8001136:	0002      	movs	r2, r0
 8001138:	3a0b      	subs	r2, #11
 800113a:	231d      	movs	r3, #29
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	4652      	mov	r2, sl
 8001140:	0001      	movs	r1, r0
 8001142:	40da      	lsrs	r2, r3
 8001144:	4653      	mov	r3, sl
 8001146:	3908      	subs	r1, #8
 8001148:	408b      	lsls	r3, r1
 800114a:	408c      	lsls	r4, r1
 800114c:	0019      	movs	r1, r3
 800114e:	4314      	orrs	r4, r2
 8001150:	4b31      	ldr	r3, [pc, #196]	; (8001218 <__aeabi_ddiv+0x388>)
 8001152:	4458      	add	r0, fp
 8001154:	469b      	mov	fp, r3
 8001156:	4483      	add	fp, r0
 8001158:	2000      	movs	r0, #0
 800115a:	e6d9      	b.n	8000f10 <__aeabi_ddiv+0x80>
 800115c:	0003      	movs	r3, r0
 800115e:	4323      	orrs	r3, r4
 8001160:	4698      	mov	r8, r3
 8001162:	d044      	beq.n	80011ee <__aeabi_ddiv+0x35e>
 8001164:	2c00      	cmp	r4, #0
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0x2da>
 8001168:	e0cf      	b.n	800130a <__aeabi_ddiv+0x47a>
 800116a:	0020      	movs	r0, r4
 800116c:	f001 f95a 	bl	8002424 <__clzsi2>
 8001170:	0001      	movs	r1, r0
 8001172:	0002      	movs	r2, r0
 8001174:	390b      	subs	r1, #11
 8001176:	231d      	movs	r3, #29
 8001178:	1a5b      	subs	r3, r3, r1
 800117a:	4649      	mov	r1, r9
 800117c:	0010      	movs	r0, r2
 800117e:	40d9      	lsrs	r1, r3
 8001180:	3808      	subs	r0, #8
 8001182:	4084      	lsls	r4, r0
 8001184:	000b      	movs	r3, r1
 8001186:	464d      	mov	r5, r9
 8001188:	4323      	orrs	r3, r4
 800118a:	4698      	mov	r8, r3
 800118c:	4085      	lsls	r5, r0
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <__aeabi_ddiv+0x38c>)
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	469b      	mov	fp, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4699      	mov	r9, r3
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	e69e      	b.n	8000eda <__aeabi_ddiv+0x4a>
 800119c:	0002      	movs	r2, r0
 800119e:	4322      	orrs	r2, r4
 80011a0:	4690      	mov	r8, r2
 80011a2:	d11d      	bne.n	80011e0 <__aeabi_ddiv+0x350>
 80011a4:	2208      	movs	r2, #8
 80011a6:	469b      	mov	fp, r3
 80011a8:	2302      	movs	r3, #2
 80011aa:	2500      	movs	r5, #0
 80011ac:	4691      	mov	r9, r2
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	e693      	b.n	8000eda <__aeabi_ddiv+0x4a>
 80011b2:	4651      	mov	r1, sl
 80011b4:	4321      	orrs	r1, r4
 80011b6:	d109      	bne.n	80011cc <__aeabi_ddiv+0x33c>
 80011b8:	2302      	movs	r3, #2
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	2400      	movs	r4, #0
 80011c6:	2002      	movs	r0, #2
 80011c8:	44e3      	add	fp, ip
 80011ca:	e6a1      	b.n	8000f10 <__aeabi_ddiv+0x80>
 80011cc:	2303      	movs	r3, #3
 80011ce:	464a      	mov	r2, r9
 80011d0:	431a      	orrs	r2, r3
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <__aeabi_ddiv+0x390>)
 80011d4:	4691      	mov	r9, r2
 80011d6:	469c      	mov	ip, r3
 80011d8:	4651      	mov	r1, sl
 80011da:	2003      	movs	r0, #3
 80011dc:	44e3      	add	fp, ip
 80011de:	e697      	b.n	8000f10 <__aeabi_ddiv+0x80>
 80011e0:	220c      	movs	r2, #12
 80011e2:	469b      	mov	fp, r3
 80011e4:	2303      	movs	r3, #3
 80011e6:	46a0      	mov	r8, r4
 80011e8:	4691      	mov	r9, r2
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	e675      	b.n	8000eda <__aeabi_ddiv+0x4a>
 80011ee:	2304      	movs	r3, #4
 80011f0:	4699      	mov	r9, r3
 80011f2:	2300      	movs	r3, #0
 80011f4:	469b      	mov	fp, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	2500      	movs	r5, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	e66d      	b.n	8000eda <__aeabi_ddiv+0x4a>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	000007ff 	.word	0x000007ff
 8001204:	fffffc01 	.word	0xfffffc01
 8001208:	0800cae8 	.word	0x0800cae8
 800120c:	000003ff 	.word	0x000003ff
 8001210:	feffffff 	.word	0xfeffffff
 8001214:	000007fe 	.word	0x000007fe
 8001218:	000003f3 	.word	0x000003f3
 800121c:	fffffc0d 	.word	0xfffffc0d
 8001220:	fffff801 	.word	0xfffff801
 8001224:	464a      	mov	r2, r9
 8001226:	2301      	movs	r3, #1
 8001228:	431a      	orrs	r2, r3
 800122a:	4691      	mov	r9, r2
 800122c:	2400      	movs	r4, #0
 800122e:	2001      	movs	r0, #1
 8001230:	e66e      	b.n	8000f10 <__aeabi_ddiv+0x80>
 8001232:	2300      	movs	r3, #0
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	469a      	mov	sl, r3
 8001238:	2500      	movs	r5, #0
 800123a:	4b88      	ldr	r3, [pc, #544]	; (800145c <__aeabi_ddiv+0x5cc>)
 800123c:	0312      	lsls	r2, r2, #12
 800123e:	e67e      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8001240:	2501      	movs	r5, #1
 8001242:	426d      	negs	r5, r5
 8001244:	2201      	movs	r2, #1
 8001246:	1ad2      	subs	r2, r2, r3
 8001248:	2a38      	cmp	r2, #56	; 0x38
 800124a:	dd00      	ble.n	800124e <__aeabi_ddiv+0x3be>
 800124c:	e674      	b.n	8000f38 <__aeabi_ddiv+0xa8>
 800124e:	2a1f      	cmp	r2, #31
 8001250:	dc00      	bgt.n	8001254 <__aeabi_ddiv+0x3c4>
 8001252:	e0bd      	b.n	80013d0 <__aeabi_ddiv+0x540>
 8001254:	211f      	movs	r1, #31
 8001256:	4249      	negs	r1, r1
 8001258:	1acb      	subs	r3, r1, r3
 800125a:	4641      	mov	r1, r8
 800125c:	40d9      	lsrs	r1, r3
 800125e:	000b      	movs	r3, r1
 8001260:	2a20      	cmp	r2, #32
 8001262:	d004      	beq.n	800126e <__aeabi_ddiv+0x3de>
 8001264:	4641      	mov	r1, r8
 8001266:	4a7e      	ldr	r2, [pc, #504]	; (8001460 <__aeabi_ddiv+0x5d0>)
 8001268:	445a      	add	r2, fp
 800126a:	4091      	lsls	r1, r2
 800126c:	430d      	orrs	r5, r1
 800126e:	0029      	movs	r1, r5
 8001270:	1e4a      	subs	r2, r1, #1
 8001272:	4191      	sbcs	r1, r2
 8001274:	4319      	orrs	r1, r3
 8001276:	2307      	movs	r3, #7
 8001278:	001d      	movs	r5, r3
 800127a:	2200      	movs	r2, #0
 800127c:	400d      	ands	r5, r1
 800127e:	420b      	tst	r3, r1
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x3f4>
 8001282:	e0d0      	b.n	8001426 <__aeabi_ddiv+0x596>
 8001284:	220f      	movs	r2, #15
 8001286:	2300      	movs	r3, #0
 8001288:	400a      	ands	r2, r1
 800128a:	2a04      	cmp	r2, #4
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x400>
 800128e:	e0c7      	b.n	8001420 <__aeabi_ddiv+0x590>
 8001290:	1d0a      	adds	r2, r1, #4
 8001292:	428a      	cmp	r2, r1
 8001294:	4189      	sbcs	r1, r1
 8001296:	4249      	negs	r1, r1
 8001298:	185b      	adds	r3, r3, r1
 800129a:	0011      	movs	r1, r2
 800129c:	021a      	lsls	r2, r3, #8
 800129e:	d400      	bmi.n	80012a2 <__aeabi_ddiv+0x412>
 80012a0:	e0be      	b.n	8001420 <__aeabi_ddiv+0x590>
 80012a2:	2301      	movs	r3, #1
 80012a4:	2200      	movs	r2, #0
 80012a6:	2500      	movs	r5, #0
 80012a8:	e649      	b.n	8000f3e <__aeabi_ddiv+0xae>
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	4643      	mov	r3, r8
 80012ae:	0312      	lsls	r2, r2, #12
 80012b0:	4213      	tst	r3, r2
 80012b2:	d008      	beq.n	80012c6 <__aeabi_ddiv+0x436>
 80012b4:	4214      	tst	r4, r2
 80012b6:	d106      	bne.n	80012c6 <__aeabi_ddiv+0x436>
 80012b8:	4322      	orrs	r2, r4
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46ba      	mov	sl, r7
 80012be:	000d      	movs	r5, r1
 80012c0:	4b66      	ldr	r3, [pc, #408]	; (800145c <__aeabi_ddiv+0x5cc>)
 80012c2:	0b12      	lsrs	r2, r2, #12
 80012c4:	e63b      	b.n	8000f3e <__aeabi_ddiv+0xae>
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	4643      	mov	r3, r8
 80012ca:	0312      	lsls	r2, r2, #12
 80012cc:	431a      	orrs	r2, r3
 80012ce:	0312      	lsls	r2, r2, #12
 80012d0:	46b2      	mov	sl, r6
 80012d2:	4b62      	ldr	r3, [pc, #392]	; (800145c <__aeabi_ddiv+0x5cc>)
 80012d4:	0b12      	lsrs	r2, r2, #12
 80012d6:	e632      	b.n	8000f3e <__aeabi_ddiv+0xae>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x44e>
 80012dc:	e702      	b.n	80010e4 <__aeabi_ddiv+0x254>
 80012de:	19a6      	adds	r6, r4, r6
 80012e0:	1e6a      	subs	r2, r5, #1
 80012e2:	42a6      	cmp	r6, r4
 80012e4:	d200      	bcs.n	80012e8 <__aeabi_ddiv+0x458>
 80012e6:	e089      	b.n	80013fc <__aeabi_ddiv+0x56c>
 80012e8:	4286      	cmp	r6, r0
 80012ea:	d200      	bcs.n	80012ee <__aeabi_ddiv+0x45e>
 80012ec:	e09f      	b.n	800142e <__aeabi_ddiv+0x59e>
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x462>
 80012f0:	e0af      	b.n	8001452 <__aeabi_ddiv+0x5c2>
 80012f2:	0015      	movs	r5, r2
 80012f4:	e6f4      	b.n	80010e0 <__aeabi_ddiv+0x250>
 80012f6:	42a9      	cmp	r1, r5
 80012f8:	d900      	bls.n	80012fc <__aeabi_ddiv+0x46c>
 80012fa:	e63c      	b.n	8000f76 <__aeabi_ddiv+0xe6>
 80012fc:	4643      	mov	r3, r8
 80012fe:	07de      	lsls	r6, r3, #31
 8001300:	0858      	lsrs	r0, r3, #1
 8001302:	086b      	lsrs	r3, r5, #1
 8001304:	431e      	orrs	r6, r3
 8001306:	07ed      	lsls	r5, r5, #31
 8001308:	e63c      	b.n	8000f84 <__aeabi_ddiv+0xf4>
 800130a:	f001 f88b 	bl	8002424 <__clzsi2>
 800130e:	0001      	movs	r1, r0
 8001310:	0002      	movs	r2, r0
 8001312:	3115      	adds	r1, #21
 8001314:	3220      	adds	r2, #32
 8001316:	291c      	cmp	r1, #28
 8001318:	dc00      	bgt.n	800131c <__aeabi_ddiv+0x48c>
 800131a:	e72c      	b.n	8001176 <__aeabi_ddiv+0x2e6>
 800131c:	464b      	mov	r3, r9
 800131e:	3808      	subs	r0, #8
 8001320:	4083      	lsls	r3, r0
 8001322:	2500      	movs	r5, #0
 8001324:	4698      	mov	r8, r3
 8001326:	e732      	b.n	800118e <__aeabi_ddiv+0x2fe>
 8001328:	f001 f87c 	bl	8002424 <__clzsi2>
 800132c:	0003      	movs	r3, r0
 800132e:	001a      	movs	r2, r3
 8001330:	3215      	adds	r2, #21
 8001332:	3020      	adds	r0, #32
 8001334:	2a1c      	cmp	r2, #28
 8001336:	dc00      	bgt.n	800133a <__aeabi_ddiv+0x4aa>
 8001338:	e6ff      	b.n	800113a <__aeabi_ddiv+0x2aa>
 800133a:	4654      	mov	r4, sl
 800133c:	3b08      	subs	r3, #8
 800133e:	2100      	movs	r1, #0
 8001340:	409c      	lsls	r4, r3
 8001342:	e705      	b.n	8001150 <__aeabi_ddiv+0x2c0>
 8001344:	1936      	adds	r6, r6, r4
 8001346:	3b01      	subs	r3, #1
 8001348:	42b4      	cmp	r4, r6
 800134a:	d900      	bls.n	800134e <__aeabi_ddiv+0x4be>
 800134c:	e6a6      	b.n	800109c <__aeabi_ddiv+0x20c>
 800134e:	42b2      	cmp	r2, r6
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x4c4>
 8001352:	e6a3      	b.n	800109c <__aeabi_ddiv+0x20c>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	1936      	adds	r6, r6, r4
 8001358:	e6a0      	b.n	800109c <__aeabi_ddiv+0x20c>
 800135a:	1909      	adds	r1, r1, r4
 800135c:	3d01      	subs	r5, #1
 800135e:	428c      	cmp	r4, r1
 8001360:	d900      	bls.n	8001364 <__aeabi_ddiv+0x4d4>
 8001362:	e68d      	b.n	8001080 <__aeabi_ddiv+0x1f0>
 8001364:	428a      	cmp	r2, r1
 8001366:	d800      	bhi.n	800136a <__aeabi_ddiv+0x4da>
 8001368:	e68a      	b.n	8001080 <__aeabi_ddiv+0x1f0>
 800136a:	1e85      	subs	r5, r0, #2
 800136c:	1909      	adds	r1, r1, r4
 800136e:	e687      	b.n	8001080 <__aeabi_ddiv+0x1f0>
 8001370:	220f      	movs	r2, #15
 8001372:	402a      	ands	r2, r5
 8001374:	2a04      	cmp	r2, #4
 8001376:	d100      	bne.n	800137a <__aeabi_ddiv+0x4ea>
 8001378:	e6bc      	b.n	80010f4 <__aeabi_ddiv+0x264>
 800137a:	1d29      	adds	r1, r5, #4
 800137c:	42a9      	cmp	r1, r5
 800137e:	41ad      	sbcs	r5, r5
 8001380:	426d      	negs	r5, r5
 8001382:	08c9      	lsrs	r1, r1, #3
 8001384:	44a8      	add	r8, r5
 8001386:	e6b6      	b.n	80010f6 <__aeabi_ddiv+0x266>
 8001388:	42af      	cmp	r7, r5
 800138a:	d900      	bls.n	800138e <__aeabi_ddiv+0x4fe>
 800138c:	e662      	b.n	8001054 <__aeabi_ddiv+0x1c4>
 800138e:	4281      	cmp	r1, r0
 8001390:	d804      	bhi.n	800139c <__aeabi_ddiv+0x50c>
 8001392:	d000      	beq.n	8001396 <__aeabi_ddiv+0x506>
 8001394:	e65e      	b.n	8001054 <__aeabi_ddiv+0x1c4>
 8001396:	42ae      	cmp	r6, r5
 8001398:	d800      	bhi.n	800139c <__aeabi_ddiv+0x50c>
 800139a:	e65b      	b.n	8001054 <__aeabi_ddiv+0x1c4>
 800139c:	2302      	movs	r3, #2
 800139e:	425b      	negs	r3, r3
 80013a0:	469c      	mov	ip, r3
 80013a2:	9b00      	ldr	r3, [sp, #0]
 80013a4:	44e0      	add	r8, ip
 80013a6:	469c      	mov	ip, r3
 80013a8:	4465      	add	r5, ip
 80013aa:	429d      	cmp	r5, r3
 80013ac:	419b      	sbcs	r3, r3
 80013ae:	425b      	negs	r3, r3
 80013b0:	191b      	adds	r3, r3, r4
 80013b2:	18c0      	adds	r0, r0, r3
 80013b4:	e64f      	b.n	8001056 <__aeabi_ddiv+0x1c6>
 80013b6:	42b2      	cmp	r2, r6
 80013b8:	d800      	bhi.n	80013bc <__aeabi_ddiv+0x52c>
 80013ba:	e612      	b.n	8000fe2 <__aeabi_ddiv+0x152>
 80013bc:	1e83      	subs	r3, r0, #2
 80013be:	1936      	adds	r6, r6, r4
 80013c0:	e60f      	b.n	8000fe2 <__aeabi_ddiv+0x152>
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d800      	bhi.n	80013c8 <__aeabi_ddiv+0x538>
 80013c6:	e5fa      	b.n	8000fbe <__aeabi_ddiv+0x12e>
 80013c8:	1e83      	subs	r3, r0, #2
 80013ca:	4698      	mov	r8, r3
 80013cc:	1909      	adds	r1, r1, r4
 80013ce:	e5f6      	b.n	8000fbe <__aeabi_ddiv+0x12e>
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <__aeabi_ddiv+0x5d4>)
 80013d2:	0028      	movs	r0, r5
 80013d4:	445b      	add	r3, fp
 80013d6:	4641      	mov	r1, r8
 80013d8:	409d      	lsls	r5, r3
 80013da:	4099      	lsls	r1, r3
 80013dc:	40d0      	lsrs	r0, r2
 80013de:	1e6b      	subs	r3, r5, #1
 80013e0:	419d      	sbcs	r5, r3
 80013e2:	4643      	mov	r3, r8
 80013e4:	4301      	orrs	r1, r0
 80013e6:	4329      	orrs	r1, r5
 80013e8:	40d3      	lsrs	r3, r2
 80013ea:	074a      	lsls	r2, r1, #29
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x560>
 80013ee:	e755      	b.n	800129c <__aeabi_ddiv+0x40c>
 80013f0:	220f      	movs	r2, #15
 80013f2:	400a      	ands	r2, r1
 80013f4:	2a04      	cmp	r2, #4
 80013f6:	d000      	beq.n	80013fa <__aeabi_ddiv+0x56a>
 80013f8:	e74a      	b.n	8001290 <__aeabi_ddiv+0x400>
 80013fa:	e74f      	b.n	800129c <__aeabi_ddiv+0x40c>
 80013fc:	0015      	movs	r5, r2
 80013fe:	4286      	cmp	r6, r0
 8001400:	d000      	beq.n	8001404 <__aeabi_ddiv+0x574>
 8001402:	e66d      	b.n	80010e0 <__aeabi_ddiv+0x250>
 8001404:	9a00      	ldr	r2, [sp, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d000      	beq.n	800140c <__aeabi_ddiv+0x57c>
 800140a:	e669      	b.n	80010e0 <__aeabi_ddiv+0x250>
 800140c:	e66a      	b.n	80010e4 <__aeabi_ddiv+0x254>
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <__aeabi_ddiv+0x5d8>)
 8001410:	445b      	add	r3, fp
 8001412:	2b00      	cmp	r3, #0
 8001414:	dc00      	bgt.n	8001418 <__aeabi_ddiv+0x588>
 8001416:	e713      	b.n	8001240 <__aeabi_ddiv+0x3b0>
 8001418:	2501      	movs	r5, #1
 800141a:	2100      	movs	r1, #0
 800141c:	44a8      	add	r8, r5
 800141e:	e66a      	b.n	80010f6 <__aeabi_ddiv+0x266>
 8001420:	075d      	lsls	r5, r3, #29
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	0b1a      	lsrs	r2, r3, #12
 8001426:	08c9      	lsrs	r1, r1, #3
 8001428:	2300      	movs	r3, #0
 800142a:	430d      	orrs	r5, r1
 800142c:	e587      	b.n	8000f3e <__aeabi_ddiv+0xae>
 800142e:	9900      	ldr	r1, [sp, #0]
 8001430:	3d02      	subs	r5, #2
 8001432:	004a      	lsls	r2, r1, #1
 8001434:	428a      	cmp	r2, r1
 8001436:	41bf      	sbcs	r7, r7
 8001438:	427f      	negs	r7, r7
 800143a:	193f      	adds	r7, r7, r4
 800143c:	19f6      	adds	r6, r6, r7
 800143e:	9200      	str	r2, [sp, #0]
 8001440:	e7dd      	b.n	80013fe <__aeabi_ddiv+0x56e>
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	4643      	mov	r3, r8
 8001446:	0312      	lsls	r2, r2, #12
 8001448:	431a      	orrs	r2, r3
 800144a:	0312      	lsls	r2, r2, #12
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <__aeabi_ddiv+0x5cc>)
 800144e:	0b12      	lsrs	r2, r2, #12
 8001450:	e575      	b.n	8000f3e <__aeabi_ddiv+0xae>
 8001452:	9900      	ldr	r1, [sp, #0]
 8001454:	4299      	cmp	r1, r3
 8001456:	d3ea      	bcc.n	800142e <__aeabi_ddiv+0x59e>
 8001458:	0015      	movs	r5, r2
 800145a:	e7d3      	b.n	8001404 <__aeabi_ddiv+0x574>
 800145c:	000007ff 	.word	0x000007ff
 8001460:	0000043e 	.word	0x0000043e
 8001464:	0000041e 	.word	0x0000041e
 8001468:	000003ff 	.word	0x000003ff

0800146c <__eqdf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	464e      	mov	r6, r9
 8001470:	4645      	mov	r5, r8
 8001472:	46de      	mov	lr, fp
 8001474:	4657      	mov	r7, sl
 8001476:	4690      	mov	r8, r2
 8001478:	b5e0      	push	{r5, r6, r7, lr}
 800147a:	0017      	movs	r7, r2
 800147c:	031a      	lsls	r2, r3, #12
 800147e:	0b12      	lsrs	r2, r2, #12
 8001480:	0005      	movs	r5, r0
 8001482:	4684      	mov	ip, r0
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <__eqdf2+0x80>)
 8001486:	030e      	lsls	r6, r1, #12
 8001488:	004c      	lsls	r4, r1, #1
 800148a:	4691      	mov	r9, r2
 800148c:	005a      	lsls	r2, r3, #1
 800148e:	0fdb      	lsrs	r3, r3, #31
 8001490:	469b      	mov	fp, r3
 8001492:	0b36      	lsrs	r6, r6, #12
 8001494:	0d64      	lsrs	r4, r4, #21
 8001496:	0fc9      	lsrs	r1, r1, #31
 8001498:	0d52      	lsrs	r2, r2, #21
 800149a:	4284      	cmp	r4, r0
 800149c:	d019      	beq.n	80014d2 <__eqdf2+0x66>
 800149e:	4282      	cmp	r2, r0
 80014a0:	d010      	beq.n	80014c4 <__eqdf2+0x58>
 80014a2:	2001      	movs	r0, #1
 80014a4:	4294      	cmp	r4, r2
 80014a6:	d10e      	bne.n	80014c6 <__eqdf2+0x5a>
 80014a8:	454e      	cmp	r6, r9
 80014aa:	d10c      	bne.n	80014c6 <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	45c4      	cmp	ip, r8
 80014b0:	d109      	bne.n	80014c6 <__eqdf2+0x5a>
 80014b2:	4559      	cmp	r1, fp
 80014b4:	d017      	beq.n	80014e6 <__eqdf2+0x7a>
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	d105      	bne.n	80014c6 <__eqdf2+0x5a>
 80014ba:	0030      	movs	r0, r6
 80014bc:	4328      	orrs	r0, r5
 80014be:	1e43      	subs	r3, r0, #1
 80014c0:	4198      	sbcs	r0, r3
 80014c2:	e000      	b.n	80014c6 <__eqdf2+0x5a>
 80014c4:	2001      	movs	r0, #1
 80014c6:	bcf0      	pop	{r4, r5, r6, r7}
 80014c8:	46bb      	mov	fp, r7
 80014ca:	46b2      	mov	sl, r6
 80014cc:	46a9      	mov	r9, r5
 80014ce:	46a0      	mov	r8, r4
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	0033      	movs	r3, r6
 80014d4:	2001      	movs	r0, #1
 80014d6:	432b      	orrs	r3, r5
 80014d8:	d1f5      	bne.n	80014c6 <__eqdf2+0x5a>
 80014da:	42a2      	cmp	r2, r4
 80014dc:	d1f3      	bne.n	80014c6 <__eqdf2+0x5a>
 80014de:	464b      	mov	r3, r9
 80014e0:	433b      	orrs	r3, r7
 80014e2:	d1f0      	bne.n	80014c6 <__eqdf2+0x5a>
 80014e4:	e7e2      	b.n	80014ac <__eqdf2+0x40>
 80014e6:	2000      	movs	r0, #0
 80014e8:	e7ed      	b.n	80014c6 <__eqdf2+0x5a>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	000007ff 	.word	0x000007ff

080014f0 <__gedf2>:
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	4647      	mov	r7, r8
 80014f4:	46ce      	mov	lr, r9
 80014f6:	0004      	movs	r4, r0
 80014f8:	0018      	movs	r0, r3
 80014fa:	0016      	movs	r6, r2
 80014fc:	031b      	lsls	r3, r3, #12
 80014fe:	0b1b      	lsrs	r3, r3, #12
 8001500:	4d2d      	ldr	r5, [pc, #180]	; (80015b8 <__gedf2+0xc8>)
 8001502:	004a      	lsls	r2, r1, #1
 8001504:	4699      	mov	r9, r3
 8001506:	b580      	push	{r7, lr}
 8001508:	0043      	lsls	r3, r0, #1
 800150a:	030f      	lsls	r7, r1, #12
 800150c:	46a4      	mov	ip, r4
 800150e:	46b0      	mov	r8, r6
 8001510:	0b3f      	lsrs	r7, r7, #12
 8001512:	0d52      	lsrs	r2, r2, #21
 8001514:	0fc9      	lsrs	r1, r1, #31
 8001516:	0d5b      	lsrs	r3, r3, #21
 8001518:	0fc0      	lsrs	r0, r0, #31
 800151a:	42aa      	cmp	r2, r5
 800151c:	d021      	beq.n	8001562 <__gedf2+0x72>
 800151e:	42ab      	cmp	r3, r5
 8001520:	d013      	beq.n	800154a <__gedf2+0x5a>
 8001522:	2a00      	cmp	r2, #0
 8001524:	d122      	bne.n	800156c <__gedf2+0x7c>
 8001526:	433c      	orrs	r4, r7
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <__gedf2+0x42>
 800152c:	464d      	mov	r5, r9
 800152e:	432e      	orrs	r6, r5
 8001530:	d022      	beq.n	8001578 <__gedf2+0x88>
 8001532:	2c00      	cmp	r4, #0
 8001534:	d010      	beq.n	8001558 <__gedf2+0x68>
 8001536:	4281      	cmp	r1, r0
 8001538:	d022      	beq.n	8001580 <__gedf2+0x90>
 800153a:	2002      	movs	r0, #2
 800153c:	3901      	subs	r1, #1
 800153e:	4008      	ands	r0, r1
 8001540:	3801      	subs	r0, #1
 8001542:	bcc0      	pop	{r6, r7}
 8001544:	46b9      	mov	r9, r7
 8001546:	46b0      	mov	r8, r6
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	464d      	mov	r5, r9
 800154c:	432e      	orrs	r6, r5
 800154e:	d129      	bne.n	80015a4 <__gedf2+0xb4>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d1f0      	bne.n	8001536 <__gedf2+0x46>
 8001554:	433c      	orrs	r4, r7
 8001556:	d1ee      	bne.n	8001536 <__gedf2+0x46>
 8001558:	2800      	cmp	r0, #0
 800155a:	d1f2      	bne.n	8001542 <__gedf2+0x52>
 800155c:	2001      	movs	r0, #1
 800155e:	4240      	negs	r0, r0
 8001560:	e7ef      	b.n	8001542 <__gedf2+0x52>
 8001562:	003d      	movs	r5, r7
 8001564:	4325      	orrs	r5, r4
 8001566:	d11d      	bne.n	80015a4 <__gedf2+0xb4>
 8001568:	4293      	cmp	r3, r2
 800156a:	d0ee      	beq.n	800154a <__gedf2+0x5a>
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e2      	bne.n	8001536 <__gedf2+0x46>
 8001570:	464c      	mov	r4, r9
 8001572:	4326      	orrs	r6, r4
 8001574:	d1df      	bne.n	8001536 <__gedf2+0x46>
 8001576:	e7e0      	b.n	800153a <__gedf2+0x4a>
 8001578:	2000      	movs	r0, #0
 800157a:	2c00      	cmp	r4, #0
 800157c:	d0e1      	beq.n	8001542 <__gedf2+0x52>
 800157e:	e7dc      	b.n	800153a <__gedf2+0x4a>
 8001580:	429a      	cmp	r2, r3
 8001582:	dc0a      	bgt.n	800159a <__gedf2+0xaa>
 8001584:	dbe8      	blt.n	8001558 <__gedf2+0x68>
 8001586:	454f      	cmp	r7, r9
 8001588:	d8d7      	bhi.n	800153a <__gedf2+0x4a>
 800158a:	d00e      	beq.n	80015aa <__gedf2+0xba>
 800158c:	2000      	movs	r0, #0
 800158e:	454f      	cmp	r7, r9
 8001590:	d2d7      	bcs.n	8001542 <__gedf2+0x52>
 8001592:	2900      	cmp	r1, #0
 8001594:	d0e2      	beq.n	800155c <__gedf2+0x6c>
 8001596:	0008      	movs	r0, r1
 8001598:	e7d3      	b.n	8001542 <__gedf2+0x52>
 800159a:	4243      	negs	r3, r0
 800159c:	4158      	adcs	r0, r3
 800159e:	0040      	lsls	r0, r0, #1
 80015a0:	3801      	subs	r0, #1
 80015a2:	e7ce      	b.n	8001542 <__gedf2+0x52>
 80015a4:	2002      	movs	r0, #2
 80015a6:	4240      	negs	r0, r0
 80015a8:	e7cb      	b.n	8001542 <__gedf2+0x52>
 80015aa:	45c4      	cmp	ip, r8
 80015ac:	d8c5      	bhi.n	800153a <__gedf2+0x4a>
 80015ae:	2000      	movs	r0, #0
 80015b0:	45c4      	cmp	ip, r8
 80015b2:	d2c6      	bcs.n	8001542 <__gedf2+0x52>
 80015b4:	e7ed      	b.n	8001592 <__gedf2+0xa2>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	000007ff 	.word	0x000007ff

080015bc <__ledf2>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	4647      	mov	r7, r8
 80015c0:	46ce      	mov	lr, r9
 80015c2:	0004      	movs	r4, r0
 80015c4:	0018      	movs	r0, r3
 80015c6:	0016      	movs	r6, r2
 80015c8:	031b      	lsls	r3, r3, #12
 80015ca:	0b1b      	lsrs	r3, r3, #12
 80015cc:	4d2c      	ldr	r5, [pc, #176]	; (8001680 <__ledf2+0xc4>)
 80015ce:	004a      	lsls	r2, r1, #1
 80015d0:	4699      	mov	r9, r3
 80015d2:	b580      	push	{r7, lr}
 80015d4:	0043      	lsls	r3, r0, #1
 80015d6:	030f      	lsls	r7, r1, #12
 80015d8:	46a4      	mov	ip, r4
 80015da:	46b0      	mov	r8, r6
 80015dc:	0b3f      	lsrs	r7, r7, #12
 80015de:	0d52      	lsrs	r2, r2, #21
 80015e0:	0fc9      	lsrs	r1, r1, #31
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	0fc0      	lsrs	r0, r0, #31
 80015e6:	42aa      	cmp	r2, r5
 80015e8:	d00d      	beq.n	8001606 <__ledf2+0x4a>
 80015ea:	42ab      	cmp	r3, r5
 80015ec:	d010      	beq.n	8001610 <__ledf2+0x54>
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d127      	bne.n	8001642 <__ledf2+0x86>
 80015f2:	433c      	orrs	r4, r7
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <__ledf2+0x60>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10e      	bne.n	800161c <__ledf2+0x60>
 80015fe:	2000      	movs	r0, #0
 8001600:	2c00      	cmp	r4, #0
 8001602:	d015      	beq.n	8001630 <__ledf2+0x74>
 8001604:	e00e      	b.n	8001624 <__ledf2+0x68>
 8001606:	003d      	movs	r5, r7
 8001608:	4325      	orrs	r5, r4
 800160a:	d110      	bne.n	800162e <__ledf2+0x72>
 800160c:	4293      	cmp	r3, r2
 800160e:	d118      	bne.n	8001642 <__ledf2+0x86>
 8001610:	464d      	mov	r5, r9
 8001612:	432e      	orrs	r6, r5
 8001614:	d10b      	bne.n	800162e <__ledf2+0x72>
 8001616:	2a00      	cmp	r2, #0
 8001618:	d102      	bne.n	8001620 <__ledf2+0x64>
 800161a:	433c      	orrs	r4, r7
 800161c:	2c00      	cmp	r4, #0
 800161e:	d00b      	beq.n	8001638 <__ledf2+0x7c>
 8001620:	4281      	cmp	r1, r0
 8001622:	d014      	beq.n	800164e <__ledf2+0x92>
 8001624:	2002      	movs	r0, #2
 8001626:	3901      	subs	r1, #1
 8001628:	4008      	ands	r0, r1
 800162a:	3801      	subs	r0, #1
 800162c:	e000      	b.n	8001630 <__ledf2+0x74>
 800162e:	2002      	movs	r0, #2
 8001630:	bcc0      	pop	{r6, r7}
 8001632:	46b9      	mov	r9, r7
 8001634:	46b0      	mov	r8, r6
 8001636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001638:	2800      	cmp	r0, #0
 800163a:	d1f9      	bne.n	8001630 <__ledf2+0x74>
 800163c:	2001      	movs	r0, #1
 800163e:	4240      	negs	r0, r0
 8001640:	e7f6      	b.n	8001630 <__ledf2+0x74>
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ec      	bne.n	8001620 <__ledf2+0x64>
 8001646:	464c      	mov	r4, r9
 8001648:	4326      	orrs	r6, r4
 800164a:	d1e9      	bne.n	8001620 <__ledf2+0x64>
 800164c:	e7ea      	b.n	8001624 <__ledf2+0x68>
 800164e:	429a      	cmp	r2, r3
 8001650:	dd04      	ble.n	800165c <__ledf2+0xa0>
 8001652:	4243      	negs	r3, r0
 8001654:	4158      	adcs	r0, r3
 8001656:	0040      	lsls	r0, r0, #1
 8001658:	3801      	subs	r0, #1
 800165a:	e7e9      	b.n	8001630 <__ledf2+0x74>
 800165c:	429a      	cmp	r2, r3
 800165e:	dbeb      	blt.n	8001638 <__ledf2+0x7c>
 8001660:	454f      	cmp	r7, r9
 8001662:	d8df      	bhi.n	8001624 <__ledf2+0x68>
 8001664:	d006      	beq.n	8001674 <__ledf2+0xb8>
 8001666:	2000      	movs	r0, #0
 8001668:	454f      	cmp	r7, r9
 800166a:	d2e1      	bcs.n	8001630 <__ledf2+0x74>
 800166c:	2900      	cmp	r1, #0
 800166e:	d0e5      	beq.n	800163c <__ledf2+0x80>
 8001670:	0008      	movs	r0, r1
 8001672:	e7dd      	b.n	8001630 <__ledf2+0x74>
 8001674:	45c4      	cmp	ip, r8
 8001676:	d8d5      	bhi.n	8001624 <__ledf2+0x68>
 8001678:	2000      	movs	r0, #0
 800167a:	45c4      	cmp	ip, r8
 800167c:	d2d8      	bcs.n	8001630 <__ledf2+0x74>
 800167e:	e7f5      	b.n	800166c <__ledf2+0xb0>
 8001680:	000007ff 	.word	0x000007ff

08001684 <__aeabi_dmul>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	4645      	mov	r5, r8
 8001688:	46de      	mov	lr, fp
 800168a:	4657      	mov	r7, sl
 800168c:	464e      	mov	r6, r9
 800168e:	b5e0      	push	{r5, r6, r7, lr}
 8001690:	001f      	movs	r7, r3
 8001692:	030b      	lsls	r3, r1, #12
 8001694:	0b1b      	lsrs	r3, r3, #12
 8001696:	469b      	mov	fp, r3
 8001698:	004d      	lsls	r5, r1, #1
 800169a:	0fcb      	lsrs	r3, r1, #31
 800169c:	0004      	movs	r4, r0
 800169e:	4691      	mov	r9, r2
 80016a0:	4698      	mov	r8, r3
 80016a2:	b087      	sub	sp, #28
 80016a4:	0d6d      	lsrs	r5, r5, #21
 80016a6:	d100      	bne.n	80016aa <__aeabi_dmul+0x26>
 80016a8:	e1cd      	b.n	8001a46 <__aeabi_dmul+0x3c2>
 80016aa:	4bce      	ldr	r3, [pc, #824]	; (80019e4 <__aeabi_dmul+0x360>)
 80016ac:	429d      	cmp	r5, r3
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2e>
 80016b0:	e1e9      	b.n	8001a86 <__aeabi_dmul+0x402>
 80016b2:	465a      	mov	r2, fp
 80016b4:	0f43      	lsrs	r3, r0, #29
 80016b6:	00d2      	lsls	r2, r2, #3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	00c3      	lsls	r3, r0, #3
 80016c2:	469a      	mov	sl, r3
 80016c4:	4bc8      	ldr	r3, [pc, #800]	; (80019e8 <__aeabi_dmul+0x364>)
 80016c6:	4693      	mov	fp, r2
 80016c8:	469c      	mov	ip, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	2600      	movs	r6, #0
 80016ce:	4465      	add	r5, ip
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	033c      	lsls	r4, r7, #12
 80016d4:	007b      	lsls	r3, r7, #1
 80016d6:	4648      	mov	r0, r9
 80016d8:	0b24      	lsrs	r4, r4, #12
 80016da:	0d5b      	lsrs	r3, r3, #21
 80016dc:	0fff      	lsrs	r7, r7, #31
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dmul+0x60>
 80016e2:	e189      	b.n	80019f8 <__aeabi_dmul+0x374>
 80016e4:	4abf      	ldr	r2, [pc, #764]	; (80019e4 <__aeabi_dmul+0x360>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <__aeabi_dmul+0x9a>
 80016ea:	0f42      	lsrs	r2, r0, #29
 80016ec:	00e4      	lsls	r4, r4, #3
 80016ee:	4322      	orrs	r2, r4
 80016f0:	2480      	movs	r4, #128	; 0x80
 80016f2:	0424      	lsls	r4, r4, #16
 80016f4:	4314      	orrs	r4, r2
 80016f6:	4abc      	ldr	r2, [pc, #752]	; (80019e8 <__aeabi_dmul+0x364>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4694      	mov	ip, r2
 80016fc:	4642      	mov	r2, r8
 80016fe:	4463      	add	r3, ip
 8001700:	195b      	adds	r3, r3, r5
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	9b01      	ldr	r3, [sp, #4]
 8001706:	407a      	eors	r2, r7
 8001708:	3301      	adds	r3, #1
 800170a:	00c0      	lsls	r0, r0, #3
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2e0a      	cmp	r6, #10
 8001712:	dd1c      	ble.n	800174e <__aeabi_dmul+0xca>
 8001714:	003a      	movs	r2, r7
 8001716:	2e0b      	cmp	r6, #11
 8001718:	d05e      	beq.n	80017d8 <__aeabi_dmul+0x154>
 800171a:	4647      	mov	r7, r8
 800171c:	e056      	b.n	80017cc <__aeabi_dmul+0x148>
 800171e:	4649      	mov	r1, r9
 8001720:	4bb0      	ldr	r3, [pc, #704]	; (80019e4 <__aeabi_dmul+0x360>)
 8001722:	4321      	orrs	r1, r4
 8001724:	18eb      	adds	r3, r5, r3
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2900      	cmp	r1, #0
 800172a:	d12a      	bne.n	8001782 <__aeabi_dmul+0xfe>
 800172c:	2080      	movs	r0, #128	; 0x80
 800172e:	2202      	movs	r2, #2
 8001730:	0100      	lsls	r0, r0, #4
 8001732:	002b      	movs	r3, r5
 8001734:	4684      	mov	ip, r0
 8001736:	4316      	orrs	r6, r2
 8001738:	4642      	mov	r2, r8
 800173a:	4463      	add	r3, ip
 800173c:	407a      	eors	r2, r7
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2e0a      	cmp	r6, #10
 8001744:	dd00      	ble.n	8001748 <__aeabi_dmul+0xc4>
 8001746:	e231      	b.n	8001bac <__aeabi_dmul+0x528>
 8001748:	2000      	movs	r0, #0
 800174a:	2400      	movs	r4, #0
 800174c:	2102      	movs	r1, #2
 800174e:	2e02      	cmp	r6, #2
 8001750:	dc26      	bgt.n	80017a0 <__aeabi_dmul+0x11c>
 8001752:	3e01      	subs	r6, #1
 8001754:	2e01      	cmp	r6, #1
 8001756:	d852      	bhi.n	80017fe <__aeabi_dmul+0x17a>
 8001758:	2902      	cmp	r1, #2
 800175a:	d04c      	beq.n	80017f6 <__aeabi_dmul+0x172>
 800175c:	2901      	cmp	r1, #1
 800175e:	d000      	beq.n	8001762 <__aeabi_dmul+0xde>
 8001760:	e118      	b.n	8001994 <__aeabi_dmul+0x310>
 8001762:	2300      	movs	r3, #0
 8001764:	2400      	movs	r4, #0
 8001766:	2500      	movs	r5, #0
 8001768:	051b      	lsls	r3, r3, #20
 800176a:	4323      	orrs	r3, r4
 800176c:	07d2      	lsls	r2, r2, #31
 800176e:	4313      	orrs	r3, r2
 8001770:	0028      	movs	r0, r5
 8001772:	0019      	movs	r1, r3
 8001774:	b007      	add	sp, #28
 8001776:	bcf0      	pop	{r4, r5, r6, r7}
 8001778:	46bb      	mov	fp, r7
 800177a:	46b2      	mov	sl, r6
 800177c:	46a9      	mov	r9, r5
 800177e:	46a0      	mov	r8, r4
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	2203      	movs	r2, #3
 8001786:	0109      	lsls	r1, r1, #4
 8001788:	002b      	movs	r3, r5
 800178a:	468c      	mov	ip, r1
 800178c:	4316      	orrs	r6, r2
 800178e:	4642      	mov	r2, r8
 8001790:	4463      	add	r3, ip
 8001792:	407a      	eors	r2, r7
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2e0a      	cmp	r6, #10
 800179a:	dd00      	ble.n	800179e <__aeabi_dmul+0x11a>
 800179c:	e228      	b.n	8001bf0 <__aeabi_dmul+0x56c>
 800179e:	2103      	movs	r1, #3
 80017a0:	2501      	movs	r5, #1
 80017a2:	40b5      	lsls	r5, r6
 80017a4:	46ac      	mov	ip, r5
 80017a6:	26a6      	movs	r6, #166	; 0xa6
 80017a8:	4663      	mov	r3, ip
 80017aa:	00f6      	lsls	r6, r6, #3
 80017ac:	4035      	ands	r5, r6
 80017ae:	4233      	tst	r3, r6
 80017b0:	d10b      	bne.n	80017ca <__aeabi_dmul+0x146>
 80017b2:	2690      	movs	r6, #144	; 0x90
 80017b4:	00b6      	lsls	r6, r6, #2
 80017b6:	4233      	tst	r3, r6
 80017b8:	d118      	bne.n	80017ec <__aeabi_dmul+0x168>
 80017ba:	3eb9      	subs	r6, #185	; 0xb9
 80017bc:	3eff      	subs	r6, #255	; 0xff
 80017be:	421e      	tst	r6, r3
 80017c0:	d01d      	beq.n	80017fe <__aeabi_dmul+0x17a>
 80017c2:	46a3      	mov	fp, r4
 80017c4:	4682      	mov	sl, r0
 80017c6:	9100      	str	r1, [sp, #0]
 80017c8:	e000      	b.n	80017cc <__aeabi_dmul+0x148>
 80017ca:	0017      	movs	r7, r2
 80017cc:	9900      	ldr	r1, [sp, #0]
 80017ce:	003a      	movs	r2, r7
 80017d0:	2902      	cmp	r1, #2
 80017d2:	d010      	beq.n	80017f6 <__aeabi_dmul+0x172>
 80017d4:	465c      	mov	r4, fp
 80017d6:	4650      	mov	r0, sl
 80017d8:	2903      	cmp	r1, #3
 80017da:	d1bf      	bne.n	800175c <__aeabi_dmul+0xd8>
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	031b      	lsls	r3, r3, #12
 80017e0:	431c      	orrs	r4, r3
 80017e2:	0324      	lsls	r4, r4, #12
 80017e4:	0005      	movs	r5, r0
 80017e6:	4b7f      	ldr	r3, [pc, #508]	; (80019e4 <__aeabi_dmul+0x360>)
 80017e8:	0b24      	lsrs	r4, r4, #12
 80017ea:	e7bd      	b.n	8001768 <__aeabi_dmul+0xe4>
 80017ec:	2480      	movs	r4, #128	; 0x80
 80017ee:	2200      	movs	r2, #0
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <__aeabi_dmul+0x360>)
 80017f2:	0324      	lsls	r4, r4, #12
 80017f4:	e7b8      	b.n	8001768 <__aeabi_dmul+0xe4>
 80017f6:	2400      	movs	r4, #0
 80017f8:	2500      	movs	r5, #0
 80017fa:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <__aeabi_dmul+0x360>)
 80017fc:	e7b4      	b.n	8001768 <__aeabi_dmul+0xe4>
 80017fe:	4653      	mov	r3, sl
 8001800:	041e      	lsls	r6, r3, #16
 8001802:	0c36      	lsrs	r6, r6, #16
 8001804:	0c1f      	lsrs	r7, r3, #16
 8001806:	0033      	movs	r3, r6
 8001808:	0c01      	lsrs	r1, r0, #16
 800180a:	0400      	lsls	r0, r0, #16
 800180c:	0c00      	lsrs	r0, r0, #16
 800180e:	4343      	muls	r3, r0
 8001810:	4698      	mov	r8, r3
 8001812:	0003      	movs	r3, r0
 8001814:	437b      	muls	r3, r7
 8001816:	4699      	mov	r9, r3
 8001818:	0033      	movs	r3, r6
 800181a:	434b      	muls	r3, r1
 800181c:	469c      	mov	ip, r3
 800181e:	4643      	mov	r3, r8
 8001820:	000d      	movs	r5, r1
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	469a      	mov	sl, r3
 8001826:	437d      	muls	r5, r7
 8001828:	44cc      	add	ip, r9
 800182a:	44d4      	add	ip, sl
 800182c:	9500      	str	r5, [sp, #0]
 800182e:	45e1      	cmp	r9, ip
 8001830:	d904      	bls.n	800183c <__aeabi_dmul+0x1b8>
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	4699      	mov	r9, r3
 8001838:	444d      	add	r5, r9
 800183a:	9500      	str	r5, [sp, #0]
 800183c:	4663      	mov	r3, ip
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	001d      	movs	r5, r3
 8001842:	4663      	mov	r3, ip
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	469c      	mov	ip, r3
 8001848:	4643      	mov	r3, r8
 800184a:	041b      	lsls	r3, r3, #16
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	4698      	mov	r8, r3
 8001850:	4663      	mov	r3, ip
 8001852:	4443      	add	r3, r8
 8001854:	9303      	str	r3, [sp, #12]
 8001856:	0c23      	lsrs	r3, r4, #16
 8001858:	4698      	mov	r8, r3
 800185a:	0033      	movs	r3, r6
 800185c:	0424      	lsls	r4, r4, #16
 800185e:	0c24      	lsrs	r4, r4, #16
 8001860:	4363      	muls	r3, r4
 8001862:	469c      	mov	ip, r3
 8001864:	0023      	movs	r3, r4
 8001866:	437b      	muls	r3, r7
 8001868:	4699      	mov	r9, r3
 800186a:	4643      	mov	r3, r8
 800186c:	435e      	muls	r6, r3
 800186e:	435f      	muls	r7, r3
 8001870:	444e      	add	r6, r9
 8001872:	4663      	mov	r3, ip
 8001874:	46b2      	mov	sl, r6
 8001876:	0c1e      	lsrs	r6, r3, #16
 8001878:	4456      	add	r6, sl
 800187a:	45b1      	cmp	r9, r6
 800187c:	d903      	bls.n	8001886 <__aeabi_dmul+0x202>
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	025b      	lsls	r3, r3, #9
 8001882:	4699      	mov	r9, r3
 8001884:	444f      	add	r7, r9
 8001886:	0c33      	lsrs	r3, r6, #16
 8001888:	4699      	mov	r9, r3
 800188a:	003b      	movs	r3, r7
 800188c:	444b      	add	r3, r9
 800188e:	9305      	str	r3, [sp, #20]
 8001890:	4663      	mov	r3, ip
 8001892:	46ac      	mov	ip, r5
 8001894:	041f      	lsls	r7, r3, #16
 8001896:	0c3f      	lsrs	r7, r7, #16
 8001898:	0436      	lsls	r6, r6, #16
 800189a:	19f6      	adds	r6, r6, r7
 800189c:	44b4      	add	ip, r6
 800189e:	4663      	mov	r3, ip
 80018a0:	9304      	str	r3, [sp, #16]
 80018a2:	465b      	mov	r3, fp
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	469c      	mov	ip, r3
 80018a8:	465b      	mov	r3, fp
 80018aa:	041f      	lsls	r7, r3, #16
 80018ac:	0c3f      	lsrs	r7, r7, #16
 80018ae:	003b      	movs	r3, r7
 80018b0:	4343      	muls	r3, r0
 80018b2:	4699      	mov	r9, r3
 80018b4:	4663      	mov	r3, ip
 80018b6:	4343      	muls	r3, r0
 80018b8:	469a      	mov	sl, r3
 80018ba:	464b      	mov	r3, r9
 80018bc:	4660      	mov	r0, ip
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	469b      	mov	fp, r3
 80018c2:	4348      	muls	r0, r1
 80018c4:	4379      	muls	r1, r7
 80018c6:	4451      	add	r1, sl
 80018c8:	4459      	add	r1, fp
 80018ca:	458a      	cmp	sl, r1
 80018cc:	d903      	bls.n	80018d6 <__aeabi_dmul+0x252>
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	469a      	mov	sl, r3
 80018d4:	4450      	add	r0, sl
 80018d6:	0c0b      	lsrs	r3, r1, #16
 80018d8:	469a      	mov	sl, r3
 80018da:	464b      	mov	r3, r9
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	4699      	mov	r9, r3
 80018e2:	003b      	movs	r3, r7
 80018e4:	4363      	muls	r3, r4
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	4645      	mov	r5, r8
 80018ea:	4449      	add	r1, r9
 80018ec:	4699      	mov	r9, r3
 80018ee:	4663      	mov	r3, ip
 80018f0:	435c      	muls	r4, r3
 80018f2:	436b      	muls	r3, r5
 80018f4:	469c      	mov	ip, r3
 80018f6:	464b      	mov	r3, r9
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	4698      	mov	r8, r3
 80018fc:	436f      	muls	r7, r5
 80018fe:	193f      	adds	r7, r7, r4
 8001900:	4447      	add	r7, r8
 8001902:	4450      	add	r0, sl
 8001904:	42bc      	cmp	r4, r7
 8001906:	d903      	bls.n	8001910 <__aeabi_dmul+0x28c>
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	4698      	mov	r8, r3
 800190e:	44c4      	add	ip, r8
 8001910:	9b04      	ldr	r3, [sp, #16]
 8001912:	9d00      	ldr	r5, [sp, #0]
 8001914:	4698      	mov	r8, r3
 8001916:	4445      	add	r5, r8
 8001918:	42b5      	cmp	r5, r6
 800191a:	41b6      	sbcs	r6, r6
 800191c:	4273      	negs	r3, r6
 800191e:	4698      	mov	r8, r3
 8001920:	464b      	mov	r3, r9
 8001922:	041e      	lsls	r6, r3, #16
 8001924:	9b05      	ldr	r3, [sp, #20]
 8001926:	043c      	lsls	r4, r7, #16
 8001928:	4699      	mov	r9, r3
 800192a:	0c36      	lsrs	r6, r6, #16
 800192c:	19a4      	adds	r4, r4, r6
 800192e:	444c      	add	r4, r9
 8001930:	46a1      	mov	r9, r4
 8001932:	4683      	mov	fp, r0
 8001934:	186e      	adds	r6, r5, r1
 8001936:	44c1      	add	r9, r8
 8001938:	428e      	cmp	r6, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	44cb      	add	fp, r9
 800193e:	465d      	mov	r5, fp
 8001940:	4249      	negs	r1, r1
 8001942:	186d      	adds	r5, r5, r1
 8001944:	429c      	cmp	r4, r3
 8001946:	41a4      	sbcs	r4, r4
 8001948:	45c1      	cmp	r9, r8
 800194a:	419b      	sbcs	r3, r3
 800194c:	4583      	cmp	fp, r0
 800194e:	4180      	sbcs	r0, r0
 8001950:	428d      	cmp	r5, r1
 8001952:	4189      	sbcs	r1, r1
 8001954:	425b      	negs	r3, r3
 8001956:	4264      	negs	r4, r4
 8001958:	431c      	orrs	r4, r3
 800195a:	4240      	negs	r0, r0
 800195c:	9b03      	ldr	r3, [sp, #12]
 800195e:	4249      	negs	r1, r1
 8001960:	4301      	orrs	r1, r0
 8001962:	0270      	lsls	r0, r6, #9
 8001964:	0c3f      	lsrs	r7, r7, #16
 8001966:	4318      	orrs	r0, r3
 8001968:	19e4      	adds	r4, r4, r7
 800196a:	1e47      	subs	r7, r0, #1
 800196c:	41b8      	sbcs	r0, r7
 800196e:	1864      	adds	r4, r4, r1
 8001970:	4464      	add	r4, ip
 8001972:	0df6      	lsrs	r6, r6, #23
 8001974:	0261      	lsls	r1, r4, #9
 8001976:	4330      	orrs	r0, r6
 8001978:	0dec      	lsrs	r4, r5, #23
 800197a:	026e      	lsls	r6, r5, #9
 800197c:	430c      	orrs	r4, r1
 800197e:	4330      	orrs	r0, r6
 8001980:	01c9      	lsls	r1, r1, #7
 8001982:	d400      	bmi.n	8001986 <__aeabi_dmul+0x302>
 8001984:	e0f1      	b.n	8001b6a <__aeabi_dmul+0x4e6>
 8001986:	2101      	movs	r1, #1
 8001988:	0843      	lsrs	r3, r0, #1
 800198a:	4001      	ands	r1, r0
 800198c:	430b      	orrs	r3, r1
 800198e:	07e0      	lsls	r0, r4, #31
 8001990:	4318      	orrs	r0, r3
 8001992:	0864      	lsrs	r4, r4, #1
 8001994:	4915      	ldr	r1, [pc, #84]	; (80019ec <__aeabi_dmul+0x368>)
 8001996:	9b02      	ldr	r3, [sp, #8]
 8001998:	468c      	mov	ip, r1
 800199a:	4463      	add	r3, ip
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc00      	bgt.n	80019a2 <__aeabi_dmul+0x31e>
 80019a0:	e097      	b.n	8001ad2 <__aeabi_dmul+0x44e>
 80019a2:	0741      	lsls	r1, r0, #29
 80019a4:	d009      	beq.n	80019ba <__aeabi_dmul+0x336>
 80019a6:	210f      	movs	r1, #15
 80019a8:	4001      	ands	r1, r0
 80019aa:	2904      	cmp	r1, #4
 80019ac:	d005      	beq.n	80019ba <__aeabi_dmul+0x336>
 80019ae:	1d01      	adds	r1, r0, #4
 80019b0:	4281      	cmp	r1, r0
 80019b2:	4180      	sbcs	r0, r0
 80019b4:	4240      	negs	r0, r0
 80019b6:	1824      	adds	r4, r4, r0
 80019b8:	0008      	movs	r0, r1
 80019ba:	01e1      	lsls	r1, r4, #7
 80019bc:	d506      	bpl.n	80019cc <__aeabi_dmul+0x348>
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	00c9      	lsls	r1, r1, #3
 80019c2:	468c      	mov	ip, r1
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <__aeabi_dmul+0x36c>)
 80019c6:	401c      	ands	r4, r3
 80019c8:	9b02      	ldr	r3, [sp, #8]
 80019ca:	4463      	add	r3, ip
 80019cc:	4909      	ldr	r1, [pc, #36]	; (80019f4 <__aeabi_dmul+0x370>)
 80019ce:	428b      	cmp	r3, r1
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_dmul+0x350>
 80019d2:	e710      	b.n	80017f6 <__aeabi_dmul+0x172>
 80019d4:	0761      	lsls	r1, r4, #29
 80019d6:	08c5      	lsrs	r5, r0, #3
 80019d8:	0264      	lsls	r4, r4, #9
 80019da:	055b      	lsls	r3, r3, #21
 80019dc:	430d      	orrs	r5, r1
 80019de:	0b24      	lsrs	r4, r4, #12
 80019e0:	0d5b      	lsrs	r3, r3, #21
 80019e2:	e6c1      	b.n	8001768 <__aeabi_dmul+0xe4>
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	fffffc01 	.word	0xfffffc01
 80019ec:	000003ff 	.word	0x000003ff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	000007fe 	.word	0x000007fe
 80019f8:	464b      	mov	r3, r9
 80019fa:	4323      	orrs	r3, r4
 80019fc:	d059      	beq.n	8001ab2 <__aeabi_dmul+0x42e>
 80019fe:	2c00      	cmp	r4, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dmul+0x380>
 8001a02:	e0a3      	b.n	8001b4c <__aeabi_dmul+0x4c8>
 8001a04:	0020      	movs	r0, r4
 8001a06:	f000 fd0d 	bl	8002424 <__clzsi2>
 8001a0a:	0001      	movs	r1, r0
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	390b      	subs	r1, #11
 8001a10:	221d      	movs	r2, #29
 8001a12:	1a52      	subs	r2, r2, r1
 8001a14:	4649      	mov	r1, r9
 8001a16:	0018      	movs	r0, r3
 8001a18:	40d1      	lsrs	r1, r2
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	3808      	subs	r0, #8
 8001a1e:	4082      	lsls	r2, r0
 8001a20:	4084      	lsls	r4, r0
 8001a22:	0010      	movs	r0, r2
 8001a24:	430c      	orrs	r4, r1
 8001a26:	4a74      	ldr	r2, [pc, #464]	; (8001bf8 <__aeabi_dmul+0x574>)
 8001a28:	1aeb      	subs	r3, r5, r3
 8001a2a:	4694      	mov	ip, r2
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	4463      	add	r3, ip
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	407a      	eors	r2, r7
 8001a36:	3301      	adds	r3, #1
 8001a38:	2100      	movs	r1, #0
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2e0a      	cmp	r6, #10
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dmul+0x3c0>
 8001a42:	e667      	b.n	8001714 <__aeabi_dmul+0x90>
 8001a44:	e683      	b.n	800174e <__aeabi_dmul+0xca>
 8001a46:	465b      	mov	r3, fp
 8001a48:	4303      	orrs	r3, r0
 8001a4a:	469a      	mov	sl, r3
 8001a4c:	d02a      	beq.n	8001aa4 <__aeabi_dmul+0x420>
 8001a4e:	465b      	mov	r3, fp
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d06d      	beq.n	8001b30 <__aeabi_dmul+0x4ac>
 8001a54:	4658      	mov	r0, fp
 8001a56:	f000 fce5 	bl	8002424 <__clzsi2>
 8001a5a:	0001      	movs	r1, r0
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	390b      	subs	r1, #11
 8001a60:	221d      	movs	r2, #29
 8001a62:	1a52      	subs	r2, r2, r1
 8001a64:	0021      	movs	r1, r4
 8001a66:	0018      	movs	r0, r3
 8001a68:	465d      	mov	r5, fp
 8001a6a:	40d1      	lsrs	r1, r2
 8001a6c:	3808      	subs	r0, #8
 8001a6e:	4085      	lsls	r5, r0
 8001a70:	000a      	movs	r2, r1
 8001a72:	4084      	lsls	r4, r0
 8001a74:	432a      	orrs	r2, r5
 8001a76:	4693      	mov	fp, r2
 8001a78:	46a2      	mov	sl, r4
 8001a7a:	4d5f      	ldr	r5, [pc, #380]	; (8001bf8 <__aeabi_dmul+0x574>)
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	1aed      	subs	r5, r5, r3
 8001a80:	2300      	movs	r3, #0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e625      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001a86:	465b      	mov	r3, fp
 8001a88:	4303      	orrs	r3, r0
 8001a8a:	469a      	mov	sl, r3
 8001a8c:	d105      	bne.n	8001a9a <__aeabi_dmul+0x416>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	469b      	mov	fp, r3
 8001a92:	3302      	adds	r3, #2
 8001a94:	2608      	movs	r6, #8
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e61b      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	4682      	mov	sl, r0
 8001a9e:	260c      	movs	r6, #12
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	e616      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	469b      	mov	fp, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	2604      	movs	r6, #4
 8001aac:	2500      	movs	r5, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	e60f      	b.n	80016d2 <__aeabi_dmul+0x4e>
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	9501      	str	r5, [sp, #4]
 8001ab8:	431e      	orrs	r6, r3
 8001aba:	9b01      	ldr	r3, [sp, #4]
 8001abc:	407a      	eors	r2, r7
 8001abe:	3301      	adds	r3, #1
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	2e0a      	cmp	r6, #10
 8001acc:	dd00      	ble.n	8001ad0 <__aeabi_dmul+0x44c>
 8001ace:	e621      	b.n	8001714 <__aeabi_dmul+0x90>
 8001ad0:	e63d      	b.n	800174e <__aeabi_dmul+0xca>
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	1ac9      	subs	r1, r1, r3
 8001ad6:	2938      	cmp	r1, #56	; 0x38
 8001ad8:	dd00      	ble.n	8001adc <__aeabi_dmul+0x458>
 8001ada:	e642      	b.n	8001762 <__aeabi_dmul+0xde>
 8001adc:	291f      	cmp	r1, #31
 8001ade:	dd47      	ble.n	8001b70 <__aeabi_dmul+0x4ec>
 8001ae0:	261f      	movs	r6, #31
 8001ae2:	0025      	movs	r5, r4
 8001ae4:	4276      	negs	r6, r6
 8001ae6:	1af3      	subs	r3, r6, r3
 8001ae8:	40dd      	lsrs	r5, r3
 8001aea:	002b      	movs	r3, r5
 8001aec:	2920      	cmp	r1, #32
 8001aee:	d005      	beq.n	8001afc <__aeabi_dmul+0x478>
 8001af0:	4942      	ldr	r1, [pc, #264]	; (8001bfc <__aeabi_dmul+0x578>)
 8001af2:	9d02      	ldr	r5, [sp, #8]
 8001af4:	468c      	mov	ip, r1
 8001af6:	4465      	add	r5, ip
 8001af8:	40ac      	lsls	r4, r5
 8001afa:	4320      	orrs	r0, r4
 8001afc:	1e41      	subs	r1, r0, #1
 8001afe:	4188      	sbcs	r0, r1
 8001b00:	4318      	orrs	r0, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2400      	movs	r4, #0
 8001b08:	4005      	ands	r5, r0
 8001b0a:	4203      	tst	r3, r0
 8001b0c:	d04a      	beq.n	8001ba4 <__aeabi_dmul+0x520>
 8001b0e:	230f      	movs	r3, #15
 8001b10:	2400      	movs	r4, #0
 8001b12:	4003      	ands	r3, r0
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d042      	beq.n	8001b9e <__aeabi_dmul+0x51a>
 8001b18:	1d03      	adds	r3, r0, #4
 8001b1a:	4283      	cmp	r3, r0
 8001b1c:	4180      	sbcs	r0, r0
 8001b1e:	4240      	negs	r0, r0
 8001b20:	1824      	adds	r4, r4, r0
 8001b22:	0018      	movs	r0, r3
 8001b24:	0223      	lsls	r3, r4, #8
 8001b26:	d53a      	bpl.n	8001b9e <__aeabi_dmul+0x51a>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	e61b      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001b30:	f000 fc78 	bl	8002424 <__clzsi2>
 8001b34:	0001      	movs	r1, r0
 8001b36:	0003      	movs	r3, r0
 8001b38:	3115      	adds	r1, #21
 8001b3a:	3320      	adds	r3, #32
 8001b3c:	291c      	cmp	r1, #28
 8001b3e:	dd8f      	ble.n	8001a60 <__aeabi_dmul+0x3dc>
 8001b40:	3808      	subs	r0, #8
 8001b42:	2200      	movs	r2, #0
 8001b44:	4084      	lsls	r4, r0
 8001b46:	4692      	mov	sl, r2
 8001b48:	46a3      	mov	fp, r4
 8001b4a:	e796      	b.n	8001a7a <__aeabi_dmul+0x3f6>
 8001b4c:	f000 fc6a 	bl	8002424 <__clzsi2>
 8001b50:	0001      	movs	r1, r0
 8001b52:	0003      	movs	r3, r0
 8001b54:	3115      	adds	r1, #21
 8001b56:	3320      	adds	r3, #32
 8001b58:	291c      	cmp	r1, #28
 8001b5a:	dc00      	bgt.n	8001b5e <__aeabi_dmul+0x4da>
 8001b5c:	e758      	b.n	8001a10 <__aeabi_dmul+0x38c>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	464c      	mov	r4, r9
 8001b62:	3a08      	subs	r2, #8
 8001b64:	2000      	movs	r0, #0
 8001b66:	4094      	lsls	r4, r2
 8001b68:	e75d      	b.n	8001a26 <__aeabi_dmul+0x3a2>
 8001b6a:	9b01      	ldr	r3, [sp, #4]
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	e711      	b.n	8001994 <__aeabi_dmul+0x310>
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <__aeabi_dmul+0x57c>)
 8001b72:	0026      	movs	r6, r4
 8001b74:	469c      	mov	ip, r3
 8001b76:	0003      	movs	r3, r0
 8001b78:	9d02      	ldr	r5, [sp, #8]
 8001b7a:	40cb      	lsrs	r3, r1
 8001b7c:	4465      	add	r5, ip
 8001b7e:	40ae      	lsls	r6, r5
 8001b80:	431e      	orrs	r6, r3
 8001b82:	0003      	movs	r3, r0
 8001b84:	40ab      	lsls	r3, r5
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	4183      	sbcs	r3, r0
 8001b8a:	0030      	movs	r0, r6
 8001b8c:	4318      	orrs	r0, r3
 8001b8e:	40cc      	lsrs	r4, r1
 8001b90:	0743      	lsls	r3, r0, #29
 8001b92:	d0c7      	beq.n	8001b24 <__aeabi_dmul+0x4a0>
 8001b94:	230f      	movs	r3, #15
 8001b96:	4003      	ands	r3, r0
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d1bd      	bne.n	8001b18 <__aeabi_dmul+0x494>
 8001b9c:	e7c2      	b.n	8001b24 <__aeabi_dmul+0x4a0>
 8001b9e:	0765      	lsls	r5, r4, #29
 8001ba0:	0264      	lsls	r4, r4, #9
 8001ba2:	0b24      	lsrs	r4, r4, #12
 8001ba4:	08c0      	lsrs	r0, r0, #3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	4305      	orrs	r5, r0
 8001baa:	e5dd      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001bac:	2500      	movs	r5, #0
 8001bae:	2302      	movs	r3, #2
 8001bb0:	2e0f      	cmp	r6, #15
 8001bb2:	d10c      	bne.n	8001bce <__aeabi_dmul+0x54a>
 8001bb4:	2480      	movs	r4, #128	; 0x80
 8001bb6:	465b      	mov	r3, fp
 8001bb8:	0324      	lsls	r4, r4, #12
 8001bba:	4223      	tst	r3, r4
 8001bbc:	d00e      	beq.n	8001bdc <__aeabi_dmul+0x558>
 8001bbe:	4221      	tst	r1, r4
 8001bc0:	d10c      	bne.n	8001bdc <__aeabi_dmul+0x558>
 8001bc2:	430c      	orrs	r4, r1
 8001bc4:	0324      	lsls	r4, r4, #12
 8001bc6:	003a      	movs	r2, r7
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <__aeabi_dmul+0x580>)
 8001bca:	0b24      	lsrs	r4, r4, #12
 8001bcc:	e5cc      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001bce:	2e0b      	cmp	r6, #11
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_dmul+0x550>
 8001bd2:	e5a2      	b.n	800171a <__aeabi_dmul+0x96>
 8001bd4:	468b      	mov	fp, r1
 8001bd6:	46aa      	mov	sl, r5
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	e5f7      	b.n	80017cc <__aeabi_dmul+0x148>
 8001bdc:	2480      	movs	r4, #128	; 0x80
 8001bde:	465b      	mov	r3, fp
 8001be0:	0324      	lsls	r4, r4, #12
 8001be2:	431c      	orrs	r4, r3
 8001be4:	0324      	lsls	r4, r4, #12
 8001be6:	4642      	mov	r2, r8
 8001be8:	4655      	mov	r5, sl
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <__aeabi_dmul+0x580>)
 8001bec:	0b24      	lsrs	r4, r4, #12
 8001bee:	e5bb      	b.n	8001768 <__aeabi_dmul+0xe4>
 8001bf0:	464d      	mov	r5, r9
 8001bf2:	0021      	movs	r1, r4
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e7db      	b.n	8001bb0 <__aeabi_dmul+0x52c>
 8001bf8:	fffffc0d 	.word	0xfffffc0d
 8001bfc:	0000043e 	.word	0x0000043e
 8001c00:	0000041e 	.word	0x0000041e
 8001c04:	000007ff 	.word	0x000007ff

08001c08 <__aeabi_dsub>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	464e      	mov	r6, r9
 8001c0e:	4645      	mov	r5, r8
 8001c10:	46de      	mov	lr, fp
 8001c12:	b5e0      	push	{r5, r6, r7, lr}
 8001c14:	000d      	movs	r5, r1
 8001c16:	0004      	movs	r4, r0
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	032b      	lsls	r3, r5, #12
 8001c1e:	0a5b      	lsrs	r3, r3, #9
 8001c20:	0f62      	lsrs	r2, r4, #29
 8001c22:	431a      	orrs	r2, r3
 8001c24:	00e3      	lsls	r3, r4, #3
 8001c26:	030c      	lsls	r4, r1, #12
 8001c28:	0a64      	lsrs	r4, r4, #9
 8001c2a:	0f47      	lsrs	r7, r0, #29
 8001c2c:	4327      	orrs	r7, r4
 8001c2e:	4cd0      	ldr	r4, [pc, #832]	; (8001f70 <__aeabi_dsub+0x368>)
 8001c30:	006e      	lsls	r6, r5, #1
 8001c32:	4691      	mov	r9, r2
 8001c34:	b083      	sub	sp, #12
 8001c36:	004a      	lsls	r2, r1, #1
 8001c38:	00c0      	lsls	r0, r0, #3
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	46a2      	mov	sl, r4
 8001c3e:	0d76      	lsrs	r6, r6, #21
 8001c40:	0fed      	lsrs	r5, r5, #31
 8001c42:	0d52      	lsrs	r2, r2, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	9001      	str	r0, [sp, #4]
 8001c48:	42a2      	cmp	r2, r4
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x46>
 8001c4c:	e0b9      	b.n	8001dc2 <__aeabi_dsub+0x1ba>
 8001c4e:	2401      	movs	r4, #1
 8001c50:	4061      	eors	r1, r4
 8001c52:	468b      	mov	fp, r1
 8001c54:	428d      	cmp	r5, r1
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x52>
 8001c58:	e08d      	b.n	8001d76 <__aeabi_dsub+0x16e>
 8001c5a:	1ab4      	subs	r4, r6, r2
 8001c5c:	46a4      	mov	ip, r4
 8001c5e:	2c00      	cmp	r4, #0
 8001c60:	dc00      	bgt.n	8001c64 <__aeabi_dsub+0x5c>
 8001c62:	e0b7      	b.n	8001dd4 <__aeabi_dsub+0x1cc>
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x62>
 8001c68:	e0cb      	b.n	8001e02 <__aeabi_dsub+0x1fa>
 8001c6a:	4ac1      	ldr	r2, [pc, #772]	; (8001f70 <__aeabi_dsub+0x368>)
 8001c6c:	4296      	cmp	r6, r2
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dsub+0x6a>
 8001c70:	e186      	b.n	8001f80 <__aeabi_dsub+0x378>
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	0412      	lsls	r2, r2, #16
 8001c76:	4317      	orrs	r7, r2
 8001c78:	4662      	mov	r2, ip
 8001c7a:	2a38      	cmp	r2, #56	; 0x38
 8001c7c:	dd00      	ble.n	8001c80 <__aeabi_dsub+0x78>
 8001c7e:	e1a4      	b.n	8001fca <__aeabi_dsub+0x3c2>
 8001c80:	2a1f      	cmp	r2, #31
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_dsub+0x7e>
 8001c84:	e21d      	b.n	80020c2 <__aeabi_dsub+0x4ba>
 8001c86:	4661      	mov	r1, ip
 8001c88:	2220      	movs	r2, #32
 8001c8a:	003c      	movs	r4, r7
 8001c8c:	1a52      	subs	r2, r2, r1
 8001c8e:	0001      	movs	r1, r0
 8001c90:	4090      	lsls	r0, r2
 8001c92:	4094      	lsls	r4, r2
 8001c94:	1e42      	subs	r2, r0, #1
 8001c96:	4190      	sbcs	r0, r2
 8001c98:	4662      	mov	r2, ip
 8001c9a:	46a0      	mov	r8, r4
 8001c9c:	4664      	mov	r4, ip
 8001c9e:	40d7      	lsrs	r7, r2
 8001ca0:	464a      	mov	r2, r9
 8001ca2:	40e1      	lsrs	r1, r4
 8001ca4:	4644      	mov	r4, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4691      	mov	r9, r2
 8001caa:	430c      	orrs	r4, r1
 8001cac:	4304      	orrs	r4, r0
 8001cae:	1b1c      	subs	r4, r3, r4
 8001cb0:	42a3      	cmp	r3, r4
 8001cb2:	4192      	sbcs	r2, r2
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	4252      	negs	r2, r2
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	469a      	mov	sl, r3
 8001cbc:	4653      	mov	r3, sl
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	d400      	bmi.n	8001cc4 <__aeabi_dsub+0xbc>
 8001cc2:	e12b      	b.n	8001f1c <__aeabi_dsub+0x314>
 8001cc4:	4653      	mov	r3, sl
 8001cc6:	025a      	lsls	r2, r3, #9
 8001cc8:	0a53      	lsrs	r3, r2, #9
 8001cca:	469a      	mov	sl, r3
 8001ccc:	4653      	mov	r3, sl
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0xcc>
 8001cd2:	e166      	b.n	8001fa2 <__aeabi_dsub+0x39a>
 8001cd4:	4650      	mov	r0, sl
 8001cd6:	f000 fba5 	bl	8002424 <__clzsi2>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	3b08      	subs	r3, #8
 8001cde:	2220      	movs	r2, #32
 8001ce0:	0020      	movs	r0, r4
 8001ce2:	1ad2      	subs	r2, r2, r3
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	40d0      	lsrs	r0, r2
 8001ce8:	4099      	lsls	r1, r3
 8001cea:	0002      	movs	r2, r0
 8001cec:	409c      	lsls	r4, r3
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	429e      	cmp	r6, r3
 8001cf2:	dd00      	ble.n	8001cf6 <__aeabi_dsub+0xee>
 8001cf4:	e164      	b.n	8001fc0 <__aeabi_dsub+0x3b8>
 8001cf6:	1b9b      	subs	r3, r3, r6
 8001cf8:	1c59      	adds	r1, r3, #1
 8001cfa:	291f      	cmp	r1, #31
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_dsub+0xf8>
 8001cfe:	e0fe      	b.n	8001efe <__aeabi_dsub+0x2f6>
 8001d00:	2320      	movs	r3, #32
 8001d02:	0010      	movs	r0, r2
 8001d04:	0026      	movs	r6, r4
 8001d06:	1a5b      	subs	r3, r3, r1
 8001d08:	409c      	lsls	r4, r3
 8001d0a:	4098      	lsls	r0, r3
 8001d0c:	40ce      	lsrs	r6, r1
 8001d0e:	40ca      	lsrs	r2, r1
 8001d10:	1e63      	subs	r3, r4, #1
 8001d12:	419c      	sbcs	r4, r3
 8001d14:	4330      	orrs	r0, r6
 8001d16:	4692      	mov	sl, r2
 8001d18:	2600      	movs	r6, #0
 8001d1a:	4304      	orrs	r4, r0
 8001d1c:	0763      	lsls	r3, r4, #29
 8001d1e:	d009      	beq.n	8001d34 <__aeabi_dsub+0x12c>
 8001d20:	230f      	movs	r3, #15
 8001d22:	4023      	ands	r3, r4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d005      	beq.n	8001d34 <__aeabi_dsub+0x12c>
 8001d28:	1d23      	adds	r3, r4, #4
 8001d2a:	42a3      	cmp	r3, r4
 8001d2c:	41a4      	sbcs	r4, r4
 8001d2e:	4264      	negs	r4, r4
 8001d30:	44a2      	add	sl, r4
 8001d32:	001c      	movs	r4, r3
 8001d34:	4653      	mov	r3, sl
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	d400      	bmi.n	8001d3c <__aeabi_dsub+0x134>
 8001d3a:	e0f2      	b.n	8001f22 <__aeabi_dsub+0x31a>
 8001d3c:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <__aeabi_dsub+0x368>)
 8001d3e:	3601      	adds	r6, #1
 8001d40:	429e      	cmp	r6, r3
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x13e>
 8001d44:	e10f      	b.n	8001f66 <__aeabi_dsub+0x35e>
 8001d46:	4653      	mov	r3, sl
 8001d48:	498a      	ldr	r1, [pc, #552]	; (8001f74 <__aeabi_dsub+0x36c>)
 8001d4a:	08e4      	lsrs	r4, r4, #3
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	0019      	movs	r1, r3
 8001d50:	075b      	lsls	r3, r3, #29
 8001d52:	4323      	orrs	r3, r4
 8001d54:	0572      	lsls	r2, r6, #21
 8001d56:	024c      	lsls	r4, r1, #9
 8001d58:	0b24      	lsrs	r4, r4, #12
 8001d5a:	0d52      	lsrs	r2, r2, #21
 8001d5c:	0512      	lsls	r2, r2, #20
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	07ed      	lsls	r5, r5, #31
 8001d62:	432a      	orrs	r2, r5
 8001d64:	0018      	movs	r0, r3
 8001d66:	0011      	movs	r1, r2
 8001d68:	b003      	add	sp, #12
 8001d6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d6c:	46bb      	mov	fp, r7
 8001d6e:	46b2      	mov	sl, r6
 8001d70:	46a9      	mov	r9, r5
 8001d72:	46a0      	mov	r8, r4
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d76:	1ab4      	subs	r4, r6, r2
 8001d78:	46a4      	mov	ip, r4
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	dd59      	ble.n	8001e32 <__aeabi_dsub+0x22a>
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x17c>
 8001d82:	e0b0      	b.n	8001ee6 <__aeabi_dsub+0x2de>
 8001d84:	4556      	cmp	r6, sl
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x182>
 8001d88:	e0fa      	b.n	8001f80 <__aeabi_dsub+0x378>
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	0412      	lsls	r2, r2, #16
 8001d8e:	4317      	orrs	r7, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a38      	cmp	r2, #56	; 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x190>
 8001d96:	e0d4      	b.n	8001f42 <__aeabi_dsub+0x33a>
 8001d98:	2a1f      	cmp	r2, #31
 8001d9a:	dc00      	bgt.n	8001d9e <__aeabi_dsub+0x196>
 8001d9c:	e1c0      	b.n	8002120 <__aeabi_dsub+0x518>
 8001d9e:	0039      	movs	r1, r7
 8001da0:	3a20      	subs	r2, #32
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4662      	mov	r2, ip
 8001da6:	2a20      	cmp	r2, #32
 8001da8:	d006      	beq.n	8001db8 <__aeabi_dsub+0x1b0>
 8001daa:	4664      	mov	r4, ip
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	1b12      	subs	r2, r2, r4
 8001db0:	003c      	movs	r4, r7
 8001db2:	4094      	lsls	r4, r2
 8001db4:	4304      	orrs	r4, r0
 8001db6:	9401      	str	r4, [sp, #4]
 8001db8:	9c01      	ldr	r4, [sp, #4]
 8001dba:	1e62      	subs	r2, r4, #1
 8001dbc:	4194      	sbcs	r4, r2
 8001dbe:	430c      	orrs	r4, r1
 8001dc0:	e0c3      	b.n	8001f4a <__aeabi_dsub+0x342>
 8001dc2:	003c      	movs	r4, r7
 8001dc4:	4304      	orrs	r4, r0
 8001dc6:	d02b      	beq.n	8001e20 <__aeabi_dsub+0x218>
 8001dc8:	468b      	mov	fp, r1
 8001dca:	428d      	cmp	r5, r1
 8001dcc:	d02e      	beq.n	8001e2c <__aeabi_dsub+0x224>
 8001dce:	4c6a      	ldr	r4, [pc, #424]	; (8001f78 <__aeabi_dsub+0x370>)
 8001dd0:	46a4      	mov	ip, r4
 8001dd2:	44b4      	add	ip, r6
 8001dd4:	4664      	mov	r4, ip
 8001dd6:	2c00      	cmp	r4, #0
 8001dd8:	d05f      	beq.n	8001e9a <__aeabi_dsub+0x292>
 8001dda:	1b94      	subs	r4, r2, r6
 8001ddc:	46a4      	mov	ip, r4
 8001dde:	2e00      	cmp	r6, #0
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x1dc>
 8001de2:	e120      	b.n	8002026 <__aeabi_dsub+0x41e>
 8001de4:	464c      	mov	r4, r9
 8001de6:	431c      	orrs	r4, r3
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x1e4>
 8001dea:	e1c7      	b.n	800217c <__aeabi_dsub+0x574>
 8001dec:	4661      	mov	r1, ip
 8001dee:	1e4c      	subs	r4, r1, #1
 8001df0:	2901      	cmp	r1, #1
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x1ee>
 8001df4:	e223      	b.n	800223e <__aeabi_dsub+0x636>
 8001df6:	4d5e      	ldr	r5, [pc, #376]	; (8001f70 <__aeabi_dsub+0x368>)
 8001df8:	45ac      	cmp	ip, r5
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x1f6>
 8001dfc:	e1d8      	b.n	80021b0 <__aeabi_dsub+0x5a8>
 8001dfe:	46a4      	mov	ip, r4
 8001e00:	e11a      	b.n	8002038 <__aeabi_dsub+0x430>
 8001e02:	003a      	movs	r2, r7
 8001e04:	4302      	orrs	r2, r0
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x202>
 8001e08:	e0e4      	b.n	8001fd4 <__aeabi_dsub+0x3cc>
 8001e0a:	0022      	movs	r2, r4
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	2c01      	cmp	r4, #1
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x20c>
 8001e12:	e1c3      	b.n	800219c <__aeabi_dsub+0x594>
 8001e14:	4956      	ldr	r1, [pc, #344]	; (8001f70 <__aeabi_dsub+0x368>)
 8001e16:	428c      	cmp	r4, r1
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x214>
 8001e1a:	e0b1      	b.n	8001f80 <__aeabi_dsub+0x378>
 8001e1c:	4694      	mov	ip, r2
 8001e1e:	e72b      	b.n	8001c78 <__aeabi_dsub+0x70>
 8001e20:	2401      	movs	r4, #1
 8001e22:	4061      	eors	r1, r4
 8001e24:	468b      	mov	fp, r1
 8001e26:	428d      	cmp	r5, r1
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dsub+0x224>
 8001e2a:	e716      	b.n	8001c5a <__aeabi_dsub+0x52>
 8001e2c:	4952      	ldr	r1, [pc, #328]	; (8001f78 <__aeabi_dsub+0x370>)
 8001e2e:	468c      	mov	ip, r1
 8001e30:	44b4      	add	ip, r6
 8001e32:	4664      	mov	r4, ip
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x232>
 8001e38:	e0d3      	b.n	8001fe2 <__aeabi_dsub+0x3da>
 8001e3a:	1b91      	subs	r1, r2, r6
 8001e3c:	468c      	mov	ip, r1
 8001e3e:	2e00      	cmp	r6, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x23c>
 8001e42:	e15e      	b.n	8002102 <__aeabi_dsub+0x4fa>
 8001e44:	494a      	ldr	r1, [pc, #296]	; (8001f70 <__aeabi_dsub+0x368>)
 8001e46:	428a      	cmp	r2, r1
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x244>
 8001e4a:	e1be      	b.n	80021ca <__aeabi_dsub+0x5c2>
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	464c      	mov	r4, r9
 8001e50:	0409      	lsls	r1, r1, #16
 8001e52:	430c      	orrs	r4, r1
 8001e54:	46a1      	mov	r9, r4
 8001e56:	4661      	mov	r1, ip
 8001e58:	2938      	cmp	r1, #56	; 0x38
 8001e5a:	dd00      	ble.n	8001e5e <__aeabi_dsub+0x256>
 8001e5c:	e1ba      	b.n	80021d4 <__aeabi_dsub+0x5cc>
 8001e5e:	291f      	cmp	r1, #31
 8001e60:	dd00      	ble.n	8001e64 <__aeabi_dsub+0x25c>
 8001e62:	e227      	b.n	80022b4 <__aeabi_dsub+0x6ac>
 8001e64:	2420      	movs	r4, #32
 8001e66:	1a64      	subs	r4, r4, r1
 8001e68:	4649      	mov	r1, r9
 8001e6a:	40a1      	lsls	r1, r4
 8001e6c:	001e      	movs	r6, r3
 8001e6e:	4688      	mov	r8, r1
 8001e70:	4661      	mov	r1, ip
 8001e72:	40a3      	lsls	r3, r4
 8001e74:	40ce      	lsrs	r6, r1
 8001e76:	4641      	mov	r1, r8
 8001e78:	1e5c      	subs	r4, r3, #1
 8001e7a:	41a3      	sbcs	r3, r4
 8001e7c:	4331      	orrs	r1, r6
 8001e7e:	4319      	orrs	r1, r3
 8001e80:	000c      	movs	r4, r1
 8001e82:	4663      	mov	r3, ip
 8001e84:	4649      	mov	r1, r9
 8001e86:	40d9      	lsrs	r1, r3
 8001e88:	187f      	adds	r7, r7, r1
 8001e8a:	1824      	adds	r4, r4, r0
 8001e8c:	4284      	cmp	r4, r0
 8001e8e:	419b      	sbcs	r3, r3
 8001e90:	425b      	negs	r3, r3
 8001e92:	469a      	mov	sl, r3
 8001e94:	0016      	movs	r6, r2
 8001e96:	44ba      	add	sl, r7
 8001e98:	e05d      	b.n	8001f56 <__aeabi_dsub+0x34e>
 8001e9a:	4c38      	ldr	r4, [pc, #224]	; (8001f7c <__aeabi_dsub+0x374>)
 8001e9c:	1c72      	adds	r2, r6, #1
 8001e9e:	4222      	tst	r2, r4
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dsub+0x29c>
 8001ea2:	e0df      	b.n	8002064 <__aeabi_dsub+0x45c>
 8001ea4:	464a      	mov	r2, r9
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	2e00      	cmp	r6, #0
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x2a6>
 8001eac:	e15c      	b.n	8002168 <__aeabi_dsub+0x560>
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x2ac>
 8001eb2:	e1cf      	b.n	8002254 <__aeabi_dsub+0x64c>
 8001eb4:	003a      	movs	r2, r7
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x2b4>
 8001eba:	e17f      	b.n	80021bc <__aeabi_dsub+0x5b4>
 8001ebc:	1a1c      	subs	r4, r3, r0
 8001ebe:	464a      	mov	r2, r9
 8001ec0:	42a3      	cmp	r3, r4
 8001ec2:	4189      	sbcs	r1, r1
 8001ec4:	1bd2      	subs	r2, r2, r7
 8001ec6:	4249      	negs	r1, r1
 8001ec8:	1a52      	subs	r2, r2, r1
 8001eca:	4692      	mov	sl, r2
 8001ecc:	0212      	lsls	r2, r2, #8
 8001ece:	d400      	bmi.n	8001ed2 <__aeabi_dsub+0x2ca>
 8001ed0:	e20a      	b.n	80022e8 <__aeabi_dsub+0x6e0>
 8001ed2:	1ac4      	subs	r4, r0, r3
 8001ed4:	42a0      	cmp	r0, r4
 8001ed6:	4180      	sbcs	r0, r0
 8001ed8:	464b      	mov	r3, r9
 8001eda:	4240      	negs	r0, r0
 8001edc:	1aff      	subs	r7, r7, r3
 8001ede:	1a3b      	subs	r3, r7, r0
 8001ee0:	469a      	mov	sl, r3
 8001ee2:	465d      	mov	r5, fp
 8001ee4:	e71a      	b.n	8001d1c <__aeabi_dsub+0x114>
 8001ee6:	003a      	movs	r2, r7
 8001ee8:	4302      	orrs	r2, r0
 8001eea:	d073      	beq.n	8001fd4 <__aeabi_dsub+0x3cc>
 8001eec:	0022      	movs	r2, r4
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	2c01      	cmp	r4, #1
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x2ee>
 8001ef4:	e0cb      	b.n	800208e <__aeabi_dsub+0x486>
 8001ef6:	4554      	cmp	r4, sl
 8001ef8:	d042      	beq.n	8001f80 <__aeabi_dsub+0x378>
 8001efa:	4694      	mov	ip, r2
 8001efc:	e748      	b.n	8001d90 <__aeabi_dsub+0x188>
 8001efe:	0010      	movs	r0, r2
 8001f00:	3b1f      	subs	r3, #31
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	2920      	cmp	r1, #32
 8001f06:	d003      	beq.n	8001f10 <__aeabi_dsub+0x308>
 8001f08:	2340      	movs	r3, #64	; 0x40
 8001f0a:	1a5b      	subs	r3, r3, r1
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	4314      	orrs	r4, r2
 8001f10:	1e63      	subs	r3, r4, #1
 8001f12:	419c      	sbcs	r4, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	2600      	movs	r6, #0
 8001f18:	469a      	mov	sl, r3
 8001f1a:	4304      	orrs	r4, r0
 8001f1c:	0763      	lsls	r3, r4, #29
 8001f1e:	d000      	beq.n	8001f22 <__aeabi_dsub+0x31a>
 8001f20:	e6fe      	b.n	8001d20 <__aeabi_dsub+0x118>
 8001f22:	4652      	mov	r2, sl
 8001f24:	08e3      	lsrs	r3, r4, #3
 8001f26:	0752      	lsls	r2, r2, #29
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	4652      	mov	r2, sl
 8001f2c:	46b4      	mov	ip, r6
 8001f2e:	08d2      	lsrs	r2, r2, #3
 8001f30:	490f      	ldr	r1, [pc, #60]	; (8001f70 <__aeabi_dsub+0x368>)
 8001f32:	458c      	cmp	ip, r1
 8001f34:	d02a      	beq.n	8001f8c <__aeabi_dsub+0x384>
 8001f36:	0312      	lsls	r2, r2, #12
 8001f38:	0b14      	lsrs	r4, r2, #12
 8001f3a:	4662      	mov	r2, ip
 8001f3c:	0552      	lsls	r2, r2, #21
 8001f3e:	0d52      	lsrs	r2, r2, #21
 8001f40:	e70c      	b.n	8001d5c <__aeabi_dsub+0x154>
 8001f42:	003c      	movs	r4, r7
 8001f44:	4304      	orrs	r4, r0
 8001f46:	1e62      	subs	r2, r4, #1
 8001f48:	4194      	sbcs	r4, r2
 8001f4a:	18e4      	adds	r4, r4, r3
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	4192      	sbcs	r2, r2
 8001f50:	4252      	negs	r2, r2
 8001f52:	444a      	add	r2, r9
 8001f54:	4692      	mov	sl, r2
 8001f56:	4653      	mov	r3, sl
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	d5df      	bpl.n	8001f1c <__aeabi_dsub+0x314>
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__aeabi_dsub+0x368>)
 8001f5e:	3601      	adds	r6, #1
 8001f60:	429e      	cmp	r6, r3
 8001f62:	d000      	beq.n	8001f66 <__aeabi_dsub+0x35e>
 8001f64:	e0a0      	b.n	80020a8 <__aeabi_dsub+0x4a0>
 8001f66:	0032      	movs	r2, r6
 8001f68:	2400      	movs	r4, #0
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e6f6      	b.n	8001d5c <__aeabi_dsub+0x154>
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	000007ff 	.word	0x000007ff
 8001f74:	ff7fffff 	.word	0xff7fffff
 8001f78:	fffff801 	.word	0xfffff801
 8001f7c:	000007fe 	.word	0x000007fe
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	464a      	mov	r2, r9
 8001f84:	0752      	lsls	r2, r2, #29
 8001f86:	4313      	orrs	r3, r2
 8001f88:	464a      	mov	r2, r9
 8001f8a:	08d2      	lsrs	r2, r2, #3
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x38c>
 8001f92:	e1b5      	b.n	8002300 <__aeabi_dsub+0x6f8>
 8001f94:	2480      	movs	r4, #128	; 0x80
 8001f96:	0324      	lsls	r4, r4, #12
 8001f98:	4314      	orrs	r4, r2
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	4ad5      	ldr	r2, [pc, #852]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8001f9e:	0b24      	lsrs	r4, r4, #12
 8001fa0:	e6dc      	b.n	8001d5c <__aeabi_dsub+0x154>
 8001fa2:	0020      	movs	r0, r4
 8001fa4:	f000 fa3e 	bl	8002424 <__clzsi2>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	3318      	adds	r3, #24
 8001fac:	2b1f      	cmp	r3, #31
 8001fae:	dc00      	bgt.n	8001fb2 <__aeabi_dsub+0x3aa>
 8001fb0:	e695      	b.n	8001cde <__aeabi_dsub+0xd6>
 8001fb2:	0022      	movs	r2, r4
 8001fb4:	3808      	subs	r0, #8
 8001fb6:	4082      	lsls	r2, r0
 8001fb8:	2400      	movs	r4, #0
 8001fba:	429e      	cmp	r6, r3
 8001fbc:	dc00      	bgt.n	8001fc0 <__aeabi_dsub+0x3b8>
 8001fbe:	e69a      	b.n	8001cf6 <__aeabi_dsub+0xee>
 8001fc0:	1af6      	subs	r6, r6, r3
 8001fc2:	4bcd      	ldr	r3, [pc, #820]	; (80022f8 <__aeabi_dsub+0x6f0>)
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	4692      	mov	sl, r2
 8001fc8:	e6a8      	b.n	8001d1c <__aeabi_dsub+0x114>
 8001fca:	003c      	movs	r4, r7
 8001fcc:	4304      	orrs	r4, r0
 8001fce:	1e62      	subs	r2, r4, #1
 8001fd0:	4194      	sbcs	r4, r2
 8001fd2:	e66c      	b.n	8001cae <__aeabi_dsub+0xa6>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	464a      	mov	r2, r9
 8001fde:	08d2      	lsrs	r2, r2, #3
 8001fe0:	e7a6      	b.n	8001f30 <__aeabi_dsub+0x328>
 8001fe2:	4cc6      	ldr	r4, [pc, #792]	; (80022fc <__aeabi_dsub+0x6f4>)
 8001fe4:	1c72      	adds	r2, r6, #1
 8001fe6:	4222      	tst	r2, r4
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x3e4>
 8001fea:	e0ac      	b.n	8002146 <__aeabi_dsub+0x53e>
 8001fec:	464a      	mov	r2, r9
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	2e00      	cmp	r6, #0
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x3ee>
 8001ff4:	e105      	b.n	8002202 <__aeabi_dsub+0x5fa>
 8001ff6:	2a00      	cmp	r2, #0
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x3f4>
 8001ffa:	e156      	b.n	80022aa <__aeabi_dsub+0x6a2>
 8001ffc:	003a      	movs	r2, r7
 8001ffe:	4302      	orrs	r2, r0
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x3fc>
 8002002:	e0db      	b.n	80021bc <__aeabi_dsub+0x5b4>
 8002004:	181c      	adds	r4, r3, r0
 8002006:	429c      	cmp	r4, r3
 8002008:	419b      	sbcs	r3, r3
 800200a:	444f      	add	r7, r9
 800200c:	46ba      	mov	sl, r7
 800200e:	425b      	negs	r3, r3
 8002010:	449a      	add	sl, r3
 8002012:	4653      	mov	r3, sl
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	d400      	bmi.n	800201a <__aeabi_dsub+0x412>
 8002018:	e780      	b.n	8001f1c <__aeabi_dsub+0x314>
 800201a:	4652      	mov	r2, sl
 800201c:	4bb6      	ldr	r3, [pc, #728]	; (80022f8 <__aeabi_dsub+0x6f0>)
 800201e:	2601      	movs	r6, #1
 8002020:	401a      	ands	r2, r3
 8002022:	4692      	mov	sl, r2
 8002024:	e77a      	b.n	8001f1c <__aeabi_dsub+0x314>
 8002026:	4cb3      	ldr	r4, [pc, #716]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8002028:	42a2      	cmp	r2, r4
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x426>
 800202c:	e0c0      	b.n	80021b0 <__aeabi_dsub+0x5a8>
 800202e:	2480      	movs	r4, #128	; 0x80
 8002030:	464d      	mov	r5, r9
 8002032:	0424      	lsls	r4, r4, #16
 8002034:	4325      	orrs	r5, r4
 8002036:	46a9      	mov	r9, r5
 8002038:	4664      	mov	r4, ip
 800203a:	2c38      	cmp	r4, #56	; 0x38
 800203c:	dc53      	bgt.n	80020e6 <__aeabi_dsub+0x4de>
 800203e:	4661      	mov	r1, ip
 8002040:	2c1f      	cmp	r4, #31
 8002042:	dd00      	ble.n	8002046 <__aeabi_dsub+0x43e>
 8002044:	e0cd      	b.n	80021e2 <__aeabi_dsub+0x5da>
 8002046:	2520      	movs	r5, #32
 8002048:	001e      	movs	r6, r3
 800204a:	1b2d      	subs	r5, r5, r4
 800204c:	464c      	mov	r4, r9
 800204e:	40ab      	lsls	r3, r5
 8002050:	40ac      	lsls	r4, r5
 8002052:	40ce      	lsrs	r6, r1
 8002054:	1e5d      	subs	r5, r3, #1
 8002056:	41ab      	sbcs	r3, r5
 8002058:	4334      	orrs	r4, r6
 800205a:	4323      	orrs	r3, r4
 800205c:	464c      	mov	r4, r9
 800205e:	40cc      	lsrs	r4, r1
 8002060:	1b3f      	subs	r7, r7, r4
 8002062:	e045      	b.n	80020f0 <__aeabi_dsub+0x4e8>
 8002064:	464a      	mov	r2, r9
 8002066:	1a1c      	subs	r4, r3, r0
 8002068:	1bd1      	subs	r1, r2, r7
 800206a:	42a3      	cmp	r3, r4
 800206c:	4192      	sbcs	r2, r2
 800206e:	4252      	negs	r2, r2
 8002070:	4692      	mov	sl, r2
 8002072:	000a      	movs	r2, r1
 8002074:	4651      	mov	r1, sl
 8002076:	1a52      	subs	r2, r2, r1
 8002078:	4692      	mov	sl, r2
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	d500      	bpl.n	8002080 <__aeabi_dsub+0x478>
 800207e:	e083      	b.n	8002188 <__aeabi_dsub+0x580>
 8002080:	4653      	mov	r3, sl
 8002082:	4323      	orrs	r3, r4
 8002084:	d000      	beq.n	8002088 <__aeabi_dsub+0x480>
 8002086:	e621      	b.n	8001ccc <__aeabi_dsub+0xc4>
 8002088:	2200      	movs	r2, #0
 800208a:	2500      	movs	r5, #0
 800208c:	e753      	b.n	8001f36 <__aeabi_dsub+0x32e>
 800208e:	181c      	adds	r4, r3, r0
 8002090:	429c      	cmp	r4, r3
 8002092:	419b      	sbcs	r3, r3
 8002094:	444f      	add	r7, r9
 8002096:	46ba      	mov	sl, r7
 8002098:	425b      	negs	r3, r3
 800209a:	449a      	add	sl, r3
 800209c:	4653      	mov	r3, sl
 800209e:	2601      	movs	r6, #1
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dsub+0x49e>
 80020a4:	e73a      	b.n	8001f1c <__aeabi_dsub+0x314>
 80020a6:	2602      	movs	r6, #2
 80020a8:	4652      	mov	r2, sl
 80020aa:	4b93      	ldr	r3, [pc, #588]	; (80022f8 <__aeabi_dsub+0x6f0>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	401a      	ands	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	4021      	ands	r1, r4
 80020b4:	0862      	lsrs	r2, r4, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	07dc      	lsls	r4, r3, #31
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	469a      	mov	sl, r3
 80020be:	4314      	orrs	r4, r2
 80020c0:	e62c      	b.n	8001d1c <__aeabi_dsub+0x114>
 80020c2:	0039      	movs	r1, r7
 80020c4:	3a20      	subs	r2, #32
 80020c6:	40d1      	lsrs	r1, r2
 80020c8:	4662      	mov	r2, ip
 80020ca:	2a20      	cmp	r2, #32
 80020cc:	d006      	beq.n	80020dc <__aeabi_dsub+0x4d4>
 80020ce:	4664      	mov	r4, ip
 80020d0:	2240      	movs	r2, #64	; 0x40
 80020d2:	1b12      	subs	r2, r2, r4
 80020d4:	003c      	movs	r4, r7
 80020d6:	4094      	lsls	r4, r2
 80020d8:	4304      	orrs	r4, r0
 80020da:	9401      	str	r4, [sp, #4]
 80020dc:	9c01      	ldr	r4, [sp, #4]
 80020de:	1e62      	subs	r2, r4, #1
 80020e0:	4194      	sbcs	r4, r2
 80020e2:	430c      	orrs	r4, r1
 80020e4:	e5e3      	b.n	8001cae <__aeabi_dsub+0xa6>
 80020e6:	4649      	mov	r1, r9
 80020e8:	4319      	orrs	r1, r3
 80020ea:	000b      	movs	r3, r1
 80020ec:	1e5c      	subs	r4, r3, #1
 80020ee:	41a3      	sbcs	r3, r4
 80020f0:	1ac4      	subs	r4, r0, r3
 80020f2:	42a0      	cmp	r0, r4
 80020f4:	419b      	sbcs	r3, r3
 80020f6:	425b      	negs	r3, r3
 80020f8:	1afb      	subs	r3, r7, r3
 80020fa:	469a      	mov	sl, r3
 80020fc:	465d      	mov	r5, fp
 80020fe:	0016      	movs	r6, r2
 8002100:	e5dc      	b.n	8001cbc <__aeabi_dsub+0xb4>
 8002102:	4649      	mov	r1, r9
 8002104:	4319      	orrs	r1, r3
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x502>
 8002108:	e0ae      	b.n	8002268 <__aeabi_dsub+0x660>
 800210a:	4661      	mov	r1, ip
 800210c:	4664      	mov	r4, ip
 800210e:	3901      	subs	r1, #1
 8002110:	2c01      	cmp	r4, #1
 8002112:	d100      	bne.n	8002116 <__aeabi_dsub+0x50e>
 8002114:	e0e0      	b.n	80022d8 <__aeabi_dsub+0x6d0>
 8002116:	4c77      	ldr	r4, [pc, #476]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8002118:	45a4      	cmp	ip, r4
 800211a:	d056      	beq.n	80021ca <__aeabi_dsub+0x5c2>
 800211c:	468c      	mov	ip, r1
 800211e:	e69a      	b.n	8001e56 <__aeabi_dsub+0x24e>
 8002120:	4661      	mov	r1, ip
 8002122:	2220      	movs	r2, #32
 8002124:	003c      	movs	r4, r7
 8002126:	1a52      	subs	r2, r2, r1
 8002128:	4094      	lsls	r4, r2
 800212a:	0001      	movs	r1, r0
 800212c:	4090      	lsls	r0, r2
 800212e:	46a0      	mov	r8, r4
 8002130:	4664      	mov	r4, ip
 8002132:	1e42      	subs	r2, r0, #1
 8002134:	4190      	sbcs	r0, r2
 8002136:	4662      	mov	r2, ip
 8002138:	40e1      	lsrs	r1, r4
 800213a:	4644      	mov	r4, r8
 800213c:	40d7      	lsrs	r7, r2
 800213e:	430c      	orrs	r4, r1
 8002140:	4304      	orrs	r4, r0
 8002142:	44b9      	add	r9, r7
 8002144:	e701      	b.n	8001f4a <__aeabi_dsub+0x342>
 8002146:	496b      	ldr	r1, [pc, #428]	; (80022f4 <__aeabi_dsub+0x6ec>)
 8002148:	428a      	cmp	r2, r1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x546>
 800214c:	e70c      	b.n	8001f68 <__aeabi_dsub+0x360>
 800214e:	1818      	adds	r0, r3, r0
 8002150:	4298      	cmp	r0, r3
 8002152:	419b      	sbcs	r3, r3
 8002154:	444f      	add	r7, r9
 8002156:	425b      	negs	r3, r3
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	07dc      	lsls	r4, r3, #31
 800215c:	0840      	lsrs	r0, r0, #1
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	469a      	mov	sl, r3
 8002162:	0016      	movs	r6, r2
 8002164:	4304      	orrs	r4, r0
 8002166:	e6d9      	b.n	8001f1c <__aeabi_dsub+0x314>
 8002168:	2a00      	cmp	r2, #0
 800216a:	d000      	beq.n	800216e <__aeabi_dsub+0x566>
 800216c:	e081      	b.n	8002272 <__aeabi_dsub+0x66a>
 800216e:	003b      	movs	r3, r7
 8002170:	4303      	orrs	r3, r0
 8002172:	d11d      	bne.n	80021b0 <__aeabi_dsub+0x5a8>
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	2500      	movs	r5, #0
 8002178:	0312      	lsls	r2, r2, #12
 800217a:	e70b      	b.n	8001f94 <__aeabi_dsub+0x38c>
 800217c:	08c0      	lsrs	r0, r0, #3
 800217e:	077b      	lsls	r3, r7, #29
 8002180:	465d      	mov	r5, fp
 8002182:	4303      	orrs	r3, r0
 8002184:	08fa      	lsrs	r2, r7, #3
 8002186:	e6d3      	b.n	8001f30 <__aeabi_dsub+0x328>
 8002188:	1ac4      	subs	r4, r0, r3
 800218a:	42a0      	cmp	r0, r4
 800218c:	4180      	sbcs	r0, r0
 800218e:	464b      	mov	r3, r9
 8002190:	4240      	negs	r0, r0
 8002192:	1aff      	subs	r7, r7, r3
 8002194:	1a3b      	subs	r3, r7, r0
 8002196:	469a      	mov	sl, r3
 8002198:	465d      	mov	r5, fp
 800219a:	e597      	b.n	8001ccc <__aeabi_dsub+0xc4>
 800219c:	1a1c      	subs	r4, r3, r0
 800219e:	464a      	mov	r2, r9
 80021a0:	42a3      	cmp	r3, r4
 80021a2:	419b      	sbcs	r3, r3
 80021a4:	1bd7      	subs	r7, r2, r7
 80021a6:	425b      	negs	r3, r3
 80021a8:	1afb      	subs	r3, r7, r3
 80021aa:	469a      	mov	sl, r3
 80021ac:	2601      	movs	r6, #1
 80021ae:	e585      	b.n	8001cbc <__aeabi_dsub+0xb4>
 80021b0:	08c0      	lsrs	r0, r0, #3
 80021b2:	077b      	lsls	r3, r7, #29
 80021b4:	465d      	mov	r5, fp
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6e7      	b.n	8001f8c <__aeabi_dsub+0x384>
 80021bc:	464a      	mov	r2, r9
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	0752      	lsls	r2, r2, #29
 80021c2:	4313      	orrs	r3, r2
 80021c4:	464a      	mov	r2, r9
 80021c6:	08d2      	lsrs	r2, r2, #3
 80021c8:	e6b5      	b.n	8001f36 <__aeabi_dsub+0x32e>
 80021ca:	08c0      	lsrs	r0, r0, #3
 80021cc:	077b      	lsls	r3, r7, #29
 80021ce:	4303      	orrs	r3, r0
 80021d0:	08fa      	lsrs	r2, r7, #3
 80021d2:	e6db      	b.n	8001f8c <__aeabi_dsub+0x384>
 80021d4:	4649      	mov	r1, r9
 80021d6:	4319      	orrs	r1, r3
 80021d8:	000b      	movs	r3, r1
 80021da:	1e59      	subs	r1, r3, #1
 80021dc:	418b      	sbcs	r3, r1
 80021de:	001c      	movs	r4, r3
 80021e0:	e653      	b.n	8001e8a <__aeabi_dsub+0x282>
 80021e2:	464d      	mov	r5, r9
 80021e4:	3c20      	subs	r4, #32
 80021e6:	40e5      	lsrs	r5, r4
 80021e8:	2920      	cmp	r1, #32
 80021ea:	d005      	beq.n	80021f8 <__aeabi_dsub+0x5f0>
 80021ec:	2440      	movs	r4, #64	; 0x40
 80021ee:	1a64      	subs	r4, r4, r1
 80021f0:	4649      	mov	r1, r9
 80021f2:	40a1      	lsls	r1, r4
 80021f4:	430b      	orrs	r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	4643      	mov	r3, r8
 80021fa:	1e5c      	subs	r4, r3, #1
 80021fc:	41a3      	sbcs	r3, r4
 80021fe:	432b      	orrs	r3, r5
 8002200:	e776      	b.n	80020f0 <__aeabi_dsub+0x4e8>
 8002202:	2a00      	cmp	r2, #0
 8002204:	d0e1      	beq.n	80021ca <__aeabi_dsub+0x5c2>
 8002206:	003a      	movs	r2, r7
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	4302      	orrs	r2, r0
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x608>
 800220e:	e6b8      	b.n	8001f82 <__aeabi_dsub+0x37a>
 8002210:	464a      	mov	r2, r9
 8002212:	0752      	lsls	r2, r2, #29
 8002214:	2480      	movs	r4, #128	; 0x80
 8002216:	4313      	orrs	r3, r2
 8002218:	464a      	mov	r2, r9
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	08d2      	lsrs	r2, r2, #3
 800221e:	4222      	tst	r2, r4
 8002220:	d007      	beq.n	8002232 <__aeabi_dsub+0x62a>
 8002222:	08fe      	lsrs	r6, r7, #3
 8002224:	4226      	tst	r6, r4
 8002226:	d104      	bne.n	8002232 <__aeabi_dsub+0x62a>
 8002228:	465d      	mov	r5, fp
 800222a:	0032      	movs	r2, r6
 800222c:	08c3      	lsrs	r3, r0, #3
 800222e:	077f      	lsls	r7, r7, #29
 8002230:	433b      	orrs	r3, r7
 8002232:	0f59      	lsrs	r1, r3, #29
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	0749      	lsls	r1, r1, #29
 8002238:	08db      	lsrs	r3, r3, #3
 800223a:	430b      	orrs	r3, r1
 800223c:	e6a6      	b.n	8001f8c <__aeabi_dsub+0x384>
 800223e:	1ac4      	subs	r4, r0, r3
 8002240:	42a0      	cmp	r0, r4
 8002242:	4180      	sbcs	r0, r0
 8002244:	464b      	mov	r3, r9
 8002246:	4240      	negs	r0, r0
 8002248:	1aff      	subs	r7, r7, r3
 800224a:	1a3b      	subs	r3, r7, r0
 800224c:	469a      	mov	sl, r3
 800224e:	465d      	mov	r5, fp
 8002250:	2601      	movs	r6, #1
 8002252:	e533      	b.n	8001cbc <__aeabi_dsub+0xb4>
 8002254:	003b      	movs	r3, r7
 8002256:	4303      	orrs	r3, r0
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x654>
 800225a:	e715      	b.n	8002088 <__aeabi_dsub+0x480>
 800225c:	08c0      	lsrs	r0, r0, #3
 800225e:	077b      	lsls	r3, r7, #29
 8002260:	465d      	mov	r5, fp
 8002262:	4303      	orrs	r3, r0
 8002264:	08fa      	lsrs	r2, r7, #3
 8002266:	e666      	b.n	8001f36 <__aeabi_dsub+0x32e>
 8002268:	08c0      	lsrs	r0, r0, #3
 800226a:	077b      	lsls	r3, r7, #29
 800226c:	4303      	orrs	r3, r0
 800226e:	08fa      	lsrs	r2, r7, #3
 8002270:	e65e      	b.n	8001f30 <__aeabi_dsub+0x328>
 8002272:	003a      	movs	r2, r7
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	4302      	orrs	r2, r0
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x674>
 800227a:	e682      	b.n	8001f82 <__aeabi_dsub+0x37a>
 800227c:	464a      	mov	r2, r9
 800227e:	0752      	lsls	r2, r2, #29
 8002280:	2480      	movs	r4, #128	; 0x80
 8002282:	4313      	orrs	r3, r2
 8002284:	464a      	mov	r2, r9
 8002286:	0324      	lsls	r4, r4, #12
 8002288:	08d2      	lsrs	r2, r2, #3
 800228a:	4222      	tst	r2, r4
 800228c:	d007      	beq.n	800229e <__aeabi_dsub+0x696>
 800228e:	08fe      	lsrs	r6, r7, #3
 8002290:	4226      	tst	r6, r4
 8002292:	d104      	bne.n	800229e <__aeabi_dsub+0x696>
 8002294:	465d      	mov	r5, fp
 8002296:	0032      	movs	r2, r6
 8002298:	08c3      	lsrs	r3, r0, #3
 800229a:	077f      	lsls	r7, r7, #29
 800229c:	433b      	orrs	r3, r7
 800229e:	0f59      	lsrs	r1, r3, #29
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	08db      	lsrs	r3, r3, #3
 80022a4:	0749      	lsls	r1, r1, #29
 80022a6:	430b      	orrs	r3, r1
 80022a8:	e670      	b.n	8001f8c <__aeabi_dsub+0x384>
 80022aa:	08c0      	lsrs	r0, r0, #3
 80022ac:	077b      	lsls	r3, r7, #29
 80022ae:	4303      	orrs	r3, r0
 80022b0:	08fa      	lsrs	r2, r7, #3
 80022b2:	e640      	b.n	8001f36 <__aeabi_dsub+0x32e>
 80022b4:	464c      	mov	r4, r9
 80022b6:	3920      	subs	r1, #32
 80022b8:	40cc      	lsrs	r4, r1
 80022ba:	4661      	mov	r1, ip
 80022bc:	2920      	cmp	r1, #32
 80022be:	d006      	beq.n	80022ce <__aeabi_dsub+0x6c6>
 80022c0:	4666      	mov	r6, ip
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	1b89      	subs	r1, r1, r6
 80022c6:	464e      	mov	r6, r9
 80022c8:	408e      	lsls	r6, r1
 80022ca:	4333      	orrs	r3, r6
 80022cc:	4698      	mov	r8, r3
 80022ce:	4643      	mov	r3, r8
 80022d0:	1e59      	subs	r1, r3, #1
 80022d2:	418b      	sbcs	r3, r1
 80022d4:	431c      	orrs	r4, r3
 80022d6:	e5d8      	b.n	8001e8a <__aeabi_dsub+0x282>
 80022d8:	181c      	adds	r4, r3, r0
 80022da:	4284      	cmp	r4, r0
 80022dc:	4180      	sbcs	r0, r0
 80022de:	444f      	add	r7, r9
 80022e0:	46ba      	mov	sl, r7
 80022e2:	4240      	negs	r0, r0
 80022e4:	4482      	add	sl, r0
 80022e6:	e6d9      	b.n	800209c <__aeabi_dsub+0x494>
 80022e8:	4653      	mov	r3, sl
 80022ea:	4323      	orrs	r3, r4
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dsub+0x6e8>
 80022ee:	e6cb      	b.n	8002088 <__aeabi_dsub+0x480>
 80022f0:	e614      	b.n	8001f1c <__aeabi_dsub+0x314>
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	000007ff 	.word	0x000007ff
 80022f8:	ff7fffff 	.word	0xff7fffff
 80022fc:	000007fe 	.word	0x000007fe
 8002300:	2300      	movs	r3, #0
 8002302:	4a01      	ldr	r2, [pc, #4]	; (8002308 <__aeabi_dsub+0x700>)
 8002304:	001c      	movs	r4, r3
 8002306:	e529      	b.n	8001d5c <__aeabi_dsub+0x154>
 8002308:	000007ff 	.word	0x000007ff

0800230c <__aeabi_d2iz>:
 800230c:	000a      	movs	r2, r1
 800230e:	b530      	push	{r4, r5, lr}
 8002310:	4c13      	ldr	r4, [pc, #76]	; (8002360 <__aeabi_d2iz+0x54>)
 8002312:	0053      	lsls	r3, r2, #1
 8002314:	0309      	lsls	r1, r1, #12
 8002316:	0005      	movs	r5, r0
 8002318:	0b09      	lsrs	r1, r1, #12
 800231a:	2000      	movs	r0, #0
 800231c:	0d5b      	lsrs	r3, r3, #21
 800231e:	0fd2      	lsrs	r2, r2, #31
 8002320:	42a3      	cmp	r3, r4
 8002322:	dd04      	ble.n	800232e <__aeabi_d2iz+0x22>
 8002324:	480f      	ldr	r0, [pc, #60]	; (8002364 <__aeabi_d2iz+0x58>)
 8002326:	4283      	cmp	r3, r0
 8002328:	dd02      	ble.n	8002330 <__aeabi_d2iz+0x24>
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <__aeabi_d2iz+0x5c>)
 800232c:	18d0      	adds	r0, r2, r3
 800232e:	bd30      	pop	{r4, r5, pc}
 8002330:	2080      	movs	r0, #128	; 0x80
 8002332:	0340      	lsls	r0, r0, #13
 8002334:	4301      	orrs	r1, r0
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <__aeabi_d2iz+0x60>)
 8002338:	1ac0      	subs	r0, r0, r3
 800233a:	281f      	cmp	r0, #31
 800233c:	dd08      	ble.n	8002350 <__aeabi_d2iz+0x44>
 800233e:	480c      	ldr	r0, [pc, #48]	; (8002370 <__aeabi_d2iz+0x64>)
 8002340:	1ac3      	subs	r3, r0, r3
 8002342:	40d9      	lsrs	r1, r3
 8002344:	000b      	movs	r3, r1
 8002346:	4258      	negs	r0, r3
 8002348:	2a00      	cmp	r2, #0
 800234a:	d1f0      	bne.n	800232e <__aeabi_d2iz+0x22>
 800234c:	0018      	movs	r0, r3
 800234e:	e7ee      	b.n	800232e <__aeabi_d2iz+0x22>
 8002350:	4c08      	ldr	r4, [pc, #32]	; (8002374 <__aeabi_d2iz+0x68>)
 8002352:	40c5      	lsrs	r5, r0
 8002354:	46a4      	mov	ip, r4
 8002356:	4463      	add	r3, ip
 8002358:	4099      	lsls	r1, r3
 800235a:	000b      	movs	r3, r1
 800235c:	432b      	orrs	r3, r5
 800235e:	e7f2      	b.n	8002346 <__aeabi_d2iz+0x3a>
 8002360:	000003fe 	.word	0x000003fe
 8002364:	0000041d 	.word	0x0000041d
 8002368:	7fffffff 	.word	0x7fffffff
 800236c:	00000433 	.word	0x00000433
 8002370:	00000413 	.word	0x00000413
 8002374:	fffffbed 	.word	0xfffffbed

08002378 <__aeabi_i2d>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	2800      	cmp	r0, #0
 800237c:	d016      	beq.n	80023ac <__aeabi_i2d+0x34>
 800237e:	17c3      	asrs	r3, r0, #31
 8002380:	18c5      	adds	r5, r0, r3
 8002382:	405d      	eors	r5, r3
 8002384:	0fc4      	lsrs	r4, r0, #31
 8002386:	0028      	movs	r0, r5
 8002388:	f000 f84c 	bl	8002424 <__clzsi2>
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <__aeabi_i2d+0x5c>)
 800238e:	1a1b      	subs	r3, r3, r0
 8002390:	280a      	cmp	r0, #10
 8002392:	dc16      	bgt.n	80023c2 <__aeabi_i2d+0x4a>
 8002394:	0002      	movs	r2, r0
 8002396:	002e      	movs	r6, r5
 8002398:	3215      	adds	r2, #21
 800239a:	4096      	lsls	r6, r2
 800239c:	220b      	movs	r2, #11
 800239e:	1a12      	subs	r2, r2, r0
 80023a0:	40d5      	lsrs	r5, r2
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	032d      	lsls	r5, r5, #12
 80023a6:	0b2d      	lsrs	r5, r5, #12
 80023a8:	0d5b      	lsrs	r3, r3, #21
 80023aa:	e003      	b.n	80023b4 <__aeabi_i2d+0x3c>
 80023ac:	2400      	movs	r4, #0
 80023ae:	2300      	movs	r3, #0
 80023b0:	2500      	movs	r5, #0
 80023b2:	2600      	movs	r6, #0
 80023b4:	051b      	lsls	r3, r3, #20
 80023b6:	432b      	orrs	r3, r5
 80023b8:	07e4      	lsls	r4, r4, #31
 80023ba:	4323      	orrs	r3, r4
 80023bc:	0030      	movs	r0, r6
 80023be:	0019      	movs	r1, r3
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	380b      	subs	r0, #11
 80023c4:	4085      	lsls	r5, r0
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	2600      	movs	r6, #0
 80023cc:	0b2d      	lsrs	r5, r5, #12
 80023ce:	0d5b      	lsrs	r3, r3, #21
 80023d0:	e7f0      	b.n	80023b4 <__aeabi_i2d+0x3c>
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	0000041e 	.word	0x0000041e

080023d8 <__aeabi_ui2d>:
 80023d8:	b510      	push	{r4, lr}
 80023da:	1e04      	subs	r4, r0, #0
 80023dc:	d010      	beq.n	8002400 <__aeabi_ui2d+0x28>
 80023de:	f000 f821 	bl	8002424 <__clzsi2>
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <__aeabi_ui2d+0x48>)
 80023e4:	1a1b      	subs	r3, r3, r0
 80023e6:	280a      	cmp	r0, #10
 80023e8:	dc11      	bgt.n	800240e <__aeabi_ui2d+0x36>
 80023ea:	220b      	movs	r2, #11
 80023ec:	0021      	movs	r1, r4
 80023ee:	1a12      	subs	r2, r2, r0
 80023f0:	40d1      	lsrs	r1, r2
 80023f2:	3015      	adds	r0, #21
 80023f4:	030a      	lsls	r2, r1, #12
 80023f6:	055b      	lsls	r3, r3, #21
 80023f8:	4084      	lsls	r4, r0
 80023fa:	0b12      	lsrs	r2, r2, #12
 80023fc:	0d5b      	lsrs	r3, r3, #21
 80023fe:	e001      	b.n	8002404 <__aeabi_ui2d+0x2c>
 8002400:	2300      	movs	r3, #0
 8002402:	2200      	movs	r2, #0
 8002404:	051b      	lsls	r3, r3, #20
 8002406:	4313      	orrs	r3, r2
 8002408:	0020      	movs	r0, r4
 800240a:	0019      	movs	r1, r3
 800240c:	bd10      	pop	{r4, pc}
 800240e:	0022      	movs	r2, r4
 8002410:	380b      	subs	r0, #11
 8002412:	4082      	lsls	r2, r0
 8002414:	055b      	lsls	r3, r3, #21
 8002416:	0312      	lsls	r2, r2, #12
 8002418:	2400      	movs	r4, #0
 800241a:	0b12      	lsrs	r2, r2, #12
 800241c:	0d5b      	lsrs	r3, r3, #21
 800241e:	e7f1      	b.n	8002404 <__aeabi_ui2d+0x2c>
 8002420:	0000041e 	.word	0x0000041e

08002424 <__clzsi2>:
 8002424:	211c      	movs	r1, #28
 8002426:	2301      	movs	r3, #1
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	4298      	cmp	r0, r3
 800242c:	d301      	bcc.n	8002432 <__clzsi2+0xe>
 800242e:	0c00      	lsrs	r0, r0, #16
 8002430:	3910      	subs	r1, #16
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	4298      	cmp	r0, r3
 8002436:	d301      	bcc.n	800243c <__clzsi2+0x18>
 8002438:	0a00      	lsrs	r0, r0, #8
 800243a:	3908      	subs	r1, #8
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	4298      	cmp	r0, r3
 8002440:	d301      	bcc.n	8002446 <__clzsi2+0x22>
 8002442:	0900      	lsrs	r0, r0, #4
 8002444:	3904      	subs	r1, #4
 8002446:	a202      	add	r2, pc, #8	; (adr r2, 8002450 <__clzsi2+0x2c>)
 8002448:	5c10      	ldrb	r0, [r2, r0]
 800244a:	1840      	adds	r0, r0, r1
 800244c:	4770      	bx	lr
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	02020304 	.word	0x02020304
 8002454:	01010101 	.word	0x01010101
	...

08002460 <__clzdi2>:
 8002460:	b510      	push	{r4, lr}
 8002462:	2900      	cmp	r1, #0
 8002464:	d103      	bne.n	800246e <__clzdi2+0xe>
 8002466:	f7ff ffdd 	bl	8002424 <__clzsi2>
 800246a:	3020      	adds	r0, #32
 800246c:	e002      	b.n	8002474 <__clzdi2+0x14>
 800246e:	0008      	movs	r0, r1
 8002470:	f7ff ffd8 	bl	8002424 <__clzsi2>
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			; (mov r8, r8)

08002478 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		Clocker_Update_Timers(&ourClocker);
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800248a:	0018      	movs	r0, r3
 800248c:	f001 f8a0 	bl	80035d0 <Clocker_Update_Timers>
		Clocker_Segment_Update(&ourClocker);
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002492:	0018      	movs	r0, r3
 8002494:	f000 ffa8 	bl	80033e8 <Clocker_Segment_Update>
	}
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000228 	.word	0x20000228
 80024a4:	20000828 	.word	0x20000828

080024a8 <HAL_UART_RxCpltCallback>:
{
	ourClocker.alarm = 1;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_UART_RxCpltCallback+0x58>)
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_UART_RxCpltCallback+0x1e>
	{
		Clocker_Wifi_Receive(&ourClocker, table2);
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_UART_RxCpltCallback+0x5c>)
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <HAL_UART_RxCpltCallback+0x60>)
 80024bc:	0011      	movs	r1, r2
 80024be:	0018      	movs	r0, r3
 80024c0:	f001 f99a 	bl	80037f8 <Clocker_Wifi_Receive>
 80024c4:	e009      	b.n	80024da <HAL_UART_RxCpltCallback+0x32>
	}
	else if(huart == &huart5)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_UART_RxCpltCallback+0x64>)
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d105      	bne.n	80024da <HAL_UART_RxCpltCallback+0x32>
	{
		Clocker_Bluetooth(&ourClocker, table);
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_UART_RxCpltCallback+0x68>)
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_UART_RxCpltCallback+0x60>)
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f001 f8c7 	bl	8003668 <Clocker_Bluetooth>
	}

	HAL_UART_Receive_IT(&huart5, table, 500);
 80024da:	23fa      	movs	r3, #250	; 0xfa
 80024dc:	005a      	lsls	r2, r3, #1
 80024de:	490c      	ldr	r1, [pc, #48]	; (8002510 <HAL_UART_RxCpltCallback+0x68>)
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_UART_RxCpltCallback+0x64>)
 80024e2:	0018      	movs	r0, r3
 80024e4:	f005 fd08 	bl	8007ef8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, table2, 500);
 80024e8:	23fa      	movs	r3, #250	; 0xfa
 80024ea:	005a      	lsls	r2, r3, #1
 80024ec:	4905      	ldr	r1, [pc, #20]	; (8002504 <HAL_UART_RxCpltCallback+0x5c>)
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_UART_RxCpltCallback+0x58>)
 80024f0:	0018      	movs	r0, r3
 80024f2:	f005 fd01 	bl	8007ef8 <HAL_UART_Receive_IT>
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	200002a8 	.word	0x200002a8
 8002504:	20000634 	.word	0x20000634
 8002508:	20000828 	.word	0x20000828
 800250c:	200003b8 	.word	0x200003b8
 8002510:	20000440 	.word	0x20000440

08002514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 8002518:	f007 fa0c 	bl	8009934 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800251c:	f002 ff5e 	bl	80053dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002520:	f000 f848 	bl	80025b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002524:	f000 fa96 	bl	8002a54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002528:	f000 f958 	bl	80027dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800252c:	f000 f9ac 	bl	8002888 <MX_TIM3_Init>
  MX_RTC_Init();
 8002530:	f000 f8ae 	bl	8002690 <MX_RTC_Init>
  MX_USART4_UART_Init();
 8002534:	f000 fa2e 	bl	8002994 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8002538:	f000 f9fc 	bl	8002934 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 800253c:	f000 fa5a 	bl	80029f4 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  Clocker_Init(&ourClocker, &hrtc, &htim2, &htim3);
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <main+0x80>)
 8002542:	4a15      	ldr	r2, [pc, #84]	; (8002598 <main+0x84>)
 8002544:	4915      	ldr	r1, [pc, #84]	; (800259c <main+0x88>)
 8002546:	4816      	ldr	r0, [pc, #88]	; (80025a0 <main+0x8c>)
 8002548:	f000 fd3a 	bl	8002fc0 <Clocker_Init>
  Clocker_Set_Time(&ourClocker, 12, 0, 0);
 800254c:	4814      	ldr	r0, [pc, #80]	; (80025a0 <main+0x8c>)
 800254e:	2300      	movs	r3, #0
 8002550:	2200      	movs	r2, #0
 8002552:	210c      	movs	r1, #12
 8002554:	f000 fea2 	bl	800329c <Clocker_Set_Time>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_UART_Receive_IT(&huart5, table, 500);
 8002558:	23fa      	movs	r3, #250	; 0xfa
 800255a:	005a      	lsls	r2, r3, #1
 800255c:	4911      	ldr	r1, [pc, #68]	; (80025a4 <main+0x90>)
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <main+0x94>)
 8002560:	0018      	movs	r0, r3
 8002562:	f005 fcc9 	bl	8007ef8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, table2, 500);
 8002566:	23fa      	movs	r3, #250	; 0xfa
 8002568:	005a      	lsls	r2, r3, #1
 800256a:	4910      	ldr	r1, [pc, #64]	; (80025ac <main+0x98>)
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <main+0x9c>)
 800256e:	0018      	movs	r0, r3
 8002570:	f005 fcc2 	bl	8007ef8 <HAL_UART_Receive_IT>

  while (1)
  {
	  Clocker_Change_Screen(&ourClocker);
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <main+0x8c>)
 8002576:	0018      	movs	r0, r3
 8002578:	f000 ffa7 	bl	80034ca <Clocker_Change_Screen>
	  Clocker_Run_Alarm(&ourClocker,&hrtc);
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <main+0x88>)
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <main+0x8c>)
 8002580:	0011      	movs	r1, r2
 8002582:	0018      	movs	r0, r3
 8002584:	f001 f802 	bl	800358c <Clocker_Run_Alarm>
	  Clocker_Alarm_Update(&ourClocker);
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <main+0x8c>)
 800258a:	0018      	movs	r0, r3
 800258c:	f000 ffdf 	bl	800354e <Clocker_Alarm_Update>
	  Clocker_Change_Screen(&ourClocker);
 8002590:	e7f0      	b.n	8002574 <main+0x60>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	20000268 	.word	0x20000268
 8002598:	20000228 	.word	0x20000228
 800259c:	20000204 	.word	0x20000204
 80025a0:	20000828 	.word	0x20000828
 80025a4:	20000440 	.word	0x20000440
 80025a8:	200003b8 	.word	0x200003b8
 80025ac:	20000634 	.word	0x20000634
 80025b0:	200002a8 	.word	0x200002a8

080025b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b09f      	sub	sp, #124	; 0x7c
 80025b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ba:	2440      	movs	r4, #64	; 0x40
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	0018      	movs	r0, r3
 80025c0:	2338      	movs	r3, #56	; 0x38
 80025c2:	001a      	movs	r2, r3
 80025c4:	2100      	movs	r1, #0
 80025c6:	f008 fb09 	bl	800abdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ca:	232c      	movs	r3, #44	; 0x2c
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	0018      	movs	r0, r3
 80025d0:	2314      	movs	r3, #20
 80025d2:	001a      	movs	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	f008 fb01 	bl	800abdc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	0018      	movs	r0, r3
 80025de:	2328      	movs	r3, #40	; 0x28
 80025e0:	001a      	movs	r2, r3
 80025e2:	2100      	movs	r1, #0
 80025e4:	f008 fafa 	bl	800abdc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <SystemClock_Config+0xd4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <SystemClock_Config+0xd8>)
 80025ee:	401a      	ands	r2, r3
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <SystemClock_Config+0xd4>)
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	0109      	lsls	r1, r1, #4
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	2206      	movs	r2, #6
 80025fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002600:	193b      	adds	r3, r7, r4
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	0052      	lsls	r2, r2, #1
 8002606:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002608:	193b      	adds	r3, r7, r4
 800260a:	2201      	movs	r2, #1
 800260c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800260e:	193b      	adds	r3, r7, r4
 8002610:	2210      	movs	r2, #16
 8002612:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002614:	193b      	adds	r3, r7, r4
 8002616:	2200      	movs	r2, #0
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261a:	193b      	adds	r3, r7, r4
 800261c:	0018      	movs	r0, r3
 800261e:	f003 fa8f 	bl	8005b40 <HAL_RCC_OscConfig>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d001      	beq.n	800262a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002626:	f000 fadd 	bl	8002be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	187b      	adds	r3, r7, r1
 800262e:	220f      	movs	r2, #15
 8002630:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2201      	movs	r2, #1
 8002636:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002638:	187b      	adds	r3, r7, r1
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800263e:	187b      	adds	r3, r7, r1
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002644:	187b      	adds	r3, r7, r1
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800264a:	187b      	adds	r3, r7, r1
 800264c:	2100      	movs	r1, #0
 800264e:	0018      	movs	r0, r3
 8002650:	f003 fe4a 	bl	80062e8 <HAL_RCC_ClockConfig>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d001      	beq.n	800265c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002658:	f000 fac4 	bl	8002be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2221      	movs	r2, #33	; 0x21
 8002660:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	0252      	lsls	r2, r2, #9
 800266e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	0018      	movs	r0, r3
 8002674:	f004 f85c 	bl	8006730 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	1e03      	subs	r3, r0, #0
 800267a:	d001      	beq.n	8002680 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800267c:	f000 fab2 	bl	8002be4 <Error_Handler>
  }
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b01f      	add	sp, #124	; 0x7c
 8002686:	bd90      	pop	{r4, r7, pc}
 8002688:	40007000 	.word	0x40007000
 800268c:	ffffe7ff 	.word	0xffffe7ff

08002690 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b090      	sub	sp, #64	; 0x40
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002696:	232c      	movs	r3, #44	; 0x2c
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	0018      	movs	r0, r3
 800269c:	2314      	movs	r3, #20
 800269e:	001a      	movs	r2, r3
 80026a0:	2100      	movs	r1, #0
 80026a2:	f008 fa9b 	bl	800abdc <memset>
  RTC_DateTypeDef sDate = {0};
 80026a6:	2328      	movs	r3, #40	; 0x28
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80026ae:	003b      	movs	r3, r7
 80026b0:	0018      	movs	r0, r3
 80026b2:	2328      	movs	r3, #40	; 0x28
 80026b4:	001a      	movs	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f008 fa90 	bl	800abdc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026bc:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <MX_RTC_Init+0x140>)
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <MX_RTC_Init+0x144>)
 80026c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026c2:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <MX_RTC_Init+0x140>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026c8:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <MX_RTC_Init+0x140>)
 80026ca:	227f      	movs	r2, #127	; 0x7f
 80026cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80026ce:	4b40      	ldr	r3, [pc, #256]	; (80027d0 <MX_RTC_Init+0x140>)
 80026d0:	22ff      	movs	r2, #255	; 0xff
 80026d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026d4:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <MX_RTC_Init+0x140>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <MX_RTC_Init+0x140>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <MX_RTC_Init+0x140>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026e6:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <MX_RTC_Init+0x140>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026ec:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <MX_RTC_Init+0x140>)
 80026ee:	0018      	movs	r0, r3
 80026f0:	f004 f9bc 	bl	8006a6c <HAL_RTC_Init>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d001      	beq.n	80026fc <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80026f8:	f000 fa74 	bl	8002be4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2200      	movs	r2, #0
 8002708:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2200      	movs	r2, #0
 800270e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002710:	187b      	adds	r3, r7, r1
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800271c:	1879      	adds	r1, r7, r1
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <MX_RTC_Init+0x140>)
 8002720:	2201      	movs	r2, #1
 8002722:	0018      	movs	r0, r3
 8002724:	f004 fa3e 	bl	8006ba4 <HAL_RTC_SetTime>
 8002728:	1e03      	subs	r3, r0, #0
 800272a:	d001      	beq.n	8002730 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800272c:	f000 fa5a 	bl	8002be4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002730:	2128      	movs	r1, #40	; 0x28
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2201      	movs	r2, #1
 800273c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2201      	movs	r2, #1
 8002742:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002744:	187b      	adds	r3, r7, r1
 8002746:	2200      	movs	r2, #0
 8002748:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800274a:	1879      	adds	r1, r7, r1
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <MX_RTC_Init+0x140>)
 800274e:	2201      	movs	r2, #1
 8002750:	0018      	movs	r0, r3
 8002752:	f004 fb2f 	bl	8006db4 <HAL_RTC_SetDate>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d001      	beq.n	800275e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800275a:	f000 fa43 	bl	8002be4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800275e:	003b      	movs	r3, r7
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002764:	003b      	movs	r3, r7
 8002766:	2200      	movs	r2, #0
 8002768:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800276a:	003b      	movs	r3, r7
 800276c:	2200      	movs	r2, #0
 800276e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002770:	003b      	movs	r3, r7
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002776:	003b      	movs	r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800277c:	003b      	movs	r3, r7
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 8002782:	003b      	movs	r3, r7
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <MX_RTC_Init+0x148>)
 8002786:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002788:	003b      	movs	r3, r7
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800278e:	003b      	movs	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002794:	003b      	movs	r3, r7
 8002796:	2220      	movs	r2, #32
 8002798:	2101      	movs	r1, #1
 800279a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800279c:	003b      	movs	r3, r7
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0052      	lsls	r2, r2, #1
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027a4:	0039      	movs	r1, r7
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <MX_RTC_Init+0x140>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	0018      	movs	r0, r3
 80027ac:	f004 fbe6 	bl	8006f7c <HAL_RTC_SetAlarm>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d001      	beq.n	80027b8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80027b4:	f000 fa16 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	005a      	lsls	r2, r3, #1
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <MX_RTC_Init+0x140>)
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f004 fd1f 	bl	8007204 <HAL_RTC_DeactivateAlarm>
  /* USER CODE END RTC_Init 2 */

}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b010      	add	sp, #64	; 0x40
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	20000204 	.word	0x20000204
 80027d4:	40002800 	.word	0x40002800
 80027d8:	80000080 	.word	0x80000080

080027dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e2:	2308      	movs	r3, #8
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	0018      	movs	r0, r3
 80027e8:	2310      	movs	r3, #16
 80027ea:	001a      	movs	r2, r3
 80027ec:	2100      	movs	r1, #0
 80027ee:	f008 f9f5 	bl	800abdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f2:	003b      	movs	r3, r7
 80027f4:	0018      	movs	r0, r3
 80027f6:	2308      	movs	r3, #8
 80027f8:	001a      	movs	r2, r3
 80027fa:	2100      	movs	r1, #0
 80027fc:	f008 f9ee 	bl	800abdc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <MX_TIM2_Init+0xa4>)
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	05d2      	lsls	r2, r2, #23
 8002806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <MX_TIM2_Init+0xa4>)
 800280a:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <MX_TIM2_Init+0xa8>)
 800280c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <MX_TIM2_Init+0xa4>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <MX_TIM2_Init+0xa4>)
 8002816:	22fa      	movs	r2, #250	; 0xfa
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_TIM2_Init+0xa4>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <MX_TIM2_Init+0xa4>)
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <MX_TIM2_Init+0xa4>)
 800282a:	0018      	movs	r0, r3
 800282c:	f004 fe62 	bl	80074f4 <HAL_TIM_Base_Init>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002834:	f000 f9d6 	bl	8002be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002838:	2108      	movs	r1, #8
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0152      	lsls	r2, r2, #5
 8002840:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002842:	187a      	adds	r2, r7, r1
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_TIM2_Init+0xa4>)
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f005 f817 	bl	800787c <HAL_TIM_ConfigClockSource>
 800284e:	1e03      	subs	r3, r0, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002852:	f000 f9c7 	bl	8002be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002856:	003b      	movs	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285c:	003b      	movs	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002862:	003a      	movs	r2, r7
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_TIM2_Init+0xa4>)
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f005 f9f3 	bl	8007c54 <HAL_TIMEx_MasterConfigSynchronization>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002872:	f000 f9b7 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b006      	add	sp, #24
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20000228 	.word	0x20000228
 8002884:	00007cff 	.word	0x00007cff

08002888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288e:	2308      	movs	r3, #8
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	0018      	movs	r0, r3
 8002894:	2310      	movs	r3, #16
 8002896:	001a      	movs	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f008 f99f 	bl	800abdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289e:	003b      	movs	r3, r7
 80028a0:	0018      	movs	r0, r3
 80028a2:	2308      	movs	r3, #8
 80028a4:	001a      	movs	r2, r3
 80028a6:	2100      	movs	r1, #0
 80028a8:	f008 f998 	bl	800abdc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <MX_TIM3_Init+0xa4>)
 80028b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028b4:	221f      	movs	r2, #31
 80028b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <MX_TIM3_Init+0xa8>)
 80028c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f004 fe0e 	bl	80074f4 <HAL_TIM_Base_Init>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028dc:	f000 f982 	bl	8002be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e0:	2108      	movs	r1, #8
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0152      	lsls	r2, r2, #5
 80028e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028ea:	187a      	adds	r2, r7, r1
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_TIM3_Init+0xa0>)
 80028ee:	0011      	movs	r1, r2
 80028f0:	0018      	movs	r0, r3
 80028f2:	f004 ffc3 	bl	800787c <HAL_TIM_ConfigClockSource>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028fa:	f000 f973 	bl	8002be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fe:	003b      	movs	r3, r7
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002904:	003b      	movs	r3, r7
 8002906:	2200      	movs	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800290a:	003a      	movs	r2, r7
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_TIM3_Init+0xa0>)
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f005 f99f 	bl	8007c54 <HAL_TIMEx_MasterConfigSynchronization>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800291a:	f000 f963 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b006      	add	sp, #24
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	20000268 	.word	0x20000268
 800292c:	40000400 	.word	0x40000400
 8002930:	0000fffe 	.word	0x0000fffe

08002934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <MX_USART1_UART_Init+0x58>)
 800293a:	4a15      	ldr	r2, [pc, #84]	; (8002990 <MX_USART1_UART_Init+0x5c>)
 800293c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <MX_USART1_UART_Init+0x58>)
 8002940:	22e1      	movs	r2, #225	; 0xe1
 8002942:	0252      	lsls	r2, r2, #9
 8002944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_USART1_UART_Init+0x58>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <MX_USART1_UART_Init+0x58>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_USART1_UART_Init+0x58>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_USART1_UART_Init+0x58>)
 800295a:	220c      	movs	r2, #12
 800295c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_USART1_UART_Init+0x58>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_USART1_UART_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_USART1_UART_Init+0x58>)
 800296c:	2200      	movs	r2, #0
 800296e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_USART1_UART_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <MX_USART1_UART_Init+0x58>)
 8002978:	0018      	movs	r0, r3
 800297a:	f005 f9c9 	bl	8007d10 <HAL_UART_Init>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d001      	beq.n	8002986 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002982:	f000 f92f 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200002a8 	.word	0x200002a8
 8002990:	40013800 	.word	0x40013800

08002994 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_USART4_UART_Init+0x58>)
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <MX_USART4_UART_Init+0x5c>)
 800299c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029a0:	2296      	movs	r2, #150	; 0x96
 80029a2:	0192      	lsls	r2, r2, #6
 80029a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029ba:	220c      	movs	r2, #12
 80029bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <MX_USART4_UART_Init+0x58>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f005 f999 	bl	8007d10 <HAL_UART_Init>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80029e2:	f000 f8ff 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000330 	.word	0x20000330
 80029f0:	40004c00 	.word	0x40004c00

080029f4 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 80029fa:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <MX_USART5_UART_Init+0x5c>)
 80029fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a00:	2296      	movs	r2, #150	; 0x96
 8002a02:	0192      	lsls	r2, r2, #6
 8002a04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <MX_USART5_UART_Init+0x58>)
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f005 f969 	bl	8007d10 <HAL_UART_Init>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8002a42:	f000 f8cf 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200003b8 	.word	0x200003b8
 8002a50:	40005000 	.word	0x40005000

08002a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b08b      	sub	sp, #44	; 0x2c
 8002a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5a:	2414      	movs	r4, #20
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	0018      	movs	r0, r3
 8002a60:	2314      	movs	r3, #20
 8002a62:	001a      	movs	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	f008 f8b9 	bl	800abdc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	4b5b      	ldr	r3, [pc, #364]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002a70:	2104      	movs	r1, #4
 8002a72:	430a      	orrs	r2, r1
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a76:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a82:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a86:	4b54      	ldr	r3, [pc, #336]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a8e:	4b52      	ldr	r3, [pc, #328]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b4f      	ldr	r3, [pc, #316]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab6:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002ab8:	2102      	movs	r1, #2
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ace:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002ad0:	2108      	movs	r1, #8
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <MX_GPIO_Init+0x184>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	2208      	movs	r2, #8
 8002adc:	4013      	ands	r3, r2
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin, GPIO_PIN_RESET);
 8002ae2:	23a0      	movs	r3, #160	; 0xa0
 8002ae4:	05db      	lsls	r3, r3, #23
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	21e0      	movs	r1, #224	; 0xe0
 8002aea:	0018      	movs	r0, r3
 8002aec:	f003 f80b 	bl	8005b06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8002af0:	23ea      	movs	r3, #234	; 0xea
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4839      	ldr	r0, [pc, #228]	; (8002bdc <MX_GPIO_Init+0x188>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	0019      	movs	r1, r3
 8002afa:	f003 f804 	bl	8005b06 <HAL_GPIO_WritePin>
                          |SDO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <MX_GPIO_Init+0x18c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0018      	movs	r0, r3
 8002b06:	f002 fffe 	bl	8005b06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0192      	lsls	r2, r2, #6
 8002b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	2284      	movs	r2, #132	; 0x84
 8002b16:	0392      	lsls	r2, r2, #14
 8002b18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <MX_GPIO_Init+0x18c>)
 8002b24:	0019      	movs	r1, r3
 8002b26:	0010      	movs	r0, r2
 8002b28:	f002 fe52 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b2c:	193b      	adds	r3, r7, r4
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2202      	movs	r2, #2
 8002b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2203      	movs	r2, #3
 8002b42:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	2204      	movs	r2, #4
 8002b48:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	193a      	adds	r2, r7, r4
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	05db      	lsls	r3, r3, #23
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f002 fe3c 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin;
 8002b58:	193b      	adds	r3, r7, r4
 8002b5a:	22e0      	movs	r2, #224	; 0xe0
 8002b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	2201      	movs	r2, #1
 8002b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	193a      	adds	r2, r7, r4
 8002b72:	23a0      	movs	r3, #160	; 0xa0
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f002 fe29 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_6_Pin D_7_Pin D_4_Pin SCLK_Pin
                           SDO_Pin */
  GPIO_InitStruct.Pin = D_6_Pin|D_7_Pin|D_4_Pin|SCLK_Pin
 8002b7e:	0021      	movs	r1, r4
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	22ea      	movs	r2, #234	; 0xea
 8002b84:	00d2      	lsls	r2, r2, #3
 8002b86:	601a      	str	r2, [r3, #0]
                          |SDO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b88:	000c      	movs	r4, r1
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	193b      	adds	r3, r7, r4
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	193b      	adds	r3, r7, r4
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <MX_GPIO_Init+0x188>)
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	f002 fe14 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 8002ba8:	0021      	movs	r1, r4
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <MX_GPIO_Init+0x18c>)
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	0010      	movs	r0, r2
 8002bca:	f002 fe01 	bl	80057d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b00b      	add	sp, #44	; 0x2c
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	50000400 	.word	0x50000400
 8002be0:	50000800 	.word	0x50000800

08002be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be8:	b672      	cpsid	i
}
 8002bea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bec:	e7fe      	b.n	8002bec <Error_Handler+0x8>
	...

08002bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_MspInit+0x24>)
 8002bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_MspInit+0x24>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_MspInit+0x24>)
 8002c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_MspInit+0x24>)
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	0549      	lsls	r1, r1, #21
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <HAL_RTC_MspInit+0x28>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d106      	bne.n	8002c38 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RTC_MspInit+0x2c>)
 8002c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RTC_MspInit+0x2c>)
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	02c9      	lsls	r1, r1, #11
 8002c34:	430a      	orrs	r2, r1
 8002c36:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40002800 	.word	0x40002800
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	05db      	lsls	r3, r3, #23
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d10e      	bne.n	8002c7a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_TIM_Base_MspInit+0x50>)
 8002c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_TIM_Base_MspInit+0x50>)
 8002c62:	2101      	movs	r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	200f      	movs	r0, #15
 8002c6e:	f002 fcf5 	bl	800565c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c72:	200f      	movs	r0, #15
 8002c74:	f002 fd07 	bl	8005686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c78:	e00a      	b.n	8002c90 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <HAL_TIM_Base_MspInit+0x54>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d105      	bne.n	8002c90 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_TIM_Base_MspInit+0x50>)
 8002c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_TIM_Base_MspInit+0x50>)
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40000400 	.word	0x40000400

08002ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b08d      	sub	sp, #52	; 0x34
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	241c      	movs	r4, #28
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	0018      	movs	r0, r3
 8002cae:	2314      	movs	r3, #20
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f007 ff92 	bl	800abdc <memset>
  if(huart->Instance==USART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a66      	ldr	r2, [pc, #408]	; (8002e58 <HAL_UART_MspInit+0x1b8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d133      	bne.n	8002d2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc2:	4b66      	ldr	r3, [pc, #408]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc6:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	01c9      	lsls	r1, r1, #7
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	4b62      	ldr	r3, [pc, #392]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cdc:	4b5f      	ldr	r3, [pc, #380]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	22c0      	movs	r2, #192	; 0xc0
 8002cec:	00d2      	lsls	r2, r2, #3
 8002cee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	0021      	movs	r1, r4
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2203      	movs	r2, #3
 8002d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	2204      	movs	r2, #4
 8002d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	187a      	adds	r2, r7, r1
 8002d0c:	23a0      	movs	r3, #160	; 0xa0
 8002d0e:	05db      	lsls	r3, r3, #23
 8002d10:	0011      	movs	r1, r2
 8002d12:	0018      	movs	r0, r3
 8002d14:	f002 fd5c 	bl	80057d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	201b      	movs	r0, #27
 8002d1e:	f002 fc9d 	bl	800565c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d22:	201b      	movs	r0, #27
 8002d24:	f002 fcaf 	bl	8005686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8002d28:	e091      	b.n	8002e4e <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART4)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <HAL_UART_MspInit+0x1c0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d132      	bne.n	8002d9a <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART4_CLK_ENABLE();
 8002d34:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d38:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0309      	lsls	r1, r1, #12
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d5a:	211c      	movs	r1, #28
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2202      	movs	r2, #2
 8002d66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2203      	movs	r2, #3
 8002d72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2206      	movs	r2, #6
 8002d78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	187a      	adds	r2, r7, r1
 8002d7c:	23a0      	movs	r3, #160	; 0xa0
 8002d7e:	05db      	lsls	r3, r3, #23
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f002 fd24 	bl	80057d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	200e      	movs	r0, #14
 8002d8e:	f002 fc65 	bl	800565c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8002d92:	200e      	movs	r0, #14
 8002d94:	f002 fc77 	bl	8005686 <HAL_NVIC_EnableIRQ>
}
 8002d98:	e059      	b.n	8002e4e <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART5)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <HAL_UART_MspInit+0x1c4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d154      	bne.n	8002e4e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART5_CLK_ENABLE();
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0349      	lsls	r1, r1, #13
 8002dae:	430a      	orrs	r2, r1
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002db8:	2104      	movs	r1, #4
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dbe:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002dd0:	2108      	movs	r1, #8
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_UART_MspInit+0x1bc>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	2208      	movs	r2, #8
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002de2:	211c      	movs	r1, #28
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	0152      	lsls	r2, r2, #5
 8002dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	000c      	movs	r4, r1
 8002dee:	193b      	adds	r3, r7, r4
 8002df0:	2202      	movs	r2, #2
 8002df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	2202      	movs	r2, #2
 8002e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_UART_MspInit+0x1c8>)
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	f002 fcdf 	bl	80057d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e12:	0021      	movs	r1, r4
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	2204      	movs	r2, #4
 8002e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	2206      	movs	r2, #6
 8002e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <HAL_UART_MspInit+0x1cc>)
 8002e36:	0019      	movs	r1, r3
 8002e38:	0010      	movs	r0, r2
 8002e3a:	f002 fcc9 	bl	80057d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	200e      	movs	r0, #14
 8002e44:	f002 fc0a 	bl	800565c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8002e48:	200e      	movs	r0, #14
 8002e4a:	f002 fc1c 	bl	8005686 <HAL_NVIC_EnableIRQ>
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b00d      	add	sp, #52	; 0x34
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40004c00 	.word	0x40004c00
 8002e64:	40005000 	.word	0x40005000
 8002e68:	50000800 	.word	0x50000800
 8002e6c:	50000c00 	.word	0x50000c00

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <NMI_Handler+0x4>

08002e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <HardFault_Handler+0x4>

08002e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e94:	f002 faf6 	bl	8005484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <USART4_5_IRQHandler+0x1c>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f005 f884 	bl	8007fb4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <USART4_5_IRQHandler+0x20>)
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f005 f880 	bl	8007fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	20000330 	.word	0x20000330
 8002ec0:	200003b8 	.word	0x200003b8

08002ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <TIM2_IRQHandler+0x14>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f004 fbee 	bl	80076ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	20000228 	.word	0x20000228

08002edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <USART1_IRQHandler+0x14>)
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f005 f866 	bl	8007fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	200002a8 	.word	0x200002a8

08002ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <_sbrk+0x5c>)
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <_sbrk+0x60>)
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_sbrk+0x64>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <_sbrk+0x64>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <_sbrk+0x68>)
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <_sbrk+0x64>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d207      	bcs.n	8002f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f24:	f007 fee2 	bl	800acec <__errno>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	425b      	negs	r3, r3
 8002f32:	e009      	b.n	8002f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <_sbrk+0x64>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	18d2      	adds	r2, r2, r3
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <_sbrk+0x64>)
 8002f44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b006      	add	sp, #24
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20005000 	.word	0x20005000
 8002f54:	00000400 	.word	0x00000400
 8002f58:	20000d14 	.word	0x20000d14
 8002f5c:	20000f20 	.word	0x20000f20

08002f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002f6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f70:	f7ff fff6 	bl	8002f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f76:	490d      	ldr	r1, [pc, #52]	; (8002fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <LoopForever+0xe>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <LoopForever+0x16>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002f9a:	f007 fead 	bl	800acf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9e:	f7ff fab9 	bl	8002514 <main>

08002fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fa2:	e7fe      	b.n	8002fa2 <LoopForever>
   ldr   r0, =_estack
 8002fa4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002fb0:	0800d00c 	.word	0x0800d00c
  ldr r2, =_sbss
 8002fb4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002fb8:	20000f1c 	.word	0x20000f1c

08002fbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC1_COMP_IRQHandler>
	...

08002fc0 <Clocker_Init>:


#include "Clocker.h"

void Clocker_Init(Clocker * myClocker, RTC_HandleTypeDef * rtcHandle, TIM_HandleTypeDef * timSegment, TIM_HandleTypeDef * timScreen)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b096      	sub	sp, #88	; 0x58
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
	DF_Init(20);
 8002fce:	2014      	movs	r0, #20
 8002fd0:	f000 fd73 	bl	8003aba <DF_Init>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	483c      	ldr	r0, [pc, #240]	; (80030cc <Clocker_Init+0x10c>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	0019      	movs	r1, r3
 8002fde:	f002 fd92 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4839      	ldr	r0, [pc, #228]	; (80030cc <Clocker_Init+0x10c>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	0019      	movs	r1, r3
 8002fec:	f002 fd8b 	bl	8005b06 <HAL_GPIO_WritePin>
	myClocker->maxScreen = 9;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2209      	movs	r2, #9
 8002ff4:	701a      	strb	r2, [r3, #0]
	myClocker->currentScreen = 0;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
	myClocker->screenTimeChanging = 5; //in seconds
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2205      	movs	r2, #5
 8003000:	709a      	strb	r2, [r3, #2]
	Clocker_Set_Screens(myClocker);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f863 	bl	80030d0 <Clocker_Set_Screens>
	myClocker->sTime = (RTC_TimeTypeDef *)malloc(sizeof(RTC_TimeTypeDef));
 800300a:	2014      	movs	r0, #20
 800300c:	f006 fd12 	bl	8009a34 <malloc>
 8003010:	0003      	movs	r3, r0
 8003012:	0019      	movs	r1, r3
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	23a2      	movs	r3, #162	; 0xa2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	50d1      	str	r1, [r2, r3]
	*myClocker->sTime = (RTC_TimeTypeDef){0};
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	23a2      	movs	r3, #162	; 0xa2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	58d3      	ldr	r3, [r2, r3]
 8003024:	0018      	movs	r0, r3
 8003026:	2314      	movs	r3, #20
 8003028:	001a      	movs	r2, r3
 800302a:	2100      	movs	r1, #0
 800302c:	f007 fdd6 	bl	800abdc <memset>
	myClocker->sDate = (RTC_DateTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8003030:	2004      	movs	r0, #4
 8003032:	f006 fcff 	bl	8009a34 <malloc>
 8003036:	0003      	movs	r3, r0
 8003038:	0019      	movs	r1, r3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	23a4      	movs	r3, #164	; 0xa4
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	50d1      	str	r1, [r2, r3]
	*myClocker->sDate = (RTC_DateTypeDef){0};
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	23a4      	movs	r3, #164	; 0xa4
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	58d3      	ldr	r3, [r2, r3]
 800304a:	0018      	movs	r0, r3
 800304c:	2304      	movs	r3, #4
 800304e:	001a      	movs	r2, r3
 8003050:	2100      	movs	r1, #0
 8003052:	f007 fdc3 	bl	800abdc <memset>
	myClocker->sAlarm = (RTC_AlarmTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8003056:	2004      	movs	r0, #4
 8003058:	f006 fcec 	bl	8009a34 <malloc>
 800305c:	0003      	movs	r3, r0
 800305e:	0019      	movs	r1, r3
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	23a6      	movs	r3, #166	; 0xa6
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	50d1      	str	r1, [r2, r3]
	*myClocker->sAlarm = (RTC_AlarmTypeDef){0};
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	23a6      	movs	r3, #166	; 0xa6
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	58d3      	ldr	r3, [r2, r3]
 8003070:	0018      	movs	r0, r3
 8003072:	2328      	movs	r3, #40	; 0x28
 8003074:	001a      	movs	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	f007 fdb0 	bl	800abdc <memset>
	myClocker->rtcHandle = rtcHandle;
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	23a8      	movs	r3, #168	; 0xa8
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	50d1      	str	r1, [r2, r3]
	myClocker->alarmTimer = 0;
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	2356      	movs	r3, #86	; 0x56
 800308a:	33ff      	adds	r3, #255	; 0xff
 800308c:	2100      	movs	r1, #0
 800308e:	54d1      	strb	r1, [r2, r3]
	myClocker->screenTimer = 0;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	23aa      	movs	r3, #170	; 0xaa
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2100      	movs	r1, #0
 8003098:	54d1      	strb	r1, [r2, r3]
	myClocker->alarm = 0;
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	2358      	movs	r3, #88	; 0x58
 800309e:	33ff      	adds	r3, #255	; 0xff
 80030a0:	2100      	movs	r1, #0
 80030a2:	54d1      	strb	r1, [r2, r3]
	uint8_t flags[4] = {0, 0, 0, 0};
 80030a4:	2314      	movs	r3, #20
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(timSegment);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f004 faaa 	bl	8007608 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(timScreen);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f004 fa5c 	bl	8007574 <HAL_TIM_Base_Start>
	lcd_init();
 80030bc:	f000 fe0e 	bl	8003cdc <lcd_init>
	lcd_clear();
 80030c0:	f000 fde2 	bl	8003c88 <lcd_clear>

}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b016      	add	sp, #88	; 0x58
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	50000400 	.word	0x50000400

080030d0 <Clocker_Set_Screens>:

void Clocker_Set_Screens(Clocker * myClocker)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	strcpy(myClocker->tableOfScreens[0][0], "WEATHER");
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	1cda      	adds	r2, r3, #3
 80030dc:	4b65      	ldr	r3, [pc, #404]	; (8003274 <Clocker_Set_Screens+0x1a4>)
 80030de:	0010      	movs	r0, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	2308      	movs	r3, #8
 80030e4:	001a      	movs	r2, r3
 80030e6:	f007 fe36 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[0][1], "%s");
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3313      	adds	r3, #19
 80030ee:	001a      	movs	r2, r3
 80030f0:	4b61      	ldr	r3, [pc, #388]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 80030f2:	0010      	movs	r0, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	2303      	movs	r3, #3
 80030f8:	001a      	movs	r2, r3
 80030fa:	f007 fe2c 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[1][0], "TEMPERATURE");
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3323      	adds	r3, #35	; 0x23
 8003102:	001a      	movs	r2, r3
 8003104:	4b5d      	ldr	r3, [pc, #372]	; (800327c <Clocker_Set_Screens+0x1ac>)
 8003106:	0010      	movs	r0, r2
 8003108:	0019      	movs	r1, r3
 800310a:	230c      	movs	r3, #12
 800310c:	001a      	movs	r2, r3
 800310e:	f007 fe22 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[1][1], "%s");
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3333      	adds	r3, #51	; 0x33
 8003116:	001a      	movs	r2, r3
 8003118:	4b57      	ldr	r3, [pc, #348]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 800311a:	0010      	movs	r0, r2
 800311c:	0019      	movs	r1, r3
 800311e:	2303      	movs	r3, #3
 8003120:	001a      	movs	r2, r3
 8003122:	f007 fe18 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[2][0], "FEELS LIKE");
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3343      	adds	r3, #67	; 0x43
 800312a:	001a      	movs	r2, r3
 800312c:	4b54      	ldr	r3, [pc, #336]	; (8003280 <Clocker_Set_Screens+0x1b0>)
 800312e:	0010      	movs	r0, r2
 8003130:	0019      	movs	r1, r3
 8003132:	230b      	movs	r3, #11
 8003134:	001a      	movs	r2, r3
 8003136:	f007 fe0e 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[2][1], "%s");
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3353      	adds	r3, #83	; 0x53
 800313e:	001a      	movs	r2, r3
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 8003142:	0010      	movs	r0, r2
 8003144:	0019      	movs	r1, r3
 8003146:	2303      	movs	r3, #3
 8003148:	001a      	movs	r2, r3
 800314a:	f007 fe04 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[3][0], "PRESSURE");
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3363      	adds	r3, #99	; 0x63
 8003152:	001a      	movs	r2, r3
 8003154:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <Clocker_Set_Screens+0x1b4>)
 8003156:	0010      	movs	r0, r2
 8003158:	0019      	movs	r1, r3
 800315a:	2309      	movs	r3, #9
 800315c:	001a      	movs	r2, r3
 800315e:	f007 fdfa 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[3][1], "%s");
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3373      	adds	r3, #115	; 0x73
 8003166:	001a      	movs	r2, r3
 8003168:	4b43      	ldr	r3, [pc, #268]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 800316a:	0010      	movs	r0, r2
 800316c:	0019      	movs	r1, r3
 800316e:	2303      	movs	r3, #3
 8003170:	001a      	movs	r2, r3
 8003172:	f007 fdf0 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[4][0], "HUMIDITY");
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3383      	adds	r3, #131	; 0x83
 800317a:	001a      	movs	r2, r3
 800317c:	4b42      	ldr	r3, [pc, #264]	; (8003288 <Clocker_Set_Screens+0x1b8>)
 800317e:	0010      	movs	r0, r2
 8003180:	0019      	movs	r1, r3
 8003182:	2309      	movs	r3, #9
 8003184:	001a      	movs	r2, r3
 8003186:	f007 fde6 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[4][1], "%s");
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3393      	adds	r3, #147	; 0x93
 800318e:	001a      	movs	r2, r3
 8003190:	4b39      	ldr	r3, [pc, #228]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 8003192:	0010      	movs	r0, r2
 8003194:	0019      	movs	r1, r3
 8003196:	2303      	movs	r3, #3
 8003198:	001a      	movs	r2, r3
 800319a:	f007 fddc 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[5][0], "WIND SPEED");
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	33a3      	adds	r3, #163	; 0xa3
 80031a2:	001a      	movs	r2, r3
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <Clocker_Set_Screens+0x1bc>)
 80031a6:	0010      	movs	r0, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	230b      	movs	r3, #11
 80031ac:	001a      	movs	r2, r3
 80031ae:	f007 fdd2 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[5][1], "%s");
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	33b3      	adds	r3, #179	; 0xb3
 80031b6:	001a      	movs	r2, r3
 80031b8:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 80031ba:	0010      	movs	r0, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	2303      	movs	r3, #3
 80031c0:	001a      	movs	r2, r3
 80031c2:	f007 fdc8 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[6][0], "SUNRISE");
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	33c3      	adds	r3, #195	; 0xc3
 80031ca:	001a      	movs	r2, r3
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <Clocker_Set_Screens+0x1c0>)
 80031ce:	0010      	movs	r0, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	2308      	movs	r3, #8
 80031d4:	001a      	movs	r2, r3
 80031d6:	f007 fdbe 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[6][1], "%s");
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	33d3      	adds	r3, #211	; 0xd3
 80031de:	001a      	movs	r2, r3
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 80031e2:	0010      	movs	r0, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	2303      	movs	r3, #3
 80031e8:	001a      	movs	r2, r3
 80031ea:	f007 fdb4 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[7][0], "SUNSET");
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	33e3      	adds	r3, #227	; 0xe3
 80031f2:	001a      	movs	r2, r3
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <Clocker_Set_Screens+0x1c4>)
 80031f6:	0010      	movs	r0, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	2307      	movs	r3, #7
 80031fc:	001a      	movs	r2, r3
 80031fe:	f007 fdaa 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[7][1], "%s");
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	33f3      	adds	r3, #243	; 0xf3
 8003206:	001a      	movs	r2, r3
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 800320a:	0010      	movs	r0, r2
 800320c:	0019      	movs	r1, r3
 800320e:	2303      	movs	r3, #3
 8003210:	001a      	movs	r2, r3
 8003212:	f007 fda0 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[8][0], "CITY");
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1d1a      	adds	r2, r3, #4
 800321a:	32ff      	adds	r2, #255	; 0xff
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <Clocker_Set_Screens+0x1c8>)
 800321e:	0010      	movs	r0, r2
 8003220:	0019      	movs	r1, r3
 8003222:	2305      	movs	r3, #5
 8003224:	001a      	movs	r2, r3
 8003226:	f007 fd96 	bl	800ad56 <memcpy>
	strcpy(myClocker->tableOfScreens[8][1], "%s");
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3314      	adds	r3, #20
 800322e:	33ff      	adds	r3, #255	; 0xff
 8003230:	001a      	movs	r2, r3
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <Clocker_Set_Screens+0x1a8>)
 8003234:	0010      	movs	r0, r2
 8003236:	0019      	movs	r1, r3
 8003238:	2303      	movs	r3, #3
 800323a:	001a      	movs	r2, r3
 800323c:	f007 fd8b 	bl	800ad56 <memcpy>
	for(int i=0; i<9; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e00d      	b.n	8003262 <Clocker_Set_Screens+0x192>
	{
		strcpy(myClocker->contentOfScreens[i], "");
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	2289      	movs	r2, #137	; 0x89
 800324c:	00d2      	lsls	r2, r2, #3
 800324e:	4694      	mov	ip, r2
 8003250:	4463      	add	r3, ip
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	3301      	adds	r3, #1
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<9; i++)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b08      	cmp	r3, #8
 8003266:	ddee      	ble.n	8003246 <Clocker_Set_Screens+0x176>
	}
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b004      	add	sp, #16
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	0800c970 	.word	0x0800c970
 8003278:	0800c978 	.word	0x0800c978
 800327c:	0800c97c 	.word	0x0800c97c
 8003280:	0800c988 	.word	0x0800c988
 8003284:	0800c994 	.word	0x0800c994
 8003288:	0800c9a0 	.word	0x0800c9a0
 800328c:	0800c9ac 	.word	0x0800c9ac
 8003290:	0800c9b8 	.word	0x0800c9b8
 8003294:	0800c9c0 	.word	0x0800c9c0
 8003298:	0800c9c8 	.word	0x0800c9c8

0800329c <Clocker_Set_Time>:

void Clocker_Set_Time(Clocker * myClocker, uint8_t newHours, uint8_t newMinutes, uint8_t newSeconds)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	000c      	movs	r4, r1
 80032a6:	0010      	movs	r0, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	1cfb      	adds	r3, r7, #3
 80032ac:	1c22      	adds	r2, r4, #0
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	1cbb      	adds	r3, r7, #2
 80032b2:	1c02      	adds	r2, r0, #0
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	1c7b      	adds	r3, r7, #1
 80032b8:	1c0a      	adds	r2, r1, #0
 80032ba:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Hours = newHours;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	23a2      	movs	r3, #162	; 0xa2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	58d3      	ldr	r3, [r2, r3]
 80032c4:	1cfa      	adds	r2, r7, #3
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Minutes = newMinutes;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	23a2      	movs	r3, #162	; 0xa2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	58d3      	ldr	r3, [r2, r3]
 80032d2:	1cba      	adds	r2, r7, #2
 80032d4:	7812      	ldrb	r2, [r2, #0]
 80032d6:	705a      	strb	r2, [r3, #1]
	myClocker->sTime->Seconds = newSeconds;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	23a2      	movs	r3, #162	; 0xa2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	58d3      	ldr	r3, [r2, r3]
 80032e0:	1c7a      	adds	r2, r7, #1
 80032e2:	7812      	ldrb	r2, [r2, #0]
 80032e4:	709a      	strb	r2, [r3, #2]
	myClocker->sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	23a2      	movs	r3, #162	; 0xa2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	58d3      	ldr	r3, [r2, r3]
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
	myClocker->sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	23a2      	movs	r3, #162	; 0xa2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	58d3      	ldr	r3, [r2, r3]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	23a8      	movs	r3, #168	; 0xa8
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	58d0      	ldr	r0, [r2, r3]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	23a2      	movs	r3, #162	; 0xa2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	58d3      	ldr	r3, [r2, r3]
 800330e:	2200      	movs	r2, #0
 8003310:	0019      	movs	r1, r3
 8003312:	f003 fc47 	bl	8006ba4 <HAL_RTC_SetTime>
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b003      	add	sp, #12
 800331c:	bd90      	pop	{r4, r7, pc}
	...

08003320 <Clocker_Set_Alarm>:

void Clocker_Set_Alarm(Clocker * myClocker, uint8_t alarmHours, uint8_t alarmMinutes)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	0008      	movs	r0, r1
 800332a:	0011      	movs	r1, r2
 800332c:	1cfb      	adds	r3, r7, #3
 800332e:	1c02      	adds	r2, r0, #0
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	1cbb      	adds	r3, r7, #2
 8003334:	1c0a      	adds	r2, r1, #0
 8003336:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Hours = alarmHours;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	23a6      	movs	r3, #166	; 0xa6
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	58d3      	ldr	r3, [r2, r3]
 8003340:	1cfa      	adds	r2, r7, #3
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Minutes = alarmMinutes;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	23a6      	movs	r3, #166	; 0xa6
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	58d3      	ldr	r3, [r2, r3]
 800334e:	1cba      	adds	r2, r7, #2
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	705a      	strb	r2, [r3, #1]
	myClocker->sAlarm->AlarmTime.Seconds = 0x0;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	23a6      	movs	r3, #166	; 0xa6
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	58d3      	ldr	r3, [r2, r3]
 800335c:	2200      	movs	r2, #0
 800335e:	709a      	strb	r2, [r3, #2]
	myClocker->sAlarm->AlarmTime.SubSeconds = 0x0;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	23a6      	movs	r3, #166	; 0xa6
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	58d3      	ldr	r3, [r2, r3]
 8003368:	2200      	movs	r2, #0
 800336a:	605a      	str	r2, [r3, #4]
	myClocker->sAlarm->AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	23a6      	movs	r3, #166	; 0xa6
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	58d3      	ldr	r3, [r2, r3]
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
	myClocker->sAlarm->AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	23a6      	movs	r3, #166	; 0xa6
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	58d3      	ldr	r3, [r2, r3]
 8003380:	2200      	movs	r2, #0
 8003382:	611a      	str	r2, [r3, #16]
	myClocker->sAlarm->AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	23a6      	movs	r3, #166	; 0xa6
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	58d3      	ldr	r3, [r2, r3]
 800338c:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <Clocker_Set_Alarm+0xc4>)
 800338e:	615a      	str	r2, [r3, #20]
	myClocker->sAlarm->AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	23a6      	movs	r3, #166	; 0xa6
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	58d3      	ldr	r3, [r2, r3]
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
	myClocker->sAlarm->AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	23a6      	movs	r3, #166	; 0xa6
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	58d3      	ldr	r3, [r2, r3]
 80033a4:	2200      	movs	r2, #0
 80033a6:	61da      	str	r2, [r3, #28]
	myClocker->sAlarm->AlarmDateWeekDay = 0x1;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	23a6      	movs	r3, #166	; 0xa6
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	58d3      	ldr	r3, [r2, r3]
 80033b0:	2220      	movs	r2, #32
 80033b2:	2101      	movs	r1, #1
 80033b4:	5499      	strb	r1, [r3, r2]
	myClocker->sAlarm->Alarm = RTC_ALARM_A;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	23a6      	movs	r3, #166	; 0xa6
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	58d3      	ldr	r3, [r2, r3]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	0052      	lsls	r2, r2, #1
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTC_SetAlarm(myClocker->rtcHandle, myClocker->sAlarm, RTC_FORMAT_BCD);
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	23a8      	movs	r3, #168	; 0xa8
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	58d0      	ldr	r0, [r2, r3]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	23a6      	movs	r3, #166	; 0xa6
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	58d3      	ldr	r3, [r2, r3]
 80033d4:	2201      	movs	r2, #1
 80033d6:	0019      	movs	r1, r3
 80033d8:	f003 fdd0 	bl	8006f7c <HAL_RTC_SetAlarm>
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	80000080 	.word	0x80000080

080033e8 <Clocker_Segment_Update>:

void Clocker_Segment_Update(Clocker * myClocker)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	uint8_t tempTime[4] = {0};
 80033f0:	240c      	movs	r4, #12
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
	HAL_RTC_GetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	23a8      	movs	r3, #168	; 0xa8
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	58d0      	ldr	r0, [r2, r3]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	23a2      	movs	r3, #162	; 0xa2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	58d3      	ldr	r3, [r2, r3]
 8003408:	2200      	movs	r2, #0
 800340a:	0019      	movs	r1, r3
 800340c:	f003 fc74 	bl	8006cf8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(myClocker->rtcHandle, myClocker->sDate, RTC_FORMAT_BIN);
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	23a8      	movs	r3, #168	; 0xa8
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	58d0      	ldr	r0, [r2, r3]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	23a4      	movs	r3, #164	; 0xa4
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	58d3      	ldr	r3, [r2, r3]
 8003420:	2200      	movs	r2, #0
 8003422:	0019      	movs	r1, r3
 8003424:	f003 fd5a 	bl	8006edc <HAL_RTC_GetDate>
	tempTime[0] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)/10);
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	23a2      	movs	r3, #162	; 0xa2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	58d3      	ldr	r3, [r2, r3]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	210a      	movs	r1, #10
 8003434:	0018      	movs	r0, r3
 8003436:	f7fc fe8d 	bl	8000154 <__udivsi3>
 800343a:	0003      	movs	r3, r0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	0018      	movs	r0, r3
 8003440:	f000 f8e8 	bl	8003614 <Clocker_Convert_Int_to_Segment>
 8003444:	0003      	movs	r3, r0
 8003446:	001a      	movs	r2, r3
 8003448:	193b      	adds	r3, r7, r4
 800344a:	701a      	strb	r2, [r3, #0]
	tempTime[1] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)%10);
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	23a2      	movs	r3, #162	; 0xa2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	58d3      	ldr	r3, [r2, r3]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	210a      	movs	r1, #10
 8003458:	0018      	movs	r0, r3
 800345a:	f7fc ff01 	bl	8000260 <__aeabi_uidivmod>
 800345e:	000b      	movs	r3, r1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f8d6 	bl	8003614 <Clocker_Convert_Int_to_Segment>
 8003468:	0003      	movs	r3, r0
 800346a:	001a      	movs	r2, r3
 800346c:	193b      	adds	r3, r7, r4
 800346e:	705a      	strb	r2, [r3, #1]
	tempTime[2] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)/10);
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	23a2      	movs	r3, #162	; 0xa2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	58d3      	ldr	r3, [r2, r3]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	210a      	movs	r1, #10
 800347c:	0018      	movs	r0, r3
 800347e:	f7fc fe69 	bl	8000154 <__udivsi3>
 8003482:	0003      	movs	r3, r0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	0018      	movs	r0, r3
 8003488:	f000 f8c4 	bl	8003614 <Clocker_Convert_Int_to_Segment>
 800348c:	0003      	movs	r3, r0
 800348e:	001a      	movs	r2, r3
 8003490:	193b      	adds	r3, r7, r4
 8003492:	709a      	strb	r2, [r3, #2]
	tempTime[3] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)%10);
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	23a2      	movs	r3, #162	; 0xa2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	58d3      	ldr	r3, [r2, r3]
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	210a      	movs	r1, #10
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7fc fedd 	bl	8000260 <__aeabi_uidivmod>
 80034a6:	000b      	movs	r3, r1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 f8b2 	bl	8003614 <Clocker_Convert_Int_to_Segment>
 80034b0:	0003      	movs	r3, r0
 80034b2:	001a      	movs	r2, r3
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	70da      	strb	r2, [r3, #3]
	tm1637_DisplayHandle(7, tempTime);
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	0019      	movs	r1, r3
 80034bc:	2007      	movs	r0, #7
 80034be:	f000 fe0d 	bl	80040dc <tm1637_DisplayHandle>
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b005      	add	sp, #20
 80034c8:	bd90      	pop	{r4, r7, pc}

080034ca <Clocker_Change_Screen>:

void Clocker_Change_Screen(Clocker * myClocker)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
	if(myClocker->screenTimer >= myClocker->screenTimeChanging)
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	23aa      	movs	r3, #170	; 0xaa
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	5cd2      	ldrb	r2, [r2, r3]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	789b      	ldrb	r3, [r3, #2]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d331      	bcc.n	8003546 <Clocker_Change_Screen+0x7c>
	{
		myClocker->screenTimer = 0;
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	23aa      	movs	r3, #170	; 0xaa
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2100      	movs	r1, #0
 80034ea:	54d1      	strb	r1, [r2, r3]
		myClocker->currentScreen++;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	3301      	adds	r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	705a      	strb	r2, [r3, #1]
		if(myClocker->currentScreen >= 10)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d902      	bls.n	8003506 <Clocker_Change_Screen+0x3c>
		{
			myClocker->currentScreen = 0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	705a      	strb	r2, [r3, #1]
		}
		lcd_clear();
 8003506:	f000 fbbf 	bl	8003c88 <lcd_clear>
		lcd_put_cur(0, 0);
 800350a:	2100      	movs	r1, #0
 800350c:	2000      	movs	r0, #0
 800350e:	f000 fbc6 	bl	8003c9e <lcd_put_cur>
		lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][0]);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	015b      	lsls	r3, r3, #5
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	18d3      	adds	r3, r2, r3
 800351c:	3303      	adds	r3, #3
 800351e:	0018      	movs	r0, r3
 8003520:	f000 fc1a 	bl	8003d58 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003524:	2100      	movs	r1, #0
 8003526:	2001      	movs	r0, #1
 8003528:	f000 fbb9 	bl	8003c9e <lcd_put_cur>
		lcd_send_string(myClocker->contentOfScreens[myClocker->currentScreen]);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	785b      	ldrb	r3, [r3, #1]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	2289      	movs	r2, #137	; 0x89
 8003534:	00d2      	lsls	r2, r2, #3
 8003536:	4694      	mov	ip, r2
 8003538:	4463      	add	r3, ip
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	18d3      	adds	r3, r2, r3
 800353e:	3301      	adds	r3, #1
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fc09 	bl	8003d58 <lcd_send_string>
	}
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}

0800354e <Clocker_Alarm_Update>:

void Clocker_Alarm_Update(Clocker * myClocker)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
	if(myClocker->alarmTimer >= 60)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	2356      	movs	r3, #86	; 0x56
 800355a:	33ff      	adds	r3, #255	; 0xff
 800355c:	5cd3      	ldrb	r3, [r2, r3]
 800355e:	2b3b      	cmp	r3, #59	; 0x3b
 8003560:	d910      	bls.n	8003584 <Clocker_Alarm_Update+0x36>
	{
		myClocker->alarmTimer = 0;
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	2356      	movs	r3, #86	; 0x56
 8003566:	33ff      	adds	r3, #255	; 0xff
 8003568:	2100      	movs	r1, #0
 800356a:	54d1      	strb	r1, [r2, r3]
		myClocker->alarm = 0;
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	2358      	movs	r3, #88	; 0x58
 8003570:	33ff      	adds	r3, #255	; 0xff
 8003572:	2100      	movs	r1, #0
 8003574:	54d1      	strb	r1, [r2, r3]
		myClocker->alarmTimerOn = 0;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	23ab      	movs	r3, #171	; 0xab
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2100      	movs	r1, #0
 800357e:	54d1      	strb	r1, [r2, r3]
		DF_Pause();
 8003580:	f000 fab9 	bl	8003af6 <DF_Pause>
	}
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}

0800358c <Clocker_Run_Alarm>:

void Clocker_Run_Alarm(Clocker * myClocker, RTC_HandleTypeDef * hrtc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

	if(myClocker->alarm == 1)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	2358      	movs	r3, #88	; 0x58
 800359a:	33ff      	adds	r3, #255	; 0xff
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d112      	bne.n	80035c8 <Clocker_Run_Alarm+0x3c>
	{
		myClocker->alarm = 0;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	2358      	movs	r3, #88	; 0x58
 80035a6:	33ff      	adds	r3, #255	; 0xff
 80035a8:	2100      	movs	r1, #0
 80035aa:	54d1      	strb	r1, [r2, r3]
		myClocker->alarmTimerOn = 1;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	23ab      	movs	r3, #171	; 0xab
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2101      	movs	r1, #1
 80035b4:	54d1      	strb	r1, [r2, r3]
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	005a      	lsls	r2, r3, #1
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	0011      	movs	r1, r2
 80035be:	0018      	movs	r0, r3
 80035c0:	f003 fe20 	bl	8007204 <HAL_RTC_DeactivateAlarm>
		DF_PlayFromStart();
 80035c4:	f000 fa6c 	bl	8003aa0 <DF_PlayFromStart>
	}
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <Clocker_Update_Timers>:

void Clocker_Update_Timers(Clocker * myClocker)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	if(myClocker->alarmTimerOn == 1)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	23ab      	movs	r3, #171	; 0xab
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d109      	bne.n	80035f8 <Clocker_Update_Timers+0x28>
	{
		myClocker->alarmTimer++;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	2356      	movs	r3, #86	; 0x56
 80035e8:	33ff      	adds	r3, #255	; 0xff
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2d9      	uxtb	r1, r3
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	2356      	movs	r3, #86	; 0x56
 80035f4:	33ff      	adds	r3, #255	; 0xff
 80035f6:	54d1      	strb	r1, [r2, r3]
	}
	myClocker->screenTimer++;
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	23aa      	movs	r3, #170	; 0xaa
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	3301      	adds	r3, #1
 8003602:	b2d9      	uxtb	r1, r3
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	23aa      	movs	r3, #170	; 0xaa
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	54d1      	strb	r1, [r2, r3]
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <Clocker_Convert_Int_to_Segment>:


uint8_t Clocker_Convert_Int_to_Segment(uint8_t c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	0002      	movs	r2, r0
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	701a      	strb	r2, [r3, #0]
	switch(c)
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b09      	cmp	r3, #9
 8003626:	d818      	bhi.n	800365a <Clocker_Convert_Int_to_Segment+0x46>
 8003628:	009a      	lsls	r2, r3, #2
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <Clocker_Convert_Int_to_Segment+0x50>)
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 8003632:	233f      	movs	r3, #63	; 0x3f
 8003634:	e012      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 1 : return 0x06;
 8003636:	2306      	movs	r3, #6
 8003638:	e010      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 2 : return 0x5b;
 800363a:	235b      	movs	r3, #91	; 0x5b
 800363c:	e00e      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 3 : return 0x4f;
 800363e:	234f      	movs	r3, #79	; 0x4f
 8003640:	e00c      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 4 : return 0x66;
 8003642:	2366      	movs	r3, #102	; 0x66
 8003644:	e00a      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 5 : return 0x6d;
 8003646:	236d      	movs	r3, #109	; 0x6d
 8003648:	e008      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 6 : return 0x7d;
 800364a:	237d      	movs	r3, #125	; 0x7d
 800364c:	e006      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 7 : return 0x07;
 800364e:	2307      	movs	r3, #7
 8003650:	e004      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 8 : return 0x7f;
 8003652:	237f      	movs	r3, #127	; 0x7f
 8003654:	e002      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
		case 9 : return 0x6f;
 8003656:	236f      	movs	r3, #111	; 0x6f
 8003658:	e000      	b.n	800365c <Clocker_Convert_Int_to_Segment+0x48>
	}
	return 0x3f;
 800365a:	233f      	movs	r3, #63	; 0x3f
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	0800cb4c 	.word	0x0800cb4c

08003668 <Clocker_Bluetooth>:

void Clocker_Bluetooth(Clocker * myClocker, char * table)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
	const char * result = strchr(table, '_');
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	215f      	movs	r1, #95	; 0x5f
 8003676:	0018      	movs	r0, r3
 8003678:	f007 fab8 	bl	800abec <strchr>
 800367c:	0003      	movs	r3, r0
 800367e:	60fb      	str	r3, [r7, #12]
			if (result != NULL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <Clocker_Bluetooth+0x24>
			{
				table[result - table] = '\0';
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
			}
			cJSON * myTempObj = cJSON_Parse(table);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	0018      	movs	r0, r3
 8003690:	f001 fb38 	bl	8004d04 <cJSON_Parse>
 8003694:	0003      	movs	r3, r0
 8003696:	60bb      	str	r3, [r7, #8]
			if(cJSON_IsTrue(cJSON_GetObjectItem(myTempObj, "wifi")))
 8003698:	4a4f      	ldr	r2, [pc, #316]	; (80037d8 <Clocker_Bluetooth+0x170>)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0011      	movs	r1, r2
 800369e:	0018      	movs	r0, r3
 80036a0:	f001 fe4d 	bl	800533e <cJSON_GetObjectItem>
 80036a4:	0003      	movs	r3, r0
 80036a6:	0018      	movs	r0, r3
 80036a8:	f001 fe6e 	bl	8005388 <cJSON_IsTrue>
 80036ac:	1e03      	subs	r3, r0, #0
 80036ae:	d01c      	beq.n	80036ea <Clocker_Bluetooth+0x82>
			{
				myClocker->wifi = 1;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	23ac      	movs	r3, #172	; 0xac
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2101      	movs	r1, #1
 80036b8:	54d1      	strb	r1, [r2, r3]
				if(cJSON_IsTrue(cJSON_GetObjectItem(myTempObj, "weather")))
 80036ba:	4a48      	ldr	r2, [pc, #288]	; (80037dc <Clocker_Bluetooth+0x174>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	0011      	movs	r1, r2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f001 fe3c 	bl	800533e <cJSON_GetObjectItem>
 80036c6:	0003      	movs	r3, r0
 80036c8:	0018      	movs	r0, r3
 80036ca:	f001 fe5d 	bl	8005388 <cJSON_IsTrue>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d005      	beq.n	80036de <Clocker_Bluetooth+0x76>
				{
					myClocker->weather = 1;
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	235a      	movs	r3, #90	; 0x5a
 80036d6:	33ff      	adds	r3, #255	; 0xff
 80036d8:	2101      	movs	r1, #1
 80036da:	54d1      	strb	r1, [r2, r3]
 80036dc:	e050      	b.n	8003780 <Clocker_Bluetooth+0x118>
				}
				else
				{
					myClocker->weather = 0;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	235a      	movs	r3, #90	; 0x5a
 80036e2:	33ff      	adds	r3, #255	; 0xff
 80036e4:	2100      	movs	r1, #0
 80036e6:	54d1      	strb	r1, [r2, r3]
 80036e8:	e04a      	b.n	8003780 <Clocker_Bluetooth+0x118>
				}
			}
			else
			{
				myClocker->wifi = 0;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	23ac      	movs	r3, #172	; 0xac
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2100      	movs	r1, #0
 80036f2:	54d1      	strb	r1, [r2, r3]
				if(cJSON_IsFalse(cJSON_GetObjectItem(myTempObj, "dateTime")))
 80036f4:	4a3a      	ldr	r2, [pc, #232]	; (80037e0 <Clocker_Bluetooth+0x178>)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f001 fe1f 	bl	800533e <cJSON_GetObjectItem>
 8003700:	0003      	movs	r3, r0
 8003702:	0018      	movs	r0, r3
 8003704:	f001 fe2b 	bl	800535e <cJSON_IsFalse>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d034      	beq.n	8003776 <Clocker_Bluetooth+0x10e>
				{
					myClocker->dateTime = 0;
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	23ad      	movs	r3, #173	; 0xad
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2100      	movs	r1, #0
 8003714:	54d1      	strb	r1, [r2, r3]
					if (cJSON_IsNumber(cJSON_GetObjectItem(myTempObj, "dateTimeHours")) && cJSON_IsNumber(cJSON_GetObjectItem(myTempObj, "dateTimeMinutes")))
 8003716:	4a33      	ldr	r2, [pc, #204]	; (80037e4 <Clocker_Bluetooth+0x17c>)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	0011      	movs	r1, r2
 800371c:	0018      	movs	r0, r3
 800371e:	f001 fe0e 	bl	800533e <cJSON_GetObjectItem>
 8003722:	0003      	movs	r3, r0
 8003724:	0018      	movs	r0, r3
 8003726:	f001 fe44 	bl	80053b2 <cJSON_IsNumber>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d028      	beq.n	8003780 <Clocker_Bluetooth+0x118>
 800372e:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <Clocker_Bluetooth+0x180>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f001 fe02 	bl	800533e <cJSON_GetObjectItem>
 800373a:	0003      	movs	r3, r0
 800373c:	0018      	movs	r0, r3
 800373e:	f001 fe38 	bl	80053b2 <cJSON_IsNumber>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d01c      	beq.n	8003780 <Clocker_Bluetooth+0x118>
					{
						Clocker_Set_Time(myClocker, cJSON_GetObjectItem(myTempObj, "dateTimeHours")->valueint, cJSON_GetObjectItem(myTempObj, "dateTimeMinutes")->valueint, 0);
 8003746:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <Clocker_Bluetooth+0x17c>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f001 fdf6 	bl	800533e <cJSON_GetObjectItem>
 8003752:	0003      	movs	r3, r0
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	b2dc      	uxtb	r4, r3
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <Clocker_Bluetooth+0x180>)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f001 fded 	bl	800533e <cJSON_GetObjectItem>
 8003764:	0003      	movs	r3, r0
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	2300      	movs	r3, #0
 800376e:	0021      	movs	r1, r4
 8003770:	f7ff fd94 	bl	800329c <Clocker_Set_Time>
 8003774:	e004      	b.n	8003780 <Clocker_Bluetooth+0x118>
					}
				}
				else
				{
					myClocker->dateTime = 1;
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	23ad      	movs	r3, #173	; 0xad
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	2101      	movs	r1, #1
 800377e:	54d1      	strb	r1, [r2, r3]
				}
			}

			if(cJSON_IsTrue(cJSON_GetObjectItem(myTempObj, "alarm")))
 8003780:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <Clocker_Bluetooth+0x184>)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	0011      	movs	r1, r2
 8003786:	0018      	movs	r0, r3
 8003788:	f001 fdd9 	bl	800533e <cJSON_GetObjectItem>
 800378c:	0003      	movs	r3, r0
 800378e:	0018      	movs	r0, r3
 8003790:	f001 fdfa 	bl	8005388 <cJSON_IsTrue>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d016      	beq.n	80037c6 <Clocker_Bluetooth+0x15e>
			{
				Clocker_Set_Alarm(myClocker, cJSON_GetObjectItem(myTempObj, "alarmHours")->valueint, cJSON_GetObjectItem(myTempObj, "alarmMinutes")->valueint);
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <Clocker_Bluetooth+0x188>)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f001 fdcd 	bl	800533e <cJSON_GetObjectItem>
 80037a4:	0003      	movs	r3, r0
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	b2dc      	uxtb	r4, r3
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <Clocker_Bluetooth+0x18c>)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	0011      	movs	r1, r2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f001 fdc4 	bl	800533e <cJSON_GetObjectItem>
 80037b6:	0003      	movs	r3, r0
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	0021      	movs	r1, r4
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7ff fdad 	bl	8003320 <Clocker_Set_Alarm>
			}
			cJSON_Delete(myTempObj);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 fdbd 	bl	8004348 <cJSON_Delete>
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b005      	add	sp, #20
 80037d4:	bd90      	pop	{r4, r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	0800c9d0 	.word	0x0800c9d0
 80037dc:	0800c9d8 	.word	0x0800c9d8
 80037e0:	0800c9e0 	.word	0x0800c9e0
 80037e4:	0800c9ec 	.word	0x0800c9ec
 80037e8:	0800c9fc 	.word	0x0800c9fc
 80037ec:	0800ca0c 	.word	0x0800ca0c
 80037f0:	0800ca14 	.word	0x0800ca14
 80037f4:	0800ca20 	.word	0x0800ca20

080037f8 <Clocker_Wifi_Receive>:

void Clocker_Wifi_Receive(Clocker * myClocker, char * table)
{
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
	const char * result = strchr(table, '_');
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	215f      	movs	r1, #95	; 0x5f
 8003806:	0018      	movs	r0, r3
 8003808:	f007 f9f0 	bl	800abec <strchr>
 800380c:	0003      	movs	r3, r0
 800380e:	60fb      	str	r3, [r7, #12]
	cJSON * myTempObj = cJSON_Parse(table);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	0018      	movs	r0, r3
 8003814:	f001 fa76 	bl	8004d04 <cJSON_Parse>
 8003818:	0003      	movs	r3, r0
 800381a:	60bb      	str	r3, [r7, #8]
	strcpy(myClocker->contentOfScreens[0], cJSON_GetObjectItem(myTempObj, "weather")->valuestring);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <Clocker_Wifi_Receive+0x19c>)
 8003820:	189c      	adds	r4, r3, r2
 8003822:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <Clocker_Wifi_Receive+0x1a0>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	0011      	movs	r1, r2
 8003828:	0018      	movs	r0, r3
 800382a:	f001 fd88 	bl	800533e <cJSON_GetObjectItem>
 800382e:	0003      	movs	r3, r0
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	0019      	movs	r1, r3
 8003834:	0020      	movs	r0, r4
 8003836:	f007 fa86 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[1], cJSON_GetObjectItem(myTempObj, "temp")->valuestring);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a57      	ldr	r2, [pc, #348]	; (800399c <Clocker_Wifi_Receive+0x1a4>)
 800383e:	189c      	adds	r4, r3, r2
 8003840:	4a57      	ldr	r2, [pc, #348]	; (80039a0 <Clocker_Wifi_Receive+0x1a8>)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	0011      	movs	r1, r2
 8003846:	0018      	movs	r0, r3
 8003848:	f001 fd79 	bl	800533e <cJSON_GetObjectItem>
 800384c:	0003      	movs	r3, r0
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	0019      	movs	r1, r3
 8003852:	0020      	movs	r0, r4
 8003854:	f007 fa77 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[2], cJSON_GetObjectItem(myTempObj, "feels_like")->valuestring);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <Clocker_Wifi_Receive+0x1ac>)
 800385c:	189c      	adds	r4, r3, r2
 800385e:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <Clocker_Wifi_Receive+0x1b0>)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	0011      	movs	r1, r2
 8003864:	0018      	movs	r0, r3
 8003866:	f001 fd6a 	bl	800533e <cJSON_GetObjectItem>
 800386a:	0003      	movs	r3, r0
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	0019      	movs	r1, r3
 8003870:	0020      	movs	r0, r4
 8003872:	f007 fa68 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[3], cJSON_GetObjectItem(myTempObj, "pressure")->valuestring);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4c      	ldr	r2, [pc, #304]	; (80039ac <Clocker_Wifi_Receive+0x1b4>)
 800387a:	189c      	adds	r4, r3, r2
 800387c:	4a4c      	ldr	r2, [pc, #304]	; (80039b0 <Clocker_Wifi_Receive+0x1b8>)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f001 fd5b 	bl	800533e <cJSON_GetObjectItem>
 8003888:	0003      	movs	r3, r0
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	0019      	movs	r1, r3
 800388e:	0020      	movs	r0, r4
 8003890:	f007 fa59 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[4], cJSON_GetObjectItem(myTempObj, "humidity")->valuestring);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a47      	ldr	r2, [pc, #284]	; (80039b4 <Clocker_Wifi_Receive+0x1bc>)
 8003898:	189c      	adds	r4, r3, r2
 800389a:	4a47      	ldr	r2, [pc, #284]	; (80039b8 <Clocker_Wifi_Receive+0x1c0>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f001 fd4c 	bl	800533e <cJSON_GetObjectItem>
 80038a6:	0003      	movs	r3, r0
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	0019      	movs	r1, r3
 80038ac:	0020      	movs	r0, r4
 80038ae:	f007 fa4a 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[5], cJSON_GetObjectItem(myTempObj, "windspeed")->valuestring);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a41      	ldr	r2, [pc, #260]	; (80039bc <Clocker_Wifi_Receive+0x1c4>)
 80038b6:	189c      	adds	r4, r3, r2
 80038b8:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <Clocker_Wifi_Receive+0x1c8>)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	0011      	movs	r1, r2
 80038be:	0018      	movs	r0, r3
 80038c0:	f001 fd3d 	bl	800533e <cJSON_GetObjectItem>
 80038c4:	0003      	movs	r3, r0
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	0019      	movs	r1, r3
 80038ca:	0020      	movs	r0, r4
 80038cc:	f007 fa3b 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[6], cJSON_GetObjectItem(myTempObj, "sunrise")->valuestring);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <Clocker_Wifi_Receive+0x1cc>)
 80038d4:	189c      	adds	r4, r3, r2
 80038d6:	4a3c      	ldr	r2, [pc, #240]	; (80039c8 <Clocker_Wifi_Receive+0x1d0>)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	0011      	movs	r1, r2
 80038dc:	0018      	movs	r0, r3
 80038de:	f001 fd2e 	bl	800533e <cJSON_GetObjectItem>
 80038e2:	0003      	movs	r3, r0
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	0019      	movs	r1, r3
 80038e8:	0020      	movs	r0, r4
 80038ea:	f007 fa2c 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[7], cJSON_GetObjectItem(myTempObj, "sunset")->valuestring);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a36      	ldr	r2, [pc, #216]	; (80039cc <Clocker_Wifi_Receive+0x1d4>)
 80038f2:	189c      	adds	r4, r3, r2
 80038f4:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <Clocker_Wifi_Receive+0x1d8>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	0011      	movs	r1, r2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f001 fd1f 	bl	800533e <cJSON_GetObjectItem>
 8003900:	0003      	movs	r3, r0
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	0019      	movs	r1, r3
 8003906:	0020      	movs	r0, r4
 8003908:	f007 fa1d 	bl	800ad46 <strcpy>
	strcpy(myClocker->contentOfScreens[8], cJSON_GetObjectItem(myTempObj, "city")->valuestring);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <Clocker_Wifi_Receive+0x1dc>)
 8003910:	189c      	adds	r4, r3, r2
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <Clocker_Wifi_Receive+0x1e0>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	0011      	movs	r1, r2
 8003918:	0018      	movs	r0, r3
 800391a:	f001 fd10 	bl	800533e <cJSON_GetObjectItem>
 800391e:	0003      	movs	r3, r0
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	0019      	movs	r1, r3
 8003924:	0020      	movs	r0, r4
 8003926:	f007 fa0e 	bl	800ad46 <strcpy>
	Clocker_Set_Time(&myClocker, atoi(cJSON_GetObjectItem(myTempObj, "hour")->valuestring), atoi(cJSON_GetObjectItem(myTempObj, "minutes")->valuestring), atoi(cJSON_GetObjectItem(myTempObj, "seconds")->valuestring));
 800392a:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <Clocker_Wifi_Receive+0x1e4>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f001 fd04 	bl	800533e <cJSON_GetObjectItem>
 8003936:	0003      	movs	r3, r0
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	0018      	movs	r0, r3
 800393c:	f006 f873 	bl	8009a26 <atoi>
 8003940:	0003      	movs	r3, r0
 8003942:	b2dc      	uxtb	r4, r3
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <Clocker_Wifi_Receive+0x1e8>)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	0011      	movs	r1, r2
 800394a:	0018      	movs	r0, r3
 800394c:	f001 fcf7 	bl	800533e <cJSON_GetObjectItem>
 8003950:	0003      	movs	r3, r0
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	0018      	movs	r0, r3
 8003956:	f006 f866 	bl	8009a26 <atoi>
 800395a:	0003      	movs	r3, r0
 800395c:	b2dd      	uxtb	r5, r3
 800395e:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <Clocker_Wifi_Receive+0x1ec>)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	0011      	movs	r1, r2
 8003964:	0018      	movs	r0, r3
 8003966:	f001 fcea 	bl	800533e <cJSON_GetObjectItem>
 800396a:	0003      	movs	r3, r0
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	0018      	movs	r0, r3
 8003970:	f006 f859 	bl	8009a26 <atoi>
 8003974:	0003      	movs	r3, r0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	1d38      	adds	r0, r7, #4
 800397a:	002a      	movs	r2, r5
 800397c:	0021      	movs	r1, r4
 800397e:	f7ff fc8d 	bl	800329c <Clocker_Set_Time>
	cJSON_Delete(myTempObj);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	0018      	movs	r0, r3
 8003986:	f000 fcdf 	bl	8004348 <cJSON_Delete>
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bdb0      	pop	{r4, r5, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	00000449 	.word	0x00000449
 8003998:	0800c9d8 	.word	0x0800c9d8
 800399c:	00000459 	.word	0x00000459
 80039a0:	0800ca30 	.word	0x0800ca30
 80039a4:	00000469 	.word	0x00000469
 80039a8:	0800ca38 	.word	0x0800ca38
 80039ac:	00000479 	.word	0x00000479
 80039b0:	0800ca44 	.word	0x0800ca44
 80039b4:	00000489 	.word	0x00000489
 80039b8:	0800ca50 	.word	0x0800ca50
 80039bc:	00000499 	.word	0x00000499
 80039c0:	0800ca5c 	.word	0x0800ca5c
 80039c4:	000004a9 	.word	0x000004a9
 80039c8:	0800ca68 	.word	0x0800ca68
 80039cc:	000004b9 	.word	0x000004b9
 80039d0:	0800ca70 	.word	0x0800ca70
 80039d4:	000004c9 	.word	0x000004c9
 80039d8:	0800ca78 	.word	0x0800ca78
 80039dc:	0800ca80 	.word	0x0800ca80
 80039e0:	0800ca88 	.word	0x0800ca88
 80039e4:	0800ca90 	.word	0x0800ca90

080039e8 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	0004      	movs	r4, r0
 80039f0:	0008      	movs	r0, r1
 80039f2:	0011      	movs	r1, r2
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	1dbb      	adds	r3, r7, #6
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	1d7b      	adds	r3, r7, #5
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	1dbb      	adds	r3, r7, #6
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	18d3      	adds	r3, r2, r3
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	1d7b      	adds	r3, r7, #5
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	18d3      	adds	r3, r2, r3
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	2016      	movs	r0, #22
 8003a22:	183b      	adds	r3, r7, r0
 8003a24:	3206      	adds	r2, #6
 8003a26:	32ff      	adds	r2, #255	; 0xff
 8003a28:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 8003a2a:	183b      	adds	r3, r7, r0
 8003a2c:	183a      	adds	r2, r7, r0
 8003a2e:	8812      	ldrh	r2, [r2, #0]
 8003a30:	4252      	negs	r2, r2
 8003a32:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8003a34:	210c      	movs	r1, #12
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	227e      	movs	r2, #126	; 0x7e
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	22ff      	movs	r2, #255	; 0xff
 8003a40:	705a      	strb	r2, [r3, #1]
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	2206      	movs	r2, #6
 8003a46:	709a      	strb	r2, [r3, #2]
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	1dfa      	adds	r2, r7, #7
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	70da      	strb	r2, [r3, #3]
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	2200      	movs	r2, #0
 8003a54:	711a      	strb	r2, [r3, #4]
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	1dba      	adds	r2, r7, #6
 8003a5a:	7812      	ldrb	r2, [r2, #0]
 8003a5c:	715a      	strb	r2, [r3, #5]
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	1d7a      	adds	r2, r7, #5
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	719a      	strb	r2, [r3, #6]
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	71da      	strb	r2, [r3, #7]
 8003a74:	183b      	adds	r3, r7, r0
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	721a      	strb	r2, [r3, #8]
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	22ef      	movs	r2, #239	; 0xef
 8003a82:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8003a84:	2301      	movs	r3, #1
 8003a86:	425b      	negs	r3, r3
 8003a88:	1879      	adds	r1, r7, r1
 8003a8a:	4804      	ldr	r0, [pc, #16]	; (8003a9c <Send_cmd+0xb4>)
 8003a8c:	220a      	movs	r2, #10
 8003a8e:	f004 f993 	bl	8007db8 <HAL_UART_Transmit>
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b007      	add	sp, #28
 8003a98:	bd90      	pop	{r4, r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	20000330 	.word	0x20000330

08003aa0 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2003      	movs	r0, #3
 8003aaa:	f7ff ff9d 	bl	80039e8 <Send_cmd>
  HAL_Delay(200);
 8003aae:	20c8      	movs	r0, #200	; 0xc8
 8003ab0:	f001 fd04 	bl	80054bc <HAL_Delay>
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <DF_Init>:


void DF_Init (uint8_t volume)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	2100      	movs	r1, #0
 8003aca:	203f      	movs	r0, #63	; 0x3f
 8003acc:	f7ff ff8c 	bl	80039e8 <Send_cmd>
	HAL_Delay(200);
 8003ad0:	20c8      	movs	r0, #200	; 0xc8
 8003ad2:	f001 fcf3 	bl	80054bc <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8003ad6:	1dfb      	adds	r3, r7, #7
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	001a      	movs	r2, r3
 8003adc:	2100      	movs	r1, #0
 8003ade:	2006      	movs	r0, #6
 8003ae0:	f7ff ff82 	bl	80039e8 <Send_cmd>
	HAL_Delay(500);
 8003ae4:	23fa      	movs	r3, #250	; 0xfa
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f001 fce7 	bl	80054bc <HAL_Delay>
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b002      	add	sp, #8
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	200e      	movs	r0, #14
 8003b00:	f7ff ff72 	bl	80039e8 <Send_cmd>
	HAL_Delay(200);
 8003b04:	20c8      	movs	r0, #200	; 0xc8
 8003b06:	f001 fcd9 	bl	80054bc <HAL_Delay>
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	0002      	movs	r2, r0
 8003b18:	1dbb      	adds	r3, r7, #6
 8003b1a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <delay+0x30>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <delay+0x30>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2c:	1dbb      	adds	r3, r7, #6
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3f8      	bcc.n	8003b26 <delay+0x16>
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000268 	.word	0x20000268

08003b44 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	0002      	movs	r2, r0
 8003b4c:	6039      	str	r1, [r7, #0]
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	23a0      	movs	r3, #160	; 0xa0
 8003b58:	05db      	lsls	r3, r3, #23
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f001 ffd2 	bl	8005b06 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8003b62:	1dfb      	adds	r3, r7, #7
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	481f      	ldr	r0, [pc, #124]	; (8003bf0 <send_to_lcd+0xac>)
 8003b72:	001a      	movs	r2, r3
 8003b74:	2110      	movs	r1, #16
 8003b76:	f001 ffc6 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8003b7a:	1dfb      	adds	r3, r7, #7
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2201      	movs	r2, #1
 8003b84:	4013      	ands	r3, r2
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4818      	ldr	r0, [pc, #96]	; (8003bf0 <send_to_lcd+0xac>)
 8003b8e:	0019      	movs	r1, r3
 8003b90:	f001 ffb9 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4814      	ldr	r0, [pc, #80]	; (8003bf4 <send_to_lcd+0xb0>)
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	f001 ffad 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8003bac:	1dfb      	adds	r3, r7, #7
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	480e      	ldr	r0, [pc, #56]	; (8003bf0 <send_to_lcd+0xac>)
 8003bb8:	001a      	movs	r2, r3
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	f001 ffa3 	bl	8005b06 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8003bc0:	23a0      	movs	r3, #160	; 0xa0
 8003bc2:	05db      	lsls	r3, r3, #23
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f001 ff9c 	bl	8005b06 <HAL_GPIO_WritePin>
	delay (20);
 8003bce:	2014      	movs	r0, #20
 8003bd0:	f7ff ff9e 	bl	8003b10 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8003bd4:	23a0      	movs	r3, #160	; 0xa0
 8003bd6:	05db      	lsls	r3, r3, #23
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f001 ff92 	bl	8005b06 <HAL_GPIO_WritePin>
	delay (20);
 8003be2:	2014      	movs	r0, #20
 8003be4:	f7ff ff94 	bl	8003b10 <delay>
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	50000400 	.word	0x50000400
 8003bf4:	50000800 	.word	0x50000800

08003bf8 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	0002      	movs	r2, r0
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8003c04:	200f      	movs	r0, #15
 8003c06:	183b      	adds	r3, r7, r0
 8003c08:	1dfa      	adds	r2, r7, #7
 8003c0a:	7812      	ldrb	r2, [r2, #0]
 8003c0c:	0912      	lsrs	r2, r2, #4
 8003c0e:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8003c10:	0004      	movs	r4, r0
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2100      	movs	r1, #0
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7ff ff93 	bl	8003b44 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8003c1e:	0020      	movs	r0, r4
 8003c20:	183b      	adds	r3, r7, r0
 8003c22:	1dfa      	adds	r2, r7, #7
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	210f      	movs	r1, #15
 8003c28:	400a      	ands	r2, r1
 8003c2a:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8003c2c:	183b      	adds	r3, r7, r0
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2100      	movs	r1, #0
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7ff ff86 	bl	8003b44 <send_to_lcd>
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b005      	add	sp, #20
 8003c3e:	bd90      	pop	{r4, r7, pc}

08003c40 <lcd_send_data>:

void lcd_send_data (char data)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	0002      	movs	r2, r0
 8003c48:	1dfb      	adds	r3, r7, #7
 8003c4a:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8003c4c:	200f      	movs	r0, #15
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	1dfa      	adds	r2, r7, #7
 8003c52:	7812      	ldrb	r2, [r2, #0]
 8003c54:	0912      	lsrs	r2, r2, #4
 8003c56:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8003c58:	0004      	movs	r4, r0
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff ff6f 	bl	8003b44 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8003c66:	0020      	movs	r0, r4
 8003c68:	183b      	adds	r3, r7, r0
 8003c6a:	1dfa      	adds	r2, r7, #7
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	210f      	movs	r1, #15
 8003c70:	400a      	ands	r2, r1
 8003c72:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8003c74:	183b      	adds	r3, r7, r0
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f7ff ff62 	bl	8003b44 <send_to_lcd>
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b005      	add	sp, #20
 8003c86:	bd90      	pop	{r4, r7, pc}

08003c88 <lcd_clear>:

void lcd_clear (void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f7ff ffb3 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(2);
 8003c92:	2002      	movs	r0, #2
 8003c94:	f001 fc12 	bl	80054bc <HAL_Delay>
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
    switch (row)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <lcd_put_cur+0x18>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d005      	beq.n	8003cc0 <lcd_put_cur+0x22>
 8003cb4:	e009      	b.n	8003cca <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	603b      	str	r3, [r7, #0]
            break;
 8003cbe:	e004      	b.n	8003cca <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	22c0      	movs	r2, #192	; 0xc0
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	603b      	str	r3, [r7, #0]
            break;
 8003cc8:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff ff92 	bl	8003bf8 <lcd_send_cmd>
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <lcd_init>:


void lcd_init (void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003ce0:	2032      	movs	r0, #50	; 0x32
 8003ce2:	f001 fbeb 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x30);
 8003ce6:	2030      	movs	r0, #48	; 0x30
 8003ce8:	f7ff ff86 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003cec:	2005      	movs	r0, #5
 8003cee:	f001 fbe5 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x30);
 8003cf2:	2030      	movs	r0, #48	; 0x30
 8003cf4:	f7ff ff80 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f001 fbdf 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x30);
 8003cfe:	2030      	movs	r0, #48	; 0x30
 8003d00:	f7ff ff7a 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(10);
 8003d04:	200a      	movs	r0, #10
 8003d06:	f001 fbd9 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003d0a:	2020      	movs	r0, #32
 8003d0c:	f7ff ff74 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(10);
 8003d10:	200a      	movs	r0, #10
 8003d12:	f001 fbd3 	bl	80054bc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003d16:	2028      	movs	r0, #40	; 0x28
 8003d18:	f7ff ff6e 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(1);
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f001 fbcd 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003d22:	2008      	movs	r0, #8
 8003d24:	f7ff ff68 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(1);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f001 fbc7 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f7ff ff62 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(1);
 8003d34:	2001      	movs	r0, #1
 8003d36:	f001 fbc1 	bl	80054bc <HAL_Delay>
	HAL_Delay(1);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f001 fbbe 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003d40:	2006      	movs	r0, #6
 8003d42:	f7ff ff59 	bl	8003bf8 <lcd_send_cmd>
	HAL_Delay(1);
 8003d46:	2001      	movs	r0, #1
 8003d48:	f001 fbb8 	bl	80054bc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003d4c:	200c      	movs	r0, #12
 8003d4e:	f7ff ff53 	bl	8003bf8 <lcd_send_cmd>
}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003d60:	e006      	b.n	8003d70 <lcd_send_string+0x18>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff ff68 	bl	8003c40 <lcd_send_data>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f4      	bne.n	8003d62 <lcd_send_string+0xa>
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	480a      	ldr	r0, [pc, #40]	; (8003db8 <tm1637_CLKhigh+0x34>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	0019      	movs	r1, r3
 8003d92:	f001 feb8 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4807      	ldr	r0, [pc, #28]	; (8003db8 <tm1637_CLKhigh+0x34>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	0019      	movs	r1, r3
 8003da0:	f001 feb1 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4803      	ldr	r0, [pc, #12]	; (8003db8 <tm1637_CLKhigh+0x34>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	0019      	movs	r1, r3
 8003dae:	f001 feaa 	bl	8005b06 <HAL_GPIO_WritePin>
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	50000400 	.word	0x50000400

08003dbc <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	480a      	ldr	r0, [pc, #40]	; (8003df0 <tm1637_CLKlow+0x34>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	0019      	movs	r1, r3
 8003dca:	f001 fe9c 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4807      	ldr	r0, [pc, #28]	; (8003df0 <tm1637_CLKlow+0x34>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	f001 fe95 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4803      	ldr	r0, [pc, #12]	; (8003df0 <tm1637_CLKlow+0x34>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	0019      	movs	r1, r3
 8003de6:	f001 fe8e 	bl	8005b06 <HAL_GPIO_WritePin>
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	50000400 	.word	0x50000400

08003df4 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	480a      	ldr	r0, [pc, #40]	; (8003e28 <tm1637_SDOhigh+0x34>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	0019      	movs	r1, r3
 8003e02:	f001 fe80 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4807      	ldr	r0, [pc, #28]	; (8003e28 <tm1637_SDOhigh+0x34>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	0019      	movs	r1, r3
 8003e10:	f001 fe79 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4803      	ldr	r0, [pc, #12]	; (8003e28 <tm1637_SDOhigh+0x34>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	f001 fe72 	bl	8005b06 <HAL_GPIO_WritePin>
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	50000400 	.word	0x50000400

08003e2c <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	480a      	ldr	r0, [pc, #40]	; (8003e60 <tm1637_SDOlow+0x34>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	0019      	movs	r1, r3
 8003e3a:	f001 fe64 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4807      	ldr	r0, [pc, #28]	; (8003e60 <tm1637_SDOlow+0x34>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	0019      	movs	r1, r3
 8003e48:	f001 fe5d 	bl	8005b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4803      	ldr	r0, [pc, #12]	; (8003e60 <tm1637_SDOlow+0x34>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	0019      	movs	r1, r3
 8003e56:	f001 fe56 	bl	8005b06 <HAL_GPIO_WritePin>
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	50000400 	.word	0x50000400

08003e64 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8003e68:	f7ff ff8c 	bl	8003d84 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8003e6c:	f7ff ffc2 	bl	8003df4 <tm1637_SDOhigh>
	tm1637_SDOlow();
 8003e70:	f7ff ffdc 	bl	8003e2c <tm1637_SDOlow>

	tm1637_CLKlow();
 8003e74:	f7ff ffa2 	bl	8003dbc <tm1637_CLKlow>
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 8003e82:	f7ff ff9b 	bl	8003dbc <tm1637_CLKlow>
	tm1637_SDOlow();
 8003e86:	f7ff ffd1 	bl	8003e2c <tm1637_SDOlow>

	tm1637_CLKhigh();
 8003e8a:	f7ff ff7b 	bl	8003d84 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8003e8e:	f7ff ffb1 	bl	8003df4 <tm1637_SDOhigh>
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8003ea0:	230f      	movs	r3, #15
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	e01a      	b.n	8003ee0 <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8003eaa:	f7ff ff87 	bl	8003dbc <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8003eae:	230f      	movs	r3, #15
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d102      	bne.n	8003ec6 <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 8003ec0:	f7ff ff98 	bl	8003df4 <tm1637_SDOhigh>
 8003ec4:	e001      	b.n	8003eca <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8003ec6:	f7ff ffb1 	bl	8003e2c <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8003eca:	f7ff ff5b 	bl	8003d84 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8003ece:	210f      	movs	r1, #15
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	2b07      	cmp	r3, #7
 8003eea:	ddde      	ble.n	8003eaa <tm1637_DataOut+0x12>
	} 
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8003efe:	230c      	movs	r3, #12
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8003f0a:	2317      	movs	r3, #23
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e018      	b.n	8003f46 <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	001a      	movs	r2, r3
 8003f1a:	2117      	movs	r1, #23
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	411a      	asrs	r2, r3
 8003f22:	0013      	movs	r3, r2
 8003f24:	2201      	movs	r2, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	1e5a      	subs	r2, r3, #1
 8003f2a:	4193      	sbcs	r3, r2
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	0008      	movs	r0, r1
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	0011      	movs	r1, r2
 8003f36:	220c      	movs	r2, #12
 8003f38:	18ba      	adds	r2, r7, r2
 8003f3a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8003f3c:	183b      	adds	r3, r7, r0
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	183b      	adds	r3, r7, r0
 8003f42:	3201      	adds	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	2317      	movs	r3, #23
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b07      	cmp	r3, #7
 8003f4e:	d9e1      	bls.n	8003f14 <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8003f50:	f7ff ff88 	bl	8003e64 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8003f54:	230c      	movs	r3, #12
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff ff9d 	bl	8003e98 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8003f5e:	f7ff ff2d 	bl	8003dbc <tm1637_CLKlow>
	tm1637_CLKhigh();
 8003f62:	f7ff ff0f 	bl	8003d84 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8003f66:	f000 f89f 	bl	80040a8 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	001a      	movs	r2, r3
 8003f70:	23c0      	movs	r3, #192	; 0xc0
 8003f72:	4013      	ands	r3, r2
 8003f74:	2bc0      	cmp	r3, #192	; 0xc0
 8003f76:	d001      	beq.n	8003f7c <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8003f78:	f7ff ff81 	bl	8003e7e <tm1637_EndPacket>
	}

}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b006      	add	sp, #24
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	000a      	movs	r2, r1
 8003f8e:	1cfb      	adds	r3, r7, #3
 8003f90:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 8003f92:	230c      	movs	r3, #12
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 8003f9e:	2317      	movs	r3, #23
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e037      	b.n	8004018 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8003fa8:	2316      	movs	r3, #22
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e01c      	b.n	8003fec <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8003fb2:	2317      	movs	r3, #23
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	18d3      	adds	r3, r2, r3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	2116      	movs	r1, #22
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	411a      	asrs	r2, r3
 8003fc8:	0013      	movs	r3, r2
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	1e5a      	subs	r2, r3, #1
 8003fd0:	4193      	sbcs	r3, r2
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	0008      	movs	r0, r1
 8003fd6:	187b      	adds	r3, r7, r1
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	0011      	movs	r1, r2
 8003fdc:	220c      	movs	r2, #12
 8003fde:	18ba      	adds	r2, r7, r2
 8003fe0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 8003fe2:	183b      	adds	r3, r7, r0
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	183b      	adds	r3, r7, r0
 8003fe8:	3201      	adds	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	2316      	movs	r3, #22
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b07      	cmp	r3, #7
 8003ff4:	d9dd      	bls.n	8003fb2 <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 8003ff6:	230c      	movs	r3, #12
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7ff ff4c 	bl	8003e98 <tm1637_DataOut>
		tm1637_CLKlow();
 8004000:	f7ff fedc 	bl	8003dbc <tm1637_CLKlow>
		tm1637_CLKhigh();
 8004004:	f7ff febe 	bl	8003d84 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 8004008:	f000 f84e 	bl	80040a8 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 800400c:	2117      	movs	r1, #23
 800400e:	187b      	adds	r3, r7, r1
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	187b      	adds	r3, r7, r1
 8004014:	3201      	adds	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	2317      	movs	r3, #23
 800401a:	18fa      	adds	r2, r7, r3
 800401c:	1cfb      	adds	r3, r7, #3
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d3c0      	bcc.n	8003fa8 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 8004026:	f7ff ff2a 	bl	8003e7e <tm1637_EndPacket>


}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b006      	add	sp, #24
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	0002      	movs	r2, r0
 800403c:	1dfb      	adds	r3, r7, #7
 800403e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8004040:	240c      	movs	r4, #12
 8004042:	193b      	adds	r3, r7, r4
 8004044:	0018      	movs	r0, r3
 8004046:	2314      	movs	r3, #20
 8004048:	001a      	movs	r2, r3
 800404a:	2100      	movs	r1, #0
 800404c:	f006 fdc6 	bl	800abdc <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 8004050:	0021      	movs	r1, r4
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	0052      	lsls	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	187b      	adds	r3, r7, r1
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004060:	187b      	adds	r3, r7, r1
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8004066:	1dfb      	adds	r3, r7, #7
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <tm1637_Initialize+0x52>
 800406e:	2b01      	cmp	r3, #1
 8004070:	d114      	bne.n	800409c <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004072:	187b      	adds	r3, r7, r1
 8004074:	2200      	movs	r2, #0
 8004076:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004078:	187b      	adds	r3, r7, r1
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <tm1637_Initialize+0x70>)
 800407c:	0019      	movs	r1, r3
 800407e:	0010      	movs	r0, r2
 8004080:	f001 fba6 	bl	80057d0 <HAL_GPIO_Init>
			break;
 8004084:	e00a      	b.n	800409c <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	210c      	movs	r1, #12
 8004088:	187b      	adds	r3, r7, r1
 800408a:	2201      	movs	r2, #1
 800408c:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800408e:	187b      	adds	r3, r7, r1
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <tm1637_Initialize+0x70>)
 8004092:	0019      	movs	r1, r3
 8004094:	0010      	movs	r0, r2
 8004096:	f001 fb9b 	bl	80057d0 <HAL_GPIO_Init>
			break;
 800409a:	46c0      	nop			; (mov r8, r8)

	}

}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b009      	add	sp, #36	; 0x24
 80040a2:	bd90      	pop	{r4, r7, pc}
 80040a4:	50000c00 	.word	0x50000c00

080040a8 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 80040ac:	2001      	movs	r0, #1
 80040ae:	f7ff ffc1 	bl	8004034 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 80040b2:	f7ff fe83 	bl	8003dbc <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80040b6:	e002      	b.n	80040be <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7ff ffbb 	bl	8004034 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <tm1637_ACKcheck+0x30>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	0010      	movs	r0, r2
 80040c8:	f001 fd00 	bl	8005acc <HAL_GPIO_ReadPin>
 80040cc:	1e03      	subs	r3, r0, #0
 80040ce:	d1f3      	bne.n	80040b8 <tm1637_ACKcheck+0x10>
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	50000400 	.word	0x50000400

080040dc <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 80040dc:	b5b0      	push	{r4, r5, r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	0002      	movs	r2, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	1dfb      	adds	r3, r7, #7
 80040e8:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 80040ea:	210c      	movs	r1, #12
 80040ec:	187b      	adds	r3, r7, r1
 80040ee:	4a19      	ldr	r2, [pc, #100]	; (8004154 <tm1637_DisplayHandle+0x78>)
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 80040f4:	250f      	movs	r5, #15
 80040f6:	197b      	adds	r3, r7, r5
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b07      	cmp	r3, #7
 8004102:	d81f      	bhi.n	8004144 <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8004104:	187b      	adds	r3, r7, r1
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 800410a:	000c      	movs	r4, r1
 800410c:	187b      	adds	r3, r7, r1
 800410e:	0018      	movs	r0, r3
 8004110:	f7ff fef1 	bl	8003ef6 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8004114:	0021      	movs	r1, r4
 8004116:	187b      	adds	r3, r7, r1
 8004118:	22c0      	movs	r2, #192	; 0xc0
 800411a:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 800411c:	187b      	adds	r3, r7, r1
 800411e:	0018      	movs	r0, r3
 8004120:	f7ff fee9 	bl	8003ef6 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2104      	movs	r1, #4
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff ff2b 	bl	8003f84 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 800412e:	1dfb      	adds	r3, r7, #7
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f810 	bl	8004158 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8004138:	197b      	adds	r3, r7, r5
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 800413e:	197b      	adds	r3, r7, r5
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	e002      	b.n	800414a <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 8004144:	230f      	movs	r3, #15
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	781b      	ldrb	r3, [r3, #0]
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b004      	add	sp, #16
 8004150:	bdb0      	pop	{r4, r5, r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	0800ca98 	.word	0x0800ca98

08004158 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	0002      	movs	r2, r0
 8004160:	1dfb      	adds	r3, r7, #7
 8004162:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 8004164:	230c      	movs	r3, #12
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8004170:	2316      	movs	r3, #22
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b07      	cmp	r3, #7
 800417e:	d83e      	bhi.n	80041fe <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	1dfa      	adds	r2, r7, #7
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	2178      	movs	r1, #120	; 0x78
 8004188:	4249      	negs	r1, r1
 800418a:	430a      	orrs	r2, r1
 800418c:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800418e:	2317      	movs	r3, #23
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e017      	b.n	80041c8 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	2117      	movs	r1, #23
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	411a      	asrs	r2, r3
 80041a4:	0013      	movs	r3, r2
 80041a6:	2201      	movs	r2, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	1e5a      	subs	r2, r3, #1
 80041ac:	4193      	sbcs	r3, r2
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	0008      	movs	r0, r1
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	0011      	movs	r1, r2
 80041b8:	220c      	movs	r2, #12
 80041ba:	18ba      	adds	r2, r7, r2
 80041bc:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 80041be:	183b      	adds	r3, r7, r0
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	183b      	adds	r3, r7, r0
 80041c4:	3201      	adds	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	2317      	movs	r3, #23
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b07      	cmp	r3, #7
 80041d0:	d9e2      	bls.n	8004198 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 80041d2:	f7ff fe47 	bl	8003e64 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 80041d6:	230c      	movs	r3, #12
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	0018      	movs	r0, r3
 80041dc:	f7ff fe5c 	bl	8003e98 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 80041e0:	f7ff fdec 	bl	8003dbc <tm1637_CLKlow>
		tm1637_CLKhigh();
 80041e4:	f7ff fdce 	bl	8003d84 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 80041e8:	f7ff ff5e 	bl	80040a8 <tm1637_ACKcheck>
		tm1637_EndPacket();
 80041ec:	f7ff fe47 	bl	8003e7e <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 80041f0:	2116      	movs	r1, #22
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	e002      	b.n	8004204 <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 80041fe:	2316      	movs	r3, #22
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	781b      	ldrb	r3, [r3, #0]
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b006      	add	sp, #24
 800420a:	bd80      	pop	{r7, pc}

0800420c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <case_insensitive_strcmp+0x16>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8004222:	2301      	movs	r3, #1
 8004224:	e072      	b.n	800430c <case_insensitive_strcmp+0x100>
    }

    if (string1 == string2)
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d10d      	bne.n	800424a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800422e:	2300      	movs	r3, #0
 8004230:	e06c      	b.n	800430c <case_insensitive_strcmp+0x100>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800423a:	2300      	movs	r3, #0
 800423c:	e066      	b.n	800430c <case_insensitive_strcmp+0x100>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3301      	adds	r3, #1
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	3301      	adds	r3, #1
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	210f      	movs	r1, #15
 800424c:	187b      	adds	r3, r7, r1
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	187b      	adds	r3, r7, r1
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <case_insensitive_strcmp+0x108>)
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	001a      	movs	r2, r3
 8004262:	2303      	movs	r3, #3
 8004264:	4013      	ands	r3, r2
 8004266:	2b01      	cmp	r3, #1
 8004268:	d104      	bne.n	8004274 <case_insensitive_strcmp+0x68>
 800426a:	187b      	adds	r3, r7, r1
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	3320      	adds	r3, #32
 8004270:	001a      	movs	r2, r3
 8004272:	e002      	b.n	800427a <case_insensitive_strcmp+0x6e>
 8004274:	230f      	movs	r3, #15
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	200e      	movs	r0, #14
 800427c:	183b      	adds	r3, r7, r0
 800427e:	6839      	ldr	r1, [r7, #0]
 8004280:	7809      	ldrb	r1, [r1, #0]
 8004282:	7019      	strb	r1, [r3, #0]
 8004284:	183b      	adds	r3, r7, r0
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <case_insensitive_strcmp+0x108>)
 800428c:	18cb      	adds	r3, r1, r3
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	0019      	movs	r1, r3
 8004292:	2303      	movs	r3, #3
 8004294:	400b      	ands	r3, r1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d103      	bne.n	80042a2 <case_insensitive_strcmp+0x96>
 800429a:	183b      	adds	r3, r7, r0
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	3320      	adds	r3, #32
 80042a0:	e002      	b.n	80042a8 <case_insensitive_strcmp+0x9c>
 80042a2:	230e      	movs	r3, #14
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d0c2      	beq.n	8004232 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80042ac:	210d      	movs	r1, #13
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	187b      	adds	r3, r7, r1
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	4b15      	ldr	r3, [pc, #84]	; (8004314 <case_insensitive_strcmp+0x108>)
 80042be:	18d3      	adds	r3, r2, r3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	001a      	movs	r2, r3
 80042c4:	2303      	movs	r3, #3
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d104      	bne.n	80042d6 <case_insensitive_strcmp+0xca>
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	3320      	adds	r3, #32
 80042d2:	001a      	movs	r2, r3
 80042d4:	e002      	b.n	80042dc <case_insensitive_strcmp+0xd0>
 80042d6:	230d      	movs	r3, #13
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	200c      	movs	r0, #12
 80042de:	183b      	adds	r3, r7, r0
 80042e0:	6839      	ldr	r1, [r7, #0]
 80042e2:	7809      	ldrb	r1, [r1, #0]
 80042e4:	7019      	strb	r1, [r3, #0]
 80042e6:	183b      	adds	r3, r7, r0
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	1c59      	adds	r1, r3, #1
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <case_insensitive_strcmp+0x108>)
 80042ee:	18cb      	adds	r3, r1, r3
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	0019      	movs	r1, r3
 80042f4:	2303      	movs	r3, #3
 80042f6:	400b      	ands	r3, r1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d103      	bne.n	8004304 <case_insensitive_strcmp+0xf8>
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	3320      	adds	r3, #32
 8004302:	e002      	b.n	800430a <case_insensitive_strcmp+0xfe>
 8004304:	230c      	movs	r3, #12
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	1ad3      	subs	r3, r2, r3
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b004      	add	sp, #16
 8004312:	bd80      	pop	{r7, pc}
 8004314:	0800cca0 	.word	0x0800cca0

08004318 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2028      	movs	r0, #40	; 0x28
 8004326:	4798      	blx	r3
 8004328:	0003      	movs	r3, r0
 800432a:	60fb      	str	r3, [r7, #12]
    if (node)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <cJSON_New_Item+0x26>
    {
        memset(node, '\0', sizeof(cJSON));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2228      	movs	r2, #40	; 0x28
 8004336:	2100      	movs	r1, #0
 8004338:	0018      	movs	r0, r3
 800433a:	f006 fc4f 	bl	800abdc <memset>
    }

    return node;
 800433e:	68fb      	ldr	r3, [r7, #12]
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b004      	add	sp, #16
 8004346:	bd80      	pop	{r7, pc}

08004348 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8004354:	e038      	b.n	80043c8 <cJSON_Delete+0x80>
    {
        next = item->next;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4013      	ands	r3, r2
 8004366:	d108      	bne.n	800437a <cJSON_Delete+0x32>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff ffe7 	bl	8004348 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4013      	ands	r3, r2
 8004384:	d109      	bne.n	800439a <cJSON_Delete+0x52>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <cJSON_Delete+0x90>)
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	0018      	movs	r0, r3
 8004398:	4790      	blx	r2
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4013      	ands	r3, r2
 80043a4:	d109      	bne.n	80043ba <cJSON_Delete+0x72>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <cJSON_Delete+0x90>)
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	0018      	movs	r0, r3
 80043b8:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <cJSON_Delete+0x90>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	0010      	movs	r0, r2
 80043c2:	4798      	blx	r3
        item = next;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1c3      	bne.n	8004356 <cJSON_Delete+0xe>
    }
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b004      	add	sp, #16
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000004 	.word	0x20000004

080043dc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80043e0:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b099      	sub	sp, #100	; 0x64
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80043f2:	2200      	movs	r2, #0
 80043f4:	2300      	movs	r3, #0
 80043f6:	653a      	str	r2, [r7, #80]	; 0x50
 80043f8:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char *after_end = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80043fe:	234f      	movs	r3, #79	; 0x4f
 8004400:	18fc      	adds	r4, r7, r3
 8004402:	f7ff ffeb 	bl	80043dc <get_decimal_point>
 8004406:	0003      	movs	r3, r0
 8004408:	7023      	strb	r3, [r4, #0]
    size_t i = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <parse_number+0x34>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <parse_number+0x38>
    {
        return false;
 800441c:	2300      	movs	r3, #0
 800441e:	e09a      	b.n	8004556 <parse_number+0x16e>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8004420:	2300      	movs	r3, #0
 8004422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004424:	e03b      	b.n	800449e <parse_number+0xb6>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6899      	ldr	r1, [r3, #8]
 800442e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004430:	18cb      	adds	r3, r1, r3
 8004432:	18d3      	adds	r3, r2, r3
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b45      	cmp	r3, #69	; 0x45
 8004438:	dc14      	bgt.n	8004464 <parse_number+0x7c>
 800443a:	2b2b      	cmp	r3, #43	; 0x2b
 800443c:	db3e      	blt.n	80044bc <parse_number+0xd4>
 800443e:	3b2b      	subs	r3, #43	; 0x2b
 8004440:	2201      	movs	r2, #1
 8004442:	409a      	lsls	r2, r3
 8004444:	0013      	movs	r3, r2
 8004446:	4a46      	ldr	r2, [pc, #280]	; (8004560 <parse_number+0x178>)
 8004448:	401a      	ands	r2, r3
 800444a:	1e51      	subs	r1, r2, #1
 800444c:	418a      	sbcs	r2, r1
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	2a00      	cmp	r2, #0
 8004452:	d109      	bne.n	8004468 <parse_number+0x80>
 8004454:	2208      	movs	r2, #8
 8004456:	4013      	ands	r3, r2
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	4193      	sbcs	r3, r2
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d111      	bne.n	8004486 <parse_number+0x9e>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8004462:	e02b      	b.n	80044bc <parse_number+0xd4>
        switch (buffer_at_offset(input_buffer)[i])
 8004464:	2b65      	cmp	r3, #101	; 0x65
 8004466:	d129      	bne.n	80044bc <parse_number+0xd4>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
 8004470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004472:	18cb      	adds	r3, r1, r3
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	7819      	ldrb	r1, [r3, #0]
 8004478:	2308      	movs	r3, #8
 800447a:	18fa      	adds	r2, r7, r3
 800447c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447e:	18d3      	adds	r3, r2, r3
 8004480:	1c0a      	adds	r2, r1, #0
 8004482:	701a      	strb	r2, [r3, #0]
                break;
 8004484:	e008      	b.n	8004498 <parse_number+0xb0>
                number_c_string[i] = decimal_point;
 8004486:	2308      	movs	r3, #8
 8004488:	18fa      	adds	r2, r7, r3
 800448a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448c:	18d3      	adds	r3, r2, r3
 800448e:	224f      	movs	r2, #79	; 0x4f
 8004490:	18ba      	adds	r2, r7, r2
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	701a      	strb	r2, [r3, #0]
                break;
 8004496:	46c0      	nop			; (mov r8, r8)
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8004498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449a:	3301      	adds	r3, #1
 800449c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800449e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a0:	2b3e      	cmp	r3, #62	; 0x3e
 80044a2:	d80d      	bhi.n	80044c0 <parse_number+0xd8>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <parse_number+0xd8>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b0:	18d2      	adds	r2, r2, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d3b5      	bcc.n	8004426 <parse_number+0x3e>
        }
    }
loop_end:
 80044ba:	e001      	b.n	80044c0 <parse_number+0xd8>
                goto loop_end;
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	e000      	b.n	80044c2 <parse_number+0xda>
loop_end:
 80044c0:	46c0      	nop			; (mov r8, r8)
    number_c_string[i] = '\0';
 80044c2:	2108      	movs	r1, #8
 80044c4:	187a      	adds	r2, r7, r1
 80044c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c8:	18d3      	adds	r3, r2, r3
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80044ce:	2348      	movs	r3, #72	; 0x48
 80044d0:	18fa      	adds	r2, r7, r3
 80044d2:	000c      	movs	r4, r1
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	0011      	movs	r1, r2
 80044d8:	0018      	movs	r0, r3
 80044da:	f006 f9cf 	bl	800a87c <strtod>
 80044de:	0002      	movs	r2, r0
 80044e0:	000b      	movs	r3, r1
 80044e2:	653a      	str	r2, [r7, #80]	; 0x50
 80044e4:	657b      	str	r3, [r7, #84]	; 0x54
    if (number_c_string == after_end)
 80044e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e8:	193b      	adds	r3, r7, r4
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d101      	bne.n	80044f2 <parse_number+0x10a>
    {
        return false; /* parse_error */
 80044ee:	2300      	movs	r3, #0
 80044f0:	e031      	b.n	8004556 <parse_number+0x16e>
    }

    item->valuedouble = number;
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f8:	618a      	str	r2, [r1, #24]
 80044fa:	61cb      	str	r3, [r1, #28]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <parse_number+0x17c>)
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <parse_number+0x180>)
 8004500:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004504:	f7fb ffd0 	bl	80004a8 <__aeabi_dcmpge>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d003      	beq.n	8004514 <parse_number+0x12c>
    {
        item->valueint = INT_MAX;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a17      	ldr	r2, [pc, #92]	; (800456c <parse_number+0x184>)
 8004510:	615a      	str	r2, [r3, #20]
 8004512:	e013      	b.n	800453c <parse_number+0x154>
    }
    else if (number <= (double)INT_MIN)
 8004514:	2200      	movs	r2, #0
 8004516:	4b16      	ldr	r3, [pc, #88]	; (8004570 <parse_number+0x188>)
 8004518:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800451a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800451c:	f7fb ffb0 	bl	8000480 <__aeabi_dcmple>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d004      	beq.n	800452e <parse_number+0x146>
    {
        item->valueint = INT_MIN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	0612      	lsls	r2, r2, #24
 800452a:	615a      	str	r2, [r3, #20]
 800452c:	e006      	b.n	800453c <parse_number+0x154>
    }
    else
    {
        item->valueint = (int)number;
 800452e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004532:	f7fd feeb 	bl	800230c <__aeabi_d2iz>
 8004536:	0002      	movs	r2, r0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2208      	movs	r2, #8
 8004540:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004548:	2208      	movs	r2, #8
 800454a:	18ba      	adds	r2, r7, r2
 800454c:	1a8a      	subs	r2, r1, r2
 800454e:	189a      	adds	r2, r3, r2
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	609a      	str	r2, [r3, #8]
    return true;
 8004554:	2301      	movs	r3, #1
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b019      	add	sp, #100	; 0x64
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	04007fe5 	.word	0x04007fe5
 8004564:	ffc00000 	.word	0xffc00000
 8004568:	41dfffff 	.word	0x41dfffff
 800456c:	7fffffff 	.word	0x7fffffff
 8004570:	c1e00000 	.word	0xc1e00000

08004574 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	e04c      	b.n	8004624 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	18d3      	adds	r3, r2, r3
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b2f      	cmp	r3, #47	; 0x2f
 8004594:	d90f      	bls.n	80045b6 <parse_hex4+0x42>
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	18d3      	adds	r3, r2, r3
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b39      	cmp	r3, #57	; 0x39
 80045a0:	d809      	bhi.n	80045b6 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	18d3      	adds	r3, r2, r3
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	001a      	movs	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	18d3      	adds	r3, r2, r3
 80045b0:	3b30      	subs	r3, #48	; 0x30
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e02d      	b.n	8004612 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	18d3      	adds	r3, r2, r3
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d90f      	bls.n	80045e2 <parse_hex4+0x6e>
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	18d3      	adds	r3, r2, r3
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b46      	cmp	r3, #70	; 0x46
 80045cc:	d809      	bhi.n	80045e2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	001a      	movs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	18d3      	adds	r3, r2, r3
 80045dc:	3b37      	subs	r3, #55	; 0x37
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e017      	b.n	8004612 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	18d3      	adds	r3, r2, r3
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b60      	cmp	r3, #96	; 0x60
 80045ec:	d90f      	bls.n	800460e <parse_hex4+0x9a>
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	18d3      	adds	r3, r2, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b66      	cmp	r3, #102	; 0x66
 80045f8:	d809      	bhi.n	800460e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	18d3      	adds	r3, r2, r3
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	001a      	movs	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	18d3      	adds	r3, r2, r3
 8004608:	3b57      	subs	r3, #87	; 0x57
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e001      	b.n	8004612 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800460e:	2300      	movs	r3, #0
 8004610:	e00c      	b.n	800462c <parse_hex4+0xb8>
        }

        if (i < 3)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d802      	bhi.n	800461e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3301      	adds	r3, #1
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d9af      	bls.n	800458a <parse_hex4+0x16>
        }
    }

    return h;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b004      	add	sp, #16
 8004632:	bd80      	pop	{r7, pc}

08004634 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800464c:	2323      	movs	r3, #35	; 0x23
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
    unsigned char utf8_position = 0;
 8004654:	2322      	movs	r3, #34	; 0x22
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
    unsigned char sequence_length = 0;
 800465c:	2321      	movs	r3, #33	; 0x21
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
    unsigned char first_byte_mark = 0;
 8004664:	2320      	movs	r3, #32
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]

    if ((input_end - first_sequence) < 6)
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b05      	cmp	r3, #5
 8004674:	dc00      	bgt.n	8004678 <utf16_literal_to_utf8+0x44>
 8004676:	e0d6      	b.n	8004826 <utf16_literal_to_utf8+0x1f2>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	3302      	adds	r3, #2
 800467c:	0018      	movs	r0, r3
 800467e:	f7ff ff79 	bl	8004574 <parse_hex4>
 8004682:	0003      	movs	r3, r0
 8004684:	61fb      	str	r3, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	23dc      	movs	r3, #220	; 0xdc
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	429a      	cmp	r2, r3
 800468e:	d305      	bcc.n	800469c <utf16_literal_to_utf8+0x68>
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	23e0      	movs	r3, #224	; 0xe0
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	429a      	cmp	r2, r3
 8004698:	d200      	bcs.n	800469c <utf16_literal_to_utf8+0x68>
 800469a:	e0c6      	b.n	800482a <utf16_literal_to_utf8+0x1f6>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	23d8      	movs	r3, #216	; 0xd8
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d33f      	bcc.n	8004726 <utf16_literal_to_utf8+0xf2>
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	23dc      	movs	r3, #220	; 0xdc
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d23a      	bcs.n	8004726 <utf16_literal_to_utf8+0xf2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3306      	adds	r3, #6
 80046b4:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80046ba:	2321      	movs	r3, #33	; 0x21
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	220c      	movs	r2, #12
 80046c0:	701a      	strb	r2, [r3, #0]

        if ((input_end - second_sequence) < 6)
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	dc00      	bgt.n	80046ce <utf16_literal_to_utf8+0x9a>
 80046cc:	e0af      	b.n	800482e <utf16_literal_to_utf8+0x1fa>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b5c      	cmp	r3, #92	; 0x5c
 80046d4:	d000      	beq.n	80046d8 <utf16_literal_to_utf8+0xa4>
 80046d6:	e0ac      	b.n	8004832 <utf16_literal_to_utf8+0x1fe>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	3301      	adds	r3, #1
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b75      	cmp	r3, #117	; 0x75
 80046e0:	d000      	beq.n	80046e4 <utf16_literal_to_utf8+0xb0>
 80046e2:	e0a6      	b.n	8004832 <utf16_literal_to_utf8+0x1fe>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	3302      	adds	r3, #2
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7ff ff43 	bl	8004574 <parse_hex4>
 80046ee:	0003      	movs	r3, r0
 80046f0:	613b      	str	r3, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	23dc      	movs	r3, #220	; 0xdc
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d200      	bcs.n	80046fe <utf16_literal_to_utf8+0xca>
 80046fc:	e09b      	b.n	8004836 <utf16_literal_to_utf8+0x202>
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	23e0      	movs	r3, #224	; 0xe0
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	429a      	cmp	r2, r3
 8004706:	d300      	bcc.n	800470a <utf16_literal_to_utf8+0xd6>
 8004708:	e095      	b.n	8004836 <utf16_literal_to_utf8+0x202>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	029b      	lsls	r3, r3, #10
 800470e:	4a4e      	ldr	r2, [pc, #312]	; (8004848 <utf16_literal_to_utf8+0x214>)
 8004710:	401a      	ands	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	059b      	lsls	r3, r3, #22
 8004716:	0d9b      	lsrs	r3, r3, #22
 8004718:	4313      	orrs	r3, r2
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	0252      	lsls	r2, r2, #9
 800471e:	4694      	mov	ip, r2
 8004720:	4463      	add	r3, ip
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8004724:	e005      	b.n	8004732 <utf16_literal_to_utf8+0xfe>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8004726:	2321      	movs	r3, #33	; 0x21
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	2206      	movs	r2, #6
 800472c:	701a      	strb	r2, [r3, #0]
        codepoint = first_code;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	2b7f      	cmp	r3, #127	; 0x7f
 8004736:	d804      	bhi.n	8004742 <utf16_literal_to_utf8+0x10e>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8004738:	2323      	movs	r3, #35	; 0x23
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e028      	b.n	8004794 <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint < 0x800)
 8004742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	429a      	cmp	r2, r3
 800474a:	d208      	bcs.n	800475e <utf16_literal_to_utf8+0x12a>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800474c:	2323      	movs	r3, #35	; 0x23
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xC0; /* 11000000 */
 8004754:	2320      	movs	r3, #32
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	22c0      	movs	r2, #192	; 0xc0
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e01a      	b.n	8004794 <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint < 0x10000)
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	025b      	lsls	r3, r3, #9
 8004764:	429a      	cmp	r2, r3
 8004766:	d208      	bcs.n	800477a <utf16_literal_to_utf8+0x146>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8004768:	2323      	movs	r3, #35	; 0x23
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2203      	movs	r2, #3
 800476e:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xE0; /* 11100000 */
 8004770:	2320      	movs	r3, #32
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	22e0      	movs	r2, #224	; 0xe0
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e00c      	b.n	8004794 <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint <= 0x10FFFF)
 800477a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477c:	2388      	movs	r3, #136	; 0x88
 800477e:	035b      	lsls	r3, r3, #13
 8004780:	429a      	cmp	r2, r3
 8004782:	d25a      	bcs.n	800483a <utf16_literal_to_utf8+0x206>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8004784:	2323      	movs	r3, #35	; 0x23
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2204      	movs	r2, #4
 800478a:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xF0; /* 11110000 */
 800478c:	2320      	movs	r3, #32
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	22f0      	movs	r2, #240	; 0xf0
 8004792:	701a      	strb	r2, [r3, #0]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004794:	2322      	movs	r3, #34	; 0x22
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	2223      	movs	r2, #35	; 0x23
 800479a:	18ba      	adds	r2, r7, r2
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	3a01      	subs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e017      	b.n	80047d4 <utf16_literal_to_utf8+0x1a0>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	223f      	movs	r2, #63	; 0x3f
 80047aa:	4013      	ands	r3, r2
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	2022      	movs	r0, #34	; 0x22
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	18cb      	adds	r3, r1, r3
 80047ba:	2180      	movs	r1, #128	; 0x80
 80047bc:	4249      	negs	r1, r1
 80047be:	430a      	orrs	r2, r1
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	183b      	adds	r3, r7, r0
 80047d0:	3a01      	subs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	2322      	movs	r3, #34	; 0x22
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e2      	bne.n	80047a4 <utf16_literal_to_utf8+0x170>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80047de:	2323      	movs	r3, #35	; 0x23
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d90a      	bls.n	80047fe <utf16_literal_to_utf8+0x1ca>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	b2d9      	uxtb	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2220      	movs	r2, #32
 80047f2:	18ba      	adds	r2, r7, r2
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	e007      	b.n	800480e <utf16_literal_to_utf8+0x1da>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	b2da      	uxtb	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	217f      	movs	r1, #127	; 0x7f
 8004808:	400a      	ands	r2, r1
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	2323      	movs	r3, #35	; 0x23
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	18d2      	adds	r2, r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800481e:	2321      	movs	r3, #33	; 0x21
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	e00b      	b.n	800483e <utf16_literal_to_utf8+0x20a>
        goto fail;
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	e008      	b.n	800483c <utf16_literal_to_utf8+0x208>
        goto fail;
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	e006      	b.n	800483c <utf16_literal_to_utf8+0x208>
            goto fail;
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	e004      	b.n	800483c <utf16_literal_to_utf8+0x208>
            goto fail;
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	e002      	b.n	800483c <utf16_literal_to_utf8+0x208>
            goto fail;
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	e000      	b.n	800483c <utf16_literal_to_utf8+0x208>
        goto fail;
 800483a:	46c0      	nop			; (mov r8, r8)

fail:
    return 0;
 800483c:	2300      	movs	r3, #0
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b00a      	add	sp, #40	; 0x28
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	000ffc00 	.word	0x000ffc00

0800484c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800484c:	b5b0      	push	{r4, r5, r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	3301      	adds	r3, #1
 8004860:	18d3      	adds	r3, r2, r3
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	3301      	adds	r3, #1
 800486e:	18d3      	adds	r3, r2, r3
 8004870:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	18d3      	adds	r3, r2, r3
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b22      	cmp	r3, #34	; 0x22
 8004888:	d000      	beq.n	800488c <parse_string+0x40>
 800488a:	e0d5      	b.n	8004a38 <parse_string+0x1ec>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8004894:	e017      	b.n	80048c6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b5c      	cmp	r3, #92	; 0x5c
 800489c:	d110      	bne.n	80048c0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	001a      	movs	r2, r3
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d300      	bcc.n	80048b4 <parse_string+0x68>
 80048b2:	e0c3      	b.n	8004a3c <parse_string+0x1f0>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	3301      	adds	r3, #1
 80048b8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	3301      	adds	r3, #1
 80048be:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	3301      	adds	r3, #1
 80048c4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a3a      	ldr	r2, [r7, #32]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	001a      	movs	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d203      	bcs.n	80048e0 <parse_string+0x94>
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b22      	cmp	r3, #34	; 0x22
 80048de:	d1da      	bne.n	8004896 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	001a      	movs	r2, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d300      	bcc.n	80048f4 <parse_string+0xa8>
 80048f2:	e0a5      	b.n	8004a40 <parse_string+0x1f4>
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b22      	cmp	r3, #34	; 0x22
 80048fa:	d000      	beq.n	80048fe <parse_string+0xb2>
 80048fc:	e0a0      	b.n	8004a40 <parse_string+0x1f4>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	18d3      	adds	r3, r2, r3
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	001a      	movs	r2, r3
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	3201      	adds	r2, #1
 800491c:	0010      	movs	r0, r2
 800491e:	4798      	blx	r3
 8004920:	0003      	movs	r3, r0
 8004922:	61fb      	str	r3, [r7, #28]
        if (output == NULL)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d100      	bne.n	800492c <parse_string+0xe0>
 800492a:	e08b      	b.n	8004a44 <parse_string+0x1f8>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8004930:	e067      	b.n	8004a02 <parse_string+0x1b6>
    {
        if (*input_pointer != '\\')
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b5c      	cmp	r3, #92	; 0x5c
 8004938:	d008      	beq.n	800494c <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 800493a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493c:	1c53      	adds	r3, r2, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	60f9      	str	r1, [r7, #12]
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e05a      	b.n	8004a02 <parse_string+0x1b6>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800494c:	2317      	movs	r3, #23
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	2202      	movs	r2, #2
 8004952:	701a      	strb	r2, [r3, #0]
            if ((input_end - input_pointer) < 1)
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	dc00      	bgt.n	8004960 <parse_string+0x114>
 800495e:	e073      	b.n	8004a48 <parse_string+0x1fc>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	3301      	adds	r3, #1
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b75      	cmp	r3, #117	; 0x75
 8004968:	dd00      	ble.n	800496c <parse_string+0x120>
 800496a:	e06f      	b.n	8004a4c <parse_string+0x200>
 800496c:	2b5c      	cmp	r3, #92	; 0x5c
 800496e:	da04      	bge.n	800497a <parse_string+0x12e>
 8004970:	2b22      	cmp	r3, #34	; 0x22
 8004972:	d028      	beq.n	80049c6 <parse_string+0x17a>
 8004974:	2b2f      	cmp	r3, #47	; 0x2f
 8004976:	d026      	beq.n	80049c6 <parse_string+0x17a>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8004978:	e068      	b.n	8004a4c <parse_string+0x200>
            switch (input_pointer[1])
 800497a:	3b5c      	subs	r3, #92	; 0x5c
 800497c:	2b19      	cmp	r3, #25
 800497e:	d865      	bhi.n	8004a4c <parse_string+0x200>
 8004980:	009a      	lsls	r2, r3, #2
 8004982:	4b3f      	ldr	r3, [pc, #252]	; (8004a80 <parse_string+0x234>)
 8004984:	18d3      	adds	r3, r2, r3
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	469f      	mov	pc, r3
                    *output_pointer++ = '\b';
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	60fa      	str	r2, [r7, #12]
 8004990:	2208      	movs	r2, #8
 8004992:	701a      	strb	r2, [r3, #0]
                    break;
 8004994:	e02f      	b.n	80049f6 <parse_string+0x1aa>
                    *output_pointer++ = '\f';
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	60fa      	str	r2, [r7, #12]
 800499c:	220c      	movs	r2, #12
 800499e:	701a      	strb	r2, [r3, #0]
                    break;
 80049a0:	e029      	b.n	80049f6 <parse_string+0x1aa>
                    *output_pointer++ = '\n';
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	60fa      	str	r2, [r7, #12]
 80049a8:	220a      	movs	r2, #10
 80049aa:	701a      	strb	r2, [r3, #0]
                    break;
 80049ac:	e023      	b.n	80049f6 <parse_string+0x1aa>
                    *output_pointer++ = '\r';
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	60fa      	str	r2, [r7, #12]
 80049b4:	220d      	movs	r2, #13
 80049b6:	701a      	strb	r2, [r3, #0]
                    break;
 80049b8:	e01d      	b.n	80049f6 <parse_string+0x1aa>
                    *output_pointer++ = '\t';
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	60fa      	str	r2, [r7, #12]
 80049c0:	2209      	movs	r2, #9
 80049c2:	701a      	strb	r2, [r3, #0]
                    break;
 80049c4:	e017      	b.n	80049f6 <parse_string+0x1aa>
                    *output_pointer++ = input_pointer[1];
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	60f9      	str	r1, [r7, #12]
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	701a      	strb	r2, [r3, #0]
                    break;
 80049d4:	e00f      	b.n	80049f6 <parse_string+0x1aa>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80049d6:	2517      	movs	r5, #23
 80049d8:	197c      	adds	r4, r7, r5
 80049da:	230c      	movs	r3, #12
 80049dc:	18fa      	adds	r2, r7, r3
 80049de:	6a39      	ldr	r1, [r7, #32]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7ff fe26 	bl	8004634 <utf16_literal_to_utf8>
 80049e8:	0003      	movs	r3, r0
 80049ea:	7023      	strb	r3, [r4, #0]
                    if (sequence_length == 0)
 80049ec:	197b      	adds	r3, r7, r5
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02d      	beq.n	8004a50 <parse_string+0x204>
                    break;
 80049f4:	46c0      	nop			; (mov r8, r8)
            }
            input_pointer += sequence_length;
 80049f6:	2317      	movs	r3, #23
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fe:	18d3      	adds	r3, r2, r3
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d393      	bcc.n	8004932 <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2210      	movs	r2, #16
 8004a14:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	001a      	movs	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	609a      	str	r2, [r3, #8]

    return true;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e01f      	b.n	8004a78 <parse_string+0x22c>
        goto fail;
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	e00a      	b.n	8004a52 <parse_string+0x206>
                    goto fail;
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	e008      	b.n	8004a52 <parse_string+0x206>
            goto fail; /* string ended unexpectedly */
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	e006      	b.n	8004a52 <parse_string+0x206>
            goto fail; /* allocation failure */
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	e004      	b.n	8004a52 <parse_string+0x206>
                goto fail;
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	e002      	b.n	8004a52 <parse_string+0x206>
                    goto fail;
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	e000      	b.n	8004a52 <parse_string+0x206>
                        goto fail;
 8004a50:	46c0      	nop			; (mov r8, r8)

fail:
    if (output != NULL)
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <parse_string+0x216>
    {
        input_buffer->hooks.deallocate(output);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	0010      	movs	r0, r2
 8004a60:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <parse_string+0x22a>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	001a      	movs	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	609a      	str	r2, [r3, #8]
    }

    return false;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b00a      	add	sp, #40	; 0x28
 8004a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a80:	0800cb74 	.word	0x0800cb74

08004a84 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <buffer_skip_whitespace+0x16>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e02c      	b.n	8004af8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <buffer_skip_whitespace+0x2c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d306      	bcc.n	8004abe <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	e021      	b.n	8004af8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <buffer_skip_whitespace+0x5c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d207      	bcs.n	8004ae0 <buffer_skip_whitespace+0x5c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d9e9      	bls.n	8004ab4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d104      	bne.n	8004af6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8004af6:	687b      	ldr	r3, [r7, #4]
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <skip_utf8_bom+0x1e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <skip_utf8_bom+0x1e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <skip_utf8_bom+0x22>
    {
        return NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e01b      	b.n	8004b5a <skip_utf8_bom+0x5a>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d017      	beq.n	8004b58 <skip_utf8_bom+0x58>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	1d1a      	adds	r2, r3, #4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d210      	bcs.n	8004b58 <skip_utf8_bom+0x58>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	18d3      	adds	r3, r2, r3
 8004b40:	4908      	ldr	r1, [pc, #32]	; (8004b64 <skip_utf8_bom+0x64>)
 8004b42:	2203      	movs	r2, #3
 8004b44:	0018      	movs	r0, r3
 8004b46:	f006 f85f 	bl	800ac08 <strncmp>
 8004b4a:	1e03      	subs	r3, r0, #0
 8004b4c:	d104      	bne.n	8004b58 <skip_utf8_bom+0x58>
    {
        buffer->offset += 3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	1cda      	adds	r2, r3, #3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8004b58:	687b      	ldr	r3, [r7, #4]
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b002      	add	sp, #8
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	0800cad4 	.word	0x0800cad4

08004b68 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e00d      	b.n	8004b9a <cJSON_ParseWithOpts+0x32>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7fb facb 	bl	800011c <strlen>
 8004b86:	0003      	movs	r3, r0
 8004b88:	3301      	adds	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f806 	bl	8004ba4 <cJSON_ParseWithLengthOpts>
 8004b98:	0003      	movs	r3, r0
}
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b006      	add	sp, #24
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b08e      	sub	sp, #56	; 0x38
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8004bb2:	2418      	movs	r4, #24
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	231c      	movs	r3, #28
 8004bba:	001a      	movs	r2, r3
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	f006 f80d 	bl	800abdc <memset>
    cJSON *item = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8004bc6:	4b4d      	ldr	r3, [pc, #308]	; (8004cfc <cJSON_ParseWithLengthOpts+0x158>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8004bcc:	4b4b      	ldr	r3, [pc, #300]	; (8004cfc <cJSON_ParseWithLengthOpts+0x158>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d04d      	beq.n	8004c74 <cJSON_ParseWithLengthOpts+0xd0>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04a      	beq.n	8004c74 <cJSON_ParseWithLengthOpts+0xd0>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8004bde:	0025      	movs	r5, r4
 8004be0:	197b      	adds	r3, r7, r5
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	601a      	str	r2, [r3, #0]
    buffer.length = buffer_length;
 8004be6:	197b      	adds	r3, r7, r5
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	605a      	str	r2, [r3, #4]
    buffer.offset = 0;
 8004bec:	197b      	adds	r3, r7, r5
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
    buffer.hooks = global_hooks;
 8004bf2:	197b      	adds	r3, r7, r5
 8004bf4:	4a42      	ldr	r2, [pc, #264]	; (8004d00 <cJSON_ParseWithLengthOpts+0x15c>)
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bfa:	c313      	stmia	r3!, {r0, r1, r4}

    item = cJSON_New_Item(&global_hooks);
 8004bfc:	4b40      	ldr	r3, [pc, #256]	; (8004d00 <cJSON_ParseWithLengthOpts+0x15c>)
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f7ff fb8a 	bl	8004318 <cJSON_New_Item>
 8004c04:	0003      	movs	r3, r0
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d034      	beq.n	8004c78 <cJSON_ParseWithLengthOpts+0xd4>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8004c0e:	197b      	adds	r3, r7, r5
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7ff ff75 	bl	8004b00 <skip_utf8_bom>
 8004c16:	0003      	movs	r3, r0
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7ff ff33 	bl	8004a84 <buffer_skip_whitespace>
 8004c1e:	0002      	movs	r2, r0
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	0011      	movs	r1, r2
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f87d 	bl	8004d24 <parse_value>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d026      	beq.n	8004c7c <cJSON_ParseWithLengthOpts+0xd8>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d012      	beq.n	8004c5a <cJSON_ParseWithLengthOpts+0xb6>
    {
        buffer_skip_whitespace(&buffer);
 8004c34:	197b      	adds	r3, r7, r5
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7ff ff24 	bl	8004a84 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8004c3c:	0029      	movs	r1, r5
 8004c3e:	187b      	adds	r3, r7, r1
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	187b      	adds	r3, r7, r1
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d21a      	bcs.n	8004c80 <cJSON_ParseWithLengthOpts+0xdc>
 8004c4a:	187b      	adds	r3, r7, r1
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	18d3      	adds	r3, r2, r3
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d112      	bne.n	8004c80 <cJSON_ParseWithLengthOpts+0xdc>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <cJSON_ParseWithLengthOpts+0xcc>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8004c60:	2118      	movs	r1, #24
 8004c62:	187b      	adds	r3, r7, r1
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	187b      	adds	r3, r7, r1
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	18d2      	adds	r2, r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	601a      	str	r2, [r3, #0]
    }

    return item;
 8004c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c72:	e03f      	b.n	8004cf4 <cJSON_ParseWithLengthOpts+0x150>
        goto fail;
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	e004      	b.n	8004c82 <cJSON_ParseWithLengthOpts+0xde>
        goto fail;
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	e002      	b.n	8004c82 <cJSON_ParseWithLengthOpts+0xde>
        goto fail;
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	e000      	b.n	8004c82 <cJSON_ParseWithLengthOpts+0xde>
            goto fail;
 8004c80:	46c0      	nop			; (mov r8, r8)

fail:
    if (item != NULL)
 8004c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <cJSON_ParseWithLengthOpts+0xec>
    {
        cJSON_Delete(item);
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f7ff fb5c 	bl	8004348 <cJSON_Delete>
    }

    if (value != NULL)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02d      	beq.n	8004cf2 <cJSON_ParseWithLengthOpts+0x14e>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8004c96:	2110      	movs	r1, #16
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]
        local_error.position = 0;
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]

        if (buffer.offset < buffer.length)
 8004ca4:	2018      	movs	r0, #24
 8004ca6:	183b      	adds	r3, r7, r0
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d204      	bcs.n	8004cbc <cJSON_ParseWithLengthOpts+0x118>
        {
            local_error.position = buffer.offset;
 8004cb2:	183b      	adds	r3, r7, r0
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	e00a      	b.n	8004cd2 <cJSON_ParseWithLengthOpts+0x12e>
        }
        else if (buffer.length > 0)
 8004cbc:	2218      	movs	r2, #24
 8004cbe:	18bb      	adds	r3, r7, r2
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <cJSON_ParseWithLengthOpts+0x12e>
        {
            local_error.position = buffer.length - 1;
 8004cc6:	18bb      	adds	r3, r7, r2
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	1e5a      	subs	r2, r3, #1
 8004ccc:	2310      	movs	r3, #16
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	605a      	str	r2, [r3, #4]
        }

        if (return_parse_end != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <cJSON_ParseWithLengthOpts+0x144>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8004cd8:	2110      	movs	r1, #16
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	18d2      	adds	r2, r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8004ce8:	4b04      	ldr	r3, [pc, #16]	; (8004cfc <cJSON_ParseWithLengthOpts+0x158>)
 8004cea:	2210      	movs	r2, #16
 8004cec:	18ba      	adds	r2, r7, r2
 8004cee:	ca03      	ldmia	r2!, {r0, r1}
 8004cf0:	c303      	stmia	r3!, {r0, r1}
    }

    return NULL;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b00e      	add	sp, #56	; 0x38
 8004cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfc:	20000d18 	.word	0x20000d18
 8004d00:	20000004 	.word	0x20000004

08004d04 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2100      	movs	r1, #0
 8004d12:	0018      	movs	r0, r3
 8004d14:	f7ff ff28 	bl	8004b68 <cJSON_ParseWithOpts>
 8004d18:	0003      	movs	r3, r0
}
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b002      	add	sp, #8
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <parse_value+0x18>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <parse_value+0x1c>
    {
        return false; /* no input */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e0d7      	b.n	8004ef0 <parse_value+0x1cc>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01c      	beq.n	8004d80 <parse_value+0x5c>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d815      	bhi.n	8004d80 <parse_value+0x5c>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	4966      	ldr	r1, [pc, #408]	; (8004ef8 <parse_value+0x1d4>)
 8004d60:	2204      	movs	r2, #4
 8004d62:	0018      	movs	r0, r3
 8004d64:	f005 ff50 	bl	800ac08 <strncmp>
 8004d68:	1e03      	subs	r3, r0, #0
 8004d6a:	d109      	bne.n	8004d80 <parse_value+0x5c>
    {
        item->type = cJSON_NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	1d1a      	adds	r2, r3, #4
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	609a      	str	r2, [r3, #8]
        return true;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0b7      	b.n	8004ef0 <parse_value+0x1cc>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01c      	beq.n	8004dc0 <parse_value+0x9c>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	1d5a      	adds	r2, r3, #5
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d815      	bhi.n	8004dc0 <parse_value+0x9c>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	18d3      	adds	r3, r2, r3
 8004d9e:	4957      	ldr	r1, [pc, #348]	; (8004efc <parse_value+0x1d8>)
 8004da0:	2205      	movs	r2, #5
 8004da2:	0018      	movs	r0, r3
 8004da4:	f005 ff30 	bl	800ac08 <strncmp>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d109      	bne.n	8004dc0 <parse_value+0x9c>
    {
        item->type = cJSON_False;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	1d5a      	adds	r2, r3, #5
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	609a      	str	r2, [r3, #8]
        return true;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e097      	b.n	8004ef0 <parse_value+0x1cc>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01f      	beq.n	8004e06 <parse_value+0xe2>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d818      	bhi.n	8004e06 <parse_value+0xe2>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	4948      	ldr	r1, [pc, #288]	; (8004f00 <parse_value+0x1dc>)
 8004de0:	2204      	movs	r2, #4
 8004de2:	0018      	movs	r0, r3
 8004de4:	f005 ff10 	bl	800ac08 <strncmp>
 8004de8:	1e03      	subs	r3, r0, #0
 8004dea:	d10c      	bne.n	8004e06 <parse_value+0xe2>
    {
        item->type = cJSON_True;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	1d1a      	adds	r2, r3, #4
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	609a      	str	r2, [r3, #8]
        return true;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e074      	b.n	8004ef0 <parse_value+0x1cc>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <parse_value+0x114>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d20f      	bcs.n	8004e38 <parse_value+0x114>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b22      	cmp	r3, #34	; 0x22
 8004e26:	d107      	bne.n	8004e38 <parse_value+0x114>
    {
        return parse_string(item, input_buffer);
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0011      	movs	r1, r2
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7ff fd0c 	bl	800484c <parse_string>
 8004e34:	0003      	movs	r3, r0
 8004e36:	e05b      	b.n	8004ef0 <parse_value+0x1cc>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d025      	beq.n	8004e8a <parse_value+0x166>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d21f      	bcs.n	8004e8a <parse_value+0x166>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	18d3      	adds	r3, r2, r3
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b2d      	cmp	r3, #45	; 0x2d
 8004e58:	d00f      	beq.n	8004e7a <parse_value+0x156>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	18d3      	adds	r3, r2, r3
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b2f      	cmp	r3, #47	; 0x2f
 8004e68:	d90f      	bls.n	8004e8a <parse_value+0x166>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	18d3      	adds	r3, r2, r3
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b39      	cmp	r3, #57	; 0x39
 8004e78:	d807      	bhi.n	8004e8a <parse_value+0x166>
    {
        return parse_number(item, input_buffer);
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0011      	movs	r1, r2
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7ff fab1 	bl	80043e8 <parse_number>
 8004e86:	0003      	movs	r3, r0
 8004e88:	e032      	b.n	8004ef0 <parse_value+0x1cc>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <parse_value+0x198>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d20f      	bcs.n	8004ebc <parse_value+0x198>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	18d3      	adds	r3, r2, r3
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b5b      	cmp	r3, #91	; 0x5b
 8004eaa:	d107      	bne.n	8004ebc <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0011      	movs	r1, r2
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 f826 	bl	8004f04 <parse_array>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	e019      	b.n	8004ef0 <parse_value+0x1cc>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <parse_value+0x1ca>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20f      	bcs.n	8004eee <parse_value+0x1ca>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	18d3      	adds	r3, r2, r3
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b7b      	cmp	r3, #123	; 0x7b
 8004edc:	d107      	bne.n	8004eee <parse_value+0x1ca>
    {
        return parse_object(item, input_buffer);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f000 f8d8 	bl	800509a <parse_object>
 8004eea:	0003      	movs	r3, r0
 8004eec:	e000      	b.n	8004ef0 <parse_value+0x1cc>
    }

    return false;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	0800caa8 	.word	0x0800caa8
 8004efc:	0800cad8 	.word	0x0800cad8
 8004f00:	0800cae0 	.word	0x0800cae0

08004f04 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	23fa      	movs	r3, #250	; 0xfa
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d301      	bcc.n	8004f26 <parse_array+0x22>
    {
        return false; /* to deeply nested */
 8004f22:	2300      	movs	r3, #0
 8004f24:	e0b5      	b.n	8005092 <parse_array+0x18e>
    }
    input_buffer->depth++;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	18d3      	adds	r3, r2, r3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b5b      	cmp	r3, #91	; 0x5b
 8004f3e:	d000      	beq.n	8004f42 <parse_array+0x3e>
 8004f40:	e098      	b.n	8005074 <parse_array+0x170>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7ff fd98 	bl	8004a84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <parse_array+0x72>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d207      	bcs.n	8004f76 <parse_array+0x72>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b5d      	cmp	r3, #93	; 0x5d
 8004f74:	d065      	beq.n	8005042 <parse_array+0x13e>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <parse_array+0x84>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d305      	bcc.n	8004f94 <parse_array+0x90>
    {
        input_buffer->offset--;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	609a      	str	r2, [r3, #8]
        goto fail;
 8004f92:	e076      	b.n	8005082 <parse_array+0x17e>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	1e5a      	subs	r2, r3, #1
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f7ff f9b8 	bl	8004318 <cJSON_New_Item>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d062      	beq.n	8005078 <parse_array+0x174>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <parse_array+0xbe>
        {
            /* start the linked list */
            current_item = head = new_item;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e007      	b.n	8004fd2 <parse_array+0xce>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff fd50 	bl	8004a84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	0011      	movs	r1, r2
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7ff fe9a 	bl	8004d24 <parse_value>
 8004ff0:	1e03      	subs	r3, r0, #0
 8004ff2:	d043      	beq.n	800507c <parse_array+0x178>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7ff fd44 	bl	8004a84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <parse_array+0x11a>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d207      	bcs.n	800501e <parse_array+0x11a>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	18d3      	adds	r3, r2, r3
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b2c      	cmp	r3, #44	; 0x2c
 800501c:	d0bf      	beq.n	8004f9e <parse_array+0x9a>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02d      	beq.n	8005080 <parse_array+0x17c>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	d227      	bcs.n	8005080 <parse_array+0x17c>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	18d3      	adds	r3, r2, r3
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b5d      	cmp	r3, #93	; 0x5d
 800503e:	d11f      	bne.n	8005080 <parse_array+0x17c>
    {
        goto fail; /* expected end of array */
    }

success:
 8005040:	e000      	b.n	8005044 <parse_array+0x140>
        goto success;
 8005042:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <parse_array+0x156>
        head->prev = current_item;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	609a      	str	r2, [r3, #8]

    return true;
 8005070:	2301      	movs	r3, #1
 8005072:	e00e      	b.n	8005092 <parse_array+0x18e>
        goto fail;
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	e004      	b.n	8005082 <parse_array+0x17e>
            goto fail; /* allocation failure */
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	e002      	b.n	8005082 <parse_array+0x17e>
            goto fail; /* failed to parse value */
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	e000      	b.n	8005082 <parse_array+0x17e>
        goto fail; /* expected end of array */
 8005080:	46c0      	nop			; (mov r8, r8)

fail:
    if (head != NULL)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <parse_array+0x18c>
    {
        cJSON_Delete(head);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	0018      	movs	r0, r3
 800508c:	f7ff f95c 	bl	8004348 <cJSON_Delete>
    }

    return false;
 8005090:	2300      	movs	r3, #0
}
 8005092:	0018      	movs	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	b006      	add	sp, #24
 8005098:	bd80      	pop	{r7, pc}

0800509a <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	23fa      	movs	r3, #250	; 0xfa
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d301      	bcc.n	80050bc <parse_object+0x22>
    {
        return false; /* to deeply nested */
 80050b8:	2300      	movs	r3, #0
 80050ba:	e0f4      	b.n	80052a6 <parse_object+0x20c>
    }
    input_buffer->depth++;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d100      	bne.n	80050ce <parse_object+0x34>
 80050cc:	e0d8      	b.n	8005280 <parse_object+0x1e6>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d300      	bcc.n	80050dc <parse_object+0x42>
 80050da:	e0d1      	b.n	8005280 <parse_object+0x1e6>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	18d3      	adds	r3, r2, r3
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b7b      	cmp	r3, #123	; 0x7b
 80050ea:	d000      	beq.n	80050ee <parse_object+0x54>
 80050ec:	e0c8      	b.n	8005280 <parse_object+0x1e6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fcc2 	bl	8004a84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00e      	beq.n	8005124 <parse_object+0x8a>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d208      	bcs.n	8005124 <parse_object+0x8a>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	18d3      	adds	r3, r2, r3
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b7d      	cmp	r3, #125	; 0x7d
 8005120:	d100      	bne.n	8005124 <parse_object+0x8a>
 8005122:	e094      	b.n	800524e <parse_object+0x1b4>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <parse_object+0x9c>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	d305      	bcc.n	8005142 <parse_object+0xa8>
    {
        input_buffer->offset--;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	1e5a      	subs	r2, r3, #1
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	609a      	str	r2, [r3, #8]
        goto fail;
 8005140:	e0a9      	b.n	8005296 <parse_object+0x1fc>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	1e5a      	subs	r2, r3, #1
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	3310      	adds	r3, #16
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff f8e1 	bl	8004318 <cJSON_New_Item>
 8005156:	0003      	movs	r3, r0
 8005158:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d100      	bne.n	8005162 <parse_object+0xc8>
 8005160:	e090      	b.n	8005284 <parse_object+0x1ea>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <parse_object+0xd8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	e007      	b.n	8005182 <parse_object+0xe8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff fc78 	bl	8004a84 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	0011      	movs	r1, r2
 800519a:	0018      	movs	r0, r3
 800519c:	f7ff fb56 	bl	800484c <parse_string>
 80051a0:	1e03      	subs	r3, r0, #0
 80051a2:	d100      	bne.n	80051a6 <parse_object+0x10c>
 80051a4:	e070      	b.n	8005288 <parse_object+0x1ee>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7ff fc6b 	bl	8004a84 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d064      	beq.n	800528c <parse_object+0x1f2>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d25e      	bcs.n	800528c <parse_object+0x1f2>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	18d3      	adds	r3, r2, r3
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b3a      	cmp	r3, #58	; 0x3a
 80051dc:	d156      	bne.n	800528c <parse_object+0x1f2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7ff fc4a 	bl	8004a84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	0011      	movs	r1, r2
 80051f6:	0018      	movs	r0, r3
 80051f8:	f7ff fd94 	bl	8004d24 <parse_value>
 80051fc:	1e03      	subs	r3, r0, #0
 80051fe:	d047      	beq.n	8005290 <parse_object+0x1f6>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff fc3e 	bl	8004a84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <parse_object+0x190>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d207      	bcs.n	800522a <parse_object+0x190>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	18d3      	adds	r3, r2, r3
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b2c      	cmp	r3, #44	; 0x2c
 8005228:	d090      	beq.n	800514c <parse_object+0xb2>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d031      	beq.n	8005294 <parse_object+0x1fa>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d22b      	bcs.n	8005294 <parse_object+0x1fa>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b7d      	cmp	r3, #125	; 0x7d
 800524a:	d123      	bne.n	8005294 <parse_object+0x1fa>
    {
        goto fail; /* expected end of object */
    }

success:
 800524c:	e000      	b.n	8005250 <parse_object+0x1b6>
        goto success; /* empty object */
 800524e:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	1e5a      	subs	r2, r3, #1
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <parse_object+0x1cc>
        head->prev = current_item;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2240      	movs	r2, #64	; 0x40
 800526a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	609a      	str	r2, [r3, #8]
    return true;
 800527c:	2301      	movs	r3, #1
 800527e:	e012      	b.n	80052a6 <parse_object+0x20c>
        goto fail; /* not an object */
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	e008      	b.n	8005296 <parse_object+0x1fc>
            goto fail; /* allocation failure */
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	e006      	b.n	8005296 <parse_object+0x1fc>
            goto fail; /* failed to parse name */
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	e004      	b.n	8005296 <parse_object+0x1fc>
            goto fail; /* invalid object */
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	e002      	b.n	8005296 <parse_object+0x1fc>
            goto fail; /* failed to parse value */
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	e000      	b.n	8005296 <parse_object+0x1fc>
        goto fail; /* expected end of object */
 8005294:	46c0      	nop			; (mov r8, r8)

fail:
    if (head != NULL)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <parse_object+0x20a>
    {
        cJSON_Delete(head);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	0018      	movs	r0, r3
 80052a0:	f7ff f852 	bl	8004348 <cJSON_Delete>
    }

    return false;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b006      	add	sp, #24
 80052ac:	bd80      	pop	{r7, pc}

080052ae <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <get_object_item+0x1c>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <get_object_item+0x20>
    {
        return NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e033      	b.n	8005336 <get_object_item+0x88>
    }

    current_element = object->child;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d017      	beq.n	800530a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80052da:	e002      	b.n	80052e2 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01c      	beq.n	8005322 <get_object_item+0x74>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d018      	beq.n	8005322 <get_object_item+0x74>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	0011      	movs	r1, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fa ff05 	bl	8000108 <strcmp>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d1ec      	bne.n	80052dc <get_object_item+0x2e>
 8005302:	e00e      	b.n	8005322 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <get_object_item+0x74>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7fe ff77 	bl	800420c <case_insensitive_strcmp>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d1f0      	bne.n	8005304 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <get_object_item+0x82>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <get_object_item+0x86>
        return NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <get_object_item+0x88>
    }

    return current_element;
 8005334:	697b      	ldr	r3, [r7, #20]
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b006      	add	sp, #24
 800533c:	bd80      	pop	{r7, pc}

0800533e <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	0018      	movs	r0, r3
 8005350:	f7ff ffad 	bl	80052ae <get_object_item>
 8005354:	0003      	movs	r3, r0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b002      	add	sp, #8
 800535c:	bd80      	pop	{r7, pc}

0800535e <cJSON_IsFalse>:

    return (item->type & 0xFF) == cJSON_Invalid;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <cJSON_IsFalse+0x12>
    {
        return false;
 800536c:	2300      	movs	r3, #0
 800536e:	e007      	b.n	8005380 <cJSON_IsFalse+0x22>
    }

    return (item->type & 0xFF) == cJSON_False;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	22ff      	movs	r2, #255	; 0xff
 8005376:	4013      	ands	r3, r2
 8005378:	3b01      	subs	r3, #1
 800537a:	425a      	negs	r2, r3
 800537c:	4153      	adcs	r3, r2
 800537e:	b2db      	uxtb	r3, r3
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <cJSON_IsTrue>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <cJSON_IsTrue+0x12>
    {
        return false;
 8005396:	2300      	movs	r3, #0
 8005398:	e007      	b.n	80053aa <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	22ff      	movs	r2, #255	; 0xff
 80053a0:	4013      	ands	r3, r2
 80053a2:	3b02      	subs	r3, #2
 80053a4:	425a      	negs	r2, r3
 80053a6:	4153      	adcs	r3, r2
 80053a8:	b2db      	uxtb	r3, r3
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b002      	add	sp, #8
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <cJSON_IsNumber+0x12>
    {
        return false;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e007      	b.n	80053d4 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	4013      	ands	r3, r2
 80053cc:	3b08      	subs	r3, #8
 80053ce:	425a      	negs	r2, r3
 80053d0:	4153      	adcs	r3, r2
 80053d2:	b2db      	uxtb	r3, r3
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b002      	add	sp, #8
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053e2:	1dfb      	adds	r3, r7, #7
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_Init+0x3c>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_Init+0x3c>)
 80053ee:	2140      	movs	r1, #64	; 0x40
 80053f0:	430a      	orrs	r2, r1
 80053f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053f4:	2000      	movs	r0, #0
 80053f6:	f000 f811 	bl	800541c <HAL_InitTick>
 80053fa:	1e03      	subs	r3, r0, #0
 80053fc:	d003      	beq.n	8005406 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80053fe:	1dfb      	adds	r3, r7, #7
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	e001      	b.n	800540a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005406:	f7fd fbf3 	bl	8002bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800540a:	1dfb      	adds	r3, r7, #7
 800540c:	781b      	ldrb	r3, [r3, #0]
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b002      	add	sp, #8
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	40022000 	.word	0x40022000

0800541c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005424:	4b14      	ldr	r3, [pc, #80]	; (8005478 <HAL_InitTick+0x5c>)
 8005426:	681c      	ldr	r4, [r3, #0]
 8005428:	4b14      	ldr	r3, [pc, #80]	; (800547c <HAL_InitTick+0x60>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	0019      	movs	r1, r3
 800542e:	23fa      	movs	r3, #250	; 0xfa
 8005430:	0098      	lsls	r0, r3, #2
 8005432:	f7fa fe8f 	bl	8000154 <__udivsi3>
 8005436:	0003      	movs	r3, r0
 8005438:	0019      	movs	r1, r3
 800543a:	0020      	movs	r0, r4
 800543c:	f7fa fe8a 	bl	8000154 <__udivsi3>
 8005440:	0003      	movs	r3, r0
 8005442:	0018      	movs	r0, r3
 8005444:	f000 f92f 	bl	80056a6 <HAL_SYSTICK_Config>
 8005448:	1e03      	subs	r3, r0, #0
 800544a:	d001      	beq.n	8005450 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e00f      	b.n	8005470 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b03      	cmp	r3, #3
 8005454:	d80b      	bhi.n	800546e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	2301      	movs	r3, #1
 800545a:	425b      	negs	r3, r3
 800545c:	2200      	movs	r2, #0
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f8fc 	bl	800565c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_InitTick+0x64>)
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e000      	b.n	8005470 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
}
 8005470:	0018      	movs	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	b003      	add	sp, #12
 8005476:	bd90      	pop	{r4, r7, pc}
 8005478:	20000000 	.word	0x20000000
 800547c:	20000014 	.word	0x20000014
 8005480:	20000010 	.word	0x20000010

08005484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_IncTick+0x1c>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	001a      	movs	r2, r3
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_IncTick+0x20>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	18d2      	adds	r2, r2, r3
 8005494:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <HAL_IncTick+0x20>)
 8005496:	601a      	str	r2, [r3, #0]
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000014 	.word	0x20000014
 80054a4:	20000d20 	.word	0x20000d20

080054a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  return uwTick;
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <HAL_GetTick+0x10>)
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	20000d20 	.word	0x20000d20

080054bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054c4:	f7ff fff0 	bl	80054a8 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	d005      	beq.n	80054e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <HAL_Delay+0x44>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	001a      	movs	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	f7ff ffe0 	bl	80054a8 <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d8f7      	bhi.n	80054e4 <HAL_Delay+0x28>
  {
  }
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b004      	add	sp, #16
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20000014 	.word	0x20000014

08005504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	0002      	movs	r2, r0
 800550c:	1dfb      	adds	r3, r7, #7
 800550e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005510:	1dfb      	adds	r3, r7, #7
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b7f      	cmp	r3, #127	; 0x7f
 8005516:	d809      	bhi.n	800552c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005518:	1dfb      	adds	r3, r7, #7
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	001a      	movs	r2, r3
 800551e:	231f      	movs	r3, #31
 8005520:	401a      	ands	r2, r3
 8005522:	4b04      	ldr	r3, [pc, #16]	; (8005534 <__NVIC_EnableIRQ+0x30>)
 8005524:	2101      	movs	r1, #1
 8005526:	4091      	lsls	r1, r2
 8005528:	000a      	movs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
  }
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000e100 	.word	0xe000e100

08005538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	0002      	movs	r2, r0
 8005540:	6039      	str	r1, [r7, #0]
 8005542:	1dfb      	adds	r3, r7, #7
 8005544:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005546:	1dfb      	adds	r3, r7, #7
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d828      	bhi.n	80055a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800554e:	4a2f      	ldr	r2, [pc, #188]	; (800560c <__NVIC_SetPriority+0xd4>)
 8005550:	1dfb      	adds	r3, r7, #7
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b25b      	sxtb	r3, r3
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	33c0      	adds	r3, #192	; 0xc0
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	589b      	ldr	r3, [r3, r2]
 800555e:	1dfa      	adds	r2, r7, #7
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	0011      	movs	r1, r2
 8005564:	2203      	movs	r2, #3
 8005566:	400a      	ands	r2, r1
 8005568:	00d2      	lsls	r2, r2, #3
 800556a:	21ff      	movs	r1, #255	; 0xff
 800556c:	4091      	lsls	r1, r2
 800556e:	000a      	movs	r2, r1
 8005570:	43d2      	mvns	r2, r2
 8005572:	401a      	ands	r2, r3
 8005574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	019b      	lsls	r3, r3, #6
 800557a:	22ff      	movs	r2, #255	; 0xff
 800557c:	401a      	ands	r2, r3
 800557e:	1dfb      	adds	r3, r7, #7
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	0018      	movs	r0, r3
 8005584:	2303      	movs	r3, #3
 8005586:	4003      	ands	r3, r0
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800558c:	481f      	ldr	r0, [pc, #124]	; (800560c <__NVIC_SetPriority+0xd4>)
 800558e:	1dfb      	adds	r3, r7, #7
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b25b      	sxtb	r3, r3
 8005594:	089b      	lsrs	r3, r3, #2
 8005596:	430a      	orrs	r2, r1
 8005598:	33c0      	adds	r3, #192	; 0xc0
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800559e:	e031      	b.n	8005604 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <__NVIC_SetPriority+0xd8>)
 80055a2:	1dfb      	adds	r3, r7, #7
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	0019      	movs	r1, r3
 80055a8:	230f      	movs	r3, #15
 80055aa:	400b      	ands	r3, r1
 80055ac:	3b08      	subs	r3, #8
 80055ae:	089b      	lsrs	r3, r3, #2
 80055b0:	3306      	adds	r3, #6
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	18d3      	adds	r3, r2, r3
 80055b6:	3304      	adds	r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	1dfa      	adds	r2, r7, #7
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	0011      	movs	r1, r2
 80055c0:	2203      	movs	r2, #3
 80055c2:	400a      	ands	r2, r1
 80055c4:	00d2      	lsls	r2, r2, #3
 80055c6:	21ff      	movs	r1, #255	; 0xff
 80055c8:	4091      	lsls	r1, r2
 80055ca:	000a      	movs	r2, r1
 80055cc:	43d2      	mvns	r2, r2
 80055ce:	401a      	ands	r2, r3
 80055d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	019b      	lsls	r3, r3, #6
 80055d6:	22ff      	movs	r2, #255	; 0xff
 80055d8:	401a      	ands	r2, r3
 80055da:	1dfb      	adds	r3, r7, #7
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	0018      	movs	r0, r3
 80055e0:	2303      	movs	r3, #3
 80055e2:	4003      	ands	r3, r0
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055e8:	4809      	ldr	r0, [pc, #36]	; (8005610 <__NVIC_SetPriority+0xd8>)
 80055ea:	1dfb      	adds	r3, r7, #7
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	001c      	movs	r4, r3
 80055f0:	230f      	movs	r3, #15
 80055f2:	4023      	ands	r3, r4
 80055f4:	3b08      	subs	r3, #8
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	430a      	orrs	r2, r1
 80055fa:	3306      	adds	r3, #6
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	18c3      	adds	r3, r0, r3
 8005600:	3304      	adds	r3, #4
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	b003      	add	sp, #12
 800560a:	bd90      	pop	{r4, r7, pc}
 800560c:	e000e100 	.word	0xe000e100
 8005610:	e000ed00 	.word	0xe000ed00

08005614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	1e5a      	subs	r2, r3, #1
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	045b      	lsls	r3, r3, #17
 8005624:	429a      	cmp	r2, r3
 8005626:	d301      	bcc.n	800562c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005628:	2301      	movs	r3, #1
 800562a:	e010      	b.n	800564e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <SysTick_Config+0x44>)
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	3a01      	subs	r2, #1
 8005632:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005634:	2301      	movs	r3, #1
 8005636:	425b      	negs	r3, r3
 8005638:	2103      	movs	r1, #3
 800563a:	0018      	movs	r0, r3
 800563c:	f7ff ff7c 	bl	8005538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <SysTick_Config+0x44>)
 8005642:	2200      	movs	r2, #0
 8005644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005646:	4b04      	ldr	r3, [pc, #16]	; (8005658 <SysTick_Config+0x44>)
 8005648:	2207      	movs	r2, #7
 800564a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b002      	add	sp, #8
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	e000e010 	.word	0xe000e010

0800565c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	210f      	movs	r1, #15
 8005668:	187b      	adds	r3, r7, r1
 800566a:	1c02      	adds	r2, r0, #0
 800566c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	187b      	adds	r3, r7, r1
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b25b      	sxtb	r3, r3
 8005676:	0011      	movs	r1, r2
 8005678:	0018      	movs	r0, r3
 800567a:	f7ff ff5d 	bl	8005538 <__NVIC_SetPriority>
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	b004      	add	sp, #16
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	0002      	movs	r2, r0
 800568e:	1dfb      	adds	r3, r7, #7
 8005690:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005692:	1dfb      	adds	r3, r7, #7
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b25b      	sxtb	r3, r3
 8005698:	0018      	movs	r0, r3
 800569a:	f7ff ff33 	bl	8005504 <__NVIC_EnableIRQ>
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b002      	add	sp, #8
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7ff ffaf 	bl	8005614 <SysTick_Config>
 80056b6:	0003      	movs	r3, r0
}
 80056b8:	0018      	movs	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b002      	add	sp, #8
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c8:	230f      	movs	r3, #15
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2225      	movs	r2, #37	; 0x25
 80056d4:	5c9b      	ldrb	r3, [r3, r2]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d008      	beq.n	80056ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2224      	movs	r2, #36	; 0x24
 80056e6:	2100      	movs	r1, #0
 80056e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e024      	b.n	8005738 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	210e      	movs	r1, #14
 80056fa:	438a      	bics	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2101      	movs	r1, #1
 800570a:	438a      	bics	r2, r1
 800570c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	221c      	movs	r2, #28
 8005714:	401a      	ands	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2101      	movs	r1, #1
 800571c:	4091      	lsls	r1, r2
 800571e:	000a      	movs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2225      	movs	r2, #37	; 0x25
 8005726:	2101      	movs	r1, #1
 8005728:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2224      	movs	r2, #36	; 0x24
 800572e:	2100      	movs	r1, #0
 8005730:	5499      	strb	r1, [r3, r2]

    return status;
 8005732:	230f      	movs	r3, #15
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b004      	add	sp, #16
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005748:	210f      	movs	r1, #15
 800574a:	187b      	adds	r3, r7, r1
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2225      	movs	r2, #37	; 0x25
 8005754:	5c9b      	ldrb	r3, [r3, r2]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d006      	beq.n	800576a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2204      	movs	r2, #4
 8005760:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005762:	187b      	adds	r3, r7, r1
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e02a      	b.n	80057c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	210e      	movs	r1, #14
 8005776:	438a      	bics	r2, r1
 8005778:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2101      	movs	r1, #1
 8005786:	438a      	bics	r2, r1
 8005788:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	221c      	movs	r2, #28
 8005790:	401a      	ands	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2101      	movs	r1, #1
 8005798:	4091      	lsls	r1, r2
 800579a:	000a      	movs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2225      	movs	r2, #37	; 0x25
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2224      	movs	r2, #36	; 0x24
 80057aa:	2100      	movs	r1, #0
 80057ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	0010      	movs	r0, r2
 80057be:	4798      	blx	r3
    }
  }
  return status;
 80057c0:	230f      	movs	r3, #15
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	781b      	ldrb	r3, [r3, #0]
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b004      	add	sp, #16
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80057e6:	e155      	b.n	8005a94 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4091      	lsls	r1, r2
 80057f2:	000a      	movs	r2, r1
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d100      	bne.n	8005800 <HAL_GPIO_Init+0x30>
 80057fe:	e146      	b.n	8005a8e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2203      	movs	r2, #3
 8005806:	4013      	ands	r3, r2
 8005808:	2b01      	cmp	r3, #1
 800580a:	d005      	beq.n	8005818 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2203      	movs	r2, #3
 8005812:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005814:	2b02      	cmp	r3, #2
 8005816:	d130      	bne.n	800587a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	2203      	movs	r2, #3
 8005824:	409a      	lsls	r2, r3
 8005826:	0013      	movs	r3, r2
 8005828:	43da      	mvns	r2, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	0013      	movs	r3, r2
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800584e:	2201      	movs	r2, #1
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	409a      	lsls	r2, r3
 8005854:	0013      	movs	r3, r2
 8005856:	43da      	mvns	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4013      	ands	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	2201      	movs	r2, #1
 8005866:	401a      	ands	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	409a      	lsls	r2, r3
 800586c:	0013      	movs	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2203      	movs	r2, #3
 8005880:	4013      	ands	r3, r2
 8005882:	2b03      	cmp	r3, #3
 8005884:	d017      	beq.n	80058b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	2203      	movs	r2, #3
 8005892:	409a      	lsls	r2, r3
 8005894:	0013      	movs	r3, r2
 8005896:	43da      	mvns	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4013      	ands	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	409a      	lsls	r2, r3
 80058a8:	0013      	movs	r3, r2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2203      	movs	r2, #3
 80058bc:	4013      	ands	r3, r2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d123      	bne.n	800590a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	08da      	lsrs	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3208      	adds	r2, #8
 80058ca:	0092      	lsls	r2, r2, #2
 80058cc:	58d3      	ldr	r3, [r2, r3]
 80058ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2207      	movs	r2, #7
 80058d4:	4013      	ands	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	220f      	movs	r2, #15
 80058da:	409a      	lsls	r2, r3
 80058dc:	0013      	movs	r3, r2
 80058de:	43da      	mvns	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2107      	movs	r1, #7
 80058ee:	400b      	ands	r3, r1
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	409a      	lsls	r2, r3
 80058f4:	0013      	movs	r3, r2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	08da      	lsrs	r2, r3, #3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3208      	adds	r2, #8
 8005904:	0092      	lsls	r2, r2, #2
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2203      	movs	r2, #3
 8005916:	409a      	lsls	r2, r3
 8005918:	0013      	movs	r3, r2
 800591a:	43da      	mvns	r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4013      	ands	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	401a      	ands	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	0013      	movs	r3, r2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	23c0      	movs	r3, #192	; 0xc0
 8005944:	029b      	lsls	r3, r3, #10
 8005946:	4013      	ands	r3, r2
 8005948:	d100      	bne.n	800594c <HAL_GPIO_Init+0x17c>
 800594a:	e0a0      	b.n	8005a8e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800594c:	4b57      	ldr	r3, [pc, #348]	; (8005aac <HAL_GPIO_Init+0x2dc>)
 800594e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005950:	4b56      	ldr	r3, [pc, #344]	; (8005aac <HAL_GPIO_Init+0x2dc>)
 8005952:	2101      	movs	r1, #1
 8005954:	430a      	orrs	r2, r1
 8005956:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005958:	4a55      	ldr	r2, [pc, #340]	; (8005ab0 <HAL_GPIO_Init+0x2e0>)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	089b      	lsrs	r3, r3, #2
 800595e:	3302      	adds	r3, #2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	589b      	ldr	r3, [r3, r2]
 8005964:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2203      	movs	r2, #3
 800596a:	4013      	ands	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	220f      	movs	r2, #15
 8005970:	409a      	lsls	r2, r3
 8005972:	0013      	movs	r3, r2
 8005974:	43da      	mvns	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4013      	ands	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	23a0      	movs	r3, #160	; 0xa0
 8005980:	05db      	lsls	r3, r3, #23
 8005982:	429a      	cmp	r2, r3
 8005984:	d01f      	beq.n	80059c6 <HAL_GPIO_Init+0x1f6>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a4a      	ldr	r2, [pc, #296]	; (8005ab4 <HAL_GPIO_Init+0x2e4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d019      	beq.n	80059c2 <HAL_GPIO_Init+0x1f2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a49      	ldr	r2, [pc, #292]	; (8005ab8 <HAL_GPIO_Init+0x2e8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_GPIO_Init+0x1ee>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a48      	ldr	r2, [pc, #288]	; (8005abc <HAL_GPIO_Init+0x2ec>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00d      	beq.n	80059ba <HAL_GPIO_Init+0x1ea>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a47      	ldr	r2, [pc, #284]	; (8005ac0 <HAL_GPIO_Init+0x2f0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <HAL_GPIO_Init+0x1e6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a46      	ldr	r2, [pc, #280]	; (8005ac4 <HAL_GPIO_Init+0x2f4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_GPIO_Init+0x1e2>
 80059ae:	2305      	movs	r3, #5
 80059b0:	e00a      	b.n	80059c8 <HAL_GPIO_Init+0x1f8>
 80059b2:	2306      	movs	r3, #6
 80059b4:	e008      	b.n	80059c8 <HAL_GPIO_Init+0x1f8>
 80059b6:	2304      	movs	r3, #4
 80059b8:	e006      	b.n	80059c8 <HAL_GPIO_Init+0x1f8>
 80059ba:	2303      	movs	r3, #3
 80059bc:	e004      	b.n	80059c8 <HAL_GPIO_Init+0x1f8>
 80059be:	2302      	movs	r3, #2
 80059c0:	e002      	b.n	80059c8 <HAL_GPIO_Init+0x1f8>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <HAL_GPIO_Init+0x1f8>
 80059c6:	2300      	movs	r3, #0
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	2103      	movs	r1, #3
 80059cc:	400a      	ands	r2, r1
 80059ce:	0092      	lsls	r2, r2, #2
 80059d0:	4093      	lsls	r3, r2
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059d8:	4935      	ldr	r1, [pc, #212]	; (8005ab0 <HAL_GPIO_Init+0x2e0>)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	3302      	adds	r3, #2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059e6:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	43da      	mvns	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4013      	ands	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	2380      	movs	r3, #128	; 0x80
 80059fc:	035b      	lsls	r3, r3, #13
 80059fe:	4013      	ands	r3, r2
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005a10:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	43da      	mvns	r2, r3
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	039b      	lsls	r3, r3, #14
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005a3a:	4b23      	ldr	r3, [pc, #140]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	43da      	mvns	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4013      	ands	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	4013      	ands	r3, r2
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	43da      	mvns	r2, r3
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4013      	ands	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	025b      	lsls	r3, r3, #9
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_GPIO_Init+0x2f8>)
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	3301      	adds	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	40da      	lsrs	r2, r3
 8005a9c:	1e13      	subs	r3, r2, #0
 8005a9e:	d000      	beq.n	8005aa2 <HAL_GPIO_Init+0x2d2>
 8005aa0:	e6a2      	b.n	80057e8 <HAL_GPIO_Init+0x18>
  }
}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b006      	add	sp, #24
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	50000400 	.word	0x50000400
 8005ab8:	50000800 	.word	0x50000800
 8005abc:	50000c00 	.word	0x50000c00
 8005ac0:	50001000 	.word	0x50001000
 8005ac4:	50001c00 	.word	0x50001c00
 8005ac8:	40010400 	.word	0x40010400

08005acc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	000a      	movs	r2, r1
 8005ad6:	1cbb      	adds	r3, r7, #2
 8005ad8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	1cba      	adds	r2, r7, #2
 8005ae0:	8812      	ldrh	r2, [r2, #0]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005ae6:	230f      	movs	r3, #15
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005af0:	230f      	movs	r3, #15
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005af8:	230f      	movs	r3, #15
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	781b      	ldrb	r3, [r3, #0]
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	0008      	movs	r0, r1
 8005b10:	0011      	movs	r1, r2
 8005b12:	1cbb      	adds	r3, r7, #2
 8005b14:	1c02      	adds	r2, r0, #0
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	1c7b      	adds	r3, r7, #1
 8005b1a:	1c0a      	adds	r2, r1, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b1e:	1c7b      	adds	r3, r7, #1
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b26:	1cbb      	adds	r3, r7, #2
 8005b28:	881a      	ldrh	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005b2e:	e003      	b.n	8005b38 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005b30:	1cbb      	adds	r3, r7, #2
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b38:	46c0      	nop			; (mov r8, r8)
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b40:	b5b0      	push	{r4, r5, r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f000 fbbf 	bl	80062d2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b54:	4bc9      	ldr	r3, [pc, #804]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	220c      	movs	r2, #12
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b5e:	4bc7      	ldr	r3, [pc, #796]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	025b      	lsls	r3, r3, #9
 8005b66:	4013      	ands	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4013      	ands	r3, r2
 8005b72:	d100      	bne.n	8005b76 <HAL_RCC_OscConfig+0x36>
 8005b74:	e07e      	b.n	8005c74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d007      	beq.n	8005b8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d112      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x68>
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	025b      	lsls	r3, r3, #9
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d10d      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8c:	4bbb      	ldr	r3, [pc, #748]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	4013      	ands	r3, r2
 8005b96:	d100      	bne.n	8005b9a <HAL_RCC_OscConfig+0x5a>
 8005b98:	e06b      	b.n	8005c72 <HAL_RCC_OscConfig+0x132>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d167      	bne.n	8005c72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f000 fb95 	bl	80062d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	025b      	lsls	r3, r3, #9
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x84>
 8005bb4:	4bb1      	ldr	r3, [pc, #708]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4bb0      	ldr	r3, [pc, #704]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	0249      	lsls	r1, r1, #9
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e027      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	23a0      	movs	r3, #160	; 0xa0
 8005bca:	02db      	lsls	r3, r3, #11
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d10e      	bne.n	8005bee <HAL_RCC_OscConfig+0xae>
 8005bd0:	4baa      	ldr	r3, [pc, #680]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4ba9      	ldr	r3, [pc, #676]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	02c9      	lsls	r1, r1, #11
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	4ba7      	ldr	r3, [pc, #668]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4ba6      	ldr	r3, [pc, #664]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	0249      	lsls	r1, r1, #9
 8005be8:	430a      	orrs	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e012      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bee:	4ba3      	ldr	r3, [pc, #652]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4ba2      	ldr	r3, [pc, #648]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005bf4:	49a2      	ldr	r1, [pc, #648]	; (8005e80 <HAL_RCC_OscConfig+0x340>)
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	4ba0      	ldr	r3, [pc, #640]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	025b      	lsls	r3, r3, #9
 8005c02:	4013      	ands	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4b9c      	ldr	r3, [pc, #624]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b9b      	ldr	r3, [pc, #620]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005c0e:	499d      	ldr	r1, [pc, #628]	; (8005e84 <HAL_RCC_OscConfig+0x344>)
 8005c10:	400a      	ands	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1c:	f7ff fc44 	bl	80054a8 <HAL_GetTick>
 8005c20:	0003      	movs	r3, r0
 8005c22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c24:	e009      	b.n	8005c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c26:	f7ff fc3f 	bl	80054a8 <HAL_GetTick>
 8005c2a:	0002      	movs	r2, r0
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b64      	cmp	r3, #100	; 0x64
 8005c32:	d902      	bls.n	8005c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	f000 fb4c 	bl	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c3a:	4b90      	ldr	r3, [pc, #576]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	4013      	ands	r3, r2
 8005c44:	d0ef      	beq.n	8005c26 <HAL_RCC_OscConfig+0xe6>
 8005c46:	e015      	b.n	8005c74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c48:	f7ff fc2e 	bl	80054a8 <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c52:	f7ff fc29 	bl	80054a8 <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b64      	cmp	r3, #100	; 0x64
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e336      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c64:	4b85      	ldr	r3, [pc, #532]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d1f0      	bne.n	8005c52 <HAL_RCC_OscConfig+0x112>
 8005c70:	e000      	b.n	8005c74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d100      	bne.n	8005c80 <HAL_RCC_OscConfig+0x140>
 8005c7e:	e099      	b.n	8005db4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	2220      	movs	r2, #32
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b7a      	ldr	r3, [pc, #488]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005c94:	2120      	movs	r1, #32
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	4393      	bics	r3, r2
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	d13e      	bne.n	8005d2c <HAL_RCC_OscConfig+0x1ec>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d13b      	bne.n	8005d2c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005cb4:	4b71      	ldr	r3, [pc, #452]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2204      	movs	r2, #4
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x188>
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e304      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc8:	4b6c      	ldr	r3, [pc, #432]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a6e      	ldr	r2, [pc, #440]	; (8005e88 <HAL_RCC_OscConfig+0x348>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	021a      	lsls	r2, r3, #8
 8005cd8:	4b68      	ldr	r3, [pc, #416]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cde:	4b67      	ldr	r3, [pc, #412]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2209      	movs	r2, #9
 8005ce4:	4393      	bics	r3, r2
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	4b64      	ldr	r3, [pc, #400]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cf0:	f000 fc42 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8005cf4:	0001      	movs	r1, r0
 8005cf6:	4b61      	ldr	r3, [pc, #388]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	091b      	lsrs	r3, r3, #4
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	4013      	ands	r3, r2
 8005d00:	4a62      	ldr	r2, [pc, #392]	; (8005e8c <HAL_RCC_OscConfig+0x34c>)
 8005d02:	5cd3      	ldrb	r3, [r2, r3]
 8005d04:	000a      	movs	r2, r1
 8005d06:	40da      	lsrs	r2, r3
 8005d08:	4b61      	ldr	r3, [pc, #388]	; (8005e90 <HAL_RCC_OscConfig+0x350>)
 8005d0a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005d0c:	4b61      	ldr	r3, [pc, #388]	; (8005e94 <HAL_RCC_OscConfig+0x354>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2513      	movs	r5, #19
 8005d12:	197c      	adds	r4, r7, r5
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fb81 	bl	800541c <HAL_InitTick>
 8005d1a:	0003      	movs	r3, r0
 8005d1c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005d1e:	197b      	adds	r3, r7, r5
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d046      	beq.n	8005db4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005d26:	197b      	adds	r3, r7, r5
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	e2d2      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d027      	beq.n	8005d82 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005d32:	4b52      	ldr	r3, [pc, #328]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2209      	movs	r2, #9
 8005d38:	4393      	bics	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	4b4f      	ldr	r3, [pc, #316]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	430a      	orrs	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7ff fbb0 	bl	80054a8 <HAL_GetTick>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d4e:	f7ff fbab 	bl	80054a8 <HAL_GetTick>
 8005d52:	0002      	movs	r2, r0
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e2b8      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d60:	4b46      	ldr	r3, [pc, #280]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2204      	movs	r2, #4
 8005d66:	4013      	ands	r3, r2
 8005d68:	d0f1      	beq.n	8005d4e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d6a:	4b44      	ldr	r3, [pc, #272]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4a46      	ldr	r2, [pc, #280]	; (8005e88 <HAL_RCC_OscConfig+0x348>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	0019      	movs	r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	021a      	lsls	r2, r3, #8
 8005d7a:	4b40      	ldr	r3, [pc, #256]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
 8005d80:	e018      	b.n	8005db4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d82:	4b3e      	ldr	r3, [pc, #248]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b3d      	ldr	r3, [pc, #244]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005d88:	2101      	movs	r1, #1
 8005d8a:	438a      	bics	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7ff fb8b 	bl	80054a8 <HAL_GetTick>
 8005d92:	0003      	movs	r3, r0
 8005d94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d98:	f7ff fb86 	bl	80054a8 <HAL_GetTick>
 8005d9c:	0002      	movs	r2, r0
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e293      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005daa:	4b34      	ldr	r3, [pc, #208]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2204      	movs	r2, #4
 8005db0:	4013      	ands	r3, r2
 8005db2:	d1f1      	bne.n	8005d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2210      	movs	r2, #16
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d100      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x280>
 8005dbe:	e0a2      	b.n	8005f06 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d140      	bne.n	8005e48 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dc6:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d005      	beq.n	8005dde <HAL_RCC_OscConfig+0x29e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e279      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dde:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4a2d      	ldr	r2, [pc, #180]	; (8005e98 <HAL_RCC_OscConfig+0x358>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	0019      	movs	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005df2:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	0a19      	lsrs	r1, r3, #8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	061a      	lsls	r2, r3, #24
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	0b5b      	lsrs	r3, r3, #13
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	2280      	movs	r2, #128	; 0x80
 8005e10:	0212      	lsls	r2, r2, #8
 8005e12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005e14:	4b19      	ldr	r3, [pc, #100]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	210f      	movs	r1, #15
 8005e1c:	400b      	ands	r3, r1
 8005e1e:	491b      	ldr	r1, [pc, #108]	; (8005e8c <HAL_RCC_OscConfig+0x34c>)
 8005e20:	5ccb      	ldrb	r3, [r1, r3]
 8005e22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e24:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <HAL_RCC_OscConfig+0x350>)
 8005e26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005e28:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <HAL_RCC_OscConfig+0x354>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2513      	movs	r5, #19
 8005e2e:	197c      	adds	r4, r7, r5
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7ff faf3 	bl	800541c <HAL_InitTick>
 8005e36:	0003      	movs	r3, r0
 8005e38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005e3a:	197b      	adds	r3, r7, r5
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d061      	beq.n	8005f06 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005e42:	197b      	adds	r3, r7, r5
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	e244      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d040      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_OscConfig+0x33c>)
 8005e56:	2180      	movs	r1, #128	; 0x80
 8005e58:	0049      	lsls	r1, r1, #1
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5e:	f7ff fb23 	bl	80054a8 <HAL_GetTick>
 8005e62:	0003      	movs	r3, r0
 8005e64:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e66:	e019      	b.n	8005e9c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e68:	f7ff fb1e 	bl	80054a8 <HAL_GetTick>
 8005e6c:	0002      	movs	r2, r0
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d912      	bls.n	8005e9c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e22b      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	fffeffff 	.word	0xfffeffff
 8005e84:	fffbffff 	.word	0xfffbffff
 8005e88:	ffffe0ff 	.word	0xffffe0ff
 8005e8c:	0800cb28 	.word	0x0800cb28
 8005e90:	20000000 	.word	0x20000000
 8005e94:	20000010 	.word	0x20000010
 8005e98:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e9c:	4bca      	ldr	r3, [pc, #808]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d0df      	beq.n	8005e68 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ea8:	4bc7      	ldr	r3, [pc, #796]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4ac7      	ldr	r2, [pc, #796]	; (80061cc <HAL_RCC_OscConfig+0x68c>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	0019      	movs	r1, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb6:	4bc4      	ldr	r3, [pc, #784]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ebc:	4bc2      	ldr	r3, [pc, #776]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	0a19      	lsrs	r1, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	061a      	lsls	r2, r3, #24
 8005eca:	4bbf      	ldr	r3, [pc, #764]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
 8005ed0:	e019      	b.n	8005f06 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ed2:	4bbd      	ldr	r3, [pc, #756]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4bbc      	ldr	r3, [pc, #752]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005ed8:	49bd      	ldr	r1, [pc, #756]	; (80061d0 <HAL_RCC_OscConfig+0x690>)
 8005eda:	400a      	ands	r2, r1
 8005edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ede:	f7ff fae3 	bl	80054a8 <HAL_GetTick>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ee8:	f7ff fade 	bl	80054a8 <HAL_GetTick>
 8005eec:	0002      	movs	r2, r0
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e1eb      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005efa:	4bb3      	ldr	r3, [pc, #716]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4013      	ands	r3, r2
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d036      	beq.n	8005f7e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d019      	beq.n	8005f4c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f18:	4bab      	ldr	r3, [pc, #684]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f1c:	4baa      	ldr	r3, [pc, #680]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005f1e:	2101      	movs	r1, #1
 8005f20:	430a      	orrs	r2, r1
 8005f22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f24:	f7ff fac0 	bl	80054a8 <HAL_GetTick>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f2e:	f7ff fabb 	bl	80054a8 <HAL_GetTick>
 8005f32:	0002      	movs	r2, r0
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e1c8      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f40:	4ba1      	ldr	r3, [pc, #644]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	2202      	movs	r2, #2
 8005f46:	4013      	ands	r3, r2
 8005f48:	d0f1      	beq.n	8005f2e <HAL_RCC_OscConfig+0x3ee>
 8005f4a:	e018      	b.n	8005f7e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f4c:	4b9e      	ldr	r3, [pc, #632]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f50:	4b9d      	ldr	r3, [pc, #628]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005f52:	2101      	movs	r1, #1
 8005f54:	438a      	bics	r2, r1
 8005f56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f58:	f7ff faa6 	bl	80054a8 <HAL_GetTick>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f60:	e008      	b.n	8005f74 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f62:	f7ff faa1 	bl	80054a8 <HAL_GetTick>
 8005f66:	0002      	movs	r2, r0
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e1ae      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f74:	4b94      	ldr	r3, [pc, #592]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	2202      	movs	r2, #2
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d1f1      	bne.n	8005f62 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2204      	movs	r2, #4
 8005f84:	4013      	ands	r3, r2
 8005f86:	d100      	bne.n	8005f8a <HAL_RCC_OscConfig+0x44a>
 8005f88:	e0ae      	b.n	80060e8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f8a:	2023      	movs	r0, #35	; 0x23
 8005f8c:	183b      	adds	r3, r7, r0
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f92:	4b8d      	ldr	r3, [pc, #564]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	055b      	lsls	r3, r3, #21
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d109      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f9e:	4b8a      	ldr	r3, [pc, #552]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa2:	4b89      	ldr	r3, [pc, #548]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	0549      	lsls	r1, r1, #21
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005fac:	183b      	adds	r3, r7, r0
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb2:	4b88      	ldr	r3, [pc, #544]	; (80061d4 <HAL_RCC_OscConfig+0x694>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d11a      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fbe:	4b85      	ldr	r3, [pc, #532]	; (80061d4 <HAL_RCC_OscConfig+0x694>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b84      	ldr	r3, [pc, #528]	; (80061d4 <HAL_RCC_OscConfig+0x694>)
 8005fc4:	2180      	movs	r1, #128	; 0x80
 8005fc6:	0049      	lsls	r1, r1, #1
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fcc:	f7ff fa6c 	bl	80054a8 <HAL_GetTick>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd6:	f7ff fa67 	bl	80054a8 <HAL_GetTick>
 8005fda:	0002      	movs	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b64      	cmp	r3, #100	; 0x64
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e174      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe8:	4b7a      	ldr	r3, [pc, #488]	; (80061d4 <HAL_RCC_OscConfig+0x694>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d107      	bne.n	8006010 <HAL_RCC_OscConfig+0x4d0>
 8006000:	4b71      	ldr	r3, [pc, #452]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006004:	4b70      	ldr	r3, [pc, #448]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	0049      	lsls	r1, r1, #1
 800600a:	430a      	orrs	r2, r1
 800600c:	651a      	str	r2, [r3, #80]	; 0x50
 800600e:	e031      	b.n	8006074 <HAL_RCC_OscConfig+0x534>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10c      	bne.n	8006032 <HAL_RCC_OscConfig+0x4f2>
 8006018:	4b6b      	ldr	r3, [pc, #428]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800601a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800601c:	4b6a      	ldr	r3, [pc, #424]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800601e:	496c      	ldr	r1, [pc, #432]	; (80061d0 <HAL_RCC_OscConfig+0x690>)
 8006020:	400a      	ands	r2, r1
 8006022:	651a      	str	r2, [r3, #80]	; 0x50
 8006024:	4b68      	ldr	r3, [pc, #416]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006028:	4b67      	ldr	r3, [pc, #412]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800602a:	496b      	ldr	r1, [pc, #428]	; (80061d8 <HAL_RCC_OscConfig+0x698>)
 800602c:	400a      	ands	r2, r1
 800602e:	651a      	str	r2, [r3, #80]	; 0x50
 8006030:	e020      	b.n	8006074 <HAL_RCC_OscConfig+0x534>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	23a0      	movs	r3, #160	; 0xa0
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	429a      	cmp	r2, r3
 800603c:	d10e      	bne.n	800605c <HAL_RCC_OscConfig+0x51c>
 800603e:	4b62      	ldr	r3, [pc, #392]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006042:	4b61      	ldr	r3, [pc, #388]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006044:	2180      	movs	r1, #128	; 0x80
 8006046:	00c9      	lsls	r1, r1, #3
 8006048:	430a      	orrs	r2, r1
 800604a:	651a      	str	r2, [r3, #80]	; 0x50
 800604c:	4b5e      	ldr	r3, [pc, #376]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800604e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006050:	4b5d      	ldr	r3, [pc, #372]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	0049      	lsls	r1, r1, #1
 8006056:	430a      	orrs	r2, r1
 8006058:	651a      	str	r2, [r3, #80]	; 0x50
 800605a:	e00b      	b.n	8006074 <HAL_RCC_OscConfig+0x534>
 800605c:	4b5a      	ldr	r3, [pc, #360]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800605e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006060:	4b59      	ldr	r3, [pc, #356]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006062:	495b      	ldr	r1, [pc, #364]	; (80061d0 <HAL_RCC_OscConfig+0x690>)
 8006064:	400a      	ands	r2, r1
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
 8006068:	4b57      	ldr	r3, [pc, #348]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800606a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800606c:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800606e:	495a      	ldr	r1, [pc, #360]	; (80061d8 <HAL_RCC_OscConfig+0x698>)
 8006070:	400a      	ands	r2, r1
 8006072:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800607c:	f7ff fa14 	bl	80054a8 <HAL_GetTick>
 8006080:	0003      	movs	r3, r0
 8006082:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006084:	e009      	b.n	800609a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006086:	f7ff fa0f 	bl	80054a8 <HAL_GetTick>
 800608a:	0002      	movs	r2, r0
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	4a52      	ldr	r2, [pc, #328]	; (80061dc <HAL_RCC_OscConfig+0x69c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e11b      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800609a:	4b4b      	ldr	r3, [pc, #300]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800609c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609e:	2380      	movs	r3, #128	; 0x80
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4013      	ands	r3, r2
 80060a4:	d0ef      	beq.n	8006086 <HAL_RCC_OscConfig+0x546>
 80060a6:	e014      	b.n	80060d2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a8:	f7ff f9fe 	bl	80054a8 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060b0:	e009      	b.n	80060c6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b2:	f7ff f9f9 	bl	80054a8 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	4a47      	ldr	r2, [pc, #284]	; (80061dc <HAL_RCC_OscConfig+0x69c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e105      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060c6:	4b40      	ldr	r3, [pc, #256]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 80060c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4013      	ands	r3, r2
 80060d0:	d1ef      	bne.n	80060b2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060d2:	2323      	movs	r3, #35	; 0x23
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d105      	bne.n	80060e8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060dc:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 80060de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e0:	4b39      	ldr	r3, [pc, #228]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 80060e2:	493f      	ldr	r1, [pc, #252]	; (80061e0 <HAL_RCC_OscConfig+0x6a0>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2220      	movs	r2, #32
 80060ee:	4013      	ands	r3, r2
 80060f0:	d049      	beq.n	8006186 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d026      	beq.n	8006148 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80060fa:	4b33      	ldr	r3, [pc, #204]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	4b32      	ldr	r3, [pc, #200]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006100:	2101      	movs	r1, #1
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]
 8006106:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 8006108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800610a:	4b2f      	ldr	r3, [pc, #188]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800610c:	2101      	movs	r1, #1
 800610e:	430a      	orrs	r2, r1
 8006110:	635a      	str	r2, [r3, #52]	; 0x34
 8006112:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <HAL_RCC_OscConfig+0x6a4>)
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	4b33      	ldr	r3, [pc, #204]	; (80061e4 <HAL_RCC_OscConfig+0x6a4>)
 8006118:	2180      	movs	r1, #128	; 0x80
 800611a:	0189      	lsls	r1, r1, #6
 800611c:	430a      	orrs	r2, r1
 800611e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7ff f9c2 	bl	80054a8 <HAL_GetTick>
 8006124:	0003      	movs	r3, r0
 8006126:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800612a:	f7ff f9bd 	bl	80054a8 <HAL_GetTick>
 800612e:	0002      	movs	r2, r0
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e0ca      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800613c:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2202      	movs	r2, #2
 8006142:	4013      	ands	r3, r2
 8006144:	d0f1      	beq.n	800612a <HAL_RCC_OscConfig+0x5ea>
 8006146:	e01e      	b.n	8006186 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006148:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800614e:	2101      	movs	r1, #1
 8006150:	438a      	bics	r2, r1
 8006152:	609a      	str	r2, [r3, #8]
 8006154:	4b23      	ldr	r3, [pc, #140]	; (80061e4 <HAL_RCC_OscConfig+0x6a4>)
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <HAL_RCC_OscConfig+0x6a4>)
 800615a:	4923      	ldr	r1, [pc, #140]	; (80061e8 <HAL_RCC_OscConfig+0x6a8>)
 800615c:	400a      	ands	r2, r1
 800615e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006160:	f7ff f9a2 	bl	80054a8 <HAL_GetTick>
 8006164:	0003      	movs	r3, r0
 8006166:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800616a:	f7ff f99d 	bl	80054a8 <HAL_GetTick>
 800616e:	0002      	movs	r2, r0
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e0aa      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800617c:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2202      	movs	r2, #2
 8006182:	4013      	ands	r3, r2
 8006184:	d1f1      	bne.n	800616a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d100      	bne.n	8006190 <HAL_RCC_OscConfig+0x650>
 800618e:	e09f      	b.n	80062d0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b0c      	cmp	r3, #12
 8006194:	d100      	bne.n	8006198 <HAL_RCC_OscConfig+0x658>
 8006196:	e078      	b.n	800628a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	2b02      	cmp	r3, #2
 800619e:	d159      	bne.n	8006254 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a0:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <HAL_RCC_OscConfig+0x688>)
 80061a6:	4911      	ldr	r1, [pc, #68]	; (80061ec <HAL_RCC_OscConfig+0x6ac>)
 80061a8:	400a      	ands	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7ff f97c 	bl	80054a8 <HAL_GetTick>
 80061b0:	0003      	movs	r3, r0
 80061b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061b4:	e01c      	b.n	80061f0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b6:	f7ff f977 	bl	80054a8 <HAL_GetTick>
 80061ba:	0002      	movs	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d915      	bls.n	80061f0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e084      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
 80061c8:	40021000 	.word	0x40021000
 80061cc:	ffff1fff 	.word	0xffff1fff
 80061d0:	fffffeff 	.word	0xfffffeff
 80061d4:	40007000 	.word	0x40007000
 80061d8:	fffffbff 	.word	0xfffffbff
 80061dc:	00001388 	.word	0x00001388
 80061e0:	efffffff 	.word	0xefffffff
 80061e4:	40010000 	.word	0x40010000
 80061e8:	ffffdfff 	.word	0xffffdfff
 80061ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061f0:	4b3a      	ldr	r3, [pc, #232]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	049b      	lsls	r3, r3, #18
 80061f8:	4013      	ands	r3, r2
 80061fa:	d1dc      	bne.n	80061b6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061fc:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	4a37      	ldr	r2, [pc, #220]	; (80062e0 <HAL_RCC_OscConfig+0x7a0>)
 8006202:	4013      	ands	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	431a      	orrs	r2, r3
 8006216:	4b31      	ldr	r3, [pc, #196]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 8006218:	430a      	orrs	r2, r1
 800621a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800621c:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	0449      	lsls	r1, r1, #17
 8006226:	430a      	orrs	r2, r1
 8006228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622a:	f7ff f93d 	bl	80054a8 <HAL_GetTick>
 800622e:	0003      	movs	r3, r0
 8006230:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006234:	f7ff f938 	bl	80054a8 <HAL_GetTick>
 8006238:	0002      	movs	r2, r0
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e045      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006246:	4b25      	ldr	r3, [pc, #148]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	2380      	movs	r3, #128	; 0x80
 800624c:	049b      	lsls	r3, r3, #18
 800624e:	4013      	ands	r3, r2
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x6f4>
 8006252:	e03d      	b.n	80062d0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006254:	4b21      	ldr	r3, [pc, #132]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	4b20      	ldr	r3, [pc, #128]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 800625a:	4922      	ldr	r1, [pc, #136]	; (80062e4 <HAL_RCC_OscConfig+0x7a4>)
 800625c:	400a      	ands	r2, r1
 800625e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7ff f922 	bl	80054a8 <HAL_GetTick>
 8006264:	0003      	movs	r3, r0
 8006266:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800626a:	f7ff f91d 	bl	80054a8 <HAL_GetTick>
 800626e:	0002      	movs	r2, r0
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e02a      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800627c:	4b17      	ldr	r3, [pc, #92]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	2380      	movs	r3, #128	; 0x80
 8006282:	049b      	lsls	r3, r3, #18
 8006284:	4013      	ands	r3, r2
 8006286:	d1f0      	bne.n	800626a <HAL_RCC_OscConfig+0x72a>
 8006288:	e022      	b.n	80062d0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e01d      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006296:	4b11      	ldr	r3, [pc, #68]	; (80062dc <HAL_RCC_OscConfig+0x79c>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	025b      	lsls	r3, r3, #9
 80062a2:	401a      	ands	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d10f      	bne.n	80062cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	23f0      	movs	r3, #240	; 0xf0
 80062b0:	039b      	lsls	r3, r3, #14
 80062b2:	401a      	ands	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d107      	bne.n	80062cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	23c0      	movs	r3, #192	; 0xc0
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	401a      	ands	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b00a      	add	sp, #40	; 0x28
 80062d8:	bdb0      	pop	{r4, r5, r7, pc}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	40021000 	.word	0x40021000
 80062e0:	ff02ffff 	.word	0xff02ffff
 80062e4:	feffffff 	.word	0xfeffffff

080062e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e8:	b5b0      	push	{r4, r5, r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e128      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062fc:	4b96      	ldr	r3, [pc, #600]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	4013      	ands	r3, r2
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d91e      	bls.n	8006348 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630a:	4b93      	ldr	r3, [pc, #588]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2201      	movs	r2, #1
 8006310:	4393      	bics	r3, r2
 8006312:	0019      	movs	r1, r3
 8006314:	4b90      	ldr	r3, [pc, #576]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800631c:	f7ff f8c4 	bl	80054a8 <HAL_GetTick>
 8006320:	0003      	movs	r3, r0
 8006322:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006324:	e009      	b.n	800633a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006326:	f7ff f8bf 	bl	80054a8 <HAL_GetTick>
 800632a:	0002      	movs	r2, r0
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	4a8a      	ldr	r2, [pc, #552]	; (800655c <HAL_RCC_ClockConfig+0x274>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e109      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800633a:	4b87      	ldr	r3, [pc, #540]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2201      	movs	r2, #1
 8006340:	4013      	ands	r3, r2
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d1ee      	bne.n	8006326 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2202      	movs	r2, #2
 800634e:	4013      	ands	r3, r2
 8006350:	d009      	beq.n	8006366 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006352:	4b83      	ldr	r3, [pc, #524]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	22f0      	movs	r2, #240	; 0xf0
 8006358:	4393      	bics	r3, r2
 800635a:	0019      	movs	r1, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	4b7f      	ldr	r3, [pc, #508]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006362:	430a      	orrs	r2, r1
 8006364:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2201      	movs	r2, #1
 800636c:	4013      	ands	r3, r2
 800636e:	d100      	bne.n	8006372 <HAL_RCC_ClockConfig+0x8a>
 8006370:	e089      	b.n	8006486 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d107      	bne.n	800638a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800637a:	4b79      	ldr	r3, [pc, #484]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	4013      	ands	r3, r2
 8006384:	d120      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e0e1      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d107      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006392:	4b73      	ldr	r3, [pc, #460]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	049b      	lsls	r3, r3, #18
 800639a:	4013      	ands	r3, r2
 800639c:	d114      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e0d5      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d106      	bne.n	80063b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063aa:	4b6d      	ldr	r3, [pc, #436]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2204      	movs	r2, #4
 80063b0:	4013      	ands	r3, r2
 80063b2:	d109      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0ca      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80063b8:	4b69      	ldr	r3, [pc, #420]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4013      	ands	r3, r2
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0c2      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063c8:	4b65      	ldr	r3, [pc, #404]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2203      	movs	r2, #3
 80063ce:	4393      	bics	r3, r2
 80063d0:	0019      	movs	r1, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	4b62      	ldr	r3, [pc, #392]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80063d8:	430a      	orrs	r2, r1
 80063da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063dc:	f7ff f864 	bl	80054a8 <HAL_GetTick>
 80063e0:	0003      	movs	r3, r0
 80063e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d111      	bne.n	8006410 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063ec:	e009      	b.n	8006402 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ee:	f7ff f85b 	bl	80054a8 <HAL_GetTick>
 80063f2:	0002      	movs	r2, r0
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	4a58      	ldr	r2, [pc, #352]	; (800655c <HAL_RCC_ClockConfig+0x274>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e0a5      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006402:	4b57      	ldr	r3, [pc, #348]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	220c      	movs	r2, #12
 8006408:	4013      	ands	r3, r2
 800640a:	2b08      	cmp	r3, #8
 800640c:	d1ef      	bne.n	80063ee <HAL_RCC_ClockConfig+0x106>
 800640e:	e03a      	b.n	8006486 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d111      	bne.n	800643c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006418:	e009      	b.n	800642e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800641a:	f7ff f845 	bl	80054a8 <HAL_GetTick>
 800641e:	0002      	movs	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	4a4d      	ldr	r2, [pc, #308]	; (800655c <HAL_RCC_ClockConfig+0x274>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e08f      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800642e:	4b4c      	ldr	r3, [pc, #304]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	220c      	movs	r2, #12
 8006434:	4013      	ands	r3, r2
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d1ef      	bne.n	800641a <HAL_RCC_ClockConfig+0x132>
 800643a:	e024      	b.n	8006486 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d11b      	bne.n	800647c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006444:	e009      	b.n	800645a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006446:	f7ff f82f 	bl	80054a8 <HAL_GetTick>
 800644a:	0002      	movs	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	4a42      	ldr	r2, [pc, #264]	; (800655c <HAL_RCC_ClockConfig+0x274>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e079      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800645a:	4b41      	ldr	r3, [pc, #260]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	220c      	movs	r2, #12
 8006460:	4013      	ands	r3, r2
 8006462:	2b04      	cmp	r3, #4
 8006464:	d1ef      	bne.n	8006446 <HAL_RCC_ClockConfig+0x15e>
 8006466:	e00e      	b.n	8006486 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006468:	f7ff f81e 	bl	80054a8 <HAL_GetTick>
 800646c:	0002      	movs	r2, r0
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	4a3a      	ldr	r2, [pc, #232]	; (800655c <HAL_RCC_ClockConfig+0x274>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d901      	bls.n	800647c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e068      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800647c:	4b38      	ldr	r3, [pc, #224]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	220c      	movs	r2, #12
 8006482:	4013      	ands	r3, r2
 8006484:	d1f0      	bne.n	8006468 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006486:	4b34      	ldr	r3, [pc, #208]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2201      	movs	r2, #1
 800648c:	4013      	ands	r3, r2
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d21e      	bcs.n	80064d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006494:	4b30      	ldr	r3, [pc, #192]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2201      	movs	r2, #1
 800649a:	4393      	bics	r3, r2
 800649c:	0019      	movs	r1, r3
 800649e:	4b2e      	ldr	r3, [pc, #184]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064a6:	f7fe ffff 	bl	80054a8 <HAL_GetTick>
 80064aa:	0003      	movs	r3, r0
 80064ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ae:	e009      	b.n	80064c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b0:	f7fe fffa 	bl	80054a8 <HAL_GetTick>
 80064b4:	0002      	movs	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	4a28      	ldr	r2, [pc, #160]	; (800655c <HAL_RCC_ClockConfig+0x274>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e044      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c4:	4b24      	ldr	r3, [pc, #144]	; (8006558 <HAL_RCC_ClockConfig+0x270>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	4013      	ands	r3, r2
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d1ee      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2204      	movs	r2, #4
 80064d8:	4013      	ands	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064dc:	4b20      	ldr	r3, [pc, #128]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4a20      	ldr	r2, [pc, #128]	; (8006564 <HAL_RCC_ClockConfig+0x27c>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	0019      	movs	r1, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80064ec:	430a      	orrs	r2, r1
 80064ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2208      	movs	r2, #8
 80064f6:	4013      	ands	r3, r2
 80064f8:	d00a      	beq.n	8006510 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064fa:	4b19      	ldr	r3, [pc, #100]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <HAL_RCC_ClockConfig+0x280>)
 8006500:	4013      	ands	r3, r2
 8006502:	0019      	movs	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	00da      	lsls	r2, r3, #3
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 800650c:	430a      	orrs	r2, r1
 800650e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006510:	f000 f832 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8006514:	0001      	movs	r1, r0
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	220f      	movs	r2, #15
 800651e:	4013      	ands	r3, r2
 8006520:	4a12      	ldr	r2, [pc, #72]	; (800656c <HAL_RCC_ClockConfig+0x284>)
 8006522:	5cd3      	ldrb	r3, [r2, r3]
 8006524:	000a      	movs	r2, r1
 8006526:	40da      	lsrs	r2, r3
 8006528:	4b11      	ldr	r3, [pc, #68]	; (8006570 <HAL_RCC_ClockConfig+0x288>)
 800652a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800652c:	4b11      	ldr	r3, [pc, #68]	; (8006574 <HAL_RCC_ClockConfig+0x28c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	250b      	movs	r5, #11
 8006532:	197c      	adds	r4, r7, r5
 8006534:	0018      	movs	r0, r3
 8006536:	f7fe ff71 	bl	800541c <HAL_InitTick>
 800653a:	0003      	movs	r3, r0
 800653c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800653e:	197b      	adds	r3, r7, r5
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006546:	197b      	adds	r3, r7, r5
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	e000      	b.n	800654e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b004      	add	sp, #16
 8006554:	bdb0      	pop	{r4, r5, r7, pc}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	40022000 	.word	0x40022000
 800655c:	00001388 	.word	0x00001388
 8006560:	40021000 	.word	0x40021000
 8006564:	fffff8ff 	.word	0xfffff8ff
 8006568:	ffffc7ff 	.word	0xffffc7ff
 800656c:	0800cb28 	.word	0x0800cb28
 8006570:	20000000 	.word	0x20000000
 8006574:	20000010 	.word	0x20000010

08006578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006578:	b5b0      	push	{r4, r5, r7, lr}
 800657a:	b08e      	sub	sp, #56	; 0x38
 800657c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800657e:	4b4c      	ldr	r3, [pc, #304]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006586:	230c      	movs	r3, #12
 8006588:	4013      	ands	r3, r2
 800658a:	2b0c      	cmp	r3, #12
 800658c:	d014      	beq.n	80065b8 <HAL_RCC_GetSysClockFreq+0x40>
 800658e:	d900      	bls.n	8006592 <HAL_RCC_GetSysClockFreq+0x1a>
 8006590:	e07b      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x112>
 8006592:	2b04      	cmp	r3, #4
 8006594:	d002      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0x24>
 8006596:	2b08      	cmp	r3, #8
 8006598:	d00b      	beq.n	80065b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800659a:	e076      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800659c:	4b44      	ldr	r3, [pc, #272]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2210      	movs	r2, #16
 80065a2:	4013      	ands	r3, r2
 80065a4:	d002      	beq.n	80065ac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80065a6:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80065aa:	e07c      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80065ac:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x140>)
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065b0:	e079      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065b2:	4b42      	ldr	r3, [pc, #264]	; (80066bc <HAL_RCC_GetSysClockFreq+0x144>)
 80065b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065b6:	e076      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	0c9a      	lsrs	r2, r3, #18
 80065bc:	230f      	movs	r3, #15
 80065be:	401a      	ands	r2, r3
 80065c0:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x148>)
 80065c2:	5c9b      	ldrb	r3, [r3, r2]
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	0d9a      	lsrs	r2, r3, #22
 80065ca:	2303      	movs	r3, #3
 80065cc:	4013      	ands	r3, r2
 80065ce:	3301      	adds	r3, #1
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065d2:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	2380      	movs	r3, #128	; 0x80
 80065d8:	025b      	lsls	r3, r3, #9
 80065da:	4013      	ands	r3, r2
 80065dc:	d01a      	beq.n	8006614 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	4a35      	ldr	r2, [pc, #212]	; (80066bc <HAL_RCC_GetSysClockFreq+0x144>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	69b8      	ldr	r0, [r7, #24]
 80065ec:	69f9      	ldr	r1, [r7, #28]
 80065ee:	f7f9 ff85 	bl	80004fc <__aeabi_lmul>
 80065f2:	0002      	movs	r2, r0
 80065f4:	000b      	movs	r3, r1
 80065f6:	0010      	movs	r0, r2
 80065f8:	0019      	movs	r1, r3
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f7f9 ff59 	bl	80004bc <__aeabi_uldivmod>
 800660a:	0002      	movs	r2, r0
 800660c:	000b      	movs	r3, r1
 800660e:	0013      	movs	r3, r2
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
 8006612:	e037      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006614:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2210      	movs	r2, #16
 800661a:	4013      	ands	r3, r2
 800661c:	d01a      	beq.n	8006654 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	4a23      	ldr	r2, [pc, #140]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006628:	2300      	movs	r3, #0
 800662a:	68b8      	ldr	r0, [r7, #8]
 800662c:	68f9      	ldr	r1, [r7, #12]
 800662e:	f7f9 ff65 	bl	80004fc <__aeabi_lmul>
 8006632:	0002      	movs	r2, r0
 8006634:	000b      	movs	r3, r1
 8006636:	0010      	movs	r0, r2
 8006638:	0019      	movs	r1, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f7f9 ff39 	bl	80004bc <__aeabi_uldivmod>
 800664a:	0002      	movs	r2, r0
 800664c:	000b      	movs	r3, r1
 800664e:	0013      	movs	r3, r2
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
 8006652:	e017      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	0018      	movs	r0, r3
 8006658:	2300      	movs	r3, #0
 800665a:	0019      	movs	r1, r3
 800665c:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x140>)
 800665e:	2300      	movs	r3, #0
 8006660:	f7f9 ff4c 	bl	80004fc <__aeabi_lmul>
 8006664:	0002      	movs	r2, r0
 8006666:	000b      	movs	r3, r1
 8006668:	0010      	movs	r0, r2
 800666a:	0019      	movs	r1, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	001c      	movs	r4, r3
 8006670:	2300      	movs	r3, #0
 8006672:	001d      	movs	r5, r3
 8006674:	0022      	movs	r2, r4
 8006676:	002b      	movs	r3, r5
 8006678:	f7f9 ff20 	bl	80004bc <__aeabi_uldivmod>
 800667c:	0002      	movs	r2, r0
 800667e:	000b      	movs	r3, r1
 8006680:	0013      	movs	r3, r2
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006688:	e00d      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	0b5b      	lsrs	r3, r3, #13
 8006690:	2207      	movs	r2, #7
 8006692:	4013      	ands	r3, r2
 8006694:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	3301      	adds	r3, #1
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	0212      	lsls	r2, r2, #8
 800669e:	409a      	lsls	r2, r3
 80066a0:	0013      	movs	r3, r2
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80066a4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80066a8:	0018      	movs	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b00e      	add	sp, #56	; 0x38
 80066ae:	bdb0      	pop	{r4, r5, r7, pc}
 80066b0:	40021000 	.word	0x40021000
 80066b4:	003d0900 	.word	0x003d0900
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	007a1200 	.word	0x007a1200
 80066c0:	0800cb40 	.word	0x0800cb40

080066c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c8:	4b02      	ldr	r3, [pc, #8]	; (80066d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80066ca:	681b      	ldr	r3, [r3, #0]
}
 80066cc:	0018      	movs	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	20000000 	.word	0x20000000

080066d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066dc:	f7ff fff2 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 80066e0:	0001      	movs	r1, r0
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	2207      	movs	r2, #7
 80066ea:	4013      	ands	r3, r2
 80066ec:	4a04      	ldr	r2, [pc, #16]	; (8006700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066ee:	5cd3      	ldrb	r3, [r2, r3]
 80066f0:	40d9      	lsrs	r1, r3
 80066f2:	000b      	movs	r3, r1
}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	40021000 	.word	0x40021000
 8006700:	0800cb38 	.word	0x0800cb38

08006704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006708:	f7ff ffdc 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 800670c:	0001      	movs	r1, r0
 800670e:	4b06      	ldr	r3, [pc, #24]	; (8006728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	0adb      	lsrs	r3, r3, #11
 8006714:	2207      	movs	r2, #7
 8006716:	4013      	ands	r3, r2
 8006718:	4a04      	ldr	r2, [pc, #16]	; (800672c <HAL_RCC_GetPCLK2Freq+0x28>)
 800671a:	5cd3      	ldrb	r3, [r2, r3]
 800671c:	40d9      	lsrs	r1, r3
 800671e:	000b      	movs	r3, r1
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	40021000 	.word	0x40021000
 800672c:	0800cb38 	.word	0x0800cb38

08006730 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006738:	2317      	movs	r3, #23
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2220      	movs	r2, #32
 8006746:	4013      	ands	r3, r2
 8006748:	d106      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	4013      	ands	r3, r2
 8006754:	d100      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006756:	e104      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006758:	4bb9      	ldr	r3, [pc, #740]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800675a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	055b      	lsls	r3, r3, #21
 8006760:	4013      	ands	r3, r2
 8006762:	d10a      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006764:	4bb6      	ldr	r3, [pc, #728]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006768:	4bb5      	ldr	r3, [pc, #724]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800676a:	2180      	movs	r1, #128	; 0x80
 800676c:	0549      	lsls	r1, r1, #21
 800676e:	430a      	orrs	r2, r1
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006772:	2317      	movs	r3, #23
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	2201      	movs	r2, #1
 8006778:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800677a:	4bb2      	ldr	r3, [pc, #712]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	4013      	ands	r3, r2
 8006784:	d11a      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006786:	4baf      	ldr	r3, [pc, #700]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4bae      	ldr	r3, [pc, #696]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	0049      	lsls	r1, r1, #1
 8006790:	430a      	orrs	r2, r1
 8006792:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006794:	f7fe fe88 	bl	80054a8 <HAL_GetTick>
 8006798:	0003      	movs	r3, r0
 800679a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679c:	e008      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800679e:	f7fe fe83 	bl	80054a8 <HAL_GetTick>
 80067a2:	0002      	movs	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b64      	cmp	r3, #100	; 0x64
 80067aa:	d901      	bls.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e143      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b0:	4ba4      	ldr	r3, [pc, #656]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	4013      	ands	r3, r2
 80067ba:	d0f0      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80067bc:	4ba0      	ldr	r3, [pc, #640]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	23c0      	movs	r3, #192	; 0xc0
 80067c2:	039b      	lsls	r3, r3, #14
 80067c4:	4013      	ands	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	23c0      	movs	r3, #192	; 0xc0
 80067ce:	039b      	lsls	r3, r3, #14
 80067d0:	4013      	ands	r3, r2
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d107      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	23c0      	movs	r3, #192	; 0xc0
 80067de:	039b      	lsls	r3, r3, #14
 80067e0:	4013      	ands	r3, r2
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d013      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	23c0      	movs	r3, #192	; 0xc0
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	401a      	ands	r2, r3
 80067f2:	23c0      	movs	r3, #192	; 0xc0
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d10a      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067fa:	4b91      	ldr	r3, [pc, #580]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	401a      	ands	r2, r3
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	429a      	cmp	r2, r3
 800680a:	d101      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e113      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006810:	4b8b      	ldr	r3, [pc, #556]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006814:	23c0      	movs	r3, #192	; 0xc0
 8006816:	029b      	lsls	r3, r3, #10
 8006818:	4013      	ands	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d049      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	23c0      	movs	r3, #192	; 0xc0
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	4013      	ands	r3, r2
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	429a      	cmp	r2, r3
 8006830:	d004      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2220      	movs	r2, #32
 8006838:	4013      	ands	r3, r2
 800683a:	d10d      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	23c0      	movs	r3, #192	; 0xc0
 8006842:	029b      	lsls	r3, r3, #10
 8006844:	4013      	ands	r3, r2
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	429a      	cmp	r2, r3
 800684a:	d034      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	4013      	ands	r3, r2
 8006856:	d02e      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006858:	4b79      	ldr	r3, [pc, #484]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800685a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685c:	4a7a      	ldr	r2, [pc, #488]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800685e:	4013      	ands	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006862:	4b77      	ldr	r3, [pc, #476]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006866:	4b76      	ldr	r3, [pc, #472]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	0309      	lsls	r1, r1, #12
 800686c:	430a      	orrs	r2, r1
 800686e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006870:	4b73      	ldr	r3, [pc, #460]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006874:	4b72      	ldr	r3, [pc, #456]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006876:	4975      	ldr	r1, [pc, #468]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006878:	400a      	ands	r2, r1
 800687a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800687c:	4b70      	ldr	r3, [pc, #448]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	4013      	ands	r3, r2
 800688a:	d014      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fe fe0c 	bl	80054a8 <HAL_GetTick>
 8006890:	0003      	movs	r3, r0
 8006892:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006894:	e009      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006896:	f7fe fe07 	bl	80054a8 <HAL_GetTick>
 800689a:	0002      	movs	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	4a6b      	ldr	r2, [pc, #428]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e0c6      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068aa:	4b65      	ldr	r3, [pc, #404]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068ae:	2380      	movs	r3, #128	; 0x80
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4013      	ands	r3, r2
 80068b4:	d0ef      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4013      	ands	r3, r2
 80068c0:	d01f      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	23c0      	movs	r3, #192	; 0xc0
 80068c8:	029b      	lsls	r3, r3, #10
 80068ca:	401a      	ands	r2, r3
 80068cc:	23c0      	movs	r3, #192	; 0xc0
 80068ce:	029b      	lsls	r3, r3, #10
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d10c      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80068d4:	4b5a      	ldr	r3, [pc, #360]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a5e      	ldr	r2, [pc, #376]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80068da:	4013      	ands	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	23c0      	movs	r3, #192	; 0xc0
 80068e4:	039b      	lsls	r3, r3, #14
 80068e6:	401a      	ands	r2, r3
 80068e8:	4b55      	ldr	r3, [pc, #340]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068ea:	430a      	orrs	r2, r1
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	4b54      	ldr	r3, [pc, #336]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	23c0      	movs	r3, #192	; 0xc0
 80068f8:	029b      	lsls	r3, r3, #10
 80068fa:	401a      	ands	r2, r3
 80068fc:	4b50      	ldr	r3, [pc, #320]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068fe:	430a      	orrs	r2, r1
 8006900:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2220      	movs	r2, #32
 8006908:	4013      	ands	r3, r2
 800690a:	d01f      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	23c0      	movs	r3, #192	; 0xc0
 8006912:	029b      	lsls	r3, r3, #10
 8006914:	401a      	ands	r2, r3
 8006916:	23c0      	movs	r3, #192	; 0xc0
 8006918:	029b      	lsls	r3, r3, #10
 800691a:	429a      	cmp	r2, r3
 800691c:	d10c      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800691e:	4b48      	ldr	r3, [pc, #288]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a4c      	ldr	r2, [pc, #304]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006924:	4013      	ands	r3, r2
 8006926:	0019      	movs	r1, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	23c0      	movs	r3, #192	; 0xc0
 800692e:	039b      	lsls	r3, r3, #14
 8006930:	401a      	ands	r2, r3
 8006932:	4b43      	ldr	r3, [pc, #268]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006934:	430a      	orrs	r2, r1
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800693a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	23c0      	movs	r3, #192	; 0xc0
 8006942:	029b      	lsls	r3, r3, #10
 8006944:	401a      	ands	r2, r3
 8006946:	4b3e      	ldr	r3, [pc, #248]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006948:	430a      	orrs	r2, r1
 800694a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800694c:	2317      	movs	r3, #23
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006956:	4b3a      	ldr	r3, [pc, #232]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695a:	4b39      	ldr	r3, [pc, #228]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800695c:	493e      	ldr	r1, [pc, #248]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800695e:	400a      	ands	r2, r1
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2201      	movs	r2, #1
 8006968:	4013      	ands	r3, r2
 800696a:	d009      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800696c:	4b34      	ldr	r3, [pc, #208]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800696e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006970:	2203      	movs	r2, #3
 8006972:	4393      	bics	r3, r2
 8006974:	0019      	movs	r1, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800697c:	430a      	orrs	r2, r1
 800697e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2202      	movs	r2, #2
 8006986:	4013      	ands	r3, r2
 8006988:	d009      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800698a:	4b2d      	ldr	r3, [pc, #180]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800698c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698e:	220c      	movs	r2, #12
 8006990:	4393      	bics	r3, r2
 8006992:	0019      	movs	r1, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	4b29      	ldr	r3, [pc, #164]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800699a:	430a      	orrs	r2, r1
 800699c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2204      	movs	r2, #4
 80069a4:	4013      	ands	r3, r2
 80069a6:	d009      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069a8:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ac:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80069ae:	4013      	ands	r3, r2
 80069b0:	0019      	movs	r1, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695a      	ldr	r2, [r3, #20]
 80069b6:	4b22      	ldr	r3, [pc, #136]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069b8:	430a      	orrs	r2, r1
 80069ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2208      	movs	r2, #8
 80069c2:	4013      	ands	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069c6:	4b1e      	ldr	r3, [pc, #120]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ca:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	0019      	movs	r1, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069d6:	430a      	orrs	r2, r1
 80069d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	4013      	ands	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069e6:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ea:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	0019      	movs	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069f6:	430a      	orrs	r2, r1
 80069f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2240      	movs	r2, #64	; 0x40
 8006a00:	4013      	ands	r3, r2
 8006a02:	d009      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a08:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	0019      	movs	r1, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a12:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a14:	430a      	orrs	r2, r1
 8006a16:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2280      	movs	r2, #128	; 0x80
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a26:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1a      	ldr	r2, [r3, #32]
 8006a30:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a32:	430a      	orrs	r2, r1
 8006a34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b006      	add	sp, #24
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40021000 	.word	0x40021000
 8006a44:	40007000 	.word	0x40007000
 8006a48:	fffcffff 	.word	0xfffcffff
 8006a4c:	fff7ffff 	.word	0xfff7ffff
 8006a50:	00001388 	.word	0x00001388
 8006a54:	ffcfffff 	.word	0xffcfffff
 8006a58:	efffffff 	.word	0xefffffff
 8006a5c:	fffff3ff 	.word	0xfffff3ff
 8006a60:	ffffcfff 	.word	0xffffcfff
 8006a64:	fbffffff 	.word	0xfbffffff
 8006a68:	fff3ffff 	.word	0xfff3ffff

08006a6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a6c:	b5b0      	push	{r4, r5, r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a74:	230f      	movs	r3, #15
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	2201      	movs	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e088      	b.n	8006b98 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2221      	movs	r2, #33	; 0x21
 8006a8a:	5c9b      	ldrb	r3, [r3, r2]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	2100      	movs	r1, #0
 8006a98:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7fc f8bb 	bl	8002c18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2221      	movs	r2, #33	; 0x21
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	2b10      	cmp	r3, #16
 8006ab6:	d05f      	beq.n	8006b78 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	22ca      	movs	r2, #202	; 0xca
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2253      	movs	r2, #83	; 0x53
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ac8:	250f      	movs	r5, #15
 8006aca:	197c      	adds	r4, r7, r5
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f000 fc62 	bl	8007398 <RTC_EnterInitMode>
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8006ad8:	0028      	movs	r0, r5
 8006ada:	183b      	adds	r3, r7, r0
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d12c      	bne.n	8006b3c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	492c      	ldr	r1, [pc, #176]	; (8006ba0 <HAL_RTC_Init+0x134>)
 8006aee:	400a      	ands	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6899      	ldr	r1, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	68d2      	ldr	r2, [r2, #12]
 8006b18:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6919      	ldr	r1, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	041a      	lsls	r2, r3, #16
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b2e:	183c      	adds	r4, r7, r0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	0018      	movs	r0, r3
 8006b34:	f000 fc74 	bl	8007420 <RTC_ExitInitMode>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8006b3c:	230f      	movs	r3, #15
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d113      	bne.n	8006b6e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2103      	movs	r1, #3
 8006b52:	438a      	bics	r2, r1
 8006b54:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	22ff      	movs	r2, #255	; 0xff
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24
 8006b76:	e003      	b.n	8006b80 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006b78:	230f      	movs	r3, #15
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8006b80:	230f      	movs	r3, #15
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2221      	movs	r2, #33	; 0x21
 8006b8e:	2101      	movs	r1, #1
 8006b90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006b92:	230f      	movs	r3, #15
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	781b      	ldrb	r3, [r3, #0]
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b004      	add	sp, #16
 8006b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba0:	ff8fffbf 	.word	0xff8fffbf

08006ba4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ba4:	b5b0      	push	{r4, r5, r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	5c9b      	ldrb	r3, [r3, r2]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RTC_SetTime+0x1e>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e092      	b.n	8006ce8 <HAL_RTC_SetTime+0x144>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2221      	movs	r2, #33	; 0x21
 8006bce:	2102      	movs	r1, #2
 8006bd0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d125      	bne.n	8006c24 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2240      	movs	r2, #64	; 0x40
 8006be0:	4013      	ands	r3, r2
 8006be2:	d102      	bne.n	8006bea <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 fc40 	bl	8007474 <RTC_ByteToBcd2>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	785b      	ldrb	r3, [r3, #1]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f000 fc39 	bl	8007474 <RTC_ByteToBcd2>
 8006c02:	0003      	movs	r3, r0
 8006c04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c06:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	789b      	ldrb	r3, [r3, #2]
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f000 fc31 	bl	8007474 <RTC_ByteToBcd2>
 8006c12:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c14:	0022      	movs	r2, r4
 8006c16:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	78db      	ldrb	r3, [r3, #3]
 8006c1c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e017      	b.n	8006c54 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2240      	movs	r2, #64	; 0x40
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d102      	bne.n	8006c36 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c42:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	22ca      	movs	r2, #202	; 0xca
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2253      	movs	r2, #83	; 0x53
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c64:	2513      	movs	r5, #19
 8006c66:	197c      	adds	r4, r7, r5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f000 fb94 	bl	8007398 <RTC_EnterInitMode>
 8006c70:	0003      	movs	r3, r0
 8006c72:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006c74:	0028      	movs	r0, r5
 8006c76:	183b      	adds	r3, r7, r0
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d120      	bne.n	8006cc0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	491a      	ldr	r1, [pc, #104]	; (8006cf0 <HAL_RTC_SetTime+0x14c>)
 8006c86:	400a      	ands	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4917      	ldr	r1, [pc, #92]	; (8006cf4 <HAL_RTC_SetTime+0x150>)
 8006c96:	400a      	ands	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6899      	ldr	r1, [r3, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cb2:	183c      	adds	r4, r7, r0
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 fbb2 	bl	8007420 <RTC_ExitInitMode>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8006cc0:	2313      	movs	r3, #19
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2221      	movs	r2, #33	; 0x21
 8006cce:	2101      	movs	r1, #1
 8006cd0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	22ff      	movs	r2, #255	; 0xff
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	2100      	movs	r1, #0
 8006ce0:	5499      	strb	r1, [r3, r2]

  return status;
 8006ce2:	2313      	movs	r3, #19
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	781b      	ldrb	r3, [r3, #0]
}
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b006      	add	sp, #24
 8006cee:	bdb0      	pop	{r4, r5, r7, pc}
 8006cf0:	007f7f7f 	.word	0x007f7f7f
 8006cf4:	fffbffff 	.word	0xfffbffff

08006cf8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	045b      	lsls	r3, r3, #17
 8006d1a:	0c5a      	lsrs	r2, r3, #17
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a22      	ldr	r2, [pc, #136]	; (8006db0 <HAL_RTC_GetTime+0xb8>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	0c1b      	lsrs	r3, r3, #16
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	223f      	movs	r2, #63	; 0x3f
 8006d34:	4013      	ands	r3, r2
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	227f      	movs	r2, #127	; 0x7f
 8006d44:	4013      	ands	r3, r2
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	227f      	movs	r2, #127	; 0x7f
 8006d52:	4013      	ands	r3, r2
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	0d9b      	lsrs	r3, r3, #22
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2201      	movs	r2, #1
 8006d62:	4013      	ands	r3, r2
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11a      	bne.n	8006da6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	0018      	movs	r0, r3
 8006d76:	f000 fb9e 	bl	80074b6 <RTC_Bcd2ToByte>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	0018      	movs	r0, r3
 8006d88:	f000 fb95 	bl	80074b6 <RTC_Bcd2ToByte>
 8006d8c:	0003      	movs	r3, r0
 8006d8e:	001a      	movs	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	789b      	ldrb	r3, [r3, #2]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 fb8c 	bl	80074b6 <RTC_Bcd2ToByte>
 8006d9e:	0003      	movs	r3, r0
 8006da0:	001a      	movs	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b006      	add	sp, #24
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	007f7f7f 	.word	0x007f7f7f

08006db4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006db4:	b5b0      	push	{r4, r5, r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	5c9b      	ldrb	r3, [r3, r2]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RTC_SetDate+0x1e>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e07e      	b.n	8006ed0 <HAL_RTC_SetDate+0x11c>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2221      	movs	r2, #33	; 0x21
 8006dde:	2102      	movs	r1, #2
 8006de0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10e      	bne.n	8006e06 <HAL_RTC_SetDate+0x52>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	001a      	movs	r2, r3
 8006dee:	2310      	movs	r3, #16
 8006df0:	4013      	ands	r3, r2
 8006df2:	d008      	beq.n	8006e06 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2210      	movs	r2, #16
 8006dfa:	4393      	bics	r3, r2
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	330a      	adds	r3, #10
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11c      	bne.n	8006e46 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	78db      	ldrb	r3, [r3, #3]
 8006e10:	0018      	movs	r0, r3
 8006e12:	f000 fb2f 	bl	8007474 <RTC_ByteToBcd2>
 8006e16:	0003      	movs	r3, r0
 8006e18:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f000 fb28 	bl	8007474 <RTC_ByteToBcd2>
 8006e24:	0003      	movs	r3, r0
 8006e26:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e28:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	789b      	ldrb	r3, [r3, #2]
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f000 fb20 	bl	8007474 <RTC_ByteToBcd2>
 8006e34:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e36:	0022      	movs	r2, r4
 8006e38:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	e00e      	b.n	8006e64 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	78db      	ldrb	r3, [r3, #3]
 8006e4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e52:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	22ca      	movs	r2, #202	; 0xca
 8006e6a:	625a      	str	r2, [r3, #36]	; 0x24
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2253      	movs	r2, #83	; 0x53
 8006e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e74:	2513      	movs	r5, #19
 8006e76:	197c      	adds	r4, r7, r5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	f000 fa8c 	bl	8007398 <RTC_EnterInitMode>
 8006e80:	0003      	movs	r3, r0
 8006e82:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006e84:	0028      	movs	r0, r5
 8006e86:	183b      	adds	r3, r7, r0
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4910      	ldr	r1, [pc, #64]	; (8006ed8 <HAL_RTC_SetDate+0x124>)
 8006e96:	400a      	ands	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e9a:	183c      	adds	r4, r7, r0
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f000 fabe 	bl	8007420 <RTC_ExitInitMode>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8006ea8:	2313      	movs	r3, #19
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2221      	movs	r2, #33	; 0x21
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	22ff      	movs	r2, #255	; 0xff
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	5499      	strb	r1, [r3, r2]

  return status;
 8006eca:	2313      	movs	r3, #19
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	781b      	ldrb	r3, [r3, #0]
}
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b006      	add	sp, #24
 8006ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ed8:	00ffff3f 	.word	0x00ffff3f

08006edc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4a21      	ldr	r2, [pc, #132]	; (8006f78 <HAL_RTC_GetDate+0x9c>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	0c1b      	lsrs	r3, r3, #16
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	0a1b      	lsrs	r3, r3, #8
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	221f      	movs	r2, #31
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	223f      	movs	r2, #63	; 0x3f
 8006f18:	4013      	ands	r3, r2
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	0b5b      	lsrs	r3, r3, #13
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2207      	movs	r2, #7
 8006f28:	4013      	ands	r3, r2
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d11a      	bne.n	8006f6c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	78db      	ldrb	r3, [r3, #3]
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 fabb 	bl	80074b6 <RTC_Bcd2ToByte>
 8006f40:	0003      	movs	r3, r0
 8006f42:	001a      	movs	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f000 fab2 	bl	80074b6 <RTC_Bcd2ToByte>
 8006f52:	0003      	movs	r3, r0
 8006f54:	001a      	movs	r2, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	789b      	ldrb	r3, [r3, #2]
 8006f5e:	0018      	movs	r0, r3
 8006f60:	f000 faa9 	bl	80074b6 <RTC_Bcd2ToByte>
 8006f64:	0003      	movs	r3, r0
 8006f66:	001a      	movs	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	0018      	movs	r0, r3
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b006      	add	sp, #24
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	00ffff3f 	.word	0x00ffff3f

08006f7c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b089      	sub	sp, #36	; 0x24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	5c9b      	ldrb	r3, [r3, r2]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RTC_SetAlarm+0x26>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e120      	b.n	80071e4 <HAL_RTC_SetAlarm+0x268>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2221      	movs	r2, #33	; 0x21
 8006fae:	2102      	movs	r1, #2
 8006fb0:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d136      	bne.n	8007026 <HAL_RTC_SetAlarm+0xaa>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	2240      	movs	r2, #64	; 0x40
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d102      	bne.n	8006fca <HAL_RTC_SetAlarm+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f000 fa50 	bl	8007474 <RTC_ByteToBcd2>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f000 fa49 	bl	8007474 <RTC_ByteToBcd2>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006fe6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	789b      	ldrb	r3, [r3, #2]
 8006fec:	0018      	movs	r0, r3
 8006fee:	f000 fa41 	bl	8007474 <RTC_ByteToBcd2>
 8006ff2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ff4:	0022      	movs	r2, r4
 8006ff6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	78db      	ldrb	r3, [r3, #3]
 8006ffc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006ffe:	431a      	orrs	r2, r3
 8007000:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2220      	movs	r2, #32
 8007006:	5c9b      	ldrb	r3, [r3, r2]
 8007008:	0018      	movs	r0, r3
 800700a:	f000 fa33 	bl	8007474 <RTC_ByteToBcd2>
 800700e:	0003      	movs	r3, r0
 8007010:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007012:	0022      	movs	r2, r4
 8007014:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800701a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007020:	4313      	orrs	r3, r2
 8007022:	61fb      	str	r3, [r7, #28]
 8007024:	e022      	b.n	800706c <HAL_RTC_SetAlarm+0xf0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2240      	movs	r2, #64	; 0x40
 800702e:	4013      	ands	r3, r2
 8007030:	d102      	bne.n	8007038 <HAL_RTC_SetAlarm+0xbc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007044:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800704a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	78db      	ldrb	r3, [r3, #3]
 8007050:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007052:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2120      	movs	r1, #32
 8007058:	5c5b      	ldrb	r3, [r3, r1]
 800705a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800705c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007062:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007068:	4313      	orrs	r3, r2
 800706a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	22ca      	movs	r2, #202	; 0xca
 800707e:	625a      	str	r2, [r3, #36]	; 0x24
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2253      	movs	r2, #83	; 0x53
 8007086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800708c:	2380      	movs	r3, #128	; 0x80
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	429a      	cmp	r2, r3
 8007092:	d14d      	bne.n	8007130 <HAL_RTC_SetAlarm+0x1b4>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4953      	ldr	r1, [pc, #332]	; (80071ec <HAL_RTC_SetAlarm+0x270>)
 80070a0:	400a      	ands	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4950      	ldr	r1, [pc, #320]	; (80071f0 <HAL_RTC_SetAlarm+0x274>)
 80070b0:	400a      	ands	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	22ff      	movs	r2, #255	; 0xff
 80070bc:	401a      	ands	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	494c      	ldr	r1, [pc, #304]	; (80071f4 <HAL_RTC_SetAlarm+0x278>)
 80070c4:	430a      	orrs	r2, r1
 80070c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070c8:	f7fe f9ee 	bl	80054a8 <HAL_GetTick>
 80070cc:	0003      	movs	r3, r0
 80070ce:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80070d0:	e016      	b.n	8007100 <HAL_RTC_SetAlarm+0x184>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070d2:	f7fe f9e9 	bl	80054a8 <HAL_GetTick>
 80070d6:	0002      	movs	r2, r0
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	23fa      	movs	r3, #250	; 0xfa
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d90d      	bls.n	8007100 <HAL_RTC_SetAlarm+0x184>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	22ff      	movs	r2, #255	; 0xff
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2221      	movs	r2, #33	; 0x21
 80070f0:	2103      	movs	r1, #3
 80070f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	2100      	movs	r1, #0
 80070fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e071      	b.n	80071e4 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	4013      	ands	r3, r2
 800710a:	d0e2      	beq.n	80070d2 <HAL_RTC_SetAlarm+0x156>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	0049      	lsls	r1, r1, #1
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	e04c      	b.n	80071ca <HAL_RTC_SetAlarm+0x24e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	492f      	ldr	r1, [pc, #188]	; (80071f8 <HAL_RTC_SetAlarm+0x27c>)
 800713c:	400a      	ands	r2, r1
 800713e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	492c      	ldr	r1, [pc, #176]	; (80071fc <HAL_RTC_SetAlarm+0x280>)
 800714c:	400a      	ands	r2, r1
 800714e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	22ff      	movs	r2, #255	; 0xff
 8007158:	401a      	ands	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4928      	ldr	r1, [pc, #160]	; (8007200 <HAL_RTC_SetAlarm+0x284>)
 8007160:	430a      	orrs	r2, r1
 8007162:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007164:	f7fe f9a0 	bl	80054a8 <HAL_GetTick>
 8007168:	0003      	movs	r3, r0
 800716a:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800716c:	e016      	b.n	800719c <HAL_RTC_SetAlarm+0x220>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800716e:	f7fe f99b 	bl	80054a8 <HAL_GetTick>
 8007172:	0002      	movs	r2, r0
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	23fa      	movs	r3, #250	; 0xfa
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	429a      	cmp	r2, r3
 800717e:	d90d      	bls.n	800719c <HAL_RTC_SetAlarm+0x220>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	22ff      	movs	r2, #255	; 0xff
 8007186:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2221      	movs	r2, #33	; 0x21
 800718c:	2103      	movs	r1, #3
 800718e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	2100      	movs	r1, #0
 8007196:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e023      	b.n	80071e4 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2202      	movs	r2, #2
 80071a4:	4013      	ands	r3, r2
 80071a6:	d0e2      	beq.n	800716e <HAL_RTC_SetAlarm+0x1f2>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2180      	movs	r1, #128	; 0x80
 80071c4:	0089      	lsls	r1, r1, #2
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	22ff      	movs	r2, #255	; 0xff
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2221      	movs	r2, #33	; 0x21
 80071d6:	2101      	movs	r1, #1
 80071d8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	2100      	movs	r1, #0
 80071e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b009      	add	sp, #36	; 0x24
 80071ea:	bd90      	pop	{r4, r7, pc}
 80071ec:	fffffeff 	.word	0xfffffeff
 80071f0:	ffffefff 	.word	0xffffefff
 80071f4:	fffffe7f 	.word	0xfffffe7f
 80071f8:	fffffdff 	.word	0xfffffdff
 80071fc:	ffffdfff 	.word	0xffffdfff
 8007200:	fffffd7f 	.word	0xfffffd7f

08007204 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	5c9b      	ldrb	r3, [r3, r2]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_RTC_DeactivateAlarm+0x1c>
 800721c:	2302      	movs	r3, #2
 800721e:	e086      	b.n	800732e <HAL_RTC_DeactivateAlarm+0x12a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	2101      	movs	r1, #1
 8007226:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2221      	movs	r2, #33	; 0x21
 800722c:	2102      	movs	r1, #2
 800722e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	22ca      	movs	r2, #202	; 0xca
 8007236:	625a      	str	r2, [r3, #36]	; 0x24
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2253      	movs	r2, #83	; 0x53
 800723e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	2380      	movs	r3, #128	; 0x80
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	429a      	cmp	r2, r3
 8007248:	d132      	bne.n	80072b0 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4938      	ldr	r1, [pc, #224]	; (8007338 <HAL_RTC_DeactivateAlarm+0x134>)
 8007256:	400a      	ands	r2, r1
 8007258:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4935      	ldr	r1, [pc, #212]	; (800733c <HAL_RTC_DeactivateAlarm+0x138>)
 8007266:	400a      	ands	r2, r1
 8007268:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800726a:	f7fe f91d 	bl	80054a8 <HAL_GetTick>
 800726e:	0003      	movs	r3, r0
 8007270:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007272:	e016      	b.n	80072a2 <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007274:	f7fe f918 	bl	80054a8 <HAL_GetTick>
 8007278:	0002      	movs	r2, r0
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	1ad2      	subs	r2, r2, r3
 800727e:	23fa      	movs	r3, #250	; 0xfa
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	429a      	cmp	r2, r3
 8007284:	d90d      	bls.n	80072a2 <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	22ff      	movs	r2, #255	; 0xff
 800728c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2221      	movs	r2, #33	; 0x21
 8007292:	2103      	movs	r1, #3
 8007294:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	2100      	movs	r1, #0
 800729c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e045      	b.n	800732e <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	4013      	ands	r3, r2
 80072ac:	d0e2      	beq.n	8007274 <HAL_RTC_DeactivateAlarm+0x70>
 80072ae:	e031      	b.n	8007314 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4921      	ldr	r1, [pc, #132]	; (8007340 <HAL_RTC_DeactivateAlarm+0x13c>)
 80072bc:	400a      	ands	r2, r1
 80072be:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	491e      	ldr	r1, [pc, #120]	; (8007344 <HAL_RTC_DeactivateAlarm+0x140>)
 80072cc:	400a      	ands	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072d0:	f7fe f8ea 	bl	80054a8 <HAL_GetTick>
 80072d4:	0003      	movs	r3, r0
 80072d6:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80072d8:	e016      	b.n	8007308 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072da:	f7fe f8e5 	bl	80054a8 <HAL_GetTick>
 80072de:	0002      	movs	r2, r0
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	23fa      	movs	r3, #250	; 0xfa
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d90d      	bls.n	8007308 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	22ff      	movs	r2, #255	; 0xff
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2221      	movs	r2, #33	; 0x21
 80072f8:	2103      	movs	r1, #3
 80072fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	2100      	movs	r1, #0
 8007302:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e012      	b.n	800732e <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2202      	movs	r2, #2
 8007310:	4013      	ands	r3, r2
 8007312:	d0e2      	beq.n	80072da <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	22ff      	movs	r2, #255	; 0xff
 800731a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2221      	movs	r2, #33	; 0x21
 8007320:	2101      	movs	r1, #1
 8007322:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	2100      	movs	r1, #0
 800732a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	0018      	movs	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	b004      	add	sp, #16
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	fffffeff 	.word	0xfffffeff
 800733c:	ffffefff 	.word	0xffffefff
 8007340:	fffffdff 	.word	0xfffffdff
 8007344:	ffffdfff 	.word	0xffffdfff

08007348 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <HAL_RTC_WaitForSynchro+0x4c>)
 800735a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800735c:	f7fe f8a4 	bl	80054a8 <HAL_GetTick>
 8007360:	0003      	movs	r3, r0
 8007362:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007364:	e00a      	b.n	800737c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007366:	f7fe f89f 	bl	80054a8 <HAL_GetTick>
 800736a:	0002      	movs	r2, r0
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	23fa      	movs	r3, #250	; 0xfa
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	429a      	cmp	r2, r3
 8007376:	d901      	bls.n	800737c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e006      	b.n	800738a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	4013      	ands	r3, r2
 8007386:	d0ee      	beq.n	8007366 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b004      	add	sp, #16
 8007390:	bd80      	pop	{r7, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	0001ff5f 	.word	0x0001ff5f

08007398 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80073a4:	230f      	movs	r3, #15
 80073a6:	18fb      	adds	r3, r7, r3
 80073a8:	2200      	movs	r2, #0
 80073aa:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2240      	movs	r2, #64	; 0x40
 80073b4:	4013      	ands	r3, r2
 80073b6:	d12c      	bne.n	8007412 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2180      	movs	r1, #128	; 0x80
 80073c4:	430a      	orrs	r2, r1
 80073c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073c8:	f7fe f86e 	bl	80054a8 <HAL_GetTick>
 80073cc:	0003      	movs	r3, r0
 80073ce:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80073d0:	e014      	b.n	80073fc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073d2:	f7fe f869 	bl	80054a8 <HAL_GetTick>
 80073d6:	0002      	movs	r2, r0
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	1ad2      	subs	r2, r2, r3
 80073dc:	200f      	movs	r0, #15
 80073de:	183b      	adds	r3, r7, r0
 80073e0:	1839      	adds	r1, r7, r0
 80073e2:	7809      	ldrb	r1, [r1, #0]
 80073e4:	7019      	strb	r1, [r3, #0]
 80073e6:	23fa      	movs	r3, #250	; 0xfa
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d906      	bls.n	80073fc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2221      	movs	r2, #33	; 0x21
 80073f2:	2104      	movs	r1, #4
 80073f4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80073f6:	183b      	adds	r3, r7, r0
 80073f8:	2201      	movs	r2, #1
 80073fa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	2240      	movs	r2, #64	; 0x40
 8007404:	4013      	ands	r3, r2
 8007406:	d104      	bne.n	8007412 <RTC_EnterInitMode+0x7a>
 8007408:	230f      	movs	r3, #15
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d1df      	bne.n	80073d2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8007412:	230f      	movs	r3, #15
 8007414:	18fb      	adds	r3, r7, r3
 8007416:	781b      	ldrb	r3, [r3, #0]
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b004      	add	sp, #16
 800741e:	bd80      	pop	{r7, pc}

08007420 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007428:	240f      	movs	r4, #15
 800742a:	193b      	adds	r3, r7, r4
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2180      	movs	r1, #128	; 0x80
 800743c:	438a      	bics	r2, r1
 800743e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2220      	movs	r2, #32
 8007448:	4013      	ands	r3, r2
 800744a:	d10c      	bne.n	8007466 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0018      	movs	r0, r3
 8007450:	f7ff ff7a 	bl	8007348 <HAL_RTC_WaitForSynchro>
 8007454:	1e03      	subs	r3, r0, #0
 8007456:	d006      	beq.n	8007466 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2221      	movs	r2, #33	; 0x21
 800745c:	2104      	movs	r1, #4
 800745e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8007460:	193b      	adds	r3, r7, r4
 8007462:	2201      	movs	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8007466:	230f      	movs	r3, #15
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	781b      	ldrb	r3, [r3, #0]
}
 800746c:	0018      	movs	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	b005      	add	sp, #20
 8007472:	bd90      	pop	{r4, r7, pc}

08007474 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	0002      	movs	r2, r0
 800747c:	1dfb      	adds	r3, r7, #7
 800747e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007484:	e007      	b.n	8007496 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3301      	adds	r3, #1
 800748a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800748c:	1dfb      	adds	r3, r7, #7
 800748e:	1dfa      	adds	r2, r7, #7
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	3a0a      	subs	r2, #10
 8007494:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8007496:	1dfb      	adds	r3, r7, #7
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b09      	cmp	r3, #9
 800749c:	d8f3      	bhi.n	8007486 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	1dfb      	adds	r3, r7, #7
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b2db      	uxtb	r3, r3
}
 80074ae:	0018      	movs	r0, r3
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b004      	add	sp, #16
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	0002      	movs	r2, r0
 80074be:	1dfb      	adds	r3, r7, #7
 80074c0:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80074c6:	1dfb      	adds	r3, r7, #7
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	091b      	lsrs	r3, r3, #4
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	001a      	movs	r2, r3
 80074d0:	0013      	movs	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	189b      	adds	r3, r3, r2
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	1dfb      	adds	r3, r7, #7
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	210f      	movs	r1, #15
 80074e4:	400b      	ands	r3, r1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	18d3      	adds	r3, r2, r3
 80074ea:	b2db      	uxtb	r3, r3
}
 80074ec:	0018      	movs	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b004      	add	sp, #16
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e032      	b.n	800756c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2239      	movs	r2, #57	; 0x39
 800750a:	5c9b      	ldrb	r3, [r3, r2]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d107      	bne.n	8007522 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2238      	movs	r2, #56	; 0x38
 8007516:	2100      	movs	r1, #0
 8007518:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0018      	movs	r0, r3
 800751e:	f7fb fb93 	bl	8002c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2239      	movs	r2, #57	; 0x39
 8007526:	2102      	movs	r1, #2
 8007528:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3304      	adds	r3, #4
 8007532:	0019      	movs	r1, r3
 8007534:	0010      	movs	r0, r2
 8007536:	f000 fa95 	bl	8007a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	223e      	movs	r2, #62	; 0x3e
 800753e:	2101      	movs	r1, #1
 8007540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	223a      	movs	r2, #58	; 0x3a
 8007546:	2101      	movs	r1, #1
 8007548:	5499      	strb	r1, [r3, r2]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	223b      	movs	r2, #59	; 0x3b
 800754e:	2101      	movs	r1, #1
 8007550:	5499      	strb	r1, [r3, r2]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	223c      	movs	r2, #60	; 0x3c
 8007556:	2101      	movs	r1, #1
 8007558:	5499      	strb	r1, [r3, r2]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	223d      	movs	r2, #61	; 0x3d
 800755e:	2101      	movs	r1, #1
 8007560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2239      	movs	r2, #57	; 0x39
 8007566:	2101      	movs	r1, #1
 8007568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	0018      	movs	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	b002      	add	sp, #8
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2239      	movs	r2, #57	; 0x39
 8007580:	5c9b      	ldrb	r3, [r3, r2]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d001      	beq.n	800758c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e033      	b.n	80075f4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2239      	movs	r2, #57	; 0x39
 8007590:	2102      	movs	r1, #2
 8007592:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	05db      	lsls	r3, r3, #23
 800759c:	429a      	cmp	r2, r3
 800759e:	d00e      	beq.n	80075be <HAL_TIM_Base_Start+0x4a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a15      	ldr	r2, [pc, #84]	; (80075fc <HAL_TIM_Base_Start+0x88>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d009      	beq.n	80075be <HAL_TIM_Base_Start+0x4a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a14      	ldr	r2, [pc, #80]	; (8007600 <HAL_TIM_Base_Start+0x8c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d004      	beq.n	80075be <HAL_TIM_Base_Start+0x4a>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a12      	ldr	r2, [pc, #72]	; (8007604 <HAL_TIM_Base_Start+0x90>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d111      	bne.n	80075e2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2207      	movs	r2, #7
 80075c6:	4013      	ands	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d010      	beq.n	80075f2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2101      	movs	r1, #1
 80075dc:	430a      	orrs	r2, r1
 80075de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	e007      	b.n	80075f2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2101      	movs	r1, #1
 80075ee:	430a      	orrs	r2, r1
 80075f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	0018      	movs	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b004      	add	sp, #16
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40000400 	.word	0x40000400
 8007600:	40010800 	.word	0x40010800
 8007604:	40011400 	.word	0x40011400

08007608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2239      	movs	r2, #57	; 0x39
 8007614:	5c9b      	ldrb	r3, [r3, r2]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	d001      	beq.n	8007620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e03b      	b.n	8007698 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2239      	movs	r2, #57	; 0x39
 8007624:	2102      	movs	r1, #2
 8007626:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2101      	movs	r1, #1
 8007634:	430a      	orrs	r2, r1
 8007636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	05db      	lsls	r3, r3, #23
 8007640:	429a      	cmp	r2, r3
 8007642:	d00e      	beq.n	8007662 <HAL_TIM_Base_Start_IT+0x5a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <HAL_TIM_Base_Start_IT+0x98>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIM_Base_Start_IT+0x5a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a14      	ldr	r2, [pc, #80]	; (80076a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIM_Base_Start_IT+0x5a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a12      	ldr	r2, [pc, #72]	; (80076a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d111      	bne.n	8007686 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2207      	movs	r2, #7
 800766a:	4013      	ands	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d010      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2101      	movs	r1, #1
 8007680:	430a      	orrs	r2, r1
 8007682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	e007      	b.n	8007696 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2101      	movs	r1, #1
 8007692:	430a      	orrs	r2, r1
 8007694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	0018      	movs	r0, r3
 800769a:	46bd      	mov	sp, r7
 800769c:	b004      	add	sp, #16
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40010800 	.word	0x40010800
 80076a8:	40011400 	.word	0x40011400

080076ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2202      	movs	r2, #2
 80076bc:	4013      	ands	r3, r2
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d124      	bne.n	800770c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2202      	movs	r2, #2
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d11d      	bne.n	800770c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2203      	movs	r2, #3
 80076d6:	4252      	negs	r2, r2
 80076d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2203      	movs	r2, #3
 80076e8:	4013      	ands	r3, r2
 80076ea:	d004      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	0018      	movs	r0, r3
 80076f0:	f000 f9a0 	bl	8007a34 <HAL_TIM_IC_CaptureCallback>
 80076f4:	e007      	b.n	8007706 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f000 f993 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	0018      	movs	r0, r3
 8007702:	f000 f99f 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2204      	movs	r2, #4
 8007714:	4013      	ands	r3, r2
 8007716:	2b04      	cmp	r3, #4
 8007718:	d125      	bne.n	8007766 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2204      	movs	r2, #4
 8007722:	4013      	ands	r3, r2
 8007724:	2b04      	cmp	r3, #4
 8007726:	d11e      	bne.n	8007766 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2205      	movs	r2, #5
 800772e:	4252      	negs	r2, r2
 8007730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	23c0      	movs	r3, #192	; 0xc0
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4013      	ands	r3, r2
 8007744:	d004      	beq.n	8007750 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	0018      	movs	r0, r3
 800774a:	f000 f973 	bl	8007a34 <HAL_TIM_IC_CaptureCallback>
 800774e:	e007      	b.n	8007760 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	0018      	movs	r0, r3
 8007754:	f000 f966 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0018      	movs	r0, r3
 800775c:	f000 f972 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2208      	movs	r2, #8
 800776e:	4013      	ands	r3, r2
 8007770:	2b08      	cmp	r3, #8
 8007772:	d124      	bne.n	80077be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2208      	movs	r2, #8
 800777c:	4013      	ands	r3, r2
 800777e:	2b08      	cmp	r3, #8
 8007780:	d11d      	bne.n	80077be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2209      	movs	r2, #9
 8007788:	4252      	negs	r2, r2
 800778a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2204      	movs	r2, #4
 8007790:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	2203      	movs	r2, #3
 800779a:	4013      	ands	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	0018      	movs	r0, r3
 80077a2:	f000 f947 	bl	8007a34 <HAL_TIM_IC_CaptureCallback>
 80077a6:	e007      	b.n	80077b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	0018      	movs	r0, r3
 80077ac:	f000 f93a 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	0018      	movs	r0, r3
 80077b4:	f000 f946 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2210      	movs	r2, #16
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d125      	bne.n	8007818 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2210      	movs	r2, #16
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d11e      	bne.n	8007818 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2211      	movs	r2, #17
 80077e0:	4252      	negs	r2, r2
 80077e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2208      	movs	r2, #8
 80077e8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	23c0      	movs	r3, #192	; 0xc0
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4013      	ands	r3, r2
 80077f6:	d004      	beq.n	8007802 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	0018      	movs	r0, r3
 80077fc:	f000 f91a 	bl	8007a34 <HAL_TIM_IC_CaptureCallback>
 8007800:	e007      	b.n	8007812 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0018      	movs	r0, r3
 8007806:	f000 f90d 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	0018      	movs	r0, r3
 800780e:	f000 f919 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2201      	movs	r2, #1
 8007820:	4013      	ands	r3, r2
 8007822:	2b01      	cmp	r3, #1
 8007824:	d10f      	bne.n	8007846 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	4013      	ands	r3, r2
 8007830:	2b01      	cmp	r3, #1
 8007832:	d108      	bne.n	8007846 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2202      	movs	r2, #2
 800783a:	4252      	negs	r2, r2
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	0018      	movs	r0, r3
 8007842:	f7fa fe19 	bl	8002478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2240      	movs	r2, #64	; 0x40
 800784e:	4013      	ands	r3, r2
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d10f      	bne.n	8007874 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2240      	movs	r2, #64	; 0x40
 800785c:	4013      	ands	r3, r2
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d108      	bne.n	8007874 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2241      	movs	r2, #65	; 0x41
 8007868:	4252      	negs	r2, r2
 800786a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	0018      	movs	r0, r3
 8007870:	f000 f8f0 	bl	8007a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b002      	add	sp, #8
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007886:	230f      	movs	r3, #15
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2238      	movs	r2, #56	; 0x38
 8007892:	5c9b      	ldrb	r3, [r3, r2]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <HAL_TIM_ConfigClockSource+0x20>
 8007898:	2302      	movs	r3, #2
 800789a:	e0bc      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x19a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2238      	movs	r2, #56	; 0x38
 80078a0:	2101      	movs	r1, #1
 80078a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2239      	movs	r2, #57	; 0x39
 80078a8:	2102      	movs	r1, #2
 80078aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2277      	movs	r2, #119	; 0x77
 80078b8:	4393      	bics	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4a58      	ldr	r2, [pc, #352]	; (8007a20 <HAL_TIM_ConfigClockSource+0x1a4>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2280      	movs	r2, #128	; 0x80
 80078d2:	0192      	lsls	r2, r2, #6
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d040      	beq.n	800795a <HAL_TIM_ConfigClockSource+0xde>
 80078d8:	2280      	movs	r2, #128	; 0x80
 80078da:	0192      	lsls	r2, r2, #6
 80078dc:	4293      	cmp	r3, r2
 80078de:	d900      	bls.n	80078e2 <HAL_TIM_ConfigClockSource+0x66>
 80078e0:	e088      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	0152      	lsls	r2, r2, #5
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d100      	bne.n	80078ec <HAL_TIM_ConfigClockSource+0x70>
 80078ea:	e088      	b.n	80079fe <HAL_TIM_ConfigClockSource+0x182>
 80078ec:	2280      	movs	r2, #128	; 0x80
 80078ee:	0152      	lsls	r2, r2, #5
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d900      	bls.n	80078f6 <HAL_TIM_ConfigClockSource+0x7a>
 80078f4:	e07e      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 80078f6:	2b70      	cmp	r3, #112	; 0x70
 80078f8:	d018      	beq.n	800792c <HAL_TIM_ConfigClockSource+0xb0>
 80078fa:	d900      	bls.n	80078fe <HAL_TIM_ConfigClockSource+0x82>
 80078fc:	e07a      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 80078fe:	2b60      	cmp	r3, #96	; 0x60
 8007900:	d04f      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x126>
 8007902:	d900      	bls.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 8007904:	e076      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 8007906:	2b50      	cmp	r3, #80	; 0x50
 8007908:	d03b      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x106>
 800790a:	d900      	bls.n	800790e <HAL_TIM_ConfigClockSource+0x92>
 800790c:	e072      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d057      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x146>
 8007912:	d900      	bls.n	8007916 <HAL_TIM_ConfigClockSource+0x9a>
 8007914:	e06e      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 8007916:	2b30      	cmp	r3, #48	; 0x30
 8007918:	d063      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x166>
 800791a:	d86b      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 800791c:	2b20      	cmp	r3, #32
 800791e:	d060      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x166>
 8007920:	d868      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d05d      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x166>
 8007926:	2b10      	cmp	r3, #16
 8007928:	d05b      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x166>
 800792a:	e063      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800793c:	f000 f96a 	bl	8007c14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2277      	movs	r2, #119	; 0x77
 800794c:	4313      	orrs	r3, r2
 800794e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	609a      	str	r2, [r3, #8]
      break;
 8007958:	e052      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800796a:	f000 f953 	bl	8007c14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	01c9      	lsls	r1, r1, #7
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]
      break;
 8007980:	e03e      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800798e:	001a      	movs	r2, r3
 8007990:	f000 f8c6 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2150      	movs	r1, #80	; 0x50
 800799a:	0018      	movs	r0, r3
 800799c:	f000 f920 	bl	8007be0 <TIM_ITRx_SetConfig>
      break;
 80079a0:	e02e      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ae:	001a      	movs	r2, r3
 80079b0:	f000 f8e4 	bl	8007b7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2160      	movs	r1, #96	; 0x60
 80079ba:	0018      	movs	r0, r3
 80079bc:	f000 f910 	bl	8007be0 <TIM_ITRx_SetConfig>
      break;
 80079c0:	e01e      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ce:	001a      	movs	r2, r3
 80079d0:	f000 f8a6 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2140      	movs	r1, #64	; 0x40
 80079da:	0018      	movs	r0, r3
 80079dc:	f000 f900 	bl	8007be0 <TIM_ITRx_SetConfig>
      break;
 80079e0:	e00e      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	0019      	movs	r1, r3
 80079ec:	0010      	movs	r0, r2
 80079ee:	f000 f8f7 	bl	8007be0 <TIM_ITRx_SetConfig>
      break;
 80079f2:	e005      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80079f4:	230f      	movs	r3, #15
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
      break;
 80079fc:	e000      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80079fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2239      	movs	r2, #57	; 0x39
 8007a04:	2101      	movs	r1, #1
 8007a06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2238      	movs	r2, #56	; 0x38
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	5499      	strb	r1, [r3, r2]

  return status;
 8007a10:	230f      	movs	r3, #15
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	781b      	ldrb	r3, [r3, #0]
}
 8007a16:	0018      	movs	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b004      	add	sp, #16
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	ffff00ff 	.word	0xffff00ff

08007a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a2c:	46c0      	nop			; (mov r8, r8)
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b002      	add	sp, #8
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b002      	add	sp, #8
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a5c:	46c0      	nop			; (mov r8, r8)
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	b002      	add	sp, #8
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	2380      	movs	r3, #128	; 0x80
 8007a78:	05db      	lsls	r3, r3, #23
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d00b      	beq.n	8007a96 <TIM_Base_SetConfig+0x32>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a23      	ldr	r2, [pc, #140]	; (8007b10 <TIM_Base_SetConfig+0xac>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <TIM_Base_SetConfig+0x32>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a22      	ldr	r2, [pc, #136]	; (8007b14 <TIM_Base_SetConfig+0xb0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_Base_SetConfig+0x32>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a21      	ldr	r2, [pc, #132]	; (8007b18 <TIM_Base_SetConfig+0xb4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d108      	bne.n	8007aa8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2270      	movs	r2, #112	; 0x70
 8007a9a:	4393      	bics	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	2380      	movs	r3, #128	; 0x80
 8007aac:	05db      	lsls	r3, r3, #23
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0x66>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_Base_SetConfig+0xac>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0x66>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <TIM_Base_SetConfig+0xb0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0x66>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <TIM_Base_SetConfig+0xb4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <TIM_Base_SetConfig+0xb8>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2280      	movs	r2, #128	; 0x80
 8007ae0:	4393      	bics	r3, r2
 8007ae2:	001a      	movs	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	615a      	str	r2, [r3, #20]
}
 8007b08:	46c0      	nop			; (mov r8, r8)
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b004      	add	sp, #16
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	40000400 	.word	0x40000400
 8007b14:	40010800 	.word	0x40010800
 8007b18:	40011400 	.word	0x40011400
 8007b1c:	fffffcff 	.word	0xfffffcff

08007b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	2201      	movs	r2, #1
 8007b38:	4393      	bics	r3, r2
 8007b3a:	001a      	movs	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	22f0      	movs	r2, #240	; 0xf0
 8007b4a:	4393      	bics	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	4393      	bics	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	46c0      	nop			; (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b006      	add	sp, #24
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	4393      	bics	r3, r2
 8007b90:	001a      	movs	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <TIM_TI2_ConfigInputStage+0x60>)
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	031b      	lsls	r3, r3, #12
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	22a0      	movs	r2, #160	; 0xa0
 8007bb8:	4393      	bics	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b006      	add	sp, #24
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	ffff0fff 	.word	0xffff0fff

08007be0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2270      	movs	r2, #112	; 0x70
 8007bf4:	4393      	bics	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	2207      	movs	r2, #7
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	609a      	str	r2, [r3, #8]
}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <TIM_ETR_SetConfig+0x3c>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	021a      	lsls	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	609a      	str	r2, [r3, #8]
}
 8007c48:	46c0      	nop			; (mov r8, r8)
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	b006      	add	sp, #24
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	ffff00ff 	.word	0xffff00ff

08007c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2238      	movs	r2, #56	; 0x38
 8007c62:	5c9b      	ldrb	r3, [r3, r2]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e047      	b.n	8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2238      	movs	r2, #56	; 0x38
 8007c70:	2101      	movs	r1, #1
 8007c72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2239      	movs	r2, #57	; 0x39
 8007c78:	2102      	movs	r1, #2
 8007c7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2270      	movs	r2, #112	; 0x70
 8007c90:	4393      	bics	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	2380      	movs	r3, #128	; 0x80
 8007cac:	05db      	lsls	r3, r3, #23
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d00e      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d009      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a11      	ldr	r2, [pc, #68]	; (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d004      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d10c      	bne.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2280      	movs	r2, #128	; 0x80
 8007cd4:	4393      	bics	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2239      	movs	r2, #57	; 0x39
 8007cee:	2101      	movs	r1, #1
 8007cf0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2238      	movs	r2, #56	; 0x38
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b004      	add	sp, #16
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40000400 	.word	0x40000400
 8007d08:	40010800 	.word	0x40010800
 8007d0c:	40011400 	.word	0x40011400

08007d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e044      	b.n	8007dac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d107      	bne.n	8007d3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2278      	movs	r2, #120	; 0x78
 8007d2e:	2100      	movs	r1, #0
 8007d30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	0018      	movs	r0, r3
 8007d36:	f7fa ffb3 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2224      	movs	r2, #36	; 0x24
 8007d3e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	438a      	bics	r2, r1
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	0018      	movs	r0, r3
 8007d54:	f000 fc2c 	bl	80085b0 <UART_SetConfig>
 8007d58:	0003      	movs	r3, r0
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e024      	b.n	8007dac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f000 febd 	bl	8008aec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	490d      	ldr	r1, [pc, #52]	; (8007db4 <HAL_UART_Init+0xa4>)
 8007d7e:	400a      	ands	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	212a      	movs	r1, #42	; 0x2a
 8007d8e:	438a      	bics	r2, r1
 8007d90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	0018      	movs	r0, r3
 8007da6:	f000 ff55 	bl	8008c54 <UART_CheckIdleState>
 8007daa:	0003      	movs	r3, r0
}
 8007dac:	0018      	movs	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b002      	add	sp, #8
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	ffffb7ff 	.word	0xffffb7ff

08007db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	1dbb      	adds	r3, r7, #6
 8007dc6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d000      	beq.n	8007dd2 <HAL_UART_Transmit+0x1a>
 8007dd0:	e08c      	b.n	8007eec <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_UART_Transmit+0x28>
 8007dd8:	1dbb      	adds	r3, r7, #6
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e084      	b.n	8007eee <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	2380      	movs	r3, #128	; 0x80
 8007dea:	015b      	lsls	r3, r3, #5
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d109      	bne.n	8007e04 <HAL_UART_Transmit+0x4c>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d105      	bne.n	8007e04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	d001      	beq.n	8007e04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e074      	b.n	8007eee <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2284      	movs	r2, #132	; 0x84
 8007e08:	2100      	movs	r1, #0
 8007e0a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2221      	movs	r2, #33	; 0x21
 8007e10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e12:	f7fd fb49 	bl	80054a8 <HAL_GetTick>
 8007e16:	0003      	movs	r3, r0
 8007e18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1dba      	adds	r2, r7, #6
 8007e1e:	2150      	movs	r1, #80	; 0x50
 8007e20:	8812      	ldrh	r2, [r2, #0]
 8007e22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	1dba      	adds	r2, r7, #6
 8007e28:	2152      	movs	r1, #82	; 0x52
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	2380      	movs	r3, #128	; 0x80
 8007e34:	015b      	lsls	r3, r3, #5
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d108      	bne.n	8007e4c <HAL_UART_Transmit+0x94>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d104      	bne.n	8007e4c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	e003      	b.n	8007e54 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e54:	e02f      	b.n	8007eb6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	0013      	movs	r3, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	f000 ff9e 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 8007e68:	1e03      	subs	r3, r0, #0
 8007e6a:	d004      	beq.n	8007e76 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e03b      	b.n	8007eee <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10b      	bne.n	8007e94 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	001a      	movs	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	05d2      	lsls	r2, r2, #23
 8007e88:	0dd2      	lsrs	r2, r2, #23
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	3302      	adds	r3, #2
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	e007      	b.n	8007ea4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2252      	movs	r2, #82	; 0x52
 8007ea8:	5a9b      	ldrh	r3, [r3, r2]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b299      	uxth	r1, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2252      	movs	r2, #82	; 0x52
 8007eb4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2252      	movs	r2, #82	; 0x52
 8007eba:	5a9b      	ldrh	r3, [r3, r2]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1c9      	bne.n	8007e56 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	0013      	movs	r3, r2
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2140      	movs	r1, #64	; 0x40
 8007ed0:	f000 ff68 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 8007ed4:	1e03      	subs	r3, r0, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2220      	movs	r2, #32
 8007edc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e005      	b.n	8007eee <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e000      	b.n	8007eee <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	0018      	movs	r0, r3
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	b008      	add	sp, #32
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	1dbb      	adds	r3, r7, #6
 8007f04:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2280      	movs	r2, #128	; 0x80
 8007f0a:	589b      	ldr	r3, [r3, r2]
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d14a      	bne.n	8007fa6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_UART_Receive_IT+0x26>
 8007f16:	1dbb      	adds	r3, r7, #6
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e042      	b.n	8007fa8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	015b      	lsls	r3, r3, #5
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d109      	bne.n	8007f42 <HAL_UART_Receive_IT+0x4a>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	d001      	beq.n	8007f42 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e032      	b.n	8007fa8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <HAL_UART_Receive_IT+0xb8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d020      	beq.n	8007f94 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	2380      	movs	r3, #128	; 0x80
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	d019      	beq.n	8007f94 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f60:	f3ef 8310 	mrs	r3, PRIMASK
 8007f64:	613b      	str	r3, [r7, #16]
  return(result);
 8007f66:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f383 8810 	msr	PRIMASK, r3
}
 8007f74:	46c0      	nop			; (mov r8, r8)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2180      	movs	r1, #128	; 0x80
 8007f82:	04c9      	lsls	r1, r1, #19
 8007f84:	430a      	orrs	r2, r1
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f383 8810 	msr	PRIMASK, r3
}
 8007f92:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f94:	1dbb      	adds	r3, r7, #6
 8007f96:	881a      	ldrh	r2, [r3, #0]
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f000 ff6b 	bl	8008e78 <UART_Start_Receive_IT>
 8007fa2:	0003      	movs	r3, r0
 8007fa4:	e000      	b.n	8007fa8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007fa6:	2302      	movs	r3, #2
  }
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b008      	add	sp, #32
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40004800 	.word	0x40004800

08007fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b0ab      	sub	sp, #172	; 0xac
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	22a4      	movs	r2, #164	; 0xa4
 8007fc4:	18b9      	adds	r1, r7, r2
 8007fc6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	20a0      	movs	r0, #160	; 0xa0
 8007fd0:	1839      	adds	r1, r7, r0
 8007fd2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	219c      	movs	r1, #156	; 0x9c
 8007fdc:	1879      	adds	r1, r7, r1
 8007fde:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fe0:	0011      	movs	r1, r2
 8007fe2:	18bb      	adds	r3, r7, r2
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a99      	ldr	r2, [pc, #612]	; (800824c <HAL_UART_IRQHandler+0x298>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	2298      	movs	r2, #152	; 0x98
 8007fec:	18bc      	adds	r4, r7, r2
 8007fee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007ff0:	18bb      	adds	r3, r7, r2
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d114      	bne.n	8008022 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ff8:	187b      	adds	r3, r7, r1
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	4013      	ands	r3, r2
 8008000:	d00f      	beq.n	8008022 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008002:	183b      	adds	r3, r7, r0
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2220      	movs	r2, #32
 8008008:	4013      	ands	r3, r2
 800800a:	d00a      	beq.n	8008022 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008010:	2b00      	cmp	r3, #0
 8008012:	d100      	bne.n	8008016 <HAL_UART_IRQHandler+0x62>
 8008014:	e2a0      	b.n	8008558 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	0010      	movs	r0, r2
 800801e:	4798      	blx	r3
      }
      return;
 8008020:	e29a      	b.n	8008558 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008022:	2398      	movs	r3, #152	; 0x98
 8008024:	18fb      	adds	r3, r7, r3
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d100      	bne.n	800802e <HAL_UART_IRQHandler+0x7a>
 800802c:	e114      	b.n	8008258 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800802e:	239c      	movs	r3, #156	; 0x9c
 8008030:	18fb      	adds	r3, r7, r3
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2201      	movs	r2, #1
 8008036:	4013      	ands	r3, r2
 8008038:	d106      	bne.n	8008048 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800803a:	23a0      	movs	r3, #160	; 0xa0
 800803c:	18fb      	adds	r3, r7, r3
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a83      	ldr	r2, [pc, #524]	; (8008250 <HAL_UART_IRQHandler+0x29c>)
 8008042:	4013      	ands	r3, r2
 8008044:	d100      	bne.n	8008048 <HAL_UART_IRQHandler+0x94>
 8008046:	e107      	b.n	8008258 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008048:	23a4      	movs	r3, #164	; 0xa4
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2201      	movs	r2, #1
 8008050:	4013      	ands	r3, r2
 8008052:	d012      	beq.n	800807a <HAL_UART_IRQHandler+0xc6>
 8008054:	23a0      	movs	r3, #160	; 0xa0
 8008056:	18fb      	adds	r3, r7, r3
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	2380      	movs	r3, #128	; 0x80
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	4013      	ands	r3, r2
 8008060:	d00b      	beq.n	800807a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2201      	movs	r2, #1
 8008068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2284      	movs	r2, #132	; 0x84
 800806e:	589b      	ldr	r3, [r3, r2]
 8008070:	2201      	movs	r2, #1
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2184      	movs	r1, #132	; 0x84
 8008078:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800807a:	23a4      	movs	r3, #164	; 0xa4
 800807c:	18fb      	adds	r3, r7, r3
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2202      	movs	r2, #2
 8008082:	4013      	ands	r3, r2
 8008084:	d011      	beq.n	80080aa <HAL_UART_IRQHandler+0xf6>
 8008086:	239c      	movs	r3, #156	; 0x9c
 8008088:	18fb      	adds	r3, r7, r3
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2201      	movs	r2, #1
 800808e:	4013      	ands	r3, r2
 8008090:	d00b      	beq.n	80080aa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2202      	movs	r2, #2
 8008098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2284      	movs	r2, #132	; 0x84
 800809e:	589b      	ldr	r3, [r3, r2]
 80080a0:	2204      	movs	r2, #4
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2184      	movs	r1, #132	; 0x84
 80080a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080aa:	23a4      	movs	r3, #164	; 0xa4
 80080ac:	18fb      	adds	r3, r7, r3
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2204      	movs	r2, #4
 80080b2:	4013      	ands	r3, r2
 80080b4:	d011      	beq.n	80080da <HAL_UART_IRQHandler+0x126>
 80080b6:	239c      	movs	r3, #156	; 0x9c
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2201      	movs	r2, #1
 80080be:	4013      	ands	r3, r2
 80080c0:	d00b      	beq.n	80080da <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2204      	movs	r2, #4
 80080c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2284      	movs	r2, #132	; 0x84
 80080ce:	589b      	ldr	r3, [r3, r2]
 80080d0:	2202      	movs	r2, #2
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2184      	movs	r1, #132	; 0x84
 80080d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080da:	23a4      	movs	r3, #164	; 0xa4
 80080dc:	18fb      	adds	r3, r7, r3
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2208      	movs	r2, #8
 80080e2:	4013      	ands	r3, r2
 80080e4:	d017      	beq.n	8008116 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080e6:	23a0      	movs	r3, #160	; 0xa0
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2220      	movs	r2, #32
 80080ee:	4013      	ands	r3, r2
 80080f0:	d105      	bne.n	80080fe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080f2:	239c      	movs	r3, #156	; 0x9c
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2201      	movs	r2, #1
 80080fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080fc:	d00b      	beq.n	8008116 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2208      	movs	r2, #8
 8008104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2284      	movs	r2, #132	; 0x84
 800810a:	589b      	ldr	r3, [r3, r2]
 800810c:	2208      	movs	r2, #8
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2184      	movs	r1, #132	; 0x84
 8008114:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008116:	23a4      	movs	r3, #164	; 0xa4
 8008118:	18fb      	adds	r3, r7, r3
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	2380      	movs	r3, #128	; 0x80
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	4013      	ands	r3, r2
 8008122:	d013      	beq.n	800814c <HAL_UART_IRQHandler+0x198>
 8008124:	23a0      	movs	r3, #160	; 0xa0
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	2380      	movs	r3, #128	; 0x80
 800812c:	04db      	lsls	r3, r3, #19
 800812e:	4013      	ands	r3, r2
 8008130:	d00c      	beq.n	800814c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2280      	movs	r2, #128	; 0x80
 8008138:	0112      	lsls	r2, r2, #4
 800813a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2284      	movs	r2, #132	; 0x84
 8008140:	589b      	ldr	r3, [r3, r2]
 8008142:	2220      	movs	r2, #32
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2184      	movs	r1, #132	; 0x84
 800814a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2284      	movs	r2, #132	; 0x84
 8008150:	589b      	ldr	r3, [r3, r2]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d100      	bne.n	8008158 <HAL_UART_IRQHandler+0x1a4>
 8008156:	e201      	b.n	800855c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008158:	23a4      	movs	r3, #164	; 0xa4
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2220      	movs	r2, #32
 8008160:	4013      	ands	r3, r2
 8008162:	d00e      	beq.n	8008182 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008164:	23a0      	movs	r3, #160	; 0xa0
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2220      	movs	r2, #32
 800816c:	4013      	ands	r3, r2
 800816e:	d008      	beq.n	8008182 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008174:	2b00      	cmp	r3, #0
 8008176:	d004      	beq.n	8008182 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	0010      	movs	r0, r2
 8008180:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2284      	movs	r2, #132	; 0x84
 8008186:	589b      	ldr	r3, [r3, r2]
 8008188:	2194      	movs	r1, #148	; 0x94
 800818a:	187a      	adds	r2, r7, r1
 800818c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2240      	movs	r2, #64	; 0x40
 8008196:	4013      	ands	r3, r2
 8008198:	2b40      	cmp	r3, #64	; 0x40
 800819a:	d004      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800819c:	187b      	adds	r3, r7, r1
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2228      	movs	r2, #40	; 0x28
 80081a2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081a4:	d047      	beq.n	8008236 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	0018      	movs	r0, r3
 80081aa:	f000 ff2f 	bl	800900c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2240      	movs	r2, #64	; 0x40
 80081b6:	4013      	ands	r3, r2
 80081b8:	2b40      	cmp	r3, #64	; 0x40
 80081ba:	d137      	bne.n	800822c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081bc:	f3ef 8310 	mrs	r3, PRIMASK
 80081c0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80081c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c4:	2090      	movs	r0, #144	; 0x90
 80081c6:	183a      	adds	r2, r7, r0
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	2301      	movs	r3, #1
 80081cc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d0:	f383 8810 	msr	PRIMASK, r3
}
 80081d4:	46c0      	nop			; (mov r8, r8)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2140      	movs	r1, #64	; 0x40
 80081e2:	438a      	bics	r2, r1
 80081e4:	609a      	str	r2, [r3, #8]
 80081e6:	183b      	adds	r3, r7, r0
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ee:	f383 8810 	msr	PRIMASK, r3
}
 80081f2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d012      	beq.n	8008222 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <HAL_UART_IRQHandler+0x2a0>)
 8008202:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008208:	0018      	movs	r0, r3
 800820a:	f7fd fa99 	bl	8005740 <HAL_DMA_Abort_IT>
 800820e:	1e03      	subs	r3, r0, #0
 8008210:	d01a      	beq.n	8008248 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800821c:	0018      	movs	r0, r3
 800821e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008220:	e012      	b.n	8008248 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	0018      	movs	r0, r3
 8008226:	f000 f9af 	bl	8008588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822a:	e00d      	b.n	8008248 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	0018      	movs	r0, r3
 8008230:	f000 f9aa 	bl	8008588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008234:	e008      	b.n	8008248 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	0018      	movs	r0, r3
 800823a:	f000 f9a5 	bl	8008588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2284      	movs	r2, #132	; 0x84
 8008242:	2100      	movs	r1, #0
 8008244:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008246:	e189      	b.n	800855c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008248:	46c0      	nop			; (mov r8, r8)
    return;
 800824a:	e187      	b.n	800855c <HAL_UART_IRQHandler+0x5a8>
 800824c:	0000080f 	.word	0x0000080f
 8008250:	04000120 	.word	0x04000120
 8008254:	080090d5 	.word	0x080090d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825c:	2b01      	cmp	r3, #1
 800825e:	d000      	beq.n	8008262 <HAL_UART_IRQHandler+0x2ae>
 8008260:	e13b      	b.n	80084da <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008262:	23a4      	movs	r3, #164	; 0xa4
 8008264:	18fb      	adds	r3, r7, r3
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2210      	movs	r2, #16
 800826a:	4013      	ands	r3, r2
 800826c:	d100      	bne.n	8008270 <HAL_UART_IRQHandler+0x2bc>
 800826e:	e134      	b.n	80084da <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008270:	23a0      	movs	r3, #160	; 0xa0
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2210      	movs	r2, #16
 8008278:	4013      	ands	r3, r2
 800827a:	d100      	bne.n	800827e <HAL_UART_IRQHandler+0x2ca>
 800827c:	e12d      	b.n	80084da <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2210      	movs	r2, #16
 8008284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2240      	movs	r2, #64	; 0x40
 800828e:	4013      	ands	r3, r2
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d000      	beq.n	8008296 <HAL_UART_IRQHandler+0x2e2>
 8008294:	e0a1      	b.n	80083da <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	217e      	movs	r1, #126	; 0x7e
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80082a4:	187b      	adds	r3, r7, r1
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d100      	bne.n	80082ae <HAL_UART_IRQHandler+0x2fa>
 80082ac:	e158      	b.n	8008560 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2258      	movs	r2, #88	; 0x58
 80082b2:	5a9b      	ldrh	r3, [r3, r2]
 80082b4:	187a      	adds	r2, r7, r1
 80082b6:	8812      	ldrh	r2, [r2, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d300      	bcc.n	80082be <HAL_UART_IRQHandler+0x30a>
 80082bc:	e150      	b.n	8008560 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	187a      	adds	r2, r7, r1
 80082c2:	215a      	movs	r1, #90	; 0x5a
 80082c4:	8812      	ldrh	r2, [r2, #0]
 80082c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2220      	movs	r2, #32
 80082d2:	4013      	ands	r3, r2
 80082d4:	d16f      	bne.n	80083b6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d6:	f3ef 8310 	mrs	r3, PRIMASK
 80082da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082de:	67bb      	str	r3, [r7, #120]	; 0x78
 80082e0:	2301      	movs	r3, #1
 80082e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e6:	f383 8810 	msr	PRIMASK, r3
}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	499e      	ldr	r1, [pc, #632]	; (8008570 <HAL_UART_IRQHandler+0x5bc>)
 80082f8:	400a      	ands	r2, r1
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	f383 8810 	msr	PRIMASK, r3
}
 8008306:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008308:	f3ef 8310 	mrs	r3, PRIMASK
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800830e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008310:	677b      	str	r3, [r7, #116]	; 0x74
 8008312:	2301      	movs	r3, #1
 8008314:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008318:	f383 8810 	msr	PRIMASK, r3
}
 800831c:	46c0      	nop			; (mov r8, r8)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2101      	movs	r1, #1
 800832a:	438a      	bics	r2, r1
 800832c:	609a      	str	r2, [r3, #8]
 800832e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008330:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008334:	f383 8810 	msr	PRIMASK, r3
}
 8008338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800833a:	f3ef 8310 	mrs	r3, PRIMASK
 800833e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008340:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	673b      	str	r3, [r7, #112]	; 0x70
 8008344:	2301      	movs	r3, #1
 8008346:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834a:	f383 8810 	msr	PRIMASK, r3
}
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2140      	movs	r1, #64	; 0x40
 800835c:	438a      	bics	r2, r1
 800835e:	609a      	str	r2, [r3, #8]
 8008360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008362:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008366:	f383 8810 	msr	PRIMASK, r3
}
 800836a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2280      	movs	r2, #128	; 0x80
 8008370:	2120      	movs	r1, #32
 8008372:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800837a:	f3ef 8310 	mrs	r3, PRIMASK
 800837e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008380:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008384:	2301      	movs	r3, #1
 8008386:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800838a:	f383 8810 	msr	PRIMASK, r3
}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2110      	movs	r1, #16
 800839c:	438a      	bics	r2, r1
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a6:	f383 8810 	msr	PRIMASK, r3
}
 80083aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7fd f985 	bl	80056c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2202      	movs	r2, #2
 80083ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2258      	movs	r2, #88	; 0x58
 80083c0:	5a9a      	ldrh	r2, [r3, r2]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	215a      	movs	r1, #90	; 0x5a
 80083c6:	5a5b      	ldrh	r3, [r3, r1]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	0011      	movs	r1, r2
 80083d2:	0018      	movs	r0, r3
 80083d4:	f000 f8e0 	bl	8008598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083d8:	e0c2      	b.n	8008560 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2258      	movs	r2, #88	; 0x58
 80083de:	5a99      	ldrh	r1, [r3, r2]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	225a      	movs	r2, #90	; 0x5a
 80083e4:	5a9b      	ldrh	r3, [r3, r2]
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	208e      	movs	r0, #142	; 0x8e
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	1a8a      	subs	r2, r1, r2
 80083ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	225a      	movs	r2, #90	; 0x5a
 80083f4:	5a9b      	ldrh	r3, [r3, r2]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d100      	bne.n	80083fe <HAL_UART_IRQHandler+0x44a>
 80083fc:	e0b2      	b.n	8008564 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80083fe:	183b      	adds	r3, r7, r0
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d100      	bne.n	8008408 <HAL_UART_IRQHandler+0x454>
 8008406:	e0ad      	b.n	8008564 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008408:	f3ef 8310 	mrs	r3, PRIMASK
 800840c:	60fb      	str	r3, [r7, #12]
  return(result);
 800840e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008410:	2488      	movs	r4, #136	; 0x88
 8008412:	193a      	adds	r2, r7, r4
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	2301      	movs	r3, #1
 8008418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f383 8810 	msr	PRIMASK, r3
}
 8008420:	46c0      	nop			; (mov r8, r8)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4951      	ldr	r1, [pc, #324]	; (8008574 <HAL_UART_IRQHandler+0x5c0>)
 800842e:	400a      	ands	r2, r1
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	193b      	adds	r3, r7, r4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f383 8810 	msr	PRIMASK, r3
}
 800843e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008440:	f3ef 8310 	mrs	r3, PRIMASK
 8008444:	61bb      	str	r3, [r7, #24]
  return(result);
 8008446:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008448:	2484      	movs	r4, #132	; 0x84
 800844a:	193a      	adds	r2, r7, r4
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	2301      	movs	r3, #1
 8008450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	f383 8810 	msr	PRIMASK, r3
}
 8008458:	46c0      	nop			; (mov r8, r8)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2101      	movs	r1, #1
 8008466:	438a      	bics	r2, r1
 8008468:	609a      	str	r2, [r3, #8]
 800846a:	193b      	adds	r3, r7, r4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f383 8810 	msr	PRIMASK, r3
}
 8008476:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2280      	movs	r2, #128	; 0x80
 800847c:	2120      	movs	r1, #32
 800847e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800848c:	f3ef 8310 	mrs	r3, PRIMASK
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008494:	2480      	movs	r4, #128	; 0x80
 8008496:	193a      	adds	r2, r7, r4
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	2301      	movs	r3, #1
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	f383 8810 	msr	PRIMASK, r3
}
 80084a4:	46c0      	nop			; (mov r8, r8)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2110      	movs	r1, #16
 80084b2:	438a      	bics	r2, r1
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	193b      	adds	r3, r7, r4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	f383 8810 	msr	PRIMASK, r3
}
 80084c2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084ca:	183b      	adds	r3, r7, r0
 80084cc:	881a      	ldrh	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	0011      	movs	r1, r2
 80084d2:	0018      	movs	r0, r3
 80084d4:	f000 f860 	bl	8008598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084d8:	e044      	b.n	8008564 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084da:	23a4      	movs	r3, #164	; 0xa4
 80084dc:	18fb      	adds	r3, r7, r3
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	2380      	movs	r3, #128	; 0x80
 80084e2:	035b      	lsls	r3, r3, #13
 80084e4:	4013      	ands	r3, r2
 80084e6:	d010      	beq.n	800850a <HAL_UART_IRQHandler+0x556>
 80084e8:	239c      	movs	r3, #156	; 0x9c
 80084ea:	18fb      	adds	r3, r7, r3
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	2380      	movs	r3, #128	; 0x80
 80084f0:	03db      	lsls	r3, r3, #15
 80084f2:	4013      	ands	r3, r2
 80084f4:	d009      	beq.n	800850a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2280      	movs	r2, #128	; 0x80
 80084fc:	0352      	lsls	r2, r2, #13
 80084fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	0018      	movs	r0, r3
 8008504:	f000 ffec 	bl	80094e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008508:	e02f      	b.n	800856a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800850a:	23a4      	movs	r3, #164	; 0xa4
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2280      	movs	r2, #128	; 0x80
 8008512:	4013      	ands	r3, r2
 8008514:	d00f      	beq.n	8008536 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008516:	23a0      	movs	r3, #160	; 0xa0
 8008518:	18fb      	adds	r3, r7, r3
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2280      	movs	r2, #128	; 0x80
 800851e:	4013      	ands	r3, r2
 8008520:	d009      	beq.n	8008536 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d01e      	beq.n	8008568 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	0010      	movs	r0, r2
 8008532:	4798      	blx	r3
    }
    return;
 8008534:	e018      	b.n	8008568 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008536:	23a4      	movs	r3, #164	; 0xa4
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2240      	movs	r2, #64	; 0x40
 800853e:	4013      	ands	r3, r2
 8008540:	d013      	beq.n	800856a <HAL_UART_IRQHandler+0x5b6>
 8008542:	23a0      	movs	r3, #160	; 0xa0
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2240      	movs	r2, #64	; 0x40
 800854a:	4013      	ands	r3, r2
 800854c:	d00d      	beq.n	800856a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	0018      	movs	r0, r3
 8008552:	f000 fdd6 	bl	8009102 <UART_EndTransmit_IT>
    return;
 8008556:	e008      	b.n	800856a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	e006      	b.n	800856a <HAL_UART_IRQHandler+0x5b6>
    return;
 800855c:	46c0      	nop			; (mov r8, r8)
 800855e:	e004      	b.n	800856a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008560:	46c0      	nop			; (mov r8, r8)
 8008562:	e002      	b.n	800856a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008564:	46c0      	nop			; (mov r8, r8)
 8008566:	e000      	b.n	800856a <HAL_UART_IRQHandler+0x5b6>
    return;
 8008568:	46c0      	nop			; (mov r8, r8)
  }

}
 800856a:	46bd      	mov	sp, r7
 800856c:	b02b      	add	sp, #172	; 0xac
 800856e:	bd90      	pop	{r4, r7, pc}
 8008570:	fffffeff 	.word	0xfffffeff
 8008574:	fffffedf 	.word	0xfffffedf

08008578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008580:	46c0      	nop			; (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	b002      	add	sp, #8
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	46bd      	mov	sp, r7
 8008594:	b002      	add	sp, #8
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	000a      	movs	r2, r1
 80085a2:	1cbb      	adds	r3, r7, #2
 80085a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085a6:	46c0      	nop			; (mov r8, r8)
 80085a8:	46bd      	mov	sp, r7
 80085aa:	b002      	add	sp, #8
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085b0:	b5b0      	push	{r4, r5, r7, lr}
 80085b2:	b08e      	sub	sp, #56	; 0x38
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085b8:	231a      	movs	r3, #26
 80085ba:	2218      	movs	r2, #24
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	19db      	adds	r3, r3, r7
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	431a      	orrs	r2, r3
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	4313      	orrs	r3, r2
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4ac3      	ldr	r2, [pc, #780]	; (80088f0 <UART_SetConfig+0x340>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	0019      	movs	r1, r3
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ee:	430a      	orrs	r2, r1
 80085f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	4abe      	ldr	r2, [pc, #760]	; (80088f4 <UART_SetConfig+0x344>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	0019      	movs	r1, r3
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4ab8      	ldr	r2, [pc, #736]	; (80088f8 <UART_SetConfig+0x348>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d004      	beq.n	8008624 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008620:	4313      	orrs	r3, r2
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	4ab4      	ldr	r2, [pc, #720]	; (80088fc <UART_SetConfig+0x34c>)
 800862c:	4013      	ands	r3, r2
 800862e:	0019      	movs	r1, r3
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008636:	430a      	orrs	r2, r1
 8008638:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4ab0      	ldr	r2, [pc, #704]	; (8008900 <UART_SetConfig+0x350>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d131      	bne.n	80086a8 <UART_SetConfig+0xf8>
 8008644:	4baf      	ldr	r3, [pc, #700]	; (8008904 <UART_SetConfig+0x354>)
 8008646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008648:	2203      	movs	r2, #3
 800864a:	4013      	ands	r3, r2
 800864c:	2b03      	cmp	r3, #3
 800864e:	d01d      	beq.n	800868c <UART_SetConfig+0xdc>
 8008650:	d823      	bhi.n	800869a <UART_SetConfig+0xea>
 8008652:	2b02      	cmp	r3, #2
 8008654:	d00c      	beq.n	8008670 <UART_SetConfig+0xc0>
 8008656:	d820      	bhi.n	800869a <UART_SetConfig+0xea>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <UART_SetConfig+0xb2>
 800865c:	2b01      	cmp	r3, #1
 800865e:	d00e      	beq.n	800867e <UART_SetConfig+0xce>
 8008660:	e01b      	b.n	800869a <UART_SetConfig+0xea>
 8008662:	231b      	movs	r3, #27
 8008664:	2218      	movs	r2, #24
 8008666:	189b      	adds	r3, r3, r2
 8008668:	19db      	adds	r3, r3, r7
 800866a:	2201      	movs	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e0b4      	b.n	80087da <UART_SetConfig+0x22a>
 8008670:	231b      	movs	r3, #27
 8008672:	2218      	movs	r2, #24
 8008674:	189b      	adds	r3, r3, r2
 8008676:	19db      	adds	r3, r3, r7
 8008678:	2202      	movs	r2, #2
 800867a:	701a      	strb	r2, [r3, #0]
 800867c:	e0ad      	b.n	80087da <UART_SetConfig+0x22a>
 800867e:	231b      	movs	r3, #27
 8008680:	2218      	movs	r2, #24
 8008682:	189b      	adds	r3, r3, r2
 8008684:	19db      	adds	r3, r3, r7
 8008686:	2204      	movs	r2, #4
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	e0a6      	b.n	80087da <UART_SetConfig+0x22a>
 800868c:	231b      	movs	r3, #27
 800868e:	2218      	movs	r2, #24
 8008690:	189b      	adds	r3, r3, r2
 8008692:	19db      	adds	r3, r3, r7
 8008694:	2208      	movs	r2, #8
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	e09f      	b.n	80087da <UART_SetConfig+0x22a>
 800869a:	231b      	movs	r3, #27
 800869c:	2218      	movs	r2, #24
 800869e:	189b      	adds	r3, r3, r2
 80086a0:	19db      	adds	r3, r3, r7
 80086a2:	2210      	movs	r2, #16
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	e098      	b.n	80087da <UART_SetConfig+0x22a>
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a96      	ldr	r2, [pc, #600]	; (8008908 <UART_SetConfig+0x358>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d131      	bne.n	8008716 <UART_SetConfig+0x166>
 80086b2:	4b94      	ldr	r3, [pc, #592]	; (8008904 <UART_SetConfig+0x354>)
 80086b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b6:	220c      	movs	r2, #12
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b0c      	cmp	r3, #12
 80086bc:	d01d      	beq.n	80086fa <UART_SetConfig+0x14a>
 80086be:	d823      	bhi.n	8008708 <UART_SetConfig+0x158>
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d00c      	beq.n	80086de <UART_SetConfig+0x12e>
 80086c4:	d820      	bhi.n	8008708 <UART_SetConfig+0x158>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <UART_SetConfig+0x120>
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d00e      	beq.n	80086ec <UART_SetConfig+0x13c>
 80086ce:	e01b      	b.n	8008708 <UART_SetConfig+0x158>
 80086d0:	231b      	movs	r3, #27
 80086d2:	2218      	movs	r2, #24
 80086d4:	189b      	adds	r3, r3, r2
 80086d6:	19db      	adds	r3, r3, r7
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	e07d      	b.n	80087da <UART_SetConfig+0x22a>
 80086de:	231b      	movs	r3, #27
 80086e0:	2218      	movs	r2, #24
 80086e2:	189b      	adds	r3, r3, r2
 80086e4:	19db      	adds	r3, r3, r7
 80086e6:	2202      	movs	r2, #2
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	e076      	b.n	80087da <UART_SetConfig+0x22a>
 80086ec:	231b      	movs	r3, #27
 80086ee:	2218      	movs	r2, #24
 80086f0:	189b      	adds	r3, r3, r2
 80086f2:	19db      	adds	r3, r3, r7
 80086f4:	2204      	movs	r2, #4
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e06f      	b.n	80087da <UART_SetConfig+0x22a>
 80086fa:	231b      	movs	r3, #27
 80086fc:	2218      	movs	r2, #24
 80086fe:	189b      	adds	r3, r3, r2
 8008700:	19db      	adds	r3, r3, r7
 8008702:	2208      	movs	r2, #8
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	e068      	b.n	80087da <UART_SetConfig+0x22a>
 8008708:	231b      	movs	r3, #27
 800870a:	2218      	movs	r2, #24
 800870c:	189b      	adds	r3, r3, r2
 800870e:	19db      	adds	r3, r3, r7
 8008710:	2210      	movs	r2, #16
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	e061      	b.n	80087da <UART_SetConfig+0x22a>
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a7c      	ldr	r2, [pc, #496]	; (800890c <UART_SetConfig+0x35c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d106      	bne.n	800872e <UART_SetConfig+0x17e>
 8008720:	231b      	movs	r3, #27
 8008722:	2218      	movs	r2, #24
 8008724:	189b      	adds	r3, r3, r2
 8008726:	19db      	adds	r3, r3, r7
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	e055      	b.n	80087da <UART_SetConfig+0x22a>
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a77      	ldr	r2, [pc, #476]	; (8008910 <UART_SetConfig+0x360>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d106      	bne.n	8008746 <UART_SetConfig+0x196>
 8008738:	231b      	movs	r3, #27
 800873a:	2218      	movs	r2, #24
 800873c:	189b      	adds	r3, r3, r2
 800873e:	19db      	adds	r3, r3, r7
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e049      	b.n	80087da <UART_SetConfig+0x22a>
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a6b      	ldr	r2, [pc, #428]	; (80088f8 <UART_SetConfig+0x348>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d13e      	bne.n	80087ce <UART_SetConfig+0x21e>
 8008750:	4b6c      	ldr	r3, [pc, #432]	; (8008904 <UART_SetConfig+0x354>)
 8008752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008754:	23c0      	movs	r3, #192	; 0xc0
 8008756:	011b      	lsls	r3, r3, #4
 8008758:	4013      	ands	r3, r2
 800875a:	22c0      	movs	r2, #192	; 0xc0
 800875c:	0112      	lsls	r2, r2, #4
 800875e:	4293      	cmp	r3, r2
 8008760:	d027      	beq.n	80087b2 <UART_SetConfig+0x202>
 8008762:	22c0      	movs	r2, #192	; 0xc0
 8008764:	0112      	lsls	r2, r2, #4
 8008766:	4293      	cmp	r3, r2
 8008768:	d82a      	bhi.n	80087c0 <UART_SetConfig+0x210>
 800876a:	2280      	movs	r2, #128	; 0x80
 800876c:	0112      	lsls	r2, r2, #4
 800876e:	4293      	cmp	r3, r2
 8008770:	d011      	beq.n	8008796 <UART_SetConfig+0x1e6>
 8008772:	2280      	movs	r2, #128	; 0x80
 8008774:	0112      	lsls	r2, r2, #4
 8008776:	4293      	cmp	r3, r2
 8008778:	d822      	bhi.n	80087c0 <UART_SetConfig+0x210>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <UART_SetConfig+0x1d8>
 800877e:	2280      	movs	r2, #128	; 0x80
 8008780:	00d2      	lsls	r2, r2, #3
 8008782:	4293      	cmp	r3, r2
 8008784:	d00e      	beq.n	80087a4 <UART_SetConfig+0x1f4>
 8008786:	e01b      	b.n	80087c0 <UART_SetConfig+0x210>
 8008788:	231b      	movs	r3, #27
 800878a:	2218      	movs	r2, #24
 800878c:	189b      	adds	r3, r3, r2
 800878e:	19db      	adds	r3, r3, r7
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	e021      	b.n	80087da <UART_SetConfig+0x22a>
 8008796:	231b      	movs	r3, #27
 8008798:	2218      	movs	r2, #24
 800879a:	189b      	adds	r3, r3, r2
 800879c:	19db      	adds	r3, r3, r7
 800879e:	2202      	movs	r2, #2
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	e01a      	b.n	80087da <UART_SetConfig+0x22a>
 80087a4:	231b      	movs	r3, #27
 80087a6:	2218      	movs	r2, #24
 80087a8:	189b      	adds	r3, r3, r2
 80087aa:	19db      	adds	r3, r3, r7
 80087ac:	2204      	movs	r2, #4
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	e013      	b.n	80087da <UART_SetConfig+0x22a>
 80087b2:	231b      	movs	r3, #27
 80087b4:	2218      	movs	r2, #24
 80087b6:	189b      	adds	r3, r3, r2
 80087b8:	19db      	adds	r3, r3, r7
 80087ba:	2208      	movs	r2, #8
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	e00c      	b.n	80087da <UART_SetConfig+0x22a>
 80087c0:	231b      	movs	r3, #27
 80087c2:	2218      	movs	r2, #24
 80087c4:	189b      	adds	r3, r3, r2
 80087c6:	19db      	adds	r3, r3, r7
 80087c8:	2210      	movs	r2, #16
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	e005      	b.n	80087da <UART_SetConfig+0x22a>
 80087ce:	231b      	movs	r3, #27
 80087d0:	2218      	movs	r2, #24
 80087d2:	189b      	adds	r3, r3, r2
 80087d4:	19db      	adds	r3, r3, r7
 80087d6:	2210      	movs	r2, #16
 80087d8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a46      	ldr	r2, [pc, #280]	; (80088f8 <UART_SetConfig+0x348>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d000      	beq.n	80087e6 <UART_SetConfig+0x236>
 80087e4:	e09a      	b.n	800891c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087e6:	231b      	movs	r3, #27
 80087e8:	2218      	movs	r2, #24
 80087ea:	189b      	adds	r3, r3, r2
 80087ec:	19db      	adds	r3, r3, r7
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d01d      	beq.n	8008830 <UART_SetConfig+0x280>
 80087f4:	dc20      	bgt.n	8008838 <UART_SetConfig+0x288>
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d015      	beq.n	8008826 <UART_SetConfig+0x276>
 80087fa:	dc1d      	bgt.n	8008838 <UART_SetConfig+0x288>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <UART_SetConfig+0x256>
 8008800:	2b02      	cmp	r3, #2
 8008802:	d005      	beq.n	8008810 <UART_SetConfig+0x260>
 8008804:	e018      	b.n	8008838 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008806:	f7fd ff67 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 800880a:	0003      	movs	r3, r0
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800880e:	e01c      	b.n	800884a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008810:	4b3c      	ldr	r3, [pc, #240]	; (8008904 <UART_SetConfig+0x354>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2210      	movs	r2, #16
 8008816:	4013      	ands	r3, r2
 8008818:	d002      	beq.n	8008820 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800881a:	4b3e      	ldr	r3, [pc, #248]	; (8008914 <UART_SetConfig+0x364>)
 800881c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800881e:	e014      	b.n	800884a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8008820:	4b3d      	ldr	r3, [pc, #244]	; (8008918 <UART_SetConfig+0x368>)
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008824:	e011      	b.n	800884a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008826:	f7fd fea7 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 800882a:	0003      	movs	r3, r0
 800882c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800882e:	e00c      	b.n	800884a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008830:	2380      	movs	r3, #128	; 0x80
 8008832:	021b      	lsls	r3, r3, #8
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008836:	e008      	b.n	800884a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800883c:	231a      	movs	r3, #26
 800883e:	2218      	movs	r2, #24
 8008840:	189b      	adds	r3, r3, r2
 8008842:	19db      	adds	r3, r3, r7
 8008844:	2201      	movs	r2, #1
 8008846:	701a      	strb	r2, [r3, #0]
        break;
 8008848:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d100      	bne.n	8008852 <UART_SetConfig+0x2a2>
 8008850:	e133      	b.n	8008aba <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	0013      	movs	r3, r2
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	189b      	adds	r3, r3, r2
 800885c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885e:	429a      	cmp	r2, r3
 8008860:	d305      	bcc.n	800886e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800886a:	429a      	cmp	r2, r3
 800886c:	d906      	bls.n	800887c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800886e:	231a      	movs	r3, #26
 8008870:	2218      	movs	r2, #24
 8008872:	189b      	adds	r3, r3, r2
 8008874:	19db      	adds	r3, r3, r7
 8008876:	2201      	movs	r2, #1
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	e11e      	b.n	8008aba <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	6939      	ldr	r1, [r7, #16]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	000b      	movs	r3, r1
 800888a:	0e1b      	lsrs	r3, r3, #24
 800888c:	0010      	movs	r0, r2
 800888e:	0205      	lsls	r5, r0, #8
 8008890:	431d      	orrs	r5, r3
 8008892:	000b      	movs	r3, r1
 8008894:	021c      	lsls	r4, r3, #8
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68b8      	ldr	r0, [r7, #8]
 80088a4:	68f9      	ldr	r1, [r7, #12]
 80088a6:	1900      	adds	r0, r0, r4
 80088a8:	4169      	adcs	r1, r5
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f7f7 fe00 	bl	80004bc <__aeabi_uldivmod>
 80088bc:	0002      	movs	r2, r0
 80088be:	000b      	movs	r3, r1
 80088c0:	0013      	movs	r3, r2
 80088c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c6:	23c0      	movs	r3, #192	; 0xc0
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d309      	bcc.n	80088e2 <UART_SetConfig+0x332>
 80088ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	035b      	lsls	r3, r3, #13
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d204      	bcs.n	80088e2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088de:	60da      	str	r2, [r3, #12]
 80088e0:	e0eb      	b.n	8008aba <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80088e2:	231a      	movs	r3, #26
 80088e4:	2218      	movs	r2, #24
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	19db      	adds	r3, r3, r7
 80088ea:	2201      	movs	r2, #1
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	e0e4      	b.n	8008aba <UART_SetConfig+0x50a>
 80088f0:	efff69f3 	.word	0xefff69f3
 80088f4:	ffffcfff 	.word	0xffffcfff
 80088f8:	40004800 	.word	0x40004800
 80088fc:	fffff4ff 	.word	0xfffff4ff
 8008900:	40013800 	.word	0x40013800
 8008904:	40021000 	.word	0x40021000
 8008908:	40004400 	.word	0x40004400
 800890c:	40004c00 	.word	0x40004c00
 8008910:	40005000 	.word	0x40005000
 8008914:	003d0900 	.word	0x003d0900
 8008918:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	69da      	ldr	r2, [r3, #28]
 8008920:	2380      	movs	r3, #128	; 0x80
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	429a      	cmp	r2, r3
 8008926:	d000      	beq.n	800892a <UART_SetConfig+0x37a>
 8008928:	e070      	b.n	8008a0c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800892a:	231b      	movs	r3, #27
 800892c:	2218      	movs	r2, #24
 800892e:	189b      	adds	r3, r3, r2
 8008930:	19db      	adds	r3, r3, r7
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b08      	cmp	r3, #8
 8008936:	d822      	bhi.n	800897e <UART_SetConfig+0x3ce>
 8008938:	009a      	lsls	r2, r3, #2
 800893a:	4b67      	ldr	r3, [pc, #412]	; (8008ad8 <UART_SetConfig+0x528>)
 800893c:	18d3      	adds	r3, r2, r3
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008942:	f7fd fec9 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 8008946:	0003      	movs	r3, r0
 8008948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800894a:	e021      	b.n	8008990 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800894c:	f7fd feda 	bl	8006704 <HAL_RCC_GetPCLK2Freq>
 8008950:	0003      	movs	r3, r0
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008954:	e01c      	b.n	8008990 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008956:	4b61      	ldr	r3, [pc, #388]	; (8008adc <UART_SetConfig+0x52c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2210      	movs	r2, #16
 800895c:	4013      	ands	r3, r2
 800895e:	d002      	beq.n	8008966 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008960:	4b5f      	ldr	r3, [pc, #380]	; (8008ae0 <UART_SetConfig+0x530>)
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008964:	e014      	b.n	8008990 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8008966:	4b5f      	ldr	r3, [pc, #380]	; (8008ae4 <UART_SetConfig+0x534>)
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800896a:	e011      	b.n	8008990 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800896c:	f7fd fe04 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8008970:	0003      	movs	r3, r0
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008974:	e00c      	b.n	8008990 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008976:	2380      	movs	r3, #128	; 0x80
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800897c:	e008      	b.n	8008990 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008982:	231a      	movs	r3, #26
 8008984:	2218      	movs	r2, #24
 8008986:	189b      	adds	r3, r3, r2
 8008988:	19db      	adds	r3, r3, r7
 800898a:	2201      	movs	r2, #1
 800898c:	701a      	strb	r2, [r3, #0]
        break;
 800898e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d100      	bne.n	8008998 <UART_SetConfig+0x3e8>
 8008996:	e090      	b.n	8008aba <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	005a      	lsls	r2, r3, #1
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	085b      	lsrs	r3, r3, #1
 80089a2:	18d2      	adds	r2, r2, r3
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	0019      	movs	r1, r3
 80089aa:	0010      	movs	r0, r2
 80089ac:	f7f7 fbd2 	bl	8000154 <__udivsi3>
 80089b0:	0003      	movs	r3, r0
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	2b0f      	cmp	r3, #15
 80089b8:	d921      	bls.n	80089fe <UART_SetConfig+0x44e>
 80089ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089bc:	2380      	movs	r3, #128	; 0x80
 80089be:	025b      	lsls	r3, r3, #9
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d21c      	bcs.n	80089fe <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	200e      	movs	r0, #14
 80089ca:	2418      	movs	r4, #24
 80089cc:	1903      	adds	r3, r0, r4
 80089ce:	19db      	adds	r3, r3, r7
 80089d0:	210f      	movs	r1, #15
 80089d2:	438a      	bics	r2, r1
 80089d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	085b      	lsrs	r3, r3, #1
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2207      	movs	r2, #7
 80089de:	4013      	ands	r3, r2
 80089e0:	b299      	uxth	r1, r3
 80089e2:	1903      	adds	r3, r0, r4
 80089e4:	19db      	adds	r3, r3, r7
 80089e6:	1902      	adds	r2, r0, r4
 80089e8:	19d2      	adds	r2, r2, r7
 80089ea:	8812      	ldrh	r2, [r2, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	1902      	adds	r2, r0, r4
 80089f6:	19d2      	adds	r2, r2, r7
 80089f8:	8812      	ldrh	r2, [r2, #0]
 80089fa:	60da      	str	r2, [r3, #12]
 80089fc:	e05d      	b.n	8008aba <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80089fe:	231a      	movs	r3, #26
 8008a00:	2218      	movs	r2, #24
 8008a02:	189b      	adds	r3, r3, r2
 8008a04:	19db      	adds	r3, r3, r7
 8008a06:	2201      	movs	r2, #1
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e056      	b.n	8008aba <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a0c:	231b      	movs	r3, #27
 8008a0e:	2218      	movs	r2, #24
 8008a10:	189b      	adds	r3, r3, r2
 8008a12:	19db      	adds	r3, r3, r7
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d822      	bhi.n	8008a60 <UART_SetConfig+0x4b0>
 8008a1a:	009a      	lsls	r2, r3, #2
 8008a1c:	4b32      	ldr	r3, [pc, #200]	; (8008ae8 <UART_SetConfig+0x538>)
 8008a1e:	18d3      	adds	r3, r2, r3
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a24:	f7fd fe58 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 8008a28:	0003      	movs	r3, r0
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a2c:	e021      	b.n	8008a72 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a2e:	f7fd fe69 	bl	8006704 <HAL_RCC_GetPCLK2Freq>
 8008a32:	0003      	movs	r3, r0
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a36:	e01c      	b.n	8008a72 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a38:	4b28      	ldr	r3, [pc, #160]	; (8008adc <UART_SetConfig+0x52c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2210      	movs	r2, #16
 8008a3e:	4013      	ands	r3, r2
 8008a40:	d002      	beq.n	8008a48 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008a42:	4b27      	ldr	r3, [pc, #156]	; (8008ae0 <UART_SetConfig+0x530>)
 8008a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a46:	e014      	b.n	8008a72 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8008a48:	4b26      	ldr	r3, [pc, #152]	; (8008ae4 <UART_SetConfig+0x534>)
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a4c:	e011      	b.n	8008a72 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4e:	f7fd fd93 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8008a52:	0003      	movs	r3, r0
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a56:	e00c      	b.n	8008a72 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a58:	2380      	movs	r3, #128	; 0x80
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a5e:	e008      	b.n	8008a72 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008a64:	231a      	movs	r3, #26
 8008a66:	2218      	movs	r2, #24
 8008a68:	189b      	adds	r3, r3, r2
 8008a6a:	19db      	adds	r3, r3, r7
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	701a      	strb	r2, [r3, #0]
        break;
 8008a70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d020      	beq.n	8008aba <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	085a      	lsrs	r2, r3, #1
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	18d2      	adds	r2, r2, r3
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	0019      	movs	r1, r3
 8008a88:	0010      	movs	r0, r2
 8008a8a:	f7f7 fb63 	bl	8000154 <__udivsi3>
 8008a8e:	0003      	movs	r3, r0
 8008a90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	2b0f      	cmp	r3, #15
 8008a96:	d90a      	bls.n	8008aae <UART_SetConfig+0x4fe>
 8008a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a9a:	2380      	movs	r3, #128	; 0x80
 8008a9c:	025b      	lsls	r3, r3, #9
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d205      	bcs.n	8008aae <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60da      	str	r2, [r3, #12]
 8008aac:	e005      	b.n	8008aba <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008aae:	231a      	movs	r3, #26
 8008ab0:	2218      	movs	r2, #24
 8008ab2:	189b      	adds	r3, r3, r2
 8008ab4:	19db      	adds	r3, r3, r7
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2200      	movs	r2, #0
 8008abe:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008ac6:	231a      	movs	r3, #26
 8008ac8:	2218      	movs	r2, #24
 8008aca:	189b      	adds	r3, r3, r2
 8008acc:	19db      	adds	r3, r3, r7
 8008ace:	781b      	ldrb	r3, [r3, #0]
}
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b00e      	add	sp, #56	; 0x38
 8008ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ad8:	0800cbdc 	.word	0x0800cbdc
 8008adc:	40021000 	.word	0x40021000
 8008ae0:	003d0900 	.word	0x003d0900
 8008ae4:	00f42400 	.word	0x00f42400
 8008ae8:	0800cc00 	.word	0x0800cc00

08008aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	2201      	movs	r2, #1
 8008afa:	4013      	ands	r3, r2
 8008afc:	d00b      	beq.n	8008b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	4a4a      	ldr	r2, [pc, #296]	; (8008c30 <UART_AdvFeatureConfig+0x144>)
 8008b06:	4013      	ands	r3, r2
 8008b08:	0019      	movs	r1, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	d00b      	beq.n	8008b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4a43      	ldr	r2, [pc, #268]	; (8008c34 <UART_AdvFeatureConfig+0x148>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	4013      	ands	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	4a3b      	ldr	r2, [pc, #236]	; (8008c38 <UART_AdvFeatureConfig+0x14c>)
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	0019      	movs	r1, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	2208      	movs	r2, #8
 8008b60:	4013      	ands	r3, r2
 8008b62:	d00b      	beq.n	8008b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	4a34      	ldr	r2, [pc, #208]	; (8008c3c <UART_AdvFeatureConfig+0x150>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	0019      	movs	r1, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2210      	movs	r2, #16
 8008b82:	4013      	ands	r3, r2
 8008b84:	d00b      	beq.n	8008b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	4a2c      	ldr	r2, [pc, #176]	; (8008c40 <UART_AdvFeatureConfig+0x154>)
 8008b8e:	4013      	ands	r3, r2
 8008b90:	0019      	movs	r1, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	d00b      	beq.n	8008bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	4a25      	ldr	r2, [pc, #148]	; (8008c44 <UART_AdvFeatureConfig+0x158>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	0019      	movs	r1, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	2240      	movs	r2, #64	; 0x40
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	d01d      	beq.n	8008c06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	4a1d      	ldr	r2, [pc, #116]	; (8008c48 <UART_AdvFeatureConfig+0x15c>)
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	0019      	movs	r1, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be6:	2380      	movs	r3, #128	; 0x80
 8008be8:	035b      	lsls	r3, r3, #13
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d10b      	bne.n	8008c06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <UART_AdvFeatureConfig+0x160>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	2280      	movs	r2, #128	; 0x80
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	d00b      	beq.n	8008c28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <UART_AdvFeatureConfig+0x164>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	0019      	movs	r1, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }
}
 8008c28:	46c0      	nop			; (mov r8, r8)
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	fffdffff 	.word	0xfffdffff
 8008c34:	fffeffff 	.word	0xfffeffff
 8008c38:	fffbffff 	.word	0xfffbffff
 8008c3c:	ffff7fff 	.word	0xffff7fff
 8008c40:	ffffefff 	.word	0xffffefff
 8008c44:	ffffdfff 	.word	0xffffdfff
 8008c48:	ffefffff 	.word	0xffefffff
 8008c4c:	ff9fffff 	.word	0xff9fffff
 8008c50:	fff7ffff 	.word	0xfff7ffff

08008c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b092      	sub	sp, #72	; 0x48
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2284      	movs	r2, #132	; 0x84
 8008c60:	2100      	movs	r1, #0
 8008c62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c64:	f7fc fc20 	bl	80054a8 <HAL_GetTick>
 8008c68:	0003      	movs	r3, r0
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2208      	movs	r2, #8
 8008c74:	4013      	ands	r3, r2
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d12c      	bne.n	8008cd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7c:	2280      	movs	r2, #128	; 0x80
 8008c7e:	0391      	lsls	r1, r2, #14
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4a46      	ldr	r2, [pc, #280]	; (8008d9c <UART_CheckIdleState+0x148>)
 8008c84:	9200      	str	r2, [sp, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f000 f88c 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 8008c8c:	1e03      	subs	r3, r0, #0
 8008c8e:	d021      	beq.n	8008cd4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c90:	f3ef 8310 	mrs	r3, PRIMASK
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	f383 8810 	msr	PRIMASK, r3
}
 8008ca4:	46c0      	nop			; (mov r8, r8)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2180      	movs	r1, #128	; 0x80
 8008cb2:	438a      	bics	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	f383 8810 	msr	PRIMASK, r3
}
 8008cc0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2278      	movs	r2, #120	; 0x78
 8008ccc:	2100      	movs	r1, #0
 8008cce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e05f      	b.n	8008d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2204      	movs	r2, #4
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	d146      	bne.n	8008d70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	2280      	movs	r2, #128	; 0x80
 8008ce6:	03d1      	lsls	r1, r2, #15
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	4a2c      	ldr	r2, [pc, #176]	; (8008d9c <UART_CheckIdleState+0x148>)
 8008cec:	9200      	str	r2, [sp, #0]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f000 f858 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 8008cf4:	1e03      	subs	r3, r0, #0
 8008cf6:	d03b      	beq.n	8008d70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
 8008d02:	2301      	movs	r3, #1
 8008d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f383 8810 	msr	PRIMASK, r3
}
 8008d0c:	46c0      	nop			; (mov r8, r8)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4921      	ldr	r1, [pc, #132]	; (8008da0 <UART_CheckIdleState+0x14c>)
 8008d1a:	400a      	ands	r2, r1
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f383 8810 	msr	PRIMASK, r3
}
 8008d28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	633b      	str	r3, [r7, #48]	; 0x30
 8008d34:	2301      	movs	r3, #1
 8008d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f383 8810 	msr	PRIMASK, r3
}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	438a      	bics	r2, r1
 8008d4e:	609a      	str	r2, [r3, #8]
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	f383 8810 	msr	PRIMASK, r3
}
 8008d5a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2280      	movs	r2, #128	; 0x80
 8008d60:	2120      	movs	r1, #32
 8008d62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2278      	movs	r2, #120	; 0x78
 8008d68:	2100      	movs	r1, #0
 8008d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e011      	b.n	8008d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2280      	movs	r2, #128	; 0x80
 8008d7a:	2120      	movs	r1, #32
 8008d7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2278      	movs	r2, #120	; 0x78
 8008d8e:	2100      	movs	r1, #0
 8008d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	0018      	movs	r0, r3
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b010      	add	sp, #64	; 0x40
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	01ffffff 	.word	0x01ffffff
 8008da0:	fffffedf 	.word	0xfffffedf

08008da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	1dfb      	adds	r3, r7, #7
 8008db2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db4:	e04b      	b.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	3301      	adds	r3, #1
 8008dba:	d048      	beq.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dbc:	f7fc fb74 	bl	80054a8 <HAL_GetTick>
 8008dc0:	0002      	movs	r2, r0
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d302      	bcc.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e04b      	b.n	8008e6e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2204      	movs	r2, #4
 8008dde:	4013      	ands	r3, r2
 8008de0:	d035      	beq.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	2208      	movs	r2, #8
 8008dea:	4013      	ands	r3, r2
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d111      	bne.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2208      	movs	r2, #8
 8008df6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f000 f906 	bl	800900c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2284      	movs	r2, #132	; 0x84
 8008e04:	2108      	movs	r1, #8
 8008e06:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2278      	movs	r2, #120	; 0x78
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e02c      	b.n	8008e6e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69da      	ldr	r2, [r3, #28]
 8008e1a:	2380      	movs	r3, #128	; 0x80
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	401a      	ands	r2, r3
 8008e20:	2380      	movs	r3, #128	; 0x80
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d112      	bne.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2280      	movs	r2, #128	; 0x80
 8008e2e:	0112      	lsls	r2, r2, #4
 8008e30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	0018      	movs	r0, r3
 8008e36:	f000 f8e9 	bl	800900c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2284      	movs	r2, #132	; 0x84
 8008e3e:	2120      	movs	r1, #32
 8008e40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2278      	movs	r2, #120	; 0x78
 8008e46:	2100      	movs	r1, #0
 8008e48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e00f      	b.n	8008e6e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	4013      	ands	r3, r2
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	425a      	negs	r2, r3
 8008e5e:	4153      	adcs	r3, r2
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	001a      	movs	r2, r3
 8008e64:	1dfb      	adds	r3, r7, #7
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d0a4      	beq.n	8008db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	0018      	movs	r0, r3
 8008e70:	46bd      	mov	sp, r7
 8008e72:	b004      	add	sp, #16
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b090      	sub	sp, #64	; 0x40
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	1dbb      	adds	r3, r7, #6
 8008e84:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	1dba      	adds	r2, r7, #6
 8008e90:	2158      	movs	r1, #88	; 0x58
 8008e92:	8812      	ldrh	r2, [r2, #0]
 8008e94:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	1dba      	adds	r2, r7, #6
 8008e9a:	215a      	movs	r1, #90	; 0x5a
 8008e9c:	8812      	ldrh	r2, [r2, #0]
 8008e9e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	2380      	movs	r3, #128	; 0x80
 8008eac:	015b      	lsls	r3, r3, #5
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d10d      	bne.n	8008ece <UART_Start_Receive_IT+0x56>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <UART_Start_Receive_IT+0x4c>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	225c      	movs	r2, #92	; 0x5c
 8008ebe:	4950      	ldr	r1, [pc, #320]	; (8009000 <UART_Start_Receive_IT+0x188>)
 8008ec0:	5299      	strh	r1, [r3, r2]
 8008ec2:	e02e      	b.n	8008f22 <UART_Start_Receive_IT+0xaa>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	225c      	movs	r2, #92	; 0x5c
 8008ec8:	21ff      	movs	r1, #255	; 0xff
 8008eca:	5299      	strh	r1, [r3, r2]
 8008ecc:	e029      	b.n	8008f22 <UART_Start_Receive_IT+0xaa>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10d      	bne.n	8008ef2 <UART_Start_Receive_IT+0x7a>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d104      	bne.n	8008ee8 <UART_Start_Receive_IT+0x70>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	225c      	movs	r2, #92	; 0x5c
 8008ee2:	21ff      	movs	r1, #255	; 0xff
 8008ee4:	5299      	strh	r1, [r3, r2]
 8008ee6:	e01c      	b.n	8008f22 <UART_Start_Receive_IT+0xaa>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	225c      	movs	r2, #92	; 0x5c
 8008eec:	217f      	movs	r1, #127	; 0x7f
 8008eee:	5299      	strh	r1, [r3, r2]
 8008ef0:	e017      	b.n	8008f22 <UART_Start_Receive_IT+0xaa>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	2380      	movs	r3, #128	; 0x80
 8008ef8:	055b      	lsls	r3, r3, #21
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d10d      	bne.n	8008f1a <UART_Start_Receive_IT+0xa2>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d104      	bne.n	8008f10 <UART_Start_Receive_IT+0x98>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	225c      	movs	r2, #92	; 0x5c
 8008f0a:	217f      	movs	r1, #127	; 0x7f
 8008f0c:	5299      	strh	r1, [r3, r2]
 8008f0e:	e008      	b.n	8008f22 <UART_Start_Receive_IT+0xaa>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	225c      	movs	r2, #92	; 0x5c
 8008f14:	213f      	movs	r1, #63	; 0x3f
 8008f16:	5299      	strh	r1, [r3, r2]
 8008f18:	e003      	b.n	8008f22 <UART_Start_Receive_IT+0xaa>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	225c      	movs	r2, #92	; 0x5c
 8008f1e:	2100      	movs	r1, #0
 8008f20:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2284      	movs	r2, #132	; 0x84
 8008f26:	2100      	movs	r1, #0
 8008f28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2280      	movs	r2, #128	; 0x80
 8008f2e:	2122      	movs	r1, #34	; 0x22
 8008f30:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f32:	f3ef 8310 	mrs	r3, PRIMASK
 8008f36:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	f383 8810 	msr	PRIMASK, r3
}
 8008f46:	46c0      	nop			; (mov r8, r8)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2101      	movs	r1, #1
 8008f54:	430a      	orrs	r2, r1
 8008f56:	609a      	str	r2, [r3, #8]
 8008f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	f383 8810 	msr	PRIMASK, r3
}
 8008f62:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	2380      	movs	r3, #128	; 0x80
 8008f6a:	015b      	lsls	r3, r3, #5
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d107      	bne.n	8008f80 <UART_Start_Receive_IT+0x108>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d103      	bne.n	8008f80 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4a22      	ldr	r2, [pc, #136]	; (8009004 <UART_Start_Receive_IT+0x18c>)
 8008f7c:	669a      	str	r2, [r3, #104]	; 0x68
 8008f7e:	e002      	b.n	8008f86 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4a21      	ldr	r2, [pc, #132]	; (8009008 <UART_Start_Receive_IT+0x190>)
 8008f84:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d019      	beq.n	8008fc2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f92:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f94:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008f96:	637b      	str	r3, [r7, #52]	; 0x34
 8008f98:	2301      	movs	r3, #1
 8008f9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	f383 8810 	msr	PRIMASK, r3
}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2190      	movs	r1, #144	; 0x90
 8008fb0:	0049      	lsls	r1, r1, #1
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	f383 8810 	msr	PRIMASK, r3
}
 8008fc0:	e018      	b.n	8008ff4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc6:	613b      	str	r3, [r7, #16]
  return(result);
 8008fc8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f383 8810 	msr	PRIMASK, r3
}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2120      	movs	r1, #32
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f383 8810 	msr	PRIMASK, r3
}
 8008ff2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	b010      	add	sp, #64	; 0x40
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	000001ff 	.word	0x000001ff
 8009004:	0800931d 	.word	0x0800931d
 8009008:	08009159 	.word	0x08009159

0800900c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08e      	sub	sp, #56	; 0x38
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009014:	f3ef 8310 	mrs	r3, PRIMASK
 8009018:	617b      	str	r3, [r7, #20]
  return(result);
 800901a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
 800901e:	2301      	movs	r3, #1
 8009020:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	f383 8810 	msr	PRIMASK, r3
}
 8009028:	46c0      	nop			; (mov r8, r8)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4926      	ldr	r1, [pc, #152]	; (80090d0 <UART_EndRxTransfer+0xc4>)
 8009036:	400a      	ands	r2, r1
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	f383 8810 	msr	PRIMASK, r3
}
 8009044:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009046:	f3ef 8310 	mrs	r3, PRIMASK
 800904a:	623b      	str	r3, [r7, #32]
  return(result);
 800904c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904e:	633b      	str	r3, [r7, #48]	; 0x30
 8009050:	2301      	movs	r3, #1
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	f383 8810 	msr	PRIMASK, r3
}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2101      	movs	r1, #1
 8009068:	438a      	bics	r2, r1
 800906a:	609a      	str	r2, [r3, #8]
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	f383 8810 	msr	PRIMASK, r3
}
 8009076:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907c:	2b01      	cmp	r3, #1
 800907e:	d118      	bne.n	80090b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009080:	f3ef 8310 	mrs	r3, PRIMASK
 8009084:	60bb      	str	r3, [r7, #8]
  return(result);
 8009086:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800908a:	2301      	movs	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f383 8810 	msr	PRIMASK, r3
}
 8009094:	46c0      	nop			; (mov r8, r8)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2110      	movs	r1, #16
 80090a2:	438a      	bics	r2, r1
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f383 8810 	msr	PRIMASK, r3
}
 80090b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2280      	movs	r2, #128	; 0x80
 80090b6:	2120      	movs	r1, #32
 80090b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	46bd      	mov	sp, r7
 80090ca:	b00e      	add	sp, #56	; 0x38
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	fffffedf 	.word	0xfffffedf

080090d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	225a      	movs	r2, #90	; 0x5a
 80090e6:	2100      	movs	r1, #0
 80090e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2252      	movs	r2, #82	; 0x52
 80090ee:	2100      	movs	r1, #0
 80090f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	0018      	movs	r0, r3
 80090f6:	f7ff fa47 	bl	8008588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	46bd      	mov	sp, r7
 80090fe:	b004      	add	sp, #16
 8009100:	bd80      	pop	{r7, pc}

08009102 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800910a:	f3ef 8310 	mrs	r3, PRIMASK
 800910e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009110:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	2301      	movs	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f383 8810 	msr	PRIMASK, r3
}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2140      	movs	r1, #64	; 0x40
 800912c:	438a      	bics	r2, r1
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f383 8810 	msr	PRIMASK, r3
}
 800913a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	0018      	movs	r0, r3
 800914c:	f7ff fa14 	bl	8008578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009150:	46c0      	nop			; (mov r8, r8)
 8009152:	46bd      	mov	sp, r7
 8009154:	b006      	add	sp, #24
 8009156:	bd80      	pop	{r7, pc}

08009158 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b094      	sub	sp, #80	; 0x50
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009160:	204e      	movs	r0, #78	; 0x4e
 8009162:	183b      	adds	r3, r7, r0
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	215c      	movs	r1, #92	; 0x5c
 8009168:	5a52      	ldrh	r2, [r2, r1]
 800916a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2280      	movs	r2, #128	; 0x80
 8009170:	589b      	ldr	r3, [r3, r2]
 8009172:	2b22      	cmp	r3, #34	; 0x22
 8009174:	d000      	beq.n	8009178 <UART_RxISR_8BIT+0x20>
 8009176:	e0bf      	b.n	80092f8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800917e:	214c      	movs	r1, #76	; 0x4c
 8009180:	187b      	adds	r3, r7, r1
 8009182:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009184:	187b      	adds	r3, r7, r1
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b2da      	uxtb	r2, r3
 800918a:	183b      	adds	r3, r7, r0
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b2d9      	uxtb	r1, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009194:	400a      	ands	r2, r1
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	225a      	movs	r2, #90	; 0x5a
 80091a8:	5a9b      	ldrh	r3, [r3, r2]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b299      	uxth	r1, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	225a      	movs	r2, #90	; 0x5a
 80091b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	225a      	movs	r2, #90	; 0x5a
 80091ba:	5a9b      	ldrh	r3, [r3, r2]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d000      	beq.n	80091c4 <UART_RxISR_8BIT+0x6c>
 80091c2:	e0a1      	b.n	8009308 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c4:	f3ef 8310 	mrs	r3, PRIMASK
 80091c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ce:	2301      	movs	r3, #1
 80091d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	f383 8810 	msr	PRIMASK, r3
}
 80091d8:	46c0      	nop			; (mov r8, r8)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	494a      	ldr	r1, [pc, #296]	; (8009310 <UART_RxISR_8BIT+0x1b8>)
 80091e6:	400a      	ands	r2, r1
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	f383 8810 	msr	PRIMASK, r3
}
 80091f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f6:	f3ef 8310 	mrs	r3, PRIMASK
 80091fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80091fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009200:	2301      	movs	r3, #1
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	f383 8810 	msr	PRIMASK, r3
}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2101      	movs	r1, #1
 8009218:	438a      	bics	r2, r1
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800921e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	f383 8810 	msr	PRIMASK, r3
}
 8009226:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2280      	movs	r2, #128	; 0x80
 800922c:	2120      	movs	r1, #32
 800922e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a34      	ldr	r2, [pc, #208]	; (8009314 <UART_RxISR_8BIT+0x1bc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d01f      	beq.n	8009286 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	2380      	movs	r3, #128	; 0x80
 800924e:	041b      	lsls	r3, r3, #16
 8009250:	4013      	ands	r3, r2
 8009252:	d018      	beq.n	8009286 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009254:	f3ef 8310 	mrs	r3, PRIMASK
 8009258:	61bb      	str	r3, [r7, #24]
  return(result);
 800925a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800925c:	643b      	str	r3, [r7, #64]	; 0x40
 800925e:	2301      	movs	r3, #1
 8009260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	f383 8810 	msr	PRIMASK, r3
}
 8009268:	46c0      	nop			; (mov r8, r8)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4928      	ldr	r1, [pc, #160]	; (8009318 <UART_RxISR_8BIT+0x1c0>)
 8009276:	400a      	ands	r2, r1
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800927c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	f383 8810 	msr	PRIMASK, r3
}
 8009284:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800928a:	2b01      	cmp	r3, #1
 800928c:	d12f      	bne.n	80092ee <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009294:	f3ef 8310 	mrs	r3, PRIMASK
 8009298:	60fb      	str	r3, [r7, #12]
  return(result);
 800929a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929e:	2301      	movs	r3, #1
 80092a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f383 8810 	msr	PRIMASK, r3
}
 80092a8:	46c0      	nop			; (mov r8, r8)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2110      	movs	r1, #16
 80092b6:	438a      	bics	r2, r1
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f383 8810 	msr	PRIMASK, r3
}
 80092c4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	2210      	movs	r2, #16
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d103      	bne.n	80092dc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2210      	movs	r2, #16
 80092da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2258      	movs	r2, #88	; 0x58
 80092e0:	5a9a      	ldrh	r2, [r3, r2]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	0011      	movs	r1, r2
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7ff f956 	bl	8008598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092ec:	e00c      	b.n	8009308 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7f9 f8d9 	bl	80024a8 <HAL_UART_RxCpltCallback>
}
 80092f6:	e007      	b.n	8009308 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	699a      	ldr	r2, [r3, #24]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2108      	movs	r1, #8
 8009304:	430a      	orrs	r2, r1
 8009306:	619a      	str	r2, [r3, #24]
}
 8009308:	46c0      	nop			; (mov r8, r8)
 800930a:	46bd      	mov	sp, r7
 800930c:	b014      	add	sp, #80	; 0x50
 800930e:	bd80      	pop	{r7, pc}
 8009310:	fffffedf 	.word	0xfffffedf
 8009314:	40004800 	.word	0x40004800
 8009318:	fbffffff 	.word	0xfbffffff

0800931c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b094      	sub	sp, #80	; 0x50
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009324:	204e      	movs	r0, #78	; 0x4e
 8009326:	183b      	adds	r3, r7, r0
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	215c      	movs	r1, #92	; 0x5c
 800932c:	5a52      	ldrh	r2, [r2, r1]
 800932e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2280      	movs	r2, #128	; 0x80
 8009334:	589b      	ldr	r3, [r3, r2]
 8009336:	2b22      	cmp	r3, #34	; 0x22
 8009338:	d000      	beq.n	800933c <UART_RxISR_16BIT+0x20>
 800933a:	e0bf      	b.n	80094bc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009342:	214c      	movs	r1, #76	; 0x4c
 8009344:	187b      	adds	r3, r7, r1
 8009346:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800934c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800934e:	187b      	adds	r3, r7, r1
 8009350:	183a      	adds	r2, r7, r0
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	8812      	ldrh	r2, [r2, #0]
 8009356:	4013      	ands	r3, r2
 8009358:	b29a      	uxth	r2, r3
 800935a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800935c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009362:	1c9a      	adds	r2, r3, #2
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	225a      	movs	r2, #90	; 0x5a
 800936c:	5a9b      	ldrh	r3, [r3, r2]
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b299      	uxth	r1, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	225a      	movs	r2, #90	; 0x5a
 8009378:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	225a      	movs	r2, #90	; 0x5a
 800937e:	5a9b      	ldrh	r3, [r3, r2]
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d000      	beq.n	8009388 <UART_RxISR_16BIT+0x6c>
 8009386:	e0a1      	b.n	80094cc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009388:	f3ef 8310 	mrs	r3, PRIMASK
 800938c:	623b      	str	r3, [r7, #32]
  return(result);
 800938e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009390:	647b      	str	r3, [r7, #68]	; 0x44
 8009392:	2301      	movs	r3, #1
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	f383 8810 	msr	PRIMASK, r3
}
 800939c:	46c0      	nop			; (mov r8, r8)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	494a      	ldr	r1, [pc, #296]	; (80094d4 <UART_RxISR_16BIT+0x1b8>)
 80093aa:	400a      	ands	r2, r1
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	f383 8810 	msr	PRIMASK, r3
}
 80093b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ba:	f3ef 8310 	mrs	r3, PRIMASK
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c2:	643b      	str	r3, [r7, #64]	; 0x40
 80093c4:	2301      	movs	r3, #1
 80093c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	f383 8810 	msr	PRIMASK, r3
}
 80093ce:	46c0      	nop			; (mov r8, r8)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689a      	ldr	r2, [r3, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2101      	movs	r1, #1
 80093dc:	438a      	bics	r2, r1
 80093de:	609a      	str	r2, [r3, #8]
 80093e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	f383 8810 	msr	PRIMASK, r3
}
 80093ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2280      	movs	r2, #128	; 0x80
 80093f0:	2120      	movs	r1, #32
 80093f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a34      	ldr	r2, [pc, #208]	; (80094d8 <UART_RxISR_16BIT+0x1bc>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d01f      	beq.n	800944a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	2380      	movs	r3, #128	; 0x80
 8009412:	041b      	lsls	r3, r3, #16
 8009414:	4013      	ands	r3, r2
 8009416:	d018      	beq.n	800944a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009418:	f3ef 8310 	mrs	r3, PRIMASK
 800941c:	617b      	str	r3, [r7, #20]
  return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009422:	2301      	movs	r3, #1
 8009424:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	f383 8810 	msr	PRIMASK, r3
}
 800942c:	46c0      	nop			; (mov r8, r8)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4928      	ldr	r1, [pc, #160]	; (80094dc <UART_RxISR_16BIT+0x1c0>)
 800943a:	400a      	ands	r2, r1
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f383 8810 	msr	PRIMASK, r3
}
 8009448:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800944e:	2b01      	cmp	r3, #1
 8009450:	d12f      	bne.n	80094b2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009458:	f3ef 8310 	mrs	r3, PRIMASK
 800945c:	60bb      	str	r3, [r7, #8]
  return(result);
 800945e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009460:	63bb      	str	r3, [r7, #56]	; 0x38
 8009462:	2301      	movs	r3, #1
 8009464:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f383 8810 	msr	PRIMASK, r3
}
 800946c:	46c0      	nop			; (mov r8, r8)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2110      	movs	r1, #16
 800947a:	438a      	bics	r2, r1
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f383 8810 	msr	PRIMASK, r3
}
 8009488:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	2210      	movs	r2, #16
 8009492:	4013      	ands	r3, r2
 8009494:	2b10      	cmp	r3, #16
 8009496:	d103      	bne.n	80094a0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2210      	movs	r2, #16
 800949e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2258      	movs	r2, #88	; 0x58
 80094a4:	5a9a      	ldrh	r2, [r3, r2]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	0011      	movs	r1, r2
 80094aa:	0018      	movs	r0, r3
 80094ac:	f7ff f874 	bl	8008598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094b0:	e00c      	b.n	80094cc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	0018      	movs	r0, r3
 80094b6:	f7f8 fff7 	bl	80024a8 <HAL_UART_RxCpltCallback>
}
 80094ba:	e007      	b.n	80094cc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2108      	movs	r1, #8
 80094c8:	430a      	orrs	r2, r1
 80094ca:	619a      	str	r2, [r3, #24]
}
 80094cc:	46c0      	nop			; (mov r8, r8)
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b014      	add	sp, #80	; 0x50
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	fffffedf 	.word	0xfffffedf
 80094d8:	40004800 	.word	0x40004800
 80094dc:	fbffffff 	.word	0xfbffffff

080094e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094e8:	46c0      	nop			; (mov r8, r8)
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b002      	add	sp, #8
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <findslot>:
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <findslot+0x2c>)
 80094f2:	b510      	push	{r4, lr}
 80094f4:	0004      	movs	r4, r0
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d004      	beq.n	8009506 <findslot+0x16>
 80094fc:	6a03      	ldr	r3, [r0, #32]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <findslot+0x16>
 8009502:	f001 faeb 	bl	800aadc <__sinit>
 8009506:	2000      	movs	r0, #0
 8009508:	2c13      	cmp	r4, #19
 800950a:	d805      	bhi.n	8009518 <findslot+0x28>
 800950c:	4b04      	ldr	r3, [pc, #16]	; (8009520 <findslot+0x30>)
 800950e:	00e4      	lsls	r4, r4, #3
 8009510:	58e2      	ldr	r2, [r4, r3]
 8009512:	3201      	adds	r2, #1
 8009514:	d000      	beq.n	8009518 <findslot+0x28>
 8009516:	18e0      	adds	r0, r4, r3
 8009518:	bd10      	pop	{r4, pc}
 800951a:	46c0      	nop			; (mov r8, r8)
 800951c:	200001e4 	.word	0x200001e4
 8009520:	20000d30 	.word	0x20000d30

08009524 <error>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	0004      	movs	r4, r0
 8009528:	f001 fbe0 	bl	800acec <__errno>
 800952c:	2613      	movs	r6, #19
 800952e:	0005      	movs	r5, r0
 8009530:	2700      	movs	r7, #0
 8009532:	1c30      	adds	r0, r6, #0
 8009534:	1c39      	adds	r1, r7, #0
 8009536:	beab      	bkpt	0x00ab
 8009538:	1c06      	adds	r6, r0, #0
 800953a:	602e      	str	r6, [r5, #0]
 800953c:	0020      	movs	r0, r4
 800953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009540 <checkerror>:
 8009540:	b510      	push	{r4, lr}
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	d101      	bne.n	800954a <checkerror+0xa>
 8009546:	f7ff ffed 	bl	8009524 <error>
 800954a:	bd10      	pop	{r4, pc}

0800954c <_swiread>:
 800954c:	b530      	push	{r4, r5, lr}
 800954e:	b085      	sub	sp, #20
 8009550:	ad01      	add	r5, sp, #4
 8009552:	9001      	str	r0, [sp, #4]
 8009554:	9102      	str	r1, [sp, #8]
 8009556:	9203      	str	r2, [sp, #12]
 8009558:	2406      	movs	r4, #6
 800955a:	1c20      	adds	r0, r4, #0
 800955c:	1c29      	adds	r1, r5, #0
 800955e:	beab      	bkpt	0x00ab
 8009560:	1c04      	adds	r4, r0, #0
 8009562:	0020      	movs	r0, r4
 8009564:	f7ff ffec 	bl	8009540 <checkerror>
 8009568:	b005      	add	sp, #20
 800956a:	bd30      	pop	{r4, r5, pc}

0800956c <_read>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	000e      	movs	r6, r1
 8009570:	0015      	movs	r5, r2
 8009572:	f7ff ffbd 	bl	80094f0 <findslot>
 8009576:	1e04      	subs	r4, r0, #0
 8009578:	d106      	bne.n	8009588 <_read+0x1c>
 800957a:	f001 fbb7 	bl	800acec <__errno>
 800957e:	2309      	movs	r3, #9
 8009580:	6003      	str	r3, [r0, #0]
 8009582:	2001      	movs	r0, #1
 8009584:	4240      	negs	r0, r0
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	002a      	movs	r2, r5
 800958a:	0031      	movs	r1, r6
 800958c:	6800      	ldr	r0, [r0, #0]
 800958e:	f7ff ffdd 	bl	800954c <_swiread>
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	d0f7      	beq.n	8009586 <_read+0x1a>
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	1a28      	subs	r0, r5, r0
 800959a:	181b      	adds	r3, r3, r0
 800959c:	6063      	str	r3, [r4, #4]
 800959e:	e7f2      	b.n	8009586 <_read+0x1a>

080095a0 <_swilseek>:
 80095a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095a2:	000c      	movs	r4, r1
 80095a4:	0016      	movs	r6, r2
 80095a6:	f7ff ffa3 	bl	80094f0 <findslot>
 80095aa:	1e05      	subs	r5, r0, #0
 80095ac:	d107      	bne.n	80095be <_swilseek+0x1e>
 80095ae:	f001 fb9d 	bl	800acec <__errno>
 80095b2:	2309      	movs	r3, #9
 80095b4:	6003      	str	r3, [r0, #0]
 80095b6:	2401      	movs	r4, #1
 80095b8:	4264      	negs	r4, r4
 80095ba:	0020      	movs	r0, r4
 80095bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095be:	2e02      	cmp	r6, #2
 80095c0:	d903      	bls.n	80095ca <_swilseek+0x2a>
 80095c2:	f001 fb93 	bl	800acec <__errno>
 80095c6:	2316      	movs	r3, #22
 80095c8:	e7f4      	b.n	80095b4 <_swilseek+0x14>
 80095ca:	2e01      	cmp	r6, #1
 80095cc:	d112      	bne.n	80095f4 <_swilseek+0x54>
 80095ce:	6843      	ldr	r3, [r0, #4]
 80095d0:	18e4      	adds	r4, r4, r3
 80095d2:	d4f6      	bmi.n	80095c2 <_swilseek+0x22>
 80095d4:	466f      	mov	r7, sp
 80095d6:	682b      	ldr	r3, [r5, #0]
 80095d8:	260a      	movs	r6, #10
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	607c      	str	r4, [r7, #4]
 80095de:	1c30      	adds	r0, r6, #0
 80095e0:	1c39      	adds	r1, r7, #0
 80095e2:	beab      	bkpt	0x00ab
 80095e4:	1c06      	adds	r6, r0, #0
 80095e6:	0030      	movs	r0, r6
 80095e8:	f7ff ffaa 	bl	8009540 <checkerror>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	dbe2      	blt.n	80095b6 <_swilseek+0x16>
 80095f0:	606c      	str	r4, [r5, #4]
 80095f2:	e7e2      	b.n	80095ba <_swilseek+0x1a>
 80095f4:	6803      	ldr	r3, [r0, #0]
 80095f6:	2e02      	cmp	r6, #2
 80095f8:	d1ec      	bne.n	80095d4 <_swilseek+0x34>
 80095fa:	466f      	mov	r7, sp
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	360a      	adds	r6, #10
 8009600:	1c30      	adds	r0, r6, #0
 8009602:	1c39      	adds	r1, r7, #0
 8009604:	beab      	bkpt	0x00ab
 8009606:	1c06      	adds	r6, r0, #0
 8009608:	0030      	movs	r0, r6
 800960a:	f7ff ff99 	bl	8009540 <checkerror>
 800960e:	1824      	adds	r4, r4, r0
 8009610:	3001      	adds	r0, #1
 8009612:	d1df      	bne.n	80095d4 <_swilseek+0x34>
 8009614:	e7cf      	b.n	80095b6 <_swilseek+0x16>

08009616 <_lseek>:
 8009616:	b510      	push	{r4, lr}
 8009618:	f7ff ffc2 	bl	80095a0 <_swilseek>
 800961c:	bd10      	pop	{r4, pc}

0800961e <_swiwrite>:
 800961e:	b530      	push	{r4, r5, lr}
 8009620:	b085      	sub	sp, #20
 8009622:	ad01      	add	r5, sp, #4
 8009624:	9001      	str	r0, [sp, #4]
 8009626:	9102      	str	r1, [sp, #8]
 8009628:	9203      	str	r2, [sp, #12]
 800962a:	2405      	movs	r4, #5
 800962c:	1c20      	adds	r0, r4, #0
 800962e:	1c29      	adds	r1, r5, #0
 8009630:	beab      	bkpt	0x00ab
 8009632:	1c04      	adds	r4, r0, #0
 8009634:	0020      	movs	r0, r4
 8009636:	f7ff ff83 	bl	8009540 <checkerror>
 800963a:	b005      	add	sp, #20
 800963c:	bd30      	pop	{r4, r5, pc}

0800963e <_write>:
 800963e:	b570      	push	{r4, r5, r6, lr}
 8009640:	000e      	movs	r6, r1
 8009642:	0015      	movs	r5, r2
 8009644:	f7ff ff54 	bl	80094f0 <findslot>
 8009648:	1e04      	subs	r4, r0, #0
 800964a:	d106      	bne.n	800965a <_write+0x1c>
 800964c:	f001 fb4e 	bl	800acec <__errno>
 8009650:	2309      	movs	r3, #9
 8009652:	6003      	str	r3, [r0, #0]
 8009654:	2001      	movs	r0, #1
 8009656:	4240      	negs	r0, r0
 8009658:	e00f      	b.n	800967a <_write+0x3c>
 800965a:	002a      	movs	r2, r5
 800965c:	0031      	movs	r1, r6
 800965e:	6800      	ldr	r0, [r0, #0]
 8009660:	f7ff ffdd 	bl	800961e <_swiwrite>
 8009664:	1e03      	subs	r3, r0, #0
 8009666:	dbf5      	blt.n	8009654 <_write+0x16>
 8009668:	6862      	ldr	r2, [r4, #4]
 800966a:	1a28      	subs	r0, r5, r0
 800966c:	1812      	adds	r2, r2, r0
 800966e:	6062      	str	r2, [r4, #4]
 8009670:	42ab      	cmp	r3, r5
 8009672:	d102      	bne.n	800967a <_write+0x3c>
 8009674:	2000      	movs	r0, #0
 8009676:	f7ff ff55 	bl	8009524 <error>
 800967a:	bd70      	pop	{r4, r5, r6, pc}

0800967c <_swiclose>:
 800967c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800967e:	2402      	movs	r4, #2
 8009680:	9001      	str	r0, [sp, #4]
 8009682:	ad01      	add	r5, sp, #4
 8009684:	1c20      	adds	r0, r4, #0
 8009686:	1c29      	adds	r1, r5, #0
 8009688:	beab      	bkpt	0x00ab
 800968a:	1c04      	adds	r4, r0, #0
 800968c:	0020      	movs	r0, r4
 800968e:	f7ff ff57 	bl	8009540 <checkerror>
 8009692:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08009694 <_close>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	0005      	movs	r5, r0
 8009698:	f7ff ff2a 	bl	80094f0 <findslot>
 800969c:	1e04      	subs	r4, r0, #0
 800969e:	d106      	bne.n	80096ae <_close+0x1a>
 80096a0:	f001 fb24 	bl	800acec <__errno>
 80096a4:	2309      	movs	r3, #9
 80096a6:	6003      	str	r3, [r0, #0]
 80096a8:	2001      	movs	r0, #1
 80096aa:	4240      	negs	r0, r0
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
 80096ae:	3d01      	subs	r5, #1
 80096b0:	2d01      	cmp	r5, #1
 80096b2:	d809      	bhi.n	80096c8 <_close+0x34>
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_close+0x48>)
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d104      	bne.n	80096c8 <_close+0x34>
 80096be:	2301      	movs	r3, #1
 80096c0:	425b      	negs	r3, r3
 80096c2:	6003      	str	r3, [r0, #0]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7f1      	b.n	80096ac <_close+0x18>
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	f7ff ffd7 	bl	800967c <_swiclose>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d1ec      	bne.n	80096ac <_close+0x18>
 80096d2:	2301      	movs	r3, #1
 80096d4:	425b      	negs	r3, r3
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	e7e8      	b.n	80096ac <_close+0x18>
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	20000d30 	.word	0x20000d30

080096e0 <_getpid>:
 80096e0:	2001      	movs	r0, #1
 80096e2:	4770      	bx	lr

080096e4 <_swistat>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	000c      	movs	r4, r1
 80096e8:	f7ff ff02 	bl	80094f0 <findslot>
 80096ec:	1e05      	subs	r5, r0, #0
 80096ee:	d106      	bne.n	80096fe <_swistat+0x1a>
 80096f0:	f001 fafc 	bl	800acec <__errno>
 80096f4:	2309      	movs	r3, #9
 80096f6:	6003      	str	r3, [r0, #0]
 80096f8:	2001      	movs	r0, #1
 80096fa:	4240      	negs	r0, r0
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	2380      	movs	r3, #128	; 0x80
 8009700:	6862      	ldr	r2, [r4, #4]
 8009702:	019b      	lsls	r3, r3, #6
 8009704:	4313      	orrs	r3, r2
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	2380      	movs	r3, #128	; 0x80
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	260c      	movs	r6, #12
 800970e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009710:	1c30      	adds	r0, r6, #0
 8009712:	1c29      	adds	r1, r5, #0
 8009714:	beab      	bkpt	0x00ab
 8009716:	1c05      	adds	r5, r0, #0
 8009718:	0028      	movs	r0, r5
 800971a:	f7ff ff11 	bl	8009540 <checkerror>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	d0ec      	beq.n	80096fc <_swistat+0x18>
 8009722:	6120      	str	r0, [r4, #16]
 8009724:	2000      	movs	r0, #0
 8009726:	e7e9      	b.n	80096fc <_swistat+0x18>

08009728 <_fstat>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	000c      	movs	r4, r1
 800972c:	0005      	movs	r5, r0
 800972e:	2258      	movs	r2, #88	; 0x58
 8009730:	2100      	movs	r1, #0
 8009732:	0020      	movs	r0, r4
 8009734:	f001 fa52 	bl	800abdc <memset>
 8009738:	0028      	movs	r0, r5
 800973a:	0021      	movs	r1, r4
 800973c:	f7ff ffd2 	bl	80096e4 <_swistat>
 8009740:	bd70      	pop	{r4, r5, r6, pc}

08009742 <_stat>:
 8009742:	b570      	push	{r4, r5, r6, lr}
 8009744:	000d      	movs	r5, r1
 8009746:	0004      	movs	r4, r0
 8009748:	2258      	movs	r2, #88	; 0x58
 800974a:	2100      	movs	r1, #0
 800974c:	0028      	movs	r0, r5
 800974e:	f001 fa45 	bl	800abdc <memset>
 8009752:	0020      	movs	r0, r4
 8009754:	2100      	movs	r1, #0
 8009756:	f000 f813 	bl	8009780 <_swiopen>
 800975a:	0004      	movs	r4, r0
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d00c      	beq.n	800977a <_stat+0x38>
 8009760:	2381      	movs	r3, #129	; 0x81
 8009762:	686a      	ldr	r2, [r5, #4]
 8009764:	021b      	lsls	r3, r3, #8
 8009766:	4313      	orrs	r3, r2
 8009768:	0029      	movs	r1, r5
 800976a:	606b      	str	r3, [r5, #4]
 800976c:	f7ff ffba 	bl	80096e4 <_swistat>
 8009770:	0005      	movs	r5, r0
 8009772:	0020      	movs	r0, r4
 8009774:	f7ff ff8e 	bl	8009694 <_close>
 8009778:	002c      	movs	r4, r5
 800977a:	0020      	movs	r0, r4
 800977c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009780 <_swiopen>:
 8009780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009782:	000d      	movs	r5, r1
 8009784:	2600      	movs	r6, #0
 8009786:	4b2b      	ldr	r3, [pc, #172]	; (8009834 <_swiopen+0xb4>)
 8009788:	b09b      	sub	sp, #108	; 0x6c
 800978a:	9001      	str	r0, [sp, #4]
 800978c:	9302      	str	r3, [sp, #8]
 800978e:	00f3      	lsls	r3, r6, #3
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	9b02      	ldr	r3, [sp, #8]
 8009794:	00f2      	lsls	r2, r6, #3
 8009796:	589c      	ldr	r4, [r3, r2]
 8009798:	1c63      	adds	r3, r4, #1
 800979a:	d036      	beq.n	800980a <_swiopen+0x8a>
 800979c:	3601      	adds	r6, #1
 800979e:	2e14      	cmp	r6, #20
 80097a0:	d1f5      	bne.n	800978e <_swiopen+0xe>
 80097a2:	f001 faa3 	bl	800acec <__errno>
 80097a6:	2401      	movs	r4, #1
 80097a8:	2318      	movs	r3, #24
 80097aa:	4264      	negs	r4, r4
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	e03d      	b.n	800982c <_swiopen+0xac>
 80097b0:	2302      	movs	r3, #2
 80097b2:	03ec      	lsls	r4, r5, #15
 80097b4:	0fe4      	lsrs	r4, r4, #31
 80097b6:	421d      	tst	r5, r3
 80097b8:	d000      	beq.n	80097bc <_swiopen+0x3c>
 80097ba:	431c      	orrs	r4, r3
 80097bc:	4b1e      	ldr	r3, [pc, #120]	; (8009838 <_swiopen+0xb8>)
 80097be:	421d      	tst	r5, r3
 80097c0:	d001      	beq.n	80097c6 <_swiopen+0x46>
 80097c2:	2304      	movs	r3, #4
 80097c4:	431c      	orrs	r4, r3
 80097c6:	2308      	movs	r3, #8
 80097c8:	421d      	tst	r5, r3
 80097ca:	d002      	beq.n	80097d2 <_swiopen+0x52>
 80097cc:	2204      	movs	r2, #4
 80097ce:	4394      	bics	r4, r2
 80097d0:	431c      	orrs	r4, r3
 80097d2:	9b01      	ldr	r3, [sp, #4]
 80097d4:	0018      	movs	r0, r3
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	f7f6 fca0 	bl	800011c <strlen>
 80097dc:	607c      	str	r4, [r7, #4]
 80097de:	60b8      	str	r0, [r7, #8]
 80097e0:	2401      	movs	r4, #1
 80097e2:	1c20      	adds	r0, r4, #0
 80097e4:	1c39      	adds	r1, r7, #0
 80097e6:	beab      	bkpt	0x00ab
 80097e8:	1c04      	adds	r4, r0, #0
 80097ea:	2c00      	cmp	r4, #0
 80097ec:	db08      	blt.n	8009800 <_swiopen+0x80>
 80097ee:	00f2      	lsls	r2, r6, #3
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	4694      	mov	ip, r2
 80097f4:	509c      	str	r4, [r3, r2]
 80097f6:	2200      	movs	r2, #0
 80097f8:	4463      	add	r3, ip
 80097fa:	0034      	movs	r4, r6
 80097fc:	605a      	str	r2, [r3, #4]
 80097fe:	e015      	b.n	800982c <_swiopen+0xac>
 8009800:	0020      	movs	r0, r4
 8009802:	f7ff fe8f 	bl	8009524 <error>
 8009806:	0004      	movs	r4, r0
 8009808:	e010      	b.n	800982c <_swiopen+0xac>
 800980a:	23a0      	movs	r3, #160	; 0xa0
 800980c:	002a      	movs	r2, r5
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	401a      	ands	r2, r3
 8009812:	af04      	add	r7, sp, #16
 8009814:	429a      	cmp	r2, r3
 8009816:	d1cb      	bne.n	80097b0 <_swiopen+0x30>
 8009818:	0039      	movs	r1, r7
 800981a:	9801      	ldr	r0, [sp, #4]
 800981c:	f7ff ff91 	bl	8009742 <_stat>
 8009820:	3001      	adds	r0, #1
 8009822:	d0c5      	beq.n	80097b0 <_swiopen+0x30>
 8009824:	f001 fa62 	bl	800acec <__errno>
 8009828:	2311      	movs	r3, #17
 800982a:	6003      	str	r3, [r0, #0]
 800982c:	0020      	movs	r0, r4
 800982e:	b01b      	add	sp, #108	; 0x6c
 8009830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	20000d30 	.word	0x20000d30
 8009838:	00000601 	.word	0x00000601

0800983c <_get_semihosting_exts>:
 800983c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800983e:	b085      	sub	sp, #20
 8009840:	9000      	str	r0, [sp, #0]
 8009842:	9101      	str	r1, [sp, #4]
 8009844:	4827      	ldr	r0, [pc, #156]	; (80098e4 <_get_semihosting_exts+0xa8>)
 8009846:	2100      	movs	r1, #0
 8009848:	0015      	movs	r5, r2
 800984a:	f7ff ff99 	bl	8009780 <_swiopen>
 800984e:	0004      	movs	r4, r0
 8009850:	002a      	movs	r2, r5
 8009852:	2100      	movs	r1, #0
 8009854:	9800      	ldr	r0, [sp, #0]
 8009856:	f001 f9c1 	bl	800abdc <memset>
 800985a:	1c63      	adds	r3, r4, #1
 800985c:	d015      	beq.n	800988a <_get_semihosting_exts+0x4e>
 800985e:	0020      	movs	r0, r4
 8009860:	f7ff fe46 	bl	80094f0 <findslot>
 8009864:	260c      	movs	r6, #12
 8009866:	0007      	movs	r7, r0
 8009868:	1c30      	adds	r0, r6, #0
 800986a:	1c39      	adds	r1, r7, #0
 800986c:	beab      	bkpt	0x00ab
 800986e:	1c06      	adds	r6, r0, #0
 8009870:	0030      	movs	r0, r6
 8009872:	f7ff fe65 	bl	8009540 <checkerror>
 8009876:	2803      	cmp	r0, #3
 8009878:	dd02      	ble.n	8009880 <_get_semihosting_exts+0x44>
 800987a:	3803      	subs	r0, #3
 800987c:	42a8      	cmp	r0, r5
 800987e:	dc07      	bgt.n	8009890 <_get_semihosting_exts+0x54>
 8009880:	0020      	movs	r0, r4
 8009882:	2401      	movs	r4, #1
 8009884:	f7ff ff06 	bl	8009694 <_close>
 8009888:	4264      	negs	r4, r4
 800988a:	0020      	movs	r0, r4
 800988c:	b005      	add	sp, #20
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009890:	ae03      	add	r6, sp, #12
 8009892:	2204      	movs	r2, #4
 8009894:	0031      	movs	r1, r6
 8009896:	0020      	movs	r0, r4
 8009898:	f7ff fe68 	bl	800956c <_read>
 800989c:	2803      	cmp	r0, #3
 800989e:	ddef      	ble.n	8009880 <_get_semihosting_exts+0x44>
 80098a0:	7833      	ldrb	r3, [r6, #0]
 80098a2:	2b53      	cmp	r3, #83	; 0x53
 80098a4:	d1ec      	bne.n	8009880 <_get_semihosting_exts+0x44>
 80098a6:	7873      	ldrb	r3, [r6, #1]
 80098a8:	2b48      	cmp	r3, #72	; 0x48
 80098aa:	d1e9      	bne.n	8009880 <_get_semihosting_exts+0x44>
 80098ac:	78b3      	ldrb	r3, [r6, #2]
 80098ae:	2b46      	cmp	r3, #70	; 0x46
 80098b0:	d1e6      	bne.n	8009880 <_get_semihosting_exts+0x44>
 80098b2:	78f3      	ldrb	r3, [r6, #3]
 80098b4:	2b42      	cmp	r3, #66	; 0x42
 80098b6:	d1e3      	bne.n	8009880 <_get_semihosting_exts+0x44>
 80098b8:	2201      	movs	r2, #1
 80098ba:	0020      	movs	r0, r4
 80098bc:	9901      	ldr	r1, [sp, #4]
 80098be:	f7ff fe6f 	bl	80095a0 <_swilseek>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	dbdc      	blt.n	8009880 <_get_semihosting_exts+0x44>
 80098c6:	002a      	movs	r2, r5
 80098c8:	9900      	ldr	r1, [sp, #0]
 80098ca:	0020      	movs	r0, r4
 80098cc:	f7ff fe4e 	bl	800956c <_read>
 80098d0:	0005      	movs	r5, r0
 80098d2:	0020      	movs	r0, r4
 80098d4:	f7ff fede 	bl	8009694 <_close>
 80098d8:	0028      	movs	r0, r5
 80098da:	f7ff fe31 	bl	8009540 <checkerror>
 80098de:	0004      	movs	r4, r0
 80098e0:	e7d3      	b.n	800988a <_get_semihosting_exts+0x4e>
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	0800cc24 	.word	0x0800cc24

080098e8 <initialise_semihosting_exts>:
 80098e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ea:	2401      	movs	r4, #1
 80098ec:	2100      	movs	r1, #0
 80098ee:	4e09      	ldr	r6, [pc, #36]	; (8009914 <initialise_semihosting_exts+0x2c>)
 80098f0:	4d09      	ldr	r5, [pc, #36]	; (8009918 <initialise_semihosting_exts+0x30>)
 80098f2:	af01      	add	r7, sp, #4
 80098f4:	0022      	movs	r2, r4
 80098f6:	0038      	movs	r0, r7
 80098f8:	6031      	str	r1, [r6, #0]
 80098fa:	602c      	str	r4, [r5, #0]
 80098fc:	f7ff ff9e 	bl	800983c <_get_semihosting_exts>
 8009900:	2800      	cmp	r0, #0
 8009902:	dd05      	ble.n	8009910 <initialise_semihosting_exts+0x28>
 8009904:	2202      	movs	r2, #2
 8009906:	783b      	ldrb	r3, [r7, #0]
 8009908:	401c      	ands	r4, r3
 800990a:	4013      	ands	r3, r2
 800990c:	6034      	str	r4, [r6, #0]
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	20000018 	.word	0x20000018
 8009918:	2000001c 	.word	0x2000001c

0800991c <_has_ext_stdout_stderr>:
 800991c:	b510      	push	{r4, lr}
 800991e:	4c04      	ldr	r4, [pc, #16]	; (8009930 <_has_ext_stdout_stderr+0x14>)
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	da01      	bge.n	800992a <_has_ext_stdout_stderr+0xe>
 8009926:	f7ff ffdf 	bl	80098e8 <initialise_semihosting_exts>
 800992a:	6820      	ldr	r0, [r4, #0]
 800992c:	bd10      	pop	{r4, pc}
 800992e:	46c0      	nop			; (mov r8, r8)
 8009930:	2000001c 	.word	0x2000001c

08009934 <initialise_monitor_handles>:
 8009934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009936:	4b28      	ldr	r3, [pc, #160]	; (80099d8 <initialise_monitor_handles+0xa4>)
 8009938:	b087      	sub	sp, #28
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	2500      	movs	r5, #0
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	2303      	movs	r3, #3
 8009942:	ac03      	add	r4, sp, #12
 8009944:	60a3      	str	r3, [r4, #8]
 8009946:	2601      	movs	r6, #1
 8009948:	6065      	str	r5, [r4, #4]
 800994a:	1c30      	adds	r0, r6, #0
 800994c:	1c21      	adds	r1, r4, #0
 800994e:	beab      	bkpt	0x00ab
 8009950:	1c06      	adds	r6, r0, #0
 8009952:	2101      	movs	r1, #1
 8009954:	4b21      	ldr	r3, [pc, #132]	; (80099dc <initialise_monitor_handles+0xa8>)
 8009956:	4249      	negs	r1, r1
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	601e      	str	r6, [r3, #0]
 800995c:	002b      	movs	r3, r5
 800995e:	4d20      	ldr	r5, [pc, #128]	; (80099e0 <initialise_monitor_handles+0xac>)
 8009960:	00da      	lsls	r2, r3, #3
 8009962:	3301      	adds	r3, #1
 8009964:	50a9      	str	r1, [r5, r2]
 8009966:	2b14      	cmp	r3, #20
 8009968:	d1fa      	bne.n	8009960 <initialise_monitor_handles+0x2c>
 800996a:	f7ff ffd7 	bl	800991c <_has_ext_stdout_stderr>
 800996e:	2800      	cmp	r0, #0
 8009970:	d018      	beq.n	80099a4 <initialise_monitor_handles+0x70>
 8009972:	9b00      	ldr	r3, [sp, #0]
 8009974:	2601      	movs	r6, #1
 8009976:	9303      	str	r3, [sp, #12]
 8009978:	2303      	movs	r3, #3
 800997a:	60a3      	str	r3, [r4, #8]
 800997c:	3301      	adds	r3, #1
 800997e:	6063      	str	r3, [r4, #4]
 8009980:	1c30      	adds	r0, r6, #0
 8009982:	1c21      	adds	r1, r4, #0
 8009984:	beab      	bkpt	0x00ab
 8009986:	1c07      	adds	r7, r0, #0
 8009988:	4b16      	ldr	r3, [pc, #88]	; (80099e4 <initialise_monitor_handles+0xb0>)
 800998a:	9a00      	ldr	r2, [sp, #0]
 800998c:	601f      	str	r7, [r3, #0]
 800998e:	2303      	movs	r3, #3
 8009990:	9203      	str	r2, [sp, #12]
 8009992:	60a3      	str	r3, [r4, #8]
 8009994:	3305      	adds	r3, #5
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	1c30      	adds	r0, r6, #0
 800999a:	1c21      	adds	r1, r4, #0
 800999c:	beab      	bkpt	0x00ab
 800999e:	1c06      	adds	r6, r0, #0
 80099a0:	4b11      	ldr	r3, [pc, #68]	; (80099e8 <initialise_monitor_handles+0xb4>)
 80099a2:	601e      	str	r6, [r3, #0]
 80099a4:	4e10      	ldr	r6, [pc, #64]	; (80099e8 <initialise_monitor_handles+0xb4>)
 80099a6:	6833      	ldr	r3, [r6, #0]
 80099a8:	3301      	adds	r3, #1
 80099aa:	d102      	bne.n	80099b2 <initialise_monitor_handles+0x7e>
 80099ac:	4b0d      	ldr	r3, [pc, #52]	; (80099e4 <initialise_monitor_handles+0xb0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6033      	str	r3, [r6, #0]
 80099b2:	2400      	movs	r4, #0
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	606c      	str	r4, [r5, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	f7ff ffae 	bl	800991c <_has_ext_stdout_stderr>
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d006      	beq.n	80099d2 <initialise_monitor_handles+0x9e>
 80099c4:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <initialise_monitor_handles+0xb0>)
 80099c6:	60ec      	str	r4, [r5, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	616c      	str	r4, [r5, #20]
 80099cc:	60ab      	str	r3, [r5, #8]
 80099ce:	6833      	ldr	r3, [r6, #0]
 80099d0:	612b      	str	r3, [r5, #16]
 80099d2:	b007      	add	sp, #28
 80099d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	0800cc3a 	.word	0x0800cc3a
 80099dc:	20000d28 	.word	0x20000d28
 80099e0:	20000d30 	.word	0x20000d30
 80099e4:	20000d2c 	.word	0x20000d2c
 80099e8:	20000d24 	.word	0x20000d24

080099ec <_isatty>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	f7ff fd7f 	bl	80094f0 <findslot>
 80099f2:	2509      	movs	r5, #9
 80099f4:	1e04      	subs	r4, r0, #0
 80099f6:	d104      	bne.n	8009a02 <_isatty+0x16>
 80099f8:	f001 f978 	bl	800acec <__errno>
 80099fc:	6005      	str	r5, [r0, #0]
 80099fe:	0020      	movs	r0, r4
 8009a00:	bd70      	pop	{r4, r5, r6, pc}
 8009a02:	1c28      	adds	r0, r5, #0
 8009a04:	1c21      	adds	r1, r4, #0
 8009a06:	beab      	bkpt	0x00ab
 8009a08:	1c04      	adds	r4, r0, #0
 8009a0a:	0020      	movs	r0, r4
 8009a0c:	2c01      	cmp	r4, #1
 8009a0e:	d0f7      	beq.n	8009a00 <_isatty+0x14>
 8009a10:	f001 f96c 	bl	800acec <__errno>
 8009a14:	2400      	movs	r4, #0
 8009a16:	0005      	movs	r5, r0
 8009a18:	2613      	movs	r6, #19
 8009a1a:	1c30      	adds	r0, r6, #0
 8009a1c:	1c21      	adds	r1, r4, #0
 8009a1e:	beab      	bkpt	0x00ab
 8009a20:	1c06      	adds	r6, r0, #0
 8009a22:	602e      	str	r6, [r5, #0]
 8009a24:	e7eb      	b.n	80099fe <_isatty+0x12>

08009a26 <atoi>:
 8009a26:	b510      	push	{r4, lr}
 8009a28:	220a      	movs	r2, #10
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	f000 ffba 	bl	800a9a4 <strtol>
 8009a30:	bd10      	pop	{r4, pc}
	...

08009a34 <malloc>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <malloc+0x10>)
 8009a38:	0001      	movs	r1, r0
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	f000 f830 	bl	8009aa0 <_malloc_r>
 8009a40:	bd10      	pop	{r4, pc}
 8009a42:	46c0      	nop			; (mov r8, r8)
 8009a44:	200001e4 	.word	0x200001e4

08009a48 <free>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <free+0x10>)
 8009a4c:	0001      	movs	r1, r0
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	f001 f990 	bl	800ad74 <_free_r>
 8009a54:	bd10      	pop	{r4, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	200001e4 	.word	0x200001e4

08009a5c <sbrk_aligned>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	4e0f      	ldr	r6, [pc, #60]	; (8009a9c <sbrk_aligned+0x40>)
 8009a60:	000d      	movs	r5, r1
 8009a62:	6831      	ldr	r1, [r6, #0]
 8009a64:	0004      	movs	r4, r0
 8009a66:	2900      	cmp	r1, #0
 8009a68:	d102      	bne.n	8009a70 <sbrk_aligned+0x14>
 8009a6a:	f001 f919 	bl	800aca0 <_sbrk_r>
 8009a6e:	6030      	str	r0, [r6, #0]
 8009a70:	0029      	movs	r1, r5
 8009a72:	0020      	movs	r0, r4
 8009a74:	f001 f914 	bl	800aca0 <_sbrk_r>
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	d00a      	beq.n	8009a92 <sbrk_aligned+0x36>
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	1cc5      	adds	r5, r0, #3
 8009a80:	439d      	bics	r5, r3
 8009a82:	42a8      	cmp	r0, r5
 8009a84:	d007      	beq.n	8009a96 <sbrk_aligned+0x3a>
 8009a86:	1a29      	subs	r1, r5, r0
 8009a88:	0020      	movs	r0, r4
 8009a8a:	f001 f909 	bl	800aca0 <_sbrk_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d101      	bne.n	8009a96 <sbrk_aligned+0x3a>
 8009a92:	2501      	movs	r5, #1
 8009a94:	426d      	negs	r5, r5
 8009a96:	0028      	movs	r0, r5
 8009a98:	bd70      	pop	{r4, r5, r6, pc}
 8009a9a:	46c0      	nop			; (mov r8, r8)
 8009a9c:	20000dd4 	.word	0x20000dd4

08009aa0 <_malloc_r>:
 8009aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	1ccb      	adds	r3, r1, #3
 8009aa6:	4393      	bics	r3, r2
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	0006      	movs	r6, r0
 8009aac:	001f      	movs	r7, r3
 8009aae:	2b0c      	cmp	r3, #12
 8009ab0:	d238      	bcs.n	8009b24 <_malloc_r+0x84>
 8009ab2:	270c      	movs	r7, #12
 8009ab4:	42b9      	cmp	r1, r7
 8009ab6:	d837      	bhi.n	8009b28 <_malloc_r+0x88>
 8009ab8:	0030      	movs	r0, r6
 8009aba:	f000 f873 	bl	8009ba4 <__malloc_lock>
 8009abe:	4b38      	ldr	r3, [pc, #224]	; (8009ba0 <_malloc_r+0x100>)
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	001c      	movs	r4, r3
 8009ac6:	2c00      	cmp	r4, #0
 8009ac8:	d133      	bne.n	8009b32 <_malloc_r+0x92>
 8009aca:	0039      	movs	r1, r7
 8009acc:	0030      	movs	r0, r6
 8009ace:	f7ff ffc5 	bl	8009a5c <sbrk_aligned>
 8009ad2:	0004      	movs	r4, r0
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d15e      	bne.n	8009b96 <_malloc_r+0xf6>
 8009ad8:	9b00      	ldr	r3, [sp, #0]
 8009ada:	681c      	ldr	r4, [r3, #0]
 8009adc:	0025      	movs	r5, r4
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	d14e      	bne.n	8009b80 <_malloc_r+0xe0>
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	d051      	beq.n	8009b8a <_malloc_r+0xea>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	0029      	movs	r1, r5
 8009aea:	18e3      	adds	r3, r4, r3
 8009aec:	0030      	movs	r0, r6
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	f001 f8d6 	bl	800aca0 <_sbrk_r>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	4283      	cmp	r3, r0
 8009af8:	d147      	bne.n	8009b8a <_malloc_r+0xea>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	0030      	movs	r0, r6
 8009afe:	1aff      	subs	r7, r7, r3
 8009b00:	0039      	movs	r1, r7
 8009b02:	f7ff ffab 	bl	8009a5c <sbrk_aligned>
 8009b06:	3001      	adds	r0, #1
 8009b08:	d03f      	beq.n	8009b8a <_malloc_r+0xea>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	19db      	adds	r3, r3, r7
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	9b00      	ldr	r3, [sp, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d040      	beq.n	8009b9a <_malloc_r+0xfa>
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	42a2      	cmp	r2, r4
 8009b1c:	d133      	bne.n	8009b86 <_malloc_r+0xe6>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	605a      	str	r2, [r3, #4]
 8009b22:	e014      	b.n	8009b4e <_malloc_r+0xae>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dac5      	bge.n	8009ab4 <_malloc_r+0x14>
 8009b28:	230c      	movs	r3, #12
 8009b2a:	2500      	movs	r5, #0
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	0028      	movs	r0, r5
 8009b30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b32:	6821      	ldr	r1, [r4, #0]
 8009b34:	1bc9      	subs	r1, r1, r7
 8009b36:	d420      	bmi.n	8009b7a <_malloc_r+0xda>
 8009b38:	290b      	cmp	r1, #11
 8009b3a:	d918      	bls.n	8009b6e <_malloc_r+0xce>
 8009b3c:	19e2      	adds	r2, r4, r7
 8009b3e:	6027      	str	r7, [r4, #0]
 8009b40:	42a3      	cmp	r3, r4
 8009b42:	d112      	bne.n	8009b6a <_malloc_r+0xca>
 8009b44:	9b00      	ldr	r3, [sp, #0]
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	6011      	str	r1, [r2, #0]
 8009b4c:	6053      	str	r3, [r2, #4]
 8009b4e:	0030      	movs	r0, r6
 8009b50:	0025      	movs	r5, r4
 8009b52:	f000 f82f 	bl	8009bb4 <__malloc_unlock>
 8009b56:	2207      	movs	r2, #7
 8009b58:	350b      	adds	r5, #11
 8009b5a:	1d23      	adds	r3, r4, #4
 8009b5c:	4395      	bics	r5, r2
 8009b5e:	1aea      	subs	r2, r5, r3
 8009b60:	429d      	cmp	r5, r3
 8009b62:	d0e4      	beq.n	8009b2e <_malloc_r+0x8e>
 8009b64:	1b5b      	subs	r3, r3, r5
 8009b66:	50a3      	str	r3, [r4, r2]
 8009b68:	e7e1      	b.n	8009b2e <_malloc_r+0x8e>
 8009b6a:	605a      	str	r2, [r3, #4]
 8009b6c:	e7ec      	b.n	8009b48 <_malloc_r+0xa8>
 8009b6e:	6862      	ldr	r2, [r4, #4]
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	d1d5      	bne.n	8009b20 <_malloc_r+0x80>
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	e7e9      	b.n	8009b4e <_malloc_r+0xae>
 8009b7a:	0023      	movs	r3, r4
 8009b7c:	6864      	ldr	r4, [r4, #4]
 8009b7e:	e7a2      	b.n	8009ac6 <_malloc_r+0x26>
 8009b80:	002c      	movs	r4, r5
 8009b82:	686d      	ldr	r5, [r5, #4]
 8009b84:	e7ab      	b.n	8009ade <_malloc_r+0x3e>
 8009b86:	0013      	movs	r3, r2
 8009b88:	e7c4      	b.n	8009b14 <_malloc_r+0x74>
 8009b8a:	230c      	movs	r3, #12
 8009b8c:	0030      	movs	r0, r6
 8009b8e:	6033      	str	r3, [r6, #0]
 8009b90:	f000 f810 	bl	8009bb4 <__malloc_unlock>
 8009b94:	e7cb      	b.n	8009b2e <_malloc_r+0x8e>
 8009b96:	6027      	str	r7, [r4, #0]
 8009b98:	e7d9      	b.n	8009b4e <_malloc_r+0xae>
 8009b9a:	605b      	str	r3, [r3, #4]
 8009b9c:	deff      	udf	#255	; 0xff
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	20000dd0 	.word	0x20000dd0

08009ba4 <__malloc_lock>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4802      	ldr	r0, [pc, #8]	; (8009bb0 <__malloc_lock+0xc>)
 8009ba8:	f001 f8cb 	bl	800ad42 <__retarget_lock_acquire_recursive>
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	20000f18 	.word	0x20000f18

08009bb4 <__malloc_unlock>:
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	4802      	ldr	r0, [pc, #8]	; (8009bc0 <__malloc_unlock+0xc>)
 8009bb8:	f001 f8c4 	bl	800ad44 <__retarget_lock_release_recursive>
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	20000f18 	.word	0x20000f18

08009bc4 <realloc>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <realloc+0x10>)
 8009bc8:	000a      	movs	r2, r1
 8009bca:	0001      	movs	r1, r0
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	f000 f803 	bl	8009bd8 <_realloc_r>
 8009bd2:	bd10      	pop	{r4, pc}
 8009bd4:	200001e4 	.word	0x200001e4

08009bd8 <_realloc_r>:
 8009bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bda:	0007      	movs	r7, r0
 8009bdc:	000e      	movs	r6, r1
 8009bde:	0014      	movs	r4, r2
 8009be0:	2900      	cmp	r1, #0
 8009be2:	d105      	bne.n	8009bf0 <_realloc_r+0x18>
 8009be4:	0011      	movs	r1, r2
 8009be6:	f7ff ff5b 	bl	8009aa0 <_malloc_r>
 8009bea:	0005      	movs	r5, r0
 8009bec:	0028      	movs	r0, r5
 8009bee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bf0:	2a00      	cmp	r2, #0
 8009bf2:	d103      	bne.n	8009bfc <_realloc_r+0x24>
 8009bf4:	f001 f8be 	bl	800ad74 <_free_r>
 8009bf8:	0025      	movs	r5, r4
 8009bfa:	e7f7      	b.n	8009bec <_realloc_r+0x14>
 8009bfc:	f002 f92d 	bl	800be5a <_malloc_usable_size_r>
 8009c00:	9001      	str	r0, [sp, #4]
 8009c02:	4284      	cmp	r4, r0
 8009c04:	d803      	bhi.n	8009c0e <_realloc_r+0x36>
 8009c06:	0035      	movs	r5, r6
 8009c08:	0843      	lsrs	r3, r0, #1
 8009c0a:	42a3      	cmp	r3, r4
 8009c0c:	d3ee      	bcc.n	8009bec <_realloc_r+0x14>
 8009c0e:	0021      	movs	r1, r4
 8009c10:	0038      	movs	r0, r7
 8009c12:	f7ff ff45 	bl	8009aa0 <_malloc_r>
 8009c16:	1e05      	subs	r5, r0, #0
 8009c18:	d0e8      	beq.n	8009bec <_realloc_r+0x14>
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	0022      	movs	r2, r4
 8009c1e:	429c      	cmp	r4, r3
 8009c20:	d900      	bls.n	8009c24 <_realloc_r+0x4c>
 8009c22:	001a      	movs	r2, r3
 8009c24:	0031      	movs	r1, r6
 8009c26:	0028      	movs	r0, r5
 8009c28:	f001 f895 	bl	800ad56 <memcpy>
 8009c2c:	0031      	movs	r1, r6
 8009c2e:	0038      	movs	r0, r7
 8009c30:	f001 f8a0 	bl	800ad74 <_free_r>
 8009c34:	e7da      	b.n	8009bec <_realloc_r+0x14>
	...

08009c38 <sulp>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	0016      	movs	r6, r2
 8009c3c:	000d      	movs	r5, r1
 8009c3e:	f001 ffd7 	bl	800bbf0 <__ulp>
 8009c42:	2e00      	cmp	r6, #0
 8009c44:	d00d      	beq.n	8009c62 <sulp+0x2a>
 8009c46:	236b      	movs	r3, #107	; 0x6b
 8009c48:	006a      	lsls	r2, r5, #1
 8009c4a:	0d52      	lsrs	r2, r2, #21
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dd07      	ble.n	8009c62 <sulp+0x2a>
 8009c52:	2400      	movs	r4, #0
 8009c54:	4a03      	ldr	r2, [pc, #12]	; (8009c64 <sulp+0x2c>)
 8009c56:	051b      	lsls	r3, r3, #20
 8009c58:	189d      	adds	r5, r3, r2
 8009c5a:	002b      	movs	r3, r5
 8009c5c:	0022      	movs	r2, r4
 8009c5e:	f7f7 fd11 	bl	8001684 <__aeabi_dmul>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	3ff00000 	.word	0x3ff00000

08009c68 <_strtod_l>:
 8009c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c6a:	b0a1      	sub	sp, #132	; 0x84
 8009c6c:	9219      	str	r2, [sp, #100]	; 0x64
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2600      	movs	r6, #0
 8009c72:	2700      	movs	r7, #0
 8009c74:	9004      	str	r0, [sp, #16]
 8009c76:	9107      	str	r1, [sp, #28]
 8009c78:	921c      	str	r2, [sp, #112]	; 0x70
 8009c7a:	911b      	str	r1, [sp, #108]	; 0x6c
 8009c7c:	780a      	ldrb	r2, [r1, #0]
 8009c7e:	2a2b      	cmp	r2, #43	; 0x2b
 8009c80:	d055      	beq.n	8009d2e <_strtod_l+0xc6>
 8009c82:	d841      	bhi.n	8009d08 <_strtod_l+0xa0>
 8009c84:	2a0d      	cmp	r2, #13
 8009c86:	d83b      	bhi.n	8009d00 <_strtod_l+0x98>
 8009c88:	2a08      	cmp	r2, #8
 8009c8a:	d83b      	bhi.n	8009d04 <_strtod_l+0x9c>
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d044      	beq.n	8009d1a <_strtod_l+0xb2>
 8009c90:	2200      	movs	r2, #0
 8009c92:	920f      	str	r2, [sp, #60]	; 0x3c
 8009c94:	2100      	movs	r1, #0
 8009c96:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c98:	9109      	str	r1, [sp, #36]	; 0x24
 8009c9a:	782a      	ldrb	r2, [r5, #0]
 8009c9c:	2a30      	cmp	r2, #48	; 0x30
 8009c9e:	d000      	beq.n	8009ca2 <_strtod_l+0x3a>
 8009ca0:	e085      	b.n	8009dae <_strtod_l+0x146>
 8009ca2:	786a      	ldrb	r2, [r5, #1]
 8009ca4:	3120      	adds	r1, #32
 8009ca6:	438a      	bics	r2, r1
 8009ca8:	2a58      	cmp	r2, #88	; 0x58
 8009caa:	d000      	beq.n	8009cae <_strtod_l+0x46>
 8009cac:	e075      	b.n	8009d9a <_strtod_l+0x132>
 8009cae:	9302      	str	r3, [sp, #8]
 8009cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cb2:	4a97      	ldr	r2, [pc, #604]	; (8009f10 <_strtod_l+0x2a8>)
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	ab1c      	add	r3, sp, #112	; 0x70
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	9804      	ldr	r0, [sp, #16]
 8009cbc:	ab1d      	add	r3, sp, #116	; 0x74
 8009cbe:	a91b      	add	r1, sp, #108	; 0x6c
 8009cc0:	f001 f90c 	bl	800aedc <__gethex>
 8009cc4:	230f      	movs	r3, #15
 8009cc6:	0002      	movs	r2, r0
 8009cc8:	401a      	ands	r2, r3
 8009cca:	0004      	movs	r4, r0
 8009ccc:	9205      	str	r2, [sp, #20]
 8009cce:	4218      	tst	r0, r3
 8009cd0:	d005      	beq.n	8009cde <_strtod_l+0x76>
 8009cd2:	2a06      	cmp	r2, #6
 8009cd4:	d12d      	bne.n	8009d32 <_strtod_l+0xca>
 8009cd6:	1c6b      	adds	r3, r5, #1
 8009cd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cda:	2300      	movs	r3, #0
 8009cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <_strtod_l+0x82>
 8009ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ce6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01b      	beq.n	8009d28 <_strtod_l+0xc0>
 8009cf0:	2380      	movs	r3, #128	; 0x80
 8009cf2:	0032      	movs	r2, r6
 8009cf4:	061b      	lsls	r3, r3, #24
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	0010      	movs	r0, r2
 8009cfa:	0019      	movs	r1, r3
 8009cfc:	b021      	add	sp, #132	; 0x84
 8009cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d00:	2a20      	cmp	r2, #32
 8009d02:	d1c5      	bne.n	8009c90 <_strtod_l+0x28>
 8009d04:	3101      	adds	r1, #1
 8009d06:	e7b8      	b.n	8009c7a <_strtod_l+0x12>
 8009d08:	2a2d      	cmp	r2, #45	; 0x2d
 8009d0a:	d1c1      	bne.n	8009c90 <_strtod_l+0x28>
 8009d0c:	3a2c      	subs	r2, #44	; 0x2c
 8009d0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009d10:	1c4a      	adds	r2, r1, #1
 8009d12:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d14:	784a      	ldrb	r2, [r1, #1]
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	d1bc      	bne.n	8009c94 <_strtod_l+0x2c>
 8009d1a:	9b07      	ldr	r3, [sp, #28]
 8009d1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d1e:	2300      	movs	r3, #0
 8009d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1dd      	bne.n	8009ce4 <_strtod_l+0x7c>
 8009d28:	0032      	movs	r2, r6
 8009d2a:	003b      	movs	r3, r7
 8009d2c:	e7e4      	b.n	8009cf8 <_strtod_l+0x90>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	e7ed      	b.n	8009d0e <_strtod_l+0xa6>
 8009d32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	d007      	beq.n	8009d48 <_strtod_l+0xe0>
 8009d38:	2135      	movs	r1, #53	; 0x35
 8009d3a:	a81e      	add	r0, sp, #120	; 0x78
 8009d3c:	f002 f849 	bl	800bdd2 <__copybits>
 8009d40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d42:	9804      	ldr	r0, [sp, #16]
 8009d44:	f001 fc12 	bl	800b56c <_Bfree>
 8009d48:	9805      	ldr	r0, [sp, #20]
 8009d4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d4c:	3801      	subs	r0, #1
 8009d4e:	2804      	cmp	r0, #4
 8009d50:	d806      	bhi.n	8009d60 <_strtod_l+0xf8>
 8009d52:	f7f6 f9eb 	bl	800012c <__gnu_thumb1_case_uqi>
 8009d56:	0312      	.short	0x0312
 8009d58:	1e1c      	.short	0x1e1c
 8009d5a:	12          	.byte	0x12
 8009d5b:	00          	.byte	0x00
 8009d5c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009d5e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009d60:	05e4      	lsls	r4, r4, #23
 8009d62:	d502      	bpl.n	8009d6a <_strtod_l+0x102>
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	061b      	lsls	r3, r3, #24
 8009d68:	431f      	orrs	r7, r3
 8009d6a:	4b6a      	ldr	r3, [pc, #424]	; (8009f14 <_strtod_l+0x2ac>)
 8009d6c:	423b      	tst	r3, r7
 8009d6e:	d1b6      	bne.n	8009cde <_strtod_l+0x76>
 8009d70:	f000 ffbc 	bl	800acec <__errno>
 8009d74:	2322      	movs	r3, #34	; 0x22
 8009d76:	6003      	str	r3, [r0, #0]
 8009d78:	e7b1      	b.n	8009cde <_strtod_l+0x76>
 8009d7a:	4967      	ldr	r1, [pc, #412]	; (8009f18 <_strtod_l+0x2b0>)
 8009d7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009d7e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009d80:	400a      	ands	r2, r1
 8009d82:	4966      	ldr	r1, [pc, #408]	; (8009f1c <_strtod_l+0x2b4>)
 8009d84:	185b      	adds	r3, r3, r1
 8009d86:	051b      	lsls	r3, r3, #20
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	0017      	movs	r7, r2
 8009d8c:	e7e8      	b.n	8009d60 <_strtod_l+0xf8>
 8009d8e:	4f61      	ldr	r7, [pc, #388]	; (8009f14 <_strtod_l+0x2ac>)
 8009d90:	e7e6      	b.n	8009d60 <_strtod_l+0xf8>
 8009d92:	2601      	movs	r6, #1
 8009d94:	4f62      	ldr	r7, [pc, #392]	; (8009f20 <_strtod_l+0x2b8>)
 8009d96:	4276      	negs	r6, r6
 8009d98:	e7e2      	b.n	8009d60 <_strtod_l+0xf8>
 8009d9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b30      	cmp	r3, #48	; 0x30
 8009da4:	d0f9      	beq.n	8009d9a <_strtod_l+0x132>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d099      	beq.n	8009cde <_strtod_l+0x76>
 8009daa:	2301      	movs	r3, #1
 8009dac:	9309      	str	r3, [sp, #36]	; 0x24
 8009dae:	2500      	movs	r5, #0
 8009db0:	220a      	movs	r2, #10
 8009db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009db4:	950d      	str	r5, [sp, #52]	; 0x34
 8009db6:	9310      	str	r3, [sp, #64]	; 0x40
 8009db8:	9508      	str	r5, [sp, #32]
 8009dba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009dbc:	7804      	ldrb	r4, [r0, #0]
 8009dbe:	0023      	movs	r3, r4
 8009dc0:	3b30      	subs	r3, #48	; 0x30
 8009dc2:	b2d9      	uxtb	r1, r3
 8009dc4:	2909      	cmp	r1, #9
 8009dc6:	d927      	bls.n	8009e18 <_strtod_l+0x1b0>
 8009dc8:	2201      	movs	r2, #1
 8009dca:	4956      	ldr	r1, [pc, #344]	; (8009f24 <_strtod_l+0x2bc>)
 8009dcc:	f000 ff1c 	bl	800ac08 <strncmp>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d031      	beq.n	8009e38 <_strtod_l+0x1d0>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	0023      	movs	r3, r4
 8009dd8:	4684      	mov	ip, r0
 8009dda:	9a08      	ldr	r2, [sp, #32]
 8009ddc:	900c      	str	r0, [sp, #48]	; 0x30
 8009dde:	9205      	str	r2, [sp, #20]
 8009de0:	2220      	movs	r2, #32
 8009de2:	0019      	movs	r1, r3
 8009de4:	4391      	bics	r1, r2
 8009de6:	000a      	movs	r2, r1
 8009de8:	2100      	movs	r1, #0
 8009dea:	9106      	str	r1, [sp, #24]
 8009dec:	2a45      	cmp	r2, #69	; 0x45
 8009dee:	d000      	beq.n	8009df2 <_strtod_l+0x18a>
 8009df0:	e0c2      	b.n	8009f78 <_strtod_l+0x310>
 8009df2:	9b05      	ldr	r3, [sp, #20]
 8009df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df6:	4303      	orrs	r3, r0
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	428b      	cmp	r3, r1
 8009dfc:	d08d      	beq.n	8009d1a <_strtod_l+0xb2>
 8009dfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e00:	9307      	str	r3, [sp, #28]
 8009e02:	3301      	adds	r3, #1
 8009e04:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e06:	9b07      	ldr	r3, [sp, #28]
 8009e08:	785b      	ldrb	r3, [r3, #1]
 8009e0a:	2b2b      	cmp	r3, #43	; 0x2b
 8009e0c:	d071      	beq.n	8009ef2 <_strtod_l+0x28a>
 8009e0e:	000c      	movs	r4, r1
 8009e10:	2b2d      	cmp	r3, #45	; 0x2d
 8009e12:	d174      	bne.n	8009efe <_strtod_l+0x296>
 8009e14:	2401      	movs	r4, #1
 8009e16:	e06d      	b.n	8009ef4 <_strtod_l+0x28c>
 8009e18:	9908      	ldr	r1, [sp, #32]
 8009e1a:	2908      	cmp	r1, #8
 8009e1c:	dc09      	bgt.n	8009e32 <_strtod_l+0x1ca>
 8009e1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e20:	4351      	muls	r1, r2
 8009e22:	185b      	adds	r3, r3, r1
 8009e24:	930d      	str	r3, [sp, #52]	; 0x34
 8009e26:	9b08      	ldr	r3, [sp, #32]
 8009e28:	3001      	adds	r0, #1
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	9308      	str	r3, [sp, #32]
 8009e2e:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e30:	e7c3      	b.n	8009dba <_strtod_l+0x152>
 8009e32:	4355      	muls	r5, r2
 8009e34:	195d      	adds	r5, r3, r5
 8009e36:	e7f6      	b.n	8009e26 <_strtod_l+0x1be>
 8009e38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e3e:	9a08      	ldr	r2, [sp, #32]
 8009e40:	785b      	ldrb	r3, [r3, #1]
 8009e42:	2a00      	cmp	r2, #0
 8009e44:	d03a      	beq.n	8009ebc <_strtod_l+0x254>
 8009e46:	900c      	str	r0, [sp, #48]	; 0x30
 8009e48:	9205      	str	r2, [sp, #20]
 8009e4a:	001a      	movs	r2, r3
 8009e4c:	3a30      	subs	r2, #48	; 0x30
 8009e4e:	2a09      	cmp	r2, #9
 8009e50:	d912      	bls.n	8009e78 <_strtod_l+0x210>
 8009e52:	2201      	movs	r2, #1
 8009e54:	4694      	mov	ip, r2
 8009e56:	e7c3      	b.n	8009de0 <_strtod_l+0x178>
 8009e58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	2b30      	cmp	r3, #48	; 0x30
 8009e64:	d0f8      	beq.n	8009e58 <_strtod_l+0x1f0>
 8009e66:	001a      	movs	r2, r3
 8009e68:	3a31      	subs	r2, #49	; 0x31
 8009e6a:	2a08      	cmp	r2, #8
 8009e6c:	d83c      	bhi.n	8009ee8 <_strtod_l+0x280>
 8009e6e:	900c      	str	r0, [sp, #48]	; 0x30
 8009e70:	2000      	movs	r0, #0
 8009e72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009e74:	9005      	str	r0, [sp, #20]
 8009e76:	9210      	str	r2, [sp, #64]	; 0x40
 8009e78:	001a      	movs	r2, r3
 8009e7a:	1c41      	adds	r1, r0, #1
 8009e7c:	3a30      	subs	r2, #48	; 0x30
 8009e7e:	2b30      	cmp	r3, #48	; 0x30
 8009e80:	d016      	beq.n	8009eb0 <_strtod_l+0x248>
 8009e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e84:	185b      	adds	r3, r3, r1
 8009e86:	930c      	str	r3, [sp, #48]	; 0x30
 8009e88:	9b05      	ldr	r3, [sp, #20]
 8009e8a:	210a      	movs	r1, #10
 8009e8c:	469c      	mov	ip, r3
 8009e8e:	4484      	add	ip, r0
 8009e90:	4563      	cmp	r3, ip
 8009e92:	d115      	bne.n	8009ec0 <_strtod_l+0x258>
 8009e94:	9905      	ldr	r1, [sp, #20]
 8009e96:	9b05      	ldr	r3, [sp, #20]
 8009e98:	3101      	adds	r1, #1
 8009e9a:	1809      	adds	r1, r1, r0
 8009e9c:	181b      	adds	r3, r3, r0
 8009e9e:	9105      	str	r1, [sp, #20]
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	dc19      	bgt.n	8009ed8 <_strtod_l+0x270>
 8009ea4:	230a      	movs	r3, #10
 8009ea6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ea8:	434b      	muls	r3, r1
 8009eaa:	2100      	movs	r1, #0
 8009eac:	18d3      	adds	r3, r2, r3
 8009eae:	930d      	str	r3, [sp, #52]	; 0x34
 8009eb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eb2:	0008      	movs	r0, r1
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	921b      	str	r2, [sp, #108]	; 0x6c
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	e7c6      	b.n	8009e4a <_strtod_l+0x1e2>
 8009ebc:	9808      	ldr	r0, [sp, #32]
 8009ebe:	e7d0      	b.n	8009e62 <_strtod_l+0x1fa>
 8009ec0:	1c5c      	adds	r4, r3, #1
 8009ec2:	2b08      	cmp	r3, #8
 8009ec4:	dc04      	bgt.n	8009ed0 <_strtod_l+0x268>
 8009ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec8:	434b      	muls	r3, r1
 8009eca:	930d      	str	r3, [sp, #52]	; 0x34
 8009ecc:	0023      	movs	r3, r4
 8009ece:	e7df      	b.n	8009e90 <_strtod_l+0x228>
 8009ed0:	2c10      	cmp	r4, #16
 8009ed2:	dcfb      	bgt.n	8009ecc <_strtod_l+0x264>
 8009ed4:	434d      	muls	r5, r1
 8009ed6:	e7f9      	b.n	8009ecc <_strtod_l+0x264>
 8009ed8:	9b05      	ldr	r3, [sp, #20]
 8009eda:	2100      	movs	r1, #0
 8009edc:	2b10      	cmp	r3, #16
 8009ede:	dce7      	bgt.n	8009eb0 <_strtod_l+0x248>
 8009ee0:	230a      	movs	r3, #10
 8009ee2:	435d      	muls	r5, r3
 8009ee4:	1955      	adds	r5, r2, r5
 8009ee6:	e7e3      	b.n	8009eb0 <_strtod_l+0x248>
 8009ee8:	2200      	movs	r2, #0
 8009eea:	920c      	str	r2, [sp, #48]	; 0x30
 8009eec:	9205      	str	r2, [sp, #20]
 8009eee:	3201      	adds	r2, #1
 8009ef0:	e7b0      	b.n	8009e54 <_strtod_l+0x1ec>
 8009ef2:	2400      	movs	r4, #0
 8009ef4:	9b07      	ldr	r3, [sp, #28]
 8009ef6:	3302      	adds	r3, #2
 8009ef8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009efa:	9b07      	ldr	r3, [sp, #28]
 8009efc:	789b      	ldrb	r3, [r3, #2]
 8009efe:	001a      	movs	r2, r3
 8009f00:	3a30      	subs	r2, #48	; 0x30
 8009f02:	2a09      	cmp	r2, #9
 8009f04:	d914      	bls.n	8009f30 <_strtod_l+0x2c8>
 8009f06:	9a07      	ldr	r2, [sp, #28]
 8009f08:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	e033      	b.n	8009f76 <_strtod_l+0x30e>
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	0800cc4c 	.word	0x0800cc4c
 8009f14:	7ff00000 	.word	0x7ff00000
 8009f18:	ffefffff 	.word	0xffefffff
 8009f1c:	00000433 	.word	0x00000433
 8009f20:	7fffffff 	.word	0x7fffffff
 8009f24:	0800cc3e 	.word	0x0800cc3e
 8009f28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	2b30      	cmp	r3, #48	; 0x30
 8009f32:	d0f9      	beq.n	8009f28 <_strtod_l+0x2c0>
 8009f34:	2200      	movs	r2, #0
 8009f36:	9206      	str	r2, [sp, #24]
 8009f38:	001a      	movs	r2, r3
 8009f3a:	3a31      	subs	r2, #49	; 0x31
 8009f3c:	2a08      	cmp	r2, #8
 8009f3e:	d81b      	bhi.n	8009f78 <_strtod_l+0x310>
 8009f40:	3b30      	subs	r3, #48	; 0x30
 8009f42:	930e      	str	r3, [sp, #56]	; 0x38
 8009f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f46:	9306      	str	r3, [sp, #24]
 8009f48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f4a:	1c59      	adds	r1, r3, #1
 8009f4c:	911b      	str	r1, [sp, #108]	; 0x6c
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	001a      	movs	r2, r3
 8009f52:	3a30      	subs	r2, #48	; 0x30
 8009f54:	2a09      	cmp	r2, #9
 8009f56:	d93a      	bls.n	8009fce <_strtod_l+0x366>
 8009f58:	9a06      	ldr	r2, [sp, #24]
 8009f5a:	1a8a      	subs	r2, r1, r2
 8009f5c:	49b2      	ldr	r1, [pc, #712]	; (800a228 <_strtod_l+0x5c0>)
 8009f5e:	9106      	str	r1, [sp, #24]
 8009f60:	2a08      	cmp	r2, #8
 8009f62:	dc04      	bgt.n	8009f6e <_strtod_l+0x306>
 8009f64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f66:	9206      	str	r2, [sp, #24]
 8009f68:	428a      	cmp	r2, r1
 8009f6a:	dd00      	ble.n	8009f6e <_strtod_l+0x306>
 8009f6c:	9106      	str	r1, [sp, #24]
 8009f6e:	2c00      	cmp	r4, #0
 8009f70:	d002      	beq.n	8009f78 <_strtod_l+0x310>
 8009f72:	9a06      	ldr	r2, [sp, #24]
 8009f74:	4252      	negs	r2, r2
 8009f76:	9206      	str	r2, [sp, #24]
 8009f78:	9a05      	ldr	r2, [sp, #20]
 8009f7a:	2a00      	cmp	r2, #0
 8009f7c:	d14d      	bne.n	800a01a <_strtod_l+0x3b2>
 8009f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f80:	4310      	orrs	r0, r2
 8009f82:	d000      	beq.n	8009f86 <_strtod_l+0x31e>
 8009f84:	e6ab      	b.n	8009cde <_strtod_l+0x76>
 8009f86:	4662      	mov	r2, ip
 8009f88:	2a00      	cmp	r2, #0
 8009f8a:	d000      	beq.n	8009f8e <_strtod_l+0x326>
 8009f8c:	e6c5      	b.n	8009d1a <_strtod_l+0xb2>
 8009f8e:	2b69      	cmp	r3, #105	; 0x69
 8009f90:	d027      	beq.n	8009fe2 <_strtod_l+0x37a>
 8009f92:	dc23      	bgt.n	8009fdc <_strtod_l+0x374>
 8009f94:	2b49      	cmp	r3, #73	; 0x49
 8009f96:	d024      	beq.n	8009fe2 <_strtod_l+0x37a>
 8009f98:	2b4e      	cmp	r3, #78	; 0x4e
 8009f9a:	d000      	beq.n	8009f9e <_strtod_l+0x336>
 8009f9c:	e6bd      	b.n	8009d1a <_strtod_l+0xb2>
 8009f9e:	49a3      	ldr	r1, [pc, #652]	; (800a22c <_strtod_l+0x5c4>)
 8009fa0:	a81b      	add	r0, sp, #108	; 0x6c
 8009fa2:	f001 f9d1 	bl	800b348 <__match>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d100      	bne.n	8009fac <_strtod_l+0x344>
 8009faa:	e6b6      	b.n	8009d1a <_strtod_l+0xb2>
 8009fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b28      	cmp	r3, #40	; 0x28
 8009fb2:	d12c      	bne.n	800a00e <_strtod_l+0x3a6>
 8009fb4:	499e      	ldr	r1, [pc, #632]	; (800a230 <_strtod_l+0x5c8>)
 8009fb6:	aa1e      	add	r2, sp, #120	; 0x78
 8009fb8:	a81b      	add	r0, sp, #108	; 0x6c
 8009fba:	f001 f9d9 	bl	800b370 <__hexnan>
 8009fbe:	2805      	cmp	r0, #5
 8009fc0:	d125      	bne.n	800a00e <_strtod_l+0x3a6>
 8009fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fc4:	4a9b      	ldr	r2, [pc, #620]	; (800a234 <_strtod_l+0x5cc>)
 8009fc6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	0017      	movs	r7, r2
 8009fcc:	e687      	b.n	8009cde <_strtod_l+0x76>
 8009fce:	220a      	movs	r2, #10
 8009fd0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009fd2:	434a      	muls	r2, r1
 8009fd4:	18d2      	adds	r2, r2, r3
 8009fd6:	3a30      	subs	r2, #48	; 0x30
 8009fd8:	920e      	str	r2, [sp, #56]	; 0x38
 8009fda:	e7b5      	b.n	8009f48 <_strtod_l+0x2e0>
 8009fdc:	2b6e      	cmp	r3, #110	; 0x6e
 8009fde:	d0de      	beq.n	8009f9e <_strtod_l+0x336>
 8009fe0:	e69b      	b.n	8009d1a <_strtod_l+0xb2>
 8009fe2:	4995      	ldr	r1, [pc, #596]	; (800a238 <_strtod_l+0x5d0>)
 8009fe4:	a81b      	add	r0, sp, #108	; 0x6c
 8009fe6:	f001 f9af 	bl	800b348 <__match>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d100      	bne.n	8009ff0 <_strtod_l+0x388>
 8009fee:	e694      	b.n	8009d1a <_strtod_l+0xb2>
 8009ff0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ff2:	4992      	ldr	r1, [pc, #584]	; (800a23c <_strtod_l+0x5d4>)
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	a81b      	add	r0, sp, #108	; 0x6c
 8009ff8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ffa:	f001 f9a5 	bl	800b348 <__match>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d102      	bne.n	800a008 <_strtod_l+0x3a0>
 800a002:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a004:	3301      	adds	r3, #1
 800a006:	931b      	str	r3, [sp, #108]	; 0x6c
 800a008:	2600      	movs	r6, #0
 800a00a:	4f8a      	ldr	r7, [pc, #552]	; (800a234 <_strtod_l+0x5cc>)
 800a00c:	e667      	b.n	8009cde <_strtod_l+0x76>
 800a00e:	488c      	ldr	r0, [pc, #560]	; (800a240 <_strtod_l+0x5d8>)
 800a010:	f000 feaa 	bl	800ad68 <nan>
 800a014:	0006      	movs	r6, r0
 800a016:	000f      	movs	r7, r1
 800a018:	e661      	b.n	8009cde <_strtod_l+0x76>
 800a01a:	9b06      	ldr	r3, [sp, #24]
 800a01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	9309      	str	r3, [sp, #36]	; 0x24
 800a022:	9b08      	ldr	r3, [sp, #32]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <_strtod_l+0x3c4>
 800a028:	9b05      	ldr	r3, [sp, #20]
 800a02a:	9308      	str	r3, [sp, #32]
 800a02c:	9c05      	ldr	r4, [sp, #20]
 800a02e:	2c10      	cmp	r4, #16
 800a030:	dd00      	ble.n	800a034 <_strtod_l+0x3cc>
 800a032:	2410      	movs	r4, #16
 800a034:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a036:	f7f8 f9cf 	bl	80023d8 <__aeabi_ui2d>
 800a03a:	9b05      	ldr	r3, [sp, #20]
 800a03c:	0006      	movs	r6, r0
 800a03e:	000f      	movs	r7, r1
 800a040:	2b09      	cmp	r3, #9
 800a042:	dd15      	ble.n	800a070 <_strtod_l+0x408>
 800a044:	0022      	movs	r2, r4
 800a046:	4b7f      	ldr	r3, [pc, #508]	; (800a244 <_strtod_l+0x5dc>)
 800a048:	3a09      	subs	r2, #9
 800a04a:	00d2      	lsls	r2, r2, #3
 800a04c:	189b      	adds	r3, r3, r2
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f7f7 fb17 	bl	8001684 <__aeabi_dmul>
 800a056:	0006      	movs	r6, r0
 800a058:	0028      	movs	r0, r5
 800a05a:	000f      	movs	r7, r1
 800a05c:	f7f8 f9bc 	bl	80023d8 <__aeabi_ui2d>
 800a060:	0002      	movs	r2, r0
 800a062:	000b      	movs	r3, r1
 800a064:	0030      	movs	r0, r6
 800a066:	0039      	movs	r1, r7
 800a068:	f7f6 fbb2 	bl	80007d0 <__aeabi_dadd>
 800a06c:	0006      	movs	r6, r0
 800a06e:	000f      	movs	r7, r1
 800a070:	9b05      	ldr	r3, [sp, #20]
 800a072:	2b0f      	cmp	r3, #15
 800a074:	dc39      	bgt.n	800a0ea <_strtod_l+0x482>
 800a076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d100      	bne.n	800a07e <_strtod_l+0x416>
 800a07c:	e62f      	b.n	8009cde <_strtod_l+0x76>
 800a07e:	dd24      	ble.n	800a0ca <_strtod_l+0x462>
 800a080:	2b16      	cmp	r3, #22
 800a082:	dc09      	bgt.n	800a098 <_strtod_l+0x430>
 800a084:	496f      	ldr	r1, [pc, #444]	; (800a244 <_strtod_l+0x5dc>)
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	18c9      	adds	r1, r1, r3
 800a08a:	0032      	movs	r2, r6
 800a08c:	6808      	ldr	r0, [r1, #0]
 800a08e:	6849      	ldr	r1, [r1, #4]
 800a090:	003b      	movs	r3, r7
 800a092:	f7f7 faf7 	bl	8001684 <__aeabi_dmul>
 800a096:	e7bd      	b.n	800a014 <_strtod_l+0x3ac>
 800a098:	2325      	movs	r3, #37	; 0x25
 800a09a:	9a05      	ldr	r2, [sp, #20]
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	db22      	blt.n	800a0ea <_strtod_l+0x482>
 800a0a4:	240f      	movs	r4, #15
 800a0a6:	9b05      	ldr	r3, [sp, #20]
 800a0a8:	4d66      	ldr	r5, [pc, #408]	; (800a244 <_strtod_l+0x5dc>)
 800a0aa:	1ae4      	subs	r4, r4, r3
 800a0ac:	00e1      	lsls	r1, r4, #3
 800a0ae:	1869      	adds	r1, r5, r1
 800a0b0:	0032      	movs	r2, r6
 800a0b2:	6808      	ldr	r0, [r1, #0]
 800a0b4:	6849      	ldr	r1, [r1, #4]
 800a0b6:	003b      	movs	r3, r7
 800a0b8:	f7f7 fae4 	bl	8001684 <__aeabi_dmul>
 800a0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0be:	1b1c      	subs	r4, r3, r4
 800a0c0:	00e4      	lsls	r4, r4, #3
 800a0c2:	192d      	adds	r5, r5, r4
 800a0c4:	682a      	ldr	r2, [r5, #0]
 800a0c6:	686b      	ldr	r3, [r5, #4]
 800a0c8:	e7e3      	b.n	800a092 <_strtod_l+0x42a>
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	3316      	adds	r3, #22
 800a0ce:	db0c      	blt.n	800a0ea <_strtod_l+0x482>
 800a0d0:	9906      	ldr	r1, [sp, #24]
 800a0d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0d4:	4b5b      	ldr	r3, [pc, #364]	; (800a244 <_strtod_l+0x5dc>)
 800a0d6:	1a52      	subs	r2, r2, r1
 800a0d8:	00d2      	lsls	r2, r2, #3
 800a0da:	189b      	adds	r3, r3, r2
 800a0dc:	0030      	movs	r0, r6
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	0039      	movs	r1, r7
 800a0e4:	f7f6 fed4 	bl	8000e90 <__aeabi_ddiv>
 800a0e8:	e794      	b.n	800a014 <_strtod_l+0x3ac>
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	1b1c      	subs	r4, r3, r4
 800a0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f0:	18e4      	adds	r4, r4, r3
 800a0f2:	2c00      	cmp	r4, #0
 800a0f4:	dd72      	ble.n	800a1dc <_strtod_l+0x574>
 800a0f6:	220f      	movs	r2, #15
 800a0f8:	0023      	movs	r3, r4
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	4214      	tst	r4, r2
 800a0fe:	d00a      	beq.n	800a116 <_strtod_l+0x4ae>
 800a100:	4950      	ldr	r1, [pc, #320]	; (800a244 <_strtod_l+0x5dc>)
 800a102:	00db      	lsls	r3, r3, #3
 800a104:	18c9      	adds	r1, r1, r3
 800a106:	0032      	movs	r2, r6
 800a108:	6808      	ldr	r0, [r1, #0]
 800a10a:	6849      	ldr	r1, [r1, #4]
 800a10c:	003b      	movs	r3, r7
 800a10e:	f7f7 fab9 	bl	8001684 <__aeabi_dmul>
 800a112:	0006      	movs	r6, r0
 800a114:	000f      	movs	r7, r1
 800a116:	230f      	movs	r3, #15
 800a118:	439c      	bics	r4, r3
 800a11a:	d04a      	beq.n	800a1b2 <_strtod_l+0x54a>
 800a11c:	3326      	adds	r3, #38	; 0x26
 800a11e:	33ff      	adds	r3, #255	; 0xff
 800a120:	429c      	cmp	r4, r3
 800a122:	dd22      	ble.n	800a16a <_strtod_l+0x502>
 800a124:	2300      	movs	r3, #0
 800a126:	9305      	str	r3, [sp, #20]
 800a128:	9306      	str	r3, [sp, #24]
 800a12a:	930d      	str	r3, [sp, #52]	; 0x34
 800a12c:	9308      	str	r3, [sp, #32]
 800a12e:	2322      	movs	r3, #34	; 0x22
 800a130:	2600      	movs	r6, #0
 800a132:	9a04      	ldr	r2, [sp, #16]
 800a134:	4f3f      	ldr	r7, [pc, #252]	; (800a234 <_strtod_l+0x5cc>)
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a13a:	42b3      	cmp	r3, r6
 800a13c:	d100      	bne.n	800a140 <_strtod_l+0x4d8>
 800a13e:	e5ce      	b.n	8009cde <_strtod_l+0x76>
 800a140:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a142:	9804      	ldr	r0, [sp, #16]
 800a144:	f001 fa12 	bl	800b56c <_Bfree>
 800a148:	9908      	ldr	r1, [sp, #32]
 800a14a:	9804      	ldr	r0, [sp, #16]
 800a14c:	f001 fa0e 	bl	800b56c <_Bfree>
 800a150:	9906      	ldr	r1, [sp, #24]
 800a152:	9804      	ldr	r0, [sp, #16]
 800a154:	f001 fa0a 	bl	800b56c <_Bfree>
 800a158:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a15a:	9804      	ldr	r0, [sp, #16]
 800a15c:	f001 fa06 	bl	800b56c <_Bfree>
 800a160:	9905      	ldr	r1, [sp, #20]
 800a162:	9804      	ldr	r0, [sp, #16]
 800a164:	f001 fa02 	bl	800b56c <_Bfree>
 800a168:	e5b9      	b.n	8009cde <_strtod_l+0x76>
 800a16a:	2300      	movs	r3, #0
 800a16c:	0030      	movs	r0, r6
 800a16e:	0039      	movs	r1, r7
 800a170:	4d35      	ldr	r5, [pc, #212]	; (800a248 <_strtod_l+0x5e0>)
 800a172:	1124      	asrs	r4, r4, #4
 800a174:	9307      	str	r3, [sp, #28]
 800a176:	2c01      	cmp	r4, #1
 800a178:	dc1e      	bgt.n	800a1b8 <_strtod_l+0x550>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <_strtod_l+0x51a>
 800a17e:	0006      	movs	r6, r0
 800a180:	000f      	movs	r7, r1
 800a182:	4b32      	ldr	r3, [pc, #200]	; (800a24c <_strtod_l+0x5e4>)
 800a184:	9a07      	ldr	r2, [sp, #28]
 800a186:	18ff      	adds	r7, r7, r3
 800a188:	4b2f      	ldr	r3, [pc, #188]	; (800a248 <_strtod_l+0x5e0>)
 800a18a:	00d2      	lsls	r2, r2, #3
 800a18c:	189d      	adds	r5, r3, r2
 800a18e:	6828      	ldr	r0, [r5, #0]
 800a190:	6869      	ldr	r1, [r5, #4]
 800a192:	0032      	movs	r2, r6
 800a194:	003b      	movs	r3, r7
 800a196:	f7f7 fa75 	bl	8001684 <__aeabi_dmul>
 800a19a:	4b26      	ldr	r3, [pc, #152]	; (800a234 <_strtod_l+0x5cc>)
 800a19c:	4a2c      	ldr	r2, [pc, #176]	; (800a250 <_strtod_l+0x5e8>)
 800a19e:	0006      	movs	r6, r0
 800a1a0:	400b      	ands	r3, r1
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d8be      	bhi.n	800a124 <_strtod_l+0x4bc>
 800a1a6:	4a2b      	ldr	r2, [pc, #172]	; (800a254 <_strtod_l+0x5ec>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d913      	bls.n	800a1d4 <_strtod_l+0x56c>
 800a1ac:	2601      	movs	r6, #1
 800a1ae:	4f2a      	ldr	r7, [pc, #168]	; (800a258 <_strtod_l+0x5f0>)
 800a1b0:	4276      	negs	r6, r6
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9307      	str	r3, [sp, #28]
 800a1b6:	e088      	b.n	800a2ca <_strtod_l+0x662>
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	4214      	tst	r4, r2
 800a1bc:	d004      	beq.n	800a1c8 <_strtod_l+0x560>
 800a1be:	682a      	ldr	r2, [r5, #0]
 800a1c0:	686b      	ldr	r3, [r5, #4]
 800a1c2:	f7f7 fa5f 	bl	8001684 <__aeabi_dmul>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	9a07      	ldr	r2, [sp, #28]
 800a1ca:	1064      	asrs	r4, r4, #1
 800a1cc:	3201      	adds	r2, #1
 800a1ce:	9207      	str	r2, [sp, #28]
 800a1d0:	3508      	adds	r5, #8
 800a1d2:	e7d0      	b.n	800a176 <_strtod_l+0x50e>
 800a1d4:	23d4      	movs	r3, #212	; 0xd4
 800a1d6:	049b      	lsls	r3, r3, #18
 800a1d8:	18cf      	adds	r7, r1, r3
 800a1da:	e7ea      	b.n	800a1b2 <_strtod_l+0x54a>
 800a1dc:	2c00      	cmp	r4, #0
 800a1de:	d0e8      	beq.n	800a1b2 <_strtod_l+0x54a>
 800a1e0:	4264      	negs	r4, r4
 800a1e2:	230f      	movs	r3, #15
 800a1e4:	0022      	movs	r2, r4
 800a1e6:	401a      	ands	r2, r3
 800a1e8:	421c      	tst	r4, r3
 800a1ea:	d00a      	beq.n	800a202 <_strtod_l+0x59a>
 800a1ec:	4b15      	ldr	r3, [pc, #84]	; (800a244 <_strtod_l+0x5dc>)
 800a1ee:	00d2      	lsls	r2, r2, #3
 800a1f0:	189b      	adds	r3, r3, r2
 800a1f2:	0030      	movs	r0, r6
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	0039      	movs	r1, r7
 800a1fa:	f7f6 fe49 	bl	8000e90 <__aeabi_ddiv>
 800a1fe:	0006      	movs	r6, r0
 800a200:	000f      	movs	r7, r1
 800a202:	1124      	asrs	r4, r4, #4
 800a204:	d0d5      	beq.n	800a1b2 <_strtod_l+0x54a>
 800a206:	2c1f      	cmp	r4, #31
 800a208:	dd28      	ble.n	800a25c <_strtod_l+0x5f4>
 800a20a:	2300      	movs	r3, #0
 800a20c:	9305      	str	r3, [sp, #20]
 800a20e:	9306      	str	r3, [sp, #24]
 800a210:	930d      	str	r3, [sp, #52]	; 0x34
 800a212:	9308      	str	r3, [sp, #32]
 800a214:	2322      	movs	r3, #34	; 0x22
 800a216:	9a04      	ldr	r2, [sp, #16]
 800a218:	2600      	movs	r6, #0
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21e:	2700      	movs	r7, #0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d18d      	bne.n	800a140 <_strtod_l+0x4d8>
 800a224:	e55b      	b.n	8009cde <_strtod_l+0x76>
 800a226:	46c0      	nop			; (mov r8, r8)
 800a228:	00004e1f 	.word	0x00004e1f
 800a22c:	0800cc49 	.word	0x0800cc49
 800a230:	0800cc60 	.word	0x0800cc60
 800a234:	7ff00000 	.word	0x7ff00000
 800a238:	0800cc40 	.word	0x0800cc40
 800a23c:	0800cc43 	.word	0x0800cc43
 800a240:	0800cfe9 	.word	0x0800cfe9
 800a244:	0800ceb8 	.word	0x0800ceb8
 800a248:	0800ce90 	.word	0x0800ce90
 800a24c:	fcb00000 	.word	0xfcb00000
 800a250:	7ca00000 	.word	0x7ca00000
 800a254:	7c900000 	.word	0x7c900000
 800a258:	7fefffff 	.word	0x7fefffff
 800a25c:	2310      	movs	r3, #16
 800a25e:	0022      	movs	r2, r4
 800a260:	401a      	ands	r2, r3
 800a262:	9207      	str	r2, [sp, #28]
 800a264:	421c      	tst	r4, r3
 800a266:	d001      	beq.n	800a26c <_strtod_l+0x604>
 800a268:	335a      	adds	r3, #90	; 0x5a
 800a26a:	9307      	str	r3, [sp, #28]
 800a26c:	0030      	movs	r0, r6
 800a26e:	0039      	movs	r1, r7
 800a270:	2300      	movs	r3, #0
 800a272:	4dc4      	ldr	r5, [pc, #784]	; (800a584 <_strtod_l+0x91c>)
 800a274:	2201      	movs	r2, #1
 800a276:	4214      	tst	r4, r2
 800a278:	d004      	beq.n	800a284 <_strtod_l+0x61c>
 800a27a:	682a      	ldr	r2, [r5, #0]
 800a27c:	686b      	ldr	r3, [r5, #4]
 800a27e:	f7f7 fa01 	bl	8001684 <__aeabi_dmul>
 800a282:	2301      	movs	r3, #1
 800a284:	1064      	asrs	r4, r4, #1
 800a286:	3508      	adds	r5, #8
 800a288:	2c00      	cmp	r4, #0
 800a28a:	d1f3      	bne.n	800a274 <_strtod_l+0x60c>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <_strtod_l+0x62c>
 800a290:	0006      	movs	r6, r0
 800a292:	000f      	movs	r7, r1
 800a294:	9b07      	ldr	r3, [sp, #28]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00f      	beq.n	800a2ba <_strtod_l+0x652>
 800a29a:	236b      	movs	r3, #107	; 0x6b
 800a29c:	007a      	lsls	r2, r7, #1
 800a29e:	0d52      	lsrs	r2, r2, #21
 800a2a0:	0039      	movs	r1, r7
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dd08      	ble.n	800a2ba <_strtod_l+0x652>
 800a2a8:	2b1f      	cmp	r3, #31
 800a2aa:	dc00      	bgt.n	800a2ae <_strtod_l+0x646>
 800a2ac:	e121      	b.n	800a4f2 <_strtod_l+0x88a>
 800a2ae:	2600      	movs	r6, #0
 800a2b0:	2b34      	cmp	r3, #52	; 0x34
 800a2b2:	dc00      	bgt.n	800a2b6 <_strtod_l+0x64e>
 800a2b4:	e116      	b.n	800a4e4 <_strtod_l+0x87c>
 800a2b6:	27dc      	movs	r7, #220	; 0xdc
 800a2b8:	04bf      	lsls	r7, r7, #18
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2300      	movs	r3, #0
 800a2be:	0030      	movs	r0, r6
 800a2c0:	0039      	movs	r1, r7
 800a2c2:	f7f6 f8cd 	bl	8000460 <__aeabi_dcmpeq>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d19f      	bne.n	800a20a <_strtod_l+0x5a2>
 800a2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2cc:	9a08      	ldr	r2, [sp, #32]
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a2d2:	9b05      	ldr	r3, [sp, #20]
 800a2d4:	9804      	ldr	r0, [sp, #16]
 800a2d6:	f001 f9b1 	bl	800b63c <__s2b>
 800a2da:	900d      	str	r0, [sp, #52]	; 0x34
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d100      	bne.n	800a2e2 <_strtod_l+0x67a>
 800a2e0:	e720      	b.n	800a124 <_strtod_l+0x4bc>
 800a2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e4:	9906      	ldr	r1, [sp, #24]
 800a2e6:	17da      	asrs	r2, r3, #31
 800a2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ea:	1a5b      	subs	r3, r3, r1
 800a2ec:	401a      	ands	r2, r3
 800a2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f0:	9215      	str	r2, [sp, #84]	; 0x54
 800a2f2:	43db      	mvns	r3, r3
 800a2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f6:	17db      	asrs	r3, r3, #31
 800a2f8:	401a      	ands	r2, r3
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	9218      	str	r2, [sp, #96]	; 0x60
 800a2fe:	9305      	str	r3, [sp, #20]
 800a300:	9306      	str	r3, [sp, #24]
 800a302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a304:	9804      	ldr	r0, [sp, #16]
 800a306:	6859      	ldr	r1, [r3, #4]
 800a308:	f001 f8ec 	bl	800b4e4 <_Balloc>
 800a30c:	9008      	str	r0, [sp, #32]
 800a30e:	2800      	cmp	r0, #0
 800a310:	d100      	bne.n	800a314 <_strtod_l+0x6ac>
 800a312:	e70c      	b.n	800a12e <_strtod_l+0x4c6>
 800a314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a316:	300c      	adds	r0, #12
 800a318:	0019      	movs	r1, r3
 800a31a:	691a      	ldr	r2, [r3, #16]
 800a31c:	310c      	adds	r1, #12
 800a31e:	3202      	adds	r2, #2
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	f000 fd18 	bl	800ad56 <memcpy>
 800a326:	ab1e      	add	r3, sp, #120	; 0x78
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	ab1d      	add	r3, sp, #116	; 0x74
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	0032      	movs	r2, r6
 800a330:	003b      	movs	r3, r7
 800a332:	9804      	ldr	r0, [sp, #16]
 800a334:	9610      	str	r6, [sp, #64]	; 0x40
 800a336:	9711      	str	r7, [sp, #68]	; 0x44
 800a338:	f001 fcc2 	bl	800bcc0 <__d2b>
 800a33c:	901c      	str	r0, [sp, #112]	; 0x70
 800a33e:	2800      	cmp	r0, #0
 800a340:	d100      	bne.n	800a344 <_strtod_l+0x6dc>
 800a342:	e6f4      	b.n	800a12e <_strtod_l+0x4c6>
 800a344:	2101      	movs	r1, #1
 800a346:	9804      	ldr	r0, [sp, #16]
 800a348:	f001 fa0c 	bl	800b764 <__i2b>
 800a34c:	9006      	str	r0, [sp, #24]
 800a34e:	2800      	cmp	r0, #0
 800a350:	d100      	bne.n	800a354 <_strtod_l+0x6ec>
 800a352:	e6ec      	b.n	800a12e <_strtod_l+0x4c6>
 800a354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a356:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a358:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a35a:	1ad4      	subs	r4, r2, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	db01      	blt.n	800a364 <_strtod_l+0x6fc>
 800a360:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a362:	195d      	adds	r5, r3, r5
 800a364:	9907      	ldr	r1, [sp, #28]
 800a366:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a368:	1a5b      	subs	r3, r3, r1
 800a36a:	2136      	movs	r1, #54	; 0x36
 800a36c:	189b      	adds	r3, r3, r2
 800a36e:	1a8a      	subs	r2, r1, r2
 800a370:	4985      	ldr	r1, [pc, #532]	; (800a588 <_strtod_l+0x920>)
 800a372:	2001      	movs	r0, #1
 800a374:	468c      	mov	ip, r1
 800a376:	2100      	movs	r1, #0
 800a378:	3b01      	subs	r3, #1
 800a37a:	9114      	str	r1, [sp, #80]	; 0x50
 800a37c:	9012      	str	r0, [sp, #72]	; 0x48
 800a37e:	4563      	cmp	r3, ip
 800a380:	da07      	bge.n	800a392 <_strtod_l+0x72a>
 800a382:	4661      	mov	r1, ip
 800a384:	1ac9      	subs	r1, r1, r3
 800a386:	1a52      	subs	r2, r2, r1
 800a388:	291f      	cmp	r1, #31
 800a38a:	dd00      	ble.n	800a38e <_strtod_l+0x726>
 800a38c:	e0b6      	b.n	800a4fc <_strtod_l+0x894>
 800a38e:	4088      	lsls	r0, r1
 800a390:	9012      	str	r0, [sp, #72]	; 0x48
 800a392:	18ab      	adds	r3, r5, r2
 800a394:	930c      	str	r3, [sp, #48]	; 0x30
 800a396:	18a4      	adds	r4, r4, r2
 800a398:	9b07      	ldr	r3, [sp, #28]
 800a39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39c:	191c      	adds	r4, r3, r4
 800a39e:	002b      	movs	r3, r5
 800a3a0:	4295      	cmp	r5, r2
 800a3a2:	dd00      	ble.n	800a3a6 <_strtod_l+0x73e>
 800a3a4:	0013      	movs	r3, r2
 800a3a6:	42a3      	cmp	r3, r4
 800a3a8:	dd00      	ble.n	800a3ac <_strtod_l+0x744>
 800a3aa:	0023      	movs	r3, r4
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	dd04      	ble.n	800a3ba <_strtod_l+0x752>
 800a3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3b2:	1ae4      	subs	r4, r4, r3
 800a3b4:	1ad2      	subs	r2, r2, r3
 800a3b6:	920c      	str	r2, [sp, #48]	; 0x30
 800a3b8:	1aed      	subs	r5, r5, r3
 800a3ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dd17      	ble.n	800a3f0 <_strtod_l+0x788>
 800a3c0:	001a      	movs	r2, r3
 800a3c2:	9906      	ldr	r1, [sp, #24]
 800a3c4:	9804      	ldr	r0, [sp, #16]
 800a3c6:	f001 fa95 	bl	800b8f4 <__pow5mult>
 800a3ca:	9006      	str	r0, [sp, #24]
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d100      	bne.n	800a3d2 <_strtod_l+0x76a>
 800a3d0:	e6ad      	b.n	800a12e <_strtod_l+0x4c6>
 800a3d2:	0001      	movs	r1, r0
 800a3d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a3d6:	9804      	ldr	r0, [sp, #16]
 800a3d8:	f001 f9dc 	bl	800b794 <__multiply>
 800a3dc:	900e      	str	r0, [sp, #56]	; 0x38
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d100      	bne.n	800a3e4 <_strtod_l+0x77c>
 800a3e2:	e6a4      	b.n	800a12e <_strtod_l+0x4c6>
 800a3e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3e6:	9804      	ldr	r0, [sp, #16]
 800a3e8:	f001 f8c0 	bl	800b56c <_Bfree>
 800a3ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ee:	931c      	str	r3, [sp, #112]	; 0x70
 800a3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dd00      	ble.n	800a3f8 <_strtod_l+0x790>
 800a3f6:	e087      	b.n	800a508 <_strtod_l+0x8a0>
 800a3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd08      	ble.n	800a410 <_strtod_l+0x7a8>
 800a3fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a400:	9908      	ldr	r1, [sp, #32]
 800a402:	9804      	ldr	r0, [sp, #16]
 800a404:	f001 fa76 	bl	800b8f4 <__pow5mult>
 800a408:	9008      	str	r0, [sp, #32]
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d100      	bne.n	800a410 <_strtod_l+0x7a8>
 800a40e:	e68e      	b.n	800a12e <_strtod_l+0x4c6>
 800a410:	2c00      	cmp	r4, #0
 800a412:	dd08      	ble.n	800a426 <_strtod_l+0x7be>
 800a414:	0022      	movs	r2, r4
 800a416:	9908      	ldr	r1, [sp, #32]
 800a418:	9804      	ldr	r0, [sp, #16]
 800a41a:	f001 fac7 	bl	800b9ac <__lshift>
 800a41e:	9008      	str	r0, [sp, #32]
 800a420:	2800      	cmp	r0, #0
 800a422:	d100      	bne.n	800a426 <_strtod_l+0x7be>
 800a424:	e683      	b.n	800a12e <_strtod_l+0x4c6>
 800a426:	2d00      	cmp	r5, #0
 800a428:	dd08      	ble.n	800a43c <_strtod_l+0x7d4>
 800a42a:	002a      	movs	r2, r5
 800a42c:	9906      	ldr	r1, [sp, #24]
 800a42e:	9804      	ldr	r0, [sp, #16]
 800a430:	f001 fabc 	bl	800b9ac <__lshift>
 800a434:	9006      	str	r0, [sp, #24]
 800a436:	2800      	cmp	r0, #0
 800a438:	d100      	bne.n	800a43c <_strtod_l+0x7d4>
 800a43a:	e678      	b.n	800a12e <_strtod_l+0x4c6>
 800a43c:	9a08      	ldr	r2, [sp, #32]
 800a43e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a440:	9804      	ldr	r0, [sp, #16]
 800a442:	f001 fb3d 	bl	800bac0 <__mdiff>
 800a446:	9005      	str	r0, [sp, #20]
 800a448:	2800      	cmp	r0, #0
 800a44a:	d100      	bne.n	800a44e <_strtod_l+0x7e6>
 800a44c:	e66f      	b.n	800a12e <_strtod_l+0x4c6>
 800a44e:	2200      	movs	r2, #0
 800a450:	68c3      	ldr	r3, [r0, #12]
 800a452:	9906      	ldr	r1, [sp, #24]
 800a454:	60c2      	str	r2, [r0, #12]
 800a456:	930c      	str	r3, [sp, #48]	; 0x30
 800a458:	f001 fb16 	bl	800ba88 <__mcmp>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	da5d      	bge.n	800a51c <_strtod_l+0x8b4>
 800a460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a462:	4333      	orrs	r3, r6
 800a464:	d000      	beq.n	800a468 <_strtod_l+0x800>
 800a466:	e088      	b.n	800a57a <_strtod_l+0x912>
 800a468:	033b      	lsls	r3, r7, #12
 800a46a:	d000      	beq.n	800a46e <_strtod_l+0x806>
 800a46c:	e085      	b.n	800a57a <_strtod_l+0x912>
 800a46e:	22d6      	movs	r2, #214	; 0xd6
 800a470:	4b46      	ldr	r3, [pc, #280]	; (800a58c <_strtod_l+0x924>)
 800a472:	04d2      	lsls	r2, r2, #19
 800a474:	403b      	ands	r3, r7
 800a476:	4293      	cmp	r3, r2
 800a478:	d97f      	bls.n	800a57a <_strtod_l+0x912>
 800a47a:	9b05      	ldr	r3, [sp, #20]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d103      	bne.n	800a48a <_strtod_l+0x822>
 800a482:	9b05      	ldr	r3, [sp, #20]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b01      	cmp	r3, #1
 800a488:	dd77      	ble.n	800a57a <_strtod_l+0x912>
 800a48a:	9905      	ldr	r1, [sp, #20]
 800a48c:	2201      	movs	r2, #1
 800a48e:	9804      	ldr	r0, [sp, #16]
 800a490:	f001 fa8c 	bl	800b9ac <__lshift>
 800a494:	9906      	ldr	r1, [sp, #24]
 800a496:	9005      	str	r0, [sp, #20]
 800a498:	f001 faf6 	bl	800ba88 <__mcmp>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dd6c      	ble.n	800a57a <_strtod_l+0x912>
 800a4a0:	9907      	ldr	r1, [sp, #28]
 800a4a2:	003b      	movs	r3, r7
 800a4a4:	4a39      	ldr	r2, [pc, #228]	; (800a58c <_strtod_l+0x924>)
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d100      	bne.n	800a4ac <_strtod_l+0x844>
 800a4aa:	e094      	b.n	800a5d6 <_strtod_l+0x96e>
 800a4ac:	0011      	movs	r1, r2
 800a4ae:	20d6      	movs	r0, #214	; 0xd6
 800a4b0:	4039      	ands	r1, r7
 800a4b2:	04c0      	lsls	r0, r0, #19
 800a4b4:	4281      	cmp	r1, r0
 800a4b6:	dd00      	ble.n	800a4ba <_strtod_l+0x852>
 800a4b8:	e08d      	b.n	800a5d6 <_strtod_l+0x96e>
 800a4ba:	23dc      	movs	r3, #220	; 0xdc
 800a4bc:	049b      	lsls	r3, r3, #18
 800a4be:	4299      	cmp	r1, r3
 800a4c0:	dc00      	bgt.n	800a4c4 <_strtod_l+0x85c>
 800a4c2:	e6a7      	b.n	800a214 <_strtod_l+0x5ac>
 800a4c4:	0030      	movs	r0, r6
 800a4c6:	0039      	movs	r1, r7
 800a4c8:	4b31      	ldr	r3, [pc, #196]	; (800a590 <_strtod_l+0x928>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f7f7 f8da 	bl	8001684 <__aeabi_dmul>
 800a4d0:	4b2e      	ldr	r3, [pc, #184]	; (800a58c <_strtod_l+0x924>)
 800a4d2:	0006      	movs	r6, r0
 800a4d4:	000f      	movs	r7, r1
 800a4d6:	420b      	tst	r3, r1
 800a4d8:	d000      	beq.n	800a4dc <_strtod_l+0x874>
 800a4da:	e631      	b.n	800a140 <_strtod_l+0x4d8>
 800a4dc:	2322      	movs	r3, #34	; 0x22
 800a4de:	9a04      	ldr	r2, [sp, #16]
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	e62d      	b.n	800a140 <_strtod_l+0x4d8>
 800a4e4:	234b      	movs	r3, #75	; 0x4b
 800a4e6:	1a9a      	subs	r2, r3, r2
 800a4e8:	3b4c      	subs	r3, #76	; 0x4c
 800a4ea:	4093      	lsls	r3, r2
 800a4ec:	4019      	ands	r1, r3
 800a4ee:	000f      	movs	r7, r1
 800a4f0:	e6e3      	b.n	800a2ba <_strtod_l+0x652>
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	4252      	negs	r2, r2
 800a4f6:	409a      	lsls	r2, r3
 800a4f8:	4016      	ands	r6, r2
 800a4fa:	e6de      	b.n	800a2ba <_strtod_l+0x652>
 800a4fc:	4925      	ldr	r1, [pc, #148]	; (800a594 <_strtod_l+0x92c>)
 800a4fe:	1acb      	subs	r3, r1, r3
 800a500:	0001      	movs	r1, r0
 800a502:	4099      	lsls	r1, r3
 800a504:	9114      	str	r1, [sp, #80]	; 0x50
 800a506:	e743      	b.n	800a390 <_strtod_l+0x728>
 800a508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a50a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a50c:	9804      	ldr	r0, [sp, #16]
 800a50e:	f001 fa4d 	bl	800b9ac <__lshift>
 800a512:	901c      	str	r0, [sp, #112]	; 0x70
 800a514:	2800      	cmp	r0, #0
 800a516:	d000      	beq.n	800a51a <_strtod_l+0x8b2>
 800a518:	e76e      	b.n	800a3f8 <_strtod_l+0x790>
 800a51a:	e608      	b.n	800a12e <_strtod_l+0x4c6>
 800a51c:	970e      	str	r7, [sp, #56]	; 0x38
 800a51e:	2800      	cmp	r0, #0
 800a520:	d177      	bne.n	800a612 <_strtod_l+0x9aa>
 800a522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a524:	033b      	lsls	r3, r7, #12
 800a526:	0b1b      	lsrs	r3, r3, #12
 800a528:	2a00      	cmp	r2, #0
 800a52a:	d039      	beq.n	800a5a0 <_strtod_l+0x938>
 800a52c:	4a1a      	ldr	r2, [pc, #104]	; (800a598 <_strtod_l+0x930>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d139      	bne.n	800a5a6 <_strtod_l+0x93e>
 800a532:	2101      	movs	r1, #1
 800a534:	9b07      	ldr	r3, [sp, #28]
 800a536:	4249      	negs	r1, r1
 800a538:	0032      	movs	r2, r6
 800a53a:	0008      	movs	r0, r1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <_strtod_l+0x8f0>
 800a540:	24d4      	movs	r4, #212	; 0xd4
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <_strtod_l+0x924>)
 800a544:	0008      	movs	r0, r1
 800a546:	403b      	ands	r3, r7
 800a548:	04e4      	lsls	r4, r4, #19
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	d804      	bhi.n	800a558 <_strtod_l+0x8f0>
 800a54e:	306c      	adds	r0, #108	; 0x6c
 800a550:	0d1b      	lsrs	r3, r3, #20
 800a552:	1ac3      	subs	r3, r0, r3
 800a554:	4099      	lsls	r1, r3
 800a556:	0008      	movs	r0, r1
 800a558:	4282      	cmp	r2, r0
 800a55a:	d124      	bne.n	800a5a6 <_strtod_l+0x93e>
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <_strtod_l+0x934>)
 800a55e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a560:	4299      	cmp	r1, r3
 800a562:	d102      	bne.n	800a56a <_strtod_l+0x902>
 800a564:	3201      	adds	r2, #1
 800a566:	d100      	bne.n	800a56a <_strtod_l+0x902>
 800a568:	e5e1      	b.n	800a12e <_strtod_l+0x4c6>
 800a56a:	4b08      	ldr	r3, [pc, #32]	; (800a58c <_strtod_l+0x924>)
 800a56c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a56e:	2600      	movs	r6, #0
 800a570:	401a      	ands	r2, r3
 800a572:	0013      	movs	r3, r2
 800a574:	2280      	movs	r2, #128	; 0x80
 800a576:	0352      	lsls	r2, r2, #13
 800a578:	189f      	adds	r7, r3, r2
 800a57a:	9b07      	ldr	r3, [sp, #28]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1a1      	bne.n	800a4c4 <_strtod_l+0x85c>
 800a580:	e5de      	b.n	800a140 <_strtod_l+0x4d8>
 800a582:	46c0      	nop			; (mov r8, r8)
 800a584:	0800cc78 	.word	0x0800cc78
 800a588:	fffffc02 	.word	0xfffffc02
 800a58c:	7ff00000 	.word	0x7ff00000
 800a590:	39500000 	.word	0x39500000
 800a594:	fffffbe2 	.word	0xfffffbe2
 800a598:	000fffff 	.word	0x000fffff
 800a59c:	7fefffff 	.word	0x7fefffff
 800a5a0:	4333      	orrs	r3, r6
 800a5a2:	d100      	bne.n	800a5a6 <_strtod_l+0x93e>
 800a5a4:	e77c      	b.n	800a4a0 <_strtod_l+0x838>
 800a5a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d01d      	beq.n	800a5e8 <_strtod_l+0x980>
 800a5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5b0:	4213      	tst	r3, r2
 800a5b2:	d0e2      	beq.n	800a57a <_strtod_l+0x912>
 800a5b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b6:	0030      	movs	r0, r6
 800a5b8:	0039      	movs	r1, r7
 800a5ba:	9a07      	ldr	r2, [sp, #28]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d017      	beq.n	800a5f0 <_strtod_l+0x988>
 800a5c0:	f7ff fb3a 	bl	8009c38 <sulp>
 800a5c4:	0002      	movs	r2, r0
 800a5c6:	000b      	movs	r3, r1
 800a5c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5cc:	f7f6 f900 	bl	80007d0 <__aeabi_dadd>
 800a5d0:	0006      	movs	r6, r0
 800a5d2:	000f      	movs	r7, r1
 800a5d4:	e7d1      	b.n	800a57a <_strtod_l+0x912>
 800a5d6:	2601      	movs	r6, #1
 800a5d8:	4013      	ands	r3, r2
 800a5da:	4a98      	ldr	r2, [pc, #608]	; (800a83c <_strtod_l+0xbd4>)
 800a5dc:	4276      	negs	r6, r6
 800a5de:	189b      	adds	r3, r3, r2
 800a5e0:	4a97      	ldr	r2, [pc, #604]	; (800a840 <_strtod_l+0xbd8>)
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	0017      	movs	r7, r2
 800a5e6:	e7c8      	b.n	800a57a <_strtod_l+0x912>
 800a5e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5ea:	4233      	tst	r3, r6
 800a5ec:	d0c5      	beq.n	800a57a <_strtod_l+0x912>
 800a5ee:	e7e1      	b.n	800a5b4 <_strtod_l+0x94c>
 800a5f0:	f7ff fb22 	bl	8009c38 <sulp>
 800a5f4:	0002      	movs	r2, r0
 800a5f6:	000b      	movs	r3, r1
 800a5f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5fc:	f7f7 fb04 	bl	8001c08 <__aeabi_dsub>
 800a600:	2200      	movs	r2, #0
 800a602:	2300      	movs	r3, #0
 800a604:	0006      	movs	r6, r0
 800a606:	000f      	movs	r7, r1
 800a608:	f7f5 ff2a 	bl	8000460 <__aeabi_dcmpeq>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d0b4      	beq.n	800a57a <_strtod_l+0x912>
 800a610:	e600      	b.n	800a214 <_strtod_l+0x5ac>
 800a612:	9906      	ldr	r1, [sp, #24]
 800a614:	9805      	ldr	r0, [sp, #20]
 800a616:	f001 fbb3 	bl	800bd80 <__ratio>
 800a61a:	2380      	movs	r3, #128	; 0x80
 800a61c:	2200      	movs	r2, #0
 800a61e:	05db      	lsls	r3, r3, #23
 800a620:	0004      	movs	r4, r0
 800a622:	000d      	movs	r5, r1
 800a624:	f7f5 ff2c 	bl	8000480 <__aeabi_dcmple>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d06d      	beq.n	800a708 <_strtod_l+0xaa0>
 800a62c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d000      	beq.n	800a634 <_strtod_l+0x9cc>
 800a632:	e07e      	b.n	800a732 <_strtod_l+0xaca>
 800a634:	2e00      	cmp	r6, #0
 800a636:	d158      	bne.n	800a6ea <_strtod_l+0xa82>
 800a638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a63a:	031b      	lsls	r3, r3, #12
 800a63c:	d000      	beq.n	800a640 <_strtod_l+0x9d8>
 800a63e:	e07f      	b.n	800a740 <_strtod_l+0xad8>
 800a640:	2200      	movs	r2, #0
 800a642:	0020      	movs	r0, r4
 800a644:	0029      	movs	r1, r5
 800a646:	4b7f      	ldr	r3, [pc, #508]	; (800a844 <_strtod_l+0xbdc>)
 800a648:	f7f5 ff10 	bl	800046c <__aeabi_dcmplt>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d158      	bne.n	800a702 <_strtod_l+0xa9a>
 800a650:	0020      	movs	r0, r4
 800a652:	0029      	movs	r1, r5
 800a654:	2200      	movs	r2, #0
 800a656:	4b7c      	ldr	r3, [pc, #496]	; (800a848 <_strtod_l+0xbe0>)
 800a658:	f7f7 f814 	bl	8001684 <__aeabi_dmul>
 800a65c:	0004      	movs	r4, r0
 800a65e:	000d      	movs	r5, r1
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	061b      	lsls	r3, r3, #24
 800a664:	940a      	str	r4, [sp, #40]	; 0x28
 800a666:	18eb      	adds	r3, r5, r3
 800a668:	930b      	str	r3, [sp, #44]	; 0x2c
 800a66a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a66e:	9212      	str	r2, [sp, #72]	; 0x48
 800a670:	9313      	str	r3, [sp, #76]	; 0x4c
 800a672:	4a76      	ldr	r2, [pc, #472]	; (800a84c <_strtod_l+0xbe4>)
 800a674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a676:	4013      	ands	r3, r2
 800a678:	9314      	str	r3, [sp, #80]	; 0x50
 800a67a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a67c:	4b74      	ldr	r3, [pc, #464]	; (800a850 <_strtod_l+0xbe8>)
 800a67e:	429a      	cmp	r2, r3
 800a680:	d000      	beq.n	800a684 <_strtod_l+0xa1c>
 800a682:	e091      	b.n	800a7a8 <_strtod_l+0xb40>
 800a684:	4a73      	ldr	r2, [pc, #460]	; (800a854 <_strtod_l+0xbec>)
 800a686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a688:	4694      	mov	ip, r2
 800a68a:	4463      	add	r3, ip
 800a68c:	001f      	movs	r7, r3
 800a68e:	0030      	movs	r0, r6
 800a690:	0019      	movs	r1, r3
 800a692:	f001 faad 	bl	800bbf0 <__ulp>
 800a696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a69a:	f7f6 fff3 	bl	8001684 <__aeabi_dmul>
 800a69e:	0032      	movs	r2, r6
 800a6a0:	003b      	movs	r3, r7
 800a6a2:	f7f6 f895 	bl	80007d0 <__aeabi_dadd>
 800a6a6:	4a69      	ldr	r2, [pc, #420]	; (800a84c <_strtod_l+0xbe4>)
 800a6a8:	4b6b      	ldr	r3, [pc, #428]	; (800a858 <_strtod_l+0xbf0>)
 800a6aa:	0006      	movs	r6, r0
 800a6ac:	400a      	ands	r2, r1
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d949      	bls.n	800a746 <_strtod_l+0xade>
 800a6b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6b4:	4b69      	ldr	r3, [pc, #420]	; (800a85c <_strtod_l+0xbf4>)
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d103      	bne.n	800a6c2 <_strtod_l+0xa5a>
 800a6ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6bc:	3301      	adds	r3, #1
 800a6be:	d100      	bne.n	800a6c2 <_strtod_l+0xa5a>
 800a6c0:	e535      	b.n	800a12e <_strtod_l+0x4c6>
 800a6c2:	2601      	movs	r6, #1
 800a6c4:	4f65      	ldr	r7, [pc, #404]	; (800a85c <_strtod_l+0xbf4>)
 800a6c6:	4276      	negs	r6, r6
 800a6c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a6ca:	9804      	ldr	r0, [sp, #16]
 800a6cc:	f000 ff4e 	bl	800b56c <_Bfree>
 800a6d0:	9908      	ldr	r1, [sp, #32]
 800a6d2:	9804      	ldr	r0, [sp, #16]
 800a6d4:	f000 ff4a 	bl	800b56c <_Bfree>
 800a6d8:	9906      	ldr	r1, [sp, #24]
 800a6da:	9804      	ldr	r0, [sp, #16]
 800a6dc:	f000 ff46 	bl	800b56c <_Bfree>
 800a6e0:	9905      	ldr	r1, [sp, #20]
 800a6e2:	9804      	ldr	r0, [sp, #16]
 800a6e4:	f000 ff42 	bl	800b56c <_Bfree>
 800a6e8:	e60b      	b.n	800a302 <_strtod_l+0x69a>
 800a6ea:	2e01      	cmp	r6, #1
 800a6ec:	d103      	bne.n	800a6f6 <_strtod_l+0xa8e>
 800a6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d100      	bne.n	800a6f6 <_strtod_l+0xa8e>
 800a6f4:	e58e      	b.n	800a214 <_strtod_l+0x5ac>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	4c59      	ldr	r4, [pc, #356]	; (800a860 <_strtod_l+0xbf8>)
 800a6fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a6fc:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a700:	e01c      	b.n	800a73c <_strtod_l+0xad4>
 800a702:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a704:	4d50      	ldr	r5, [pc, #320]	; (800a848 <_strtod_l+0xbe0>)
 800a706:	e7ab      	b.n	800a660 <_strtod_l+0x9f8>
 800a708:	2200      	movs	r2, #0
 800a70a:	0020      	movs	r0, r4
 800a70c:	0029      	movs	r1, r5
 800a70e:	4b4e      	ldr	r3, [pc, #312]	; (800a848 <_strtod_l+0xbe0>)
 800a710:	f7f6 ffb8 	bl	8001684 <__aeabi_dmul>
 800a714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a716:	0004      	movs	r4, r0
 800a718:	000b      	movs	r3, r1
 800a71a:	000d      	movs	r5, r1
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	d104      	bne.n	800a72a <_strtod_l+0xac2>
 800a720:	2280      	movs	r2, #128	; 0x80
 800a722:	0612      	lsls	r2, r2, #24
 800a724:	900a      	str	r0, [sp, #40]	; 0x28
 800a726:	188b      	adds	r3, r1, r2
 800a728:	e79e      	b.n	800a668 <_strtod_l+0xa00>
 800a72a:	0002      	movs	r2, r0
 800a72c:	920a      	str	r2, [sp, #40]	; 0x28
 800a72e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a730:	e79b      	b.n	800a66a <_strtod_l+0xa02>
 800a732:	2300      	movs	r3, #0
 800a734:	4c43      	ldr	r4, [pc, #268]	; (800a844 <_strtod_l+0xbdc>)
 800a736:	930a      	str	r3, [sp, #40]	; 0x28
 800a738:	940b      	str	r4, [sp, #44]	; 0x2c
 800a73a:	2400      	movs	r4, #0
 800a73c:	4d41      	ldr	r5, [pc, #260]	; (800a844 <_strtod_l+0xbdc>)
 800a73e:	e794      	b.n	800a66a <_strtod_l+0xa02>
 800a740:	2300      	movs	r3, #0
 800a742:	4c47      	ldr	r4, [pc, #284]	; (800a860 <_strtod_l+0xbf8>)
 800a744:	e7f7      	b.n	800a736 <_strtod_l+0xace>
 800a746:	23d4      	movs	r3, #212	; 0xd4
 800a748:	049b      	lsls	r3, r3, #18
 800a74a:	18cf      	adds	r7, r1, r3
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	970e      	str	r7, [sp, #56]	; 0x38
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1b9      	bne.n	800a6c8 <_strtod_l+0xa60>
 800a754:	4b3d      	ldr	r3, [pc, #244]	; (800a84c <_strtod_l+0xbe4>)
 800a756:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a758:	403b      	ands	r3, r7
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d1b4      	bne.n	800a6c8 <_strtod_l+0xa60>
 800a75e:	0020      	movs	r0, r4
 800a760:	0029      	movs	r1, r5
 800a762:	f7f5 ff17 	bl	8000594 <__aeabi_d2lz>
 800a766:	f7f5 ff51 	bl	800060c <__aeabi_l2d>
 800a76a:	0002      	movs	r2, r0
 800a76c:	000b      	movs	r3, r1
 800a76e:	0020      	movs	r0, r4
 800a770:	0029      	movs	r1, r5
 800a772:	f7f7 fa49 	bl	8001c08 <__aeabi_dsub>
 800a776:	033b      	lsls	r3, r7, #12
 800a778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a77a:	0b1b      	lsrs	r3, r3, #12
 800a77c:	4333      	orrs	r3, r6
 800a77e:	4313      	orrs	r3, r2
 800a780:	0004      	movs	r4, r0
 800a782:	000d      	movs	r5, r1
 800a784:	4a37      	ldr	r2, [pc, #220]	; (800a864 <_strtod_l+0xbfc>)
 800a786:	2b00      	cmp	r3, #0
 800a788:	d054      	beq.n	800a834 <_strtod_l+0xbcc>
 800a78a:	4b37      	ldr	r3, [pc, #220]	; (800a868 <_strtod_l+0xc00>)
 800a78c:	f7f5 fe6e 	bl	800046c <__aeabi_dcmplt>
 800a790:	2800      	cmp	r0, #0
 800a792:	d000      	beq.n	800a796 <_strtod_l+0xb2e>
 800a794:	e4d4      	b.n	800a140 <_strtod_l+0x4d8>
 800a796:	0020      	movs	r0, r4
 800a798:	0029      	movs	r1, r5
 800a79a:	4a34      	ldr	r2, [pc, #208]	; (800a86c <_strtod_l+0xc04>)
 800a79c:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <_strtod_l+0xbe0>)
 800a79e:	f7f5 fe79 	bl	8000494 <__aeabi_dcmpgt>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d090      	beq.n	800a6c8 <_strtod_l+0xa60>
 800a7a6:	e4cb      	b.n	800a140 <_strtod_l+0x4d8>
 800a7a8:	9b07      	ldr	r3, [sp, #28]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d02b      	beq.n	800a806 <_strtod_l+0xb9e>
 800a7ae:	23d4      	movs	r3, #212	; 0xd4
 800a7b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7b2:	04db      	lsls	r3, r3, #19
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d826      	bhi.n	800a806 <_strtod_l+0xb9e>
 800a7b8:	0020      	movs	r0, r4
 800a7ba:	0029      	movs	r1, r5
 800a7bc:	4a2c      	ldr	r2, [pc, #176]	; (800a870 <_strtod_l+0xc08>)
 800a7be:	4b2d      	ldr	r3, [pc, #180]	; (800a874 <_strtod_l+0xc0c>)
 800a7c0:	f7f5 fe5e 	bl	8000480 <__aeabi_dcmple>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d017      	beq.n	800a7f8 <_strtod_l+0xb90>
 800a7c8:	0020      	movs	r0, r4
 800a7ca:	0029      	movs	r1, r5
 800a7cc:	f7f5 fec4 	bl	8000558 <__aeabi_d2uiz>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d100      	bne.n	800a7d6 <_strtod_l+0xb6e>
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	f7f7 fdff 	bl	80023d8 <__aeabi_ui2d>
 800a7da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7dc:	0004      	movs	r4, r0
 800a7de:	000b      	movs	r3, r1
 800a7e0:	000d      	movs	r5, r1
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d122      	bne.n	800a82c <_strtod_l+0xbc4>
 800a7e6:	2280      	movs	r2, #128	; 0x80
 800a7e8:	0612      	lsls	r2, r2, #24
 800a7ea:	188b      	adds	r3, r1, r2
 800a7ec:	9016      	str	r0, [sp, #88]	; 0x58
 800a7ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800a7f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7f4:	9212      	str	r2, [sp, #72]	; 0x48
 800a7f6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7f8:	22d6      	movs	r2, #214	; 0xd6
 800a7fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7fc:	04d2      	lsls	r2, r2, #19
 800a7fe:	189b      	adds	r3, r3, r2
 800a800:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a802:	1a9b      	subs	r3, r3, r2
 800a804:	9313      	str	r3, [sp, #76]	; 0x4c
 800a806:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a808:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a80a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a80c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a80e:	f001 f9ef 	bl	800bbf0 <__ulp>
 800a812:	0002      	movs	r2, r0
 800a814:	000b      	movs	r3, r1
 800a816:	0030      	movs	r0, r6
 800a818:	0039      	movs	r1, r7
 800a81a:	f7f6 ff33 	bl	8001684 <__aeabi_dmul>
 800a81e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a822:	f7f5 ffd5 	bl	80007d0 <__aeabi_dadd>
 800a826:	0006      	movs	r6, r0
 800a828:	000f      	movs	r7, r1
 800a82a:	e78f      	b.n	800a74c <_strtod_l+0xae4>
 800a82c:	0002      	movs	r2, r0
 800a82e:	9216      	str	r2, [sp, #88]	; 0x58
 800a830:	9317      	str	r3, [sp, #92]	; 0x5c
 800a832:	e7dd      	b.n	800a7f0 <_strtod_l+0xb88>
 800a834:	4b10      	ldr	r3, [pc, #64]	; (800a878 <_strtod_l+0xc10>)
 800a836:	f7f5 fe19 	bl	800046c <__aeabi_dcmplt>
 800a83a:	e7b2      	b.n	800a7a2 <_strtod_l+0xb3a>
 800a83c:	fff00000 	.word	0xfff00000
 800a840:	000fffff 	.word	0x000fffff
 800a844:	3ff00000 	.word	0x3ff00000
 800a848:	3fe00000 	.word	0x3fe00000
 800a84c:	7ff00000 	.word	0x7ff00000
 800a850:	7fe00000 	.word	0x7fe00000
 800a854:	fcb00000 	.word	0xfcb00000
 800a858:	7c9fffff 	.word	0x7c9fffff
 800a85c:	7fefffff 	.word	0x7fefffff
 800a860:	bff00000 	.word	0xbff00000
 800a864:	94a03595 	.word	0x94a03595
 800a868:	3fdfffff 	.word	0x3fdfffff
 800a86c:	35afe535 	.word	0x35afe535
 800a870:	ffc00000 	.word	0xffc00000
 800a874:	41dfffff 	.word	0x41dfffff
 800a878:	3fcfffff 	.word	0x3fcfffff

0800a87c <strtod>:
 800a87c:	b510      	push	{r4, lr}
 800a87e:	4c04      	ldr	r4, [pc, #16]	; (800a890 <strtod+0x14>)
 800a880:	000a      	movs	r2, r1
 800a882:	0001      	movs	r1, r0
 800a884:	4b03      	ldr	r3, [pc, #12]	; (800a894 <strtod+0x18>)
 800a886:	6820      	ldr	r0, [r4, #0]
 800a888:	f7ff f9ee 	bl	8009c68 <_strtod_l>
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	200001e4 	.word	0x200001e4
 800a894:	2000002c 	.word	0x2000002c

0800a898 <_strtol_l.constprop.0>:
 800a898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89a:	b087      	sub	sp, #28
 800a89c:	001e      	movs	r6, r3
 800a89e:	9005      	str	r0, [sp, #20]
 800a8a0:	9101      	str	r1, [sp, #4]
 800a8a2:	9202      	str	r2, [sp, #8]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d048      	beq.n	800a93a <_strtol_l.constprop.0+0xa2>
 800a8a8:	000b      	movs	r3, r1
 800a8aa:	2e24      	cmp	r6, #36	; 0x24
 800a8ac:	d845      	bhi.n	800a93a <_strtol_l.constprop.0+0xa2>
 800a8ae:	4a3b      	ldr	r2, [pc, #236]	; (800a99c <_strtol_l.constprop.0+0x104>)
 800a8b0:	2108      	movs	r1, #8
 800a8b2:	4694      	mov	ip, r2
 800a8b4:	001a      	movs	r2, r3
 800a8b6:	4660      	mov	r0, ip
 800a8b8:	7814      	ldrb	r4, [r2, #0]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	5d00      	ldrb	r0, [r0, r4]
 800a8be:	001d      	movs	r5, r3
 800a8c0:	0007      	movs	r7, r0
 800a8c2:	400f      	ands	r7, r1
 800a8c4:	4208      	tst	r0, r1
 800a8c6:	d1f5      	bne.n	800a8b4 <_strtol_l.constprop.0+0x1c>
 800a8c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a8ca:	d13d      	bne.n	800a948 <_strtol_l.constprop.0+0xb0>
 800a8cc:	2701      	movs	r7, #1
 800a8ce:	781c      	ldrb	r4, [r3, #0]
 800a8d0:	1c95      	adds	r5, r2, #2
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	d05e      	beq.n	800a994 <_strtol_l.constprop.0+0xfc>
 800a8d6:	2e10      	cmp	r6, #16
 800a8d8:	d109      	bne.n	800a8ee <_strtol_l.constprop.0+0x56>
 800a8da:	2c30      	cmp	r4, #48	; 0x30
 800a8dc:	d107      	bne.n	800a8ee <_strtol_l.constprop.0+0x56>
 800a8de:	2220      	movs	r2, #32
 800a8e0:	782b      	ldrb	r3, [r5, #0]
 800a8e2:	4393      	bics	r3, r2
 800a8e4:	2b58      	cmp	r3, #88	; 0x58
 800a8e6:	d150      	bne.n	800a98a <_strtol_l.constprop.0+0xf2>
 800a8e8:	2610      	movs	r6, #16
 800a8ea:	786c      	ldrb	r4, [r5, #1]
 800a8ec:	3502      	adds	r5, #2
 800a8ee:	4b2c      	ldr	r3, [pc, #176]	; (800a9a0 <_strtol_l.constprop.0+0x108>)
 800a8f0:	0031      	movs	r1, r6
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	9303      	str	r3, [sp, #12]
 800a8f8:	f7f5 fcb2 	bl	8000260 <__aeabi_uidivmod>
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	9104      	str	r1, [sp, #16]
 800a900:	2101      	movs	r1, #1
 800a902:	4684      	mov	ip, r0
 800a904:	0010      	movs	r0, r2
 800a906:	4249      	negs	r1, r1
 800a908:	0023      	movs	r3, r4
 800a90a:	3b30      	subs	r3, #48	; 0x30
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d903      	bls.n	800a918 <_strtol_l.constprop.0+0x80>
 800a910:	3b11      	subs	r3, #17
 800a912:	2b19      	cmp	r3, #25
 800a914:	d81d      	bhi.n	800a952 <_strtol_l.constprop.0+0xba>
 800a916:	330a      	adds	r3, #10
 800a918:	429e      	cmp	r6, r3
 800a91a:	dd1e      	ble.n	800a95a <_strtol_l.constprop.0+0xc2>
 800a91c:	1c54      	adds	r4, r2, #1
 800a91e:	d009      	beq.n	800a934 <_strtol_l.constprop.0+0x9c>
 800a920:	000a      	movs	r2, r1
 800a922:	4584      	cmp	ip, r0
 800a924:	d306      	bcc.n	800a934 <_strtol_l.constprop.0+0x9c>
 800a926:	d102      	bne.n	800a92e <_strtol_l.constprop.0+0x96>
 800a928:	9c04      	ldr	r4, [sp, #16]
 800a92a:	429c      	cmp	r4, r3
 800a92c:	db02      	blt.n	800a934 <_strtol_l.constprop.0+0x9c>
 800a92e:	2201      	movs	r2, #1
 800a930:	4370      	muls	r0, r6
 800a932:	1818      	adds	r0, r3, r0
 800a934:	782c      	ldrb	r4, [r5, #0]
 800a936:	3501      	adds	r5, #1
 800a938:	e7e6      	b.n	800a908 <_strtol_l.constprop.0+0x70>
 800a93a:	f000 f9d7 	bl	800acec <__errno>
 800a93e:	2316      	movs	r3, #22
 800a940:	6003      	str	r3, [r0, #0]
 800a942:	2000      	movs	r0, #0
 800a944:	b007      	add	sp, #28
 800a946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a948:	2c2b      	cmp	r4, #43	; 0x2b
 800a94a:	d1c2      	bne.n	800a8d2 <_strtol_l.constprop.0+0x3a>
 800a94c:	781c      	ldrb	r4, [r3, #0]
 800a94e:	1c95      	adds	r5, r2, #2
 800a950:	e7bf      	b.n	800a8d2 <_strtol_l.constprop.0+0x3a>
 800a952:	0023      	movs	r3, r4
 800a954:	3b61      	subs	r3, #97	; 0x61
 800a956:	2b19      	cmp	r3, #25
 800a958:	d9dd      	bls.n	800a916 <_strtol_l.constprop.0+0x7e>
 800a95a:	1c53      	adds	r3, r2, #1
 800a95c:	d109      	bne.n	800a972 <_strtol_l.constprop.0+0xda>
 800a95e:	2322      	movs	r3, #34	; 0x22
 800a960:	9a05      	ldr	r2, [sp, #20]
 800a962:	9803      	ldr	r0, [sp, #12]
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	9b02      	ldr	r3, [sp, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0eb      	beq.n	800a944 <_strtol_l.constprop.0+0xac>
 800a96c:	1e6b      	subs	r3, r5, #1
 800a96e:	9301      	str	r3, [sp, #4]
 800a970:	e007      	b.n	800a982 <_strtol_l.constprop.0+0xea>
 800a972:	2f00      	cmp	r7, #0
 800a974:	d000      	beq.n	800a978 <_strtol_l.constprop.0+0xe0>
 800a976:	4240      	negs	r0, r0
 800a978:	9b02      	ldr	r3, [sp, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0e2      	beq.n	800a944 <_strtol_l.constprop.0+0xac>
 800a97e:	2a00      	cmp	r2, #0
 800a980:	d1f4      	bne.n	800a96c <_strtol_l.constprop.0+0xd4>
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	9a01      	ldr	r2, [sp, #4]
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e7dc      	b.n	800a944 <_strtol_l.constprop.0+0xac>
 800a98a:	2430      	movs	r4, #48	; 0x30
 800a98c:	2e00      	cmp	r6, #0
 800a98e:	d1ae      	bne.n	800a8ee <_strtol_l.constprop.0+0x56>
 800a990:	3608      	adds	r6, #8
 800a992:	e7ac      	b.n	800a8ee <_strtol_l.constprop.0+0x56>
 800a994:	2c30      	cmp	r4, #48	; 0x30
 800a996:	d0a2      	beq.n	800a8de <_strtol_l.constprop.0+0x46>
 800a998:	260a      	movs	r6, #10
 800a99a:	e7a8      	b.n	800a8ee <_strtol_l.constprop.0+0x56>
 800a99c:	0800cca1 	.word	0x0800cca1
 800a9a0:	7fffffff 	.word	0x7fffffff

0800a9a4 <strtol>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	4c04      	ldr	r4, [pc, #16]	; (800a9b8 <strtol+0x14>)
 800a9a8:	0013      	movs	r3, r2
 800a9aa:	000a      	movs	r2, r1
 800a9ac:	0001      	movs	r1, r0
 800a9ae:	6820      	ldr	r0, [r4, #0]
 800a9b0:	f7ff ff72 	bl	800a898 <_strtol_l.constprop.0>
 800a9b4:	bd10      	pop	{r4, pc}
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	200001e4 	.word	0x200001e4

0800a9bc <std>:
 800a9bc:	2300      	movs	r3, #0
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	0004      	movs	r4, r0
 800a9c2:	6003      	str	r3, [r0, #0]
 800a9c4:	6043      	str	r3, [r0, #4]
 800a9c6:	6083      	str	r3, [r0, #8]
 800a9c8:	8181      	strh	r1, [r0, #12]
 800a9ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a9cc:	81c2      	strh	r2, [r0, #14]
 800a9ce:	6103      	str	r3, [r0, #16]
 800a9d0:	6143      	str	r3, [r0, #20]
 800a9d2:	6183      	str	r3, [r0, #24]
 800a9d4:	0019      	movs	r1, r3
 800a9d6:	2208      	movs	r2, #8
 800a9d8:	305c      	adds	r0, #92	; 0x5c
 800a9da:	f000 f8ff 	bl	800abdc <memset>
 800a9de:	4b0b      	ldr	r3, [pc, #44]	; (800aa0c <std+0x50>)
 800a9e0:	6224      	str	r4, [r4, #32]
 800a9e2:	6263      	str	r3, [r4, #36]	; 0x24
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <std+0x54>)
 800a9e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <std+0x58>)
 800a9ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9ec:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <std+0x5c>)
 800a9ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <std+0x60>)
 800a9f2:	429c      	cmp	r4, r3
 800a9f4:	d005      	beq.n	800aa02 <std+0x46>
 800a9f6:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <std+0x64>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	d002      	beq.n	800aa02 <std+0x46>
 800a9fc:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <std+0x68>)
 800a9fe:	429c      	cmp	r4, r3
 800aa00:	d103      	bne.n	800aa0a <std+0x4e>
 800aa02:	0020      	movs	r0, r4
 800aa04:	3058      	adds	r0, #88	; 0x58
 800aa06:	f000 f99b 	bl	800ad40 <__retarget_lock_init_recursive>
 800aa0a:	bd10      	pop	{r4, pc}
 800aa0c:	0800ab45 	.word	0x0800ab45
 800aa10:	0800ab6d 	.word	0x0800ab6d
 800aa14:	0800aba5 	.word	0x0800aba5
 800aa18:	0800abd1 	.word	0x0800abd1
 800aa1c:	20000dd8 	.word	0x20000dd8
 800aa20:	20000e40 	.word	0x20000e40
 800aa24:	20000ea8 	.word	0x20000ea8

0800aa28 <stdio_exit_handler>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	4a03      	ldr	r2, [pc, #12]	; (800aa38 <stdio_exit_handler+0x10>)
 800aa2c:	4903      	ldr	r1, [pc, #12]	; (800aa3c <stdio_exit_handler+0x14>)
 800aa2e:	4804      	ldr	r0, [pc, #16]	; (800aa40 <stdio_exit_handler+0x18>)
 800aa30:	f000 f86c 	bl	800ab0c <_fwalk_sglue>
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	46c0      	nop			; (mov r8, r8)
 800aa38:	20000020 	.word	0x20000020
 800aa3c:	0800c299 	.word	0x0800c299
 800aa40:	20000198 	.word	0x20000198

0800aa44 <cleanup_stdio>:
 800aa44:	6841      	ldr	r1, [r0, #4]
 800aa46:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <cleanup_stdio+0x30>)
 800aa48:	b510      	push	{r4, lr}
 800aa4a:	0004      	movs	r4, r0
 800aa4c:	4299      	cmp	r1, r3
 800aa4e:	d001      	beq.n	800aa54 <cleanup_stdio+0x10>
 800aa50:	f001 fc22 	bl	800c298 <_fflush_r>
 800aa54:	68a1      	ldr	r1, [r4, #8]
 800aa56:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <cleanup_stdio+0x34>)
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d002      	beq.n	800aa62 <cleanup_stdio+0x1e>
 800aa5c:	0020      	movs	r0, r4
 800aa5e:	f001 fc1b 	bl	800c298 <_fflush_r>
 800aa62:	68e1      	ldr	r1, [r4, #12]
 800aa64:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <cleanup_stdio+0x38>)
 800aa66:	4299      	cmp	r1, r3
 800aa68:	d002      	beq.n	800aa70 <cleanup_stdio+0x2c>
 800aa6a:	0020      	movs	r0, r4
 800aa6c:	f001 fc14 	bl	800c298 <_fflush_r>
 800aa70:	bd10      	pop	{r4, pc}
 800aa72:	46c0      	nop			; (mov r8, r8)
 800aa74:	20000dd8 	.word	0x20000dd8
 800aa78:	20000e40 	.word	0x20000e40
 800aa7c:	20000ea8 	.word	0x20000ea8

0800aa80 <global_stdio_init.part.0>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <global_stdio_init.part.0+0x28>)
 800aa84:	4a09      	ldr	r2, [pc, #36]	; (800aaac <global_stdio_init.part.0+0x2c>)
 800aa86:	2104      	movs	r1, #4
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	4809      	ldr	r0, [pc, #36]	; (800aab0 <global_stdio_init.part.0+0x30>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f7ff ff95 	bl	800a9bc <std>
 800aa92:	2201      	movs	r2, #1
 800aa94:	2109      	movs	r1, #9
 800aa96:	4807      	ldr	r0, [pc, #28]	; (800aab4 <global_stdio_init.part.0+0x34>)
 800aa98:	f7ff ff90 	bl	800a9bc <std>
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	2112      	movs	r1, #18
 800aaa0:	4805      	ldr	r0, [pc, #20]	; (800aab8 <global_stdio_init.part.0+0x38>)
 800aaa2:	f7ff ff8b 	bl	800a9bc <std>
 800aaa6:	bd10      	pop	{r4, pc}
 800aaa8:	20000f10 	.word	0x20000f10
 800aaac:	0800aa29 	.word	0x0800aa29
 800aab0:	20000dd8 	.word	0x20000dd8
 800aab4:	20000e40 	.word	0x20000e40
 800aab8:	20000ea8 	.word	0x20000ea8

0800aabc <__sfp_lock_acquire>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4802      	ldr	r0, [pc, #8]	; (800aac8 <__sfp_lock_acquire+0xc>)
 800aac0:	f000 f93f 	bl	800ad42 <__retarget_lock_acquire_recursive>
 800aac4:	bd10      	pop	{r4, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	20000f19 	.word	0x20000f19

0800aacc <__sfp_lock_release>:
 800aacc:	b510      	push	{r4, lr}
 800aace:	4802      	ldr	r0, [pc, #8]	; (800aad8 <__sfp_lock_release+0xc>)
 800aad0:	f000 f938 	bl	800ad44 <__retarget_lock_release_recursive>
 800aad4:	bd10      	pop	{r4, pc}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	20000f19 	.word	0x20000f19

0800aadc <__sinit>:
 800aadc:	b510      	push	{r4, lr}
 800aade:	0004      	movs	r4, r0
 800aae0:	f7ff ffec 	bl	800aabc <__sfp_lock_acquire>
 800aae4:	6a23      	ldr	r3, [r4, #32]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <__sinit+0x14>
 800aaea:	f7ff ffef 	bl	800aacc <__sfp_lock_release>
 800aaee:	bd10      	pop	{r4, pc}
 800aaf0:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <__sinit+0x28>)
 800aaf2:	6223      	str	r3, [r4, #32]
 800aaf4:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <__sinit+0x2c>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1f6      	bne.n	800aaea <__sinit+0xe>
 800aafc:	f7ff ffc0 	bl	800aa80 <global_stdio_init.part.0>
 800ab00:	e7f3      	b.n	800aaea <__sinit+0xe>
 800ab02:	46c0      	nop			; (mov r8, r8)
 800ab04:	0800aa45 	.word	0x0800aa45
 800ab08:	20000f10 	.word	0x20000f10

0800ab0c <_fwalk_sglue>:
 800ab0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab0e:	0014      	movs	r4, r2
 800ab10:	2600      	movs	r6, #0
 800ab12:	9000      	str	r0, [sp, #0]
 800ab14:	9101      	str	r1, [sp, #4]
 800ab16:	68a5      	ldr	r5, [r4, #8]
 800ab18:	6867      	ldr	r7, [r4, #4]
 800ab1a:	3f01      	subs	r7, #1
 800ab1c:	d504      	bpl.n	800ab28 <_fwalk_sglue+0x1c>
 800ab1e:	6824      	ldr	r4, [r4, #0]
 800ab20:	2c00      	cmp	r4, #0
 800ab22:	d1f8      	bne.n	800ab16 <_fwalk_sglue+0xa>
 800ab24:	0030      	movs	r0, r6
 800ab26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab28:	89ab      	ldrh	r3, [r5, #12]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d908      	bls.n	800ab40 <_fwalk_sglue+0x34>
 800ab2e:	220e      	movs	r2, #14
 800ab30:	5eab      	ldrsh	r3, [r5, r2]
 800ab32:	3301      	adds	r3, #1
 800ab34:	d004      	beq.n	800ab40 <_fwalk_sglue+0x34>
 800ab36:	0029      	movs	r1, r5
 800ab38:	9800      	ldr	r0, [sp, #0]
 800ab3a:	9b01      	ldr	r3, [sp, #4]
 800ab3c:	4798      	blx	r3
 800ab3e:	4306      	orrs	r6, r0
 800ab40:	3568      	adds	r5, #104	; 0x68
 800ab42:	e7ea      	b.n	800ab1a <_fwalk_sglue+0xe>

0800ab44 <__sread>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	000c      	movs	r4, r1
 800ab48:	250e      	movs	r5, #14
 800ab4a:	5f49      	ldrsh	r1, [r1, r5]
 800ab4c:	f000 f894 	bl	800ac78 <_read_r>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	db03      	blt.n	800ab5c <__sread+0x18>
 800ab54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab56:	181b      	adds	r3, r3, r0
 800ab58:	6563      	str	r3, [r4, #84]	; 0x54
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	4a02      	ldr	r2, [pc, #8]	; (800ab68 <__sread+0x24>)
 800ab60:	4013      	ands	r3, r2
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	e7f9      	b.n	800ab5a <__sread+0x16>
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	ffffefff 	.word	0xffffefff

0800ab6c <__swrite>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	001f      	movs	r7, r3
 800ab70:	898b      	ldrh	r3, [r1, #12]
 800ab72:	0005      	movs	r5, r0
 800ab74:	000c      	movs	r4, r1
 800ab76:	0016      	movs	r6, r2
 800ab78:	05db      	lsls	r3, r3, #23
 800ab7a:	d505      	bpl.n	800ab88 <__swrite+0x1c>
 800ab7c:	230e      	movs	r3, #14
 800ab7e:	5ec9      	ldrsh	r1, [r1, r3]
 800ab80:	2200      	movs	r2, #0
 800ab82:	2302      	movs	r3, #2
 800ab84:	f000 f864 	bl	800ac50 <_lseek_r>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	4a05      	ldr	r2, [pc, #20]	; (800aba0 <__swrite+0x34>)
 800ab8c:	0028      	movs	r0, r5
 800ab8e:	4013      	ands	r3, r2
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	0032      	movs	r2, r6
 800ab94:	230e      	movs	r3, #14
 800ab96:	5ee1      	ldrsh	r1, [r4, r3]
 800ab98:	003b      	movs	r3, r7
 800ab9a:	f000 f893 	bl	800acc4 <_write_r>
 800ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba0:	ffffefff 	.word	0xffffefff

0800aba4 <__sseek>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	000c      	movs	r4, r1
 800aba8:	250e      	movs	r5, #14
 800abaa:	5f49      	ldrsh	r1, [r1, r5]
 800abac:	f000 f850 	bl	800ac50 <_lseek_r>
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	1c42      	adds	r2, r0, #1
 800abb4:	d103      	bne.n	800abbe <__sseek+0x1a>
 800abb6:	4a05      	ldr	r2, [pc, #20]	; (800abcc <__sseek+0x28>)
 800abb8:	4013      	ands	r3, r2
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	bd70      	pop	{r4, r5, r6, pc}
 800abbe:	2280      	movs	r2, #128	; 0x80
 800abc0:	0152      	lsls	r2, r2, #5
 800abc2:	4313      	orrs	r3, r2
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	6560      	str	r0, [r4, #84]	; 0x54
 800abc8:	e7f8      	b.n	800abbc <__sseek+0x18>
 800abca:	46c0      	nop			; (mov r8, r8)
 800abcc:	ffffefff 	.word	0xffffefff

0800abd0 <__sclose>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	230e      	movs	r3, #14
 800abd4:	5ec9      	ldrsh	r1, [r1, r3]
 800abd6:	f000 f829 	bl	800ac2c <_close_r>
 800abda:	bd10      	pop	{r4, pc}

0800abdc <memset>:
 800abdc:	0003      	movs	r3, r0
 800abde:	1882      	adds	r2, r0, r2
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d100      	bne.n	800abe6 <memset+0xa>
 800abe4:	4770      	bx	lr
 800abe6:	7019      	strb	r1, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	e7f9      	b.n	800abe0 <memset+0x4>

0800abec <strchr>:
 800abec:	b2c9      	uxtb	r1, r1
 800abee:	7803      	ldrb	r3, [r0, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <strchr+0x12>
 800abf4:	428b      	cmp	r3, r1
 800abf6:	d100      	bne.n	800abfa <strchr+0xe>
 800abf8:	4770      	bx	lr
 800abfa:	3001      	adds	r0, #1
 800abfc:	e7f7      	b.n	800abee <strchr+0x2>
 800abfe:	424b      	negs	r3, r1
 800ac00:	4159      	adcs	r1, r3
 800ac02:	4249      	negs	r1, r1
 800ac04:	4008      	ands	r0, r1
 800ac06:	e7f7      	b.n	800abf8 <strchr+0xc>

0800ac08 <strncmp>:
 800ac08:	b530      	push	{r4, r5, lr}
 800ac0a:	0005      	movs	r5, r0
 800ac0c:	1e10      	subs	r0, r2, #0
 800ac0e:	d00b      	beq.n	800ac28 <strncmp+0x20>
 800ac10:	2400      	movs	r4, #0
 800ac12:	3a01      	subs	r2, #1
 800ac14:	5d2b      	ldrb	r3, [r5, r4]
 800ac16:	5d08      	ldrb	r0, [r1, r4]
 800ac18:	4283      	cmp	r3, r0
 800ac1a:	d104      	bne.n	800ac26 <strncmp+0x1e>
 800ac1c:	42a2      	cmp	r2, r4
 800ac1e:	d002      	beq.n	800ac26 <strncmp+0x1e>
 800ac20:	3401      	adds	r4, #1
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1f6      	bne.n	800ac14 <strncmp+0xc>
 800ac26:	1a18      	subs	r0, r3, r0
 800ac28:	bd30      	pop	{r4, r5, pc}
	...

0800ac2c <_close_r>:
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	b570      	push	{r4, r5, r6, lr}
 800ac30:	4d06      	ldr	r5, [pc, #24]	; (800ac4c <_close_r+0x20>)
 800ac32:	0004      	movs	r4, r0
 800ac34:	0008      	movs	r0, r1
 800ac36:	602b      	str	r3, [r5, #0]
 800ac38:	f7fe fd2c 	bl	8009694 <_close>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d103      	bne.n	800ac48 <_close_r+0x1c>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d000      	beq.n	800ac48 <_close_r+0x1c>
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	bd70      	pop	{r4, r5, r6, pc}
 800ac4a:	46c0      	nop			; (mov r8, r8)
 800ac4c:	20000f14 	.word	0x20000f14

0800ac50 <_lseek_r>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	0004      	movs	r4, r0
 800ac54:	0008      	movs	r0, r1
 800ac56:	0011      	movs	r1, r2
 800ac58:	001a      	movs	r2, r3
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4d05      	ldr	r5, [pc, #20]	; (800ac74 <_lseek_r+0x24>)
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	f7fe fcd9 	bl	8009616 <_lseek>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d103      	bne.n	800ac70 <_lseek_r+0x20>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d000      	beq.n	800ac70 <_lseek_r+0x20>
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	bd70      	pop	{r4, r5, r6, pc}
 800ac72:	46c0      	nop			; (mov r8, r8)
 800ac74:	20000f14 	.word	0x20000f14

0800ac78 <_read_r>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	0004      	movs	r4, r0
 800ac7c:	0008      	movs	r0, r1
 800ac7e:	0011      	movs	r1, r2
 800ac80:	001a      	movs	r2, r3
 800ac82:	2300      	movs	r3, #0
 800ac84:	4d05      	ldr	r5, [pc, #20]	; (800ac9c <_read_r+0x24>)
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	f7fe fc70 	bl	800956c <_read>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d103      	bne.n	800ac98 <_read_r+0x20>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d000      	beq.n	800ac98 <_read_r+0x20>
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	bd70      	pop	{r4, r5, r6, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	20000f14 	.word	0x20000f14

0800aca0 <_sbrk_r>:
 800aca0:	2300      	movs	r3, #0
 800aca2:	b570      	push	{r4, r5, r6, lr}
 800aca4:	4d06      	ldr	r5, [pc, #24]	; (800acc0 <_sbrk_r+0x20>)
 800aca6:	0004      	movs	r4, r0
 800aca8:	0008      	movs	r0, r1
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7f8 f922 	bl	8002ef4 <_sbrk>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d103      	bne.n	800acbc <_sbrk_r+0x1c>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d000      	beq.n	800acbc <_sbrk_r+0x1c>
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	46c0      	nop			; (mov r8, r8)
 800acc0:	20000f14 	.word	0x20000f14

0800acc4 <_write_r>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	0004      	movs	r4, r0
 800acc8:	0008      	movs	r0, r1
 800acca:	0011      	movs	r1, r2
 800accc:	001a      	movs	r2, r3
 800acce:	2300      	movs	r3, #0
 800acd0:	4d05      	ldr	r5, [pc, #20]	; (800ace8 <_write_r+0x24>)
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	f7fe fcb3 	bl	800963e <_write>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d103      	bne.n	800ace4 <_write_r+0x20>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d000      	beq.n	800ace4 <_write_r+0x20>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd70      	pop	{r4, r5, r6, pc}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	20000f14 	.word	0x20000f14

0800acec <__errno>:
 800acec:	4b01      	ldr	r3, [pc, #4]	; (800acf4 <__errno+0x8>)
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	4770      	bx	lr
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	200001e4 	.word	0x200001e4

0800acf8 <__libc_init_array>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	2600      	movs	r6, #0
 800acfc:	4c0c      	ldr	r4, [pc, #48]	; (800ad30 <__libc_init_array+0x38>)
 800acfe:	4d0d      	ldr	r5, [pc, #52]	; (800ad34 <__libc_init_array+0x3c>)
 800ad00:	1b64      	subs	r4, r4, r5
 800ad02:	10a4      	asrs	r4, r4, #2
 800ad04:	42a6      	cmp	r6, r4
 800ad06:	d109      	bne.n	800ad1c <__libc_init_array+0x24>
 800ad08:	2600      	movs	r6, #0
 800ad0a:	f001 fe25 	bl	800c958 <_init>
 800ad0e:	4c0a      	ldr	r4, [pc, #40]	; (800ad38 <__libc_init_array+0x40>)
 800ad10:	4d0a      	ldr	r5, [pc, #40]	; (800ad3c <__libc_init_array+0x44>)
 800ad12:	1b64      	subs	r4, r4, r5
 800ad14:	10a4      	asrs	r4, r4, #2
 800ad16:	42a6      	cmp	r6, r4
 800ad18:	d105      	bne.n	800ad26 <__libc_init_array+0x2e>
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	00b3      	lsls	r3, r6, #2
 800ad1e:	58eb      	ldr	r3, [r5, r3]
 800ad20:	4798      	blx	r3
 800ad22:	3601      	adds	r6, #1
 800ad24:	e7ee      	b.n	800ad04 <__libc_init_array+0xc>
 800ad26:	00b3      	lsls	r3, r6, #2
 800ad28:	58eb      	ldr	r3, [r5, r3]
 800ad2a:	4798      	blx	r3
 800ad2c:	3601      	adds	r6, #1
 800ad2e:	e7f2      	b.n	800ad16 <__libc_init_array+0x1e>
 800ad30:	0800d004 	.word	0x0800d004
 800ad34:	0800d004 	.word	0x0800d004
 800ad38:	0800d008 	.word	0x0800d008
 800ad3c:	0800d004 	.word	0x0800d004

0800ad40 <__retarget_lock_init_recursive>:
 800ad40:	4770      	bx	lr

0800ad42 <__retarget_lock_acquire_recursive>:
 800ad42:	4770      	bx	lr

0800ad44 <__retarget_lock_release_recursive>:
 800ad44:	4770      	bx	lr

0800ad46 <strcpy>:
 800ad46:	0003      	movs	r3, r0
 800ad48:	780a      	ldrb	r2, [r1, #0]
 800ad4a:	3101      	adds	r1, #1
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	2a00      	cmp	r2, #0
 800ad52:	d1f9      	bne.n	800ad48 <strcpy+0x2>
 800ad54:	4770      	bx	lr

0800ad56 <memcpy>:
 800ad56:	2300      	movs	r3, #0
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d100      	bne.n	800ad60 <memcpy+0xa>
 800ad5e:	bd10      	pop	{r4, pc}
 800ad60:	5ccc      	ldrb	r4, [r1, r3]
 800ad62:	54c4      	strb	r4, [r0, r3]
 800ad64:	3301      	adds	r3, #1
 800ad66:	e7f8      	b.n	800ad5a <memcpy+0x4>

0800ad68 <nan>:
 800ad68:	2000      	movs	r0, #0
 800ad6a:	4901      	ldr	r1, [pc, #4]	; (800ad70 <nan+0x8>)
 800ad6c:	4770      	bx	lr
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	7ff80000 	.word	0x7ff80000

0800ad74 <_free_r>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	0005      	movs	r5, r0
 800ad78:	2900      	cmp	r1, #0
 800ad7a:	d010      	beq.n	800ad9e <_free_r+0x2a>
 800ad7c:	1f0c      	subs	r4, r1, #4
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da00      	bge.n	800ad86 <_free_r+0x12>
 800ad84:	18e4      	adds	r4, r4, r3
 800ad86:	0028      	movs	r0, r5
 800ad88:	f7fe ff0c 	bl	8009ba4 <__malloc_lock>
 800ad8c:	4a1d      	ldr	r2, [pc, #116]	; (800ae04 <_free_r+0x90>)
 800ad8e:	6813      	ldr	r3, [r2, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d105      	bne.n	800ada0 <_free_r+0x2c>
 800ad94:	6063      	str	r3, [r4, #4]
 800ad96:	6014      	str	r4, [r2, #0]
 800ad98:	0028      	movs	r0, r5
 800ad9a:	f7fe ff0b 	bl	8009bb4 <__malloc_unlock>
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	d908      	bls.n	800adb6 <_free_r+0x42>
 800ada4:	6820      	ldr	r0, [r4, #0]
 800ada6:	1821      	adds	r1, r4, r0
 800ada8:	428b      	cmp	r3, r1
 800adaa:	d1f3      	bne.n	800ad94 <_free_r+0x20>
 800adac:	6819      	ldr	r1, [r3, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	1809      	adds	r1, r1, r0
 800adb2:	6021      	str	r1, [r4, #0]
 800adb4:	e7ee      	b.n	800ad94 <_free_r+0x20>
 800adb6:	001a      	movs	r2, r3
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <_free_r+0x4e>
 800adbe:	42a3      	cmp	r3, r4
 800adc0:	d9f9      	bls.n	800adb6 <_free_r+0x42>
 800adc2:	6811      	ldr	r1, [r2, #0]
 800adc4:	1850      	adds	r0, r2, r1
 800adc6:	42a0      	cmp	r0, r4
 800adc8:	d10b      	bne.n	800ade2 <_free_r+0x6e>
 800adca:	6820      	ldr	r0, [r4, #0]
 800adcc:	1809      	adds	r1, r1, r0
 800adce:	1850      	adds	r0, r2, r1
 800add0:	6011      	str	r1, [r2, #0]
 800add2:	4283      	cmp	r3, r0
 800add4:	d1e0      	bne.n	800ad98 <_free_r+0x24>
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	1841      	adds	r1, r0, r1
 800addc:	6011      	str	r1, [r2, #0]
 800adde:	6053      	str	r3, [r2, #4]
 800ade0:	e7da      	b.n	800ad98 <_free_r+0x24>
 800ade2:	42a0      	cmp	r0, r4
 800ade4:	d902      	bls.n	800adec <_free_r+0x78>
 800ade6:	230c      	movs	r3, #12
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	e7d5      	b.n	800ad98 <_free_r+0x24>
 800adec:	6820      	ldr	r0, [r4, #0]
 800adee:	1821      	adds	r1, r4, r0
 800adf0:	428b      	cmp	r3, r1
 800adf2:	d103      	bne.n	800adfc <_free_r+0x88>
 800adf4:	6819      	ldr	r1, [r3, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	1809      	adds	r1, r1, r0
 800adfa:	6021      	str	r1, [r4, #0]
 800adfc:	6063      	str	r3, [r4, #4]
 800adfe:	6054      	str	r4, [r2, #4]
 800ae00:	e7ca      	b.n	800ad98 <_free_r+0x24>
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	20000dd0 	.word	0x20000dd0

0800ae08 <rshift>:
 800ae08:	0002      	movs	r2, r0
 800ae0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae0c:	6904      	ldr	r4, [r0, #16]
 800ae0e:	114b      	asrs	r3, r1, #5
 800ae10:	b085      	sub	sp, #20
 800ae12:	3214      	adds	r2, #20
 800ae14:	9302      	str	r3, [sp, #8]
 800ae16:	114d      	asrs	r5, r1, #5
 800ae18:	0013      	movs	r3, r2
 800ae1a:	42ac      	cmp	r4, r5
 800ae1c:	dd32      	ble.n	800ae84 <rshift+0x7c>
 800ae1e:	261f      	movs	r6, #31
 800ae20:	000f      	movs	r7, r1
 800ae22:	114b      	asrs	r3, r1, #5
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	00a5      	lsls	r5, r4, #2
 800ae28:	18d3      	adds	r3, r2, r3
 800ae2a:	4037      	ands	r7, r6
 800ae2c:	1955      	adds	r5, r2, r5
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	9701      	str	r7, [sp, #4]
 800ae32:	4231      	tst	r1, r6
 800ae34:	d10d      	bne.n	800ae52 <rshift+0x4a>
 800ae36:	0016      	movs	r6, r2
 800ae38:	0019      	movs	r1, r3
 800ae3a:	428d      	cmp	r5, r1
 800ae3c:	d836      	bhi.n	800aeac <rshift+0xa4>
 800ae3e:	9900      	ldr	r1, [sp, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	3903      	subs	r1, #3
 800ae44:	428d      	cmp	r5, r1
 800ae46:	d302      	bcc.n	800ae4e <rshift+0x46>
 800ae48:	9b02      	ldr	r3, [sp, #8]
 800ae4a:	1ae4      	subs	r4, r4, r3
 800ae4c:	00a3      	lsls	r3, r4, #2
 800ae4e:	18d3      	adds	r3, r2, r3
 800ae50:	e018      	b.n	800ae84 <rshift+0x7c>
 800ae52:	2120      	movs	r1, #32
 800ae54:	9e01      	ldr	r6, [sp, #4]
 800ae56:	9f01      	ldr	r7, [sp, #4]
 800ae58:	1b89      	subs	r1, r1, r6
 800ae5a:	9e00      	ldr	r6, [sp, #0]
 800ae5c:	9103      	str	r1, [sp, #12]
 800ae5e:	ce02      	ldmia	r6!, {r1}
 800ae60:	4694      	mov	ip, r2
 800ae62:	40f9      	lsrs	r1, r7
 800ae64:	42b5      	cmp	r5, r6
 800ae66:	d816      	bhi.n	800ae96 <rshift+0x8e>
 800ae68:	9e00      	ldr	r6, [sp, #0]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	42b5      	cmp	r5, r6
 800ae70:	d303      	bcc.n	800ae7a <rshift+0x72>
 800ae72:	9b02      	ldr	r3, [sp, #8]
 800ae74:	1ae3      	subs	r3, r4, r3
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	3b04      	subs	r3, #4
 800ae7a:	18d3      	adds	r3, r2, r3
 800ae7c:	6019      	str	r1, [r3, #0]
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	d000      	beq.n	800ae84 <rshift+0x7c>
 800ae82:	3304      	adds	r3, #4
 800ae84:	1a99      	subs	r1, r3, r2
 800ae86:	1089      	asrs	r1, r1, #2
 800ae88:	6101      	str	r1, [r0, #16]
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d101      	bne.n	800ae92 <rshift+0x8a>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6143      	str	r3, [r0, #20]
 800ae92:	b005      	add	sp, #20
 800ae94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae96:	6837      	ldr	r7, [r6, #0]
 800ae98:	9b03      	ldr	r3, [sp, #12]
 800ae9a:	409f      	lsls	r7, r3
 800ae9c:	430f      	orrs	r7, r1
 800ae9e:	4661      	mov	r1, ip
 800aea0:	c180      	stmia	r1!, {r7}
 800aea2:	468c      	mov	ip, r1
 800aea4:	9b01      	ldr	r3, [sp, #4]
 800aea6:	ce02      	ldmia	r6!, {r1}
 800aea8:	40d9      	lsrs	r1, r3
 800aeaa:	e7db      	b.n	800ae64 <rshift+0x5c>
 800aeac:	c980      	ldmia	r1!, {r7}
 800aeae:	c680      	stmia	r6!, {r7}
 800aeb0:	e7c3      	b.n	800ae3a <rshift+0x32>

0800aeb2 <__hexdig_fun>:
 800aeb2:	0002      	movs	r2, r0
 800aeb4:	3a30      	subs	r2, #48	; 0x30
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	2a09      	cmp	r2, #9
 800aeba:	d802      	bhi.n	800aec2 <__hexdig_fun+0x10>
 800aebc:	3b20      	subs	r3, #32
 800aebe:	b2d8      	uxtb	r0, r3
 800aec0:	4770      	bx	lr
 800aec2:	0002      	movs	r2, r0
 800aec4:	3a61      	subs	r2, #97	; 0x61
 800aec6:	2a05      	cmp	r2, #5
 800aec8:	d801      	bhi.n	800aece <__hexdig_fun+0x1c>
 800aeca:	3b47      	subs	r3, #71	; 0x47
 800aecc:	e7f7      	b.n	800aebe <__hexdig_fun+0xc>
 800aece:	001a      	movs	r2, r3
 800aed0:	3a41      	subs	r2, #65	; 0x41
 800aed2:	2000      	movs	r0, #0
 800aed4:	2a05      	cmp	r2, #5
 800aed6:	d8f3      	bhi.n	800aec0 <__hexdig_fun+0xe>
 800aed8:	3b27      	subs	r3, #39	; 0x27
 800aeda:	e7f0      	b.n	800aebe <__hexdig_fun+0xc>

0800aedc <__gethex>:
 800aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aede:	b089      	sub	sp, #36	; 0x24
 800aee0:	9307      	str	r3, [sp, #28]
 800aee2:	2302      	movs	r3, #2
 800aee4:	9201      	str	r2, [sp, #4]
 800aee6:	680a      	ldr	r2, [r1, #0]
 800aee8:	425b      	negs	r3, r3
 800aeea:	9003      	str	r0, [sp, #12]
 800aeec:	9106      	str	r1, [sp, #24]
 800aeee:	1c96      	adds	r6, r2, #2
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	199a      	adds	r2, r3, r6
 800aef4:	9600      	str	r6, [sp, #0]
 800aef6:	9205      	str	r2, [sp, #20]
 800aef8:	9a00      	ldr	r2, [sp, #0]
 800aefa:	3601      	adds	r6, #1
 800aefc:	7810      	ldrb	r0, [r2, #0]
 800aefe:	2830      	cmp	r0, #48	; 0x30
 800af00:	d0f7      	beq.n	800aef2 <__gethex+0x16>
 800af02:	f7ff ffd6 	bl	800aeb2 <__hexdig_fun>
 800af06:	2300      	movs	r3, #0
 800af08:	001d      	movs	r5, r3
 800af0a:	9302      	str	r3, [sp, #8]
 800af0c:	4298      	cmp	r0, r3
 800af0e:	d11d      	bne.n	800af4c <__gethex+0x70>
 800af10:	2201      	movs	r2, #1
 800af12:	49a6      	ldr	r1, [pc, #664]	; (800b1ac <__gethex+0x2d0>)
 800af14:	9800      	ldr	r0, [sp, #0]
 800af16:	f7ff fe77 	bl	800ac08 <strncmp>
 800af1a:	0007      	movs	r7, r0
 800af1c:	42a8      	cmp	r0, r5
 800af1e:	d169      	bne.n	800aff4 <__gethex+0x118>
 800af20:	9b00      	ldr	r3, [sp, #0]
 800af22:	0034      	movs	r4, r6
 800af24:	7858      	ldrb	r0, [r3, #1]
 800af26:	f7ff ffc4 	bl	800aeb2 <__hexdig_fun>
 800af2a:	2301      	movs	r3, #1
 800af2c:	9302      	str	r3, [sp, #8]
 800af2e:	42a8      	cmp	r0, r5
 800af30:	d02f      	beq.n	800af92 <__gethex+0xb6>
 800af32:	9600      	str	r6, [sp, #0]
 800af34:	9b00      	ldr	r3, [sp, #0]
 800af36:	7818      	ldrb	r0, [r3, #0]
 800af38:	2830      	cmp	r0, #48	; 0x30
 800af3a:	d009      	beq.n	800af50 <__gethex+0x74>
 800af3c:	f7ff ffb9 	bl	800aeb2 <__hexdig_fun>
 800af40:	4242      	negs	r2, r0
 800af42:	4142      	adcs	r2, r0
 800af44:	2301      	movs	r3, #1
 800af46:	0035      	movs	r5, r6
 800af48:	9202      	str	r2, [sp, #8]
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	9c00      	ldr	r4, [sp, #0]
 800af4e:	e004      	b.n	800af5a <__gethex+0x7e>
 800af50:	9b00      	ldr	r3, [sp, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	e7ed      	b.n	800af34 <__gethex+0x58>
 800af58:	3401      	adds	r4, #1
 800af5a:	7820      	ldrb	r0, [r4, #0]
 800af5c:	f7ff ffa9 	bl	800aeb2 <__hexdig_fun>
 800af60:	1e07      	subs	r7, r0, #0
 800af62:	d1f9      	bne.n	800af58 <__gethex+0x7c>
 800af64:	2201      	movs	r2, #1
 800af66:	0020      	movs	r0, r4
 800af68:	4990      	ldr	r1, [pc, #576]	; (800b1ac <__gethex+0x2d0>)
 800af6a:	f7ff fe4d 	bl	800ac08 <strncmp>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d10d      	bne.n	800af8e <__gethex+0xb2>
 800af72:	2d00      	cmp	r5, #0
 800af74:	d106      	bne.n	800af84 <__gethex+0xa8>
 800af76:	3401      	adds	r4, #1
 800af78:	0025      	movs	r5, r4
 800af7a:	7820      	ldrb	r0, [r4, #0]
 800af7c:	f7ff ff99 	bl	800aeb2 <__hexdig_fun>
 800af80:	2800      	cmp	r0, #0
 800af82:	d102      	bne.n	800af8a <__gethex+0xae>
 800af84:	1b2d      	subs	r5, r5, r4
 800af86:	00af      	lsls	r7, r5, #2
 800af88:	e003      	b.n	800af92 <__gethex+0xb6>
 800af8a:	3401      	adds	r4, #1
 800af8c:	e7f5      	b.n	800af7a <__gethex+0x9e>
 800af8e:	2d00      	cmp	r5, #0
 800af90:	d1f8      	bne.n	800af84 <__gethex+0xa8>
 800af92:	2220      	movs	r2, #32
 800af94:	7823      	ldrb	r3, [r4, #0]
 800af96:	0026      	movs	r6, r4
 800af98:	4393      	bics	r3, r2
 800af9a:	2b50      	cmp	r3, #80	; 0x50
 800af9c:	d11d      	bne.n	800afda <__gethex+0xfe>
 800af9e:	7863      	ldrb	r3, [r4, #1]
 800afa0:	2b2b      	cmp	r3, #43	; 0x2b
 800afa2:	d02c      	beq.n	800affe <__gethex+0x122>
 800afa4:	2b2d      	cmp	r3, #45	; 0x2d
 800afa6:	d02e      	beq.n	800b006 <__gethex+0x12a>
 800afa8:	2300      	movs	r3, #0
 800afaa:	1c66      	adds	r6, r4, #1
 800afac:	9304      	str	r3, [sp, #16]
 800afae:	7830      	ldrb	r0, [r6, #0]
 800afb0:	f7ff ff7f 	bl	800aeb2 <__hexdig_fun>
 800afb4:	1e43      	subs	r3, r0, #1
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b18      	cmp	r3, #24
 800afba:	d82b      	bhi.n	800b014 <__gethex+0x138>
 800afbc:	3810      	subs	r0, #16
 800afbe:	0005      	movs	r5, r0
 800afc0:	7870      	ldrb	r0, [r6, #1]
 800afc2:	f7ff ff76 	bl	800aeb2 <__hexdig_fun>
 800afc6:	1e43      	subs	r3, r0, #1
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	3601      	adds	r6, #1
 800afcc:	2b18      	cmp	r3, #24
 800afce:	d91c      	bls.n	800b00a <__gethex+0x12e>
 800afd0:	9b04      	ldr	r3, [sp, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d000      	beq.n	800afd8 <__gethex+0xfc>
 800afd6:	426d      	negs	r5, r5
 800afd8:	197f      	adds	r7, r7, r5
 800afda:	9b06      	ldr	r3, [sp, #24]
 800afdc:	601e      	str	r6, [r3, #0]
 800afde:	9b02      	ldr	r3, [sp, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d019      	beq.n	800b018 <__gethex+0x13c>
 800afe4:	2600      	movs	r6, #0
 800afe6:	9b05      	ldr	r3, [sp, #20]
 800afe8:	42b3      	cmp	r3, r6
 800afea:	d100      	bne.n	800afee <__gethex+0x112>
 800afec:	3606      	adds	r6, #6
 800afee:	0030      	movs	r0, r6
 800aff0:	b009      	add	sp, #36	; 0x24
 800aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff4:	2301      	movs	r3, #1
 800aff6:	2700      	movs	r7, #0
 800aff8:	9c00      	ldr	r4, [sp, #0]
 800affa:	9302      	str	r3, [sp, #8]
 800affc:	e7c9      	b.n	800af92 <__gethex+0xb6>
 800affe:	2300      	movs	r3, #0
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	1ca6      	adds	r6, r4, #2
 800b004:	e7d3      	b.n	800afae <__gethex+0xd2>
 800b006:	2301      	movs	r3, #1
 800b008:	e7fa      	b.n	800b000 <__gethex+0x124>
 800b00a:	230a      	movs	r3, #10
 800b00c:	435d      	muls	r5, r3
 800b00e:	182d      	adds	r5, r5, r0
 800b010:	3d10      	subs	r5, #16
 800b012:	e7d5      	b.n	800afc0 <__gethex+0xe4>
 800b014:	0026      	movs	r6, r4
 800b016:	e7e0      	b.n	800afda <__gethex+0xfe>
 800b018:	9b00      	ldr	r3, [sp, #0]
 800b01a:	9902      	ldr	r1, [sp, #8]
 800b01c:	1ae3      	subs	r3, r4, r3
 800b01e:	3b01      	subs	r3, #1
 800b020:	2b07      	cmp	r3, #7
 800b022:	dc0a      	bgt.n	800b03a <__gethex+0x15e>
 800b024:	9803      	ldr	r0, [sp, #12]
 800b026:	f000 fa5d 	bl	800b4e4 <_Balloc>
 800b02a:	1e05      	subs	r5, r0, #0
 800b02c:	d108      	bne.n	800b040 <__gethex+0x164>
 800b02e:	002a      	movs	r2, r5
 800b030:	21e4      	movs	r1, #228	; 0xe4
 800b032:	4b5f      	ldr	r3, [pc, #380]	; (800b1b0 <__gethex+0x2d4>)
 800b034:	485f      	ldr	r0, [pc, #380]	; (800b1b4 <__gethex+0x2d8>)
 800b036:	f001 f965 	bl	800c304 <__assert_func>
 800b03a:	3101      	adds	r1, #1
 800b03c:	105b      	asrs	r3, r3, #1
 800b03e:	e7ef      	b.n	800b020 <__gethex+0x144>
 800b040:	0003      	movs	r3, r0
 800b042:	3314      	adds	r3, #20
 800b044:	9302      	str	r3, [sp, #8]
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	2300      	movs	r3, #0
 800b04a:	001e      	movs	r6, r3
 800b04c:	9304      	str	r3, [sp, #16]
 800b04e:	9b00      	ldr	r3, [sp, #0]
 800b050:	42a3      	cmp	r3, r4
 800b052:	d33f      	bcc.n	800b0d4 <__gethex+0x1f8>
 800b054:	9c05      	ldr	r4, [sp, #20]
 800b056:	9b02      	ldr	r3, [sp, #8]
 800b058:	c440      	stmia	r4!, {r6}
 800b05a:	1ae4      	subs	r4, r4, r3
 800b05c:	10a4      	asrs	r4, r4, #2
 800b05e:	0030      	movs	r0, r6
 800b060:	612c      	str	r4, [r5, #16]
 800b062:	f000 fb37 	bl	800b6d4 <__hi0bits>
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	0164      	lsls	r4, r4, #5
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	1a26      	subs	r6, r4, r0
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	429e      	cmp	r6, r3
 800b072:	dd51      	ble.n	800b118 <__gethex+0x23c>
 800b074:	1af6      	subs	r6, r6, r3
 800b076:	0031      	movs	r1, r6
 800b078:	0028      	movs	r0, r5
 800b07a:	f000 fecb 	bl	800be14 <__any_on>
 800b07e:	1e04      	subs	r4, r0, #0
 800b080:	d016      	beq.n	800b0b0 <__gethex+0x1d4>
 800b082:	2401      	movs	r4, #1
 800b084:	231f      	movs	r3, #31
 800b086:	0020      	movs	r0, r4
 800b088:	1e72      	subs	r2, r6, #1
 800b08a:	4013      	ands	r3, r2
 800b08c:	4098      	lsls	r0, r3
 800b08e:	0003      	movs	r3, r0
 800b090:	1151      	asrs	r1, r2, #5
 800b092:	9802      	ldr	r0, [sp, #8]
 800b094:	0089      	lsls	r1, r1, #2
 800b096:	5809      	ldr	r1, [r1, r0]
 800b098:	4219      	tst	r1, r3
 800b09a:	d009      	beq.n	800b0b0 <__gethex+0x1d4>
 800b09c:	42a2      	cmp	r2, r4
 800b09e:	dd06      	ble.n	800b0ae <__gethex+0x1d2>
 800b0a0:	0028      	movs	r0, r5
 800b0a2:	1eb1      	subs	r1, r6, #2
 800b0a4:	f000 feb6 	bl	800be14 <__any_on>
 800b0a8:	3402      	adds	r4, #2
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d100      	bne.n	800b0b0 <__gethex+0x1d4>
 800b0ae:	2402      	movs	r4, #2
 800b0b0:	0031      	movs	r1, r6
 800b0b2:	0028      	movs	r0, r5
 800b0b4:	f7ff fea8 	bl	800ae08 <rshift>
 800b0b8:	19bf      	adds	r7, r7, r6
 800b0ba:	9b01      	ldr	r3, [sp, #4]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	42bb      	cmp	r3, r7
 800b0c0:	da3a      	bge.n	800b138 <__gethex+0x25c>
 800b0c2:	0029      	movs	r1, r5
 800b0c4:	9803      	ldr	r0, [sp, #12]
 800b0c6:	f000 fa51 	bl	800b56c <_Bfree>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0ce:	26a3      	movs	r6, #163	; 0xa3
 800b0d0:	6013      	str	r3, [r2, #0]
 800b0d2:	e78c      	b.n	800afee <__gethex+0x112>
 800b0d4:	3c01      	subs	r4, #1
 800b0d6:	7823      	ldrb	r3, [r4, #0]
 800b0d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0da:	d012      	beq.n	800b102 <__gethex+0x226>
 800b0dc:	9b04      	ldr	r3, [sp, #16]
 800b0de:	2b20      	cmp	r3, #32
 800b0e0:	d104      	bne.n	800b0ec <__gethex+0x210>
 800b0e2:	9b05      	ldr	r3, [sp, #20]
 800b0e4:	c340      	stmia	r3!, {r6}
 800b0e6:	2600      	movs	r6, #0
 800b0e8:	9305      	str	r3, [sp, #20]
 800b0ea:	9604      	str	r6, [sp, #16]
 800b0ec:	7820      	ldrb	r0, [r4, #0]
 800b0ee:	f7ff fee0 	bl	800aeb2 <__hexdig_fun>
 800b0f2:	230f      	movs	r3, #15
 800b0f4:	4018      	ands	r0, r3
 800b0f6:	9b04      	ldr	r3, [sp, #16]
 800b0f8:	4098      	lsls	r0, r3
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	4306      	orrs	r6, r0
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	e7a5      	b.n	800b04e <__gethex+0x172>
 800b102:	9b00      	ldr	r3, [sp, #0]
 800b104:	42a3      	cmp	r3, r4
 800b106:	d8e9      	bhi.n	800b0dc <__gethex+0x200>
 800b108:	2201      	movs	r2, #1
 800b10a:	0020      	movs	r0, r4
 800b10c:	4927      	ldr	r1, [pc, #156]	; (800b1ac <__gethex+0x2d0>)
 800b10e:	f7ff fd7b 	bl	800ac08 <strncmp>
 800b112:	2800      	cmp	r0, #0
 800b114:	d1e2      	bne.n	800b0dc <__gethex+0x200>
 800b116:	e79a      	b.n	800b04e <__gethex+0x172>
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	2400      	movs	r4, #0
 800b11c:	429e      	cmp	r6, r3
 800b11e:	dacc      	bge.n	800b0ba <__gethex+0x1de>
 800b120:	1b9e      	subs	r6, r3, r6
 800b122:	0029      	movs	r1, r5
 800b124:	0032      	movs	r2, r6
 800b126:	9803      	ldr	r0, [sp, #12]
 800b128:	f000 fc40 	bl	800b9ac <__lshift>
 800b12c:	0003      	movs	r3, r0
 800b12e:	3314      	adds	r3, #20
 800b130:	0005      	movs	r5, r0
 800b132:	1bbf      	subs	r7, r7, r6
 800b134:	9302      	str	r3, [sp, #8]
 800b136:	e7c0      	b.n	800b0ba <__gethex+0x1de>
 800b138:	9b01      	ldr	r3, [sp, #4]
 800b13a:	685e      	ldr	r6, [r3, #4]
 800b13c:	42be      	cmp	r6, r7
 800b13e:	dd70      	ble.n	800b222 <__gethex+0x346>
 800b140:	9b00      	ldr	r3, [sp, #0]
 800b142:	1bf6      	subs	r6, r6, r7
 800b144:	42b3      	cmp	r3, r6
 800b146:	dc37      	bgt.n	800b1b8 <__gethex+0x2dc>
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d024      	beq.n	800b19a <__gethex+0x2be>
 800b150:	2b03      	cmp	r3, #3
 800b152:	d026      	beq.n	800b1a2 <__gethex+0x2c6>
 800b154:	2b01      	cmp	r3, #1
 800b156:	d117      	bne.n	800b188 <__gethex+0x2ac>
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	42b3      	cmp	r3, r6
 800b15c:	d114      	bne.n	800b188 <__gethex+0x2ac>
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d10b      	bne.n	800b17a <__gethex+0x29e>
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	9a07      	ldr	r2, [sp, #28]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	2662      	movs	r6, #98	; 0x62
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	2301      	movs	r3, #1
 800b16e:	9a02      	ldr	r2, [sp, #8]
 800b170:	612b      	str	r3, [r5, #16]
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b176:	601d      	str	r5, [r3, #0]
 800b178:	e739      	b.n	800afee <__gethex+0x112>
 800b17a:	9900      	ldr	r1, [sp, #0]
 800b17c:	0028      	movs	r0, r5
 800b17e:	3901      	subs	r1, #1
 800b180:	f000 fe48 	bl	800be14 <__any_on>
 800b184:	2800      	cmp	r0, #0
 800b186:	d1ec      	bne.n	800b162 <__gethex+0x286>
 800b188:	0029      	movs	r1, r5
 800b18a:	9803      	ldr	r0, [sp, #12]
 800b18c:	f000 f9ee 	bl	800b56c <_Bfree>
 800b190:	2300      	movs	r3, #0
 800b192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b194:	2650      	movs	r6, #80	; 0x50
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	e729      	b.n	800afee <__gethex+0x112>
 800b19a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1f3      	bne.n	800b188 <__gethex+0x2ac>
 800b1a0:	e7df      	b.n	800b162 <__gethex+0x286>
 800b1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1dc      	bne.n	800b162 <__gethex+0x286>
 800b1a8:	e7ee      	b.n	800b188 <__gethex+0x2ac>
 800b1aa:	46c0      	nop			; (mov r8, r8)
 800b1ac:	0800cc3e 	.word	0x0800cc3e
 800b1b0:	0800cda9 	.word	0x0800cda9
 800b1b4:	0800cdba 	.word	0x0800cdba
 800b1b8:	1e77      	subs	r7, r6, #1
 800b1ba:	2c00      	cmp	r4, #0
 800b1bc:	d12f      	bne.n	800b21e <__gethex+0x342>
 800b1be:	2f00      	cmp	r7, #0
 800b1c0:	d004      	beq.n	800b1cc <__gethex+0x2f0>
 800b1c2:	0039      	movs	r1, r7
 800b1c4:	0028      	movs	r0, r5
 800b1c6:	f000 fe25 	bl	800be14 <__any_on>
 800b1ca:	0004      	movs	r4, r0
 800b1cc:	231f      	movs	r3, #31
 800b1ce:	117a      	asrs	r2, r7, #5
 800b1d0:	401f      	ands	r7, r3
 800b1d2:	3b1e      	subs	r3, #30
 800b1d4:	40bb      	lsls	r3, r7
 800b1d6:	9902      	ldr	r1, [sp, #8]
 800b1d8:	0092      	lsls	r2, r2, #2
 800b1da:	5852      	ldr	r2, [r2, r1]
 800b1dc:	421a      	tst	r2, r3
 800b1de:	d001      	beq.n	800b1e4 <__gethex+0x308>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	431c      	orrs	r4, r3
 800b1e4:	9b00      	ldr	r3, [sp, #0]
 800b1e6:	0031      	movs	r1, r6
 800b1e8:	1b9b      	subs	r3, r3, r6
 800b1ea:	2602      	movs	r6, #2
 800b1ec:	0028      	movs	r0, r5
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	f7ff fe0a 	bl	800ae08 <rshift>
 800b1f4:	9b01      	ldr	r3, [sp, #4]
 800b1f6:	685f      	ldr	r7, [r3, #4]
 800b1f8:	2c00      	cmp	r4, #0
 800b1fa:	d041      	beq.n	800b280 <__gethex+0x3a4>
 800b1fc:	9b01      	ldr	r3, [sp, #4]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	2b02      	cmp	r3, #2
 800b202:	d010      	beq.n	800b226 <__gethex+0x34a>
 800b204:	2b03      	cmp	r3, #3
 800b206:	d012      	beq.n	800b22e <__gethex+0x352>
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d106      	bne.n	800b21a <__gethex+0x33e>
 800b20c:	07a2      	lsls	r2, r4, #30
 800b20e:	d504      	bpl.n	800b21a <__gethex+0x33e>
 800b210:	9a02      	ldr	r2, [sp, #8]
 800b212:	6812      	ldr	r2, [r2, #0]
 800b214:	4314      	orrs	r4, r2
 800b216:	421c      	tst	r4, r3
 800b218:	d10c      	bne.n	800b234 <__gethex+0x358>
 800b21a:	2310      	movs	r3, #16
 800b21c:	e02f      	b.n	800b27e <__gethex+0x3a2>
 800b21e:	2401      	movs	r4, #1
 800b220:	e7d4      	b.n	800b1cc <__gethex+0x2f0>
 800b222:	2601      	movs	r6, #1
 800b224:	e7e8      	b.n	800b1f8 <__gethex+0x31c>
 800b226:	2301      	movs	r3, #1
 800b228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b22a:	1a9b      	subs	r3, r3, r2
 800b22c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b22e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0f2      	beq.n	800b21a <__gethex+0x33e>
 800b234:	692b      	ldr	r3, [r5, #16]
 800b236:	2000      	movs	r0, #0
 800b238:	9302      	str	r3, [sp, #8]
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	002b      	movs	r3, r5
 800b240:	9a04      	ldr	r2, [sp, #16]
 800b242:	3314      	adds	r3, #20
 800b244:	1899      	adds	r1, r3, r2
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	1c54      	adds	r4, r2, #1
 800b24a:	d01e      	beq.n	800b28a <__gethex+0x3ae>
 800b24c:	3201      	adds	r2, #1
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	002b      	movs	r3, r5
 800b252:	3314      	adds	r3, #20
 800b254:	2e02      	cmp	r6, #2
 800b256:	d141      	bne.n	800b2dc <__gethex+0x400>
 800b258:	9a01      	ldr	r2, [sp, #4]
 800b25a:	9900      	ldr	r1, [sp, #0]
 800b25c:	6812      	ldr	r2, [r2, #0]
 800b25e:	3a01      	subs	r2, #1
 800b260:	428a      	cmp	r2, r1
 800b262:	d10b      	bne.n	800b27c <__gethex+0x3a0>
 800b264:	221f      	movs	r2, #31
 800b266:	9800      	ldr	r0, [sp, #0]
 800b268:	1149      	asrs	r1, r1, #5
 800b26a:	4002      	ands	r2, r0
 800b26c:	2001      	movs	r0, #1
 800b26e:	0004      	movs	r4, r0
 800b270:	4094      	lsls	r4, r2
 800b272:	0089      	lsls	r1, r1, #2
 800b274:	58cb      	ldr	r3, [r1, r3]
 800b276:	4223      	tst	r3, r4
 800b278:	d000      	beq.n	800b27c <__gethex+0x3a0>
 800b27a:	2601      	movs	r6, #1
 800b27c:	2320      	movs	r3, #32
 800b27e:	431e      	orrs	r6, r3
 800b280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b282:	601d      	str	r5, [r3, #0]
 800b284:	9b07      	ldr	r3, [sp, #28]
 800b286:	601f      	str	r7, [r3, #0]
 800b288:	e6b1      	b.n	800afee <__gethex+0x112>
 800b28a:	c301      	stmia	r3!, {r0}
 800b28c:	4299      	cmp	r1, r3
 800b28e:	d8da      	bhi.n	800b246 <__gethex+0x36a>
 800b290:	68ab      	ldr	r3, [r5, #8]
 800b292:	9a02      	ldr	r2, [sp, #8]
 800b294:	429a      	cmp	r2, r3
 800b296:	db18      	blt.n	800b2ca <__gethex+0x3ee>
 800b298:	6869      	ldr	r1, [r5, #4]
 800b29a:	9803      	ldr	r0, [sp, #12]
 800b29c:	3101      	adds	r1, #1
 800b29e:	f000 f921 	bl	800b4e4 <_Balloc>
 800b2a2:	1e04      	subs	r4, r0, #0
 800b2a4:	d104      	bne.n	800b2b0 <__gethex+0x3d4>
 800b2a6:	0022      	movs	r2, r4
 800b2a8:	2184      	movs	r1, #132	; 0x84
 800b2aa:	4b1c      	ldr	r3, [pc, #112]	; (800b31c <__gethex+0x440>)
 800b2ac:	481c      	ldr	r0, [pc, #112]	; (800b320 <__gethex+0x444>)
 800b2ae:	e6c2      	b.n	800b036 <__gethex+0x15a>
 800b2b0:	0029      	movs	r1, r5
 800b2b2:	692a      	ldr	r2, [r5, #16]
 800b2b4:	310c      	adds	r1, #12
 800b2b6:	3202      	adds	r2, #2
 800b2b8:	0092      	lsls	r2, r2, #2
 800b2ba:	300c      	adds	r0, #12
 800b2bc:	f7ff fd4b 	bl	800ad56 <memcpy>
 800b2c0:	0029      	movs	r1, r5
 800b2c2:	9803      	ldr	r0, [sp, #12]
 800b2c4:	f000 f952 	bl	800b56c <_Bfree>
 800b2c8:	0025      	movs	r5, r4
 800b2ca:	692b      	ldr	r3, [r5, #16]
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	612a      	str	r2, [r5, #16]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	18eb      	adds	r3, r5, r3
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	e7b9      	b.n	800b250 <__gethex+0x374>
 800b2dc:	692a      	ldr	r2, [r5, #16]
 800b2de:	9902      	ldr	r1, [sp, #8]
 800b2e0:	428a      	cmp	r2, r1
 800b2e2:	dd09      	ble.n	800b2f8 <__gethex+0x41c>
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	0028      	movs	r0, r5
 800b2e8:	f7ff fd8e 	bl	800ae08 <rshift>
 800b2ec:	9b01      	ldr	r3, [sp, #4]
 800b2ee:	3701      	adds	r7, #1
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	42bb      	cmp	r3, r7
 800b2f4:	dac1      	bge.n	800b27a <__gethex+0x39e>
 800b2f6:	e6e4      	b.n	800b0c2 <__gethex+0x1e6>
 800b2f8:	221f      	movs	r2, #31
 800b2fa:	9c00      	ldr	r4, [sp, #0]
 800b2fc:	9900      	ldr	r1, [sp, #0]
 800b2fe:	2601      	movs	r6, #1
 800b300:	4014      	ands	r4, r2
 800b302:	4211      	tst	r1, r2
 800b304:	d0ba      	beq.n	800b27c <__gethex+0x3a0>
 800b306:	9a04      	ldr	r2, [sp, #16]
 800b308:	189b      	adds	r3, r3, r2
 800b30a:	3b04      	subs	r3, #4
 800b30c:	6818      	ldr	r0, [r3, #0]
 800b30e:	f000 f9e1 	bl	800b6d4 <__hi0bits>
 800b312:	2320      	movs	r3, #32
 800b314:	1b1b      	subs	r3, r3, r4
 800b316:	4298      	cmp	r0, r3
 800b318:	dbe4      	blt.n	800b2e4 <__gethex+0x408>
 800b31a:	e7af      	b.n	800b27c <__gethex+0x3a0>
 800b31c:	0800cda9 	.word	0x0800cda9
 800b320:	0800cdba 	.word	0x0800cdba

0800b324 <L_shift>:
 800b324:	2308      	movs	r3, #8
 800b326:	b570      	push	{r4, r5, r6, lr}
 800b328:	2520      	movs	r5, #32
 800b32a:	1a9a      	subs	r2, r3, r2
 800b32c:	0092      	lsls	r2, r2, #2
 800b32e:	1aad      	subs	r5, r5, r2
 800b330:	6843      	ldr	r3, [r0, #4]
 800b332:	6804      	ldr	r4, [r0, #0]
 800b334:	001e      	movs	r6, r3
 800b336:	40ae      	lsls	r6, r5
 800b338:	40d3      	lsrs	r3, r2
 800b33a:	4334      	orrs	r4, r6
 800b33c:	6004      	str	r4, [r0, #0]
 800b33e:	6043      	str	r3, [r0, #4]
 800b340:	3004      	adds	r0, #4
 800b342:	4288      	cmp	r0, r1
 800b344:	d3f4      	bcc.n	800b330 <L_shift+0xc>
 800b346:	bd70      	pop	{r4, r5, r6, pc}

0800b348 <__match>:
 800b348:	b530      	push	{r4, r5, lr}
 800b34a:	6803      	ldr	r3, [r0, #0]
 800b34c:	780c      	ldrb	r4, [r1, #0]
 800b34e:	3301      	adds	r3, #1
 800b350:	2c00      	cmp	r4, #0
 800b352:	d102      	bne.n	800b35a <__match+0x12>
 800b354:	6003      	str	r3, [r0, #0]
 800b356:	2001      	movs	r0, #1
 800b358:	bd30      	pop	{r4, r5, pc}
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	0015      	movs	r5, r2
 800b35e:	3d41      	subs	r5, #65	; 0x41
 800b360:	2d19      	cmp	r5, #25
 800b362:	d800      	bhi.n	800b366 <__match+0x1e>
 800b364:	3220      	adds	r2, #32
 800b366:	3101      	adds	r1, #1
 800b368:	42a2      	cmp	r2, r4
 800b36a:	d0ef      	beq.n	800b34c <__match+0x4>
 800b36c:	2000      	movs	r0, #0
 800b36e:	e7f3      	b.n	800b358 <__match+0x10>

0800b370 <__hexnan>:
 800b370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b372:	680b      	ldr	r3, [r1, #0]
 800b374:	b08b      	sub	sp, #44	; 0x2c
 800b376:	9201      	str	r2, [sp, #4]
 800b378:	9901      	ldr	r1, [sp, #4]
 800b37a:	115a      	asrs	r2, r3, #5
 800b37c:	0092      	lsls	r2, r2, #2
 800b37e:	188a      	adds	r2, r1, r2
 800b380:	9202      	str	r2, [sp, #8]
 800b382:	0019      	movs	r1, r3
 800b384:	221f      	movs	r2, #31
 800b386:	4011      	ands	r1, r2
 800b388:	9008      	str	r0, [sp, #32]
 800b38a:	9106      	str	r1, [sp, #24]
 800b38c:	4213      	tst	r3, r2
 800b38e:	d002      	beq.n	800b396 <__hexnan+0x26>
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	3304      	adds	r3, #4
 800b394:	9302      	str	r3, [sp, #8]
 800b396:	9b02      	ldr	r3, [sp, #8]
 800b398:	2500      	movs	r5, #0
 800b39a:	1f1f      	subs	r7, r3, #4
 800b39c:	003e      	movs	r6, r7
 800b39e:	003c      	movs	r4, r7
 800b3a0:	9b08      	ldr	r3, [sp, #32]
 800b3a2:	603d      	str	r5, [r7, #0]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	9507      	str	r5, [sp, #28]
 800b3a8:	9305      	str	r3, [sp, #20]
 800b3aa:	9503      	str	r5, [sp, #12]
 800b3ac:	9b05      	ldr	r3, [sp, #20]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	785b      	ldrb	r3, [r3, #1]
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d028      	beq.n	800b40e <__hexnan+0x9e>
 800b3bc:	9804      	ldr	r0, [sp, #16]
 800b3be:	f7ff fd78 	bl	800aeb2 <__hexdig_fun>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d154      	bne.n	800b470 <__hexnan+0x100>
 800b3c6:	9b04      	ldr	r3, [sp, #16]
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d819      	bhi.n	800b400 <__hexnan+0x90>
 800b3cc:	9b03      	ldr	r3, [sp, #12]
 800b3ce:	9a07      	ldr	r2, [sp, #28]
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	dd12      	ble.n	800b3fa <__hexnan+0x8a>
 800b3d4:	42b4      	cmp	r4, r6
 800b3d6:	d206      	bcs.n	800b3e6 <__hexnan+0x76>
 800b3d8:	2d07      	cmp	r5, #7
 800b3da:	dc04      	bgt.n	800b3e6 <__hexnan+0x76>
 800b3dc:	002a      	movs	r2, r5
 800b3de:	0031      	movs	r1, r6
 800b3e0:	0020      	movs	r0, r4
 800b3e2:	f7ff ff9f 	bl	800b324 <L_shift>
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	2508      	movs	r5, #8
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d905      	bls.n	800b3fa <__hexnan+0x8a>
 800b3ee:	1f26      	subs	r6, r4, #4
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	0034      	movs	r4, r6
 800b3f4:	9b03      	ldr	r3, [sp, #12]
 800b3f6:	6035      	str	r5, [r6, #0]
 800b3f8:	9307      	str	r3, [sp, #28]
 800b3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fc:	9305      	str	r3, [sp, #20]
 800b3fe:	e7d5      	b.n	800b3ac <__hexnan+0x3c>
 800b400:	9b04      	ldr	r3, [sp, #16]
 800b402:	2b29      	cmp	r3, #41	; 0x29
 800b404:	d159      	bne.n	800b4ba <__hexnan+0x14a>
 800b406:	9b05      	ldr	r3, [sp, #20]
 800b408:	9a08      	ldr	r2, [sp, #32]
 800b40a:	3302      	adds	r3, #2
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d052      	beq.n	800b4ba <__hexnan+0x14a>
 800b414:	42b4      	cmp	r4, r6
 800b416:	d206      	bcs.n	800b426 <__hexnan+0xb6>
 800b418:	2d07      	cmp	r5, #7
 800b41a:	dc04      	bgt.n	800b426 <__hexnan+0xb6>
 800b41c:	002a      	movs	r2, r5
 800b41e:	0031      	movs	r1, r6
 800b420:	0020      	movs	r0, r4
 800b422:	f7ff ff7f 	bl	800b324 <L_shift>
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	429c      	cmp	r4, r3
 800b42a:	d935      	bls.n	800b498 <__hexnan+0x128>
 800b42c:	001a      	movs	r2, r3
 800b42e:	0023      	movs	r3, r4
 800b430:	cb02      	ldmia	r3!, {r1}
 800b432:	c202      	stmia	r2!, {r1}
 800b434:	429f      	cmp	r7, r3
 800b436:	d2fb      	bcs.n	800b430 <__hexnan+0xc0>
 800b438:	9b02      	ldr	r3, [sp, #8]
 800b43a:	1c62      	adds	r2, r4, #1
 800b43c:	1ed9      	subs	r1, r3, #3
 800b43e:	2304      	movs	r3, #4
 800b440:	4291      	cmp	r1, r2
 800b442:	d305      	bcc.n	800b450 <__hexnan+0xe0>
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	3b04      	subs	r3, #4
 800b448:	1b1b      	subs	r3, r3, r4
 800b44a:	089b      	lsrs	r3, r3, #2
 800b44c:	3301      	adds	r3, #1
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	9a01      	ldr	r2, [sp, #4]
 800b452:	18d3      	adds	r3, r2, r3
 800b454:	2200      	movs	r2, #0
 800b456:	c304      	stmia	r3!, {r2}
 800b458:	429f      	cmp	r7, r3
 800b45a:	d2fc      	bcs.n	800b456 <__hexnan+0xe6>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d104      	bne.n	800b46c <__hexnan+0xfc>
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	429f      	cmp	r7, r3
 800b466:	d126      	bne.n	800b4b6 <__hexnan+0x146>
 800b468:	2301      	movs	r3, #1
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	2005      	movs	r0, #5
 800b46e:	e025      	b.n	800b4bc <__hexnan+0x14c>
 800b470:	9b03      	ldr	r3, [sp, #12]
 800b472:	3501      	adds	r5, #1
 800b474:	3301      	adds	r3, #1
 800b476:	9303      	str	r3, [sp, #12]
 800b478:	2d08      	cmp	r5, #8
 800b47a:	dd06      	ble.n	800b48a <__hexnan+0x11a>
 800b47c:	9b01      	ldr	r3, [sp, #4]
 800b47e:	429c      	cmp	r4, r3
 800b480:	d9bb      	bls.n	800b3fa <__hexnan+0x8a>
 800b482:	2300      	movs	r3, #0
 800b484:	2501      	movs	r5, #1
 800b486:	3c04      	subs	r4, #4
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	220f      	movs	r2, #15
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	4010      	ands	r0, r2
 800b490:	011b      	lsls	r3, r3, #4
 800b492:	4303      	orrs	r3, r0
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	e7b0      	b.n	800b3fa <__hexnan+0x8a>
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d0de      	beq.n	800b45c <__hexnan+0xec>
 800b49e:	2320      	movs	r3, #32
 800b4a0:	9a06      	ldr	r2, [sp, #24]
 800b4a2:	9902      	ldr	r1, [sp, #8]
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	4252      	negs	r2, r2
 800b4aa:	40da      	lsrs	r2, r3
 800b4ac:	3904      	subs	r1, #4
 800b4ae:	680b      	ldr	r3, [r1, #0]
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	600b      	str	r3, [r1, #0]
 800b4b4:	e7d2      	b.n	800b45c <__hexnan+0xec>
 800b4b6:	3f04      	subs	r7, #4
 800b4b8:	e7d0      	b.n	800b45c <__hexnan+0xec>
 800b4ba:	2004      	movs	r0, #4
 800b4bc:	b00b      	add	sp, #44	; 0x2c
 800b4be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4c0 <__ascii_mbtowc>:
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	2900      	cmp	r1, #0
 800b4c4:	d100      	bne.n	800b4c8 <__ascii_mbtowc+0x8>
 800b4c6:	a901      	add	r1, sp, #4
 800b4c8:	1e10      	subs	r0, r2, #0
 800b4ca:	d006      	beq.n	800b4da <__ascii_mbtowc+0x1a>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d006      	beq.n	800b4de <__ascii_mbtowc+0x1e>
 800b4d0:	7813      	ldrb	r3, [r2, #0]
 800b4d2:	600b      	str	r3, [r1, #0]
 800b4d4:	7810      	ldrb	r0, [r2, #0]
 800b4d6:	1e43      	subs	r3, r0, #1
 800b4d8:	4198      	sbcs	r0, r3
 800b4da:	b002      	add	sp, #8
 800b4dc:	4770      	bx	lr
 800b4de:	2002      	movs	r0, #2
 800b4e0:	4240      	negs	r0, r0
 800b4e2:	e7fa      	b.n	800b4da <__ascii_mbtowc+0x1a>

0800b4e4 <_Balloc>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	69c5      	ldr	r5, [r0, #28]
 800b4e8:	0006      	movs	r6, r0
 800b4ea:	000c      	movs	r4, r1
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	d10e      	bne.n	800b50e <_Balloc+0x2a>
 800b4f0:	2010      	movs	r0, #16
 800b4f2:	f7fe fa9f 	bl	8009a34 <malloc>
 800b4f6:	1e02      	subs	r2, r0, #0
 800b4f8:	61f0      	str	r0, [r6, #28]
 800b4fa:	d104      	bne.n	800b506 <_Balloc+0x22>
 800b4fc:	216b      	movs	r1, #107	; 0x6b
 800b4fe:	4b19      	ldr	r3, [pc, #100]	; (800b564 <_Balloc+0x80>)
 800b500:	4819      	ldr	r0, [pc, #100]	; (800b568 <_Balloc+0x84>)
 800b502:	f000 feff 	bl	800c304 <__assert_func>
 800b506:	6045      	str	r5, [r0, #4]
 800b508:	6085      	str	r5, [r0, #8]
 800b50a:	6005      	str	r5, [r0, #0]
 800b50c:	60c5      	str	r5, [r0, #12]
 800b50e:	69f5      	ldr	r5, [r6, #28]
 800b510:	68eb      	ldr	r3, [r5, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d013      	beq.n	800b53e <_Balloc+0x5a>
 800b516:	69f3      	ldr	r3, [r6, #28]
 800b518:	00a2      	lsls	r2, r4, #2
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	189b      	adds	r3, r3, r2
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	2800      	cmp	r0, #0
 800b522:	d118      	bne.n	800b556 <_Balloc+0x72>
 800b524:	2101      	movs	r1, #1
 800b526:	000d      	movs	r5, r1
 800b528:	40a5      	lsls	r5, r4
 800b52a:	1d6a      	adds	r2, r5, #5
 800b52c:	0030      	movs	r0, r6
 800b52e:	0092      	lsls	r2, r2, #2
 800b530:	f000 ff06 	bl	800c340 <_calloc_r>
 800b534:	2800      	cmp	r0, #0
 800b536:	d00c      	beq.n	800b552 <_Balloc+0x6e>
 800b538:	6044      	str	r4, [r0, #4]
 800b53a:	6085      	str	r5, [r0, #8]
 800b53c:	e00d      	b.n	800b55a <_Balloc+0x76>
 800b53e:	2221      	movs	r2, #33	; 0x21
 800b540:	2104      	movs	r1, #4
 800b542:	0030      	movs	r0, r6
 800b544:	f000 fefc 	bl	800c340 <_calloc_r>
 800b548:	69f3      	ldr	r3, [r6, #28]
 800b54a:	60e8      	str	r0, [r5, #12]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e1      	bne.n	800b516 <_Balloc+0x32>
 800b552:	2000      	movs	r0, #0
 800b554:	bd70      	pop	{r4, r5, r6, pc}
 800b556:	6802      	ldr	r2, [r0, #0]
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	2300      	movs	r3, #0
 800b55c:	6103      	str	r3, [r0, #16]
 800b55e:	60c3      	str	r3, [r0, #12]
 800b560:	e7f8      	b.n	800b554 <_Balloc+0x70>
 800b562:	46c0      	nop			; (mov r8, r8)
 800b564:	0800ce1a 	.word	0x0800ce1a
 800b568:	0800ce31 	.word	0x0800ce31

0800b56c <_Bfree>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	69c6      	ldr	r6, [r0, #28]
 800b570:	0005      	movs	r5, r0
 800b572:	000c      	movs	r4, r1
 800b574:	2e00      	cmp	r6, #0
 800b576:	d10e      	bne.n	800b596 <_Bfree+0x2a>
 800b578:	2010      	movs	r0, #16
 800b57a:	f7fe fa5b 	bl	8009a34 <malloc>
 800b57e:	1e02      	subs	r2, r0, #0
 800b580:	61e8      	str	r0, [r5, #28]
 800b582:	d104      	bne.n	800b58e <_Bfree+0x22>
 800b584:	218f      	movs	r1, #143	; 0x8f
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <_Bfree+0x40>)
 800b588:	4809      	ldr	r0, [pc, #36]	; (800b5b0 <_Bfree+0x44>)
 800b58a:	f000 febb 	bl	800c304 <__assert_func>
 800b58e:	6046      	str	r6, [r0, #4]
 800b590:	6086      	str	r6, [r0, #8]
 800b592:	6006      	str	r6, [r0, #0]
 800b594:	60c6      	str	r6, [r0, #12]
 800b596:	2c00      	cmp	r4, #0
 800b598:	d007      	beq.n	800b5aa <_Bfree+0x3e>
 800b59a:	69eb      	ldr	r3, [r5, #28]
 800b59c:	6862      	ldr	r2, [r4, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	0092      	lsls	r2, r2, #2
 800b5a2:	189b      	adds	r3, r3, r2
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	6022      	str	r2, [r4, #0]
 800b5a8:	601c      	str	r4, [r3, #0]
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	0800ce1a 	.word	0x0800ce1a
 800b5b0:	0800ce31 	.word	0x0800ce31

0800b5b4 <__multadd>:
 800b5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5b6:	000e      	movs	r6, r1
 800b5b8:	9001      	str	r0, [sp, #4]
 800b5ba:	000c      	movs	r4, r1
 800b5bc:	001d      	movs	r5, r3
 800b5be:	2000      	movs	r0, #0
 800b5c0:	690f      	ldr	r7, [r1, #16]
 800b5c2:	3614      	adds	r6, #20
 800b5c4:	6833      	ldr	r3, [r6, #0]
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	b299      	uxth	r1, r3
 800b5ca:	4351      	muls	r1, r2
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	4353      	muls	r3, r2
 800b5d0:	1949      	adds	r1, r1, r5
 800b5d2:	0c0d      	lsrs	r5, r1, #16
 800b5d4:	195b      	adds	r3, r3, r5
 800b5d6:	0c1d      	lsrs	r5, r3, #16
 800b5d8:	b289      	uxth	r1, r1
 800b5da:	041b      	lsls	r3, r3, #16
 800b5dc:	185b      	adds	r3, r3, r1
 800b5de:	c608      	stmia	r6!, {r3}
 800b5e0:	4287      	cmp	r7, r0
 800b5e2:	dcef      	bgt.n	800b5c4 <__multadd+0x10>
 800b5e4:	2d00      	cmp	r5, #0
 800b5e6:	d022      	beq.n	800b62e <__multadd+0x7a>
 800b5e8:	68a3      	ldr	r3, [r4, #8]
 800b5ea:	42bb      	cmp	r3, r7
 800b5ec:	dc19      	bgt.n	800b622 <__multadd+0x6e>
 800b5ee:	6861      	ldr	r1, [r4, #4]
 800b5f0:	9801      	ldr	r0, [sp, #4]
 800b5f2:	3101      	adds	r1, #1
 800b5f4:	f7ff ff76 	bl	800b4e4 <_Balloc>
 800b5f8:	1e06      	subs	r6, r0, #0
 800b5fa:	d105      	bne.n	800b608 <__multadd+0x54>
 800b5fc:	0032      	movs	r2, r6
 800b5fe:	21ba      	movs	r1, #186	; 0xba
 800b600:	4b0c      	ldr	r3, [pc, #48]	; (800b634 <__multadd+0x80>)
 800b602:	480d      	ldr	r0, [pc, #52]	; (800b638 <__multadd+0x84>)
 800b604:	f000 fe7e 	bl	800c304 <__assert_func>
 800b608:	0021      	movs	r1, r4
 800b60a:	6922      	ldr	r2, [r4, #16]
 800b60c:	310c      	adds	r1, #12
 800b60e:	3202      	adds	r2, #2
 800b610:	0092      	lsls	r2, r2, #2
 800b612:	300c      	adds	r0, #12
 800b614:	f7ff fb9f 	bl	800ad56 <memcpy>
 800b618:	0021      	movs	r1, r4
 800b61a:	9801      	ldr	r0, [sp, #4]
 800b61c:	f7ff ffa6 	bl	800b56c <_Bfree>
 800b620:	0034      	movs	r4, r6
 800b622:	1d3b      	adds	r3, r7, #4
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	18e3      	adds	r3, r4, r3
 800b628:	605d      	str	r5, [r3, #4]
 800b62a:	1c7b      	adds	r3, r7, #1
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	0020      	movs	r0, r4
 800b630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b632:	46c0      	nop			; (mov r8, r8)
 800b634:	0800cda9 	.word	0x0800cda9
 800b638:	0800ce31 	.word	0x0800ce31

0800b63c <__s2b>:
 800b63c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b63e:	0006      	movs	r6, r0
 800b640:	0018      	movs	r0, r3
 800b642:	000c      	movs	r4, r1
 800b644:	3008      	adds	r0, #8
 800b646:	2109      	movs	r1, #9
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	0015      	movs	r5, r2
 800b64c:	f7f4 fe0c 	bl	8000268 <__divsi3>
 800b650:	2301      	movs	r3, #1
 800b652:	2100      	movs	r1, #0
 800b654:	4283      	cmp	r3, r0
 800b656:	db0a      	blt.n	800b66e <__s2b+0x32>
 800b658:	0030      	movs	r0, r6
 800b65a:	f7ff ff43 	bl	800b4e4 <_Balloc>
 800b65e:	1e01      	subs	r1, r0, #0
 800b660:	d108      	bne.n	800b674 <__s2b+0x38>
 800b662:	000a      	movs	r2, r1
 800b664:	4b19      	ldr	r3, [pc, #100]	; (800b6cc <__s2b+0x90>)
 800b666:	481a      	ldr	r0, [pc, #104]	; (800b6d0 <__s2b+0x94>)
 800b668:	31d3      	adds	r1, #211	; 0xd3
 800b66a:	f000 fe4b 	bl	800c304 <__assert_func>
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	3101      	adds	r1, #1
 800b672:	e7ef      	b.n	800b654 <__s2b+0x18>
 800b674:	9b08      	ldr	r3, [sp, #32]
 800b676:	6143      	str	r3, [r0, #20]
 800b678:	2301      	movs	r3, #1
 800b67a:	6103      	str	r3, [r0, #16]
 800b67c:	2d09      	cmp	r5, #9
 800b67e:	dd18      	ble.n	800b6b2 <__s2b+0x76>
 800b680:	0023      	movs	r3, r4
 800b682:	3309      	adds	r3, #9
 800b684:	001f      	movs	r7, r3
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	1964      	adds	r4, r4, r5
 800b68a:	783b      	ldrb	r3, [r7, #0]
 800b68c:	220a      	movs	r2, #10
 800b68e:	0030      	movs	r0, r6
 800b690:	3b30      	subs	r3, #48	; 0x30
 800b692:	f7ff ff8f 	bl	800b5b4 <__multadd>
 800b696:	3701      	adds	r7, #1
 800b698:	0001      	movs	r1, r0
 800b69a:	42a7      	cmp	r7, r4
 800b69c:	d1f5      	bne.n	800b68a <__s2b+0x4e>
 800b69e:	002c      	movs	r4, r5
 800b6a0:	9b00      	ldr	r3, [sp, #0]
 800b6a2:	3c08      	subs	r4, #8
 800b6a4:	191c      	adds	r4, r3, r4
 800b6a6:	002f      	movs	r7, r5
 800b6a8:	9b01      	ldr	r3, [sp, #4]
 800b6aa:	429f      	cmp	r7, r3
 800b6ac:	db04      	blt.n	800b6b8 <__s2b+0x7c>
 800b6ae:	0008      	movs	r0, r1
 800b6b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6b2:	2509      	movs	r5, #9
 800b6b4:	340a      	adds	r4, #10
 800b6b6:	e7f6      	b.n	800b6a6 <__s2b+0x6a>
 800b6b8:	1b63      	subs	r3, r4, r5
 800b6ba:	5ddb      	ldrb	r3, [r3, r7]
 800b6bc:	220a      	movs	r2, #10
 800b6be:	0030      	movs	r0, r6
 800b6c0:	3b30      	subs	r3, #48	; 0x30
 800b6c2:	f7ff ff77 	bl	800b5b4 <__multadd>
 800b6c6:	3701      	adds	r7, #1
 800b6c8:	0001      	movs	r1, r0
 800b6ca:	e7ed      	b.n	800b6a8 <__s2b+0x6c>
 800b6cc:	0800cda9 	.word	0x0800cda9
 800b6d0:	0800ce31 	.word	0x0800ce31

0800b6d4 <__hi0bits>:
 800b6d4:	0003      	movs	r3, r0
 800b6d6:	0c02      	lsrs	r2, r0, #16
 800b6d8:	2000      	movs	r0, #0
 800b6da:	4282      	cmp	r2, r0
 800b6dc:	d101      	bne.n	800b6e2 <__hi0bits+0xe>
 800b6de:	041b      	lsls	r3, r3, #16
 800b6e0:	3010      	adds	r0, #16
 800b6e2:	0e1a      	lsrs	r2, r3, #24
 800b6e4:	d101      	bne.n	800b6ea <__hi0bits+0x16>
 800b6e6:	3008      	adds	r0, #8
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	0f1a      	lsrs	r2, r3, #28
 800b6ec:	d101      	bne.n	800b6f2 <__hi0bits+0x1e>
 800b6ee:	3004      	adds	r0, #4
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	0f9a      	lsrs	r2, r3, #30
 800b6f4:	d101      	bne.n	800b6fa <__hi0bits+0x26>
 800b6f6:	3002      	adds	r0, #2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	db03      	blt.n	800b706 <__hi0bits+0x32>
 800b6fe:	3001      	adds	r0, #1
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	d400      	bmi.n	800b706 <__hi0bits+0x32>
 800b704:	2020      	movs	r0, #32
 800b706:	4770      	bx	lr

0800b708 <__lo0bits>:
 800b708:	6803      	ldr	r3, [r0, #0]
 800b70a:	0001      	movs	r1, r0
 800b70c:	2207      	movs	r2, #7
 800b70e:	0018      	movs	r0, r3
 800b710:	4010      	ands	r0, r2
 800b712:	4213      	tst	r3, r2
 800b714:	d00d      	beq.n	800b732 <__lo0bits+0x2a>
 800b716:	3a06      	subs	r2, #6
 800b718:	2000      	movs	r0, #0
 800b71a:	4213      	tst	r3, r2
 800b71c:	d105      	bne.n	800b72a <__lo0bits+0x22>
 800b71e:	3002      	adds	r0, #2
 800b720:	4203      	tst	r3, r0
 800b722:	d003      	beq.n	800b72c <__lo0bits+0x24>
 800b724:	40d3      	lsrs	r3, r2
 800b726:	0010      	movs	r0, r2
 800b728:	600b      	str	r3, [r1, #0]
 800b72a:	4770      	bx	lr
 800b72c:	089b      	lsrs	r3, r3, #2
 800b72e:	600b      	str	r3, [r1, #0]
 800b730:	e7fb      	b.n	800b72a <__lo0bits+0x22>
 800b732:	b29a      	uxth	r2, r3
 800b734:	2a00      	cmp	r2, #0
 800b736:	d101      	bne.n	800b73c <__lo0bits+0x34>
 800b738:	2010      	movs	r0, #16
 800b73a:	0c1b      	lsrs	r3, r3, #16
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	2a00      	cmp	r2, #0
 800b740:	d101      	bne.n	800b746 <__lo0bits+0x3e>
 800b742:	3008      	adds	r0, #8
 800b744:	0a1b      	lsrs	r3, r3, #8
 800b746:	071a      	lsls	r2, r3, #28
 800b748:	d101      	bne.n	800b74e <__lo0bits+0x46>
 800b74a:	3004      	adds	r0, #4
 800b74c:	091b      	lsrs	r3, r3, #4
 800b74e:	079a      	lsls	r2, r3, #30
 800b750:	d101      	bne.n	800b756 <__lo0bits+0x4e>
 800b752:	3002      	adds	r0, #2
 800b754:	089b      	lsrs	r3, r3, #2
 800b756:	07da      	lsls	r2, r3, #31
 800b758:	d4e9      	bmi.n	800b72e <__lo0bits+0x26>
 800b75a:	3001      	adds	r0, #1
 800b75c:	085b      	lsrs	r3, r3, #1
 800b75e:	d1e6      	bne.n	800b72e <__lo0bits+0x26>
 800b760:	2020      	movs	r0, #32
 800b762:	e7e2      	b.n	800b72a <__lo0bits+0x22>

0800b764 <__i2b>:
 800b764:	b510      	push	{r4, lr}
 800b766:	000c      	movs	r4, r1
 800b768:	2101      	movs	r1, #1
 800b76a:	f7ff febb 	bl	800b4e4 <_Balloc>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d107      	bne.n	800b782 <__i2b+0x1e>
 800b772:	2146      	movs	r1, #70	; 0x46
 800b774:	4c05      	ldr	r4, [pc, #20]	; (800b78c <__i2b+0x28>)
 800b776:	0002      	movs	r2, r0
 800b778:	4b05      	ldr	r3, [pc, #20]	; (800b790 <__i2b+0x2c>)
 800b77a:	0020      	movs	r0, r4
 800b77c:	31ff      	adds	r1, #255	; 0xff
 800b77e:	f000 fdc1 	bl	800c304 <__assert_func>
 800b782:	2301      	movs	r3, #1
 800b784:	6144      	str	r4, [r0, #20]
 800b786:	6103      	str	r3, [r0, #16]
 800b788:	bd10      	pop	{r4, pc}
 800b78a:	46c0      	nop			; (mov r8, r8)
 800b78c:	0800ce31 	.word	0x0800ce31
 800b790:	0800cda9 	.word	0x0800cda9

0800b794 <__multiply>:
 800b794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b796:	0015      	movs	r5, r2
 800b798:	690a      	ldr	r2, [r1, #16]
 800b79a:	692b      	ldr	r3, [r5, #16]
 800b79c:	000c      	movs	r4, r1
 800b79e:	b08b      	sub	sp, #44	; 0x2c
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	da01      	bge.n	800b7a8 <__multiply+0x14>
 800b7a4:	002c      	movs	r4, r5
 800b7a6:	000d      	movs	r5, r1
 800b7a8:	6927      	ldr	r7, [r4, #16]
 800b7aa:	692e      	ldr	r6, [r5, #16]
 800b7ac:	6861      	ldr	r1, [r4, #4]
 800b7ae:	19bb      	adds	r3, r7, r6
 800b7b0:	9303      	str	r3, [sp, #12]
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	19ba      	adds	r2, r7, r6
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	da00      	bge.n	800b7bc <__multiply+0x28>
 800b7ba:	3101      	adds	r1, #1
 800b7bc:	f7ff fe92 	bl	800b4e4 <_Balloc>
 800b7c0:	9002      	str	r0, [sp, #8]
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d106      	bne.n	800b7d4 <__multiply+0x40>
 800b7c6:	21b1      	movs	r1, #177	; 0xb1
 800b7c8:	4b48      	ldr	r3, [pc, #288]	; (800b8ec <__multiply+0x158>)
 800b7ca:	4849      	ldr	r0, [pc, #292]	; (800b8f0 <__multiply+0x15c>)
 800b7cc:	9a02      	ldr	r2, [sp, #8]
 800b7ce:	0049      	lsls	r1, r1, #1
 800b7d0:	f000 fd98 	bl	800c304 <__assert_func>
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	3314      	adds	r3, #20
 800b7da:	469c      	mov	ip, r3
 800b7dc:	19bb      	adds	r3, r7, r6
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4463      	add	r3, ip
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	4663      	mov	r3, ip
 800b7e6:	9904      	ldr	r1, [sp, #16]
 800b7e8:	428b      	cmp	r3, r1
 800b7ea:	d32a      	bcc.n	800b842 <__multiply+0xae>
 800b7ec:	0023      	movs	r3, r4
 800b7ee:	00bf      	lsls	r7, r7, #2
 800b7f0:	3314      	adds	r3, #20
 800b7f2:	3514      	adds	r5, #20
 800b7f4:	9308      	str	r3, [sp, #32]
 800b7f6:	00b6      	lsls	r6, r6, #2
 800b7f8:	19db      	adds	r3, r3, r7
 800b7fa:	9305      	str	r3, [sp, #20]
 800b7fc:	19ab      	adds	r3, r5, r6
 800b7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b800:	2304      	movs	r3, #4
 800b802:	9306      	str	r3, [sp, #24]
 800b804:	0023      	movs	r3, r4
 800b806:	9a05      	ldr	r2, [sp, #20]
 800b808:	3315      	adds	r3, #21
 800b80a:	9501      	str	r5, [sp, #4]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d305      	bcc.n	800b81c <__multiply+0x88>
 800b810:	1b13      	subs	r3, r2, r4
 800b812:	3b15      	subs	r3, #21
 800b814:	089b      	lsrs	r3, r3, #2
 800b816:	3301      	adds	r3, #1
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	9306      	str	r3, [sp, #24]
 800b81c:	9b01      	ldr	r3, [sp, #4]
 800b81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b820:	4293      	cmp	r3, r2
 800b822:	d310      	bcc.n	800b846 <__multiply+0xb2>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	dd05      	ble.n	800b836 <__multiply+0xa2>
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	3b04      	subs	r3, #4
 800b82e:	9304      	str	r3, [sp, #16]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d056      	beq.n	800b8e4 <__multiply+0x150>
 800b836:	9b02      	ldr	r3, [sp, #8]
 800b838:	9a03      	ldr	r2, [sp, #12]
 800b83a:	0018      	movs	r0, r3
 800b83c:	611a      	str	r2, [r3, #16]
 800b83e:	b00b      	add	sp, #44	; 0x2c
 800b840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b842:	c304      	stmia	r3!, {r2}
 800b844:	e7cf      	b.n	800b7e6 <__multiply+0x52>
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	b280      	uxth	r0, r0
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d01e      	beq.n	800b88e <__multiply+0xfa>
 800b850:	4667      	mov	r7, ip
 800b852:	2500      	movs	r5, #0
 800b854:	9e08      	ldr	r6, [sp, #32]
 800b856:	ce02      	ldmia	r6!, {r1}
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	9307      	str	r3, [sp, #28]
 800b85c:	b28b      	uxth	r3, r1
 800b85e:	4343      	muls	r3, r0
 800b860:	001a      	movs	r2, r3
 800b862:	466b      	mov	r3, sp
 800b864:	8b9b      	ldrh	r3, [r3, #28]
 800b866:	18d3      	adds	r3, r2, r3
 800b868:	195b      	adds	r3, r3, r5
 800b86a:	0c0d      	lsrs	r5, r1, #16
 800b86c:	4345      	muls	r5, r0
 800b86e:	9a07      	ldr	r2, [sp, #28]
 800b870:	0c11      	lsrs	r1, r2, #16
 800b872:	1869      	adds	r1, r5, r1
 800b874:	0c1a      	lsrs	r2, r3, #16
 800b876:	188a      	adds	r2, r1, r2
 800b878:	b29b      	uxth	r3, r3
 800b87a:	0c15      	lsrs	r5, r2, #16
 800b87c:	0412      	lsls	r2, r2, #16
 800b87e:	431a      	orrs	r2, r3
 800b880:	9b05      	ldr	r3, [sp, #20]
 800b882:	c704      	stmia	r7!, {r2}
 800b884:	42b3      	cmp	r3, r6
 800b886:	d8e6      	bhi.n	800b856 <__multiply+0xc2>
 800b888:	4663      	mov	r3, ip
 800b88a:	9a06      	ldr	r2, [sp, #24]
 800b88c:	509d      	str	r5, [r3, r2]
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	0c00      	lsrs	r0, r0, #16
 800b894:	d020      	beq.n	800b8d8 <__multiply+0x144>
 800b896:	4663      	mov	r3, ip
 800b898:	0025      	movs	r5, r4
 800b89a:	4661      	mov	r1, ip
 800b89c:	2700      	movs	r7, #0
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3514      	adds	r5, #20
 800b8a2:	682a      	ldr	r2, [r5, #0]
 800b8a4:	680e      	ldr	r6, [r1, #0]
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	4342      	muls	r2, r0
 800b8aa:	0c36      	lsrs	r6, r6, #16
 800b8ac:	1992      	adds	r2, r2, r6
 800b8ae:	19d2      	adds	r2, r2, r7
 800b8b0:	0416      	lsls	r6, r2, #16
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	431e      	orrs	r6, r3
 800b8b6:	600e      	str	r6, [r1, #0]
 800b8b8:	cd40      	ldmia	r5!, {r6}
 800b8ba:	684b      	ldr	r3, [r1, #4]
 800b8bc:	0c36      	lsrs	r6, r6, #16
 800b8be:	4346      	muls	r6, r0
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	0c12      	lsrs	r2, r2, #16
 800b8c4:	18f3      	adds	r3, r6, r3
 800b8c6:	189b      	adds	r3, r3, r2
 800b8c8:	9a05      	ldr	r2, [sp, #20]
 800b8ca:	0c1f      	lsrs	r7, r3, #16
 800b8cc:	3104      	adds	r1, #4
 800b8ce:	42aa      	cmp	r2, r5
 800b8d0:	d8e7      	bhi.n	800b8a2 <__multiply+0x10e>
 800b8d2:	4662      	mov	r2, ip
 800b8d4:	9906      	ldr	r1, [sp, #24]
 800b8d6:	5053      	str	r3, [r2, r1]
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	3304      	adds	r3, #4
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	2304      	movs	r3, #4
 800b8e0:	449c      	add	ip, r3
 800b8e2:	e79b      	b.n	800b81c <__multiply+0x88>
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	9303      	str	r3, [sp, #12]
 800b8ea:	e79b      	b.n	800b824 <__multiply+0x90>
 800b8ec:	0800cda9 	.word	0x0800cda9
 800b8f0:	0800ce31 	.word	0x0800ce31

0800b8f4 <__pow5mult>:
 800b8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	0015      	movs	r5, r2
 800b8fa:	0007      	movs	r7, r0
 800b8fc:	000e      	movs	r6, r1
 800b8fe:	401a      	ands	r2, r3
 800b900:	421d      	tst	r5, r3
 800b902:	d008      	beq.n	800b916 <__pow5mult+0x22>
 800b904:	4925      	ldr	r1, [pc, #148]	; (800b99c <__pow5mult+0xa8>)
 800b906:	3a01      	subs	r2, #1
 800b908:	0092      	lsls	r2, r2, #2
 800b90a:	5852      	ldr	r2, [r2, r1]
 800b90c:	2300      	movs	r3, #0
 800b90e:	0031      	movs	r1, r6
 800b910:	f7ff fe50 	bl	800b5b4 <__multadd>
 800b914:	0006      	movs	r6, r0
 800b916:	10ad      	asrs	r5, r5, #2
 800b918:	d03d      	beq.n	800b996 <__pow5mult+0xa2>
 800b91a:	69fc      	ldr	r4, [r7, #28]
 800b91c:	2c00      	cmp	r4, #0
 800b91e:	d10f      	bne.n	800b940 <__pow5mult+0x4c>
 800b920:	2010      	movs	r0, #16
 800b922:	f7fe f887 	bl	8009a34 <malloc>
 800b926:	1e02      	subs	r2, r0, #0
 800b928:	61f8      	str	r0, [r7, #28]
 800b92a:	d105      	bne.n	800b938 <__pow5mult+0x44>
 800b92c:	21b4      	movs	r1, #180	; 0xb4
 800b92e:	4b1c      	ldr	r3, [pc, #112]	; (800b9a0 <__pow5mult+0xac>)
 800b930:	481c      	ldr	r0, [pc, #112]	; (800b9a4 <__pow5mult+0xb0>)
 800b932:	31ff      	adds	r1, #255	; 0xff
 800b934:	f000 fce6 	bl	800c304 <__assert_func>
 800b938:	6044      	str	r4, [r0, #4]
 800b93a:	6084      	str	r4, [r0, #8]
 800b93c:	6004      	str	r4, [r0, #0]
 800b93e:	60c4      	str	r4, [r0, #12]
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	689c      	ldr	r4, [r3, #8]
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	2c00      	cmp	r4, #0
 800b948:	d108      	bne.n	800b95c <__pow5mult+0x68>
 800b94a:	0038      	movs	r0, r7
 800b94c:	4916      	ldr	r1, [pc, #88]	; (800b9a8 <__pow5mult+0xb4>)
 800b94e:	f7ff ff09 	bl	800b764 <__i2b>
 800b952:	9b01      	ldr	r3, [sp, #4]
 800b954:	0004      	movs	r4, r0
 800b956:	6098      	str	r0, [r3, #8]
 800b958:	2300      	movs	r3, #0
 800b95a:	6003      	str	r3, [r0, #0]
 800b95c:	2301      	movs	r3, #1
 800b95e:	421d      	tst	r5, r3
 800b960:	d00a      	beq.n	800b978 <__pow5mult+0x84>
 800b962:	0031      	movs	r1, r6
 800b964:	0022      	movs	r2, r4
 800b966:	0038      	movs	r0, r7
 800b968:	f7ff ff14 	bl	800b794 <__multiply>
 800b96c:	0031      	movs	r1, r6
 800b96e:	9001      	str	r0, [sp, #4]
 800b970:	0038      	movs	r0, r7
 800b972:	f7ff fdfb 	bl	800b56c <_Bfree>
 800b976:	9e01      	ldr	r6, [sp, #4]
 800b978:	106d      	asrs	r5, r5, #1
 800b97a:	d00c      	beq.n	800b996 <__pow5mult+0xa2>
 800b97c:	6820      	ldr	r0, [r4, #0]
 800b97e:	2800      	cmp	r0, #0
 800b980:	d107      	bne.n	800b992 <__pow5mult+0x9e>
 800b982:	0022      	movs	r2, r4
 800b984:	0021      	movs	r1, r4
 800b986:	0038      	movs	r0, r7
 800b988:	f7ff ff04 	bl	800b794 <__multiply>
 800b98c:	2300      	movs	r3, #0
 800b98e:	6020      	str	r0, [r4, #0]
 800b990:	6003      	str	r3, [r0, #0]
 800b992:	0004      	movs	r4, r0
 800b994:	e7e2      	b.n	800b95c <__pow5mult+0x68>
 800b996:	0030      	movs	r0, r6
 800b998:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	0800cf80 	.word	0x0800cf80
 800b9a0:	0800ce1a 	.word	0x0800ce1a
 800b9a4:	0800ce31 	.word	0x0800ce31
 800b9a8:	00000271 	.word	0x00000271

0800b9ac <__lshift>:
 800b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ae:	000c      	movs	r4, r1
 800b9b0:	0017      	movs	r7, r2
 800b9b2:	6923      	ldr	r3, [r4, #16]
 800b9b4:	1155      	asrs	r5, r2, #5
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	18eb      	adds	r3, r5, r3
 800b9ba:	9302      	str	r3, [sp, #8]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	6849      	ldr	r1, [r1, #4]
 800b9c2:	68a3      	ldr	r3, [r4, #8]
 800b9c4:	9004      	str	r0, [sp, #16]
 800b9c6:	9a01      	ldr	r2, [sp, #4]
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	db10      	blt.n	800b9ee <__lshift+0x42>
 800b9cc:	9804      	ldr	r0, [sp, #16]
 800b9ce:	f7ff fd89 	bl	800b4e4 <_Balloc>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	0002      	movs	r2, r0
 800b9d6:	0006      	movs	r6, r0
 800b9d8:	0019      	movs	r1, r3
 800b9da:	3214      	adds	r2, #20
 800b9dc:	4298      	cmp	r0, r3
 800b9de:	d10c      	bne.n	800b9fa <__lshift+0x4e>
 800b9e0:	31df      	adds	r1, #223	; 0xdf
 800b9e2:	0032      	movs	r2, r6
 800b9e4:	4b26      	ldr	r3, [pc, #152]	; (800ba80 <__lshift+0xd4>)
 800b9e6:	4827      	ldr	r0, [pc, #156]	; (800ba84 <__lshift+0xd8>)
 800b9e8:	31ff      	adds	r1, #255	; 0xff
 800b9ea:	f000 fc8b 	bl	800c304 <__assert_func>
 800b9ee:	3101      	adds	r1, #1
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	e7e8      	b.n	800b9c6 <__lshift+0x1a>
 800b9f4:	0098      	lsls	r0, r3, #2
 800b9f6:	5011      	str	r1, [r2, r0]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	42ab      	cmp	r3, r5
 800b9fc:	dbfa      	blt.n	800b9f4 <__lshift+0x48>
 800b9fe:	43eb      	mvns	r3, r5
 800ba00:	17db      	asrs	r3, r3, #31
 800ba02:	401d      	ands	r5, r3
 800ba04:	211f      	movs	r1, #31
 800ba06:	0023      	movs	r3, r4
 800ba08:	0038      	movs	r0, r7
 800ba0a:	00ad      	lsls	r5, r5, #2
 800ba0c:	1955      	adds	r5, r2, r5
 800ba0e:	6922      	ldr	r2, [r4, #16]
 800ba10:	3314      	adds	r3, #20
 800ba12:	0092      	lsls	r2, r2, #2
 800ba14:	4008      	ands	r0, r1
 800ba16:	4684      	mov	ip, r0
 800ba18:	189a      	adds	r2, r3, r2
 800ba1a:	420f      	tst	r7, r1
 800ba1c:	d02a      	beq.n	800ba74 <__lshift+0xc8>
 800ba1e:	3101      	adds	r1, #1
 800ba20:	1a09      	subs	r1, r1, r0
 800ba22:	9105      	str	r1, [sp, #20]
 800ba24:	2100      	movs	r1, #0
 800ba26:	9503      	str	r5, [sp, #12]
 800ba28:	4667      	mov	r7, ip
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	40b8      	lsls	r0, r7
 800ba2e:	4308      	orrs	r0, r1
 800ba30:	9903      	ldr	r1, [sp, #12]
 800ba32:	c101      	stmia	r1!, {r0}
 800ba34:	9103      	str	r1, [sp, #12]
 800ba36:	9805      	ldr	r0, [sp, #20]
 800ba38:	cb02      	ldmia	r3!, {r1}
 800ba3a:	40c1      	lsrs	r1, r0
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d8f3      	bhi.n	800ba28 <__lshift+0x7c>
 800ba40:	0020      	movs	r0, r4
 800ba42:	3015      	adds	r0, #21
 800ba44:	2304      	movs	r3, #4
 800ba46:	4282      	cmp	r2, r0
 800ba48:	d304      	bcc.n	800ba54 <__lshift+0xa8>
 800ba4a:	1b13      	subs	r3, r2, r4
 800ba4c:	3b15      	subs	r3, #21
 800ba4e:	089b      	lsrs	r3, r3, #2
 800ba50:	3301      	adds	r3, #1
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	50e9      	str	r1, [r5, r3]
 800ba56:	2900      	cmp	r1, #0
 800ba58:	d002      	beq.n	800ba60 <__lshift+0xb4>
 800ba5a:	9b02      	ldr	r3, [sp, #8]
 800ba5c:	3302      	adds	r3, #2
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	9804      	ldr	r0, [sp, #16]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	0021      	movs	r1, r4
 800ba68:	6133      	str	r3, [r6, #16]
 800ba6a:	f7ff fd7f 	bl	800b56c <_Bfree>
 800ba6e:	0030      	movs	r0, r6
 800ba70:	b007      	add	sp, #28
 800ba72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba74:	cb02      	ldmia	r3!, {r1}
 800ba76:	c502      	stmia	r5!, {r1}
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d8fb      	bhi.n	800ba74 <__lshift+0xc8>
 800ba7c:	e7f0      	b.n	800ba60 <__lshift+0xb4>
 800ba7e:	46c0      	nop			; (mov r8, r8)
 800ba80:	0800cda9 	.word	0x0800cda9
 800ba84:	0800ce31 	.word	0x0800ce31

0800ba88 <__mcmp>:
 800ba88:	b530      	push	{r4, r5, lr}
 800ba8a:	690b      	ldr	r3, [r1, #16]
 800ba8c:	6904      	ldr	r4, [r0, #16]
 800ba8e:	0002      	movs	r2, r0
 800ba90:	1ae0      	subs	r0, r4, r3
 800ba92:	429c      	cmp	r4, r3
 800ba94:	d10e      	bne.n	800bab4 <__mcmp+0x2c>
 800ba96:	3214      	adds	r2, #20
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	3114      	adds	r1, #20
 800ba9c:	0014      	movs	r4, r2
 800ba9e:	18c9      	adds	r1, r1, r3
 800baa0:	18d2      	adds	r2, r2, r3
 800baa2:	3a04      	subs	r2, #4
 800baa4:	3904      	subs	r1, #4
 800baa6:	6815      	ldr	r5, [r2, #0]
 800baa8:	680b      	ldr	r3, [r1, #0]
 800baaa:	429d      	cmp	r5, r3
 800baac:	d003      	beq.n	800bab6 <__mcmp+0x2e>
 800baae:	2001      	movs	r0, #1
 800bab0:	429d      	cmp	r5, r3
 800bab2:	d303      	bcc.n	800babc <__mcmp+0x34>
 800bab4:	bd30      	pop	{r4, r5, pc}
 800bab6:	4294      	cmp	r4, r2
 800bab8:	d3f3      	bcc.n	800baa2 <__mcmp+0x1a>
 800baba:	e7fb      	b.n	800bab4 <__mcmp+0x2c>
 800babc:	4240      	negs	r0, r0
 800babe:	e7f9      	b.n	800bab4 <__mcmp+0x2c>

0800bac0 <__mdiff>:
 800bac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac2:	000e      	movs	r6, r1
 800bac4:	0007      	movs	r7, r0
 800bac6:	0011      	movs	r1, r2
 800bac8:	0030      	movs	r0, r6
 800baca:	b087      	sub	sp, #28
 800bacc:	0014      	movs	r4, r2
 800bace:	f7ff ffdb 	bl	800ba88 <__mcmp>
 800bad2:	1e05      	subs	r5, r0, #0
 800bad4:	d110      	bne.n	800baf8 <__mdiff+0x38>
 800bad6:	0001      	movs	r1, r0
 800bad8:	0038      	movs	r0, r7
 800bada:	f7ff fd03 	bl	800b4e4 <_Balloc>
 800bade:	1e02      	subs	r2, r0, #0
 800bae0:	d104      	bne.n	800baec <__mdiff+0x2c>
 800bae2:	4b3f      	ldr	r3, [pc, #252]	; (800bbe0 <__mdiff+0x120>)
 800bae4:	483f      	ldr	r0, [pc, #252]	; (800bbe4 <__mdiff+0x124>)
 800bae6:	4940      	ldr	r1, [pc, #256]	; (800bbe8 <__mdiff+0x128>)
 800bae8:	f000 fc0c 	bl	800c304 <__assert_func>
 800baec:	2301      	movs	r3, #1
 800baee:	6145      	str	r5, [r0, #20]
 800baf0:	6103      	str	r3, [r0, #16]
 800baf2:	0010      	movs	r0, r2
 800baf4:	b007      	add	sp, #28
 800baf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf8:	2301      	movs	r3, #1
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	2800      	cmp	r0, #0
 800bafe:	db04      	blt.n	800bb0a <__mdiff+0x4a>
 800bb00:	0023      	movs	r3, r4
 800bb02:	0034      	movs	r4, r6
 800bb04:	001e      	movs	r6, r3
 800bb06:	2300      	movs	r3, #0
 800bb08:	9301      	str	r3, [sp, #4]
 800bb0a:	0038      	movs	r0, r7
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	f7ff fce9 	bl	800b4e4 <_Balloc>
 800bb12:	1e02      	subs	r2, r0, #0
 800bb14:	d103      	bne.n	800bb1e <__mdiff+0x5e>
 800bb16:	4b32      	ldr	r3, [pc, #200]	; (800bbe0 <__mdiff+0x120>)
 800bb18:	4832      	ldr	r0, [pc, #200]	; (800bbe4 <__mdiff+0x124>)
 800bb1a:	4934      	ldr	r1, [pc, #208]	; (800bbec <__mdiff+0x12c>)
 800bb1c:	e7e4      	b.n	800bae8 <__mdiff+0x28>
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	2700      	movs	r7, #0
 800bb22:	60c3      	str	r3, [r0, #12]
 800bb24:	6920      	ldr	r0, [r4, #16]
 800bb26:	3414      	adds	r4, #20
 800bb28:	0083      	lsls	r3, r0, #2
 800bb2a:	18e3      	adds	r3, r4, r3
 800bb2c:	0021      	movs	r1, r4
 800bb2e:	9401      	str	r4, [sp, #4]
 800bb30:	0034      	movs	r4, r6
 800bb32:	9302      	str	r3, [sp, #8]
 800bb34:	6933      	ldr	r3, [r6, #16]
 800bb36:	3414      	adds	r4, #20
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	18e3      	adds	r3, r4, r3
 800bb3c:	9303      	str	r3, [sp, #12]
 800bb3e:	0013      	movs	r3, r2
 800bb40:	3314      	adds	r3, #20
 800bb42:	469c      	mov	ip, r3
 800bb44:	9305      	str	r3, [sp, #20]
 800bb46:	9104      	str	r1, [sp, #16]
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	cc02      	ldmia	r4!, {r1}
 800bb4c:	cb20      	ldmia	r3!, {r5}
 800bb4e:	9304      	str	r3, [sp, #16]
 800bb50:	b2ab      	uxth	r3, r5
 800bb52:	19df      	adds	r7, r3, r7
 800bb54:	b28b      	uxth	r3, r1
 800bb56:	1afb      	subs	r3, r7, r3
 800bb58:	0c09      	lsrs	r1, r1, #16
 800bb5a:	0c2d      	lsrs	r5, r5, #16
 800bb5c:	1a6d      	subs	r5, r5, r1
 800bb5e:	1419      	asrs	r1, r3, #16
 800bb60:	1869      	adds	r1, r5, r1
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	140f      	asrs	r7, r1, #16
 800bb66:	0409      	lsls	r1, r1, #16
 800bb68:	4319      	orrs	r1, r3
 800bb6a:	4663      	mov	r3, ip
 800bb6c:	c302      	stmia	r3!, {r1}
 800bb6e:	469c      	mov	ip, r3
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	d8e8      	bhi.n	800bb48 <__mdiff+0x88>
 800bb76:	0031      	movs	r1, r6
 800bb78:	9c03      	ldr	r4, [sp, #12]
 800bb7a:	3115      	adds	r1, #21
 800bb7c:	2304      	movs	r3, #4
 800bb7e:	428c      	cmp	r4, r1
 800bb80:	d304      	bcc.n	800bb8c <__mdiff+0xcc>
 800bb82:	1ba3      	subs	r3, r4, r6
 800bb84:	3b15      	subs	r3, #21
 800bb86:	089b      	lsrs	r3, r3, #2
 800bb88:	3301      	adds	r3, #1
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	9901      	ldr	r1, [sp, #4]
 800bb8e:	18cd      	adds	r5, r1, r3
 800bb90:	9905      	ldr	r1, [sp, #20]
 800bb92:	002e      	movs	r6, r5
 800bb94:	18cb      	adds	r3, r1, r3
 800bb96:	469c      	mov	ip, r3
 800bb98:	9902      	ldr	r1, [sp, #8]
 800bb9a:	428e      	cmp	r6, r1
 800bb9c:	d310      	bcc.n	800bbc0 <__mdiff+0x100>
 800bb9e:	9e02      	ldr	r6, [sp, #8]
 800bba0:	1ee9      	subs	r1, r5, #3
 800bba2:	2400      	movs	r4, #0
 800bba4:	428e      	cmp	r6, r1
 800bba6:	d304      	bcc.n	800bbb2 <__mdiff+0xf2>
 800bba8:	0031      	movs	r1, r6
 800bbaa:	3103      	adds	r1, #3
 800bbac:	1b49      	subs	r1, r1, r5
 800bbae:	0889      	lsrs	r1, r1, #2
 800bbb0:	008c      	lsls	r4, r1, #2
 800bbb2:	191b      	adds	r3, r3, r4
 800bbb4:	3b04      	subs	r3, #4
 800bbb6:	6819      	ldr	r1, [r3, #0]
 800bbb8:	2900      	cmp	r1, #0
 800bbba:	d00f      	beq.n	800bbdc <__mdiff+0x11c>
 800bbbc:	6110      	str	r0, [r2, #16]
 800bbbe:	e798      	b.n	800baf2 <__mdiff+0x32>
 800bbc0:	ce02      	ldmia	r6!, {r1}
 800bbc2:	b28c      	uxth	r4, r1
 800bbc4:	19e4      	adds	r4, r4, r7
 800bbc6:	0c0f      	lsrs	r7, r1, #16
 800bbc8:	1421      	asrs	r1, r4, #16
 800bbca:	1879      	adds	r1, r7, r1
 800bbcc:	b2a4      	uxth	r4, r4
 800bbce:	140f      	asrs	r7, r1, #16
 800bbd0:	0409      	lsls	r1, r1, #16
 800bbd2:	4321      	orrs	r1, r4
 800bbd4:	4664      	mov	r4, ip
 800bbd6:	c402      	stmia	r4!, {r1}
 800bbd8:	46a4      	mov	ip, r4
 800bbda:	e7dd      	b.n	800bb98 <__mdiff+0xd8>
 800bbdc:	3801      	subs	r0, #1
 800bbde:	e7e9      	b.n	800bbb4 <__mdiff+0xf4>
 800bbe0:	0800cda9 	.word	0x0800cda9
 800bbe4:	0800ce31 	.word	0x0800ce31
 800bbe8:	00000237 	.word	0x00000237
 800bbec:	00000245 	.word	0x00000245

0800bbf0 <__ulp>:
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <__ulp+0x30>)
 800bbf4:	4019      	ands	r1, r3
 800bbf6:	4b0b      	ldr	r3, [pc, #44]	; (800bc24 <__ulp+0x34>)
 800bbf8:	18c9      	adds	r1, r1, r3
 800bbfa:	4281      	cmp	r1, r0
 800bbfc:	dc06      	bgt.n	800bc0c <__ulp+0x1c>
 800bbfe:	4249      	negs	r1, r1
 800bc00:	150b      	asrs	r3, r1, #20
 800bc02:	2b13      	cmp	r3, #19
 800bc04:	dc03      	bgt.n	800bc0e <__ulp+0x1e>
 800bc06:	2180      	movs	r1, #128	; 0x80
 800bc08:	0309      	lsls	r1, r1, #12
 800bc0a:	4119      	asrs	r1, r3
 800bc0c:	4770      	bx	lr
 800bc0e:	3b14      	subs	r3, #20
 800bc10:	2001      	movs	r0, #1
 800bc12:	2b1e      	cmp	r3, #30
 800bc14:	dc02      	bgt.n	800bc1c <__ulp+0x2c>
 800bc16:	2080      	movs	r0, #128	; 0x80
 800bc18:	0600      	lsls	r0, r0, #24
 800bc1a:	40d8      	lsrs	r0, r3
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	e7f5      	b.n	800bc0c <__ulp+0x1c>
 800bc20:	7ff00000 	.word	0x7ff00000
 800bc24:	fcc00000 	.word	0xfcc00000

0800bc28 <__b2d>:
 800bc28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc2a:	0006      	movs	r6, r0
 800bc2c:	6903      	ldr	r3, [r0, #16]
 800bc2e:	3614      	adds	r6, #20
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	18f3      	adds	r3, r6, r3
 800bc34:	1f1d      	subs	r5, r3, #4
 800bc36:	682c      	ldr	r4, [r5, #0]
 800bc38:	000f      	movs	r7, r1
 800bc3a:	0020      	movs	r0, r4
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	f7ff fd49 	bl	800b6d4 <__hi0bits>
 800bc42:	2220      	movs	r2, #32
 800bc44:	1a12      	subs	r2, r2, r0
 800bc46:	603a      	str	r2, [r7, #0]
 800bc48:	0003      	movs	r3, r0
 800bc4a:	4a1c      	ldr	r2, [pc, #112]	; (800bcbc <__b2d+0x94>)
 800bc4c:	280a      	cmp	r0, #10
 800bc4e:	dc15      	bgt.n	800bc7c <__b2d+0x54>
 800bc50:	210b      	movs	r1, #11
 800bc52:	0027      	movs	r7, r4
 800bc54:	1a09      	subs	r1, r1, r0
 800bc56:	40cf      	lsrs	r7, r1
 800bc58:	433a      	orrs	r2, r7
 800bc5a:	468c      	mov	ip, r1
 800bc5c:	0011      	movs	r1, r2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	42ae      	cmp	r6, r5
 800bc62:	d202      	bcs.n	800bc6a <__b2d+0x42>
 800bc64:	9a01      	ldr	r2, [sp, #4]
 800bc66:	3a08      	subs	r2, #8
 800bc68:	6812      	ldr	r2, [r2, #0]
 800bc6a:	3315      	adds	r3, #21
 800bc6c:	409c      	lsls	r4, r3
 800bc6e:	4663      	mov	r3, ip
 800bc70:	0027      	movs	r7, r4
 800bc72:	40da      	lsrs	r2, r3
 800bc74:	4317      	orrs	r7, r2
 800bc76:	0038      	movs	r0, r7
 800bc78:	b003      	add	sp, #12
 800bc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7c:	2700      	movs	r7, #0
 800bc7e:	42ae      	cmp	r6, r5
 800bc80:	d202      	bcs.n	800bc88 <__b2d+0x60>
 800bc82:	9d01      	ldr	r5, [sp, #4]
 800bc84:	3d08      	subs	r5, #8
 800bc86:	682f      	ldr	r7, [r5, #0]
 800bc88:	210b      	movs	r1, #11
 800bc8a:	4249      	negs	r1, r1
 800bc8c:	468c      	mov	ip, r1
 800bc8e:	449c      	add	ip, r3
 800bc90:	2b0b      	cmp	r3, #11
 800bc92:	d010      	beq.n	800bcb6 <__b2d+0x8e>
 800bc94:	4661      	mov	r1, ip
 800bc96:	2320      	movs	r3, #32
 800bc98:	408c      	lsls	r4, r1
 800bc9a:	1a5b      	subs	r3, r3, r1
 800bc9c:	0039      	movs	r1, r7
 800bc9e:	40d9      	lsrs	r1, r3
 800bca0:	430c      	orrs	r4, r1
 800bca2:	4322      	orrs	r2, r4
 800bca4:	0011      	movs	r1, r2
 800bca6:	2200      	movs	r2, #0
 800bca8:	42b5      	cmp	r5, r6
 800bcaa:	d901      	bls.n	800bcb0 <__b2d+0x88>
 800bcac:	3d04      	subs	r5, #4
 800bcae:	682a      	ldr	r2, [r5, #0]
 800bcb0:	4664      	mov	r4, ip
 800bcb2:	40a7      	lsls	r7, r4
 800bcb4:	e7dd      	b.n	800bc72 <__b2d+0x4a>
 800bcb6:	4322      	orrs	r2, r4
 800bcb8:	0011      	movs	r1, r2
 800bcba:	e7dc      	b.n	800bc76 <__b2d+0x4e>
 800bcbc:	3ff00000 	.word	0x3ff00000

0800bcc0 <__d2b>:
 800bcc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	0014      	movs	r4, r2
 800bcc6:	001d      	movs	r5, r3
 800bcc8:	9f08      	ldr	r7, [sp, #32]
 800bcca:	f7ff fc0b 	bl	800b4e4 <_Balloc>
 800bcce:	1e06      	subs	r6, r0, #0
 800bcd0:	d105      	bne.n	800bcde <__d2b+0x1e>
 800bcd2:	0032      	movs	r2, r6
 800bcd4:	4b24      	ldr	r3, [pc, #144]	; (800bd68 <__d2b+0xa8>)
 800bcd6:	4825      	ldr	r0, [pc, #148]	; (800bd6c <__d2b+0xac>)
 800bcd8:	4925      	ldr	r1, [pc, #148]	; (800bd70 <__d2b+0xb0>)
 800bcda:	f000 fb13 	bl	800c304 <__assert_func>
 800bcde:	032b      	lsls	r3, r5, #12
 800bce0:	006d      	lsls	r5, r5, #1
 800bce2:	0b1b      	lsrs	r3, r3, #12
 800bce4:	0d6d      	lsrs	r5, r5, #21
 800bce6:	d125      	bne.n	800bd34 <__d2b+0x74>
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	2c00      	cmp	r4, #0
 800bcec:	d028      	beq.n	800bd40 <__d2b+0x80>
 800bcee:	4668      	mov	r0, sp
 800bcf0:	9400      	str	r4, [sp, #0]
 800bcf2:	f7ff fd09 	bl	800b708 <__lo0bits>
 800bcf6:	9b01      	ldr	r3, [sp, #4]
 800bcf8:	9900      	ldr	r1, [sp, #0]
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d01e      	beq.n	800bd3c <__d2b+0x7c>
 800bcfe:	2220      	movs	r2, #32
 800bd00:	001c      	movs	r4, r3
 800bd02:	1a12      	subs	r2, r2, r0
 800bd04:	4094      	lsls	r4, r2
 800bd06:	0022      	movs	r2, r4
 800bd08:	40c3      	lsrs	r3, r0
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	6172      	str	r2, [r6, #20]
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	9c01      	ldr	r4, [sp, #4]
 800bd12:	61b4      	str	r4, [r6, #24]
 800bd14:	1e63      	subs	r3, r4, #1
 800bd16:	419c      	sbcs	r4, r3
 800bd18:	3401      	adds	r4, #1
 800bd1a:	6134      	str	r4, [r6, #16]
 800bd1c:	2d00      	cmp	r5, #0
 800bd1e:	d017      	beq.n	800bd50 <__d2b+0x90>
 800bd20:	2435      	movs	r4, #53	; 0x35
 800bd22:	4b14      	ldr	r3, [pc, #80]	; (800bd74 <__d2b+0xb4>)
 800bd24:	18ed      	adds	r5, r5, r3
 800bd26:	182d      	adds	r5, r5, r0
 800bd28:	603d      	str	r5, [r7, #0]
 800bd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd2c:	1a24      	subs	r4, r4, r0
 800bd2e:	601c      	str	r4, [r3, #0]
 800bd30:	0030      	movs	r0, r6
 800bd32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd34:	2280      	movs	r2, #128	; 0x80
 800bd36:	0352      	lsls	r2, r2, #13
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	e7d5      	b.n	800bce8 <__d2b+0x28>
 800bd3c:	6171      	str	r1, [r6, #20]
 800bd3e:	e7e7      	b.n	800bd10 <__d2b+0x50>
 800bd40:	a801      	add	r0, sp, #4
 800bd42:	f7ff fce1 	bl	800b708 <__lo0bits>
 800bd46:	9b01      	ldr	r3, [sp, #4]
 800bd48:	2401      	movs	r4, #1
 800bd4a:	6173      	str	r3, [r6, #20]
 800bd4c:	3020      	adds	r0, #32
 800bd4e:	e7e4      	b.n	800bd1a <__d2b+0x5a>
 800bd50:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <__d2b+0xb8>)
 800bd52:	18c0      	adds	r0, r0, r3
 800bd54:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <__d2b+0xbc>)
 800bd56:	6038      	str	r0, [r7, #0]
 800bd58:	18e3      	adds	r3, r4, r3
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	18f3      	adds	r3, r6, r3
 800bd5e:	6958      	ldr	r0, [r3, #20]
 800bd60:	f7ff fcb8 	bl	800b6d4 <__hi0bits>
 800bd64:	0164      	lsls	r4, r4, #5
 800bd66:	e7e0      	b.n	800bd2a <__d2b+0x6a>
 800bd68:	0800cda9 	.word	0x0800cda9
 800bd6c:	0800ce31 	.word	0x0800ce31
 800bd70:	0000030f 	.word	0x0000030f
 800bd74:	fffffbcd 	.word	0xfffffbcd
 800bd78:	fffffbce 	.word	0xfffffbce
 800bd7c:	3fffffff 	.word	0x3fffffff

0800bd80 <__ratio>:
 800bd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd82:	b087      	sub	sp, #28
 800bd84:	000f      	movs	r7, r1
 800bd86:	a904      	add	r1, sp, #16
 800bd88:	0006      	movs	r6, r0
 800bd8a:	f7ff ff4d 	bl	800bc28 <__b2d>
 800bd8e:	9000      	str	r0, [sp, #0]
 800bd90:	9101      	str	r1, [sp, #4]
 800bd92:	9c00      	ldr	r4, [sp, #0]
 800bd94:	9d01      	ldr	r5, [sp, #4]
 800bd96:	0038      	movs	r0, r7
 800bd98:	a905      	add	r1, sp, #20
 800bd9a:	f7ff ff45 	bl	800bc28 <__b2d>
 800bd9e:	9002      	str	r0, [sp, #8]
 800bda0:	9103      	str	r1, [sp, #12]
 800bda2:	9a02      	ldr	r2, [sp, #8]
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	6930      	ldr	r0, [r6, #16]
 800bda8:	6939      	ldr	r1, [r7, #16]
 800bdaa:	9e04      	ldr	r6, [sp, #16]
 800bdac:	1a40      	subs	r0, r0, r1
 800bdae:	9905      	ldr	r1, [sp, #20]
 800bdb0:	0140      	lsls	r0, r0, #5
 800bdb2:	1a71      	subs	r1, r6, r1
 800bdb4:	1841      	adds	r1, r0, r1
 800bdb6:	0508      	lsls	r0, r1, #20
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	dd07      	ble.n	800bdcc <__ratio+0x4c>
 800bdbc:	9901      	ldr	r1, [sp, #4]
 800bdbe:	1845      	adds	r5, r0, r1
 800bdc0:	0020      	movs	r0, r4
 800bdc2:	0029      	movs	r1, r5
 800bdc4:	f7f5 f864 	bl	8000e90 <__aeabi_ddiv>
 800bdc8:	b007      	add	sp, #28
 800bdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdcc:	9903      	ldr	r1, [sp, #12]
 800bdce:	1a0b      	subs	r3, r1, r0
 800bdd0:	e7f6      	b.n	800bdc0 <__ratio+0x40>

0800bdd2 <__copybits>:
 800bdd2:	b570      	push	{r4, r5, r6, lr}
 800bdd4:	0014      	movs	r4, r2
 800bdd6:	0005      	movs	r5, r0
 800bdd8:	3901      	subs	r1, #1
 800bdda:	6913      	ldr	r3, [r2, #16]
 800bddc:	1149      	asrs	r1, r1, #5
 800bdde:	3101      	adds	r1, #1
 800bde0:	0089      	lsls	r1, r1, #2
 800bde2:	3414      	adds	r4, #20
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	1841      	adds	r1, r0, r1
 800bde8:	18e3      	adds	r3, r4, r3
 800bdea:	42a3      	cmp	r3, r4
 800bdec:	d80d      	bhi.n	800be0a <__copybits+0x38>
 800bdee:	0014      	movs	r4, r2
 800bdf0:	3411      	adds	r4, #17
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	429c      	cmp	r4, r3
 800bdf6:	d803      	bhi.n	800be00 <__copybits+0x2e>
 800bdf8:	1a9b      	subs	r3, r3, r2
 800bdfa:	3b11      	subs	r3, #17
 800bdfc:	089b      	lsrs	r3, r3, #2
 800bdfe:	009d      	lsls	r5, r3, #2
 800be00:	2300      	movs	r3, #0
 800be02:	1940      	adds	r0, r0, r5
 800be04:	4281      	cmp	r1, r0
 800be06:	d803      	bhi.n	800be10 <__copybits+0x3e>
 800be08:	bd70      	pop	{r4, r5, r6, pc}
 800be0a:	cc40      	ldmia	r4!, {r6}
 800be0c:	c540      	stmia	r5!, {r6}
 800be0e:	e7ec      	b.n	800bdea <__copybits+0x18>
 800be10:	c008      	stmia	r0!, {r3}
 800be12:	e7f7      	b.n	800be04 <__copybits+0x32>

0800be14 <__any_on>:
 800be14:	0002      	movs	r2, r0
 800be16:	6900      	ldr	r0, [r0, #16]
 800be18:	b510      	push	{r4, lr}
 800be1a:	3214      	adds	r2, #20
 800be1c:	114b      	asrs	r3, r1, #5
 800be1e:	4298      	cmp	r0, r3
 800be20:	db13      	blt.n	800be4a <__any_on+0x36>
 800be22:	dd0c      	ble.n	800be3e <__any_on+0x2a>
 800be24:	241f      	movs	r4, #31
 800be26:	0008      	movs	r0, r1
 800be28:	4020      	ands	r0, r4
 800be2a:	4221      	tst	r1, r4
 800be2c:	d007      	beq.n	800be3e <__any_on+0x2a>
 800be2e:	0099      	lsls	r1, r3, #2
 800be30:	588c      	ldr	r4, [r1, r2]
 800be32:	0021      	movs	r1, r4
 800be34:	40c1      	lsrs	r1, r0
 800be36:	4081      	lsls	r1, r0
 800be38:	2001      	movs	r0, #1
 800be3a:	428c      	cmp	r4, r1
 800be3c:	d104      	bne.n	800be48 <__any_on+0x34>
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	18d3      	adds	r3, r2, r3
 800be42:	4293      	cmp	r3, r2
 800be44:	d803      	bhi.n	800be4e <__any_on+0x3a>
 800be46:	2000      	movs	r0, #0
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	0003      	movs	r3, r0
 800be4c:	e7f7      	b.n	800be3e <__any_on+0x2a>
 800be4e:	3b04      	subs	r3, #4
 800be50:	6819      	ldr	r1, [r3, #0]
 800be52:	2900      	cmp	r1, #0
 800be54:	d0f5      	beq.n	800be42 <__any_on+0x2e>
 800be56:	2001      	movs	r0, #1
 800be58:	e7f6      	b.n	800be48 <__any_on+0x34>

0800be5a <_malloc_usable_size_r>:
 800be5a:	1f0b      	subs	r3, r1, #4
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	1f18      	subs	r0, r3, #4
 800be60:	2b00      	cmp	r3, #0
 800be62:	da01      	bge.n	800be68 <_malloc_usable_size_r+0xe>
 800be64:	580b      	ldr	r3, [r1, r0]
 800be66:	18c0      	adds	r0, r0, r3
 800be68:	4770      	bx	lr

0800be6a <__ascii_wctomb>:
 800be6a:	0003      	movs	r3, r0
 800be6c:	1e08      	subs	r0, r1, #0
 800be6e:	d005      	beq.n	800be7c <__ascii_wctomb+0x12>
 800be70:	2aff      	cmp	r2, #255	; 0xff
 800be72:	d904      	bls.n	800be7e <__ascii_wctomb+0x14>
 800be74:	228a      	movs	r2, #138	; 0x8a
 800be76:	2001      	movs	r0, #1
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	4240      	negs	r0, r0
 800be7c:	4770      	bx	lr
 800be7e:	2001      	movs	r0, #1
 800be80:	700a      	strb	r2, [r1, #0]
 800be82:	e7fb      	b.n	800be7c <__ascii_wctomb+0x12>

0800be84 <_printf_common>:
 800be84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be86:	0016      	movs	r6, r2
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	688a      	ldr	r2, [r1, #8]
 800be8c:	690b      	ldr	r3, [r1, #16]
 800be8e:	000c      	movs	r4, r1
 800be90:	9000      	str	r0, [sp, #0]
 800be92:	4293      	cmp	r3, r2
 800be94:	da00      	bge.n	800be98 <_printf_common+0x14>
 800be96:	0013      	movs	r3, r2
 800be98:	0022      	movs	r2, r4
 800be9a:	6033      	str	r3, [r6, #0]
 800be9c:	3243      	adds	r2, #67	; 0x43
 800be9e:	7812      	ldrb	r2, [r2, #0]
 800bea0:	2a00      	cmp	r2, #0
 800bea2:	d001      	beq.n	800bea8 <_printf_common+0x24>
 800bea4:	3301      	adds	r3, #1
 800bea6:	6033      	str	r3, [r6, #0]
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	069b      	lsls	r3, r3, #26
 800beac:	d502      	bpl.n	800beb4 <_printf_common+0x30>
 800beae:	6833      	ldr	r3, [r6, #0]
 800beb0:	3302      	adds	r3, #2
 800beb2:	6033      	str	r3, [r6, #0]
 800beb4:	6822      	ldr	r2, [r4, #0]
 800beb6:	2306      	movs	r3, #6
 800beb8:	0015      	movs	r5, r2
 800beba:	401d      	ands	r5, r3
 800bebc:	421a      	tst	r2, r3
 800bebe:	d027      	beq.n	800bf10 <_printf_common+0x8c>
 800bec0:	0023      	movs	r3, r4
 800bec2:	3343      	adds	r3, #67	; 0x43
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	1e5a      	subs	r2, r3, #1
 800bec8:	4193      	sbcs	r3, r2
 800beca:	6822      	ldr	r2, [r4, #0]
 800becc:	0692      	lsls	r2, r2, #26
 800bece:	d430      	bmi.n	800bf32 <_printf_common+0xae>
 800bed0:	0022      	movs	r2, r4
 800bed2:	9901      	ldr	r1, [sp, #4]
 800bed4:	9800      	ldr	r0, [sp, #0]
 800bed6:	9d08      	ldr	r5, [sp, #32]
 800bed8:	3243      	adds	r2, #67	; 0x43
 800beda:	47a8      	blx	r5
 800bedc:	3001      	adds	r0, #1
 800bede:	d025      	beq.n	800bf2c <_printf_common+0xa8>
 800bee0:	2206      	movs	r2, #6
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	2500      	movs	r5, #0
 800bee6:	4013      	ands	r3, r2
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d105      	bne.n	800bef8 <_printf_common+0x74>
 800beec:	6833      	ldr	r3, [r6, #0]
 800beee:	68e5      	ldr	r5, [r4, #12]
 800bef0:	1aed      	subs	r5, r5, r3
 800bef2:	43eb      	mvns	r3, r5
 800bef4:	17db      	asrs	r3, r3, #31
 800bef6:	401d      	ands	r5, r3
 800bef8:	68a3      	ldr	r3, [r4, #8]
 800befa:	6922      	ldr	r2, [r4, #16]
 800befc:	4293      	cmp	r3, r2
 800befe:	dd01      	ble.n	800bf04 <_printf_common+0x80>
 800bf00:	1a9b      	subs	r3, r3, r2
 800bf02:	18ed      	adds	r5, r5, r3
 800bf04:	2600      	movs	r6, #0
 800bf06:	42b5      	cmp	r5, r6
 800bf08:	d120      	bne.n	800bf4c <_printf_common+0xc8>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e010      	b.n	800bf30 <_printf_common+0xac>
 800bf0e:	3501      	adds	r5, #1
 800bf10:	68e3      	ldr	r3, [r4, #12]
 800bf12:	6832      	ldr	r2, [r6, #0]
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	42ab      	cmp	r3, r5
 800bf18:	ddd2      	ble.n	800bec0 <_printf_common+0x3c>
 800bf1a:	0022      	movs	r2, r4
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	9901      	ldr	r1, [sp, #4]
 800bf20:	9800      	ldr	r0, [sp, #0]
 800bf22:	9f08      	ldr	r7, [sp, #32]
 800bf24:	3219      	adds	r2, #25
 800bf26:	47b8      	blx	r7
 800bf28:	3001      	adds	r0, #1
 800bf2a:	d1f0      	bne.n	800bf0e <_printf_common+0x8a>
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	4240      	negs	r0, r0
 800bf30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf32:	2030      	movs	r0, #48	; 0x30
 800bf34:	18e1      	adds	r1, r4, r3
 800bf36:	3143      	adds	r1, #67	; 0x43
 800bf38:	7008      	strb	r0, [r1, #0]
 800bf3a:	0021      	movs	r1, r4
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	3145      	adds	r1, #69	; 0x45
 800bf40:	7809      	ldrb	r1, [r1, #0]
 800bf42:	18a2      	adds	r2, r4, r2
 800bf44:	3243      	adds	r2, #67	; 0x43
 800bf46:	3302      	adds	r3, #2
 800bf48:	7011      	strb	r1, [r2, #0]
 800bf4a:	e7c1      	b.n	800bed0 <_printf_common+0x4c>
 800bf4c:	0022      	movs	r2, r4
 800bf4e:	2301      	movs	r3, #1
 800bf50:	9901      	ldr	r1, [sp, #4]
 800bf52:	9800      	ldr	r0, [sp, #0]
 800bf54:	9f08      	ldr	r7, [sp, #32]
 800bf56:	321a      	adds	r2, #26
 800bf58:	47b8      	blx	r7
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	d0e6      	beq.n	800bf2c <_printf_common+0xa8>
 800bf5e:	3601      	adds	r6, #1
 800bf60:	e7d1      	b.n	800bf06 <_printf_common+0x82>
	...

0800bf64 <_printf_i>:
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf66:	b08b      	sub	sp, #44	; 0x2c
 800bf68:	9206      	str	r2, [sp, #24]
 800bf6a:	000a      	movs	r2, r1
 800bf6c:	3243      	adds	r2, #67	; 0x43
 800bf6e:	9307      	str	r3, [sp, #28]
 800bf70:	9005      	str	r0, [sp, #20]
 800bf72:	9204      	str	r2, [sp, #16]
 800bf74:	7e0a      	ldrb	r2, [r1, #24]
 800bf76:	000c      	movs	r4, r1
 800bf78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf7a:	2a78      	cmp	r2, #120	; 0x78
 800bf7c:	d809      	bhi.n	800bf92 <_printf_i+0x2e>
 800bf7e:	2a62      	cmp	r2, #98	; 0x62
 800bf80:	d80b      	bhi.n	800bf9a <_printf_i+0x36>
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d100      	bne.n	800bf88 <_printf_i+0x24>
 800bf86:	e0be      	b.n	800c106 <_printf_i+0x1a2>
 800bf88:	497c      	ldr	r1, [pc, #496]	; (800c17c <_printf_i+0x218>)
 800bf8a:	9103      	str	r1, [sp, #12]
 800bf8c:	2a58      	cmp	r2, #88	; 0x58
 800bf8e:	d100      	bne.n	800bf92 <_printf_i+0x2e>
 800bf90:	e093      	b.n	800c0ba <_printf_i+0x156>
 800bf92:	0026      	movs	r6, r4
 800bf94:	3642      	adds	r6, #66	; 0x42
 800bf96:	7032      	strb	r2, [r6, #0]
 800bf98:	e022      	b.n	800bfe0 <_printf_i+0x7c>
 800bf9a:	0010      	movs	r0, r2
 800bf9c:	3863      	subs	r0, #99	; 0x63
 800bf9e:	2815      	cmp	r0, #21
 800bfa0:	d8f7      	bhi.n	800bf92 <_printf_i+0x2e>
 800bfa2:	f7f4 f8cd 	bl	8000140 <__gnu_thumb1_case_shi>
 800bfa6:	0016      	.short	0x0016
 800bfa8:	fff6001f 	.word	0xfff6001f
 800bfac:	fff6fff6 	.word	0xfff6fff6
 800bfb0:	001ffff6 	.word	0x001ffff6
 800bfb4:	fff6fff6 	.word	0xfff6fff6
 800bfb8:	fff6fff6 	.word	0xfff6fff6
 800bfbc:	003600a3 	.word	0x003600a3
 800bfc0:	fff60083 	.word	0xfff60083
 800bfc4:	00b4fff6 	.word	0x00b4fff6
 800bfc8:	0036fff6 	.word	0x0036fff6
 800bfcc:	fff6fff6 	.word	0xfff6fff6
 800bfd0:	0087      	.short	0x0087
 800bfd2:	0026      	movs	r6, r4
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	3642      	adds	r6, #66	; 0x42
 800bfd8:	1d11      	adds	r1, r2, #4
 800bfda:	6019      	str	r1, [r3, #0]
 800bfdc:	6813      	ldr	r3, [r2, #0]
 800bfde:	7033      	strb	r3, [r6, #0]
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e0a2      	b.n	800c12a <_printf_i+0x1c6>
 800bfe4:	6818      	ldr	r0, [r3, #0]
 800bfe6:	6809      	ldr	r1, [r1, #0]
 800bfe8:	1d02      	adds	r2, r0, #4
 800bfea:	060d      	lsls	r5, r1, #24
 800bfec:	d50b      	bpl.n	800c006 <_printf_i+0xa2>
 800bfee:	6805      	ldr	r5, [r0, #0]
 800bff0:	601a      	str	r2, [r3, #0]
 800bff2:	2d00      	cmp	r5, #0
 800bff4:	da03      	bge.n	800bffe <_printf_i+0x9a>
 800bff6:	232d      	movs	r3, #45	; 0x2d
 800bff8:	9a04      	ldr	r2, [sp, #16]
 800bffa:	426d      	negs	r5, r5
 800bffc:	7013      	strb	r3, [r2, #0]
 800bffe:	4b5f      	ldr	r3, [pc, #380]	; (800c17c <_printf_i+0x218>)
 800c000:	270a      	movs	r7, #10
 800c002:	9303      	str	r3, [sp, #12]
 800c004:	e01b      	b.n	800c03e <_printf_i+0xda>
 800c006:	6805      	ldr	r5, [r0, #0]
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	0649      	lsls	r1, r1, #25
 800c00c:	d5f1      	bpl.n	800bff2 <_printf_i+0x8e>
 800c00e:	b22d      	sxth	r5, r5
 800c010:	e7ef      	b.n	800bff2 <_printf_i+0x8e>
 800c012:	680d      	ldr	r5, [r1, #0]
 800c014:	6819      	ldr	r1, [r3, #0]
 800c016:	1d08      	adds	r0, r1, #4
 800c018:	6018      	str	r0, [r3, #0]
 800c01a:	062e      	lsls	r6, r5, #24
 800c01c:	d501      	bpl.n	800c022 <_printf_i+0xbe>
 800c01e:	680d      	ldr	r5, [r1, #0]
 800c020:	e003      	b.n	800c02a <_printf_i+0xc6>
 800c022:	066d      	lsls	r5, r5, #25
 800c024:	d5fb      	bpl.n	800c01e <_printf_i+0xba>
 800c026:	680d      	ldr	r5, [r1, #0]
 800c028:	b2ad      	uxth	r5, r5
 800c02a:	4b54      	ldr	r3, [pc, #336]	; (800c17c <_printf_i+0x218>)
 800c02c:	2708      	movs	r7, #8
 800c02e:	9303      	str	r3, [sp, #12]
 800c030:	2a6f      	cmp	r2, #111	; 0x6f
 800c032:	d000      	beq.n	800c036 <_printf_i+0xd2>
 800c034:	3702      	adds	r7, #2
 800c036:	0023      	movs	r3, r4
 800c038:	2200      	movs	r2, #0
 800c03a:	3343      	adds	r3, #67	; 0x43
 800c03c:	701a      	strb	r2, [r3, #0]
 800c03e:	6863      	ldr	r3, [r4, #4]
 800c040:	60a3      	str	r3, [r4, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	db03      	blt.n	800c04e <_printf_i+0xea>
 800c046:	2104      	movs	r1, #4
 800c048:	6822      	ldr	r2, [r4, #0]
 800c04a:	438a      	bics	r2, r1
 800c04c:	6022      	str	r2, [r4, #0]
 800c04e:	2d00      	cmp	r5, #0
 800c050:	d102      	bne.n	800c058 <_printf_i+0xf4>
 800c052:	9e04      	ldr	r6, [sp, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00c      	beq.n	800c072 <_printf_i+0x10e>
 800c058:	9e04      	ldr	r6, [sp, #16]
 800c05a:	0028      	movs	r0, r5
 800c05c:	0039      	movs	r1, r7
 800c05e:	f7f4 f8ff 	bl	8000260 <__aeabi_uidivmod>
 800c062:	9b03      	ldr	r3, [sp, #12]
 800c064:	3e01      	subs	r6, #1
 800c066:	5c5b      	ldrb	r3, [r3, r1]
 800c068:	7033      	strb	r3, [r6, #0]
 800c06a:	002b      	movs	r3, r5
 800c06c:	0005      	movs	r5, r0
 800c06e:	429f      	cmp	r7, r3
 800c070:	d9f3      	bls.n	800c05a <_printf_i+0xf6>
 800c072:	2f08      	cmp	r7, #8
 800c074:	d109      	bne.n	800c08a <_printf_i+0x126>
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	07db      	lsls	r3, r3, #31
 800c07a:	d506      	bpl.n	800c08a <_printf_i+0x126>
 800c07c:	6862      	ldr	r2, [r4, #4]
 800c07e:	6923      	ldr	r3, [r4, #16]
 800c080:	429a      	cmp	r2, r3
 800c082:	dc02      	bgt.n	800c08a <_printf_i+0x126>
 800c084:	2330      	movs	r3, #48	; 0x30
 800c086:	3e01      	subs	r6, #1
 800c088:	7033      	strb	r3, [r6, #0]
 800c08a:	9b04      	ldr	r3, [sp, #16]
 800c08c:	1b9b      	subs	r3, r3, r6
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	9b07      	ldr	r3, [sp, #28]
 800c092:	0021      	movs	r1, r4
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	9805      	ldr	r0, [sp, #20]
 800c098:	9b06      	ldr	r3, [sp, #24]
 800c09a:	aa09      	add	r2, sp, #36	; 0x24
 800c09c:	f7ff fef2 	bl	800be84 <_printf_common>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d147      	bne.n	800c134 <_printf_i+0x1d0>
 800c0a4:	2001      	movs	r0, #1
 800c0a6:	4240      	negs	r0, r0
 800c0a8:	b00b      	add	sp, #44	; 0x2c
 800c0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	6809      	ldr	r1, [r1, #0]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	6022      	str	r2, [r4, #0]
 800c0b4:	2278      	movs	r2, #120	; 0x78
 800c0b6:	4932      	ldr	r1, [pc, #200]	; (800c180 <_printf_i+0x21c>)
 800c0b8:	9103      	str	r1, [sp, #12]
 800c0ba:	0021      	movs	r1, r4
 800c0bc:	3145      	adds	r1, #69	; 0x45
 800c0be:	700a      	strb	r2, [r1, #0]
 800c0c0:	6819      	ldr	r1, [r3, #0]
 800c0c2:	6822      	ldr	r2, [r4, #0]
 800c0c4:	c920      	ldmia	r1!, {r5}
 800c0c6:	0610      	lsls	r0, r2, #24
 800c0c8:	d402      	bmi.n	800c0d0 <_printf_i+0x16c>
 800c0ca:	0650      	lsls	r0, r2, #25
 800c0cc:	d500      	bpl.n	800c0d0 <_printf_i+0x16c>
 800c0ce:	b2ad      	uxth	r5, r5
 800c0d0:	6019      	str	r1, [r3, #0]
 800c0d2:	07d3      	lsls	r3, r2, #31
 800c0d4:	d502      	bpl.n	800c0dc <_printf_i+0x178>
 800c0d6:	2320      	movs	r3, #32
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	6023      	str	r3, [r4, #0]
 800c0dc:	2710      	movs	r7, #16
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	d1a9      	bne.n	800c036 <_printf_i+0xd2>
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	4393      	bics	r3, r2
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	e7a4      	b.n	800c036 <_printf_i+0xd2>
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	680d      	ldr	r5, [r1, #0]
 800c0f0:	1d10      	adds	r0, r2, #4
 800c0f2:	6949      	ldr	r1, [r1, #20]
 800c0f4:	6018      	str	r0, [r3, #0]
 800c0f6:	6813      	ldr	r3, [r2, #0]
 800c0f8:	062e      	lsls	r6, r5, #24
 800c0fa:	d501      	bpl.n	800c100 <_printf_i+0x19c>
 800c0fc:	6019      	str	r1, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <_printf_i+0x1a2>
 800c100:	066d      	lsls	r5, r5, #25
 800c102:	d5fb      	bpl.n	800c0fc <_printf_i+0x198>
 800c104:	8019      	strh	r1, [r3, #0]
 800c106:	2300      	movs	r3, #0
 800c108:	9e04      	ldr	r6, [sp, #16]
 800c10a:	6123      	str	r3, [r4, #16]
 800c10c:	e7c0      	b.n	800c090 <_printf_i+0x12c>
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	1d11      	adds	r1, r2, #4
 800c112:	6019      	str	r1, [r3, #0]
 800c114:	6816      	ldr	r6, [r2, #0]
 800c116:	2100      	movs	r1, #0
 800c118:	0030      	movs	r0, r6
 800c11a:	6862      	ldr	r2, [r4, #4]
 800c11c:	f000 f8e7 	bl	800c2ee <memchr>
 800c120:	2800      	cmp	r0, #0
 800c122:	d001      	beq.n	800c128 <_printf_i+0x1c4>
 800c124:	1b80      	subs	r0, r0, r6
 800c126:	6060      	str	r0, [r4, #4]
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	6123      	str	r3, [r4, #16]
 800c12c:	2300      	movs	r3, #0
 800c12e:	9a04      	ldr	r2, [sp, #16]
 800c130:	7013      	strb	r3, [r2, #0]
 800c132:	e7ad      	b.n	800c090 <_printf_i+0x12c>
 800c134:	0032      	movs	r2, r6
 800c136:	6923      	ldr	r3, [r4, #16]
 800c138:	9906      	ldr	r1, [sp, #24]
 800c13a:	9805      	ldr	r0, [sp, #20]
 800c13c:	9d07      	ldr	r5, [sp, #28]
 800c13e:	47a8      	blx	r5
 800c140:	3001      	adds	r0, #1
 800c142:	d0af      	beq.n	800c0a4 <_printf_i+0x140>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	079b      	lsls	r3, r3, #30
 800c148:	d415      	bmi.n	800c176 <_printf_i+0x212>
 800c14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14c:	68e0      	ldr	r0, [r4, #12]
 800c14e:	4298      	cmp	r0, r3
 800c150:	daaa      	bge.n	800c0a8 <_printf_i+0x144>
 800c152:	0018      	movs	r0, r3
 800c154:	e7a8      	b.n	800c0a8 <_printf_i+0x144>
 800c156:	0022      	movs	r2, r4
 800c158:	2301      	movs	r3, #1
 800c15a:	9906      	ldr	r1, [sp, #24]
 800c15c:	9805      	ldr	r0, [sp, #20]
 800c15e:	9e07      	ldr	r6, [sp, #28]
 800c160:	3219      	adds	r2, #25
 800c162:	47b0      	blx	r6
 800c164:	3001      	adds	r0, #1
 800c166:	d09d      	beq.n	800c0a4 <_printf_i+0x140>
 800c168:	3501      	adds	r5, #1
 800c16a:	68e3      	ldr	r3, [r4, #12]
 800c16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c16e:	1a9b      	subs	r3, r3, r2
 800c170:	42ab      	cmp	r3, r5
 800c172:	dcf0      	bgt.n	800c156 <_printf_i+0x1f2>
 800c174:	e7e9      	b.n	800c14a <_printf_i+0x1e6>
 800c176:	2500      	movs	r5, #0
 800c178:	e7f7      	b.n	800c16a <_printf_i+0x206>
 800c17a:	46c0      	nop			; (mov r8, r8)
 800c17c:	0800cf8c 	.word	0x0800cf8c
 800c180:	0800cf9d 	.word	0x0800cf9d

0800c184 <__sflush_r>:
 800c184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c186:	898b      	ldrh	r3, [r1, #12]
 800c188:	0005      	movs	r5, r0
 800c18a:	000c      	movs	r4, r1
 800c18c:	071a      	lsls	r2, r3, #28
 800c18e:	d45c      	bmi.n	800c24a <__sflush_r+0xc6>
 800c190:	684a      	ldr	r2, [r1, #4]
 800c192:	2a00      	cmp	r2, #0
 800c194:	dc04      	bgt.n	800c1a0 <__sflush_r+0x1c>
 800c196:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c198:	2a00      	cmp	r2, #0
 800c19a:	dc01      	bgt.n	800c1a0 <__sflush_r+0x1c>
 800c19c:	2000      	movs	r0, #0
 800c19e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1a2:	2f00      	cmp	r7, #0
 800c1a4:	d0fa      	beq.n	800c19c <__sflush_r+0x18>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2080      	movs	r0, #128	; 0x80
 800c1aa:	682e      	ldr	r6, [r5, #0]
 800c1ac:	602a      	str	r2, [r5, #0]
 800c1ae:	001a      	movs	r2, r3
 800c1b0:	0140      	lsls	r0, r0, #5
 800c1b2:	6a21      	ldr	r1, [r4, #32]
 800c1b4:	4002      	ands	r2, r0
 800c1b6:	4203      	tst	r3, r0
 800c1b8:	d034      	beq.n	800c224 <__sflush_r+0xa0>
 800c1ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	075b      	lsls	r3, r3, #29
 800c1c0:	d506      	bpl.n	800c1d0 <__sflush_r+0x4c>
 800c1c2:	6863      	ldr	r3, [r4, #4]
 800c1c4:	1ac0      	subs	r0, r0, r3
 800c1c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <__sflush_r+0x4c>
 800c1cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1ce:	1ac0      	subs	r0, r0, r3
 800c1d0:	0002      	movs	r2, r0
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	0028      	movs	r0, r5
 800c1d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1d8:	6a21      	ldr	r1, [r4, #32]
 800c1da:	47b8      	blx	r7
 800c1dc:	89a2      	ldrh	r2, [r4, #12]
 800c1de:	1c43      	adds	r3, r0, #1
 800c1e0:	d106      	bne.n	800c1f0 <__sflush_r+0x6c>
 800c1e2:	6829      	ldr	r1, [r5, #0]
 800c1e4:	291d      	cmp	r1, #29
 800c1e6:	d82c      	bhi.n	800c242 <__sflush_r+0xbe>
 800c1e8:	4b2a      	ldr	r3, [pc, #168]	; (800c294 <__sflush_r+0x110>)
 800c1ea:	410b      	asrs	r3, r1
 800c1ec:	07db      	lsls	r3, r3, #31
 800c1ee:	d428      	bmi.n	800c242 <__sflush_r+0xbe>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	6063      	str	r3, [r4, #4]
 800c1f4:	6923      	ldr	r3, [r4, #16]
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	04d2      	lsls	r2, r2, #19
 800c1fa:	d505      	bpl.n	800c208 <__sflush_r+0x84>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <__sflush_r+0x82>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d100      	bne.n	800c208 <__sflush_r+0x84>
 800c206:	6560      	str	r0, [r4, #84]	; 0x54
 800c208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c20a:	602e      	str	r6, [r5, #0]
 800c20c:	2900      	cmp	r1, #0
 800c20e:	d0c5      	beq.n	800c19c <__sflush_r+0x18>
 800c210:	0023      	movs	r3, r4
 800c212:	3344      	adds	r3, #68	; 0x44
 800c214:	4299      	cmp	r1, r3
 800c216:	d002      	beq.n	800c21e <__sflush_r+0x9a>
 800c218:	0028      	movs	r0, r5
 800c21a:	f7fe fdab 	bl	800ad74 <_free_r>
 800c21e:	2000      	movs	r0, #0
 800c220:	6360      	str	r0, [r4, #52]	; 0x34
 800c222:	e7bc      	b.n	800c19e <__sflush_r+0x1a>
 800c224:	2301      	movs	r3, #1
 800c226:	0028      	movs	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	d1c6      	bne.n	800c1bc <__sflush_r+0x38>
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d0c3      	beq.n	800c1bc <__sflush_r+0x38>
 800c234:	2b1d      	cmp	r3, #29
 800c236:	d001      	beq.n	800c23c <__sflush_r+0xb8>
 800c238:	2b16      	cmp	r3, #22
 800c23a:	d101      	bne.n	800c240 <__sflush_r+0xbc>
 800c23c:	602e      	str	r6, [r5, #0]
 800c23e:	e7ad      	b.n	800c19c <__sflush_r+0x18>
 800c240:	89a2      	ldrh	r2, [r4, #12]
 800c242:	2340      	movs	r3, #64	; 0x40
 800c244:	4313      	orrs	r3, r2
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	e7a9      	b.n	800c19e <__sflush_r+0x1a>
 800c24a:	690e      	ldr	r6, [r1, #16]
 800c24c:	2e00      	cmp	r6, #0
 800c24e:	d0a5      	beq.n	800c19c <__sflush_r+0x18>
 800c250:	680f      	ldr	r7, [r1, #0]
 800c252:	600e      	str	r6, [r1, #0]
 800c254:	1bba      	subs	r2, r7, r6
 800c256:	9201      	str	r2, [sp, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	079b      	lsls	r3, r3, #30
 800c25c:	d100      	bne.n	800c260 <__sflush_r+0xdc>
 800c25e:	694a      	ldr	r2, [r1, #20]
 800c260:	60a2      	str	r2, [r4, #8]
 800c262:	9b01      	ldr	r3, [sp, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd99      	ble.n	800c19c <__sflush_r+0x18>
 800c268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c26a:	0032      	movs	r2, r6
 800c26c:	001f      	movs	r7, r3
 800c26e:	0028      	movs	r0, r5
 800c270:	9b01      	ldr	r3, [sp, #4]
 800c272:	6a21      	ldr	r1, [r4, #32]
 800c274:	47b8      	blx	r7
 800c276:	2800      	cmp	r0, #0
 800c278:	dc06      	bgt.n	800c288 <__sflush_r+0x104>
 800c27a:	2340      	movs	r3, #64	; 0x40
 800c27c:	2001      	movs	r0, #1
 800c27e:	89a2      	ldrh	r2, [r4, #12]
 800c280:	4240      	negs	r0, r0
 800c282:	4313      	orrs	r3, r2
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	e78a      	b.n	800c19e <__sflush_r+0x1a>
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	1836      	adds	r6, r6, r0
 800c28c:	1a1b      	subs	r3, r3, r0
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	e7e7      	b.n	800c262 <__sflush_r+0xde>
 800c292:	46c0      	nop			; (mov r8, r8)
 800c294:	dfbffffe 	.word	0xdfbffffe

0800c298 <_fflush_r>:
 800c298:	690b      	ldr	r3, [r1, #16]
 800c29a:	b570      	push	{r4, r5, r6, lr}
 800c29c:	0005      	movs	r5, r0
 800c29e:	000c      	movs	r4, r1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <_fflush_r+0x12>
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	0028      	movs	r0, r5
 800c2a8:	bd70      	pop	{r4, r5, r6, pc}
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d004      	beq.n	800c2b8 <_fflush_r+0x20>
 800c2ae:	6a03      	ldr	r3, [r0, #32]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <_fflush_r+0x20>
 800c2b4:	f7fe fc12 	bl	800aadc <__sinit>
 800c2b8:	220c      	movs	r2, #12
 800c2ba:	5ea3      	ldrsh	r3, [r4, r2]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d0f1      	beq.n	800c2a4 <_fflush_r+0xc>
 800c2c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2c2:	07d2      	lsls	r2, r2, #31
 800c2c4:	d404      	bmi.n	800c2d0 <_fflush_r+0x38>
 800c2c6:	059b      	lsls	r3, r3, #22
 800c2c8:	d402      	bmi.n	800c2d0 <_fflush_r+0x38>
 800c2ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2cc:	f7fe fd39 	bl	800ad42 <__retarget_lock_acquire_recursive>
 800c2d0:	0028      	movs	r0, r5
 800c2d2:	0021      	movs	r1, r4
 800c2d4:	f7ff ff56 	bl	800c184 <__sflush_r>
 800c2d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2da:	0005      	movs	r5, r0
 800c2dc:	07db      	lsls	r3, r3, #31
 800c2de:	d4e2      	bmi.n	800c2a6 <_fflush_r+0xe>
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	059b      	lsls	r3, r3, #22
 800c2e4:	d4df      	bmi.n	800c2a6 <_fflush_r+0xe>
 800c2e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e8:	f7fe fd2c 	bl	800ad44 <__retarget_lock_release_recursive>
 800c2ec:	e7db      	b.n	800c2a6 <_fflush_r+0xe>

0800c2ee <memchr>:
 800c2ee:	b2c9      	uxtb	r1, r1
 800c2f0:	1882      	adds	r2, r0, r2
 800c2f2:	4290      	cmp	r0, r2
 800c2f4:	d101      	bne.n	800c2fa <memchr+0xc>
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	4770      	bx	lr
 800c2fa:	7803      	ldrb	r3, [r0, #0]
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	d0fb      	beq.n	800c2f8 <memchr+0xa>
 800c300:	3001      	adds	r0, #1
 800c302:	e7f6      	b.n	800c2f2 <memchr+0x4>

0800c304 <__assert_func>:
 800c304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c306:	0014      	movs	r4, r2
 800c308:	001a      	movs	r2, r3
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <__assert_func+0x2c>)
 800c30c:	0005      	movs	r5, r0
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	000e      	movs	r6, r1
 800c312:	68d8      	ldr	r0, [r3, #12]
 800c314:	4b07      	ldr	r3, [pc, #28]	; (800c334 <__assert_func+0x30>)
 800c316:	2c00      	cmp	r4, #0
 800c318:	d101      	bne.n	800c31e <__assert_func+0x1a>
 800c31a:	4b07      	ldr	r3, [pc, #28]	; (800c338 <__assert_func+0x34>)
 800c31c:	001c      	movs	r4, r3
 800c31e:	4907      	ldr	r1, [pc, #28]	; (800c33c <__assert_func+0x38>)
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	9402      	str	r4, [sp, #8]
 800c324:	002b      	movs	r3, r5
 800c326:	9600      	str	r6, [sp, #0]
 800c328:	f000 f838 	bl	800c39c <fiprintf>
 800c32c:	f000 f846 	bl	800c3bc <abort>
 800c330:	200001e4 	.word	0x200001e4
 800c334:	0800cfae 	.word	0x0800cfae
 800c338:	0800cfe9 	.word	0x0800cfe9
 800c33c:	0800cfbb 	.word	0x0800cfbb

0800c340 <_calloc_r>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	0c0b      	lsrs	r3, r1, #16
 800c344:	0c15      	lsrs	r5, r2, #16
 800c346:	2b00      	cmp	r3, #0
 800c348:	d11e      	bne.n	800c388 <_calloc_r+0x48>
 800c34a:	2d00      	cmp	r5, #0
 800c34c:	d10c      	bne.n	800c368 <_calloc_r+0x28>
 800c34e:	b289      	uxth	r1, r1
 800c350:	b294      	uxth	r4, r2
 800c352:	434c      	muls	r4, r1
 800c354:	0021      	movs	r1, r4
 800c356:	f7fd fba3 	bl	8009aa0 <_malloc_r>
 800c35a:	1e05      	subs	r5, r0, #0
 800c35c:	d01b      	beq.n	800c396 <_calloc_r+0x56>
 800c35e:	0022      	movs	r2, r4
 800c360:	2100      	movs	r1, #0
 800c362:	f7fe fc3b 	bl	800abdc <memset>
 800c366:	e016      	b.n	800c396 <_calloc_r+0x56>
 800c368:	1c2b      	adds	r3, r5, #0
 800c36a:	1c0c      	adds	r4, r1, #0
 800c36c:	b289      	uxth	r1, r1
 800c36e:	b292      	uxth	r2, r2
 800c370:	434a      	muls	r2, r1
 800c372:	b2a1      	uxth	r1, r4
 800c374:	b29c      	uxth	r4, r3
 800c376:	434c      	muls	r4, r1
 800c378:	0c13      	lsrs	r3, r2, #16
 800c37a:	18e4      	adds	r4, r4, r3
 800c37c:	0c23      	lsrs	r3, r4, #16
 800c37e:	d107      	bne.n	800c390 <_calloc_r+0x50>
 800c380:	0424      	lsls	r4, r4, #16
 800c382:	b292      	uxth	r2, r2
 800c384:	4314      	orrs	r4, r2
 800c386:	e7e5      	b.n	800c354 <_calloc_r+0x14>
 800c388:	2d00      	cmp	r5, #0
 800c38a:	d101      	bne.n	800c390 <_calloc_r+0x50>
 800c38c:	1c14      	adds	r4, r2, #0
 800c38e:	e7ed      	b.n	800c36c <_calloc_r+0x2c>
 800c390:	230c      	movs	r3, #12
 800c392:	2500      	movs	r5, #0
 800c394:	6003      	str	r3, [r0, #0]
 800c396:	0028      	movs	r0, r5
 800c398:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c39c <fiprintf>:
 800c39c:	b40e      	push	{r1, r2, r3}
 800c39e:	b517      	push	{r0, r1, r2, r4, lr}
 800c3a0:	4c05      	ldr	r4, [pc, #20]	; (800c3b8 <fiprintf+0x1c>)
 800c3a2:	ab05      	add	r3, sp, #20
 800c3a4:	cb04      	ldmia	r3!, {r2}
 800c3a6:	0001      	movs	r1, r0
 800c3a8:	6820      	ldr	r0, [r4, #0]
 800c3aa:	9301      	str	r3, [sp, #4]
 800c3ac:	f000 f834 	bl	800c418 <_vfiprintf_r>
 800c3b0:	bc1e      	pop	{r1, r2, r3, r4}
 800c3b2:	bc08      	pop	{r3}
 800c3b4:	b003      	add	sp, #12
 800c3b6:	4718      	bx	r3
 800c3b8:	200001e4 	.word	0x200001e4

0800c3bc <abort>:
 800c3bc:	2006      	movs	r0, #6
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	f000 fa16 	bl	800c7f0 <raise>
 800c3c4:	2001      	movs	r0, #1
 800c3c6:	f000 fac5 	bl	800c954 <_exit>

0800c3ca <__sfputc_r>:
 800c3ca:	6893      	ldr	r3, [r2, #8]
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	6093      	str	r3, [r2, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	da04      	bge.n	800c3e0 <__sfputc_r+0x16>
 800c3d6:	6994      	ldr	r4, [r2, #24]
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	db07      	blt.n	800c3ec <__sfputc_r+0x22>
 800c3dc:	290a      	cmp	r1, #10
 800c3de:	d005      	beq.n	800c3ec <__sfputc_r+0x22>
 800c3e0:	6813      	ldr	r3, [r2, #0]
 800c3e2:	1c58      	adds	r0, r3, #1
 800c3e4:	6010      	str	r0, [r2, #0]
 800c3e6:	7019      	strb	r1, [r3, #0]
 800c3e8:	0008      	movs	r0, r1
 800c3ea:	bd10      	pop	{r4, pc}
 800c3ec:	f000 f930 	bl	800c650 <__swbuf_r>
 800c3f0:	0001      	movs	r1, r0
 800c3f2:	e7f9      	b.n	800c3e8 <__sfputc_r+0x1e>

0800c3f4 <__sfputs_r>:
 800c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f6:	0006      	movs	r6, r0
 800c3f8:	000f      	movs	r7, r1
 800c3fa:	0014      	movs	r4, r2
 800c3fc:	18d5      	adds	r5, r2, r3
 800c3fe:	42ac      	cmp	r4, r5
 800c400:	d101      	bne.n	800c406 <__sfputs_r+0x12>
 800c402:	2000      	movs	r0, #0
 800c404:	e007      	b.n	800c416 <__sfputs_r+0x22>
 800c406:	7821      	ldrb	r1, [r4, #0]
 800c408:	003a      	movs	r2, r7
 800c40a:	0030      	movs	r0, r6
 800c40c:	f7ff ffdd 	bl	800c3ca <__sfputc_r>
 800c410:	3401      	adds	r4, #1
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	d1f3      	bne.n	800c3fe <__sfputs_r+0xa>
 800c416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c418 <_vfiprintf_r>:
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41a:	b0a1      	sub	sp, #132	; 0x84
 800c41c:	000f      	movs	r7, r1
 800c41e:	0015      	movs	r5, r2
 800c420:	001e      	movs	r6, r3
 800c422:	9003      	str	r0, [sp, #12]
 800c424:	2800      	cmp	r0, #0
 800c426:	d004      	beq.n	800c432 <_vfiprintf_r+0x1a>
 800c428:	6a03      	ldr	r3, [r0, #32]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <_vfiprintf_r+0x1a>
 800c42e:	f7fe fb55 	bl	800aadc <__sinit>
 800c432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c434:	07db      	lsls	r3, r3, #31
 800c436:	d405      	bmi.n	800c444 <_vfiprintf_r+0x2c>
 800c438:	89bb      	ldrh	r3, [r7, #12]
 800c43a:	059b      	lsls	r3, r3, #22
 800c43c:	d402      	bmi.n	800c444 <_vfiprintf_r+0x2c>
 800c43e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c440:	f7fe fc7f 	bl	800ad42 <__retarget_lock_acquire_recursive>
 800c444:	89bb      	ldrh	r3, [r7, #12]
 800c446:	071b      	lsls	r3, r3, #28
 800c448:	d502      	bpl.n	800c450 <_vfiprintf_r+0x38>
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d113      	bne.n	800c478 <_vfiprintf_r+0x60>
 800c450:	0039      	movs	r1, r7
 800c452:	9803      	ldr	r0, [sp, #12]
 800c454:	f000 f93e 	bl	800c6d4 <__swsetup_r>
 800c458:	2800      	cmp	r0, #0
 800c45a:	d00d      	beq.n	800c478 <_vfiprintf_r+0x60>
 800c45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c45e:	07db      	lsls	r3, r3, #31
 800c460:	d503      	bpl.n	800c46a <_vfiprintf_r+0x52>
 800c462:	2001      	movs	r0, #1
 800c464:	4240      	negs	r0, r0
 800c466:	b021      	add	sp, #132	; 0x84
 800c468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c46a:	89bb      	ldrh	r3, [r7, #12]
 800c46c:	059b      	lsls	r3, r3, #22
 800c46e:	d4f8      	bmi.n	800c462 <_vfiprintf_r+0x4a>
 800c470:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c472:	f7fe fc67 	bl	800ad44 <__retarget_lock_release_recursive>
 800c476:	e7f4      	b.n	800c462 <_vfiprintf_r+0x4a>
 800c478:	2300      	movs	r3, #0
 800c47a:	ac08      	add	r4, sp, #32
 800c47c:	6163      	str	r3, [r4, #20]
 800c47e:	3320      	adds	r3, #32
 800c480:	7663      	strb	r3, [r4, #25]
 800c482:	3310      	adds	r3, #16
 800c484:	76a3      	strb	r3, [r4, #26]
 800c486:	9607      	str	r6, [sp, #28]
 800c488:	002e      	movs	r6, r5
 800c48a:	7833      	ldrb	r3, [r6, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <_vfiprintf_r+0x7c>
 800c490:	2b25      	cmp	r3, #37	; 0x25
 800c492:	d148      	bne.n	800c526 <_vfiprintf_r+0x10e>
 800c494:	1b73      	subs	r3, r6, r5
 800c496:	9305      	str	r3, [sp, #20]
 800c498:	42ae      	cmp	r6, r5
 800c49a:	d00b      	beq.n	800c4b4 <_vfiprintf_r+0x9c>
 800c49c:	002a      	movs	r2, r5
 800c49e:	0039      	movs	r1, r7
 800c4a0:	9803      	ldr	r0, [sp, #12]
 800c4a2:	f7ff ffa7 	bl	800c3f4 <__sfputs_r>
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	d100      	bne.n	800c4ac <_vfiprintf_r+0x94>
 800c4aa:	e0af      	b.n	800c60c <_vfiprintf_r+0x1f4>
 800c4ac:	6963      	ldr	r3, [r4, #20]
 800c4ae:	9a05      	ldr	r2, [sp, #20]
 800c4b0:	189b      	adds	r3, r3, r2
 800c4b2:	6163      	str	r3, [r4, #20]
 800c4b4:	7833      	ldrb	r3, [r6, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d100      	bne.n	800c4bc <_vfiprintf_r+0xa4>
 800c4ba:	e0a7      	b.n	800c60c <_vfiprintf_r+0x1f4>
 800c4bc:	2201      	movs	r2, #1
 800c4be:	2300      	movs	r3, #0
 800c4c0:	4252      	negs	r2, r2
 800c4c2:	6062      	str	r2, [r4, #4]
 800c4c4:	a904      	add	r1, sp, #16
 800c4c6:	3254      	adds	r2, #84	; 0x54
 800c4c8:	1852      	adds	r2, r2, r1
 800c4ca:	1c75      	adds	r5, r6, #1
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	60e3      	str	r3, [r4, #12]
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	7013      	strb	r3, [r2, #0]
 800c4d4:	65a3      	str	r3, [r4, #88]	; 0x58
 800c4d6:	4b59      	ldr	r3, [pc, #356]	; (800c63c <_vfiprintf_r+0x224>)
 800c4d8:	2205      	movs	r2, #5
 800c4da:	0018      	movs	r0, r3
 800c4dc:	7829      	ldrb	r1, [r5, #0]
 800c4de:	9305      	str	r3, [sp, #20]
 800c4e0:	f7ff ff05 	bl	800c2ee <memchr>
 800c4e4:	1c6e      	adds	r6, r5, #1
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d11f      	bne.n	800c52a <_vfiprintf_r+0x112>
 800c4ea:	6822      	ldr	r2, [r4, #0]
 800c4ec:	06d3      	lsls	r3, r2, #27
 800c4ee:	d504      	bpl.n	800c4fa <_vfiprintf_r+0xe2>
 800c4f0:	2353      	movs	r3, #83	; 0x53
 800c4f2:	a904      	add	r1, sp, #16
 800c4f4:	185b      	adds	r3, r3, r1
 800c4f6:	2120      	movs	r1, #32
 800c4f8:	7019      	strb	r1, [r3, #0]
 800c4fa:	0713      	lsls	r3, r2, #28
 800c4fc:	d504      	bpl.n	800c508 <_vfiprintf_r+0xf0>
 800c4fe:	2353      	movs	r3, #83	; 0x53
 800c500:	a904      	add	r1, sp, #16
 800c502:	185b      	adds	r3, r3, r1
 800c504:	212b      	movs	r1, #43	; 0x2b
 800c506:	7019      	strb	r1, [r3, #0]
 800c508:	782b      	ldrb	r3, [r5, #0]
 800c50a:	2b2a      	cmp	r3, #42	; 0x2a
 800c50c:	d016      	beq.n	800c53c <_vfiprintf_r+0x124>
 800c50e:	002e      	movs	r6, r5
 800c510:	2100      	movs	r1, #0
 800c512:	200a      	movs	r0, #10
 800c514:	68e3      	ldr	r3, [r4, #12]
 800c516:	7832      	ldrb	r2, [r6, #0]
 800c518:	1c75      	adds	r5, r6, #1
 800c51a:	3a30      	subs	r2, #48	; 0x30
 800c51c:	2a09      	cmp	r2, #9
 800c51e:	d94e      	bls.n	800c5be <_vfiprintf_r+0x1a6>
 800c520:	2900      	cmp	r1, #0
 800c522:	d111      	bne.n	800c548 <_vfiprintf_r+0x130>
 800c524:	e017      	b.n	800c556 <_vfiprintf_r+0x13e>
 800c526:	3601      	adds	r6, #1
 800c528:	e7af      	b.n	800c48a <_vfiprintf_r+0x72>
 800c52a:	9b05      	ldr	r3, [sp, #20]
 800c52c:	6822      	ldr	r2, [r4, #0]
 800c52e:	1ac0      	subs	r0, r0, r3
 800c530:	2301      	movs	r3, #1
 800c532:	4083      	lsls	r3, r0
 800c534:	4313      	orrs	r3, r2
 800c536:	0035      	movs	r5, r6
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	e7cc      	b.n	800c4d6 <_vfiprintf_r+0xbe>
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	1d19      	adds	r1, r3, #4
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	9107      	str	r1, [sp, #28]
 800c544:	2b00      	cmp	r3, #0
 800c546:	db01      	blt.n	800c54c <_vfiprintf_r+0x134>
 800c548:	930b      	str	r3, [sp, #44]	; 0x2c
 800c54a:	e004      	b.n	800c556 <_vfiprintf_r+0x13e>
 800c54c:	425b      	negs	r3, r3
 800c54e:	60e3      	str	r3, [r4, #12]
 800c550:	2302      	movs	r3, #2
 800c552:	4313      	orrs	r3, r2
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	7833      	ldrb	r3, [r6, #0]
 800c558:	2b2e      	cmp	r3, #46	; 0x2e
 800c55a:	d10a      	bne.n	800c572 <_vfiprintf_r+0x15a>
 800c55c:	7873      	ldrb	r3, [r6, #1]
 800c55e:	2b2a      	cmp	r3, #42	; 0x2a
 800c560:	d135      	bne.n	800c5ce <_vfiprintf_r+0x1b6>
 800c562:	9b07      	ldr	r3, [sp, #28]
 800c564:	3602      	adds	r6, #2
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9207      	str	r2, [sp, #28]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	db2b      	blt.n	800c5c8 <_vfiprintf_r+0x1b0>
 800c570:	9309      	str	r3, [sp, #36]	; 0x24
 800c572:	4d33      	ldr	r5, [pc, #204]	; (800c640 <_vfiprintf_r+0x228>)
 800c574:	2203      	movs	r2, #3
 800c576:	0028      	movs	r0, r5
 800c578:	7831      	ldrb	r1, [r6, #0]
 800c57a:	f7ff feb8 	bl	800c2ee <memchr>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d006      	beq.n	800c590 <_vfiprintf_r+0x178>
 800c582:	2340      	movs	r3, #64	; 0x40
 800c584:	1b40      	subs	r0, r0, r5
 800c586:	4083      	lsls	r3, r0
 800c588:	6822      	ldr	r2, [r4, #0]
 800c58a:	3601      	adds	r6, #1
 800c58c:	4313      	orrs	r3, r2
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	7831      	ldrb	r1, [r6, #0]
 800c592:	2206      	movs	r2, #6
 800c594:	482b      	ldr	r0, [pc, #172]	; (800c644 <_vfiprintf_r+0x22c>)
 800c596:	1c75      	adds	r5, r6, #1
 800c598:	7621      	strb	r1, [r4, #24]
 800c59a:	f7ff fea8 	bl	800c2ee <memchr>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d043      	beq.n	800c62a <_vfiprintf_r+0x212>
 800c5a2:	4b29      	ldr	r3, [pc, #164]	; (800c648 <_vfiprintf_r+0x230>)
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d125      	bne.n	800c5f4 <_vfiprintf_r+0x1dc>
 800c5a8:	2207      	movs	r2, #7
 800c5aa:	9b07      	ldr	r3, [sp, #28]
 800c5ac:	3307      	adds	r3, #7
 800c5ae:	4393      	bics	r3, r2
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	9307      	str	r3, [sp, #28]
 800c5b4:	6963      	ldr	r3, [r4, #20]
 800c5b6:	9a04      	ldr	r2, [sp, #16]
 800c5b8:	189b      	adds	r3, r3, r2
 800c5ba:	6163      	str	r3, [r4, #20]
 800c5bc:	e764      	b.n	800c488 <_vfiprintf_r+0x70>
 800c5be:	4343      	muls	r3, r0
 800c5c0:	002e      	movs	r6, r5
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	189b      	adds	r3, r3, r2
 800c5c6:	e7a6      	b.n	800c516 <_vfiprintf_r+0xfe>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	425b      	negs	r3, r3
 800c5cc:	e7d0      	b.n	800c570 <_vfiprintf_r+0x158>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	200a      	movs	r0, #10
 800c5d2:	001a      	movs	r2, r3
 800c5d4:	3601      	adds	r6, #1
 800c5d6:	6063      	str	r3, [r4, #4]
 800c5d8:	7831      	ldrb	r1, [r6, #0]
 800c5da:	1c75      	adds	r5, r6, #1
 800c5dc:	3930      	subs	r1, #48	; 0x30
 800c5de:	2909      	cmp	r1, #9
 800c5e0:	d903      	bls.n	800c5ea <_vfiprintf_r+0x1d2>
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0c5      	beq.n	800c572 <_vfiprintf_r+0x15a>
 800c5e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e8:	e7c3      	b.n	800c572 <_vfiprintf_r+0x15a>
 800c5ea:	4342      	muls	r2, r0
 800c5ec:	002e      	movs	r6, r5
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	1852      	adds	r2, r2, r1
 800c5f2:	e7f1      	b.n	800c5d8 <_vfiprintf_r+0x1c0>
 800c5f4:	aa07      	add	r2, sp, #28
 800c5f6:	9200      	str	r2, [sp, #0]
 800c5f8:	0021      	movs	r1, r4
 800c5fa:	003a      	movs	r2, r7
 800c5fc:	4b13      	ldr	r3, [pc, #76]	; (800c64c <_vfiprintf_r+0x234>)
 800c5fe:	9803      	ldr	r0, [sp, #12]
 800c600:	e000      	b.n	800c604 <_vfiprintf_r+0x1ec>
 800c602:	bf00      	nop
 800c604:	9004      	str	r0, [sp, #16]
 800c606:	9b04      	ldr	r3, [sp, #16]
 800c608:	3301      	adds	r3, #1
 800c60a:	d1d3      	bne.n	800c5b4 <_vfiprintf_r+0x19c>
 800c60c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c60e:	07db      	lsls	r3, r3, #31
 800c610:	d405      	bmi.n	800c61e <_vfiprintf_r+0x206>
 800c612:	89bb      	ldrh	r3, [r7, #12]
 800c614:	059b      	lsls	r3, r3, #22
 800c616:	d402      	bmi.n	800c61e <_vfiprintf_r+0x206>
 800c618:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c61a:	f7fe fb93 	bl	800ad44 <__retarget_lock_release_recursive>
 800c61e:	89bb      	ldrh	r3, [r7, #12]
 800c620:	065b      	lsls	r3, r3, #25
 800c622:	d500      	bpl.n	800c626 <_vfiprintf_r+0x20e>
 800c624:	e71d      	b.n	800c462 <_vfiprintf_r+0x4a>
 800c626:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c628:	e71d      	b.n	800c466 <_vfiprintf_r+0x4e>
 800c62a:	aa07      	add	r2, sp, #28
 800c62c:	9200      	str	r2, [sp, #0]
 800c62e:	0021      	movs	r1, r4
 800c630:	003a      	movs	r2, r7
 800c632:	4b06      	ldr	r3, [pc, #24]	; (800c64c <_vfiprintf_r+0x234>)
 800c634:	9803      	ldr	r0, [sp, #12]
 800c636:	f7ff fc95 	bl	800bf64 <_printf_i>
 800c63a:	e7e3      	b.n	800c604 <_vfiprintf_r+0x1ec>
 800c63c:	0800cfea 	.word	0x0800cfea
 800c640:	0800cff0 	.word	0x0800cff0
 800c644:	0800cff4 	.word	0x0800cff4
 800c648:	00000000 	.word	0x00000000
 800c64c:	0800c3f5 	.word	0x0800c3f5

0800c650 <__swbuf_r>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	0006      	movs	r6, r0
 800c654:	000d      	movs	r5, r1
 800c656:	0014      	movs	r4, r2
 800c658:	2800      	cmp	r0, #0
 800c65a:	d004      	beq.n	800c666 <__swbuf_r+0x16>
 800c65c:	6a03      	ldr	r3, [r0, #32]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d101      	bne.n	800c666 <__swbuf_r+0x16>
 800c662:	f7fe fa3b 	bl	800aadc <__sinit>
 800c666:	69a3      	ldr	r3, [r4, #24]
 800c668:	60a3      	str	r3, [r4, #8]
 800c66a:	89a3      	ldrh	r3, [r4, #12]
 800c66c:	071b      	lsls	r3, r3, #28
 800c66e:	d528      	bpl.n	800c6c2 <__swbuf_r+0x72>
 800c670:	6923      	ldr	r3, [r4, #16]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d025      	beq.n	800c6c2 <__swbuf_r+0x72>
 800c676:	6923      	ldr	r3, [r4, #16]
 800c678:	6820      	ldr	r0, [r4, #0]
 800c67a:	b2ef      	uxtb	r7, r5
 800c67c:	1ac0      	subs	r0, r0, r3
 800c67e:	6963      	ldr	r3, [r4, #20]
 800c680:	b2ed      	uxtb	r5, r5
 800c682:	4283      	cmp	r3, r0
 800c684:	dc05      	bgt.n	800c692 <__swbuf_r+0x42>
 800c686:	0021      	movs	r1, r4
 800c688:	0030      	movs	r0, r6
 800c68a:	f7ff fe05 	bl	800c298 <_fflush_r>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d11d      	bne.n	800c6ce <__swbuf_r+0x7e>
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	3001      	adds	r0, #1
 800c696:	3b01      	subs	r3, #1
 800c698:	60a3      	str	r3, [r4, #8]
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	6022      	str	r2, [r4, #0]
 800c6a0:	701f      	strb	r7, [r3, #0]
 800c6a2:	6963      	ldr	r3, [r4, #20]
 800c6a4:	4283      	cmp	r3, r0
 800c6a6:	d004      	beq.n	800c6b2 <__swbuf_r+0x62>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	07db      	lsls	r3, r3, #31
 800c6ac:	d507      	bpl.n	800c6be <__swbuf_r+0x6e>
 800c6ae:	2d0a      	cmp	r5, #10
 800c6b0:	d105      	bne.n	800c6be <__swbuf_r+0x6e>
 800c6b2:	0021      	movs	r1, r4
 800c6b4:	0030      	movs	r0, r6
 800c6b6:	f7ff fdef 	bl	800c298 <_fflush_r>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d107      	bne.n	800c6ce <__swbuf_r+0x7e>
 800c6be:	0028      	movs	r0, r5
 800c6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c2:	0021      	movs	r1, r4
 800c6c4:	0030      	movs	r0, r6
 800c6c6:	f000 f805 	bl	800c6d4 <__swsetup_r>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d0d3      	beq.n	800c676 <__swbuf_r+0x26>
 800c6ce:	2501      	movs	r5, #1
 800c6d0:	426d      	negs	r5, r5
 800c6d2:	e7f4      	b.n	800c6be <__swbuf_r+0x6e>

0800c6d4 <__swsetup_r>:
 800c6d4:	4b30      	ldr	r3, [pc, #192]	; (800c798 <__swsetup_r+0xc4>)
 800c6d6:	b570      	push	{r4, r5, r6, lr}
 800c6d8:	0005      	movs	r5, r0
 800c6da:	6818      	ldr	r0, [r3, #0]
 800c6dc:	000c      	movs	r4, r1
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d004      	beq.n	800c6ec <__swsetup_r+0x18>
 800c6e2:	6a03      	ldr	r3, [r0, #32]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d101      	bne.n	800c6ec <__swsetup_r+0x18>
 800c6e8:	f7fe f9f8 	bl	800aadc <__sinit>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	5ee2      	ldrsh	r2, [r4, r3]
 800c6f0:	b293      	uxth	r3, r2
 800c6f2:	0711      	lsls	r1, r2, #28
 800c6f4:	d423      	bmi.n	800c73e <__swsetup_r+0x6a>
 800c6f6:	06d9      	lsls	r1, r3, #27
 800c6f8:	d407      	bmi.n	800c70a <__swsetup_r+0x36>
 800c6fa:	2309      	movs	r3, #9
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	602b      	str	r3, [r5, #0]
 800c700:	3337      	adds	r3, #55	; 0x37
 800c702:	4313      	orrs	r3, r2
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	4240      	negs	r0, r0
 800c708:	bd70      	pop	{r4, r5, r6, pc}
 800c70a:	075b      	lsls	r3, r3, #29
 800c70c:	d513      	bpl.n	800c736 <__swsetup_r+0x62>
 800c70e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c710:	2900      	cmp	r1, #0
 800c712:	d008      	beq.n	800c726 <__swsetup_r+0x52>
 800c714:	0023      	movs	r3, r4
 800c716:	3344      	adds	r3, #68	; 0x44
 800c718:	4299      	cmp	r1, r3
 800c71a:	d002      	beq.n	800c722 <__swsetup_r+0x4e>
 800c71c:	0028      	movs	r0, r5
 800c71e:	f7fe fb29 	bl	800ad74 <_free_r>
 800c722:	2300      	movs	r3, #0
 800c724:	6363      	str	r3, [r4, #52]	; 0x34
 800c726:	2224      	movs	r2, #36	; 0x24
 800c728:	89a3      	ldrh	r3, [r4, #12]
 800c72a:	4393      	bics	r3, r2
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	2300      	movs	r3, #0
 800c730:	6063      	str	r3, [r4, #4]
 800c732:	6923      	ldr	r3, [r4, #16]
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	2308      	movs	r3, #8
 800c738:	89a2      	ldrh	r2, [r4, #12]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10b      	bne.n	800c75c <__swsetup_r+0x88>
 800c744:	21a0      	movs	r1, #160	; 0xa0
 800c746:	2280      	movs	r2, #128	; 0x80
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	0089      	lsls	r1, r1, #2
 800c74c:	0092      	lsls	r2, r2, #2
 800c74e:	400b      	ands	r3, r1
 800c750:	4293      	cmp	r3, r2
 800c752:	d003      	beq.n	800c75c <__swsetup_r+0x88>
 800c754:	0021      	movs	r1, r4
 800c756:	0028      	movs	r0, r5
 800c758:	f000 f892 	bl	800c880 <__smakebuf_r>
 800c75c:	220c      	movs	r2, #12
 800c75e:	5ea3      	ldrsh	r3, [r4, r2]
 800c760:	2001      	movs	r0, #1
 800c762:	001a      	movs	r2, r3
 800c764:	b299      	uxth	r1, r3
 800c766:	4002      	ands	r2, r0
 800c768:	4203      	tst	r3, r0
 800c76a:	d00f      	beq.n	800c78c <__swsetup_r+0xb8>
 800c76c:	2200      	movs	r2, #0
 800c76e:	60a2      	str	r2, [r4, #8]
 800c770:	6962      	ldr	r2, [r4, #20]
 800c772:	4252      	negs	r2, r2
 800c774:	61a2      	str	r2, [r4, #24]
 800c776:	2000      	movs	r0, #0
 800c778:	6922      	ldr	r2, [r4, #16]
 800c77a:	4282      	cmp	r2, r0
 800c77c:	d1c4      	bne.n	800c708 <__swsetup_r+0x34>
 800c77e:	0609      	lsls	r1, r1, #24
 800c780:	d5c2      	bpl.n	800c708 <__swsetup_r+0x34>
 800c782:	2240      	movs	r2, #64	; 0x40
 800c784:	4313      	orrs	r3, r2
 800c786:	81a3      	strh	r3, [r4, #12]
 800c788:	3801      	subs	r0, #1
 800c78a:	e7bd      	b.n	800c708 <__swsetup_r+0x34>
 800c78c:	0788      	lsls	r0, r1, #30
 800c78e:	d400      	bmi.n	800c792 <__swsetup_r+0xbe>
 800c790:	6962      	ldr	r2, [r4, #20]
 800c792:	60a2      	str	r2, [r4, #8]
 800c794:	e7ef      	b.n	800c776 <__swsetup_r+0xa2>
 800c796:	46c0      	nop			; (mov r8, r8)
 800c798:	200001e4 	.word	0x200001e4

0800c79c <_raise_r>:
 800c79c:	b570      	push	{r4, r5, r6, lr}
 800c79e:	0004      	movs	r4, r0
 800c7a0:	000d      	movs	r5, r1
 800c7a2:	291f      	cmp	r1, #31
 800c7a4:	d904      	bls.n	800c7b0 <_raise_r+0x14>
 800c7a6:	2316      	movs	r3, #22
 800c7a8:	6003      	str	r3, [r0, #0]
 800c7aa:	2001      	movs	r0, #1
 800c7ac:	4240      	negs	r0, r0
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d004      	beq.n	800c7c0 <_raise_r+0x24>
 800c7b6:	008a      	lsls	r2, r1, #2
 800c7b8:	189b      	adds	r3, r3, r2
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	d108      	bne.n	800c7d2 <_raise_r+0x36>
 800c7c0:	0020      	movs	r0, r4
 800c7c2:	f000 f831 	bl	800c828 <_getpid_r>
 800c7c6:	002a      	movs	r2, r5
 800c7c8:	0001      	movs	r1, r0
 800c7ca:	0020      	movs	r0, r4
 800c7cc:	f000 f81a 	bl	800c804 <_kill_r>
 800c7d0:	e7ed      	b.n	800c7ae <_raise_r+0x12>
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	2a01      	cmp	r2, #1
 800c7d6:	d0ea      	beq.n	800c7ae <_raise_r+0x12>
 800c7d8:	1c51      	adds	r1, r2, #1
 800c7da:	d103      	bne.n	800c7e4 <_raise_r+0x48>
 800c7dc:	2316      	movs	r3, #22
 800c7de:	3001      	adds	r0, #1
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	e7e4      	b.n	800c7ae <_raise_r+0x12>
 800c7e4:	2400      	movs	r4, #0
 800c7e6:	0028      	movs	r0, r5
 800c7e8:	601c      	str	r4, [r3, #0]
 800c7ea:	4790      	blx	r2
 800c7ec:	0020      	movs	r0, r4
 800c7ee:	e7de      	b.n	800c7ae <_raise_r+0x12>

0800c7f0 <raise>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	4b03      	ldr	r3, [pc, #12]	; (800c800 <raise+0x10>)
 800c7f4:	0001      	movs	r1, r0
 800c7f6:	6818      	ldr	r0, [r3, #0]
 800c7f8:	f7ff ffd0 	bl	800c79c <_raise_r>
 800c7fc:	bd10      	pop	{r4, pc}
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	200001e4 	.word	0x200001e4

0800c804 <_kill_r>:
 800c804:	2300      	movs	r3, #0
 800c806:	b570      	push	{r4, r5, r6, lr}
 800c808:	4d06      	ldr	r5, [pc, #24]	; (800c824 <_kill_r+0x20>)
 800c80a:	0004      	movs	r4, r0
 800c80c:	0008      	movs	r0, r1
 800c80e:	0011      	movs	r1, r2
 800c810:	602b      	str	r3, [r5, #0]
 800c812:	f000 f897 	bl	800c944 <_kill>
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	d103      	bne.n	800c822 <_kill_r+0x1e>
 800c81a:	682b      	ldr	r3, [r5, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d000      	beq.n	800c822 <_kill_r+0x1e>
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	bd70      	pop	{r4, r5, r6, pc}
 800c824:	20000f14 	.word	0x20000f14

0800c828 <_getpid_r>:
 800c828:	b510      	push	{r4, lr}
 800c82a:	f7fc ff59 	bl	80096e0 <_getpid>
 800c82e:	bd10      	pop	{r4, pc}

0800c830 <__swhatbuf_r>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	000e      	movs	r6, r1
 800c834:	001d      	movs	r5, r3
 800c836:	230e      	movs	r3, #14
 800c838:	5ec9      	ldrsh	r1, [r1, r3]
 800c83a:	0014      	movs	r4, r2
 800c83c:	b096      	sub	sp, #88	; 0x58
 800c83e:	2900      	cmp	r1, #0
 800c840:	da0c      	bge.n	800c85c <__swhatbuf_r+0x2c>
 800c842:	89b2      	ldrh	r2, [r6, #12]
 800c844:	2380      	movs	r3, #128	; 0x80
 800c846:	0011      	movs	r1, r2
 800c848:	4019      	ands	r1, r3
 800c84a:	421a      	tst	r2, r3
 800c84c:	d013      	beq.n	800c876 <__swhatbuf_r+0x46>
 800c84e:	2100      	movs	r1, #0
 800c850:	3b40      	subs	r3, #64	; 0x40
 800c852:	2000      	movs	r0, #0
 800c854:	6029      	str	r1, [r5, #0]
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	b016      	add	sp, #88	; 0x58
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	466a      	mov	r2, sp
 800c85e:	f000 f84d 	bl	800c8fc <_fstat_r>
 800c862:	2800      	cmp	r0, #0
 800c864:	dbed      	blt.n	800c842 <__swhatbuf_r+0x12>
 800c866:	23f0      	movs	r3, #240	; 0xf0
 800c868:	9901      	ldr	r1, [sp, #4]
 800c86a:	021b      	lsls	r3, r3, #8
 800c86c:	4019      	ands	r1, r3
 800c86e:	4b03      	ldr	r3, [pc, #12]	; (800c87c <__swhatbuf_r+0x4c>)
 800c870:	18c9      	adds	r1, r1, r3
 800c872:	424b      	negs	r3, r1
 800c874:	4159      	adcs	r1, r3
 800c876:	2380      	movs	r3, #128	; 0x80
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	e7ea      	b.n	800c852 <__swhatbuf_r+0x22>
 800c87c:	ffffe000 	.word	0xffffe000

0800c880 <__smakebuf_r>:
 800c880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c882:	2602      	movs	r6, #2
 800c884:	898b      	ldrh	r3, [r1, #12]
 800c886:	0005      	movs	r5, r0
 800c888:	000c      	movs	r4, r1
 800c88a:	4233      	tst	r3, r6
 800c88c:	d006      	beq.n	800c89c <__smakebuf_r+0x1c>
 800c88e:	0023      	movs	r3, r4
 800c890:	3347      	adds	r3, #71	; 0x47
 800c892:	6023      	str	r3, [r4, #0]
 800c894:	6123      	str	r3, [r4, #16]
 800c896:	2301      	movs	r3, #1
 800c898:	6163      	str	r3, [r4, #20]
 800c89a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c89c:	466a      	mov	r2, sp
 800c89e:	ab01      	add	r3, sp, #4
 800c8a0:	f7ff ffc6 	bl	800c830 <__swhatbuf_r>
 800c8a4:	9900      	ldr	r1, [sp, #0]
 800c8a6:	0007      	movs	r7, r0
 800c8a8:	0028      	movs	r0, r5
 800c8aa:	f7fd f8f9 	bl	8009aa0 <_malloc_r>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d108      	bne.n	800c8c4 <__smakebuf_r+0x44>
 800c8b2:	220c      	movs	r2, #12
 800c8b4:	5ea3      	ldrsh	r3, [r4, r2]
 800c8b6:	059a      	lsls	r2, r3, #22
 800c8b8:	d4ef      	bmi.n	800c89a <__smakebuf_r+0x1a>
 800c8ba:	2203      	movs	r2, #3
 800c8bc:	4393      	bics	r3, r2
 800c8be:	431e      	orrs	r6, r3
 800c8c0:	81a6      	strh	r6, [r4, #12]
 800c8c2:	e7e4      	b.n	800c88e <__smakebuf_r+0xe>
 800c8c4:	2380      	movs	r3, #128	; 0x80
 800c8c6:	89a2      	ldrh	r2, [r4, #12]
 800c8c8:	6020      	str	r0, [r4, #0]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	81a3      	strh	r3, [r4, #12]
 800c8ce:	9b00      	ldr	r3, [sp, #0]
 800c8d0:	6120      	str	r0, [r4, #16]
 800c8d2:	6163      	str	r3, [r4, #20]
 800c8d4:	9b01      	ldr	r3, [sp, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00c      	beq.n	800c8f4 <__smakebuf_r+0x74>
 800c8da:	0028      	movs	r0, r5
 800c8dc:	230e      	movs	r3, #14
 800c8de:	5ee1      	ldrsh	r1, [r4, r3]
 800c8e0:	f000 f81e 	bl	800c920 <_isatty_r>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d005      	beq.n	800c8f4 <__smakebuf_r+0x74>
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	89a2      	ldrh	r2, [r4, #12]
 800c8ec:	439a      	bics	r2, r3
 800c8ee:	3b02      	subs	r3, #2
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	81a3      	strh	r3, [r4, #12]
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	433b      	orrs	r3, r7
 800c8f8:	81a3      	strh	r3, [r4, #12]
 800c8fa:	e7ce      	b.n	800c89a <__smakebuf_r+0x1a>

0800c8fc <_fstat_r>:
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	b570      	push	{r4, r5, r6, lr}
 800c900:	4d06      	ldr	r5, [pc, #24]	; (800c91c <_fstat_r+0x20>)
 800c902:	0004      	movs	r4, r0
 800c904:	0008      	movs	r0, r1
 800c906:	0011      	movs	r1, r2
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	f7fc ff0d 	bl	8009728 <_fstat>
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	d103      	bne.n	800c91a <_fstat_r+0x1e>
 800c912:	682b      	ldr	r3, [r5, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d000      	beq.n	800c91a <_fstat_r+0x1e>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	20000f14 	.word	0x20000f14

0800c920 <_isatty_r>:
 800c920:	2300      	movs	r3, #0
 800c922:	b570      	push	{r4, r5, r6, lr}
 800c924:	4d06      	ldr	r5, [pc, #24]	; (800c940 <_isatty_r+0x20>)
 800c926:	0004      	movs	r4, r0
 800c928:	0008      	movs	r0, r1
 800c92a:	602b      	str	r3, [r5, #0]
 800c92c:	f7fd f85e 	bl	80099ec <_isatty>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d103      	bne.n	800c93c <_isatty_r+0x1c>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d000      	beq.n	800c93c <_isatty_r+0x1c>
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	bd70      	pop	{r4, r5, r6, pc}
 800c93e:	46c0      	nop			; (mov r8, r8)
 800c940:	20000f14 	.word	0x20000f14

0800c944 <_kill>:
 800c944:	2258      	movs	r2, #88	; 0x58
 800c946:	2001      	movs	r0, #1
 800c948:	4b01      	ldr	r3, [pc, #4]	; (800c950 <_kill+0xc>)
 800c94a:	4240      	negs	r0, r0
 800c94c:	601a      	str	r2, [r3, #0]
 800c94e:	4770      	bx	lr
 800c950:	20000f14 	.word	0x20000f14

0800c954 <_exit>:
 800c954:	e7fe      	b.n	800c954 <_exit>
	...

0800c958 <_init>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95e:	bc08      	pop	{r3}
 800c960:	469e      	mov	lr, r3
 800c962:	4770      	bx	lr

0800c964 <_fini>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	46c0      	nop			; (mov r8, r8)
 800c968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96a:	bc08      	pop	{r3}
 800c96c:	469e      	mov	lr, r3
 800c96e:	4770      	bx	lr
