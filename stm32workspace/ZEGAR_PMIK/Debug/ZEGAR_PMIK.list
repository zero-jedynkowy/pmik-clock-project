
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005980  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005a40  08005a40  00015a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b98  08005b98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000070  08005c10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08005c10  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000edb7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024fc  00000000  00000000  0002ee92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00031390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5a  00000000  00000000  000320f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c53  00000000  00000000  00032b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001011d  00000000  00000000  000497a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b36c  00000000  00000000  000598c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003830  00000000  00000000  000e4c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e8460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a28 	.word	0x08005a28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005a28 	.word	0x08005a28

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 80004be:	f004 feeb 	bl	8005298 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f001 fb09 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f897 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fa83 	bl	80009d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ce:	f000 f9a5 	bl	800081c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d2:	f000 f9f9 	bl	80008c8 <MX_TIM3_Init>
  MX_RTC_Init();
 80004d6:	f000 f8fb 	bl	80006d0 <MX_RTC_Init>
  MX_USART4_UART_Init();
 80004da:	f000 fa4b 	bl	8000974 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja muzyki głośność od 0-30, ustawiłem wstepnie 20 bo to było w miarę głośne, można ustawić do 15 i też będzie ok, dla 30 już nie.
  DF_Init(20);
 80004de:	2014      	movs	r0, #20
 80004e0:	f000 ff59 	bl	8001396 <DF_Init>

  //Inicjalizacja Wejść do obsługi ekranu 8-segmentowego
  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	483c      	ldr	r0, [pc, #240]	; (80005dc <main+0x124>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	0019      	movs	r1, r3
 80004ee:	f001 fe00 	bl	80020f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4839      	ldr	r0, [pc, #228]	; (80005dc <main+0x124>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	0019      	movs	r1, r3
 80004fc:	f001 fdf9 	bl	80020f2 <HAL_GPIO_WritePin>

  //Inicjalizacja struktry odpowiedzialnej za czas,datę i czas alarmu
  Clocker_Init(&ourClocker, &hrtc);
 8000500:	4a37      	ldr	r2, [pc, #220]	; (80005e0 <main+0x128>)
 8000502:	4b38      	ldr	r3, [pc, #224]	; (80005e4 <main+0x12c>)
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fc62 	bl	8000dd0 <Clocker_Init>
  Clocker_Set_Time(&ourClocker, 22, 35, 00);
 800050c:	4835      	ldr	r0, [pc, #212]	; (80005e4 <main+0x12c>)
 800050e:	2300      	movs	r3, #0
 8000510:	2223      	movs	r2, #35	; 0x23
 8000512:	2116      	movs	r1, #22
 8000514:	f000 fd94 	bl	8001040 <Clocker_Set_Time>

  //Załączenie Timerów, z czego na ten moment tylko jeden jest z obsługą przerwania w celu aktualizacji ekranu
  HAL_TIM_Base_Start_IT(&htim2);
 8000518:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <main+0x130>)
 800051a:	0018      	movs	r0, r3
 800051c:	f003 fb6a 	bl	8003bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000520:	4b32      	ldr	r3, [pc, #200]	; (80005ec <main+0x134>)
 8000522:	0018      	movs	r0, r3
 8000524:	f003 fb1c 	bl	8003b60 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init ();
 8000528:	f001 f83e 	bl	80015a8 <lcd_init>
  lcd_clear();
 800052c:	f001 f812 	bl	8001554 <lcd_clear>
  char * ada = "ssss";
 8000530:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <main+0x138>)
 8000532:	603b      	str	r3, [r7, #0]
  uint8_t alarm = 0; //Tymczasowa wartość
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
  uint8_t counter = 0;
 800053a:	1dbb      	adds	r3, r7, #6
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if(counter >= 10)
 8000540:	1dbb      	adds	r3, r7, #6
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b09      	cmp	r3, #9
 8000546:	d902      	bls.n	800054e <main+0x96>
	  {
		  counter = 0;
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
	  }
	  lcd_put_cur(0, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	2000      	movs	r0, #0
 8000552:	f001 f80a 	bl	800156a <lcd_put_cur>
	  lcd_send_string(ourClocker.tableOfScreens[counter][0]);
 8000556:	1dbb      	adds	r3, r7, #6
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	015a      	lsls	r2, r3, #5
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0x12c>)
 800055e:	18d3      	adds	r3, r2, r3
 8000560:	3303      	adds	r3, #3
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f85e 	bl	8001624 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8000568:	2100      	movs	r1, #0
 800056a:	2001      	movs	r0, #1
 800056c:	f000 fffd 	bl	800156a <lcd_put_cur>
	  lcd_send_string(ourClocker.tableOfScreens[counter][1]);
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	015b      	lsls	r3, r3, #5
 8000576:	3310      	adds	r3, #16
 8000578:	001a      	movs	r2, r3
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <main+0x12c>)
 800057c:	18d3      	adds	r3, r2, r3
 800057e:	3303      	adds	r3, #3
 8000580:	0018      	movs	r0, r3
 8000582:	f001 f84f 	bl	8001624 <lcd_send_string>
	  HAL_Delay(2000);
 8000586:	23fa      	movs	r3, #250	; 0xfa
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fb14 	bl	8001bb8 <HAL_Delay>
	  lcd_clear();
 8000590:	f000 ffe0 	bl	8001554 <lcd_clear>
	  counter++;
 8000594:	1dbb      	adds	r3, r7, #6
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	1dbb      	adds	r3, r7, #6
 800059a:	3201      	adds	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]

	  if(alarm == 1)
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d108      	bne.n	80005b8 <main+0x100>
	  {
		  Clocker_Set_Alarm(&ourClocker, 22, 30); // Tymczasowodałem zmienne Godziny i Minuty, ale należy tam dać czas który ustawiliśmy na apce.
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <main+0x12c>)
 80005a8:	221e      	movs	r2, #30
 80005aa:	2116      	movs	r1, #22
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fd89 	bl	80010c4 <Clocker_Set_Alarm>
		  alarm = 0;
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	  }
	  if(budzik == 1)
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <main+0x13c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d1be      	bne.n	8000540 <main+0x88>
	  {
		  DF_PlayFromStart(); //Załączenie muzyki jak już budzik odmierzył swój czas.
 80005c2:	f000 fedb 	bl	800137c <DF_PlayFromStart>
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); //Wyłączenie budzika
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	005a      	lsls	r2, r3, #1
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <main+0x128>)
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f003 f90e 	bl	80037f0 <HAL_RTC_DeactivateAlarm>
		  budzik = 0;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <main+0x13c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	  if(counter >= 10)
 80005da:	e7b1      	b.n	8000540 <main+0x88>
 80005dc:	50000400 	.word	0x50000400
 80005e0:	2000008c 	.word	0x2000008c
 80005e4:	200001bc 	.word	0x200001bc
 80005e8:	200000b0 	.word	0x200000b0
 80005ec:	200000f0 	.word	0x200000f0
 80005f0:	08005a40 	.word	0x08005a40
 80005f4:	200001b8 	.word	0x200001b8

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b09f      	sub	sp, #124	; 0x7c
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	2440      	movs	r4, #64	; 0x40
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2338      	movs	r3, #56	; 0x38
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f005 f86f 	bl	80056ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	232c      	movs	r3, #44	; 0x2c
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	0018      	movs	r0, r3
 8000614:	2314      	movs	r3, #20
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f005 f867 	bl	80056ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	0018      	movs	r0, r3
 8000622:	2328      	movs	r3, #40	; 0x28
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f005 f860 	bl	80056ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xd4>)
 8000632:	401a      	ands	r2, r3
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <SystemClock_Config+0xd0>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0109      	lsls	r1, r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2206      	movs	r2, #6
 8000642:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	0052      	lsls	r2, r2, #1
 800064a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2201      	movs	r2, #1
 8000650:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2210      	movs	r2, #16
 8000656:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	193b      	adds	r3, r7, r4
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fd63 	bl	800212c <HAL_RCC_OscConfig>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800066a:	f000 fa85 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	212c      	movs	r1, #44	; 0x2c
 8000670:	187b      	adds	r3, r7, r1
 8000672:	220f      	movs	r2, #15
 8000674:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2201      	movs	r2, #1
 800067a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2100      	movs	r1, #0
 8000692:	0018      	movs	r0, r3
 8000694:	f002 f91e 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800069c:	f000 fa6c 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2220      	movs	r2, #32
 80006a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0252      	lsls	r2, r2, #9
 80006ac:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 fb33 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ba:	f000 fa5d 	bl	8000b78 <Error_Handler>
  }
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b01f      	add	sp, #124	; 0x7c
 80006c4:	bd90      	pop	{r4, r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40007000 	.word	0x40007000
 80006cc:	ffffe7ff 	.word	0xffffe7ff

080006d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b090      	sub	sp, #64	; 0x40
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006d6:	232c      	movs	r3, #44	; 0x2c
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f005 f803 	bl	80056ec <memset>
  RTC_DateTypeDef sDate = {0};
 80006e6:	2328      	movs	r3, #40	; 0x28
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80006ee:	003b      	movs	r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	2328      	movs	r3, #40	; 0x28
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f004 fff8 	bl	80056ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006fc:	4b44      	ldr	r3, [pc, #272]	; (8000810 <MX_RTC_Init+0x140>)
 80006fe:	4a45      	ldr	r2, [pc, #276]	; (8000814 <MX_RTC_Init+0x144>)
 8000700:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000702:	4b43      	ldr	r3, [pc, #268]	; (8000810 <MX_RTC_Init+0x140>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000708:	4b41      	ldr	r3, [pc, #260]	; (8000810 <MX_RTC_Init+0x140>)
 800070a:	227f      	movs	r2, #127	; 0x7f
 800070c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800070e:	4b40      	ldr	r3, [pc, #256]	; (8000810 <MX_RTC_Init+0x140>)
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000714:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_RTC_Init+0x140>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800071a:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <MX_RTC_Init+0x140>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000720:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_RTC_Init+0x140>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <MX_RTC_Init+0x140>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800072c:	4b38      	ldr	r3, [pc, #224]	; (8000810 <MX_RTC_Init+0x140>)
 800072e:	0018      	movs	r0, r3
 8000730:	f002 fc92 	bl	8003058 <HAL_RTC_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000738:	f000 fa1e 	bl	8000b78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800073c:	212c      	movs	r1, #44	; 0x2c
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800075c:	1879      	adds	r1, r7, r1
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_RTC_Init+0x140>)
 8000760:	2201      	movs	r2, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f002 fd14 	bl	8003190 <HAL_RTC_SetTime>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800076c:	f000 fa04 	bl	8000b78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000770:	2128      	movs	r1, #40	; 0x28
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2201      	movs	r2, #1
 800077c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2201      	movs	r2, #1
 8000782:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800078a:	1879      	adds	r1, r7, r1
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_RTC_Init+0x140>)
 800078e:	2201      	movs	r2, #1
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fe05 	bl	80033a0 <HAL_RTC_SetDate>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800079a:	f000 f9ed 	bl	8000b78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800079e:	003b      	movs	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 80007c2:	003b      	movs	r3, r7
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_RTC_Init+0x148>)
 80007c6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2220      	movs	r2, #32
 80007d8:	2101      	movs	r1, #1
 80007da:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007dc:	003b      	movs	r3, r7
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007e4:	0039      	movs	r1, r7
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_RTC_Init+0x140>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 febc 	bl	8003568 <HAL_RTC_SetAlarm>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80007f4:	f000 f9c0 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	005a      	lsls	r2, r3, #1
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <MX_RTC_Init+0x140>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f002 fff5 	bl	80037f0 <HAL_RTC_DeactivateAlarm>
  /* USER CODE END RTC_Init 2 */

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b010      	add	sp, #64	; 0x40
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	2000008c 	.word	0x2000008c
 8000814:	40002800 	.word	0x40002800
 8000818:	80000080 	.word	0x80000080

0800081c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	2308      	movs	r3, #8
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	0018      	movs	r0, r3
 8000828:	2310      	movs	r3, #16
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f004 ff5d 	bl	80056ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	003b      	movs	r3, r7
 8000834:	0018      	movs	r0, r3
 8000836:	2308      	movs	r3, #8
 8000838:	001a      	movs	r2, r3
 800083a:	2100      	movs	r1, #0
 800083c:	f004 ff56 	bl	80056ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_TIM2_Init+0xa4>)
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	05d2      	lsls	r2, r2, #23
 8000846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_TIM2_Init+0xa4>)
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_TIM2_Init+0xa8>)
 800084c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM2_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0xa4>)
 8000856:	22fa      	movs	r2, #250	; 0xfa
 8000858:	0092      	lsls	r2, r2, #2
 800085a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_TIM2_Init+0xa4>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_TIM2_Init+0xa4>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0xa4>)
 800086a:	0018      	movs	r0, r3
 800086c:	f003 f938 	bl	8003ae0 <HAL_TIM_Base_Init>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 f980 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000878:	2108      	movs	r1, #8
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0152      	lsls	r2, r2, #5
 8000880:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000882:	187a      	adds	r2, r7, r1
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_TIM2_Init+0xa4>)
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f003 faed 	bl	8003e68 <HAL_TIM_ConfigClockSource>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000892:	f000 f971 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	003b      	movs	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	003b      	movs	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	003a      	movs	r2, r7
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_TIM2_Init+0xa4>)
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f003 fcc9 	bl	8004240 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008b2:	f000 f961 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b006      	add	sp, #24
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	200000b0 	.word	0x200000b0
 80008c4:	00007cff 	.word	0x00007cff

080008c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	2308      	movs	r3, #8
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	0018      	movs	r0, r3
 80008d4:	2310      	movs	r3, #16
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f004 ff07 	bl	80056ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	003b      	movs	r3, r7
 80008e0:	0018      	movs	r0, r3
 80008e2:	2308      	movs	r3, #8
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f004 ff00 	bl	80056ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_TIM3_Init+0xa0>)
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <MX_TIM3_Init+0xa4>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_TIM3_Init+0xa0>)
 80008f4:	221f      	movs	r2, #31
 80008f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_TIM3_Init+0xa0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_TIM3_Init+0xa0>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_TIM3_Init+0xa8>)
 8000902:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_TIM3_Init+0xa0>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_TIM3_Init+0xa0>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_TIM3_Init+0xa0>)
 8000912:	0018      	movs	r0, r3
 8000914:	f003 f8e4 	bl	8003ae0 <HAL_TIM_Base_Init>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800091c:	f000 f92c 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	2108      	movs	r1, #8
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0152      	lsls	r2, r2, #5
 8000928:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800092a:	187a      	adds	r2, r7, r1
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_TIM3_Init+0xa0>)
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f003 fa99 	bl	8003e68 <HAL_TIM_ConfigClockSource>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800093a:	f000 f91d 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	003b      	movs	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	003b      	movs	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094a:	003a      	movs	r2, r7
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_TIM3_Init+0xa0>)
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f003 fc75 	bl	8004240 <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800095a:	f000 f90d 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b006      	add	sp, #24
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	200000f0 	.word	0x200000f0
 800096c:	40000400 	.word	0x40000400
 8000970:	0000fffe 	.word	0x0000fffe

08000974 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART4_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART4_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART4_UART_Init+0x58>)
 8000980:	2296      	movs	r2, #150	; 0x96
 8000982:	0192      	lsls	r2, r2, #6
 8000984:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART4_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART4_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART4_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART4_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART4_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART4_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART4_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART4_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_USART4_UART_Init+0x58>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f003 fc9f 	bl	80042fc <HAL_UART_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f8d9 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000130 	.word	0x20000130
 80009d0:	40004c00 	.word	0x40004c00

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b08b      	sub	sp, #44	; 0x2c
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	2414      	movs	r4, #20
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	0018      	movs	r0, r3
 80009e0:	2314      	movs	r3, #20
 80009e2:	001a      	movs	r2, r3
 80009e4:	2100      	movs	r1, #0
 80009e6:	f004 fe81 	bl	80056ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <MX_GPIO_Init+0x170>)
 80009ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ee:	4b55      	ldr	r3, [pc, #340]	; (8000b44 <MX_GPIO_Init+0x170>)
 80009f0:	2104      	movs	r1, #4
 80009f2:	430a      	orrs	r2, r1
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <MX_GPIO_Init+0x170>)
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	2204      	movs	r2, #4
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a06:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a36:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a38:	2102      	movs	r1, #2
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <MX_GPIO_Init+0x170>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	2202      	movs	r2, #2
 8000a44:	4013      	ands	r3, r2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 8000a4a:	23f8      	movs	r3, #248	; 0xf8
 8000a4c:	0099      	lsls	r1, r3, #2
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	2200      	movs	r2, #0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fb4c 	bl	80020f2 <HAL_GPIO_WritePin>
                          |D_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x174>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 fb46 	bl	80020f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_4_Pin|SCLK_Pin|SDO_Pin, GPIO_PIN_RESET);
 8000a66:	23d0      	movs	r3, #208	; 0xd0
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4838      	ldr	r0, [pc, #224]	; (8000b4c <MX_GPIO_Init+0x178>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0019      	movs	r1, r3
 8000a70:	f001 fb3f 	bl	80020f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	0192      	lsls	r2, r2, #6
 8000a7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2284      	movs	r2, #132	; 0x84
 8000a80:	0392      	lsls	r2, r2, #14
 8000a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <MX_GPIO_Init+0x174>)
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f001 f993 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	220c      	movs	r2, #12
 8000a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2203      	movs	r2, #3
 8000aac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	193a      	adds	r2, r7, r4
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 f97d 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin D_7_Pin
                           D_6_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 8000ac2:	0021      	movs	r1, r4
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	22f8      	movs	r2, #248	; 0xf8
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	601a      	str	r2, [r3, #0]
                          |D_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	000c      	movs	r4, r1
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	193a      	adds	r2, r7, r4
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 f967 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2201      	movs	r2, #1
 8000af8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <MX_GPIO_Init+0x174>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	f001 f955 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : D_4_Pin SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = D_4_Pin|SCLK_Pin|SDO_Pin;
 8000b12:	0021      	movs	r1, r4
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	22d0      	movs	r2, #208	; 0xd0
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <MX_GPIO_Init+0x178>)
 8000b32:	0019      	movs	r1, r3
 8000b34:	0010      	movs	r0, r2
 8000b36:	f001 f941 	bl	8001dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b00b      	add	sp, #44	; 0x2c
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40021000 	.word	0x40021000
 8000b48:	50000800 	.word	0x50000800
 8000b4c:	50000400 	.word	0x50000400

08000b50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) Clocker_Segment_Update(&ourClocker);
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d103      	bne.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x18>
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fb12 	bl	800118c <Clocker_Segment_Update>
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	200001bc 	.word	0x200001bc

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_MspInit+0x24>)
 8000b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x24>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	430a      	orrs	r2, r1
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <HAL_MspInit+0x24>)
 8000b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_MspInit+0x24>)
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	0549      	lsls	r1, r1, #21
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_RTC_MspInit+0x28>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d106      	bne.n	8000bcc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_RTC_MspInit+0x2c>)
 8000bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_RTC_MspInit+0x2c>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	02c9      	lsls	r1, r1, #11
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40002800 	.word	0x40002800
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d10e      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_TIM_Base_MspInit+0x50>)
 8000bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_TIM_Base_MspInit+0x50>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	200f      	movs	r0, #15
 8000c02:	f001 f8a9 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f001 f8bb 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c0c:	e00a      	b.n	8000c24 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_TIM_Base_MspInit+0x54>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d105      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_TIM_Base_MspInit+0x50>)
 8000c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_TIM_Base_MspInit+0x50>)
 8000c1e:	2102      	movs	r1, #2
 8000c20:	430a      	orrs	r2, r1
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40000400 	.word	0x40000400

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	240c      	movs	r4, #12
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	0018      	movs	r0, r3
 8000c42:	2314      	movs	r3, #20
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f004 fd50 	bl	80056ec <memset>
  if(huart->Instance==USART4)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x80>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d129      	bne.n	8000caa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0309      	lsls	r1, r1, #12
 8000c60:	430a      	orrs	r2, r1
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c74:	2201      	movs	r2, #1
 8000c76:	4013      	ands	r3, r2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART4 GPIO Configuration
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2203      	movs	r2, #3
 8000c82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2202      	movs	r2, #2
 8000c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2203      	movs	r2, #3
 8000c94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2206      	movs	r2, #6
 8000c9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	187a      	adds	r2, r7, r1
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f001 f889 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b009      	add	sp, #36	; 0x24
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40004c00 	.word	0x40004c00
 8000cb8:	40021000 	.word	0x40021000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 ff4e 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <TIM2_IRQHandler+0x14>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f002 ffd0 	bl	8003c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	200000b0 	.word	0x200000b0

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f004 fd42 	bl	80057bc <__errno>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	425b      	negs	r3, r3
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	18d2      	adds	r2, r2, r3
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b006      	add	sp, #24
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20005000 	.word	0x20005000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20000310 	.word	0x20000310
 8000d6c:	20000510 	.word	0x20000510

08000d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <Reset_Handler>:
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopForever+0x2>)
 8000d7e:	4685      	mov	sp, r0
 8000d80:	f7ff fff6 	bl	8000d70 <SystemInit>
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <LoopForever+0x6>)
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <LoopForever+0xa>)
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LoopForever+0xe>)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:
 8000d8e:	58d4      	ldr	r4, [r2, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:
 8000d94:	18c4      	adds	r4, r0, r3
 8000d96:	428c      	cmp	r4, r1
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopForever+0x12>)
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <LoopForever+0x16>)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:
 8000da6:	42a2      	cmp	r2, r4
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>
 8000daa:	f004 fd0d 	bl	80057c8 <__libc_init_array>
 8000dae:	f7ff fb83 	bl	80004b8 <main>

08000db2 <LoopForever>:
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
 8000db4:	20005000 	.word	0x20005000
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000070 	.word	0x20000070
 8000dc0:	08005ba0 	.word	0x08005ba0
 8000dc4:	20000070 	.word	0x20000070
 8000dc8:	20000510 	.word	0x20000510

08000dcc <ADC1_COMP_IRQHandler>:
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_COMP_IRQHandler>
	...

08000dd0 <Clocker_Init>:
 *      Author: zero-jedynkowy
 */
#include "Clocker.h"

void Clocker_Init(struct Clocker * myClocker, RTC_HandleTypeDef * rtcHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b092      	sub	sp, #72	; 0x48
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	myClocker->maxScreen = 9;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2209      	movs	r2, #9
 8000dde:	701a      	strb	r2, [r3, #0]
	myClocker->currentScreen = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	705a      	strb	r2, [r3, #1]
	myClocker->screenTimeChanging = 5; //in seconds
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2205      	movs	r2, #5
 8000dea:	709a      	strb	r2, [r3, #2]
	strcpy(myClocker->tableOfScreens[0][0], "WEATHER");
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1cda      	adds	r2, r3, #3
 8000df0:	4b84      	ldr	r3, [pc, #528]	; (8001004 <Clocker_Init+0x234>)
 8000df2:	0010      	movs	r0, r2
 8000df4:	0019      	movs	r1, r3
 8000df6:	2308      	movs	r3, #8
 8000df8:	001a      	movs	r2, r3
 8000dfa:	f004 fd0c 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[0][1], "%s");
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3313      	adds	r3, #19
 8000e02:	001a      	movs	r2, r3
 8000e04:	4b80      	ldr	r3, [pc, #512]	; (8001008 <Clocker_Init+0x238>)
 8000e06:	0010      	movs	r0, r2
 8000e08:	0019      	movs	r1, r3
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	f004 fd02 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[1][0], "TEMPERATURE");
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3323      	adds	r3, #35	; 0x23
 8000e16:	001a      	movs	r2, r3
 8000e18:	4b7c      	ldr	r3, [pc, #496]	; (800100c <Clocker_Init+0x23c>)
 8000e1a:	0010      	movs	r0, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	230c      	movs	r3, #12
 8000e20:	001a      	movs	r2, r3
 8000e22:	f004 fcf8 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[1][1], "%.1f st. C");
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3333      	adds	r3, #51	; 0x33
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	4b78      	ldr	r3, [pc, #480]	; (8001010 <Clocker_Init+0x240>)
 8000e2e:	0010      	movs	r0, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	230b      	movs	r3, #11
 8000e34:	001a      	movs	r2, r3
 8000e36:	f004 fcee 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[2][0], "FEELS LIKE");
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3343      	adds	r3, #67	; 0x43
 8000e3e:	001a      	movs	r2, r3
 8000e40:	4b74      	ldr	r3, [pc, #464]	; (8001014 <Clocker_Init+0x244>)
 8000e42:	0010      	movs	r0, r2
 8000e44:	0019      	movs	r1, r3
 8000e46:	230b      	movs	r3, #11
 8000e48:	001a      	movs	r2, r3
 8000e4a:	f004 fce4 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[2][1], "%.1f st. C");
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3353      	adds	r3, #83	; 0x53
 8000e52:	001a      	movs	r2, r3
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <Clocker_Init+0x240>)
 8000e56:	0010      	movs	r0, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	230b      	movs	r3, #11
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	f004 fcda 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[3][0], "PRESSURE");
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3363      	adds	r3, #99	; 0x63
 8000e66:	001a      	movs	r2, r3
 8000e68:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <Clocker_Init+0x248>)
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	2309      	movs	r3, #9
 8000e70:	001a      	movs	r2, r3
 8000e72:	f004 fcd0 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[3][1], "%.0f hPa");
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3373      	adds	r3, #115	; 0x73
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	4b67      	ldr	r3, [pc, #412]	; (800101c <Clocker_Init+0x24c>)
 8000e7e:	0010      	movs	r0, r2
 8000e80:	0019      	movs	r1, r3
 8000e82:	2309      	movs	r3, #9
 8000e84:	001a      	movs	r2, r3
 8000e86:	f004 fcc6 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[4][0], "HUMIDITY");
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3383      	adds	r3, #131	; 0x83
 8000e8e:	001a      	movs	r2, r3
 8000e90:	4b63      	ldr	r3, [pc, #396]	; (8001020 <Clocker_Init+0x250>)
 8000e92:	0010      	movs	r0, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	2309      	movs	r3, #9
 8000e98:	001a      	movs	r2, r3
 8000e9a:	f004 fcbc 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[4][1], "%.1f %");
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3393      	adds	r3, #147	; 0x93
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4b5f      	ldr	r3, [pc, #380]	; (8001024 <Clocker_Init+0x254>)
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	2307      	movs	r3, #7
 8000eac:	001a      	movs	r2, r3
 8000eae:	f004 fcb2 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[5][0], "WIND SPEED");
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	33a3      	adds	r3, #163	; 0xa3
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	4b5b      	ldr	r3, [pc, #364]	; (8001028 <Clocker_Init+0x258>)
 8000eba:	0010      	movs	r0, r2
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	230b      	movs	r3, #11
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	f004 fca8 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[5][1], "%.1f m.s");
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	33b3      	adds	r3, #179	; 0xb3
 8000eca:	001a      	movs	r2, r3
 8000ecc:	4b57      	ldr	r3, [pc, #348]	; (800102c <Clocker_Init+0x25c>)
 8000ece:	0010      	movs	r0, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	f004 fc9e 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[6][0], "WIND SPEED");
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	33c3      	adds	r3, #195	; 0xc3
 8000ede:	001a      	movs	r2, r3
 8000ee0:	4b51      	ldr	r3, [pc, #324]	; (8001028 <Clocker_Init+0x258>)
 8000ee2:	0010      	movs	r0, r2
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	001a      	movs	r2, r3
 8000eea:	f004 fc94 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[6][1], "%.1f m.s");
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	33d3      	adds	r3, #211	; 0xd3
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <Clocker_Init+0x25c>)
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	0019      	movs	r1, r3
 8000efa:	2309      	movs	r3, #9
 8000efc:	001a      	movs	r2, r3
 8000efe:	f004 fc8a 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[7][0], "SUNRISE");
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	33e3      	adds	r3, #227	; 0xe3
 8000f06:	001a      	movs	r2, r3
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <Clocker_Init+0x260>)
 8000f0a:	0010      	movs	r0, r2
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	2308      	movs	r3, #8
 8000f10:	001a      	movs	r2, r3
 8000f12:	f004 fc80 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[7][1], "%d:%d");
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	33f3      	adds	r3, #243	; 0xf3
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	4b45      	ldr	r3, [pc, #276]	; (8001034 <Clocker_Init+0x264>)
 8000f1e:	0010      	movs	r0, r2
 8000f20:	0019      	movs	r1, r3
 8000f22:	2306      	movs	r3, #6
 8000f24:	001a      	movs	r2, r3
 8000f26:	f004 fc76 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[8][0], "SUNSET");
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	32ff      	adds	r2, #255	; 0xff
 8000f30:	4b41      	ldr	r3, [pc, #260]	; (8001038 <Clocker_Init+0x268>)
 8000f32:	0010      	movs	r0, r2
 8000f34:	0019      	movs	r1, r3
 8000f36:	2307      	movs	r3, #7
 8000f38:	001a      	movs	r2, r3
 8000f3a:	f004 fc6c 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[8][1], "%d:%d");
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3314      	adds	r3, #20
 8000f42:	33ff      	adds	r3, #255	; 0xff
 8000f44:	001a      	movs	r2, r3
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <Clocker_Init+0x264>)
 8000f48:	0010      	movs	r0, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	001a      	movs	r2, r3
 8000f50:	f004 fc61 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[9][0], "CITY");
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3324      	adds	r3, #36	; 0x24
 8000f58:	33ff      	adds	r3, #255	; 0xff
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <Clocker_Init+0x26c>)
 8000f5e:	0010      	movs	r0, r2
 8000f60:	0019      	movs	r1, r3
 8000f62:	2305      	movs	r3, #5
 8000f64:	001a      	movs	r2, r3
 8000f66:	f004 fc56 	bl	8005816 <memcpy>
	strcpy(myClocker->tableOfScreens[9][1], "%s");
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3334      	adds	r3, #52	; 0x34
 8000f6e:	33ff      	adds	r3, #255	; 0xff
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <Clocker_Init+0x238>)
 8000f74:	0010      	movs	r0, r2
 8000f76:	0019      	movs	r1, r3
 8000f78:	2303      	movs	r3, #3
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	f004 fc4b 	bl	8005816 <memcpy>
	myClocker->sTime = (RTC_TimeTypeDef *)malloc(sizeof(RTC_TimeTypeDef));
 8000f80:	2014      	movs	r0, #20
 8000f82:	f004 f9e5 	bl	8005350 <malloc>
 8000f86:	0003      	movs	r3, r0
 8000f88:	0019      	movs	r1, r3
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	23a2      	movs	r3, #162	; 0xa2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	50d1      	str	r1, [r2, r3]
	*myClocker->sTime = (RTC_TimeTypeDef){0};
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	23a2      	movs	r3, #162	; 0xa2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2314      	movs	r3, #20
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f004 fba3 	bl	80056ec <memset>
	myClocker->sDate = (RTC_DateTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8000fa6:	2004      	movs	r0, #4
 8000fa8:	f004 f9d2 	bl	8005350 <malloc>
 8000fac:	0003      	movs	r3, r0
 8000fae:	0019      	movs	r1, r3
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	23a4      	movs	r3, #164	; 0xa4
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	50d1      	str	r1, [r2, r3]
	*myClocker->sDate = (RTC_DateTypeDef){0};
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	23a4      	movs	r3, #164	; 0xa4
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	58d3      	ldr	r3, [r2, r3]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f004 fb90 	bl	80056ec <memset>
	myClocker->sAlarm = (RTC_AlarmTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f004 f9bf 	bl	8005350 <malloc>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	23a6      	movs	r3, #166	; 0xa6
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	50d1      	str	r1, [r2, r3]
	*myClocker->sAlarm = (RTC_AlarmTypeDef){0};
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	23a6      	movs	r3, #166	; 0xa6
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	58d3      	ldr	r3, [r2, r3]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2328      	movs	r3, #40	; 0x28
 8000fea:	001a      	movs	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f004 fb7d 	bl	80056ec <memset>
	myClocker->rtcHandle = rtcHandle;
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	23a8      	movs	r3, #168	; 0xa8
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	50d1      	str	r1, [r2, r3]
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b012      	add	sp, #72	; 0x48
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08005a48 	.word	0x08005a48
 8001008:	08005a50 	.word	0x08005a50
 800100c:	08005a54 	.word	0x08005a54
 8001010:	08005a60 	.word	0x08005a60
 8001014:	08005a6c 	.word	0x08005a6c
 8001018:	08005a78 	.word	0x08005a78
 800101c:	08005a84 	.word	0x08005a84
 8001020:	08005a90 	.word	0x08005a90
 8001024:	08005a9c 	.word	0x08005a9c
 8001028:	08005aa4 	.word	0x08005aa4
 800102c:	08005ab0 	.word	0x08005ab0
 8001030:	08005abc 	.word	0x08005abc
 8001034:	08005ac4 	.word	0x08005ac4
 8001038:	08005acc 	.word	0x08005acc
 800103c:	08005ad4 	.word	0x08005ad4

08001040 <Clocker_Set_Time>:

void Clocker_Set_Time(struct Clocker * myClocker, uint8_t newHours, uint8_t newMinutes, uint8_t newSeconds)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	000c      	movs	r4, r1
 800104a:	0010      	movs	r0, r2
 800104c:	0019      	movs	r1, r3
 800104e:	1cfb      	adds	r3, r7, #3
 8001050:	1c22      	adds	r2, r4, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	1cbb      	adds	r3, r7, #2
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	1c7b      	adds	r3, r7, #1
 800105c:	1c0a      	adds	r2, r1, #0
 800105e:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Hours = newHours;
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	23a2      	movs	r3, #162	; 0xa2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	58d3      	ldr	r3, [r2, r3]
 8001068:	1cfa      	adds	r2, r7, #3
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Minutes = newMinutes;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	23a2      	movs	r3, #162	; 0xa2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	58d3      	ldr	r3, [r2, r3]
 8001076:	1cba      	adds	r2, r7, #2
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	705a      	strb	r2, [r3, #1]
	myClocker->sTime->Seconds = newSeconds;
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	23a2      	movs	r3, #162	; 0xa2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	58d3      	ldr	r3, [r2, r3]
 8001084:	1c7a      	adds	r2, r7, #1
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	709a      	strb	r2, [r3, #2]
	myClocker->sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	23a2      	movs	r3, #162	; 0xa2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	58d3      	ldr	r3, [r2, r3]
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
	myClocker->sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	23a2      	movs	r3, #162	; 0xa2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	58d3      	ldr	r3, [r2, r3]
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	23a8      	movs	r3, #168	; 0xa8
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	58d0      	ldr	r0, [r2, r3]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	23a2      	movs	r3, #162	; 0xa2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	2200      	movs	r2, #0
 80010b4:	0019      	movs	r1, r3
 80010b6:	f002 f86b 	bl	8003190 <HAL_RTC_SetTime>
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b003      	add	sp, #12
 80010c0:	bd90      	pop	{r4, r7, pc}
	...

080010c4 <Clocker_Set_Alarm>:

void Clocker_Set_Alarm(struct Clocker * myClocker, uint8_t alarmHours, uint8_t alarmMinutes)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	0008      	movs	r0, r1
 80010ce:	0011      	movs	r1, r2
 80010d0:	1cfb      	adds	r3, r7, #3
 80010d2:	1c02      	adds	r2, r0, #0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	1cbb      	adds	r3, r7, #2
 80010d8:	1c0a      	adds	r2, r1, #0
 80010da:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Hours = alarmHours;
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	23a6      	movs	r3, #166	; 0xa6
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	58d3      	ldr	r3, [r2, r3]
 80010e4:	1cfa      	adds	r2, r7, #3
 80010e6:	7812      	ldrb	r2, [r2, #0]
 80010e8:	701a      	strb	r2, [r3, #0]
	myClocker->sAlarm->AlarmTime.Minutes = alarmMinutes;
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	23a6      	movs	r3, #166	; 0xa6
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	58d3      	ldr	r3, [r2, r3]
 80010f2:	1cba      	adds	r2, r7, #2
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	705a      	strb	r2, [r3, #1]
	myClocker->sAlarm->AlarmTime.Seconds = 0x0;
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	23a6      	movs	r3, #166	; 0xa6
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	58d3      	ldr	r3, [r2, r3]
 8001100:	2200      	movs	r2, #0
 8001102:	709a      	strb	r2, [r3, #2]
	myClocker->sAlarm->AlarmTime.SubSeconds = 0x0;
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	23a6      	movs	r3, #166	; 0xa6
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	58d3      	ldr	r3, [r2, r3]
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
	myClocker->sAlarm->AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	23a6      	movs	r3, #166	; 0xa6
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
	myClocker->sAlarm->AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	23a6      	movs	r3, #166	; 0xa6
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	58d3      	ldr	r3, [r2, r3]
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
	myClocker->sAlarm->AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	23a6      	movs	r3, #166	; 0xa6
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	58d3      	ldr	r3, [r2, r3]
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <Clocker_Set_Alarm+0xc4>)
 8001132:	615a      	str	r2, [r3, #20]
	myClocker->sAlarm->AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	23a6      	movs	r3, #166	; 0xa6
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	58d3      	ldr	r3, [r2, r3]
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
	myClocker->sAlarm->AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	23a6      	movs	r3, #166	; 0xa6
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	58d3      	ldr	r3, [r2, r3]
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
	myClocker->sAlarm->AlarmDateWeekDay = 0x1;
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	23a6      	movs	r3, #166	; 0xa6
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	58d3      	ldr	r3, [r2, r3]
 8001154:	2220      	movs	r2, #32
 8001156:	2101      	movs	r1, #1
 8001158:	5499      	strb	r1, [r3, r2]
	myClocker->sAlarm->Alarm = RTC_ALARM_A;
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	23a6      	movs	r3, #166	; 0xa6
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	58d3      	ldr	r3, [r2, r3]
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	0052      	lsls	r2, r2, #1
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTC_SetAlarm(myClocker->rtcHandle, myClocker->sAlarm, RTC_FORMAT_BCD);
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	23a8      	movs	r3, #168	; 0xa8
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	58d0      	ldr	r0, [r2, r3]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	23a6      	movs	r3, #166	; 0xa6
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	58d3      	ldr	r3, [r2, r3]
 8001178:	2201      	movs	r2, #1
 800117a:	0019      	movs	r1, r3
 800117c:	f002 f9f4 	bl	8003568 <HAL_RTC_SetAlarm>
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	80000080 	.word	0x80000080

0800118c <Clocker_Segment_Update>:

void Clocker_Segment_Update(struct Clocker * myClocker)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	uint8_t tempTime[4] = {0};
 8001194:	240c      	movs	r4, #12
 8001196:	193b      	adds	r3, r7, r4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
	HAL_RTC_GetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	23a8      	movs	r3, #168	; 0xa8
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	58d0      	ldr	r0, [r2, r3]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	23a2      	movs	r3, #162	; 0xa2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	58d3      	ldr	r3, [r2, r3]
 80011ac:	2200      	movs	r2, #0
 80011ae:	0019      	movs	r1, r3
 80011b0:	f002 f898 	bl	80032e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(myClocker->rtcHandle, myClocker->sDate, RTC_FORMAT_BIN);
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	23a8      	movs	r3, #168	; 0xa8
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	58d0      	ldr	r0, [r2, r3]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	23a4      	movs	r3, #164	; 0xa4
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	58d3      	ldr	r3, [r2, r3]
 80011c4:	2200      	movs	r2, #0
 80011c6:	0019      	movs	r1, r3
 80011c8:	f002 f97e 	bl	80034c8 <HAL_RTC_GetDate>
	tempTime[0] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)/10);
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	23a2      	movs	r3, #162	; 0xa2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	58d3      	ldr	r3, [r2, r3]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	210a      	movs	r1, #10
 80011d8:	0018      	movs	r0, r3
 80011da:	f7fe ff9d 	bl	8000118 <__udivsi3>
 80011de:	0003      	movs	r3, r0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f844 	bl	8001270 <Clocker_Convert_Int_to_Segment>
 80011e8:	0003      	movs	r3, r0
 80011ea:	001a      	movs	r2, r3
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	701a      	strb	r2, [r3, #0]
	tempTime[1] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)%10);
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	23a2      	movs	r3, #162	; 0xa2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	58d3      	ldr	r3, [r2, r3]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	210a      	movs	r1, #10
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff f811 	bl	8000224 <__aeabi_uidivmod>
 8001202:	000b      	movs	r3, r1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	0018      	movs	r0, r3
 8001208:	f000 f832 	bl	8001270 <Clocker_Convert_Int_to_Segment>
 800120c:	0003      	movs	r3, r0
 800120e:	001a      	movs	r2, r3
 8001210:	193b      	adds	r3, r7, r4
 8001212:	705a      	strb	r2, [r3, #1]
	tempTime[2] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)/10);
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	23a2      	movs	r3, #162	; 0xa2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	58d3      	ldr	r3, [r2, r3]
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	210a      	movs	r1, #10
 8001220:	0018      	movs	r0, r3
 8001222:	f7fe ff79 	bl	8000118 <__udivsi3>
 8001226:	0003      	movs	r3, r0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	0018      	movs	r0, r3
 800122c:	f000 f820 	bl	8001270 <Clocker_Convert_Int_to_Segment>
 8001230:	0003      	movs	r3, r0
 8001232:	001a      	movs	r2, r3
 8001234:	193b      	adds	r3, r7, r4
 8001236:	709a      	strb	r2, [r3, #2]
	tempTime[3] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)%10);
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	23a2      	movs	r3, #162	; 0xa2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	58d3      	ldr	r3, [r2, r3]
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	210a      	movs	r1, #10
 8001244:	0018      	movs	r0, r3
 8001246:	f7fe ffed 	bl	8000224 <__aeabi_uidivmod>
 800124a:	000b      	movs	r3, r1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f80e 	bl	8001270 <Clocker_Convert_Int_to_Segment>
 8001254:	0003      	movs	r3, r0
 8001256:	001a      	movs	r2, r3
 8001258:	193b      	adds	r3, r7, r4
 800125a:	70da      	strb	r2, [r3, #3]
	tm1637_DisplayHandle(7, tempTime);
 800125c:	193b      	adds	r3, r7, r4
 800125e:	0019      	movs	r1, r3
 8001260:	2007      	movs	r0, #7
 8001262:	f000 fba1 	bl	80019a8 <tm1637_DisplayHandle>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b005      	add	sp, #20
 800126c:	bd90      	pop	{r4, r7, pc}
	...

08001270 <Clocker_Convert_Int_to_Segment>:

uint8_t Clocker_Convert_Int_to_Segment(uint8_t c)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	0002      	movs	r2, r0
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	701a      	strb	r2, [r3, #0]
	switch(c)
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d818      	bhi.n	80012b6 <Clocker_Convert_Int_to_Segment+0x46>
 8001284:	009a      	lsls	r2, r3, #2
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <Clocker_Convert_Int_to_Segment+0x50>)
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 800128e:	233f      	movs	r3, #63	; 0x3f
 8001290:	e012      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 1 : return 0x06;
 8001292:	2306      	movs	r3, #6
 8001294:	e010      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 2 : return 0x5b;
 8001296:	235b      	movs	r3, #91	; 0x5b
 8001298:	e00e      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 3 : return 0x4f;
 800129a:	234f      	movs	r3, #79	; 0x4f
 800129c:	e00c      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 4 : return 0x66;
 800129e:	2366      	movs	r3, #102	; 0x66
 80012a0:	e00a      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 5 : return 0x6d;
 80012a2:	236d      	movs	r3, #109	; 0x6d
 80012a4:	e008      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 6 : return 0x7d;
 80012a6:	237d      	movs	r3, #125	; 0x7d
 80012a8:	e006      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 7 : return 0x07;
 80012aa:	2307      	movs	r3, #7
 80012ac:	e004      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 8 : return 0x7f;
 80012ae:	237f      	movs	r3, #127	; 0x7f
 80012b0:	e002      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
		case 9 : return 0x6f;
 80012b2:	236f      	movs	r3, #111	; 0x6f
 80012b4:	e000      	b.n	80012b8 <Clocker_Convert_Int_to_Segment+0x48>
	}
	return 0x3f;
 80012b6:	233f      	movs	r3, #63	; 0x3f
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	08005b04 	.word	0x08005b04

080012c4 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0004      	movs	r4, r0
 80012cc:	0008      	movs	r0, r1
 80012ce:	0011      	movs	r1, r2
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	1c22      	adds	r2, r4, #0
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	1dbb      	adds	r3, r7, #6
 80012d8:	1c02      	adds	r2, r0, #0
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	1d7b      	adds	r3, r7, #5
 80012de:	1c0a      	adds	r2, r1, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	1dbb      	adds	r3, r7, #6
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	18d3      	adds	r3, r2, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	1d7b      	adds	r3, r7, #5
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	2016      	movs	r0, #22
 80012fe:	183b      	adds	r3, r7, r0
 8001300:	3206      	adds	r2, #6
 8001302:	32ff      	adds	r2, #255	; 0xff
 8001304:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 8001306:	183b      	adds	r3, r7, r0
 8001308:	183a      	adds	r2, r7, r0
 800130a:	8812      	ldrh	r2, [r2, #0]
 800130c:	4252      	negs	r2, r2
 800130e:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8001310:	210c      	movs	r1, #12
 8001312:	187b      	adds	r3, r7, r1
 8001314:	227e      	movs	r2, #126	; 0x7e
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	187b      	adds	r3, r7, r1
 800131a:	22ff      	movs	r2, #255	; 0xff
 800131c:	705a      	strb	r2, [r3, #1]
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2206      	movs	r2, #6
 8001322:	709a      	strb	r2, [r3, #2]
 8001324:	187b      	adds	r3, r7, r1
 8001326:	1dfa      	adds	r2, r7, #7
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	70da      	strb	r2, [r3, #3]
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2200      	movs	r2, #0
 8001330:	711a      	strb	r2, [r3, #4]
 8001332:	187b      	adds	r3, r7, r1
 8001334:	1dba      	adds	r2, r7, #6
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	715a      	strb	r2, [r3, #5]
 800133a:	187b      	adds	r3, r7, r1
 800133c:	1d7a      	adds	r2, r7, #5
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	719a      	strb	r2, [r3, #6]
 8001342:	183b      	adds	r3, r7, r0
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	b29b      	uxth	r3, r3
 800134a:	b2da      	uxtb	r2, r3
 800134c:	187b      	adds	r3, r7, r1
 800134e:	71da      	strb	r2, [r3, #7]
 8001350:	183b      	adds	r3, r7, r0
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	187b      	adds	r3, r7, r1
 8001358:	721a      	strb	r2, [r3, #8]
 800135a:	187b      	adds	r3, r7, r1
 800135c:	22ef      	movs	r2, #239	; 0xef
 800135e:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8001360:	2301      	movs	r3, #1
 8001362:	425b      	negs	r3, r3
 8001364:	1879      	adds	r1, r7, r1
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <Send_cmd+0xb4>)
 8001368:	220a      	movs	r2, #10
 800136a:	f003 f81b 	bl	80043a4 <HAL_UART_Transmit>
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b007      	add	sp, #28
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000130 	.word	0x20000130

0800137c <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	2003      	movs	r0, #3
 8001386:	f7ff ff9d 	bl	80012c4 <Send_cmd>
  HAL_Delay(200);
 800138a:	20c8      	movs	r0, #200	; 0xc8
 800138c:	f000 fc14 	bl	8001bb8 <HAL_Delay>
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <DF_Init>:


void DF_Init (uint8_t volume)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	0002      	movs	r2, r0
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 80013a2:	2202      	movs	r2, #2
 80013a4:	2100      	movs	r1, #0
 80013a6:	203f      	movs	r0, #63	; 0x3f
 80013a8:	f7ff ff8c 	bl	80012c4 <Send_cmd>
	HAL_Delay(200);
 80013ac:	20c8      	movs	r0, #200	; 0xc8
 80013ae:	f000 fc03 	bl	8001bb8 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	001a      	movs	r2, r3
 80013b8:	2100      	movs	r1, #0
 80013ba:	2006      	movs	r0, #6
 80013bc:	f7ff ff82 	bl	80012c4 <Send_cmd>
	HAL_Delay(500);
 80013c0:	23fa      	movs	r3, #250	; 0xfa
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 fbf7 	bl	8001bb8 <HAL_Delay>
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	0002      	movs	r2, r0
 80013dc:	1dbb      	adds	r3, r7, #6
 80013de:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <delay+0x30>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <delay+0x30>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3f8      	bcc.n	80013ea <delay+0x16>
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	200000f0 	.word	0x200000f0

08001408 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	0002      	movs	r2, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	23a0      	movs	r3, #160	; 0xa0
 800141c:	05db      	lsls	r3, r3, #23
 800141e:	2120      	movs	r1, #32
 8001420:	0018      	movs	r0, r3
 8001422:	f000 fe66 	bl	80020f2 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	b2da      	uxtb	r2, r3
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	0059      	lsls	r1, r3, #1
 8001438:	23a0      	movs	r3, #160	; 0xa0
 800143a:	05db      	lsls	r3, r3, #23
 800143c:	0018      	movs	r0, r3
 800143e:	f000 fe58 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2201      	movs	r2, #1
 800144c:	4013      	ands	r3, r2
 800144e:	b2da      	uxtb	r2, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	0099      	lsls	r1, r3, #2
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	0018      	movs	r0, r3
 800145a:	f000 fe4a 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <send_to_lcd+0xb4>)
 800146e:	001a      	movs	r2, r3
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	f000 fe3e 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	4013      	ands	r3, r2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	480f      	ldr	r0, [pc, #60]	; (80014c0 <send_to_lcd+0xb8>)
 8001482:	001a      	movs	r2, r3
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	f000 fe34 	bl	80020f2 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	2201      	movs	r2, #1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fe2d 	bl	80020f2 <HAL_GPIO_WritePin>
	delay (20);
 8001498:	2014      	movs	r0, #20
 800149a:	f7ff ff9b 	bl	80013d4 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800149e:	23a0      	movs	r3, #160	; 0xa0
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	2200      	movs	r2, #0
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0018      	movs	r0, r3
 80014a8:	f000 fe23 	bl	80020f2 <HAL_GPIO_WritePin>
	delay (20);
 80014ac:	2014      	movs	r0, #20
 80014ae:	f7ff ff91 	bl	80013d4 <delay>
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b002      	add	sp, #8
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	50000800 	.word	0x50000800
 80014c0:	50000400 	.word	0x50000400

080014c4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0002      	movs	r2, r0
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80014d0:	200f      	movs	r0, #15
 80014d2:	183b      	adds	r3, r7, r0
 80014d4:	1dfa      	adds	r2, r7, #7
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	0912      	lsrs	r2, r2, #4
 80014da:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80014dc:	0004      	movs	r4, r0
 80014de:	183b      	adds	r3, r7, r0
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2100      	movs	r1, #0
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff8f 	bl	8001408 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80014ea:	0020      	movs	r0, r4
 80014ec:	183b      	adds	r3, r7, r0
 80014ee:	1dfa      	adds	r2, r7, #7
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	210f      	movs	r1, #15
 80014f4:	400a      	ands	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 80014f8:	183b      	adds	r3, r7, r0
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2100      	movs	r1, #0
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff ff82 	bl	8001408 <send_to_lcd>
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b005      	add	sp, #20
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <lcd_send_data>:

void lcd_send_data (char data)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	0002      	movs	r2, r0
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8001518:	200f      	movs	r0, #15
 800151a:	183b      	adds	r3, r7, r0
 800151c:	1dfa      	adds	r2, r7, #7
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	0912      	lsrs	r2, r2, #4
 8001522:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001524:	0004      	movs	r4, r0
 8001526:	183b      	adds	r3, r7, r0
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2101      	movs	r1, #1
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff6b 	bl	8001408 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8001532:	0020      	movs	r0, r4
 8001534:	183b      	adds	r3, r7, r0
 8001536:	1dfa      	adds	r2, r7, #7
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	210f      	movs	r1, #15
 800153c:	400a      	ands	r2, r1
 800153e:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8001540:	183b      	adds	r3, r7, r0
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff ff5e 	bl	8001408 <send_to_lcd>
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b005      	add	sp, #20
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <lcd_clear>:

void lcd_clear (void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff ffb3 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(2);
 800155e:	2002      	movs	r0, #2
 8001560:	f000 fb2a 	bl	8001bb8 <HAL_Delay>
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
    switch (row)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <lcd_put_cur+0x18>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d005      	beq.n	800158c <lcd_put_cur+0x22>
 8001580:	e009      	b.n	8001596 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	4313      	orrs	r3, r2
 8001588:	603b      	str	r3, [r7, #0]
            break;
 800158a:	e004      	b.n	8001596 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	22c0      	movs	r2, #192	; 0xc0
 8001590:	4313      	orrs	r3, r2
 8001592:	603b      	str	r3, [r7, #0]
            break;
 8001594:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff ff92 	bl	80014c4 <lcd_send_cmd>
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <lcd_init>:


void lcd_init (void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80015ac:	2032      	movs	r0, #50	; 0x32
 80015ae:	f000 fb03 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80015b2:	2030      	movs	r0, #48	; 0x30
 80015b4:	f7ff ff86 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80015b8:	2005      	movs	r0, #5
 80015ba:	f000 fafd 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80015be:	2030      	movs	r0, #48	; 0x30
 80015c0:	f7ff ff80 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80015c4:	2001      	movs	r0, #1
 80015c6:	f000 faf7 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80015ca:	2030      	movs	r0, #48	; 0x30
 80015cc:	f7ff ff7a 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 faf1 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80015d6:	2020      	movs	r0, #32
 80015d8:	f7ff ff74 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(10);
 80015dc:	200a      	movs	r0, #10
 80015de:	f000 faeb 	bl	8001bb8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80015e2:	2028      	movs	r0, #40	; 0x28
 80015e4:	f7ff ff6e 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(1);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f000 fae5 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80015ee:	2008      	movs	r0, #8
 80015f0:	f7ff ff68 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(1);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fadf 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff ff62 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f000 fad9 	bl	8001bb8 <HAL_Delay>
	HAL_Delay(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f000 fad6 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800160c:	2006      	movs	r0, #6
 800160e:	f7ff ff59 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f000 fad0 	bl	8001bb8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001618:	200c      	movs	r0, #12
 800161a:	f7ff ff53 	bl	80014c4 <lcd_send_cmd>
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800162c:	e006      	b.n	800163c <lcd_send_string+0x18>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff ff68 	bl	800150c <lcd_send_data>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f4      	bne.n	800162e <lcd_send_string+0xa>
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	480a      	ldr	r0, [pc, #40]	; (8001684 <tm1637_CLKhigh+0x34>)
 800165a:	2201      	movs	r2, #1
 800165c:	0019      	movs	r1, r3
 800165e:	f000 fd48 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <tm1637_CLKhigh+0x34>)
 8001668:	2201      	movs	r2, #1
 800166a:	0019      	movs	r1, r3
 800166c:	f000 fd41 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <tm1637_CLKhigh+0x34>)
 8001676:	2201      	movs	r2, #1
 8001678:	0019      	movs	r1, r3
 800167a:	f000 fd3a 	bl	80020f2 <HAL_GPIO_WritePin>
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	50000400 	.word	0x50000400

08001688 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <tm1637_CLKlow+0x34>)
 8001692:	2200      	movs	r2, #0
 8001694:	0019      	movs	r1, r3
 8001696:	f000 fd2c 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4807      	ldr	r0, [pc, #28]	; (80016bc <tm1637_CLKlow+0x34>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	0019      	movs	r1, r3
 80016a4:	f000 fd25 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <tm1637_CLKlow+0x34>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	0019      	movs	r1, r3
 80016b2:	f000 fd1e 	bl	80020f2 <HAL_GPIO_WritePin>
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	50000400 	.word	0x50000400

080016c0 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <tm1637_SDOhigh+0x34>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	0019      	movs	r1, r3
 80016ce:	f000 fd10 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <tm1637_SDOhigh+0x34>)
 80016d8:	2201      	movs	r2, #1
 80016da:	0019      	movs	r1, r3
 80016dc:	f000 fd09 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <tm1637_SDOhigh+0x34>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	0019      	movs	r1, r3
 80016ea:	f000 fd02 	bl	80020f2 <HAL_GPIO_WritePin>
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	50000400 	.word	0x50000400

080016f8 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	480a      	ldr	r0, [pc, #40]	; (800172c <tm1637_SDOlow+0x34>)
 8001702:	2200      	movs	r2, #0
 8001704:	0019      	movs	r1, r3
 8001706:	f000 fcf4 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <tm1637_SDOlow+0x34>)
 8001710:	2200      	movs	r2, #0
 8001712:	0019      	movs	r1, r3
 8001714:	f000 fced 	bl	80020f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <tm1637_SDOlow+0x34>)
 800171e:	2200      	movs	r2, #0
 8001720:	0019      	movs	r1, r3
 8001722:	f000 fce6 	bl	80020f2 <HAL_GPIO_WritePin>
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	50000400 	.word	0x50000400

08001730 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8001734:	f7ff ff8c 	bl	8001650 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8001738:	f7ff ffc2 	bl	80016c0 <tm1637_SDOhigh>
	tm1637_SDOlow();
 800173c:	f7ff ffdc 	bl	80016f8 <tm1637_SDOlow>

	tm1637_CLKlow();
 8001740:	f7ff ffa2 	bl	8001688 <tm1637_CLKlow>
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 800174e:	f7ff ff9b 	bl	8001688 <tm1637_CLKlow>
	tm1637_SDOlow();
 8001752:	f7ff ffd1 	bl	80016f8 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8001756:	f7ff ff7b 	bl	8001650 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 800175a:	f7ff ffb1 	bl	80016c0 <tm1637_SDOhigh>
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800176c:	230f      	movs	r3, #15
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e01a      	b.n	80017ac <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8001776:	f7ff ff87 	bl	8001688 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 800177a:	230f      	movs	r3, #15
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b25b      	sxtb	r3, r3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d102      	bne.n	8001792 <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 800178c:	f7ff ff98 	bl	80016c0 <tm1637_SDOhigh>
 8001790:	e001      	b.n	8001796 <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8001792:	f7ff ffb1 	bl	80016f8 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8001796:	f7ff ff5b 	bl	8001650 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800179a:	210f      	movs	r1, #15
 800179c:	187b      	adds	r3, r7, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	2b07      	cmp	r3, #7
 80017b6:	ddde      	ble.n	8001776 <tm1637_DataOut+0x12>
	} 
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b004      	add	sp, #16
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 80017ca:	230c      	movs	r3, #12
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80017d6:	2317      	movs	r3, #23
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	e018      	b.n	8001812 <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	001a      	movs	r2, r3
 80017e6:	2117      	movs	r1, #23
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	411a      	asrs	r2, r3
 80017ee:	0013      	movs	r3, r2
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	4193      	sbcs	r3, r2
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	0008      	movs	r0, r1
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	0011      	movs	r1, r2
 8001802:	220c      	movs	r2, #12
 8001804:	18ba      	adds	r2, r7, r2
 8001806:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001808:	183b      	adds	r3, r7, r0
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	183b      	adds	r3, r7, r0
 800180e:	3201      	adds	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	2317      	movs	r3, #23
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b07      	cmp	r3, #7
 800181a:	d9e1      	bls.n	80017e0 <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 800181c:	f7ff ff88 	bl	8001730 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8001820:	230c      	movs	r3, #12
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff ff9d 	bl	8001764 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 800182a:	f7ff ff2d 	bl	8001688 <tm1637_CLKlow>
	tm1637_CLKhigh();
 800182e:	f7ff ff0f 	bl	8001650 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8001832:	f000 f89f 	bl	8001974 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	001a      	movs	r2, r3
 800183c:	23c0      	movs	r3, #192	; 0xc0
 800183e:	4013      	ands	r3, r2
 8001840:	2bc0      	cmp	r3, #192	; 0xc0
 8001842:	d001      	beq.n	8001848 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8001844:	f7ff ff81 	bl	800174a <tm1637_EndPacket>
	}

}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}

08001850 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	000a      	movs	r2, r1
 800185a:	1cfb      	adds	r3, r7, #3
 800185c:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 800185e:	230c      	movs	r3, #12
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 800186a:	2317      	movs	r3, #23
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e037      	b.n	80018e4 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8001874:	2316      	movs	r3, #22
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e01c      	b.n	80018b8 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 800187e:	2317      	movs	r3, #23
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	001a      	movs	r2, r3
 800188c:	2116      	movs	r1, #22
 800188e:	187b      	adds	r3, r7, r1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	411a      	asrs	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	4193      	sbcs	r3, r2
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	0008      	movs	r0, r1
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	0011      	movs	r1, r2
 80018a8:	220c      	movs	r2, #12
 80018aa:	18ba      	adds	r2, r7, r2
 80018ac:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 80018ae:	183b      	adds	r3, r7, r0
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	183b      	adds	r3, r7, r0
 80018b4:	3201      	adds	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	2316      	movs	r3, #22
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	d9dd      	bls.n	800187e <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 80018c2:	230c      	movs	r3, #12
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff ff4c 	bl	8001764 <tm1637_DataOut>
		tm1637_CLKlow();
 80018cc:	f7ff fedc 	bl	8001688 <tm1637_CLKlow>
		tm1637_CLKhigh();
 80018d0:	f7ff febe 	bl	8001650 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 80018d4:	f000 f84e 	bl	8001974 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 80018d8:	2117      	movs	r1, #23
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	3201      	adds	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	2317      	movs	r3, #23
 80018e6:	18fa      	adds	r2, r7, r3
 80018e8:	1cfb      	adds	r3, r7, #3
 80018ea:	7812      	ldrb	r2, [r2, #0]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d3c0      	bcc.n	8001874 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 80018f2:	f7ff ff2a 	bl	800174a <tm1637_EndPacket>


}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b006      	add	sp, #24
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	0002      	movs	r2, r0
 8001908:	1dfb      	adds	r3, r7, #7
 800190a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 800190c:	240c      	movs	r4, #12
 800190e:	193b      	adds	r3, r7, r4
 8001910:	0018      	movs	r0, r3
 8001912:	2314      	movs	r3, #20
 8001914:	001a      	movs	r2, r3
 8001916:	2100      	movs	r1, #0
 8001918:	f003 fee8 	bl	80056ec <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 800191c:	0021      	movs	r1, r4
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	0052      	lsls	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <tm1637_Initialize+0x52>
 800193a:	2b01      	cmp	r3, #1
 800193c:	d114      	bne.n	8001968 <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001944:	187b      	adds	r3, r7, r1
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <tm1637_Initialize+0x70>)
 8001948:	0019      	movs	r1, r3
 800194a:	0010      	movs	r0, r2
 800194c:	f000 fa36 	bl	8001dbc <HAL_GPIO_Init>
			break;
 8001950:	e00a      	b.n	8001968 <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	210c      	movs	r1, #12
 8001954:	187b      	adds	r3, r7, r1
 8001956:	2201      	movs	r2, #1
 8001958:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195a:	187b      	adds	r3, r7, r1
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <tm1637_Initialize+0x70>)
 800195e:	0019      	movs	r1, r3
 8001960:	0010      	movs	r0, r2
 8001962:	f000 fa2b 	bl	8001dbc <HAL_GPIO_Init>
			break;
 8001966:	46c0      	nop			; (mov r8, r8)

	}

}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b009      	add	sp, #36	; 0x24
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	50000c00 	.word	0x50000c00

08001974 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff ffc1 	bl	8001900 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 800197e:	f7ff fe83 	bl	8001688 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001982:	e002      	b.n	800198a <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff ffbb 	bl	8001900 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <tm1637_ACKcheck+0x30>)
 8001990:	0019      	movs	r1, r3
 8001992:	0010      	movs	r0, r2
 8001994:	f000 fb90 	bl	80020b8 <HAL_GPIO_ReadPin>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d1f3      	bne.n	8001984 <tm1637_ACKcheck+0x10>
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	50000400 	.word	0x50000400

080019a8 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	0002      	movs	r2, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 80019b6:	210c      	movs	r1, #12
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <tm1637_DisplayHandle+0x78>)
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 80019c0:	250f      	movs	r5, #15
 80019c2:	197b      	adds	r3, r7, r5
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d81f      	bhi.n	8001a10 <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2240      	movs	r2, #64	; 0x40
 80019d4:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80019d6:	000c      	movs	r4, r1
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff fef1 	bl	80017c2 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 80019e0:	0021      	movs	r1, r4
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	22c0      	movs	r2, #192	; 0xc0
 80019e6:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff fee9 	bl	80017c2 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2104      	movs	r1, #4
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff ff2b 	bl	8001850 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 f810 	bl	8001a24 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8001a04:	197b      	adds	r3, r7, r5
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	e002      	b.n	8001a16 <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 8001a10:	230f      	movs	r3, #15
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	781b      	ldrb	r3, [r3, #0]
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	08005adc 	.word	0x08005adc

08001a24 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 8001a30:	230c      	movs	r3, #12
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8001a3c:	2316      	movs	r3, #22
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b07      	cmp	r3, #7
 8001a4a:	d83e      	bhi.n	8001aca <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	1dfa      	adds	r2, r7, #7
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	2178      	movs	r1, #120	; 0x78
 8001a54:	4249      	negs	r1, r1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8001a5a:	2317      	movs	r3, #23
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	e017      	b.n	8001a94 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8001a64:	1dfb      	adds	r3, r7, #7
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	2117      	movs	r1, #23
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	411a      	asrs	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	1e5a      	subs	r2, r3, #1
 8001a78:	4193      	sbcs	r3, r2
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	0008      	movs	r0, r1
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	0011      	movs	r1, r2
 8001a84:	220c      	movs	r2, #12
 8001a86:	18ba      	adds	r2, r7, r2
 8001a88:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	183b      	adds	r3, r7, r0
 8001a90:	3201      	adds	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	2317      	movs	r3, #23
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	d9e2      	bls.n	8001a64 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 8001a9e:	f7ff fe47 	bl	8001730 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7ff fe5c 	bl	8001764 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8001aac:	f7ff fdec 	bl	8001688 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8001ab0:	f7ff fdce 	bl	8001650 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8001ab4:	f7ff ff5e 	bl	8001974 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8001ab8:	f7ff fe47 	bl	800174a <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8001abc:	2116      	movs	r1, #22
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	e002      	b.n	8001ad0 <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 8001aca:	2316      	movs	r3, #22
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	781b      	ldrb	r3, [r3, #0]
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b006      	add	sp, #24
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_Init+0x3c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Init+0x3c>)
 8001aea:	2140      	movs	r1, #64	; 0x40
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 f811 	bl	8001b18 <HAL_InitTick>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e001      	b.n	8001b06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b02:	f7ff f83f 	bl	8000b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_InitTick+0x5c>)
 8001b22:	681c      	ldr	r4, [r3, #0]
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_InitTick+0x60>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	0019      	movs	r1, r3
 8001b2a:	23fa      	movs	r3, #250	; 0xfa
 8001b2c:	0098      	lsls	r0, r3, #2
 8001b2e:	f7fe faf3 	bl	8000118 <__udivsi3>
 8001b32:	0003      	movs	r3, r0
 8001b34:	0019      	movs	r1, r3
 8001b36:	0020      	movs	r0, r4
 8001b38:	f7fe faee 	bl	8000118 <__udivsi3>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 f92f 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e00f      	b.n	8001b6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d80b      	bhi.n	8001b6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	2301      	movs	r3, #1
 8001b56:	425b      	negs	r3, r3
 8001b58:	2200      	movs	r2, #0
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 f8fc 	bl	8001d58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_InitTick+0x64>)
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b003      	add	sp, #12
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_IncTick+0x1c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	001a      	movs	r2, r3
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	18d2      	adds	r2, r2, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000314 	.word	0x20000314

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <HAL_GetTick+0x10>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	20000314 	.word	0x20000314

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	189b      	adds	r3, r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	f7ff ffe0 	bl	8001ba4 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b004      	add	sp, #16
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	20000008 	.word	0x20000008

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	0002      	movs	r2, r0
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b7f      	cmp	r3, #127	; 0x7f
 8001c12:	d809      	bhi.n	8001c28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c14:	1dfb      	adds	r3, r7, #7
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	001a      	movs	r2, r3
 8001c1a:	231f      	movs	r3, #31
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_EnableIRQ+0x30>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	4091      	lsls	r1, r2
 8001c24:	000a      	movs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
  }
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b7f      	cmp	r3, #127	; 0x7f
 8001c48:	d828      	bhi.n	8001c9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c4a:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <__NVIC_SetPriority+0xd4>)
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	33c0      	adds	r3, #192	; 0xc0
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	589b      	ldr	r3, [r3, r2]
 8001c5a:	1dfa      	adds	r2, r7, #7
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	0011      	movs	r1, r2
 8001c60:	2203      	movs	r2, #3
 8001c62:	400a      	ands	r2, r1
 8001c64:	00d2      	lsls	r2, r2, #3
 8001c66:	21ff      	movs	r1, #255	; 0xff
 8001c68:	4091      	lsls	r1, r2
 8001c6a:	000a      	movs	r2, r1
 8001c6c:	43d2      	mvns	r2, r2
 8001c6e:	401a      	ands	r2, r3
 8001c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	22ff      	movs	r2, #255	; 0xff
 8001c78:	401a      	ands	r2, r3
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	2303      	movs	r3, #3
 8001c82:	4003      	ands	r3, r0
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c88:	481f      	ldr	r0, [pc, #124]	; (8001d08 <__NVIC_SetPriority+0xd4>)
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	430a      	orrs	r2, r1
 8001c94:	33c0      	adds	r3, #192	; 0xc0
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c9a:	e031      	b.n	8001d00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <__NVIC_SetPriority+0xd8>)
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	3b08      	subs	r3, #8
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3306      	adds	r3, #6
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	18d3      	adds	r3, r2, r3
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1dfa      	adds	r2, r7, #7
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	0011      	movs	r1, r2
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	00d2      	lsls	r2, r2, #3
 8001cc2:	21ff      	movs	r1, #255	; 0xff
 8001cc4:	4091      	lsls	r1, r2
 8001cc6:	000a      	movs	r2, r1
 8001cc8:	43d2      	mvns	r2, r2
 8001cca:	401a      	ands	r2, r3
 8001ccc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	22ff      	movs	r2, #255	; 0xff
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	0018      	movs	r0, r3
 8001cdc:	2303      	movs	r3, #3
 8001cde:	4003      	ands	r3, r0
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce4:	4809      	ldr	r0, [pc, #36]	; (8001d0c <__NVIC_SetPriority+0xd8>)
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	001c      	movs	r4, r3
 8001cec:	230f      	movs	r3, #15
 8001cee:	4023      	ands	r3, r4
 8001cf0:	3b08      	subs	r3, #8
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	3306      	adds	r3, #6
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	18c3      	adds	r3, r0, r3
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b003      	add	sp, #12
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	1e5a      	subs	r2, r3, #1
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	045b      	lsls	r3, r3, #17
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d301      	bcc.n	8001d28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d24:	2301      	movs	r3, #1
 8001d26:	e010      	b.n	8001d4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <SysTick_Config+0x44>)
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	3a01      	subs	r2, #1
 8001d2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d30:	2301      	movs	r3, #1
 8001d32:	425b      	negs	r3, r3
 8001d34:	2103      	movs	r1, #3
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff ff7c 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x44>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x44>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	210f      	movs	r1, #15
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	1c02      	adds	r2, r0, #0
 8001d68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	0002      	movs	r2, r0
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff ff33 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff ffaf 	bl	8001d10 <SysTick_Config>
 8001db2:	0003      	movs	r3, r0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dd2:	e155      	b.n	8002080 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d100      	bne.n	8001dec <HAL_GPIO_Init+0x30>
 8001dea:	e146      	b.n	800207a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d005      	beq.n	8001e04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d130      	bne.n	8001e66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	409a      	lsls	r2, r3
 8001e12:	0013      	movs	r3, r2
 8001e14:	43da      	mvns	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	43da      	mvns	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	2201      	movs	r2, #1
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d017      	beq.n	8001ea2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d123      	bne.n	8001ef6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	58d3      	ldr	r3, [r2, r3]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2107      	movs	r1, #7
 8001eda:	400b      	ands	r3, r1
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	6939      	ldr	r1, [r7, #16]
 8001ef4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	409a      	lsls	r2, r3
 8001f04:	0013      	movs	r3, r2
 8001f06:	43da      	mvns	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2203      	movs	r2, #3
 8001f14:	401a      	ands	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4013      	ands	r3, r2
 8001f34:	d100      	bne.n	8001f38 <HAL_GPIO_Init+0x17c>
 8001f36:	e0a0      	b.n	800207a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_GPIO_Init+0x2dc>)
 8001f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_GPIO_Init+0x2dc>)
 8001f3e:	2101      	movs	r1, #1
 8001f40:	430a      	orrs	r2, r1
 8001f42:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f44:	4a55      	ldr	r2, [pc, #340]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	589b      	ldr	r3, [r3, r2]
 8001f50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2203      	movs	r2, #3
 8001f56:	4013      	ands	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	0013      	movs	r3, r2
 8001f60:	43da      	mvns	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	23a0      	movs	r3, #160	; 0xa0
 8001f6c:	05db      	lsls	r3, r3, #23
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d01f      	beq.n	8001fb2 <HAL_GPIO_Init+0x1f6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4a      	ldr	r2, [pc, #296]	; (80020a0 <HAL_GPIO_Init+0x2e4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d019      	beq.n	8001fae <HAL_GPIO_Init+0x1f2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	; (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x1ea>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a47      	ldr	r2, [pc, #284]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x1e6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <HAL_GPIO_Init+0x2f4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	e00a      	b.n	8001fb4 <HAL_GPIO_Init+0x1f8>
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	e008      	b.n	8001fb4 <HAL_GPIO_Init+0x1f8>
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x1f8>
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e004      	b.n	8001fb4 <HAL_GPIO_Init+0x1f8>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_Init+0x1f8>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_GPIO_Init+0x1f8>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	400a      	ands	r2, r1
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	4093      	lsls	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc4:	4935      	ldr	r1, [pc, #212]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	3302      	adds	r3, #2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	035b      	lsls	r3, r3, #13
 8001fea:	4013      	ands	r3, r2
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43da      	mvns	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	039b      	lsls	r3, r3, #14
 8002014:	4013      	ands	r3, r2
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002026:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	4013      	ands	r3, r2
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43da      	mvns	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	4013      	ands	r3, r2
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	40da      	lsrs	r2, r3
 8002088:	1e13      	subs	r3, r2, #0
 800208a:	d000      	beq.n	800208e <HAL_GPIO_Init+0x2d2>
 800208c:	e6a2      	b.n	8001dd4 <HAL_GPIO_Init+0x18>
  }
}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b006      	add	sp, #24
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	50000400 	.word	0x50000400
 80020a4:	50000800 	.word	0x50000800
 80020a8:	50000c00 	.word	0x50000c00
 80020ac:	50001000 	.word	0x50001000
 80020b0:	50001c00 	.word	0x50001c00
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	000a      	movs	r2, r1
 80020c2:	1cbb      	adds	r3, r7, #2
 80020c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	1cba      	adds	r2, r7, #2
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	4013      	ands	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80020d2:	230f      	movs	r3, #15
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e003      	b.n	80020e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020e4:	230f      	movs	r3, #15
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781b      	ldrb	r3, [r3, #0]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	0008      	movs	r0, r1
 80020fc:	0011      	movs	r1, r2
 80020fe:	1cbb      	adds	r3, r7, #2
 8002100:	1c02      	adds	r2, r0, #0
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	1c7b      	adds	r3, r7, #1
 8002106:	1c0a      	adds	r2, r1, #0
 8002108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210a:	1c7b      	adds	r3, r7, #1
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002112:	1cbb      	adds	r3, r7, #2
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800211a:	e003      	b.n	8002124 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800211c:	1cbb      	adds	r3, r7, #2
 800211e:	881a      	ldrh	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f000 fbbf 	bl	80028be <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002140:	4bc9      	ldr	r3, [pc, #804]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	220c      	movs	r2, #12
 8002146:	4013      	ands	r3, r2
 8002148:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214a:	4bc7      	ldr	r3, [pc, #796]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	025b      	lsls	r3, r3, #9
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x36>
 8002160:	e07e      	b.n	8002260 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d007      	beq.n	8002178 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d112      	bne.n	8002194 <HAL_RCC_OscConfig+0x68>
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	025b      	lsls	r3, r3, #9
 8002174:	429a      	cmp	r2, r3
 8002176:	d10d      	bne.n	8002194 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	4bbb      	ldr	r3, [pc, #748]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	029b      	lsls	r3, r3, #10
 8002180:	4013      	ands	r3, r2
 8002182:	d100      	bne.n	8002186 <HAL_RCC_OscConfig+0x5a>
 8002184:	e06b      	b.n	800225e <HAL_RCC_OscConfig+0x132>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d167      	bne.n	800225e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	f000 fb95 	bl	80028be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x84>
 80021a0:	4bb1      	ldr	r3, [pc, #708]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4bb0      	ldr	r3, [pc, #704]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0249      	lsls	r1, r1, #9
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e027      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	23a0      	movs	r3, #160	; 0xa0
 80021b6:	02db      	lsls	r3, r3, #11
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d10e      	bne.n	80021da <HAL_RCC_OscConfig+0xae>
 80021bc:	4baa      	ldr	r3, [pc, #680]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4ba9      	ldr	r3, [pc, #676]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	02c9      	lsls	r1, r1, #11
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	4ba7      	ldr	r3, [pc, #668]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4ba6      	ldr	r3, [pc, #664]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	0249      	lsls	r1, r1, #9
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e012      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021da:	4ba3      	ldr	r3, [pc, #652]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4ba2      	ldr	r3, [pc, #648]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021e0:	49a2      	ldr	r1, [pc, #648]	; (800246c <HAL_RCC_OscConfig+0x340>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	4ba0      	ldr	r3, [pc, #640]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	025b      	lsls	r3, r3, #9
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4b9c      	ldr	r3, [pc, #624]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b9b      	ldr	r3, [pc, #620]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80021fa:	499d      	ldr	r1, [pc, #628]	; (8002470 <HAL_RCC_OscConfig+0x344>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fccc 	bl	8001ba4 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002210:	e009      	b.n	8002226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002212:	f7ff fcc7 	bl	8001ba4 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b64      	cmp	r3, #100	; 0x64
 800221e:	d902      	bls.n	8002226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	f000 fb4c 	bl	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002226:	4b90      	ldr	r3, [pc, #576]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	029b      	lsls	r3, r3, #10
 800222e:	4013      	ands	r3, r2
 8002230:	d0ef      	beq.n	8002212 <HAL_RCC_OscConfig+0xe6>
 8002232:	e015      	b.n	8002260 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fcb6 	bl	8001ba4 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223e:	f7ff fcb1 	bl	8001ba4 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b64      	cmp	r3, #100	; 0x64
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e336      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002250:	4b85      	ldr	r3, [pc, #532]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	029b      	lsls	r3, r3, #10
 8002258:	4013      	ands	r3, r2
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x112>
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d100      	bne.n	800226c <HAL_RCC_OscConfig+0x140>
 800226a:	e099      	b.n	80023a0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	2220      	movs	r2, #32
 8002276:	4013      	ands	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800227a:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b7a      	ldr	r3, [pc, #488]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002280:	2120      	movs	r1, #32
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	2220      	movs	r2, #32
 800228a:	4393      	bics	r3, r2
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d13e      	bne.n	8002318 <HAL_RCC_OscConfig+0x1ec>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13b      	bne.n	8002318 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022a0:	4b71      	ldr	r3, [pc, #452]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2204      	movs	r2, #4
 80022a6:	4013      	ands	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_RCC_OscConfig+0x188>
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e304      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x348>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2209      	movs	r2, #9
 80022d0:	4393      	bics	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	4b64      	ldr	r3, [pc, #400]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022dc:	f000 fc42 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 80022e0:	0001      	movs	r1, r0
 80022e2:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	220f      	movs	r2, #15
 80022ea:	4013      	ands	r3, r2
 80022ec:	4a62      	ldr	r2, [pc, #392]	; (8002478 <HAL_RCC_OscConfig+0x34c>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	000a      	movs	r2, r1
 80022f2:	40da      	lsrs	r2, r3
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_OscConfig+0x350>)
 80022f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80022f8:	4b61      	ldr	r3, [pc, #388]	; (8002480 <HAL_RCC_OscConfig+0x354>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2513      	movs	r5, #19
 80022fe:	197c      	adds	r4, r7, r5
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff fc09 	bl	8001b18 <HAL_InitTick>
 8002306:	0003      	movs	r3, r0
 8002308:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800230a:	197b      	adds	r3, r7, r5
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d046      	beq.n	80023a0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002312:	197b      	adds	r3, r7, r5
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	e2d2      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	d027      	beq.n	800236e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800231e:	4b52      	ldr	r3, [pc, #328]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2209      	movs	r2, #9
 8002324:	4393      	bics	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fc38 	bl	8001ba4 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fc33 	bl	8001ba4 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e2b8      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800234c:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2204      	movs	r2, #4
 8002352:	4013      	ands	r3, r2
 8002354:	d0f1      	beq.n	800233a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a46      	ldr	r2, [pc, #280]	; (8002474 <HAL_RCC_OscConfig+0x348>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	021a      	lsls	r2, r3, #8
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	e018      	b.n	80023a0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002374:	2101      	movs	r1, #1
 8002376:	438a      	bics	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff fc13 	bl	8001ba4 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fc0e 	bl	8001ba4 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e293      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2204      	movs	r2, #4
 800239c:	4013      	ands	r3, r2
 800239e:	d1f1      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2210      	movs	r2, #16
 80023a6:	4013      	ands	r3, r2
 80023a8:	d100      	bne.n	80023ac <HAL_RCC_OscConfig+0x280>
 80023aa:	e0a2      	b.n	80024f2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d140      	bne.n	8002434 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b2:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x29e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e279      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_RCC_OscConfig+0x358>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	0a19      	lsrs	r1, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	061a      	lsls	r2, r3, #24
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	0b5b      	lsrs	r3, r3, #13
 80023f8:	3301      	adds	r3, #1
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	210f      	movs	r1, #15
 8002408:	400b      	ands	r3, r1
 800240a:	491b      	ldr	r1, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x34c>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_OscConfig+0x350>)
 8002412:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCC_OscConfig+0x354>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2513      	movs	r5, #19
 800241a:	197c      	adds	r4, r7, r5
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff fb7b 	bl	8001b18 <HAL_InitTick>
 8002422:	0003      	movs	r3, r0
 8002424:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002426:	197b      	adds	r3, r7, r5
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d061      	beq.n	80024f2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	e244      	b.n	80028be <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d040      	beq.n	80024be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x33c>)
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	0049      	lsls	r1, r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff fbab 	bl	8001ba4 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002452:	e019      	b.n	8002488 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002454:	f7ff fba6 	bl	8001ba4 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d912      	bls.n	8002488 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e22b      	b.n	80028be <HAL_RCC_OscConfig+0x792>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	40021000 	.word	0x40021000
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	fffbffff 	.word	0xfffbffff
 8002474:	ffffe0ff 	.word	0xffffe0ff
 8002478:	08005ae0 	.word	0x08005ae0
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004
 8002484:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002488:	4bca      	ldr	r3, [pc, #808]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d0df      	beq.n	8002454 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002494:	4bc7      	ldr	r3, [pc, #796]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4ac7      	ldr	r2, [pc, #796]	; (80027b8 <HAL_RCC_OscConfig+0x68c>)
 800249a:	4013      	ands	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a2:	4bc4      	ldr	r3, [pc, #784]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a8:	4bc2      	ldr	r3, [pc, #776]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	0a19      	lsrs	r1, r3, #8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	061a      	lsls	r2, r3, #24
 80024b6:	4bbf      	ldr	r3, [pc, #764]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	e019      	b.n	80024f2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024be:	4bbd      	ldr	r3, [pc, #756]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4bbc      	ldr	r3, [pc, #752]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80024c4:	49bd      	ldr	r1, [pc, #756]	; (80027bc <HAL_RCC_OscConfig+0x690>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff fb6b 	bl	8001ba4 <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d4:	f7ff fb66 	bl	8001ba4 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1eb      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024e6:	4bb3      	ldr	r3, [pc, #716]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2208      	movs	r2, #8
 80024f8:	4013      	ands	r3, r2
 80024fa:	d036      	beq.n	800256a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d019      	beq.n	8002538 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002504:	4bab      	ldr	r3, [pc, #684]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002508:	4baa      	ldr	r3, [pc, #680]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800250a:	2101      	movs	r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7ff fb48 	bl	8001ba4 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7ff fb43 	bl	8001ba4 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1c8      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800252c:	4ba1      	ldr	r3, [pc, #644]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	2202      	movs	r2, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d0f1      	beq.n	800251a <HAL_RCC_OscConfig+0x3ee>
 8002536:	e018      	b.n	800256a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002538:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800253a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800253c:	4b9d      	ldr	r3, [pc, #628]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800253e:	2101      	movs	r1, #1
 8002540:	438a      	bics	r2, r1
 8002542:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7ff fb2e 	bl	8001ba4 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254e:	f7ff fb29 	bl	8001ba4 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1ae      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002560:	4b94      	ldr	r3, [pc, #592]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002564:	2202      	movs	r2, #2
 8002566:	4013      	ands	r3, r2
 8002568:	d1f1      	bne.n	800254e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2204      	movs	r2, #4
 8002570:	4013      	ands	r3, r2
 8002572:	d100      	bne.n	8002576 <HAL_RCC_OscConfig+0x44a>
 8002574:	e0ae      	b.n	80026d4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2023      	movs	r0, #35	; 0x23
 8002578:	183b      	adds	r3, r7, r0
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b8d      	ldr	r3, [pc, #564]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	055b      	lsls	r3, r3, #21
 8002586:	4013      	ands	r3, r2
 8002588:	d109      	bne.n	800259e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800258c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258e:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0549      	lsls	r1, r1, #21
 8002594:	430a      	orrs	r2, r1
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002598:	183b      	adds	r3, r7, r0
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b88      	ldr	r3, [pc, #544]	; (80027c0 <HAL_RCC_OscConfig+0x694>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	d11a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025aa:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <HAL_RCC_OscConfig+0x694>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b84      	ldr	r3, [pc, #528]	; (80027c0 <HAL_RCC_OscConfig+0x694>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0049      	lsls	r1, r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b8:	f7ff faf4 	bl	8001ba4 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7ff faef 	bl	8001ba4 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e174      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b7a      	ldr	r3, [pc, #488]	; (80027c0 <HAL_RCC_OscConfig+0x694>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d0>
 80025ec:	4b71      	ldr	r3, [pc, #452]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80025ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025f0:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	0049      	lsls	r1, r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	651a      	str	r2, [r3, #80]	; 0x50
 80025fa:	e031      	b.n	8002660 <HAL_RCC_OscConfig+0x534>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
 8002604:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800260a:	496c      	ldr	r1, [pc, #432]	; (80027bc <HAL_RCC_OscConfig+0x690>)
 800260c:	400a      	ands	r2, r1
 800260e:	651a      	str	r2, [r3, #80]	; 0x50
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002614:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002616:	496b      	ldr	r1, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x698>)
 8002618:	400a      	ands	r2, r1
 800261a:	651a      	str	r2, [r3, #80]	; 0x50
 800261c:	e020      	b.n	8002660 <HAL_RCC_OscConfig+0x534>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	23a0      	movs	r3, #160	; 0xa0
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	429a      	cmp	r2, r3
 8002628:	d10e      	bne.n	8002648 <HAL_RCC_OscConfig+0x51c>
 800262a:	4b62      	ldr	r3, [pc, #392]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800262c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800262e:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	00c9      	lsls	r1, r1, #3
 8002634:	430a      	orrs	r2, r1
 8002636:	651a      	str	r2, [r3, #80]	; 0x50
 8002638:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800263a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	0049      	lsls	r1, r1, #1
 8002642:	430a      	orrs	r2, r1
 8002644:	651a      	str	r2, [r3, #80]	; 0x50
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x534>
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800264a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800264e:	495b      	ldr	r1, [pc, #364]	; (80027bc <HAL_RCC_OscConfig+0x690>)
 8002650:	400a      	ands	r2, r1
 8002652:	651a      	str	r2, [r3, #80]	; 0x50
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002658:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800265a:	495a      	ldr	r1, [pc, #360]	; (80027c4 <HAL_RCC_OscConfig+0x698>)
 800265c:	400a      	ands	r2, r1
 800265e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7ff fa9c 	bl	8001ba4 <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002670:	e009      	b.n	8002686 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7ff fa97 	bl	8001ba4 <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_RCC_OscConfig+0x69c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e11b      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4013      	ands	r3, r2
 8002690:	d0ef      	beq.n	8002672 <HAL_RCC_OscConfig+0x546>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7ff fa86 	bl	8001ba4 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7ff fa81 	bl	8001ba4 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x69c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e105      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80026b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4013      	ands	r3, r2
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026be:	2323      	movs	r3, #35	; 0x23
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80026ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80026ce:	493f      	ldr	r1, [pc, #252]	; (80027cc <HAL_RCC_OscConfig+0x6a0>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2220      	movs	r2, #32
 80026da:	4013      	ands	r3, r2
 80026dc:	d049      	beq.n	8002772 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d026      	beq.n	8002734 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80026e6:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80026f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x6a4>)
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x6a4>)
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	0189      	lsls	r1, r1, #6
 8002708:	430a      	orrs	r2, r1
 800270a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7ff fa4a 	bl	8001ba4 <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002716:	f7ff fa45 	bl	8001ba4 <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0ca      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d0f1      	beq.n	8002716 <HAL_RCC_OscConfig+0x5ea>
 8002732:	e01e      	b.n	8002772 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800273a:	2101      	movs	r1, #1
 800273c:	438a      	bics	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_RCC_OscConfig+0x6a4>)
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <HAL_RCC_OscConfig+0x6a4>)
 8002746:	4923      	ldr	r1, [pc, #140]	; (80027d4 <HAL_RCC_OscConfig+0x6a8>)
 8002748:	400a      	ands	r2, r1
 800274a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fa2a 	bl	8001ba4 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002756:	f7ff fa25 	bl	8001ba4 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0aa      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d1f1      	bne.n	8002756 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d100      	bne.n	800277c <HAL_RCC_OscConfig+0x650>
 800277a:	e09f      	b.n	80028bc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d100      	bne.n	8002784 <HAL_RCC_OscConfig+0x658>
 8002782:	e078      	b.n	8002876 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	2b02      	cmp	r3, #2
 800278a:	d159      	bne.n	8002840 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x688>)
 8002792:	4911      	ldr	r1, [pc, #68]	; (80027d8 <HAL_RCC_OscConfig+0x6ac>)
 8002794:	400a      	ands	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff fa04 	bl	8001ba4 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7ff f9ff 	bl	8001ba4 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d915      	bls.n	80027dc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e084      	b.n	80028be <HAL_RCC_OscConfig+0x792>
 80027b4:	40021000 	.word	0x40021000
 80027b8:	ffff1fff 	.word	0xffff1fff
 80027bc:	fffffeff 	.word	0xfffffeff
 80027c0:	40007000 	.word	0x40007000
 80027c4:	fffffbff 	.word	0xfffffbff
 80027c8:	00001388 	.word	0x00001388
 80027cc:	efffffff 	.word	0xefffffff
 80027d0:	40010000 	.word	0x40010000
 80027d4:	ffffdfff 	.word	0xffffdfff
 80027d8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027dc:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	049b      	lsls	r3, r3, #18
 80027e4:	4013      	ands	r3, r2
 80027e6:	d1dc      	bne.n	80027a2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a37      	ldr	r2, [pc, #220]	; (80028cc <HAL_RCC_OscConfig+0x7a0>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	431a      	orrs	r2, r3
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	0449      	lsls	r1, r1, #17
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7ff f9c5 	bl	8001ba4 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7ff f9c0 	bl	8001ba4 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e045      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	049b      	lsls	r3, r3, #18
 800283a:	4013      	ands	r3, r2
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x6f4>
 800283e:	e03d      	b.n	80028bc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 8002846:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_RCC_OscConfig+0x7a4>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff f9aa 	bl	8001ba4 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff f9a5 	bl	8001ba4 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e02a      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	049b      	lsls	r3, r3, #18
 8002870:	4013      	ands	r3, r2
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x72a>
 8002874:	e022      	b.n	80028bc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e01d      	b.n	80028be <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCC_OscConfig+0x79c>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	025b      	lsls	r3, r3, #9
 800288e:	401a      	ands	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	429a      	cmp	r2, r3
 8002896:	d10f      	bne.n	80028b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	23f0      	movs	r3, #240	; 0xf0
 800289c:	039b      	lsls	r3, r3, #14
 800289e:	401a      	ands	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	401a      	ands	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b00a      	add	sp, #40	; 0x28
 80028c4:	bdb0      	pop	{r4, r5, r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40021000 	.word	0x40021000
 80028cc:	ff02ffff 	.word	0xff02ffff
 80028d0:	feffffff 	.word	0xfeffffff

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e128      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b96      	ldr	r3, [pc, #600]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2201      	movs	r2, #1
 80028ee:	4013      	ands	r3, r2
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d91e      	bls.n	8002934 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b93      	ldr	r3, [pc, #588]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4393      	bics	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	4b90      	ldr	r3, [pc, #576]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002908:	f7ff f94c 	bl	8001ba4 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002910:	e009      	b.n	8002926 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002912:	f7ff f947 	bl	8001ba4 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a8a      	ldr	r2, [pc, #552]	; (8002b48 <HAL_RCC_ClockConfig+0x274>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e109      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b87      	ldr	r3, [pc, #540]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d1ee      	bne.n	8002912 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293e:	4b83      	ldr	r3, [pc, #524]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	22f0      	movs	r2, #240	; 0xf0
 8002944:	4393      	bics	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b7f      	ldr	r3, [pc, #508]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 800294e:	430a      	orrs	r2, r1
 8002950:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	d100      	bne.n	800295e <HAL_RCC_ClockConfig+0x8a>
 800295c:	e089      	b.n	8002a72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002966:	4b79      	ldr	r3, [pc, #484]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	029b      	lsls	r3, r3, #10
 800296e:	4013      	ands	r3, r2
 8002970:	d120      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0e1      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800297e:	4b73      	ldr	r3, [pc, #460]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	049b      	lsls	r3, r3, #18
 8002986:	4013      	ands	r3, r2
 8002988:	d114      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0d5      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002996:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2204      	movs	r2, #4
 800299c:	4013      	ands	r3, r2
 800299e:	d109      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0ca      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029a4:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0c2      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b4:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2203      	movs	r2, #3
 80029ba:	4393      	bics	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	4b62      	ldr	r3, [pc, #392]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c8:	f7ff f8ec 	bl	8001ba4 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d8:	e009      	b.n	80029ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029da:	f7ff f8e3 	bl	8001ba4 <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x274>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0a5      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ee:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	220c      	movs	r2, #12
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d1ef      	bne.n	80029da <HAL_RCC_ClockConfig+0x106>
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d111      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a04:	e009      	b.n	8002a1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a06:	f7ff f8cd 	bl	8001ba4 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a4d      	ldr	r2, [pc, #308]	; (8002b48 <HAL_RCC_ClockConfig+0x274>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e08f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	220c      	movs	r2, #12
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d1ef      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x132>
 8002a26:	e024      	b.n	8002a72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d11b      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f7ff f8b7 	bl	8001ba4 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a42      	ldr	r2, [pc, #264]	; (8002b48 <HAL_RCC_ClockConfig+0x274>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e079      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d1ef      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x15e>
 8002a52:	e00e      	b.n	8002a72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7ff f8a6 	bl	8001ba4 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	4a3a      	ldr	r2, [pc, #232]	; (8002b48 <HAL_RCC_ClockConfig+0x274>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e068      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a68:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	220c      	movs	r2, #12
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d21e      	bcs.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a80:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4393      	bics	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a92:	f7ff f887 	bl	8001ba4 <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	e009      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9c:	f7ff f882 	bl	8001ba4 <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <HAL_RCC_ClockConfig+0x274>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e044      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d1ee      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x27c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_RCC_ClockConfig+0x280>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	00da      	lsls	r2, r3, #3
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002afc:	f000 f832 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b00:	0001      	movs	r1, r0
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_ClockConfig+0x278>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	220f      	movs	r2, #15
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <HAL_RCC_ClockConfig+0x284>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	000a      	movs	r2, r1
 8002b12:	40da      	lsrs	r2, r3
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_ClockConfig+0x288>)
 8002b16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_RCC_ClockConfig+0x28c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	250b      	movs	r5, #11
 8002b1e:	197c      	adds	r4, r7, r5
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fe fff9 	bl	8001b18 <HAL_InitTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b2a:	197b      	adds	r3, r7, r5
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b32:	197b      	adds	r3, r7, r5
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	40022000 	.word	0x40022000
 8002b48:	00001388 	.word	0x00001388
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	fffff8ff 	.word	0xfffff8ff
 8002b54:	ffffc7ff 	.word	0xffffc7ff
 8002b58:	08005ae0 	.word	0x08005ae0
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b72:	230c      	movs	r3, #12
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d014      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b7a:	d900      	bls.n	8002b7e <HAL_RCC_GetSysClockFreq+0x1a>
 8002b7c:	e07b      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x112>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x24>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b86:	e076      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b88:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b96:	e07c      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b9c:	e079      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b9e:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ba2:	e076      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	0c9a      	lsrs	r2, r3, #18
 8002ba8:	230f      	movs	r3, #15
 8002baa:	401a      	ands	r2, r3
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <HAL_RCC_GetSysClockFreq+0x148>)
 8002bae:	5c9b      	ldrb	r3, [r3, r2]
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	0d9a      	lsrs	r2, r3, #22
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	3301      	adds	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	025b      	lsls	r3, r3, #9
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	4a35      	ldr	r2, [pc, #212]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	69b8      	ldr	r0, [r7, #24]
 8002bd8:	69f9      	ldr	r1, [r7, #28]
 8002bda:	f7fd fb49 	bl	8000270 <__aeabi_lmul>
 8002bde:	0002      	movs	r2, r0
 8002be0:	000b      	movs	r3, r1
 8002be2:	0010      	movs	r0, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f7fd fb1d 	bl	8000230 <__aeabi_uldivmod>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	000b      	movs	r3, r1
 8002bfa:	0013      	movs	r3, r2
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfe:	e037      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c00:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2210      	movs	r2, #16
 8002c06:	4013      	ands	r3, r2
 8002c08:	d01a      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c14:	2300      	movs	r3, #0
 8002c16:	68b8      	ldr	r0, [r7, #8]
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	f7fd fb29 	bl	8000270 <__aeabi_lmul>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	000b      	movs	r3, r1
 8002c22:	0010      	movs	r0, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f7fd fafd 	bl	8000230 <__aeabi_uldivmod>
 8002c36:	0002      	movs	r2, r0
 8002c38:	000b      	movs	r3, r1
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3e:	e017      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	0018      	movs	r0, r3
 8002c44:	2300      	movs	r3, #0
 8002c46:	0019      	movs	r1, r3
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f7fd fb10 	bl	8000270 <__aeabi_lmul>
 8002c50:	0002      	movs	r2, r0
 8002c52:	000b      	movs	r3, r1
 8002c54:	0010      	movs	r0, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	001c      	movs	r4, r3
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	001d      	movs	r5, r3
 8002c60:	0022      	movs	r2, r4
 8002c62:	002b      	movs	r3, r5
 8002c64:	f7fd fae4 	bl	8000230 <__aeabi_uldivmod>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	000b      	movs	r3, r1
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c74:	e00d      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	0b5b      	lsrs	r3, r3, #13
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	4013      	ands	r3, r2
 8002c80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	3301      	adds	r3, #1
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0212      	lsls	r2, r2, #8
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c90:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b00e      	add	sp, #56	; 0x38
 8002c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	003d0900 	.word	0x003d0900
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200
 8002cac:	08005af8 	.word	0x08005af8

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	20000000 	.word	0x20000000

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc8:	f7ff fff2 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002ccc:	0001      	movs	r1, r0
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	40d9      	lsrs	r1, r3
 8002cde:	000b      	movs	r3, r1
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08005af0 	.word	0x08005af0

08002cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf4:	f7ff ffdc 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cf8:	0001      	movs	r1, r0
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0adb      	lsrs	r3, r3, #11
 8002d00:	2207      	movs	r2, #7
 8002d02:	4013      	ands	r3, r2
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	40d9      	lsrs	r1, r3
 8002d0a:	000b      	movs	r3, r1
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08005af0 	.word	0x08005af0

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d24:	2317      	movs	r3, #23
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2220      	movs	r2, #32
 8002d32:	4013      	ands	r3, r2
 8002d34:	d106      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d100      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d42:	e104      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d44:	4bb9      	ldr	r3, [pc, #740]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	055b      	lsls	r3, r3, #21
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d10a      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d50:	4bb6      	ldr	r3, [pc, #728]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d54:	4bb5      	ldr	r3, [pc, #724]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	0549      	lsls	r1, r1, #21
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d5e:	2317      	movs	r3, #23
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4bb2      	ldr	r3, [pc, #712]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d11a      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d72:	4baf      	ldr	r3, [pc, #700]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4bae      	ldr	r3, [pc, #696]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	0049      	lsls	r1, r1, #1
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d80:	f7fe ff10 	bl	8001ba4 <HAL_GetTick>
 8002d84:	0003      	movs	r3, r0
 8002d86:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fe ff0b 	bl	8001ba4 <HAL_GetTick>
 8002d8e:	0002      	movs	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e143      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4ba4      	ldr	r3, [pc, #656]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002da8:	4ba0      	ldr	r3, [pc, #640]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	23c0      	movs	r3, #192	; 0xc0
 8002dae:	039b      	lsls	r3, r3, #14
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	23c0      	movs	r3, #192	; 0xc0
 8002dba:	039b      	lsls	r3, r3, #14
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	23c0      	movs	r3, #192	; 0xc0
 8002dca:	039b      	lsls	r3, r3, #14
 8002dcc:	4013      	ands	r3, r2
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	23c0      	movs	r3, #192	; 0xc0
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	401a      	ands	r2, r3
 8002dde:	23c0      	movs	r3, #192	; 0xc0
 8002de0:	029b      	lsls	r3, r3, #10
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d10a      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002de6:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	029b      	lsls	r3, r3, #10
 8002dee:	401a      	ands	r2, r3
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d101      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e113      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002dfc:	4b8b      	ldr	r3, [pc, #556]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e00:	23c0      	movs	r3, #192	; 0xc0
 8002e02:	029b      	lsls	r3, r3, #10
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d049      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	23c0      	movs	r3, #192	; 0xc0
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	4013      	ands	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d004      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2220      	movs	r2, #32
 8002e24:	4013      	ands	r3, r2
 8002e26:	d10d      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	23c0      	movs	r3, #192	; 0xc0
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	4013      	ands	r3, r2
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d034      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	4013      	ands	r3, r2
 8002e42:	d02e      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e44:	4b79      	ldr	r3, [pc, #484]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e48:	4a7a      	ldr	r2, [pc, #488]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4e:	4b77      	ldr	r3, [pc, #476]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	0309      	lsls	r1, r1, #12
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5c:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e60:	4b72      	ldr	r3, [pc, #456]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e62:	4975      	ldr	r1, [pc, #468]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e68:	4b70      	ldr	r3, [pc, #448]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d014      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fe94 	bl	8001ba4 <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e80:	e009      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7fe fe8f 	bl	8001ba4 <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	4a6b      	ldr	r2, [pc, #428]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0c6      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d0ef      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d01f      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	23c0      	movs	r3, #192	; 0xc0
 8002eb4:	029b      	lsls	r3, r3, #10
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	23c0      	movs	r3, #192	; 0xc0
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002ec0:	4b5a      	ldr	r3, [pc, #360]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a5e      	ldr	r2, [pc, #376]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	23c0      	movs	r3, #192	; 0xc0
 8002ed0:	039b      	lsls	r3, r3, #14
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	4b55      	ldr	r3, [pc, #340]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	4b54      	ldr	r3, [pc, #336]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002edc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	23c0      	movs	r3, #192	; 0xc0
 8002ee4:	029b      	lsls	r3, r3, #10
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d01f      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	23c0      	movs	r3, #192	; 0xc0
 8002efe:	029b      	lsls	r3, r3, #10
 8002f00:	401a      	ands	r2, r3
 8002f02:	23c0      	movs	r3, #192	; 0xc0
 8002f04:	029b      	lsls	r3, r3, #10
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002f0a:	4b48      	ldr	r3, [pc, #288]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	23c0      	movs	r3, #192	; 0xc0
 8002f1a:	039b      	lsls	r3, r3, #14
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f26:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	23c0      	movs	r3, #192	; 0xc0
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	401a      	ands	r2, r3
 8002f32:	4b3e      	ldr	r3, [pc, #248]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f38:	2317      	movs	r3, #23
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f46:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f48:	493e      	ldr	r1, [pc, #248]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f58:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	4393      	bics	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2202      	movs	r2, #2
 8002f72:	4013      	ands	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2204      	movs	r2, #4
 8002f90:	4013      	ands	r3, r2
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f98:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2208      	movs	r2, #8
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	4a25      	ldr	r2, [pc, #148]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	4013      	ands	r3, r2
 8002fee:	d009      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003000:	430a      	orrs	r2, r1
 8003002:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	4013      	ands	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	4a10      	ldr	r2, [pc, #64]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1a      	ldr	r2, [r3, #32]
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301e:	430a      	orrs	r2, r1
 8003020:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b006      	add	sp, #24
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	fffcffff 	.word	0xfffcffff
 8003038:	fff7ffff 	.word	0xfff7ffff
 800303c:	00001388 	.word	0x00001388
 8003040:	ffcfffff 	.word	0xffcfffff
 8003044:	efffffff 	.word	0xefffffff
 8003048:	fffff3ff 	.word	0xfffff3ff
 800304c:	ffffcfff 	.word	0xffffcfff
 8003050:	fbffffff 	.word	0xfbffffff
 8003054:	fff3ffff 	.word	0xfff3ffff

08003058 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003058:	b5b0      	push	{r4, r5, r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e088      	b.n	8003184 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2221      	movs	r2, #33	; 0x21
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f7fd fd8f 	bl	8000bac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	2102      	movs	r1, #2
 8003094:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2210      	movs	r2, #16
 800309e:	4013      	ands	r3, r2
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d05f      	beq.n	8003164 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	22ca      	movs	r2, #202	; 0xca
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2253      	movs	r2, #83	; 0x53
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80030b4:	250f      	movs	r5, #15
 80030b6:	197c      	adds	r4, r7, r5
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fc62 	bl	8003984 <RTC_EnterInitMode>
 80030c0:	0003      	movs	r3, r0
 80030c2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80030c4:	0028      	movs	r0, r5
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d12c      	bne.n	8003128 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	492c      	ldr	r1, [pc, #176]	; (800318c <HAL_RTC_Init+0x134>)
 80030da:	400a      	ands	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68d2      	ldr	r2, [r2, #12]
 8003104:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6919      	ldr	r1, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800311a:	183c      	adds	r4, r7, r0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fc74 	bl	8003a0c <RTC_ExitInitMode>
 8003124:	0003      	movs	r3, r0
 8003126:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003128:	230f      	movs	r3, #15
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d113      	bne.n	800315a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2103      	movs	r1, #3
 800313e:	438a      	bics	r2, r1
 8003140:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
 8003162:	e003      	b.n	800316c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003164:	230f      	movs	r3, #15
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800316c:	230f      	movs	r3, #15
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2221      	movs	r2, #33	; 0x21
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bdb0      	pop	{r4, r5, r7, pc}
 800318c:	ff8fffbf 	.word	0xff8fffbf

08003190 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	5c9b      	ldrb	r3, [r3, r2]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_RTC_SetTime+0x1e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e092      	b.n	80032d4 <HAL_RTC_SetTime+0x144>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	2101      	movs	r1, #1
 80031b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	2102      	movs	r1, #2
 80031bc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d125      	bne.n	8003210 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	4013      	ands	r3, r2
 80031ce:	d102      	bne.n	80031d6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2200      	movs	r2, #0
 80031d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 fc40 	bl	8003a60 <RTC_ByteToBcd2>
 80031e0:	0003      	movs	r3, r0
 80031e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fc39 	bl	8003a60 <RTC_ByteToBcd2>
 80031ee:	0003      	movs	r3, r0
 80031f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	789b      	ldrb	r3, [r3, #2]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fc31 	bl	8003a60 <RTC_ByteToBcd2>
 80031fe:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003200:	0022      	movs	r2, r4
 8003202:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	78db      	ldrb	r3, [r3, #3]
 8003208:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e017      	b.n	8003240 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2240      	movs	r2, #64	; 0x40
 8003218:	4013      	ands	r3, r2
 800321a:	d102      	bne.n	8003222 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800322e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003234:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	78db      	ldrb	r3, [r3, #3]
 800323a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22ca      	movs	r2, #202	; 0xca
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2253      	movs	r2, #83	; 0x53
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003250:	2513      	movs	r5, #19
 8003252:	197c      	adds	r4, r7, r5
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	0018      	movs	r0, r3
 8003258:	f000 fb94 	bl	8003984 <RTC_EnterInitMode>
 800325c:	0003      	movs	r3, r0
 800325e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003260:	0028      	movs	r0, r5
 8003262:	183b      	adds	r3, r7, r0
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d120      	bne.n	80032ac <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	491a      	ldr	r1, [pc, #104]	; (80032dc <HAL_RTC_SetTime+0x14c>)
 8003272:	400a      	ands	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4917      	ldr	r1, [pc, #92]	; (80032e0 <HAL_RTC_SetTime+0x150>)
 8003282:	400a      	ands	r2, r1
 8003284:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6899      	ldr	r1, [r3, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800329e:	183c      	adds	r4, r7, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 fbb2 	bl	8003a0c <RTC_ExitInitMode>
 80032a8:	0003      	movs	r3, r0
 80032aa:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80032ac:	2313      	movs	r3, #19
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2221      	movs	r2, #33	; 0x21
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

  return status;
 80032ce:	2313      	movs	r3, #19
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	781b      	ldrb	r3, [r3, #0]
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b006      	add	sp, #24
 80032da:	bdb0      	pop	{r4, r5, r7, pc}
 80032dc:	007f7f7f 	.word	0x007f7f7f
 80032e0:	fffbffff 	.word	0xfffbffff

080032e4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	045b      	lsls	r3, r3, #17
 8003306:	0c5a      	lsrs	r2, r3, #17
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_RTC_GetTime+0xb8>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	b2db      	uxtb	r3, r3
 800331e:	223f      	movs	r2, #63	; 0x3f
 8003320:	4013      	ands	r3, r2
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b2db      	uxtb	r3, r3
 800332e:	227f      	movs	r2, #127	; 0x7f
 8003330:	4013      	ands	r3, r2
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	227f      	movs	r2, #127	; 0x7f
 800333e:	4013      	ands	r3, r2
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	0d9b      	lsrs	r3, r3, #22
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11a      	bne.n	8003392 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 fb9e 	bl	8003aa2 <RTC_Bcd2ToByte>
 8003366:	0003      	movs	r3, r0
 8003368:	001a      	movs	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fb95 	bl	8003aa2 <RTC_Bcd2ToByte>
 8003378:	0003      	movs	r3, r0
 800337a:	001a      	movs	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 fb8c 	bl	8003aa2 <RTC_Bcd2ToByte>
 800338a:	0003      	movs	r3, r0
 800338c:	001a      	movs	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b006      	add	sp, #24
 800339a:	bd80      	pop	{r7, pc}
 800339c:	007f7f7f 	.word	0x007f7f7f

080033a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	5c9b      	ldrb	r3, [r3, r2]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_RTC_SetDate+0x1e>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e07e      	b.n	80034bc <HAL_RTC_SetDate+0x11c>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2221      	movs	r2, #33	; 0x21
 80033ca:	2102      	movs	r1, #2
 80033cc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10e      	bne.n	80033f2 <HAL_RTC_SetDate+0x52>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	001a      	movs	r2, r3
 80033da:	2310      	movs	r3, #16
 80033dc:	4013      	ands	r3, r2
 80033de:	d008      	beq.n	80033f2 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2210      	movs	r2, #16
 80033e6:	4393      	bics	r3, r2
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	330a      	adds	r3, #10
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11c      	bne.n	8003432 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	78db      	ldrb	r3, [r3, #3]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 fb2f 	bl	8003a60 <RTC_ByteToBcd2>
 8003402:	0003      	movs	r3, r0
 8003404:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	785b      	ldrb	r3, [r3, #1]
 800340a:	0018      	movs	r0, r3
 800340c:	f000 fb28 	bl	8003a60 <RTC_ByteToBcd2>
 8003410:	0003      	movs	r3, r0
 8003412:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003414:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	789b      	ldrb	r3, [r3, #2]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fb20 	bl	8003a60 <RTC_ByteToBcd2>
 8003420:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003422:	0022      	movs	r2, r4
 8003424:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e00e      	b.n	8003450 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	78db      	ldrb	r3, [r3, #3]
 8003436:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800343e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003444:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	22ca      	movs	r2, #202	; 0xca
 8003456:	625a      	str	r2, [r3, #36]	; 0x24
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2253      	movs	r2, #83	; 0x53
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003460:	2513      	movs	r5, #19
 8003462:	197c      	adds	r4, r7, r5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fa8c 	bl	8003984 <RTC_EnterInitMode>
 800346c:	0003      	movs	r3, r0
 800346e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003470:	0028      	movs	r0, r5
 8003472:	183b      	adds	r3, r7, r0
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4910      	ldr	r1, [pc, #64]	; (80034c4 <HAL_RTC_SetDate+0x124>)
 8003482:	400a      	ands	r2, r1
 8003484:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003486:	183c      	adds	r4, r7, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fabe 	bl	8003a0c <RTC_ExitInitMode>
 8003490:	0003      	movs	r3, r0
 8003492:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003494:	2313      	movs	r3, #19
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2221      	movs	r2, #33	; 0x21
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	22ff      	movs	r2, #255	; 0xff
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]

  return status;
 80034b6:	2313      	movs	r3, #19
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	781b      	ldrb	r3, [r3, #0]
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b006      	add	sp, #24
 80034c2:	bdb0      	pop	{r4, r5, r7, pc}
 80034c4:	00ffff3f 	.word	0x00ffff3f

080034c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_RTC_GetDate+0x9c>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	0c1b      	lsrs	r3, r3, #16
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	221f      	movs	r2, #31
 80034f6:	4013      	ands	r3, r2
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	223f      	movs	r2, #63	; 0x3f
 8003504:	4013      	ands	r3, r2
 8003506:	b2da      	uxtb	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2207      	movs	r2, #7
 8003514:	4013      	ands	r3, r2
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11a      	bne.n	8003558 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	78db      	ldrb	r3, [r3, #3]
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fabb 	bl	8003aa2 <RTC_Bcd2ToByte>
 800352c:	0003      	movs	r3, r0
 800352e:	001a      	movs	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 fab2 	bl	8003aa2 <RTC_Bcd2ToByte>
 800353e:	0003      	movs	r3, r0
 8003540:	001a      	movs	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	789b      	ldrb	r3, [r3, #2]
 800354a:	0018      	movs	r0, r3
 800354c:	f000 faa9 	bl	8003aa2 <RTC_Bcd2ToByte>
 8003550:	0003      	movs	r3, r0
 8003552:	001a      	movs	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b006      	add	sp, #24
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	00ffff3f 	.word	0x00ffff3f

08003568 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	5c9b      	ldrb	r3, [r3, r2]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_RTC_SetAlarm+0x26>
 800358a:	2302      	movs	r3, #2
 800358c:	e120      	b.n	80037d0 <HAL_RTC_SetAlarm+0x268>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2221      	movs	r2, #33	; 0x21
 800359a:	2102      	movs	r1, #2
 800359c:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d136      	bne.n	8003612 <HAL_RTC_SetAlarm+0xaa>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	4013      	ands	r3, r2
 80035ae:	d102      	bne.n	80035b6 <HAL_RTC_SetAlarm+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2200      	movs	r2, #0
 80035b4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 fa50 	bl	8003a60 <RTC_ByteToBcd2>
 80035c0:	0003      	movs	r3, r0
 80035c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	785b      	ldrb	r3, [r3, #1]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 fa49 	bl	8003a60 <RTC_ByteToBcd2>
 80035ce:	0003      	movs	r3, r0
 80035d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80035d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	789b      	ldrb	r3, [r3, #2]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 fa41 	bl	8003a60 <RTC_ByteToBcd2>
 80035de:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035e0:	0022      	movs	r2, r4
 80035e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	78db      	ldrb	r3, [r3, #3]
 80035e8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80035ea:	431a      	orrs	r2, r3
 80035ec:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2220      	movs	r2, #32
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fa33 	bl	8003a60 <RTC_ByteToBcd2>
 80035fa:	0003      	movs	r3, r0
 80035fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80035fe:	0022      	movs	r2, r4
 8003600:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003606:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800360c:	4313      	orrs	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e022      	b.n	8003658 <HAL_RTC_SetAlarm+0xf0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2240      	movs	r2, #64	; 0x40
 800361a:	4013      	ands	r3, r2
 800361c:	d102      	bne.n	8003624 <HAL_RTC_SetAlarm+0xbc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2200      	movs	r2, #0
 8003622:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	785b      	ldrb	r3, [r3, #1]
 800362e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003630:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003636:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	78db      	ldrb	r3, [r3, #3]
 800363c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800363e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2120      	movs	r1, #32
 8003644:	5c5b      	ldrb	r3, [r3, r1]
 8003646:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003648:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800364e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003654:	4313      	orrs	r3, r2
 8003656:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	22ca      	movs	r2, #202	; 0xca
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2253      	movs	r2, #83	; 0x53
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	429a      	cmp	r2, r3
 800367e:	d14d      	bne.n	800371c <HAL_RTC_SetAlarm+0x1b4>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4953      	ldr	r1, [pc, #332]	; (80037d8 <HAL_RTC_SetAlarm+0x270>)
 800368c:	400a      	ands	r2, r1
 800368e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4950      	ldr	r1, [pc, #320]	; (80037dc <HAL_RTC_SetAlarm+0x274>)
 800369c:	400a      	ands	r2, r1
 800369e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	401a      	ands	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	494c      	ldr	r1, [pc, #304]	; (80037e0 <HAL_RTC_SetAlarm+0x278>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036b4:	f7fe fa76 	bl	8001ba4 <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036bc:	e016      	b.n	80036ec <HAL_RTC_SetAlarm+0x184>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036be:	f7fe fa71 	bl	8001ba4 <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	23fa      	movs	r3, #250	; 0xfa
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d90d      	bls.n	80036ec <HAL_RTC_SetAlarm+0x184>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2221      	movs	r2, #33	; 0x21
 80036dc:	2103      	movs	r1, #3
 80036de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e071      	b.n	80037d0 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	d0e2      	beq.n	80036be <HAL_RTC_SetAlarm+0x156>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	0049      	lsls	r1, r1, #1
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	e04c      	b.n	80037b6 <HAL_RTC_SetAlarm+0x24e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	492f      	ldr	r1, [pc, #188]	; (80037e4 <HAL_RTC_SetAlarm+0x27c>)
 8003728:	400a      	ands	r2, r1
 800372a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	492c      	ldr	r1, [pc, #176]	; (80037e8 <HAL_RTC_SetAlarm+0x280>)
 8003738:	400a      	ands	r2, r1
 800373a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	22ff      	movs	r2, #255	; 0xff
 8003744:	401a      	ands	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4928      	ldr	r1, [pc, #160]	; (80037ec <HAL_RTC_SetAlarm+0x284>)
 800374c:	430a      	orrs	r2, r1
 800374e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003750:	f7fe fa28 	bl	8001ba4 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003758:	e016      	b.n	8003788 <HAL_RTC_SetAlarm+0x220>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800375a:	f7fe fa23 	bl	8001ba4 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad2      	subs	r2, r2, r3
 8003764:	23fa      	movs	r3, #250	; 0xfa
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d90d      	bls.n	8003788 <HAL_RTC_SetAlarm+0x220>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2221      	movs	r2, #33	; 0x21
 8003778:	2103      	movs	r1, #3
 800377a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e023      	b.n	80037d0 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d0e2      	beq.n	800375a <HAL_RTC_SetAlarm+0x1f2>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	0089      	lsls	r1, r1, #2
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	22ff      	movs	r2, #255	; 0xff
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2221      	movs	r2, #33	; 0x21
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b009      	add	sp, #36	; 0x24
 80037d6:	bd90      	pop	{r4, r7, pc}
 80037d8:	fffffeff 	.word	0xfffffeff
 80037dc:	ffffefff 	.word	0xffffefff
 80037e0:	fffffe7f 	.word	0xfffffe7f
 80037e4:	fffffdff 	.word	0xfffffdff
 80037e8:	ffffdfff 	.word	0xffffdfff
 80037ec:	fffffd7f 	.word	0xfffffd7f

080037f0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_RTC_DeactivateAlarm+0x1c>
 8003808:	2302      	movs	r3, #2
 800380a:	e086      	b.n	800391a <HAL_RTC_DeactivateAlarm+0x12a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2221      	movs	r2, #33	; 0x21
 8003818:	2102      	movs	r1, #2
 800381a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	22ca      	movs	r2, #202	; 0xca
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2253      	movs	r2, #83	; 0x53
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	429a      	cmp	r2, r3
 8003834:	d132      	bne.n	800389c <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4938      	ldr	r1, [pc, #224]	; (8003924 <HAL_RTC_DeactivateAlarm+0x134>)
 8003842:	400a      	ands	r2, r1
 8003844:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4935      	ldr	r1, [pc, #212]	; (8003928 <HAL_RTC_DeactivateAlarm+0x138>)
 8003852:	400a      	ands	r2, r1
 8003854:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003856:	f7fe f9a5 	bl	8001ba4 <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800385e:	e016      	b.n	800388e <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003860:	f7fe f9a0 	bl	8001ba4 <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad2      	subs	r2, r2, r3
 800386a:	23fa      	movs	r3, #250	; 0xfa
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	429a      	cmp	r2, r3
 8003870:	d90d      	bls.n	800388e <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	22ff      	movs	r2, #255	; 0xff
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2221      	movs	r2, #33	; 0x21
 800387e:	2103      	movs	r1, #3
 8003880:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e045      	b.n	800391a <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d0e2      	beq.n	8003860 <HAL_RTC_DeactivateAlarm+0x70>
 800389a:	e031      	b.n	8003900 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4921      	ldr	r1, [pc, #132]	; (800392c <HAL_RTC_DeactivateAlarm+0x13c>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	491e      	ldr	r1, [pc, #120]	; (8003930 <HAL_RTC_DeactivateAlarm+0x140>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fe f972 	bl	8001ba4 <HAL_GetTick>
 80038c0:	0003      	movs	r3, r0
 80038c2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80038c4:	e016      	b.n	80038f4 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038c6:	f7fe f96d 	bl	8001ba4 <HAL_GetTick>
 80038ca:	0002      	movs	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad2      	subs	r2, r2, r3
 80038d0:	23fa      	movs	r3, #250	; 0xfa
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d90d      	bls.n	80038f4 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	22ff      	movs	r2, #255	; 0xff
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2221      	movs	r2, #33	; 0x21
 80038e4:	2103      	movs	r1, #3
 80038e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	2100      	movs	r1, #0
 80038ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e012      	b.n	800391a <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2202      	movs	r2, #2
 80038fc:	4013      	ands	r3, r2
 80038fe:	d0e2      	beq.n	80038c6 <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	22ff      	movs	r2, #255	; 0xff
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2221      	movs	r2, #33	; 0x21
 800390c:	2101      	movs	r1, #1
 800390e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b004      	add	sp, #16
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	fffffeff 	.word	0xfffffeff
 8003928:	ffffefff 	.word	0xffffefff
 800392c:	fffffdff 	.word	0xfffffdff
 8003930:	ffffdfff 	.word	0xffffdfff

08003934 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RTC_WaitForSynchro+0x4c>)
 8003946:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003948:	f7fe f92c 	bl	8001ba4 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003950:	e00a      	b.n	8003968 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003952:	f7fe f927 	bl	8001ba4 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	23fa      	movs	r3, #250	; 0xfa
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d901      	bls.n	8003968 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	4013      	ands	r3, r2
 8003972:	d0ee      	beq.n	8003952 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	0001ff5f 	.word	0x0001ff5f

08003984 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	230f      	movs	r3, #15
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	4013      	ands	r3, r2
 80039a2:	d12c      	bne.n	80039fe <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fe f8f6 	bl	8001ba4 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80039bc:	e014      	b.n	80039e8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039be:	f7fe f8f1 	bl	8001ba4 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1ad2      	subs	r2, r2, r3
 80039c8:	200f      	movs	r0, #15
 80039ca:	183b      	adds	r3, r7, r0
 80039cc:	1839      	adds	r1, r7, r0
 80039ce:	7809      	ldrb	r1, [r1, #0]
 80039d0:	7019      	strb	r1, [r3, #0]
 80039d2:	23fa      	movs	r3, #250	; 0xfa
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d906      	bls.n	80039e8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2221      	movs	r2, #33	; 0x21
 80039de:	2104      	movs	r1, #4
 80039e0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80039e2:	183b      	adds	r3, r7, r0
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2240      	movs	r2, #64	; 0x40
 80039f0:	4013      	ands	r3, r2
 80039f2:	d104      	bne.n	80039fe <RTC_EnterInitMode+0x7a>
 80039f4:	230f      	movs	r3, #15
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d1df      	bne.n	80039be <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80039fe:	230f      	movs	r3, #15
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b004      	add	sp, #16
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a14:	240f      	movs	r4, #15
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2180      	movs	r1, #128	; 0x80
 8003a28:	438a      	bics	r2, r1
 8003a2a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2220      	movs	r2, #32
 8003a34:	4013      	ands	r3, r2
 8003a36:	d10c      	bne.n	8003a52 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7ff ff7a 	bl	8003934 <HAL_RTC_WaitForSynchro>
 8003a40:	1e03      	subs	r3, r0, #0
 8003a42:	d006      	beq.n	8003a52 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2221      	movs	r2, #33	; 0x21
 8003a48:	2104      	movs	r1, #4
 8003a4a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003a4c:	193b      	adds	r3, r7, r4
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003a52:	230f      	movs	r3, #15
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b005      	add	sp, #20
 8003a5e:	bd90      	pop	{r4, r7, pc}

08003a60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	0002      	movs	r2, r0
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003a70:	e007      	b.n	8003a82 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003a78:	1dfb      	adds	r3, r7, #7
 8003a7a:	1dfa      	adds	r2, r7, #7
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	3a0a      	subs	r2, #10
 8003a80:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	d8f3      	bhi.n	8003a72 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	b2db      	uxtb	r3, r3
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	1dfb      	adds	r3, r7, #7
 8003aac:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003ab2:	1dfb      	adds	r3, r7, #7
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	001a      	movs	r2, r3
 8003abc:	0013      	movs	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	1dfb      	adds	r3, r7, #7
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	210f      	movs	r1, #15
 8003ad0:	400b      	ands	r3, r1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	b2db      	uxtb	r3, r3
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e032      	b.n	8003b58 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2239      	movs	r2, #57	; 0x39
 8003af6:	5c9b      	ldrb	r3, [r3, r2]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2238      	movs	r2, #56	; 0x38
 8003b02:	2100      	movs	r1, #0
 8003b04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7fd f867 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2239      	movs	r2, #57	; 0x39
 8003b12:	2102      	movs	r1, #2
 8003b14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	0019      	movs	r1, r3
 8003b20:	0010      	movs	r0, r2
 8003b22:	f000 fa95 	bl	8004050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	223e      	movs	r2, #62	; 0x3e
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223a      	movs	r2, #58	; 0x3a
 8003b32:	2101      	movs	r1, #1
 8003b34:	5499      	strb	r1, [r3, r2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	223b      	movs	r2, #59	; 0x3b
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5499      	strb	r1, [r3, r2]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	223c      	movs	r2, #60	; 0x3c
 8003b42:	2101      	movs	r1, #1
 8003b44:	5499      	strb	r1, [r3, r2]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	223d      	movs	r2, #61	; 0x3d
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2239      	movs	r2, #57	; 0x39
 8003b52:	2101      	movs	r1, #1
 8003b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2239      	movs	r2, #57	; 0x39
 8003b6c:	5c9b      	ldrb	r3, [r3, r2]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d001      	beq.n	8003b78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e033      	b.n	8003be0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2239      	movs	r2, #57	; 0x39
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	05db      	lsls	r3, r3, #23
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d00e      	beq.n	8003baa <HAL_TIM_Base_Start+0x4a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_TIM_Base_Start+0x88>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_TIM_Base_Start+0x4a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_TIM_Base_Start+0x8c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_TIM_Base_Start+0x4a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <HAL_TIM_Base_Start+0x90>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d111      	bne.n	8003bce <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b06      	cmp	r3, #6
 8003bba:	d010      	beq.n	8003bde <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bcc:	e007      	b.n	8003bde <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b004      	add	sp, #16
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40010800 	.word	0x40010800
 8003bf0:	40011400 	.word	0x40011400

08003bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2239      	movs	r2, #57	; 0x39
 8003c00:	5c9b      	ldrb	r3, [r3, r2]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d001      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e03b      	b.n	8003c84 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2239      	movs	r2, #57	; 0x39
 8003c10:	2102      	movs	r1, #2
 8003c12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	05db      	lsls	r3, r3, #23
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d00e      	beq.n	8003c4e <HAL_TIM_Base_Start_IT+0x5a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <HAL_TIM_Base_Start_IT+0x98>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_TIM_Base_Start_IT+0x5a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_TIM_Base_Start_IT+0x5a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d111      	bne.n	8003c72 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2207      	movs	r2, #7
 8003c56:	4013      	ands	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d010      	beq.n	8003c82 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c70:	e007      	b.n	8003c82 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	0018      	movs	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b004      	add	sp, #16
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40010800 	.word	0x40010800
 8003c94:	40011400 	.word	0x40011400

08003c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d124      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d11d      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4252      	negs	r2, r2
 8003cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 f9a0 	bl	8004020 <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e007      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 f993 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f000 f99f 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2204      	movs	r2, #4
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d125      	bne.n	8003d52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d11e      	bne.n	8003d52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2205      	movs	r2, #5
 8003d1a:	4252      	negs	r2, r2
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	23c0      	movs	r3, #192	; 0xc0
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 f973 	bl	8004020 <HAL_TIM_IC_CaptureCallback>
 8003d3a:	e007      	b.n	8003d4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 f966 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 f972 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d124      	bne.n	8003daa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2208      	movs	r2, #8
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11d      	bne.n	8003daa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2209      	movs	r2, #9
 8003d74:	4252      	negs	r2, r2
 8003d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2203      	movs	r2, #3
 8003d86:	4013      	ands	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 f947 	bl	8004020 <HAL_TIM_IC_CaptureCallback>
 8003d92:	e007      	b.n	8003da4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	0018      	movs	r0, r3
 8003d98:	f000 f93a 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 f946 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2210      	movs	r2, #16
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d125      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d11e      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2211      	movs	r2, #17
 8003dcc:	4252      	negs	r2, r2
 8003dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	23c0      	movs	r3, #192	; 0xc0
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4013      	ands	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f91a 	bl	8004020 <HAL_TIM_IC_CaptureCallback>
 8003dec:	e007      	b.n	8003dfe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f000 f90d 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f000 f919 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10f      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d108      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2202      	movs	r2, #2
 8003e26:	4252      	negs	r2, r2
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc fe8f 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2240      	movs	r2, #64	; 0x40
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d10f      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b40      	cmp	r3, #64	; 0x40
 8003e4c:	d108      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2241      	movs	r2, #65	; 0x41
 8003e54:	4252      	negs	r2, r2
 8003e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f000 f8f0 	bl	8004040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	230f      	movs	r3, #15
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2238      	movs	r2, #56	; 0x38
 8003e7e:	5c9b      	ldrb	r3, [r3, r2]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_TIM_ConfigClockSource+0x20>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0bc      	b.n	8004002 <HAL_TIM_ConfigClockSource+0x19a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2238      	movs	r2, #56	; 0x38
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2239      	movs	r2, #57	; 0x39
 8003e94:	2102      	movs	r1, #2
 8003e96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2277      	movs	r2, #119	; 0x77
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	0192      	lsls	r2, r2, #6
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d040      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0xde>
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	0192      	lsls	r2, r2, #6
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d900      	bls.n	8003ece <HAL_TIM_ConfigClockSource+0x66>
 8003ecc:	e088      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	0152      	lsls	r2, r2, #5
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d100      	bne.n	8003ed8 <HAL_TIM_ConfigClockSource+0x70>
 8003ed6:	e088      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x182>
 8003ed8:	2280      	movs	r2, #128	; 0x80
 8003eda:	0152      	lsls	r2, r2, #5
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d900      	bls.n	8003ee2 <HAL_TIM_ConfigClockSource+0x7a>
 8003ee0:	e07e      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003ee2:	2b70      	cmp	r3, #112	; 0x70
 8003ee4:	d018      	beq.n	8003f18 <HAL_TIM_ConfigClockSource+0xb0>
 8003ee6:	d900      	bls.n	8003eea <HAL_TIM_ConfigClockSource+0x82>
 8003ee8:	e07a      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003eea:	2b60      	cmp	r3, #96	; 0x60
 8003eec:	d04f      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x126>
 8003eee:	d900      	bls.n	8003ef2 <HAL_TIM_ConfigClockSource+0x8a>
 8003ef0:	e076      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003ef2:	2b50      	cmp	r3, #80	; 0x50
 8003ef4:	d03b      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x106>
 8003ef6:	d900      	bls.n	8003efa <HAL_TIM_ConfigClockSource+0x92>
 8003ef8:	e072      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d057      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x146>
 8003efe:	d900      	bls.n	8003f02 <HAL_TIM_ConfigClockSource+0x9a>
 8003f00:	e06e      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003f02:	2b30      	cmp	r3, #48	; 0x30
 8003f04:	d063      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x166>
 8003f06:	d86b      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d060      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x166>
 8003f0c:	d868      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d05d      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x166>
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d05b      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x166>
 8003f16:	e063      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f28:	f000 f96a 	bl	8004200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2277      	movs	r2, #119	; 0x77
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]
      break;
 8003f44:	e052      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f56:	f000 f953 	bl	8004200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	01c9      	lsls	r1, r1, #7
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
      break;
 8003f6c:	e03e      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	f000 f8c6 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2150      	movs	r1, #80	; 0x50
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 f920 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e02e      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	f000 f8e4 	bl	8004168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2160      	movs	r1, #96	; 0x60
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 f910 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 8003fac:	e01e      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	001a      	movs	r2, r3
 8003fbc:	f000 f8a6 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2140      	movs	r1, #64	; 0x40
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 f900 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e00e      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	0019      	movs	r1, r3
 8003fd8:	0010      	movs	r0, r2
 8003fda:	f000 f8f7 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 8003fde:	e005      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003fe0:	230f      	movs	r3, #15
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
      break;
 8003fe8:	e000      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003fea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2239      	movs	r2, #57	; 0x39
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2238      	movs	r2, #56	; 0x38
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]

  return status;
 8003ffc:	230f      	movs	r3, #15
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	781b      	ldrb	r3, [r3, #0]
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b004      	add	sp, #16
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	ffff00ff 	.word	0xffff00ff

08004010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004038:	46c0      	nop			; (mov r8, r8)
 800403a:	46bd      	mov	sp, r7
 800403c:	b002      	add	sp, #8
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b002      	add	sp, #8
 800404e:	bd80      	pop	{r7, pc}

08004050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	05db      	lsls	r3, r3, #23
 8004066:	429a      	cmp	r2, r3
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0x32>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <TIM_Base_SetConfig+0xac>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0x32>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <TIM_Base_SetConfig+0xb0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0x32>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a21      	ldr	r2, [pc, #132]	; (8004104 <TIM_Base_SetConfig+0xb4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2270      	movs	r2, #112	; 0x70
 8004086:	4393      	bics	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	05db      	lsls	r3, r3, #23
 800409a:	429a      	cmp	r2, r3
 800409c:	d00b      	beq.n	80040b6 <TIM_Base_SetConfig+0x66>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a16      	ldr	r2, [pc, #88]	; (80040fc <TIM_Base_SetConfig+0xac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <TIM_Base_SetConfig+0x66>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <TIM_Base_SetConfig+0xb0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_Base_SetConfig+0x66>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <TIM_Base_SetConfig+0xb4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d108      	bne.n	80040c8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a13      	ldr	r2, [pc, #76]	; (8004108 <TIM_Base_SetConfig+0xb8>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	4393      	bics	r3, r2
 80040ce:	001a      	movs	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	615a      	str	r2, [r3, #20]
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40000400 	.word	0x40000400
 8004100:	40010800 	.word	0x40010800
 8004104:	40011400 	.word	0x40011400
 8004108:	fffffcff 	.word	0xfffffcff

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	2201      	movs	r2, #1
 8004124:	4393      	bics	r3, r2
 8004126:	001a      	movs	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	22f0      	movs	r2, #240	; 0xf0
 8004136:	4393      	bics	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	220a      	movs	r2, #10
 8004148:	4393      	bics	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	621a      	str	r2, [r3, #32]
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b006      	add	sp, #24
 8004166:	bd80      	pop	{r7, pc}

08004168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	2210      	movs	r2, #16
 800417a:	4393      	bics	r3, r2
 800417c:	001a      	movs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <TIM_TI2_ConfigInputStage+0x60>)
 8004192:	4013      	ands	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	22a0      	movs	r2, #160	; 0xa0
 80041a4:	4393      	bics	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b006      	add	sp, #24
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	ffff0fff 	.word	0xffff0fff

080041cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2270      	movs	r2, #112	; 0x70
 80041e0:	4393      	bics	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	2207      	movs	r2, #7
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	609a      	str	r2, [r3, #8]
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <TIM_ETR_SetConfig+0x3c>)
 8004218:	4013      	ands	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b006      	add	sp, #24
 800423a:	bd80      	pop	{r7, pc}
 800423c:	ffff00ff 	.word	0xffff00ff

08004240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2238      	movs	r2, #56	; 0x38
 800424e:	5c9b      	ldrb	r3, [r3, r2]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004254:	2302      	movs	r3, #2
 8004256:	e047      	b.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2238      	movs	r2, #56	; 0x38
 800425c:	2101      	movs	r1, #1
 800425e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2239      	movs	r2, #57	; 0x39
 8004264:	2102      	movs	r1, #2
 8004266:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2270      	movs	r2, #112	; 0x70
 800427c:	4393      	bics	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	05db      	lsls	r3, r3, #23
 800429a:	429a      	cmp	r2, r3
 800429c:	d00e      	beq.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10c      	bne.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	4393      	bics	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2239      	movs	r2, #57	; 0x39
 80042da:	2101      	movs	r1, #1
 80042dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2238      	movs	r2, #56	; 0x38
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b004      	add	sp, #16
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40010800 	.word	0x40010800
 80042f8:	40011400 	.word	0x40011400

080042fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e044      	b.n	8004398 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2278      	movs	r2, #120	; 0x78
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0018      	movs	r0, r3
 8004322:	f7fc fc87 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2224      	movs	r2, #36	; 0x24
 800432a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2101      	movs	r1, #1
 8004338:	438a      	bics	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f8d0 	bl	80044e4 <UART_SetConfig>
 8004344:	0003      	movs	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e024      	b.n	8004398 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f000 fb61 	bl	8004a20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	490d      	ldr	r1, [pc, #52]	; (80043a0 <HAL_UART_Init+0xa4>)
 800436a:	400a      	ands	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	212a      	movs	r1, #42	; 0x2a
 800437a:	438a      	bics	r2, r1
 800437c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2101      	movs	r1, #1
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	0018      	movs	r0, r3
 8004392:	f000 fbf9 	bl	8004b88 <UART_CheckIdleState>
 8004396:	0003      	movs	r3, r0
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	b002      	add	sp, #8
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	ffffb7ff 	.word	0xffffb7ff

080043a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	1dbb      	adds	r3, r7, #6
 80043b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d000      	beq.n	80043be <HAL_UART_Transmit+0x1a>
 80043bc:	e08c      	b.n	80044d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_UART_Transmit+0x28>
 80043c4:	1dbb      	adds	r3, r7, #6
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e084      	b.n	80044da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	015b      	lsls	r3, r3, #5
 80043d8:	429a      	cmp	r2, r3
 80043da:	d109      	bne.n	80043f0 <HAL_UART_Transmit+0x4c>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2201      	movs	r2, #1
 80043e8:	4013      	ands	r3, r2
 80043ea:	d001      	beq.n	80043f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e074      	b.n	80044da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2284      	movs	r2, #132	; 0x84
 80043f4:	2100      	movs	r1, #0
 80043f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2221      	movs	r2, #33	; 0x21
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fe:	f7fd fbd1 	bl	8001ba4 <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1dba      	adds	r2, r7, #6
 800440a:	2150      	movs	r1, #80	; 0x50
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1dba      	adds	r2, r7, #6
 8004414:	2152      	movs	r1, #82	; 0x52
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	015b      	lsls	r3, r3, #5
 8004422:	429a      	cmp	r2, r3
 8004424:	d108      	bne.n	8004438 <HAL_UART_Transmit+0x94>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e003      	b.n	8004440 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004440:	e02f      	b.n	80044a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	0013      	movs	r3, r2
 800444c:	2200      	movs	r2, #0
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	f000 fc42 	bl	8004cd8 <UART_WaitOnFlagUntilTimeout>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d004      	beq.n	8004462 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e03b      	b.n	80044da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	001a      	movs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	05d2      	lsls	r2, r2, #23
 8004474:	0dd2      	lsrs	r2, r2, #23
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	3302      	adds	r3, #2
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e007      	b.n	8004490 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3301      	adds	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2252      	movs	r2, #82	; 0x52
 8004494:	5a9b      	ldrh	r3, [r3, r2]
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b299      	uxth	r1, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2252      	movs	r2, #82	; 0x52
 80044a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2252      	movs	r2, #82	; 0x52
 80044a6:	5a9b      	ldrh	r3, [r3, r2]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1c9      	bne.n	8004442 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	0013      	movs	r3, r2
 80044b8:	2200      	movs	r2, #0
 80044ba:	2140      	movs	r1, #64	; 0x40
 80044bc:	f000 fc0c 	bl	8004cd8 <UART_WaitOnFlagUntilTimeout>
 80044c0:	1e03      	subs	r3, r0, #0
 80044c2:	d004      	beq.n	80044ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e005      	b.n	80044da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b008      	add	sp, #32
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e4:	b5b0      	push	{r4, r5, r7, lr}
 80044e6:	b08e      	sub	sp, #56	; 0x38
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ec:	231a      	movs	r3, #26
 80044ee:	2218      	movs	r2, #24
 80044f0:	189b      	adds	r3, r3, r2
 80044f2:	19db      	adds	r3, r3, r7
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	431a      	orrs	r2, r3
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	4313      	orrs	r3, r2
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4ac3      	ldr	r2, [pc, #780]	; (8004824 <UART_SetConfig+0x340>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4abe      	ldr	r2, [pc, #760]	; (8004828 <UART_SetConfig+0x344>)
 800452e:	4013      	ands	r3, r2
 8004530:	0019      	movs	r1, r3
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4ab8      	ldr	r2, [pc, #736]	; (800482c <UART_SetConfig+0x348>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004554:	4313      	orrs	r3, r2
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4ab4      	ldr	r2, [pc, #720]	; (8004830 <UART_SetConfig+0x34c>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4ab0      	ldr	r2, [pc, #704]	; (8004834 <UART_SetConfig+0x350>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d131      	bne.n	80045dc <UART_SetConfig+0xf8>
 8004578:	4baf      	ldr	r3, [pc, #700]	; (8004838 <UART_SetConfig+0x354>)
 800457a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457c:	2203      	movs	r2, #3
 800457e:	4013      	ands	r3, r2
 8004580:	2b03      	cmp	r3, #3
 8004582:	d01d      	beq.n	80045c0 <UART_SetConfig+0xdc>
 8004584:	d823      	bhi.n	80045ce <UART_SetConfig+0xea>
 8004586:	2b02      	cmp	r3, #2
 8004588:	d00c      	beq.n	80045a4 <UART_SetConfig+0xc0>
 800458a:	d820      	bhi.n	80045ce <UART_SetConfig+0xea>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <UART_SetConfig+0xb2>
 8004590:	2b01      	cmp	r3, #1
 8004592:	d00e      	beq.n	80045b2 <UART_SetConfig+0xce>
 8004594:	e01b      	b.n	80045ce <UART_SetConfig+0xea>
 8004596:	231b      	movs	r3, #27
 8004598:	2218      	movs	r2, #24
 800459a:	189b      	adds	r3, r3, r2
 800459c:	19db      	adds	r3, r3, r7
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e0b4      	b.n	800470e <UART_SetConfig+0x22a>
 80045a4:	231b      	movs	r3, #27
 80045a6:	2218      	movs	r2, #24
 80045a8:	189b      	adds	r3, r3, r2
 80045aa:	19db      	adds	r3, r3, r7
 80045ac:	2202      	movs	r2, #2
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e0ad      	b.n	800470e <UART_SetConfig+0x22a>
 80045b2:	231b      	movs	r3, #27
 80045b4:	2218      	movs	r2, #24
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	19db      	adds	r3, r3, r7
 80045ba:	2204      	movs	r2, #4
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e0a6      	b.n	800470e <UART_SetConfig+0x22a>
 80045c0:	231b      	movs	r3, #27
 80045c2:	2218      	movs	r2, #24
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	19db      	adds	r3, r3, r7
 80045c8:	2208      	movs	r2, #8
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	e09f      	b.n	800470e <UART_SetConfig+0x22a>
 80045ce:	231b      	movs	r3, #27
 80045d0:	2218      	movs	r2, #24
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	19db      	adds	r3, r3, r7
 80045d6:	2210      	movs	r2, #16
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e098      	b.n	800470e <UART_SetConfig+0x22a>
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a96      	ldr	r2, [pc, #600]	; (800483c <UART_SetConfig+0x358>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d131      	bne.n	800464a <UART_SetConfig+0x166>
 80045e6:	4b94      	ldr	r3, [pc, #592]	; (8004838 <UART_SetConfig+0x354>)
 80045e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ea:	220c      	movs	r2, #12
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	d01d      	beq.n	800462e <UART_SetConfig+0x14a>
 80045f2:	d823      	bhi.n	800463c <UART_SetConfig+0x158>
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d00c      	beq.n	8004612 <UART_SetConfig+0x12e>
 80045f8:	d820      	bhi.n	800463c <UART_SetConfig+0x158>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <UART_SetConfig+0x120>
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d00e      	beq.n	8004620 <UART_SetConfig+0x13c>
 8004602:	e01b      	b.n	800463c <UART_SetConfig+0x158>
 8004604:	231b      	movs	r3, #27
 8004606:	2218      	movs	r2, #24
 8004608:	189b      	adds	r3, r3, r2
 800460a:	19db      	adds	r3, r3, r7
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e07d      	b.n	800470e <UART_SetConfig+0x22a>
 8004612:	231b      	movs	r3, #27
 8004614:	2218      	movs	r2, #24
 8004616:	189b      	adds	r3, r3, r2
 8004618:	19db      	adds	r3, r3, r7
 800461a:	2202      	movs	r2, #2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e076      	b.n	800470e <UART_SetConfig+0x22a>
 8004620:	231b      	movs	r3, #27
 8004622:	2218      	movs	r2, #24
 8004624:	189b      	adds	r3, r3, r2
 8004626:	19db      	adds	r3, r3, r7
 8004628:	2204      	movs	r2, #4
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e06f      	b.n	800470e <UART_SetConfig+0x22a>
 800462e:	231b      	movs	r3, #27
 8004630:	2218      	movs	r2, #24
 8004632:	189b      	adds	r3, r3, r2
 8004634:	19db      	adds	r3, r3, r7
 8004636:	2208      	movs	r2, #8
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e068      	b.n	800470e <UART_SetConfig+0x22a>
 800463c:	231b      	movs	r3, #27
 800463e:	2218      	movs	r2, #24
 8004640:	189b      	adds	r3, r3, r2
 8004642:	19db      	adds	r3, r3, r7
 8004644:	2210      	movs	r2, #16
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e061      	b.n	800470e <UART_SetConfig+0x22a>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7c      	ldr	r2, [pc, #496]	; (8004840 <UART_SetConfig+0x35c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d106      	bne.n	8004662 <UART_SetConfig+0x17e>
 8004654:	231b      	movs	r3, #27
 8004656:	2218      	movs	r2, #24
 8004658:	189b      	adds	r3, r3, r2
 800465a:	19db      	adds	r3, r3, r7
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e055      	b.n	800470e <UART_SetConfig+0x22a>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a77      	ldr	r2, [pc, #476]	; (8004844 <UART_SetConfig+0x360>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d106      	bne.n	800467a <UART_SetConfig+0x196>
 800466c:	231b      	movs	r3, #27
 800466e:	2218      	movs	r2, #24
 8004670:	189b      	adds	r3, r3, r2
 8004672:	19db      	adds	r3, r3, r7
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e049      	b.n	800470e <UART_SetConfig+0x22a>
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6b      	ldr	r2, [pc, #428]	; (800482c <UART_SetConfig+0x348>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d13e      	bne.n	8004702 <UART_SetConfig+0x21e>
 8004684:	4b6c      	ldr	r3, [pc, #432]	; (8004838 <UART_SetConfig+0x354>)
 8004686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004688:	23c0      	movs	r3, #192	; 0xc0
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	4013      	ands	r3, r2
 800468e:	22c0      	movs	r2, #192	; 0xc0
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	4293      	cmp	r3, r2
 8004694:	d027      	beq.n	80046e6 <UART_SetConfig+0x202>
 8004696:	22c0      	movs	r2, #192	; 0xc0
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	4293      	cmp	r3, r2
 800469c:	d82a      	bhi.n	80046f4 <UART_SetConfig+0x210>
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d011      	beq.n	80046ca <UART_SetConfig+0x1e6>
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	0112      	lsls	r2, r2, #4
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d822      	bhi.n	80046f4 <UART_SetConfig+0x210>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <UART_SetConfig+0x1d8>
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	00d2      	lsls	r2, r2, #3
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <UART_SetConfig+0x1f4>
 80046ba:	e01b      	b.n	80046f4 <UART_SetConfig+0x210>
 80046bc:	231b      	movs	r3, #27
 80046be:	2218      	movs	r2, #24
 80046c0:	189b      	adds	r3, r3, r2
 80046c2:	19db      	adds	r3, r3, r7
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e021      	b.n	800470e <UART_SetConfig+0x22a>
 80046ca:	231b      	movs	r3, #27
 80046cc:	2218      	movs	r2, #24
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	19db      	adds	r3, r3, r7
 80046d2:	2202      	movs	r2, #2
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e01a      	b.n	800470e <UART_SetConfig+0x22a>
 80046d8:	231b      	movs	r3, #27
 80046da:	2218      	movs	r2, #24
 80046dc:	189b      	adds	r3, r3, r2
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	2204      	movs	r2, #4
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e013      	b.n	800470e <UART_SetConfig+0x22a>
 80046e6:	231b      	movs	r3, #27
 80046e8:	2218      	movs	r2, #24
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	19db      	adds	r3, r3, r7
 80046ee:	2208      	movs	r2, #8
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e00c      	b.n	800470e <UART_SetConfig+0x22a>
 80046f4:	231b      	movs	r3, #27
 80046f6:	2218      	movs	r2, #24
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	19db      	adds	r3, r3, r7
 80046fc:	2210      	movs	r2, #16
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	e005      	b.n	800470e <UART_SetConfig+0x22a>
 8004702:	231b      	movs	r3, #27
 8004704:	2218      	movs	r2, #24
 8004706:	189b      	adds	r3, r3, r2
 8004708:	19db      	adds	r3, r3, r7
 800470a:	2210      	movs	r2, #16
 800470c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a46      	ldr	r2, [pc, #280]	; (800482c <UART_SetConfig+0x348>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d000      	beq.n	800471a <UART_SetConfig+0x236>
 8004718:	e09a      	b.n	8004850 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800471a:	231b      	movs	r3, #27
 800471c:	2218      	movs	r2, #24
 800471e:	189b      	adds	r3, r3, r2
 8004720:	19db      	adds	r3, r3, r7
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d01d      	beq.n	8004764 <UART_SetConfig+0x280>
 8004728:	dc20      	bgt.n	800476c <UART_SetConfig+0x288>
 800472a:	2b04      	cmp	r3, #4
 800472c:	d015      	beq.n	800475a <UART_SetConfig+0x276>
 800472e:	dc1d      	bgt.n	800476c <UART_SetConfig+0x288>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <UART_SetConfig+0x256>
 8004734:	2b02      	cmp	r3, #2
 8004736:	d005      	beq.n	8004744 <UART_SetConfig+0x260>
 8004738:	e018      	b.n	800476c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473a:	f7fe fac3 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 800473e:	0003      	movs	r3, r0
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004742:	e01c      	b.n	800477e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004744:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <UART_SetConfig+0x354>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2210      	movs	r2, #16
 800474a:	4013      	ands	r3, r2
 800474c:	d002      	beq.n	8004754 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800474e:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <UART_SetConfig+0x364>)
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004752:	e014      	b.n	800477e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004754:	4b3d      	ldr	r3, [pc, #244]	; (800484c <UART_SetConfig+0x368>)
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004758:	e011      	b.n	800477e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fe fa03 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 800475e:	0003      	movs	r3, r0
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004762:	e00c      	b.n	800477e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800476a:	e008      	b.n	800477e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004770:	231a      	movs	r3, #26
 8004772:	2218      	movs	r2, #24
 8004774:	189b      	adds	r3, r3, r2
 8004776:	19db      	adds	r3, r3, r7
 8004778:	2201      	movs	r2, #1
 800477a:	701a      	strb	r2, [r3, #0]
        break;
 800477c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d100      	bne.n	8004786 <UART_SetConfig+0x2a2>
 8004784:	e133      	b.n	80049ee <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	0013      	movs	r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	189b      	adds	r3, r3, r2
 8004790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004792:	429a      	cmp	r2, r3
 8004794:	d305      	bcc.n	80047a2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800479c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d906      	bls.n	80047b0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80047a2:	231a      	movs	r3, #26
 80047a4:	2218      	movs	r2, #24
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	19db      	adds	r3, r3, r7
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e11e      	b.n	80049ee <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	6939      	ldr	r1, [r7, #16]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	000b      	movs	r3, r1
 80047be:	0e1b      	lsrs	r3, r3, #24
 80047c0:	0010      	movs	r0, r2
 80047c2:	0205      	lsls	r5, r0, #8
 80047c4:	431d      	orrs	r5, r3
 80047c6:	000b      	movs	r3, r1
 80047c8:	021c      	lsls	r4, r3, #8
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	68f9      	ldr	r1, [r7, #12]
 80047da:	1900      	adds	r0, r0, r4
 80047dc:	4169      	adcs	r1, r5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	2300      	movs	r3, #0
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f7fb fd20 	bl	8000230 <__aeabi_uldivmod>
 80047f0:	0002      	movs	r2, r0
 80047f2:	000b      	movs	r3, r1
 80047f4:	0013      	movs	r3, r2
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fa:	23c0      	movs	r3, #192	; 0xc0
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	429a      	cmp	r2, r3
 8004800:	d309      	bcc.n	8004816 <UART_SetConfig+0x332>
 8004802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	035b      	lsls	r3, r3, #13
 8004808:	429a      	cmp	r2, r3
 800480a:	d204      	bcs.n	8004816 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	e0eb      	b.n	80049ee <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004816:	231a      	movs	r3, #26
 8004818:	2218      	movs	r2, #24
 800481a:	189b      	adds	r3, r3, r2
 800481c:	19db      	adds	r3, r3, r7
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e0e4      	b.n	80049ee <UART_SetConfig+0x50a>
 8004824:	efff69f3 	.word	0xefff69f3
 8004828:	ffffcfff 	.word	0xffffcfff
 800482c:	40004800 	.word	0x40004800
 8004830:	fffff4ff 	.word	0xfffff4ff
 8004834:	40013800 	.word	0x40013800
 8004838:	40021000 	.word	0x40021000
 800483c:	40004400 	.word	0x40004400
 8004840:	40004c00 	.word	0x40004c00
 8004844:	40005000 	.word	0x40005000
 8004848:	003d0900 	.word	0x003d0900
 800484c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	429a      	cmp	r2, r3
 800485a:	d000      	beq.n	800485e <UART_SetConfig+0x37a>
 800485c:	e070      	b.n	8004940 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800485e:	231b      	movs	r3, #27
 8004860:	2218      	movs	r2, #24
 8004862:	189b      	adds	r3, r3, r2
 8004864:	19db      	adds	r3, r3, r7
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d822      	bhi.n	80048b2 <UART_SetConfig+0x3ce>
 800486c:	009a      	lsls	r2, r3, #2
 800486e:	4b67      	ldr	r3, [pc, #412]	; (8004a0c <UART_SetConfig+0x528>)
 8004870:	18d3      	adds	r3, r2, r3
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004876:	f7fe fa25 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 800487a:	0003      	movs	r3, r0
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800487e:	e021      	b.n	80048c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe fa36 	bl	8002cf0 <HAL_RCC_GetPCLK2Freq>
 8004884:	0003      	movs	r3, r0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004888:	e01c      	b.n	80048c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800488a:	4b61      	ldr	r3, [pc, #388]	; (8004a10 <UART_SetConfig+0x52c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2210      	movs	r2, #16
 8004890:	4013      	ands	r3, r2
 8004892:	d002      	beq.n	800489a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004894:	4b5f      	ldr	r3, [pc, #380]	; (8004a14 <UART_SetConfig+0x530>)
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004898:	e014      	b.n	80048c4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800489a:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <UART_SetConfig+0x534>)
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800489e:	e011      	b.n	80048c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a0:	f7fe f960 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 80048a4:	0003      	movs	r3, r0
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048a8:	e00c      	b.n	80048c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048b0:	e008      	b.n	80048c4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048b6:	231a      	movs	r3, #26
 80048b8:	2218      	movs	r2, #24
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	19db      	adds	r3, r3, r7
 80048be:	2201      	movs	r2, #1
 80048c0:	701a      	strb	r2, [r3, #0]
        break;
 80048c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d100      	bne.n	80048cc <UART_SetConfig+0x3e8>
 80048ca:	e090      	b.n	80049ee <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	005a      	lsls	r2, r3, #1
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	18d2      	adds	r2, r2, r3
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	0019      	movs	r1, r3
 80048de:	0010      	movs	r0, r2
 80048e0:	f7fb fc1a 	bl	8000118 <__udivsi3>
 80048e4:	0003      	movs	r3, r0
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d921      	bls.n	8004932 <UART_SetConfig+0x44e>
 80048ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d21c      	bcs.n	8004932 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	200e      	movs	r0, #14
 80048fe:	2418      	movs	r4, #24
 8004900:	1903      	adds	r3, r0, r4
 8004902:	19db      	adds	r3, r3, r7
 8004904:	210f      	movs	r1, #15
 8004906:	438a      	bics	r2, r1
 8004908:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	b29b      	uxth	r3, r3
 8004910:	2207      	movs	r2, #7
 8004912:	4013      	ands	r3, r2
 8004914:	b299      	uxth	r1, r3
 8004916:	1903      	adds	r3, r0, r4
 8004918:	19db      	adds	r3, r3, r7
 800491a:	1902      	adds	r2, r0, r4
 800491c:	19d2      	adds	r2, r2, r7
 800491e:	8812      	ldrh	r2, [r2, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1902      	adds	r2, r0, r4
 800492a:	19d2      	adds	r2, r2, r7
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	60da      	str	r2, [r3, #12]
 8004930:	e05d      	b.n	80049ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004932:	231a      	movs	r3, #26
 8004934:	2218      	movs	r2, #24
 8004936:	189b      	adds	r3, r3, r2
 8004938:	19db      	adds	r3, r3, r7
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e056      	b.n	80049ee <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004940:	231b      	movs	r3, #27
 8004942:	2218      	movs	r2, #24
 8004944:	189b      	adds	r3, r3, r2
 8004946:	19db      	adds	r3, r3, r7
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b08      	cmp	r3, #8
 800494c:	d822      	bhi.n	8004994 <UART_SetConfig+0x4b0>
 800494e:	009a      	lsls	r2, r3, #2
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <UART_SetConfig+0x538>)
 8004952:	18d3      	adds	r3, r2, r3
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004958:	f7fe f9b4 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 800495c:	0003      	movs	r3, r0
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004960:	e021      	b.n	80049a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004962:	f7fe f9c5 	bl	8002cf0 <HAL_RCC_GetPCLK2Freq>
 8004966:	0003      	movs	r3, r0
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800496a:	e01c      	b.n	80049a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800496c:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <UART_SetConfig+0x52c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2210      	movs	r2, #16
 8004972:	4013      	ands	r3, r2
 8004974:	d002      	beq.n	800497c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <UART_SetConfig+0x530>)
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800497a:	e014      	b.n	80049a6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <UART_SetConfig+0x534>)
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004980:	e011      	b.n	80049a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fe f8ef 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8004986:	0003      	movs	r3, r0
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800498a:	e00c      	b.n	80049a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004992:	e008      	b.n	80049a6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004998:	231a      	movs	r3, #26
 800499a:	2218      	movs	r2, #24
 800499c:	189b      	adds	r3, r3, r2
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
        break;
 80049a4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	085a      	lsrs	r2, r3, #1
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	18d2      	adds	r2, r2, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	0019      	movs	r1, r3
 80049bc:	0010      	movs	r0, r2
 80049be:	f7fb fbab 	bl	8000118 <__udivsi3>
 80049c2:	0003      	movs	r3, r0
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	2b0f      	cmp	r3, #15
 80049ca:	d90a      	bls.n	80049e2 <UART_SetConfig+0x4fe>
 80049cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	025b      	lsls	r3, r3, #9
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d205      	bcs.n	80049e2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	b29a      	uxth	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
 80049e0:	e005      	b.n	80049ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80049e2:	231a      	movs	r3, #26
 80049e4:	2218      	movs	r2, #24
 80049e6:	189b      	adds	r3, r3, r2
 80049e8:	19db      	adds	r3, r3, r7
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2200      	movs	r2, #0
 80049f2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2200      	movs	r2, #0
 80049f8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049fa:	231a      	movs	r3, #26
 80049fc:	2218      	movs	r2, #24
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	781b      	ldrb	r3, [r3, #0]
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b00e      	add	sp, #56	; 0x38
 8004a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a0c:	08005b2c 	.word	0x08005b2c
 8004a10:	40021000 	.word	0x40021000
 8004a14:	003d0900 	.word	0x003d0900
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	08005b50 	.word	0x08005b50

08004a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a4a      	ldr	r2, [pc, #296]	; (8004b64 <UART_AdvFeatureConfig+0x144>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4a43      	ldr	r2, [pc, #268]	; (8004b68 <UART_AdvFeatureConfig+0x148>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2204      	movs	r2, #4
 8004a72:	4013      	ands	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4a3b      	ldr	r2, [pc, #236]	; (8004b6c <UART_AdvFeatureConfig+0x14c>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2208      	movs	r2, #8
 8004a94:	4013      	ands	r3, r2
 8004a96:	d00b      	beq.n	8004ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4a34      	ldr	r2, [pc, #208]	; (8004b70 <UART_AdvFeatureConfig+0x150>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <UART_AdvFeatureConfig+0x154>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	4a25      	ldr	r2, [pc, #148]	; (8004b78 <UART_AdvFeatureConfig+0x158>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2240      	movs	r2, #64	; 0x40
 8004afa:	4013      	ands	r3, r2
 8004afc:	d01d      	beq.n	8004b3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <UART_AdvFeatureConfig+0x15c>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	0019      	movs	r1, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	035b      	lsls	r3, r3, #13
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d10b      	bne.n	8004b3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <UART_AdvFeatureConfig+0x160>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2280      	movs	r2, #128	; 0x80
 8004b40:	4013      	ands	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <UART_AdvFeatureConfig+0x164>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	fffdffff 	.word	0xfffdffff
 8004b68:	fffeffff 	.word	0xfffeffff
 8004b6c:	fffbffff 	.word	0xfffbffff
 8004b70:	ffff7fff 	.word	0xffff7fff
 8004b74:	ffffefff 	.word	0xffffefff
 8004b78:	ffffdfff 	.word	0xffffdfff
 8004b7c:	ffefffff 	.word	0xffefffff
 8004b80:	ff9fffff 	.word	0xff9fffff
 8004b84:	fff7ffff 	.word	0xfff7ffff

08004b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b092      	sub	sp, #72	; 0x48
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2284      	movs	r2, #132	; 0x84
 8004b94:	2100      	movs	r1, #0
 8004b96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b98:	f7fd f804 	bl	8001ba4 <HAL_GetTick>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d12c      	bne.n	8004c08 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	0391      	lsls	r1, r2, #14
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4a46      	ldr	r2, [pc, #280]	; (8004cd0 <UART_CheckIdleState+0x148>)
 8004bb8:	9200      	str	r2, [sp, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f000 f88c 	bl	8004cd8 <UART_WaitOnFlagUntilTimeout>
 8004bc0:	1e03      	subs	r3, r0, #0
 8004bc2:	d021      	beq.n	8004c08 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bce:	2301      	movs	r3, #1
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	438a      	bics	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2278      	movs	r2, #120	; 0x78
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e05f      	b.n	8004cc8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d146      	bne.n	8004ca4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	03d1      	lsls	r1, r2, #15
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <UART_CheckIdleState+0x148>)
 8004c20:	9200      	str	r2, [sp, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f000 f858 	bl	8004cd8 <UART_WaitOnFlagUntilTimeout>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d03b      	beq.n	8004ca4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c32:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
 8004c36:	2301      	movs	r3, #1
 8004c38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4921      	ldr	r1, [pc, #132]	; (8004cd4 <UART_CheckIdleState+0x14c>)
 8004c4e:	400a      	ands	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f383 8810 	msr	PRIMASK, r3
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c62:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c64:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
 8004c68:	2301      	movs	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f383 8810 	msr	PRIMASK, r3
}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2101      	movs	r1, #1
 8004c80:	438a      	bics	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	f383 8810 	msr	PRIMASK, r3
}
 8004c8e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	2120      	movs	r1, #32
 8004c96:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2278      	movs	r2, #120	; 0x78
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e011      	b.n	8004cc8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	2120      	movs	r1, #32
 8004cb0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2278      	movs	r2, #120	; 0x78
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b010      	add	sp, #64	; 0x40
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	01ffffff 	.word	0x01ffffff
 8004cd4:	fffffedf 	.word	0xfffffedf

08004cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	1dfb      	adds	r3, r7, #7
 8004ce6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce8:	e04b      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3301      	adds	r3, #1
 8004cee:	d048      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf0:	f7fc ff58 	bl	8001ba4 <HAL_GetTick>
 8004cf4:	0002      	movs	r2, r0
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e04b      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2204      	movs	r2, #4
 8004d12:	4013      	ands	r3, r2
 8004d14:	d035      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d111      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 f83c 	bl	8004dac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2284      	movs	r2, #132	; 0x84
 8004d38:	2108      	movs	r1, #8
 8004d3a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2278      	movs	r2, #120	; 0x78
 8004d40:	2100      	movs	r1, #0
 8004d42:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e02c      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	401a      	ands	r2, r3
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d112      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	0112      	lsls	r2, r2, #4
 8004d64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 f81f 	bl	8004dac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2284      	movs	r2, #132	; 0x84
 8004d72:	2120      	movs	r1, #32
 8004d74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2278      	movs	r2, #120	; 0x78
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e00f      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	425a      	negs	r2, r3
 8004d92:	4153      	adcs	r3, r2
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	001a      	movs	r2, r3
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d0a4      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b004      	add	sp, #16
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	; 0x38
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db4:	f3ef 8310 	mrs	r3, PRIMASK
 8004db8:	617b      	str	r3, [r7, #20]
  return(result);
 8004dba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f383 8810 	msr	PRIMASK, r3
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4926      	ldr	r1, [pc, #152]	; (8004e70 <UART_EndRxTransfer+0xc4>)
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f383 8810 	msr	PRIMASK, r3
}
 8004de4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dea:	623b      	str	r3, [r7, #32]
  return(result);
 8004dec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
 8004df0:	2301      	movs	r3, #1
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	f383 8810 	msr	PRIMASK, r3
}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2101      	movs	r1, #1
 8004e08:	438a      	bics	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f383 8810 	msr	PRIMASK, r3
}
 8004e16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d118      	bne.n	8004e52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e20:	f3ef 8310 	mrs	r3, PRIMASK
 8004e24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f383 8810 	msr	PRIMASK, r3
}
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2110      	movs	r1, #16
 8004e42:	438a      	bics	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	2120      	movs	r1, #32
 8004e58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b00e      	add	sp, #56	; 0x38
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	fffffedf 	.word	0xfffffedf

08004e74 <findslot>:
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <findslot+0x2c>)
 8004e76:	b510      	push	{r4, lr}
 8004e78:	0004      	movs	r4, r0
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d004      	beq.n	8004e8a <findslot+0x16>
 8004e80:	6a03      	ldr	r3, [r0, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <findslot+0x16>
 8004e86:	f000 fbb1 	bl	80055ec <__sinit>
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	2c13      	cmp	r4, #19
 8004e8e:	d805      	bhi.n	8004e9c <findslot+0x28>
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <findslot+0x30>)
 8004e92:	00e4      	lsls	r4, r4, #3
 8004e94:	58e2      	ldr	r2, [r4, r3]
 8004e96:	3201      	adds	r2, #1
 8004e98:	d000      	beq.n	8004e9c <findslot+0x28>
 8004e9a:	18e0      	adds	r0, r4, r3
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	2000006c 	.word	0x2000006c
 8004ea4:	20000324 	.word	0x20000324

08004ea8 <error>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	0004      	movs	r4, r0
 8004eac:	f000 fc86 	bl	80057bc <__errno>
 8004eb0:	2613      	movs	r6, #19
 8004eb2:	0005      	movs	r5, r0
 8004eb4:	2700      	movs	r7, #0
 8004eb6:	1c30      	adds	r0, r6, #0
 8004eb8:	1c39      	adds	r1, r7, #0
 8004eba:	beab      	bkpt	0x00ab
 8004ebc:	1c06      	adds	r6, r0, #0
 8004ebe:	602e      	str	r6, [r5, #0]
 8004ec0:	0020      	movs	r0, r4
 8004ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ec4 <checkerror>:
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	d101      	bne.n	8004ece <checkerror+0xa>
 8004eca:	f7ff ffed 	bl	8004ea8 <error>
 8004ece:	bd10      	pop	{r4, pc}

08004ed0 <_swiread>:
 8004ed0:	b530      	push	{r4, r5, lr}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	ad01      	add	r5, sp, #4
 8004ed6:	9001      	str	r0, [sp, #4]
 8004ed8:	9102      	str	r1, [sp, #8]
 8004eda:	9203      	str	r2, [sp, #12]
 8004edc:	2406      	movs	r4, #6
 8004ede:	1c20      	adds	r0, r4, #0
 8004ee0:	1c29      	adds	r1, r5, #0
 8004ee2:	beab      	bkpt	0x00ab
 8004ee4:	1c04      	adds	r4, r0, #0
 8004ee6:	0020      	movs	r0, r4
 8004ee8:	f7ff ffec 	bl	8004ec4 <checkerror>
 8004eec:	b005      	add	sp, #20
 8004eee:	bd30      	pop	{r4, r5, pc}

08004ef0 <_read>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	000e      	movs	r6, r1
 8004ef4:	0015      	movs	r5, r2
 8004ef6:	f7ff ffbd 	bl	8004e74 <findslot>
 8004efa:	1e04      	subs	r4, r0, #0
 8004efc:	d106      	bne.n	8004f0c <_read+0x1c>
 8004efe:	f000 fc5d 	bl	80057bc <__errno>
 8004f02:	2309      	movs	r3, #9
 8004f04:	6003      	str	r3, [r0, #0]
 8004f06:	2001      	movs	r0, #1
 8004f08:	4240      	negs	r0, r0
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	002a      	movs	r2, r5
 8004f0e:	0031      	movs	r1, r6
 8004f10:	6800      	ldr	r0, [r0, #0]
 8004f12:	f7ff ffdd 	bl	8004ed0 <_swiread>
 8004f16:	1c43      	adds	r3, r0, #1
 8004f18:	d0f7      	beq.n	8004f0a <_read+0x1a>
 8004f1a:	6863      	ldr	r3, [r4, #4]
 8004f1c:	1a28      	subs	r0, r5, r0
 8004f1e:	181b      	adds	r3, r3, r0
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	e7f2      	b.n	8004f0a <_read+0x1a>

08004f24 <_swilseek>:
 8004f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f26:	000c      	movs	r4, r1
 8004f28:	0016      	movs	r6, r2
 8004f2a:	f7ff ffa3 	bl	8004e74 <findslot>
 8004f2e:	1e05      	subs	r5, r0, #0
 8004f30:	d107      	bne.n	8004f42 <_swilseek+0x1e>
 8004f32:	f000 fc43 	bl	80057bc <__errno>
 8004f36:	2309      	movs	r3, #9
 8004f38:	6003      	str	r3, [r0, #0]
 8004f3a:	2401      	movs	r4, #1
 8004f3c:	4264      	negs	r4, r4
 8004f3e:	0020      	movs	r0, r4
 8004f40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f42:	2e02      	cmp	r6, #2
 8004f44:	d903      	bls.n	8004f4e <_swilseek+0x2a>
 8004f46:	f000 fc39 	bl	80057bc <__errno>
 8004f4a:	2316      	movs	r3, #22
 8004f4c:	e7f4      	b.n	8004f38 <_swilseek+0x14>
 8004f4e:	2e01      	cmp	r6, #1
 8004f50:	d112      	bne.n	8004f78 <_swilseek+0x54>
 8004f52:	6843      	ldr	r3, [r0, #4]
 8004f54:	18e4      	adds	r4, r4, r3
 8004f56:	d4f6      	bmi.n	8004f46 <_swilseek+0x22>
 8004f58:	466f      	mov	r7, sp
 8004f5a:	682b      	ldr	r3, [r5, #0]
 8004f5c:	260a      	movs	r6, #10
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	607c      	str	r4, [r7, #4]
 8004f62:	1c30      	adds	r0, r6, #0
 8004f64:	1c39      	adds	r1, r7, #0
 8004f66:	beab      	bkpt	0x00ab
 8004f68:	1c06      	adds	r6, r0, #0
 8004f6a:	0030      	movs	r0, r6
 8004f6c:	f7ff ffaa 	bl	8004ec4 <checkerror>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	dbe2      	blt.n	8004f3a <_swilseek+0x16>
 8004f74:	606c      	str	r4, [r5, #4]
 8004f76:	e7e2      	b.n	8004f3e <_swilseek+0x1a>
 8004f78:	6803      	ldr	r3, [r0, #0]
 8004f7a:	2e02      	cmp	r6, #2
 8004f7c:	d1ec      	bne.n	8004f58 <_swilseek+0x34>
 8004f7e:	466f      	mov	r7, sp
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	360a      	adds	r6, #10
 8004f84:	1c30      	adds	r0, r6, #0
 8004f86:	1c39      	adds	r1, r7, #0
 8004f88:	beab      	bkpt	0x00ab
 8004f8a:	1c06      	adds	r6, r0, #0
 8004f8c:	0030      	movs	r0, r6
 8004f8e:	f7ff ff99 	bl	8004ec4 <checkerror>
 8004f92:	1824      	adds	r4, r4, r0
 8004f94:	3001      	adds	r0, #1
 8004f96:	d1df      	bne.n	8004f58 <_swilseek+0x34>
 8004f98:	e7cf      	b.n	8004f3a <_swilseek+0x16>

08004f9a <_lseek>:
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	f7ff ffc2 	bl	8004f24 <_swilseek>
 8004fa0:	bd10      	pop	{r4, pc}

08004fa2 <_swiwrite>:
 8004fa2:	b530      	push	{r4, r5, lr}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	ad01      	add	r5, sp, #4
 8004fa8:	9001      	str	r0, [sp, #4]
 8004faa:	9102      	str	r1, [sp, #8]
 8004fac:	9203      	str	r2, [sp, #12]
 8004fae:	2405      	movs	r4, #5
 8004fb0:	1c20      	adds	r0, r4, #0
 8004fb2:	1c29      	adds	r1, r5, #0
 8004fb4:	beab      	bkpt	0x00ab
 8004fb6:	1c04      	adds	r4, r0, #0
 8004fb8:	0020      	movs	r0, r4
 8004fba:	f7ff ff83 	bl	8004ec4 <checkerror>
 8004fbe:	b005      	add	sp, #20
 8004fc0:	bd30      	pop	{r4, r5, pc}

08004fc2 <_write>:
 8004fc2:	b570      	push	{r4, r5, r6, lr}
 8004fc4:	000e      	movs	r6, r1
 8004fc6:	0015      	movs	r5, r2
 8004fc8:	f7ff ff54 	bl	8004e74 <findslot>
 8004fcc:	1e04      	subs	r4, r0, #0
 8004fce:	d106      	bne.n	8004fde <_write+0x1c>
 8004fd0:	f000 fbf4 	bl	80057bc <__errno>
 8004fd4:	2309      	movs	r3, #9
 8004fd6:	6003      	str	r3, [r0, #0]
 8004fd8:	2001      	movs	r0, #1
 8004fda:	4240      	negs	r0, r0
 8004fdc:	e00f      	b.n	8004ffe <_write+0x3c>
 8004fde:	002a      	movs	r2, r5
 8004fe0:	0031      	movs	r1, r6
 8004fe2:	6800      	ldr	r0, [r0, #0]
 8004fe4:	f7ff ffdd 	bl	8004fa2 <_swiwrite>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	dbf5      	blt.n	8004fd8 <_write+0x16>
 8004fec:	6862      	ldr	r2, [r4, #4]
 8004fee:	1a28      	subs	r0, r5, r0
 8004ff0:	1812      	adds	r2, r2, r0
 8004ff2:	6062      	str	r2, [r4, #4]
 8004ff4:	42ab      	cmp	r3, r5
 8004ff6:	d102      	bne.n	8004ffe <_write+0x3c>
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f7ff ff55 	bl	8004ea8 <error>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}

08005000 <_swiclose>:
 8005000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005002:	2402      	movs	r4, #2
 8005004:	9001      	str	r0, [sp, #4]
 8005006:	ad01      	add	r5, sp, #4
 8005008:	1c20      	adds	r0, r4, #0
 800500a:	1c29      	adds	r1, r5, #0
 800500c:	beab      	bkpt	0x00ab
 800500e:	1c04      	adds	r4, r0, #0
 8005010:	0020      	movs	r0, r4
 8005012:	f7ff ff57 	bl	8004ec4 <checkerror>
 8005016:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08005018 <_close>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	0005      	movs	r5, r0
 800501c:	f7ff ff2a 	bl	8004e74 <findslot>
 8005020:	1e04      	subs	r4, r0, #0
 8005022:	d106      	bne.n	8005032 <_close+0x1a>
 8005024:	f000 fbca 	bl	80057bc <__errno>
 8005028:	2309      	movs	r3, #9
 800502a:	6003      	str	r3, [r0, #0]
 800502c:	2001      	movs	r0, #1
 800502e:	4240      	negs	r0, r0
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	3d01      	subs	r5, #1
 8005034:	2d01      	cmp	r5, #1
 8005036:	d809      	bhi.n	800504c <_close+0x34>
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <_close+0x48>)
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d104      	bne.n	800504c <_close+0x34>
 8005042:	2301      	movs	r3, #1
 8005044:	425b      	negs	r3, r3
 8005046:	6003      	str	r3, [r0, #0]
 8005048:	2000      	movs	r0, #0
 800504a:	e7f1      	b.n	8005030 <_close+0x18>
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	f7ff ffd7 	bl	8005000 <_swiclose>
 8005052:	2800      	cmp	r0, #0
 8005054:	d1ec      	bne.n	8005030 <_close+0x18>
 8005056:	2301      	movs	r3, #1
 8005058:	425b      	negs	r3, r3
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	e7e8      	b.n	8005030 <_close+0x18>
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	20000324 	.word	0x20000324

08005064 <_swistat>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	000c      	movs	r4, r1
 8005068:	f7ff ff04 	bl	8004e74 <findslot>
 800506c:	1e05      	subs	r5, r0, #0
 800506e:	d106      	bne.n	800507e <_swistat+0x1a>
 8005070:	f000 fba4 	bl	80057bc <__errno>
 8005074:	2309      	movs	r3, #9
 8005076:	6003      	str	r3, [r0, #0]
 8005078:	2001      	movs	r0, #1
 800507a:	4240      	negs	r0, r0
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	6862      	ldr	r2, [r4, #4]
 8005082:	019b      	lsls	r3, r3, #6
 8005084:	4313      	orrs	r3, r2
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	260c      	movs	r6, #12
 800508e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005090:	1c30      	adds	r0, r6, #0
 8005092:	1c29      	adds	r1, r5, #0
 8005094:	beab      	bkpt	0x00ab
 8005096:	1c05      	adds	r5, r0, #0
 8005098:	0028      	movs	r0, r5
 800509a:	f7ff ff13 	bl	8004ec4 <checkerror>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	d0ec      	beq.n	800507c <_swistat+0x18>
 80050a2:	6120      	str	r0, [r4, #16]
 80050a4:	2000      	movs	r0, #0
 80050a6:	e7e9      	b.n	800507c <_swistat+0x18>

080050a8 <_stat>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	000d      	movs	r5, r1
 80050ac:	0004      	movs	r4, r0
 80050ae:	2258      	movs	r2, #88	; 0x58
 80050b0:	2100      	movs	r1, #0
 80050b2:	0028      	movs	r0, r5
 80050b4:	f000 fb1a 	bl	80056ec <memset>
 80050b8:	0020      	movs	r0, r4
 80050ba:	2100      	movs	r1, #0
 80050bc:	f000 f812 	bl	80050e4 <_swiopen>
 80050c0:	0004      	movs	r4, r0
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d00c      	beq.n	80050e0 <_stat+0x38>
 80050c6:	2381      	movs	r3, #129	; 0x81
 80050c8:	686a      	ldr	r2, [r5, #4]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	4313      	orrs	r3, r2
 80050ce:	0029      	movs	r1, r5
 80050d0:	606b      	str	r3, [r5, #4]
 80050d2:	f7ff ffc7 	bl	8005064 <_swistat>
 80050d6:	0005      	movs	r5, r0
 80050d8:	0020      	movs	r0, r4
 80050da:	f7ff ff9d 	bl	8005018 <_close>
 80050de:	002c      	movs	r4, r5
 80050e0:	0020      	movs	r0, r4
 80050e2:	bd70      	pop	{r4, r5, r6, pc}

080050e4 <_swiopen>:
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	000d      	movs	r5, r1
 80050e8:	2600      	movs	r6, #0
 80050ea:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <_swiopen+0xb4>)
 80050ec:	b09b      	sub	sp, #108	; 0x6c
 80050ee:	9001      	str	r0, [sp, #4]
 80050f0:	9302      	str	r3, [sp, #8]
 80050f2:	00f3      	lsls	r3, r6, #3
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	9b02      	ldr	r3, [sp, #8]
 80050f8:	00f2      	lsls	r2, r6, #3
 80050fa:	589c      	ldr	r4, [r3, r2]
 80050fc:	1c63      	adds	r3, r4, #1
 80050fe:	d036      	beq.n	800516e <_swiopen+0x8a>
 8005100:	3601      	adds	r6, #1
 8005102:	2e14      	cmp	r6, #20
 8005104:	d1f5      	bne.n	80050f2 <_swiopen+0xe>
 8005106:	f000 fb59 	bl	80057bc <__errno>
 800510a:	2401      	movs	r4, #1
 800510c:	2318      	movs	r3, #24
 800510e:	4264      	negs	r4, r4
 8005110:	6003      	str	r3, [r0, #0]
 8005112:	e03d      	b.n	8005190 <_swiopen+0xac>
 8005114:	2302      	movs	r3, #2
 8005116:	03ec      	lsls	r4, r5, #15
 8005118:	0fe4      	lsrs	r4, r4, #31
 800511a:	421d      	tst	r5, r3
 800511c:	d000      	beq.n	8005120 <_swiopen+0x3c>
 800511e:	431c      	orrs	r4, r3
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <_swiopen+0xb8>)
 8005122:	421d      	tst	r5, r3
 8005124:	d001      	beq.n	800512a <_swiopen+0x46>
 8005126:	2304      	movs	r3, #4
 8005128:	431c      	orrs	r4, r3
 800512a:	2308      	movs	r3, #8
 800512c:	421d      	tst	r5, r3
 800512e:	d002      	beq.n	8005136 <_swiopen+0x52>
 8005130:	2204      	movs	r2, #4
 8005132:	4394      	bics	r4, r2
 8005134:	431c      	orrs	r4, r3
 8005136:	9b01      	ldr	r3, [sp, #4]
 8005138:	0018      	movs	r0, r3
 800513a:	9304      	str	r3, [sp, #16]
 800513c:	f7fa ffe4 	bl	8000108 <strlen>
 8005140:	607c      	str	r4, [r7, #4]
 8005142:	60b8      	str	r0, [r7, #8]
 8005144:	2401      	movs	r4, #1
 8005146:	1c20      	adds	r0, r4, #0
 8005148:	1c39      	adds	r1, r7, #0
 800514a:	beab      	bkpt	0x00ab
 800514c:	1c04      	adds	r4, r0, #0
 800514e:	2c00      	cmp	r4, #0
 8005150:	db08      	blt.n	8005164 <_swiopen+0x80>
 8005152:	00f2      	lsls	r2, r6, #3
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	4694      	mov	ip, r2
 8005158:	509c      	str	r4, [r3, r2]
 800515a:	2200      	movs	r2, #0
 800515c:	4463      	add	r3, ip
 800515e:	0034      	movs	r4, r6
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	e015      	b.n	8005190 <_swiopen+0xac>
 8005164:	0020      	movs	r0, r4
 8005166:	f7ff fe9f 	bl	8004ea8 <error>
 800516a:	0004      	movs	r4, r0
 800516c:	e010      	b.n	8005190 <_swiopen+0xac>
 800516e:	23a0      	movs	r3, #160	; 0xa0
 8005170:	002a      	movs	r2, r5
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	401a      	ands	r2, r3
 8005176:	af04      	add	r7, sp, #16
 8005178:	429a      	cmp	r2, r3
 800517a:	d1cb      	bne.n	8005114 <_swiopen+0x30>
 800517c:	0039      	movs	r1, r7
 800517e:	9801      	ldr	r0, [sp, #4]
 8005180:	f7ff ff92 	bl	80050a8 <_stat>
 8005184:	3001      	adds	r0, #1
 8005186:	d0c5      	beq.n	8005114 <_swiopen+0x30>
 8005188:	f000 fb18 	bl	80057bc <__errno>
 800518c:	2311      	movs	r3, #17
 800518e:	6003      	str	r3, [r0, #0]
 8005190:	0020      	movs	r0, r4
 8005192:	b01b      	add	sp, #108	; 0x6c
 8005194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	20000324 	.word	0x20000324
 800519c:	00000601 	.word	0x00000601

080051a0 <_get_semihosting_exts>:
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	b085      	sub	sp, #20
 80051a4:	9000      	str	r0, [sp, #0]
 80051a6:	9101      	str	r1, [sp, #4]
 80051a8:	4827      	ldr	r0, [pc, #156]	; (8005248 <_get_semihosting_exts+0xa8>)
 80051aa:	2100      	movs	r1, #0
 80051ac:	0015      	movs	r5, r2
 80051ae:	f7ff ff99 	bl	80050e4 <_swiopen>
 80051b2:	0004      	movs	r4, r0
 80051b4:	002a      	movs	r2, r5
 80051b6:	2100      	movs	r1, #0
 80051b8:	9800      	ldr	r0, [sp, #0]
 80051ba:	f000 fa97 	bl	80056ec <memset>
 80051be:	1c63      	adds	r3, r4, #1
 80051c0:	d015      	beq.n	80051ee <_get_semihosting_exts+0x4e>
 80051c2:	0020      	movs	r0, r4
 80051c4:	f7ff fe56 	bl	8004e74 <findslot>
 80051c8:	260c      	movs	r6, #12
 80051ca:	0007      	movs	r7, r0
 80051cc:	1c30      	adds	r0, r6, #0
 80051ce:	1c39      	adds	r1, r7, #0
 80051d0:	beab      	bkpt	0x00ab
 80051d2:	1c06      	adds	r6, r0, #0
 80051d4:	0030      	movs	r0, r6
 80051d6:	f7ff fe75 	bl	8004ec4 <checkerror>
 80051da:	2803      	cmp	r0, #3
 80051dc:	dd02      	ble.n	80051e4 <_get_semihosting_exts+0x44>
 80051de:	3803      	subs	r0, #3
 80051e0:	42a8      	cmp	r0, r5
 80051e2:	dc07      	bgt.n	80051f4 <_get_semihosting_exts+0x54>
 80051e4:	0020      	movs	r0, r4
 80051e6:	2401      	movs	r4, #1
 80051e8:	f7ff ff16 	bl	8005018 <_close>
 80051ec:	4264      	negs	r4, r4
 80051ee:	0020      	movs	r0, r4
 80051f0:	b005      	add	sp, #20
 80051f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f4:	ae03      	add	r6, sp, #12
 80051f6:	2204      	movs	r2, #4
 80051f8:	0031      	movs	r1, r6
 80051fa:	0020      	movs	r0, r4
 80051fc:	f7ff fe78 	bl	8004ef0 <_read>
 8005200:	2803      	cmp	r0, #3
 8005202:	ddef      	ble.n	80051e4 <_get_semihosting_exts+0x44>
 8005204:	7833      	ldrb	r3, [r6, #0]
 8005206:	2b53      	cmp	r3, #83	; 0x53
 8005208:	d1ec      	bne.n	80051e4 <_get_semihosting_exts+0x44>
 800520a:	7873      	ldrb	r3, [r6, #1]
 800520c:	2b48      	cmp	r3, #72	; 0x48
 800520e:	d1e9      	bne.n	80051e4 <_get_semihosting_exts+0x44>
 8005210:	78b3      	ldrb	r3, [r6, #2]
 8005212:	2b46      	cmp	r3, #70	; 0x46
 8005214:	d1e6      	bne.n	80051e4 <_get_semihosting_exts+0x44>
 8005216:	78f3      	ldrb	r3, [r6, #3]
 8005218:	2b42      	cmp	r3, #66	; 0x42
 800521a:	d1e3      	bne.n	80051e4 <_get_semihosting_exts+0x44>
 800521c:	2201      	movs	r2, #1
 800521e:	0020      	movs	r0, r4
 8005220:	9901      	ldr	r1, [sp, #4]
 8005222:	f7ff fe7f 	bl	8004f24 <_swilseek>
 8005226:	2800      	cmp	r0, #0
 8005228:	dbdc      	blt.n	80051e4 <_get_semihosting_exts+0x44>
 800522a:	002a      	movs	r2, r5
 800522c:	9900      	ldr	r1, [sp, #0]
 800522e:	0020      	movs	r0, r4
 8005230:	f7ff fe5e 	bl	8004ef0 <_read>
 8005234:	0005      	movs	r5, r0
 8005236:	0020      	movs	r0, r4
 8005238:	f7ff feee 	bl	8005018 <_close>
 800523c:	0028      	movs	r0, r5
 800523e:	f7ff fe41 	bl	8004ec4 <checkerror>
 8005242:	0004      	movs	r4, r0
 8005244:	e7d3      	b.n	80051ee <_get_semihosting_exts+0x4e>
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	08005b74 	.word	0x08005b74

0800524c <initialise_semihosting_exts>:
 800524c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800524e:	2401      	movs	r4, #1
 8005250:	2100      	movs	r1, #0
 8005252:	4e09      	ldr	r6, [pc, #36]	; (8005278 <initialise_semihosting_exts+0x2c>)
 8005254:	4d09      	ldr	r5, [pc, #36]	; (800527c <initialise_semihosting_exts+0x30>)
 8005256:	af01      	add	r7, sp, #4
 8005258:	0022      	movs	r2, r4
 800525a:	0038      	movs	r0, r7
 800525c:	6031      	str	r1, [r6, #0]
 800525e:	602c      	str	r4, [r5, #0]
 8005260:	f7ff ff9e 	bl	80051a0 <_get_semihosting_exts>
 8005264:	2800      	cmp	r0, #0
 8005266:	dd05      	ble.n	8005274 <initialise_semihosting_exts+0x28>
 8005268:	2202      	movs	r2, #2
 800526a:	783b      	ldrb	r3, [r7, #0]
 800526c:	401c      	ands	r4, r3
 800526e:	4013      	ands	r3, r2
 8005270:	6034      	str	r4, [r6, #0]
 8005272:	602b      	str	r3, [r5, #0]
 8005274:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	2000000c 	.word	0x2000000c
 800527c:	20000010 	.word	0x20000010

08005280 <_has_ext_stdout_stderr>:
 8005280:	b510      	push	{r4, lr}
 8005282:	4c04      	ldr	r4, [pc, #16]	; (8005294 <_has_ext_stdout_stderr+0x14>)
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	da01      	bge.n	800528e <_has_ext_stdout_stderr+0xe>
 800528a:	f7ff ffdf 	bl	800524c <initialise_semihosting_exts>
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	bd10      	pop	{r4, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	20000010 	.word	0x20000010

08005298 <initialise_monitor_handles>:
 8005298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529a:	4b28      	ldr	r3, [pc, #160]	; (800533c <initialise_monitor_handles+0xa4>)
 800529c:	b087      	sub	sp, #28
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	2500      	movs	r5, #0
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2303      	movs	r3, #3
 80052a6:	ac03      	add	r4, sp, #12
 80052a8:	60a3      	str	r3, [r4, #8]
 80052aa:	2601      	movs	r6, #1
 80052ac:	6065      	str	r5, [r4, #4]
 80052ae:	1c30      	adds	r0, r6, #0
 80052b0:	1c21      	adds	r1, r4, #0
 80052b2:	beab      	bkpt	0x00ab
 80052b4:	1c06      	adds	r6, r0, #0
 80052b6:	2101      	movs	r1, #1
 80052b8:	4b21      	ldr	r3, [pc, #132]	; (8005340 <initialise_monitor_handles+0xa8>)
 80052ba:	4249      	negs	r1, r1
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	601e      	str	r6, [r3, #0]
 80052c0:	002b      	movs	r3, r5
 80052c2:	4d20      	ldr	r5, [pc, #128]	; (8005344 <initialise_monitor_handles+0xac>)
 80052c4:	00da      	lsls	r2, r3, #3
 80052c6:	3301      	adds	r3, #1
 80052c8:	50a9      	str	r1, [r5, r2]
 80052ca:	2b14      	cmp	r3, #20
 80052cc:	d1fa      	bne.n	80052c4 <initialise_monitor_handles+0x2c>
 80052ce:	f7ff ffd7 	bl	8005280 <_has_ext_stdout_stderr>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d018      	beq.n	8005308 <initialise_monitor_handles+0x70>
 80052d6:	9b00      	ldr	r3, [sp, #0]
 80052d8:	2601      	movs	r6, #1
 80052da:	9303      	str	r3, [sp, #12]
 80052dc:	2303      	movs	r3, #3
 80052de:	60a3      	str	r3, [r4, #8]
 80052e0:	3301      	adds	r3, #1
 80052e2:	6063      	str	r3, [r4, #4]
 80052e4:	1c30      	adds	r0, r6, #0
 80052e6:	1c21      	adds	r1, r4, #0
 80052e8:	beab      	bkpt	0x00ab
 80052ea:	1c07      	adds	r7, r0, #0
 80052ec:	4b16      	ldr	r3, [pc, #88]	; (8005348 <initialise_monitor_handles+0xb0>)
 80052ee:	9a00      	ldr	r2, [sp, #0]
 80052f0:	601f      	str	r7, [r3, #0]
 80052f2:	2303      	movs	r3, #3
 80052f4:	9203      	str	r2, [sp, #12]
 80052f6:	60a3      	str	r3, [r4, #8]
 80052f8:	3305      	adds	r3, #5
 80052fa:	6063      	str	r3, [r4, #4]
 80052fc:	1c30      	adds	r0, r6, #0
 80052fe:	1c21      	adds	r1, r4, #0
 8005300:	beab      	bkpt	0x00ab
 8005302:	1c06      	adds	r6, r0, #0
 8005304:	4b11      	ldr	r3, [pc, #68]	; (800534c <initialise_monitor_handles+0xb4>)
 8005306:	601e      	str	r6, [r3, #0]
 8005308:	4e10      	ldr	r6, [pc, #64]	; (800534c <initialise_monitor_handles+0xb4>)
 800530a:	6833      	ldr	r3, [r6, #0]
 800530c:	3301      	adds	r3, #1
 800530e:	d102      	bne.n	8005316 <initialise_monitor_handles+0x7e>
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <initialise_monitor_handles+0xb0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	2400      	movs	r4, #0
 8005318:	9b01      	ldr	r3, [sp, #4]
 800531a:	606c      	str	r4, [r5, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7ff ffae 	bl	8005280 <_has_ext_stdout_stderr>
 8005324:	42a0      	cmp	r0, r4
 8005326:	d006      	beq.n	8005336 <initialise_monitor_handles+0x9e>
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <initialise_monitor_handles+0xb0>)
 800532a:	60ec      	str	r4, [r5, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	616c      	str	r4, [r5, #20]
 8005330:	60ab      	str	r3, [r5, #8]
 8005332:	6833      	ldr	r3, [r6, #0]
 8005334:	612b      	str	r3, [r5, #16]
 8005336:	b007      	add	sp, #28
 8005338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	08005b8a 	.word	0x08005b8a
 8005340:	2000031c 	.word	0x2000031c
 8005344:	20000324 	.word	0x20000324
 8005348:	20000320 	.word	0x20000320
 800534c:	20000318 	.word	0x20000318

08005350 <malloc>:
 8005350:	b510      	push	{r4, lr}
 8005352:	4b03      	ldr	r3, [pc, #12]	; (8005360 <malloc+0x10>)
 8005354:	0001      	movs	r1, r0
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	f000 f826 	bl	80053a8 <_malloc_r>
 800535c:	bd10      	pop	{r4, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	2000006c 	.word	0x2000006c

08005364 <sbrk_aligned>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	4e0f      	ldr	r6, [pc, #60]	; (80053a4 <sbrk_aligned+0x40>)
 8005368:	000d      	movs	r5, r1
 800536a:	6831      	ldr	r1, [r6, #0]
 800536c:	0004      	movs	r4, r0
 800536e:	2900      	cmp	r1, #0
 8005370:	d102      	bne.n	8005378 <sbrk_aligned+0x14>
 8005372:	f000 f9fd 	bl	8005770 <_sbrk_r>
 8005376:	6030      	str	r0, [r6, #0]
 8005378:	0029      	movs	r1, r5
 800537a:	0020      	movs	r0, r4
 800537c:	f000 f9f8 	bl	8005770 <_sbrk_r>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d00a      	beq.n	800539a <sbrk_aligned+0x36>
 8005384:	2303      	movs	r3, #3
 8005386:	1cc5      	adds	r5, r0, #3
 8005388:	439d      	bics	r5, r3
 800538a:	42a8      	cmp	r0, r5
 800538c:	d007      	beq.n	800539e <sbrk_aligned+0x3a>
 800538e:	1a29      	subs	r1, r5, r0
 8005390:	0020      	movs	r0, r4
 8005392:	f000 f9ed 	bl	8005770 <_sbrk_r>
 8005396:	3001      	adds	r0, #1
 8005398:	d101      	bne.n	800539e <sbrk_aligned+0x3a>
 800539a:	2501      	movs	r5, #1
 800539c:	426d      	negs	r5, r5
 800539e:	0028      	movs	r0, r5
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	200003c8 	.word	0x200003c8

080053a8 <_malloc_r>:
 80053a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053aa:	2203      	movs	r2, #3
 80053ac:	1ccb      	adds	r3, r1, #3
 80053ae:	4393      	bics	r3, r2
 80053b0:	3308      	adds	r3, #8
 80053b2:	0006      	movs	r6, r0
 80053b4:	001f      	movs	r7, r3
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	d238      	bcs.n	800542c <_malloc_r+0x84>
 80053ba:	270c      	movs	r7, #12
 80053bc:	42b9      	cmp	r1, r7
 80053be:	d837      	bhi.n	8005430 <_malloc_r+0x88>
 80053c0:	0030      	movs	r0, r6
 80053c2:	f000 f873 	bl	80054ac <__malloc_lock>
 80053c6:	4b38      	ldr	r3, [pc, #224]	; (80054a8 <_malloc_r+0x100>)
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	001c      	movs	r4, r3
 80053ce:	2c00      	cmp	r4, #0
 80053d0:	d133      	bne.n	800543a <_malloc_r+0x92>
 80053d2:	0039      	movs	r1, r7
 80053d4:	0030      	movs	r0, r6
 80053d6:	f7ff ffc5 	bl	8005364 <sbrk_aligned>
 80053da:	0004      	movs	r4, r0
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d15e      	bne.n	800549e <_malloc_r+0xf6>
 80053e0:	9b00      	ldr	r3, [sp, #0]
 80053e2:	681c      	ldr	r4, [r3, #0]
 80053e4:	0025      	movs	r5, r4
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	d14e      	bne.n	8005488 <_malloc_r+0xe0>
 80053ea:	2c00      	cmp	r4, #0
 80053ec:	d051      	beq.n	8005492 <_malloc_r+0xea>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	0029      	movs	r1, r5
 80053f2:	18e3      	adds	r3, r4, r3
 80053f4:	0030      	movs	r0, r6
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	f000 f9ba 	bl	8005770 <_sbrk_r>
 80053fc:	9b01      	ldr	r3, [sp, #4]
 80053fe:	4283      	cmp	r3, r0
 8005400:	d147      	bne.n	8005492 <_malloc_r+0xea>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	0030      	movs	r0, r6
 8005406:	1aff      	subs	r7, r7, r3
 8005408:	0039      	movs	r1, r7
 800540a:	f7ff ffab 	bl	8005364 <sbrk_aligned>
 800540e:	3001      	adds	r0, #1
 8005410:	d03f      	beq.n	8005492 <_malloc_r+0xea>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	19db      	adds	r3, r3, r7
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	9b00      	ldr	r3, [sp, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d040      	beq.n	80054a2 <_malloc_r+0xfa>
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	42a2      	cmp	r2, r4
 8005424:	d133      	bne.n	800548e <_malloc_r+0xe6>
 8005426:	2200      	movs	r2, #0
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	e014      	b.n	8005456 <_malloc_r+0xae>
 800542c:	2b00      	cmp	r3, #0
 800542e:	dac5      	bge.n	80053bc <_malloc_r+0x14>
 8005430:	230c      	movs	r3, #12
 8005432:	2500      	movs	r5, #0
 8005434:	6033      	str	r3, [r6, #0]
 8005436:	0028      	movs	r0, r5
 8005438:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800543a:	6821      	ldr	r1, [r4, #0]
 800543c:	1bc9      	subs	r1, r1, r7
 800543e:	d420      	bmi.n	8005482 <_malloc_r+0xda>
 8005440:	290b      	cmp	r1, #11
 8005442:	d918      	bls.n	8005476 <_malloc_r+0xce>
 8005444:	19e2      	adds	r2, r4, r7
 8005446:	6027      	str	r7, [r4, #0]
 8005448:	42a3      	cmp	r3, r4
 800544a:	d112      	bne.n	8005472 <_malloc_r+0xca>
 800544c:	9b00      	ldr	r3, [sp, #0]
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	6011      	str	r1, [r2, #0]
 8005454:	6053      	str	r3, [r2, #4]
 8005456:	0030      	movs	r0, r6
 8005458:	0025      	movs	r5, r4
 800545a:	f000 f82f 	bl	80054bc <__malloc_unlock>
 800545e:	2207      	movs	r2, #7
 8005460:	350b      	adds	r5, #11
 8005462:	1d23      	adds	r3, r4, #4
 8005464:	4395      	bics	r5, r2
 8005466:	1aea      	subs	r2, r5, r3
 8005468:	429d      	cmp	r5, r3
 800546a:	d0e4      	beq.n	8005436 <_malloc_r+0x8e>
 800546c:	1b5b      	subs	r3, r3, r5
 800546e:	50a3      	str	r3, [r4, r2]
 8005470:	e7e1      	b.n	8005436 <_malloc_r+0x8e>
 8005472:	605a      	str	r2, [r3, #4]
 8005474:	e7ec      	b.n	8005450 <_malloc_r+0xa8>
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	42a3      	cmp	r3, r4
 800547a:	d1d5      	bne.n	8005428 <_malloc_r+0x80>
 800547c:	9b00      	ldr	r3, [sp, #0]
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e7e9      	b.n	8005456 <_malloc_r+0xae>
 8005482:	0023      	movs	r3, r4
 8005484:	6864      	ldr	r4, [r4, #4]
 8005486:	e7a2      	b.n	80053ce <_malloc_r+0x26>
 8005488:	002c      	movs	r4, r5
 800548a:	686d      	ldr	r5, [r5, #4]
 800548c:	e7ab      	b.n	80053e6 <_malloc_r+0x3e>
 800548e:	0013      	movs	r3, r2
 8005490:	e7c4      	b.n	800541c <_malloc_r+0x74>
 8005492:	230c      	movs	r3, #12
 8005494:	0030      	movs	r0, r6
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	f000 f810 	bl	80054bc <__malloc_unlock>
 800549c:	e7cb      	b.n	8005436 <_malloc_r+0x8e>
 800549e:	6027      	str	r7, [r4, #0]
 80054a0:	e7d9      	b.n	8005456 <_malloc_r+0xae>
 80054a2:	605b      	str	r3, [r3, #4]
 80054a4:	deff      	udf	#255	; 0xff
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	200003c4 	.word	0x200003c4

080054ac <__malloc_lock>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4802      	ldr	r0, [pc, #8]	; (80054b8 <__malloc_lock+0xc>)
 80054b0:	f000 f9af 	bl	8005812 <__retarget_lock_acquire_recursive>
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	2000050c 	.word	0x2000050c

080054bc <__malloc_unlock>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	4802      	ldr	r0, [pc, #8]	; (80054c8 <__malloc_unlock+0xc>)
 80054c0:	f000 f9a8 	bl	8005814 <__retarget_lock_release_recursive>
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	2000050c 	.word	0x2000050c

080054cc <std>:
 80054cc:	2300      	movs	r3, #0
 80054ce:	b510      	push	{r4, lr}
 80054d0:	0004      	movs	r4, r0
 80054d2:	6003      	str	r3, [r0, #0]
 80054d4:	6043      	str	r3, [r0, #4]
 80054d6:	6083      	str	r3, [r0, #8]
 80054d8:	8181      	strh	r1, [r0, #12]
 80054da:	6643      	str	r3, [r0, #100]	; 0x64
 80054dc:	81c2      	strh	r2, [r0, #14]
 80054de:	6103      	str	r3, [r0, #16]
 80054e0:	6143      	str	r3, [r0, #20]
 80054e2:	6183      	str	r3, [r0, #24]
 80054e4:	0019      	movs	r1, r3
 80054e6:	2208      	movs	r2, #8
 80054e8:	305c      	adds	r0, #92	; 0x5c
 80054ea:	f000 f8ff 	bl	80056ec <memset>
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <std+0x50>)
 80054f0:	6224      	str	r4, [r4, #32]
 80054f2:	6263      	str	r3, [r4, #36]	; 0x24
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <std+0x54>)
 80054f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <std+0x58>)
 80054fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <std+0x5c>)
 80054fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <std+0x60>)
 8005502:	429c      	cmp	r4, r3
 8005504:	d005      	beq.n	8005512 <std+0x46>
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <std+0x64>)
 8005508:	429c      	cmp	r4, r3
 800550a:	d002      	beq.n	8005512 <std+0x46>
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <std+0x68>)
 800550e:	429c      	cmp	r4, r3
 8005510:	d103      	bne.n	800551a <std+0x4e>
 8005512:	0020      	movs	r0, r4
 8005514:	3058      	adds	r0, #88	; 0x58
 8005516:	f000 f97b 	bl	8005810 <__retarget_lock_init_recursive>
 800551a:	bd10      	pop	{r4, pc}
 800551c:	08005655 	.word	0x08005655
 8005520:	0800567d 	.word	0x0800567d
 8005524:	080056b5 	.word	0x080056b5
 8005528:	080056e1 	.word	0x080056e1
 800552c:	200003cc 	.word	0x200003cc
 8005530:	20000434 	.word	0x20000434
 8005534:	2000049c 	.word	0x2000049c

08005538 <stdio_exit_handler>:
 8005538:	b510      	push	{r4, lr}
 800553a:	4a03      	ldr	r2, [pc, #12]	; (8005548 <stdio_exit_handler+0x10>)
 800553c:	4903      	ldr	r1, [pc, #12]	; (800554c <stdio_exit_handler+0x14>)
 800553e:	4804      	ldr	r0, [pc, #16]	; (8005550 <stdio_exit_handler+0x18>)
 8005540:	f000 f86c 	bl	800561c <_fwalk_sglue>
 8005544:	bd10      	pop	{r4, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	20000014 	.word	0x20000014
 800554c:	080059d1 	.word	0x080059d1
 8005550:	20000020 	.word	0x20000020

08005554 <cleanup_stdio>:
 8005554:	6841      	ldr	r1, [r0, #4]
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <cleanup_stdio+0x30>)
 8005558:	b510      	push	{r4, lr}
 800555a:	0004      	movs	r4, r0
 800555c:	4299      	cmp	r1, r3
 800555e:	d001      	beq.n	8005564 <cleanup_stdio+0x10>
 8005560:	f000 fa36 	bl	80059d0 <_fflush_r>
 8005564:	68a1      	ldr	r1, [r4, #8]
 8005566:	4b08      	ldr	r3, [pc, #32]	; (8005588 <cleanup_stdio+0x34>)
 8005568:	4299      	cmp	r1, r3
 800556a:	d002      	beq.n	8005572 <cleanup_stdio+0x1e>
 800556c:	0020      	movs	r0, r4
 800556e:	f000 fa2f 	bl	80059d0 <_fflush_r>
 8005572:	68e1      	ldr	r1, [r4, #12]
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <cleanup_stdio+0x38>)
 8005576:	4299      	cmp	r1, r3
 8005578:	d002      	beq.n	8005580 <cleanup_stdio+0x2c>
 800557a:	0020      	movs	r0, r4
 800557c:	f000 fa28 	bl	80059d0 <_fflush_r>
 8005580:	bd10      	pop	{r4, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	200003cc 	.word	0x200003cc
 8005588:	20000434 	.word	0x20000434
 800558c:	2000049c 	.word	0x2000049c

08005590 <global_stdio_init.part.0>:
 8005590:	b510      	push	{r4, lr}
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <global_stdio_init.part.0+0x28>)
 8005594:	4a09      	ldr	r2, [pc, #36]	; (80055bc <global_stdio_init.part.0+0x2c>)
 8005596:	2104      	movs	r1, #4
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	4809      	ldr	r0, [pc, #36]	; (80055c0 <global_stdio_init.part.0+0x30>)
 800559c:	2200      	movs	r2, #0
 800559e:	f7ff ff95 	bl	80054cc <std>
 80055a2:	2201      	movs	r2, #1
 80055a4:	2109      	movs	r1, #9
 80055a6:	4807      	ldr	r0, [pc, #28]	; (80055c4 <global_stdio_init.part.0+0x34>)
 80055a8:	f7ff ff90 	bl	80054cc <std>
 80055ac:	2202      	movs	r2, #2
 80055ae:	2112      	movs	r1, #18
 80055b0:	4805      	ldr	r0, [pc, #20]	; (80055c8 <global_stdio_init.part.0+0x38>)
 80055b2:	f7ff ff8b 	bl	80054cc <std>
 80055b6:	bd10      	pop	{r4, pc}
 80055b8:	20000504 	.word	0x20000504
 80055bc:	08005539 	.word	0x08005539
 80055c0:	200003cc 	.word	0x200003cc
 80055c4:	20000434 	.word	0x20000434
 80055c8:	2000049c 	.word	0x2000049c

080055cc <__sfp_lock_acquire>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4802      	ldr	r0, [pc, #8]	; (80055d8 <__sfp_lock_acquire+0xc>)
 80055d0:	f000 f91f 	bl	8005812 <__retarget_lock_acquire_recursive>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	2000050d 	.word	0x2000050d

080055dc <__sfp_lock_release>:
 80055dc:	b510      	push	{r4, lr}
 80055de:	4802      	ldr	r0, [pc, #8]	; (80055e8 <__sfp_lock_release+0xc>)
 80055e0:	f000 f918 	bl	8005814 <__retarget_lock_release_recursive>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	2000050d 	.word	0x2000050d

080055ec <__sinit>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	0004      	movs	r4, r0
 80055f0:	f7ff ffec 	bl	80055cc <__sfp_lock_acquire>
 80055f4:	6a23      	ldr	r3, [r4, #32]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <__sinit+0x14>
 80055fa:	f7ff ffef 	bl	80055dc <__sfp_lock_release>
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <__sinit+0x28>)
 8005602:	6223      	str	r3, [r4, #32]
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <__sinit+0x2c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f6      	bne.n	80055fa <__sinit+0xe>
 800560c:	f7ff ffc0 	bl	8005590 <global_stdio_init.part.0>
 8005610:	e7f3      	b.n	80055fa <__sinit+0xe>
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	08005555 	.word	0x08005555
 8005618:	20000504 	.word	0x20000504

0800561c <_fwalk_sglue>:
 800561c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800561e:	0014      	movs	r4, r2
 8005620:	2600      	movs	r6, #0
 8005622:	9000      	str	r0, [sp, #0]
 8005624:	9101      	str	r1, [sp, #4]
 8005626:	68a5      	ldr	r5, [r4, #8]
 8005628:	6867      	ldr	r7, [r4, #4]
 800562a:	3f01      	subs	r7, #1
 800562c:	d504      	bpl.n	8005638 <_fwalk_sglue+0x1c>
 800562e:	6824      	ldr	r4, [r4, #0]
 8005630:	2c00      	cmp	r4, #0
 8005632:	d1f8      	bne.n	8005626 <_fwalk_sglue+0xa>
 8005634:	0030      	movs	r0, r6
 8005636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005638:	89ab      	ldrh	r3, [r5, #12]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d908      	bls.n	8005650 <_fwalk_sglue+0x34>
 800563e:	220e      	movs	r2, #14
 8005640:	5eab      	ldrsh	r3, [r5, r2]
 8005642:	3301      	adds	r3, #1
 8005644:	d004      	beq.n	8005650 <_fwalk_sglue+0x34>
 8005646:	0029      	movs	r1, r5
 8005648:	9800      	ldr	r0, [sp, #0]
 800564a:	9b01      	ldr	r3, [sp, #4]
 800564c:	4798      	blx	r3
 800564e:	4306      	orrs	r6, r0
 8005650:	3568      	adds	r5, #104	; 0x68
 8005652:	e7ea      	b.n	800562a <_fwalk_sglue+0xe>

08005654 <__sread>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	000c      	movs	r4, r1
 8005658:	250e      	movs	r5, #14
 800565a:	5f49      	ldrsh	r1, [r1, r5]
 800565c:	f000 f874 	bl	8005748 <_read_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	db03      	blt.n	800566c <__sread+0x18>
 8005664:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005666:	181b      	adds	r3, r3, r0
 8005668:	6563      	str	r3, [r4, #84]	; 0x54
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	4a02      	ldr	r2, [pc, #8]	; (8005678 <__sread+0x24>)
 8005670:	4013      	ands	r3, r2
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	e7f9      	b.n	800566a <__sread+0x16>
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	ffffefff 	.word	0xffffefff

0800567c <__swrite>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	001f      	movs	r7, r3
 8005680:	898b      	ldrh	r3, [r1, #12]
 8005682:	0005      	movs	r5, r0
 8005684:	000c      	movs	r4, r1
 8005686:	0016      	movs	r6, r2
 8005688:	05db      	lsls	r3, r3, #23
 800568a:	d505      	bpl.n	8005698 <__swrite+0x1c>
 800568c:	230e      	movs	r3, #14
 800568e:	5ec9      	ldrsh	r1, [r1, r3]
 8005690:	2200      	movs	r2, #0
 8005692:	2302      	movs	r3, #2
 8005694:	f000 f844 	bl	8005720 <_lseek_r>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	4a05      	ldr	r2, [pc, #20]	; (80056b0 <__swrite+0x34>)
 800569c:	0028      	movs	r0, r5
 800569e:	4013      	ands	r3, r2
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	0032      	movs	r2, r6
 80056a4:	230e      	movs	r3, #14
 80056a6:	5ee1      	ldrsh	r1, [r4, r3]
 80056a8:	003b      	movs	r3, r7
 80056aa:	f000 f873 	bl	8005794 <_write_r>
 80056ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b0:	ffffefff 	.word	0xffffefff

080056b4 <__sseek>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	000c      	movs	r4, r1
 80056b8:	250e      	movs	r5, #14
 80056ba:	5f49      	ldrsh	r1, [r1, r5]
 80056bc:	f000 f830 	bl	8005720 <_lseek_r>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	1c42      	adds	r2, r0, #1
 80056c4:	d103      	bne.n	80056ce <__sseek+0x1a>
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <__sseek+0x28>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	0152      	lsls	r2, r2, #5
 80056d2:	4313      	orrs	r3, r2
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	6560      	str	r0, [r4, #84]	; 0x54
 80056d8:	e7f8      	b.n	80056cc <__sseek+0x18>
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	ffffefff 	.word	0xffffefff

080056e0 <__sclose>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	230e      	movs	r3, #14
 80056e4:	5ec9      	ldrsh	r1, [r1, r3]
 80056e6:	f000 f809 	bl	80056fc <_close_r>
 80056ea:	bd10      	pop	{r4, pc}

080056ec <memset>:
 80056ec:	0003      	movs	r3, r0
 80056ee:	1882      	adds	r2, r0, r2
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d100      	bne.n	80056f6 <memset+0xa>
 80056f4:	4770      	bx	lr
 80056f6:	7019      	strb	r1, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	e7f9      	b.n	80056f0 <memset+0x4>

080056fc <_close_r>:
 80056fc:	2300      	movs	r3, #0
 80056fe:	b570      	push	{r4, r5, r6, lr}
 8005700:	4d06      	ldr	r5, [pc, #24]	; (800571c <_close_r+0x20>)
 8005702:	0004      	movs	r4, r0
 8005704:	0008      	movs	r0, r1
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	f7ff fc86 	bl	8005018 <_close>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d103      	bne.n	8005718 <_close_r+0x1c>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d000      	beq.n	8005718 <_close_r+0x1c>
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	bd70      	pop	{r4, r5, r6, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	20000508 	.word	0x20000508

08005720 <_lseek_r>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	0004      	movs	r4, r0
 8005724:	0008      	movs	r0, r1
 8005726:	0011      	movs	r1, r2
 8005728:	001a      	movs	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	4d05      	ldr	r5, [pc, #20]	; (8005744 <_lseek_r+0x24>)
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f7ff fc33 	bl	8004f9a <_lseek>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d103      	bne.n	8005740 <_lseek_r+0x20>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d000      	beq.n	8005740 <_lseek_r+0x20>
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	bd70      	pop	{r4, r5, r6, pc}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	20000508 	.word	0x20000508

08005748 <_read_r>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	0004      	movs	r4, r0
 800574c:	0008      	movs	r0, r1
 800574e:	0011      	movs	r1, r2
 8005750:	001a      	movs	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	4d05      	ldr	r5, [pc, #20]	; (800576c <_read_r+0x24>)
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7ff fbca 	bl	8004ef0 <_read>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d103      	bne.n	8005768 <_read_r+0x20>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d000      	beq.n	8005768 <_read_r+0x20>
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	20000508 	.word	0x20000508

08005770 <_sbrk_r>:
 8005770:	2300      	movs	r3, #0
 8005772:	b570      	push	{r4, r5, r6, lr}
 8005774:	4d06      	ldr	r5, [pc, #24]	; (8005790 <_sbrk_r+0x20>)
 8005776:	0004      	movs	r4, r0
 8005778:	0008      	movs	r0, r1
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	f7fb fac2 	bl	8000d04 <_sbrk>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d103      	bne.n	800578c <_sbrk_r+0x1c>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d000      	beq.n	800578c <_sbrk_r+0x1c>
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	20000508 	.word	0x20000508

08005794 <_write_r>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	0004      	movs	r4, r0
 8005798:	0008      	movs	r0, r1
 800579a:	0011      	movs	r1, r2
 800579c:	001a      	movs	r2, r3
 800579e:	2300      	movs	r3, #0
 80057a0:	4d05      	ldr	r5, [pc, #20]	; (80057b8 <_write_r+0x24>)
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7ff fc0d 	bl	8004fc2 <_write>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d103      	bne.n	80057b4 <_write_r+0x20>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d000      	beq.n	80057b4 <_write_r+0x20>
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	bd70      	pop	{r4, r5, r6, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	20000508 	.word	0x20000508

080057bc <__errno>:
 80057bc:	4b01      	ldr	r3, [pc, #4]	; (80057c4 <__errno+0x8>)
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	4770      	bx	lr
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	2000006c 	.word	0x2000006c

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	2600      	movs	r6, #0
 80057cc:	4c0c      	ldr	r4, [pc, #48]	; (8005800 <__libc_init_array+0x38>)
 80057ce:	4d0d      	ldr	r5, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057d0:	1b64      	subs	r4, r4, r5
 80057d2:	10a4      	asrs	r4, r4, #2
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	2600      	movs	r6, #0
 80057da:	f000 f925 	bl	8005a28 <_init>
 80057de:	4c0a      	ldr	r4, [pc, #40]	; (8005808 <__libc_init_array+0x40>)
 80057e0:	4d0a      	ldr	r5, [pc, #40]	; (800580c <__libc_init_array+0x44>)
 80057e2:	1b64      	subs	r4, r4, r5
 80057e4:	10a4      	asrs	r4, r4, #2
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	00b3      	lsls	r3, r6, #2
 80057ee:	58eb      	ldr	r3, [r5, r3]
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	00b3      	lsls	r3, r6, #2
 80057f8:	58eb      	ldr	r3, [r5, r3]
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	08005b98 	.word	0x08005b98
 8005804:	08005b98 	.word	0x08005b98
 8005808:	08005b9c 	.word	0x08005b9c
 800580c:	08005b98 	.word	0x08005b98

08005810 <__retarget_lock_init_recursive>:
 8005810:	4770      	bx	lr

08005812 <__retarget_lock_acquire_recursive>:
 8005812:	4770      	bx	lr

08005814 <__retarget_lock_release_recursive>:
 8005814:	4770      	bx	lr

08005816 <memcpy>:
 8005816:	2300      	movs	r3, #0
 8005818:	b510      	push	{r4, lr}
 800581a:	429a      	cmp	r2, r3
 800581c:	d100      	bne.n	8005820 <memcpy+0xa>
 800581e:	bd10      	pop	{r4, pc}
 8005820:	5ccc      	ldrb	r4, [r1, r3]
 8005822:	54c4      	strb	r4, [r0, r3]
 8005824:	3301      	adds	r3, #1
 8005826:	e7f8      	b.n	800581a <memcpy+0x4>

08005828 <_free_r>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	0005      	movs	r5, r0
 800582c:	2900      	cmp	r1, #0
 800582e:	d010      	beq.n	8005852 <_free_r+0x2a>
 8005830:	1f0c      	subs	r4, r1, #4
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da00      	bge.n	800583a <_free_r+0x12>
 8005838:	18e4      	adds	r4, r4, r3
 800583a:	0028      	movs	r0, r5
 800583c:	f7ff fe36 	bl	80054ac <__malloc_lock>
 8005840:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <_free_r+0x90>)
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <_free_r+0x2c>
 8005848:	6063      	str	r3, [r4, #4]
 800584a:	6014      	str	r4, [r2, #0]
 800584c:	0028      	movs	r0, r5
 800584e:	f7ff fe35 	bl	80054bc <__malloc_unlock>
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	42a3      	cmp	r3, r4
 8005856:	d908      	bls.n	800586a <_free_r+0x42>
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	1821      	adds	r1, r4, r0
 800585c:	428b      	cmp	r3, r1
 800585e:	d1f3      	bne.n	8005848 <_free_r+0x20>
 8005860:	6819      	ldr	r1, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	1809      	adds	r1, r1, r0
 8005866:	6021      	str	r1, [r4, #0]
 8005868:	e7ee      	b.n	8005848 <_free_r+0x20>
 800586a:	001a      	movs	r2, r3
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <_free_r+0x4e>
 8005872:	42a3      	cmp	r3, r4
 8005874:	d9f9      	bls.n	800586a <_free_r+0x42>
 8005876:	6811      	ldr	r1, [r2, #0]
 8005878:	1850      	adds	r0, r2, r1
 800587a:	42a0      	cmp	r0, r4
 800587c:	d10b      	bne.n	8005896 <_free_r+0x6e>
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	1809      	adds	r1, r1, r0
 8005882:	1850      	adds	r0, r2, r1
 8005884:	6011      	str	r1, [r2, #0]
 8005886:	4283      	cmp	r3, r0
 8005888:	d1e0      	bne.n	800584c <_free_r+0x24>
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	1841      	adds	r1, r0, r1
 8005890:	6011      	str	r1, [r2, #0]
 8005892:	6053      	str	r3, [r2, #4]
 8005894:	e7da      	b.n	800584c <_free_r+0x24>
 8005896:	42a0      	cmp	r0, r4
 8005898:	d902      	bls.n	80058a0 <_free_r+0x78>
 800589a:	230c      	movs	r3, #12
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	e7d5      	b.n	800584c <_free_r+0x24>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	1821      	adds	r1, r4, r0
 80058a4:	428b      	cmp	r3, r1
 80058a6:	d103      	bne.n	80058b0 <_free_r+0x88>
 80058a8:	6819      	ldr	r1, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	1809      	adds	r1, r1, r0
 80058ae:	6021      	str	r1, [r4, #0]
 80058b0:	6063      	str	r3, [r4, #4]
 80058b2:	6054      	str	r4, [r2, #4]
 80058b4:	e7ca      	b.n	800584c <_free_r+0x24>
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	200003c4 	.word	0x200003c4

080058bc <__sflush_r>:
 80058bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058be:	898b      	ldrh	r3, [r1, #12]
 80058c0:	0005      	movs	r5, r0
 80058c2:	000c      	movs	r4, r1
 80058c4:	071a      	lsls	r2, r3, #28
 80058c6:	d45c      	bmi.n	8005982 <__sflush_r+0xc6>
 80058c8:	684a      	ldr	r2, [r1, #4]
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	dc04      	bgt.n	80058d8 <__sflush_r+0x1c>
 80058ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	dc01      	bgt.n	80058d8 <__sflush_r+0x1c>
 80058d4:	2000      	movs	r0, #0
 80058d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80058da:	2f00      	cmp	r7, #0
 80058dc:	d0fa      	beq.n	80058d4 <__sflush_r+0x18>
 80058de:	2200      	movs	r2, #0
 80058e0:	2080      	movs	r0, #128	; 0x80
 80058e2:	682e      	ldr	r6, [r5, #0]
 80058e4:	602a      	str	r2, [r5, #0]
 80058e6:	001a      	movs	r2, r3
 80058e8:	0140      	lsls	r0, r0, #5
 80058ea:	6a21      	ldr	r1, [r4, #32]
 80058ec:	4002      	ands	r2, r0
 80058ee:	4203      	tst	r3, r0
 80058f0:	d034      	beq.n	800595c <__sflush_r+0xa0>
 80058f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	075b      	lsls	r3, r3, #29
 80058f8:	d506      	bpl.n	8005908 <__sflush_r+0x4c>
 80058fa:	6863      	ldr	r3, [r4, #4]
 80058fc:	1ac0      	subs	r0, r0, r3
 80058fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <__sflush_r+0x4c>
 8005904:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005906:	1ac0      	subs	r0, r0, r3
 8005908:	0002      	movs	r2, r0
 800590a:	2300      	movs	r3, #0
 800590c:	0028      	movs	r0, r5
 800590e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005910:	6a21      	ldr	r1, [r4, #32]
 8005912:	47b8      	blx	r7
 8005914:	89a2      	ldrh	r2, [r4, #12]
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	d106      	bne.n	8005928 <__sflush_r+0x6c>
 800591a:	6829      	ldr	r1, [r5, #0]
 800591c:	291d      	cmp	r1, #29
 800591e:	d82c      	bhi.n	800597a <__sflush_r+0xbe>
 8005920:	4b2a      	ldr	r3, [pc, #168]	; (80059cc <__sflush_r+0x110>)
 8005922:	410b      	asrs	r3, r1
 8005924:	07db      	lsls	r3, r3, #31
 8005926:	d428      	bmi.n	800597a <__sflush_r+0xbe>
 8005928:	2300      	movs	r3, #0
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	04d2      	lsls	r2, r2, #19
 8005932:	d505      	bpl.n	8005940 <__sflush_r+0x84>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <__sflush_r+0x82>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d100      	bne.n	8005940 <__sflush_r+0x84>
 800593e:	6560      	str	r0, [r4, #84]	; 0x54
 8005940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005942:	602e      	str	r6, [r5, #0]
 8005944:	2900      	cmp	r1, #0
 8005946:	d0c5      	beq.n	80058d4 <__sflush_r+0x18>
 8005948:	0023      	movs	r3, r4
 800594a:	3344      	adds	r3, #68	; 0x44
 800594c:	4299      	cmp	r1, r3
 800594e:	d002      	beq.n	8005956 <__sflush_r+0x9a>
 8005950:	0028      	movs	r0, r5
 8005952:	f7ff ff69 	bl	8005828 <_free_r>
 8005956:	2000      	movs	r0, #0
 8005958:	6360      	str	r0, [r4, #52]	; 0x34
 800595a:	e7bc      	b.n	80058d6 <__sflush_r+0x1a>
 800595c:	2301      	movs	r3, #1
 800595e:	0028      	movs	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	d1c6      	bne.n	80058f4 <__sflush_r+0x38>
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0c3      	beq.n	80058f4 <__sflush_r+0x38>
 800596c:	2b1d      	cmp	r3, #29
 800596e:	d001      	beq.n	8005974 <__sflush_r+0xb8>
 8005970:	2b16      	cmp	r3, #22
 8005972:	d101      	bne.n	8005978 <__sflush_r+0xbc>
 8005974:	602e      	str	r6, [r5, #0]
 8005976:	e7ad      	b.n	80058d4 <__sflush_r+0x18>
 8005978:	89a2      	ldrh	r2, [r4, #12]
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	4313      	orrs	r3, r2
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	e7a9      	b.n	80058d6 <__sflush_r+0x1a>
 8005982:	690e      	ldr	r6, [r1, #16]
 8005984:	2e00      	cmp	r6, #0
 8005986:	d0a5      	beq.n	80058d4 <__sflush_r+0x18>
 8005988:	680f      	ldr	r7, [r1, #0]
 800598a:	600e      	str	r6, [r1, #0]
 800598c:	1bba      	subs	r2, r7, r6
 800598e:	9201      	str	r2, [sp, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	079b      	lsls	r3, r3, #30
 8005994:	d100      	bne.n	8005998 <__sflush_r+0xdc>
 8005996:	694a      	ldr	r2, [r1, #20]
 8005998:	60a2      	str	r2, [r4, #8]
 800599a:	9b01      	ldr	r3, [sp, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	dd99      	ble.n	80058d4 <__sflush_r+0x18>
 80059a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059a2:	0032      	movs	r2, r6
 80059a4:	001f      	movs	r7, r3
 80059a6:	0028      	movs	r0, r5
 80059a8:	9b01      	ldr	r3, [sp, #4]
 80059aa:	6a21      	ldr	r1, [r4, #32]
 80059ac:	47b8      	blx	r7
 80059ae:	2800      	cmp	r0, #0
 80059b0:	dc06      	bgt.n	80059c0 <__sflush_r+0x104>
 80059b2:	2340      	movs	r3, #64	; 0x40
 80059b4:	2001      	movs	r0, #1
 80059b6:	89a2      	ldrh	r2, [r4, #12]
 80059b8:	4240      	negs	r0, r0
 80059ba:	4313      	orrs	r3, r2
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	e78a      	b.n	80058d6 <__sflush_r+0x1a>
 80059c0:	9b01      	ldr	r3, [sp, #4]
 80059c2:	1836      	adds	r6, r6, r0
 80059c4:	1a1b      	subs	r3, r3, r0
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	e7e7      	b.n	800599a <__sflush_r+0xde>
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	dfbffffe 	.word	0xdfbffffe

080059d0 <_fflush_r>:
 80059d0:	690b      	ldr	r3, [r1, #16]
 80059d2:	b570      	push	{r4, r5, r6, lr}
 80059d4:	0005      	movs	r5, r0
 80059d6:	000c      	movs	r4, r1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <_fflush_r+0x12>
 80059dc:	2500      	movs	r5, #0
 80059de:	0028      	movs	r0, r5
 80059e0:	bd70      	pop	{r4, r5, r6, pc}
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d004      	beq.n	80059f0 <_fflush_r+0x20>
 80059e6:	6a03      	ldr	r3, [r0, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <_fflush_r+0x20>
 80059ec:	f7ff fdfe 	bl	80055ec <__sinit>
 80059f0:	220c      	movs	r2, #12
 80059f2:	5ea3      	ldrsh	r3, [r4, r2]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f1      	beq.n	80059dc <_fflush_r+0xc>
 80059f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059fa:	07d2      	lsls	r2, r2, #31
 80059fc:	d404      	bmi.n	8005a08 <_fflush_r+0x38>
 80059fe:	059b      	lsls	r3, r3, #22
 8005a00:	d402      	bmi.n	8005a08 <_fflush_r+0x38>
 8005a02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a04:	f7ff ff05 	bl	8005812 <__retarget_lock_acquire_recursive>
 8005a08:	0028      	movs	r0, r5
 8005a0a:	0021      	movs	r1, r4
 8005a0c:	f7ff ff56 	bl	80058bc <__sflush_r>
 8005a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a12:	0005      	movs	r5, r0
 8005a14:	07db      	lsls	r3, r3, #31
 8005a16:	d4e2      	bmi.n	80059de <_fflush_r+0xe>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	059b      	lsls	r3, r3, #22
 8005a1c:	d4df      	bmi.n	80059de <_fflush_r+0xe>
 8005a1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a20:	f7ff fef8 	bl	8005814 <__retarget_lock_release_recursive>
 8005a24:	e7db      	b.n	80059de <_fflush_r+0xe>
	...

08005a28 <_init>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr

08005a34 <_fini>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr
