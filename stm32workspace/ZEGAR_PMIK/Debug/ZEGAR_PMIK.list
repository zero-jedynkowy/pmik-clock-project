
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003004  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030fc  080030fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003104  08003104  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800310c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000070  0800317c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800317c  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006fe1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000157c  00000000  00000000  000270bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  00028638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f4  00000000  00000000  00028e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014741  00000000  00000000  0002940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000875d  00000000  00000000  0003db4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f823  00000000  00000000  000462aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002588  00000000  00000000  000c5ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c8058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030ac 	.word	0x080030ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080030ac 	.word	0x080030ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 80004bc:	f002 f892 	bl	80025e4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 f9f8 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f80c 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8b2 	bl	8000630 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004cc:	f000 f85c 	bl	8000588 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <main+0x24>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fada 	bl	8001a8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x20>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	2000008c 	.word	0x2000008c

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b095      	sub	sp, #84	; 0x54
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	2418      	movs	r4, #24
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2338      	movs	r3, #56	; 0x38
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 fb07 	bl	8002b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2314      	movs	r3, #20
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 fb00 	bl	8002b04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <SystemClock_Config+0xa0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <SystemClock_Config+0xa4>)
 800050a:	401a      	ands	r2, r3
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <SystemClock_Config+0xa0>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	22a0      	movs	r2, #160	; 0xa0
 800052e:	0212      	lsls	r2, r2, #8
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fca4 	bl	8000e88 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000544:	f000 f8ee 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	220f      	movs	r2, #15
 800054c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2100      	movs	r1, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f001 f860 	bl	8001630 <HAL_RCC_ClockConfig>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000574:	f000 f8d6 	bl	8000724 <Error_Handler>
  }
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b015      	add	sp, #84	; 0x54
 800057e:	bd90      	pop	{r4, r7, pc}
 8000580:	40007000 	.word	0x40007000
 8000584:	ffffe7ff 	.word	0xffffe7ff

08000588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058e:	2308      	movs	r3, #8
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2310      	movs	r3, #16
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f002 fab3 	bl	8002b04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	2308      	movs	r3, #8
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f002 faac 	bl	8002b04 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_TIM2_Init+0xa4>)
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	05d2      	lsls	r2, r2, #23
 80005b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2097-1;
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_TIM2_Init+0xa4>)
 80005b6:	2283      	movs	r2, #131	; 0x83
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_TIM2_Init+0xa4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_TIM2_Init+0xa4>)
 80005c4:	22fa      	movs	r2, #250	; 0xfa
 80005c6:	0092      	lsls	r2, r2, #2
 80005c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_TIM2_Init+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_TIM2_Init+0xa4>)
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_TIM2_Init+0xa4>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fa17 	bl	8001a0c <HAL_TIM_Base_Init>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80005e2:	f000 f89f 	bl	8000724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e6:	2108      	movs	r1, #8
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	0152      	lsls	r2, r2, #5
 80005ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005f0:	187a      	adds	r2, r7, r1
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_TIM2_Init+0xa4>)
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fb82 	bl	8001d00 <HAL_TIM_ConfigClockSource>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000600:	f000 f890 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000604:	003b      	movs	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060a:	003b      	movs	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000610:	003a      	movs	r2, r7
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_TIM2_Init+0xa4>)
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fd66 	bl	80020e8 <HAL_TIMEx_MasterConfigSynchronization>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000620:	f000 f880 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b006      	add	sp, #24
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000008c 	.word	0x2000008c

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	240c      	movs	r4, #12
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f002 fa5f 	bl	8002b04 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <MX_GPIO_Init+0xec>)
 8000648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800064a:	4b34      	ldr	r3, [pc, #208]	; (800071c <MX_GPIO_Init+0xec>)
 800064c:	2104      	movs	r1, #4
 800064e:	430a      	orrs	r2, r1
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <MX_GPIO_Init+0xec>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	2204      	movs	r2, #4
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_GPIO_Init+0xec>)
 8000660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MX_GPIO_Init+0xec>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	430a      	orrs	r2, r1
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_GPIO_Init+0xec>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_GPIO_Init+0xec>)
 8000678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <MX_GPIO_Init+0xec>)
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_GPIO_Init+0xec>)
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068e:	23a0      	movs	r3, #160	; 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fbd8 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	0192      	lsls	r2, r2, #6
 80006a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2284      	movs	r2, #132	; 0x84
 80006a8:	0392      	lsls	r2, r2, #14
 80006aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <MX_GPIO_Init+0xf0>)
 80006b6:	0019      	movs	r1, r3
 80006b8:	0010      	movs	r0, r2
 80006ba:	f000 fa49 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	220c      	movs	r2, #12
 80006c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2202      	movs	r2, #2
 80006c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2203      	movs	r2, #3
 80006d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2204      	movs	r2, #4
 80006da:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	193a      	adds	r2, r7, r4
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fa33 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2220      	movs	r2, #32
 80006f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000704:	187a      	adds	r2, r7, r1
 8000706:	23a0      	movs	r3, #160	; 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fa1f 	bl	8000b50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b009      	add	sp, #36	; 0x24
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40021000 	.word	0x40021000
 8000720:	50000800 	.word	0x50000800

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <HAL_MspInit+0x24>)
 8000736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x24>)
 800073a:	2101      	movs	r1, #1
 800073c:	430a      	orrs	r2, r1
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <HAL_MspInit+0x24>)
 8000742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <HAL_MspInit+0x24>)
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	0549      	lsls	r1, r1, #21
 800074a:	430a      	orrs	r2, r1
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	429a      	cmp	r2, r3
 800076a:	d10d      	bne.n	8000788 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_TIM_Base_MspInit+0x38>)
 800076e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_TIM_Base_MspInit+0x38>)
 8000772:	2101      	movs	r1, #1
 8000774:	430a      	orrs	r2, r1
 8000776:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	200f      	movs	r0, #15
 800077e:	f000 f9b5 	bl	8000aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f9c7 	bl	8000b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f8d0 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <TIM2_IRQHandler+0x1c>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 f9b0 	bl	8001b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  printf("sss\n");
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <TIM2_IRQHandler+0x20>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 f89a 	bl	800290c <puts>
  /* USER CODE END TIM2_IRQn 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	080030c4 	.word	0x080030c4

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f002 f9ca 	bl	8002bb0 <__errno>
 800081c:	0003      	movs	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	2301      	movs	r3, #1
 8000824:	425b      	negs	r3, r3
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	18d2      	adds	r2, r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	b006      	add	sp, #24
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20005000 	.word	0x20005000
 8000848:	00000400 	.word	0x00000400
 800084c:	200000cc 	.word	0x200000cc
 8000850:	200002d0 	.word	0x200002d0

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000862:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000864:	f7ff fff6 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800088e:	f002 f995 	bl	8002bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000892:	f7ff fe11 	bl	80004b8 <main>

08000896 <LoopForever>:

LoopForever:
    b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
   ldr   r0, =_estack
 8000898:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008a4:	0800310c 	.word	0x0800310c
  ldr r2, =_sbss
 80008a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008ac:	200002cc 	.word	0x200002cc

080008b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_COMP_IRQHandler>
	...

080008b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_Init+0x3c>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Init+0x3c>)
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	430a      	orrs	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 f811 	bl	80008f4 <HAL_InitTick>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d003      	beq.n	80008de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	e001      	b.n	80008e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008de:	f7ff ff27 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_InitTick+0x5c>)
 80008fe:	681c      	ldr	r4, [r3, #0]
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x60>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	0019      	movs	r1, r3
 8000906:	23fa      	movs	r3, #250	; 0xfa
 8000908:	0098      	lsls	r0, r3, #2
 800090a:	f7ff fc05 	bl	8000118 <__udivsi3>
 800090e:	0003      	movs	r3, r0
 8000910:	0019      	movs	r1, r3
 8000912:	0020      	movs	r0, r4
 8000914:	f7ff fc00 	bl	8000118 <__udivsi3>
 8000918:	0003      	movs	r3, r0
 800091a:	0018      	movs	r0, r3
 800091c:	f000 f90b 	bl	8000b36 <HAL_SYSTICK_Config>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e00f      	b.n	8000948 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d80b      	bhi.n	8000946 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	2301      	movs	r3, #1
 8000932:	425b      	negs	r3, r3
 8000934:	2200      	movs	r2, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 f8d8 	bl	8000aec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_InitTick+0x64>)
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b003      	add	sp, #12
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	18d2      	adds	r2, r2, r3
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000008 	.word	0x20000008
 800097c:	200000d0 	.word	0x200000d0

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	200000d0 	.word	0x200000d0

08000994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b7f      	cmp	r3, #127	; 0x7f
 80009a6:	d809      	bhi.n	80009bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	231f      	movs	r3, #31
 80009b0:	401a      	ands	r2, r3
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_EnableIRQ+0x30>)
 80009b4:	2101      	movs	r1, #1
 80009b6:	4091      	lsls	r1, r2
 80009b8:	000a      	movs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
  }
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0002      	movs	r2, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b7f      	cmp	r3, #127	; 0x7f
 80009dc:	d828      	bhi.n	8000a30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009de:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <__NVIC_SetPriority+0xd4>)
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	33c0      	adds	r3, #192	; 0xc0
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	589b      	ldr	r3, [r3, r2]
 80009ee:	1dfa      	adds	r2, r7, #7
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	0011      	movs	r1, r2
 80009f4:	2203      	movs	r2, #3
 80009f6:	400a      	ands	r2, r1
 80009f8:	00d2      	lsls	r2, r2, #3
 80009fa:	21ff      	movs	r1, #255	; 0xff
 80009fc:	4091      	lsls	r1, r2
 80009fe:	000a      	movs	r2, r1
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	401a      	ands	r2, r3
 8000a04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	019b      	lsls	r3, r3, #6
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0018      	movs	r0, r3
 8000a14:	2303      	movs	r3, #3
 8000a16:	4003      	ands	r3, r0
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1c:	481f      	ldr	r0, [pc, #124]	; (8000a9c <__NVIC_SetPriority+0xd4>)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	430a      	orrs	r2, r1
 8000a28:	33c0      	adds	r3, #192	; 0xc0
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a2e:	e031      	b.n	8000a94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <__NVIC_SetPriority+0xd8>)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0019      	movs	r1, r3
 8000a38:	230f      	movs	r3, #15
 8000a3a:	400b      	ands	r3, r1
 8000a3c:	3b08      	subs	r3, #8
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	3306      	adds	r3, #6
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	18d3      	adds	r3, r2, r3
 8000a46:	3304      	adds	r3, #4
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1dfa      	adds	r2, r7, #7
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	0011      	movs	r1, r2
 8000a50:	2203      	movs	r2, #3
 8000a52:	400a      	ands	r2, r1
 8000a54:	00d2      	lsls	r2, r2, #3
 8000a56:	21ff      	movs	r1, #255	; 0xff
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	000a      	movs	r2, r1
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	401a      	ands	r2, r3
 8000a60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	019b      	lsls	r3, r3, #6
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	401a      	ands	r2, r3
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2303      	movs	r3, #3
 8000a72:	4003      	ands	r3, r0
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <__NVIC_SetPriority+0xd8>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	001c      	movs	r4, r3
 8000a80:	230f      	movs	r3, #15
 8000a82:	4023      	ands	r3, r4
 8000a84:	3b08      	subs	r3, #8
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	3306      	adds	r3, #6
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	18c3      	adds	r3, r0, r3
 8000a90:	3304      	adds	r3, #4
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	045b      	lsls	r3, r3, #17
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d301      	bcc.n	8000abc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e010      	b.n	8000ade <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <SysTick_Config+0x44>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	3a01      	subs	r2, #1
 8000ac2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	2103      	movs	r1, #3
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff ff7c 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SysTick_Config+0x44>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SysTick_Config+0x44>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	210f      	movs	r1, #15
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	1c02      	adds	r2, r0, #0
 8000afc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ff5d 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b004      	add	sp, #16
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff ff33 	bl	8000994 <__NVIC_EnableIRQ>
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ffaf 	bl	8000aa4 <SysTick_Config>
 8000b46:	0003      	movs	r3, r0
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b66:	e155      	b.n	8000e14 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <HAL_GPIO_Init+0x30>
 8000b7e:	e146      	b.n	8000e0e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2203      	movs	r2, #3
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d005      	beq.n	8000b98 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2203      	movs	r2, #3
 8000b92:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d130      	bne.n	8000bfa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	2201      	movs	r2, #1
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2203      	movs	r2, #3
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d017      	beq.n	8000c36 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	43da      	mvns	r2, r3
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d123      	bne.n	8000c8a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	58d3      	ldr	r3, [r2, r3]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2207      	movs	r2, #7
 8000c54:	4013      	ands	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2107      	movs	r1, #7
 8000c6e:	400b      	ands	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	6939      	ldr	r1, [r7, #16]
 8000c88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	401a      	ands	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	029b      	lsls	r3, r3, #10
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d100      	bne.n	8000ccc <HAL_GPIO_Init+0x17c>
 8000cca:	e0a0      	b.n	8000e0e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ccc:	4b57      	ldr	r3, [pc, #348]	; (8000e2c <HAL_GPIO_Init+0x2dc>)
 8000cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd0:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <HAL_GPIO_Init+0x2dc>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd8:	4a55      	ldr	r2, [pc, #340]	; (8000e30 <HAL_GPIO_Init+0x2e0>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	589b      	ldr	r3, [r3, r2]
 8000ce4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2203      	movs	r2, #3
 8000cea:	4013      	ands	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	43da      	mvns	r2, r3
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	23a0      	movs	r3, #160	; 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d01f      	beq.n	8000d46 <HAL_GPIO_Init+0x1f6>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4a      	ldr	r2, [pc, #296]	; (8000e34 <HAL_GPIO_Init+0x2e4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d019      	beq.n	8000d42 <HAL_GPIO_Init+0x1f2>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a49      	ldr	r2, [pc, #292]	; (8000e38 <HAL_GPIO_Init+0x2e8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a48      	ldr	r2, [pc, #288]	; (8000e3c <HAL_GPIO_Init+0x2ec>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00d      	beq.n	8000d3a <HAL_GPIO_Init+0x1ea>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a47      	ldr	r2, [pc, #284]	; (8000e40 <HAL_GPIO_Init+0x2f0>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d007      	beq.n	8000d36 <HAL_GPIO_Init+0x1e6>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <HAL_GPIO_Init+0x2f4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_GPIO_Init+0x1e2>
 8000d2e:	2305      	movs	r3, #5
 8000d30:	e00a      	b.n	8000d48 <HAL_GPIO_Init+0x1f8>
 8000d32:	2306      	movs	r3, #6
 8000d34:	e008      	b.n	8000d48 <HAL_GPIO_Init+0x1f8>
 8000d36:	2304      	movs	r3, #4
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x1f8>
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e004      	b.n	8000d48 <HAL_GPIO_Init+0x1f8>
 8000d3e:	2302      	movs	r3, #2
 8000d40:	e002      	b.n	8000d48 <HAL_GPIO_Init+0x1f8>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <HAL_GPIO_Init+0x1f8>
 8000d46:	2300      	movs	r3, #0
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	4093      	lsls	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d58:	4935      	ldr	r1, [pc, #212]	; (8000e30 <HAL_GPIO_Init+0x2e0>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	035b      	lsls	r3, r3, #13
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	039b      	lsls	r3, r3, #14
 8000da8:	4013      	ands	r3, r2
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	029b      	lsls	r3, r3, #10
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	025b      	lsls	r3, r3, #9
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_GPIO_Init+0x2f8>)
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	1e13      	subs	r3, r2, #0
 8000e1e:	d000      	beq.n	8000e22 <HAL_GPIO_Init+0x2d2>
 8000e20:	e6a2      	b.n	8000b68 <HAL_GPIO_Init+0x18>
  }
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b006      	add	sp, #24
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	50000400 	.word	0x50000400
 8000e38:	50000800 	.word	0x50000800
 8000e3c:	50000c00 	.word	0x50000c00
 8000e40:	50001000 	.word	0x50001000
 8000e44:	50001c00 	.word	0x50001c00
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	0008      	movs	r0, r1
 8000e56:	0011      	movs	r1, r2
 8000e58:	1cbb      	adds	r3, r7, #2
 8000e5a:	1c02      	adds	r2, r0, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	1c7b      	adds	r3, r7, #1
 8000e60:	1c0a      	adds	r2, r1, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e64:	1c7b      	adds	r3, r7, #1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6c:	1cbb      	adds	r3, r7, #2
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e74:	e003      	b.n	8000e7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e76:	1cbb      	adds	r3, r7, #2
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	f000 fbbf 	bl	800161a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e9c:	4bc9      	ldr	r3, [pc, #804]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea6:	4bc7      	ldr	r3, [pc, #796]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	025b      	lsls	r3, r3, #9
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d100      	bne.n	8000ebe <HAL_RCC_OscConfig+0x36>
 8000ebc:	e07e      	b.n	8000fbc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d007      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b0c      	cmp	r3, #12
 8000ec8:	d112      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x68>
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	025b      	lsls	r3, r3, #9
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d10d      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	4bbb      	ldr	r3, [pc, #748]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x5a>
 8000ee0:	e06b      	b.n	8000fba <HAL_RCC_OscConfig+0x132>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d167      	bne.n	8000fba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f000 fb95 	bl	800161a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	025b      	lsls	r3, r3, #9
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d107      	bne.n	8000f0c <HAL_RCC_OscConfig+0x84>
 8000efc:	4bb1      	ldr	r3, [pc, #708]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4bb0      	ldr	r3, [pc, #704]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e027      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	23a0      	movs	r3, #160	; 0xa0
 8000f12:	02db      	lsls	r3, r3, #11
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d10e      	bne.n	8000f36 <HAL_RCC_OscConfig+0xae>
 8000f18:	4baa      	ldr	r3, [pc, #680]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4ba9      	ldr	r3, [pc, #676]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	02c9      	lsls	r1, r1, #11
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	4ba7      	ldr	r3, [pc, #668]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4ba6      	ldr	r3, [pc, #664]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0249      	lsls	r1, r1, #9
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e012      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f36:	4ba3      	ldr	r3, [pc, #652]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4ba2      	ldr	r3, [pc, #648]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f3c:	49a2      	ldr	r1, [pc, #648]	; (80011c8 <HAL_RCC_OscConfig+0x340>)
 8000f3e:	400a      	ands	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	4ba0      	ldr	r3, [pc, #640]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4b9c      	ldr	r3, [pc, #624]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b9b      	ldr	r3, [pc, #620]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f56:	499d      	ldr	r1, [pc, #628]	; (80011cc <HAL_RCC_OscConfig+0x344>)
 8000f58:	400a      	ands	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d015      	beq.n	8000f90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fd0c 	bl	8000980 <HAL_GetTick>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f6c:	e009      	b.n	8000f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fd07 	bl	8000980 <HAL_GetTick>
 8000f72:	0002      	movs	r2, r0
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b64      	cmp	r3, #100	; 0x64
 8000f7a:	d902      	bls.n	8000f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f000 fb4c 	bl	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f82:	4b90      	ldr	r3, [pc, #576]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	029b      	lsls	r3, r3, #10
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d0ef      	beq.n	8000f6e <HAL_RCC_OscConfig+0xe6>
 8000f8e:	e015      	b.n	8000fbc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fcf6 	bl	8000980 <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fcf1 	bl	8000980 <HAL_GetTick>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b64      	cmp	r3, #100	; 0x64
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e336      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fac:	4b85      	ldr	r3, [pc, #532]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	029b      	lsls	r3, r3, #10
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d1f0      	bne.n	8000f9a <HAL_RCC_OscConfig+0x112>
 8000fb8:	e000      	b.n	8000fbc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d100      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x140>
 8000fc6:	e099      	b.n	80010fc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d009      	beq.n	8000fea <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b7a      	ldr	r3, [pc, #488]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000fdc:	2120      	movs	r1, #32
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	4393      	bics	r3, r2
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d005      	beq.n	8000ffc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b0c      	cmp	r3, #12
 8000ff4:	d13e      	bne.n	8001074 <HAL_RCC_OscConfig+0x1ec>
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d13b      	bne.n	8001074 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ffc:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2204      	movs	r2, #4
 8001002:	4013      	ands	r3, r2
 8001004:	d004      	beq.n	8001010 <HAL_RCC_OscConfig+0x188>
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e304      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b6c      	ldr	r3, [pc, #432]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x348>)
 8001016:	4013      	ands	r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	021a      	lsls	r2, r3, #8
 8001020:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001022:	430a      	orrs	r2, r1
 8001024:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2209      	movs	r2, #9
 800102c:	4393      	bics	r3, r2
 800102e:	0019      	movs	r1, r3
 8001030:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001038:	f000 fc42 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800103c:	0001      	movs	r1, r0
 800103e:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	220f      	movs	r2, #15
 8001046:	4013      	ands	r3, r2
 8001048:	4a62      	ldr	r2, [pc, #392]	; (80011d4 <HAL_RCC_OscConfig+0x34c>)
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	000a      	movs	r2, r1
 800104e:	40da      	lsrs	r2, r3
 8001050:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <HAL_RCC_OscConfig+0x350>)
 8001052:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001054:	4b61      	ldr	r3, [pc, #388]	; (80011dc <HAL_RCC_OscConfig+0x354>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2513      	movs	r5, #19
 800105a:	197c      	adds	r4, r7, r5
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff fc49 	bl	80008f4 <HAL_InitTick>
 8001062:	0003      	movs	r3, r0
 8001064:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001066:	197b      	adds	r3, r7, r5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d046      	beq.n	80010fc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800106e:	197b      	adds	r3, r7, r5
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	e2d2      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	2b00      	cmp	r3, #0
 8001078:	d027      	beq.n	80010ca <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800107a:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2209      	movs	r2, #9
 8001080:	4393      	bics	r3, r2
 8001082:	0019      	movs	r1, r3
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fc78 	bl	8000980 <HAL_GetTick>
 8001090:	0003      	movs	r3, r0
 8001092:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fc73 	bl	8000980 <HAL_GetTick>
 800109a:	0002      	movs	r2, r0
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e2b8      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2204      	movs	r2, #4
 80010ae:	4013      	ands	r3, r2
 80010b0:	d0f1      	beq.n	8001096 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_RCC_OscConfig+0x348>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	0019      	movs	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	021a      	lsls	r2, r3, #8
 80010c2:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 80010c4:	430a      	orrs	r2, r1
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	e018      	b.n	80010fc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	438a      	bics	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fc53 	bl	8000980 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc4e 	bl	8000980 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e293      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2204      	movs	r2, #4
 80010f8:	4013      	ands	r3, r2
 80010fa:	d1f1      	bne.n	80010e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2210      	movs	r2, #16
 8001102:	4013      	ands	r3, r2
 8001104:	d100      	bne.n	8001108 <HAL_RCC_OscConfig+0x280>
 8001106:	e0a2      	b.n	800124e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d140      	bne.n	8001190 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d005      	beq.n	8001126 <HAL_RCC_OscConfig+0x29e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e279      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <HAL_RCC_OscConfig+0x358>)
 800112c:	4013      	ands	r3, r2
 800112e:	0019      	movs	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8001136:	430a      	orrs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	0a19      	lsrs	r1, r3, #8
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	061a      	lsls	r2, r3, #24
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800114a:	430a      	orrs	r2, r1
 800114c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	0b5b      	lsrs	r3, r3, #13
 8001154:	3301      	adds	r3, #1
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	0212      	lsls	r2, r2, #8
 800115a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	210f      	movs	r1, #15
 8001164:	400b      	ands	r3, r1
 8001166:	491b      	ldr	r1, [pc, #108]	; (80011d4 <HAL_RCC_OscConfig+0x34c>)
 8001168:	5ccb      	ldrb	r3, [r1, r3]
 800116a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_RCC_OscConfig+0x350>)
 800116e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_RCC_OscConfig+0x354>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2513      	movs	r5, #19
 8001176:	197c      	adds	r4, r7, r5
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fbbb 	bl	80008f4 <HAL_InitTick>
 800117e:	0003      	movs	r3, r0
 8001180:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001182:	197b      	adds	r3, r7, r5
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d061      	beq.n	800124e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800118a:	197b      	adds	r3, r7, r5
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	e244      	b.n	800161a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d040      	beq.n	800121a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	0049      	lsls	r1, r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fbeb 	bl	8000980 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011ae:	e019      	b.n	80011e4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b0:	f7ff fbe6 	bl	8000980 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d912      	bls.n	80011e4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e22b      	b.n	800161a <HAL_RCC_OscConfig+0x792>
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000
 80011c8:	fffeffff 	.word	0xfffeffff
 80011cc:	fffbffff 	.word	0xfffbffff
 80011d0:	ffffe0ff 	.word	0xffffe0ff
 80011d4:	080030c8 	.word	0x080030c8
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004
 80011e0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011e4:	4bca      	ldr	r3, [pc, #808]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0df      	beq.n	80011b0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f0:	4bc7      	ldr	r3, [pc, #796]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4ac7      	ldr	r2, [pc, #796]	; (8001514 <HAL_RCC_OscConfig+0x68c>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fe:	4bc4      	ldr	r3, [pc, #784]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001200:	430a      	orrs	r2, r1
 8001202:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001204:	4bc2      	ldr	r3, [pc, #776]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	0a19      	lsrs	r1, r3, #8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	061a      	lsls	r2, r3, #24
 8001212:	4bbf      	ldr	r3, [pc, #764]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001214:	430a      	orrs	r2, r1
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	e019      	b.n	800124e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800121a:	4bbd      	ldr	r3, [pc, #756]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4bbc      	ldr	r3, [pc, #752]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001220:	49bd      	ldr	r1, [pc, #756]	; (8001518 <HAL_RCC_OscConfig+0x690>)
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fbab 	bl	8000980 <HAL_GetTick>
 800122a:	0003      	movs	r3, r0
 800122c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001230:	f7ff fba6 	bl	8000980 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1eb      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001242:	4bb3      	ldr	r3, [pc, #716]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2208      	movs	r2, #8
 8001254:	4013      	ands	r3, r2
 8001256:	d036      	beq.n	80012c6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d019      	beq.n	8001294 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001260:	4bab      	ldr	r3, [pc, #684]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001262:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001264:	4baa      	ldr	r3, [pc, #680]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001266:	2101      	movs	r1, #1
 8001268:	430a      	orrs	r2, r1
 800126a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fb88 	bl	8000980 <HAL_GetTick>
 8001270:	0003      	movs	r3, r0
 8001272:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001276:	f7ff fb83 	bl	8000980 <HAL_GetTick>
 800127a:	0002      	movs	r2, r0
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e1c8      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001288:	4ba1      	ldr	r3, [pc, #644]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800128a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800128c:	2202      	movs	r2, #2
 800128e:	4013      	ands	r3, r2
 8001290:	d0f1      	beq.n	8001276 <HAL_RCC_OscConfig+0x3ee>
 8001292:	e018      	b.n	80012c6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001294:	4b9e      	ldr	r3, [pc, #632]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001298:	4b9d      	ldr	r3, [pc, #628]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800129a:	2101      	movs	r1, #1
 800129c:	438a      	bics	r2, r1
 800129e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fb6e 	bl	8000980 <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fb69 	bl	8000980 <HAL_GetTick>
 80012ae:	0002      	movs	r2, r0
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e1ae      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012bc:	4b94      	ldr	r3, [pc, #592]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80012be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c0:	2202      	movs	r2, #2
 80012c2:	4013      	ands	r3, r2
 80012c4:	d1f1      	bne.n	80012aa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2204      	movs	r2, #4
 80012cc:	4013      	ands	r3, r2
 80012ce:	d100      	bne.n	80012d2 <HAL_RCC_OscConfig+0x44a>
 80012d0:	e0ae      	b.n	8001430 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2023      	movs	r0, #35	; 0x23
 80012d4:	183b      	adds	r3, r7, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b8d      	ldr	r3, [pc, #564]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80012dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	055b      	lsls	r3, r3, #21
 80012e2:	4013      	ands	r3, r2
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b8a      	ldr	r3, [pc, #552]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80012e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0549      	lsls	r1, r1, #21
 80012f0:	430a      	orrs	r2, r1
 80012f2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012f4:	183b      	adds	r3, r7, r0
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	4b88      	ldr	r3, [pc, #544]	; (800151c <HAL_RCC_OscConfig+0x694>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4013      	ands	r3, r2
 8001304:	d11a      	bne.n	800133c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001306:	4b85      	ldr	r3, [pc, #532]	; (800151c <HAL_RCC_OscConfig+0x694>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b84      	ldr	r3, [pc, #528]	; (800151c <HAL_RCC_OscConfig+0x694>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0049      	lsls	r1, r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001314:	f7ff fb34 	bl	8000980 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fb2f 	bl	8000980 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e174      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	4b7a      	ldr	r3, [pc, #488]	; (800151c <HAL_RCC_OscConfig+0x694>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	429a      	cmp	r2, r3
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x4d0>
 8001348:	4b71      	ldr	r3, [pc, #452]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800134a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800134c:	4b70      	ldr	r3, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0049      	lsls	r1, r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	651a      	str	r2, [r3, #80]	; 0x50
 8001356:	e031      	b.n	80013bc <HAL_RCC_OscConfig+0x534>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0x4f2>
 8001360:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001366:	496c      	ldr	r1, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x690>)
 8001368:	400a      	ands	r2, r1
 800136a:	651a      	str	r2, [r3, #80]	; 0x50
 800136c:	4b68      	ldr	r3, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800136e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001370:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001372:	496b      	ldr	r1, [pc, #428]	; (8001520 <HAL_RCC_OscConfig+0x698>)
 8001374:	400a      	ands	r2, r1
 8001376:	651a      	str	r2, [r3, #80]	; 0x50
 8001378:	e020      	b.n	80013bc <HAL_RCC_OscConfig+0x534>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	23a0      	movs	r3, #160	; 0xa0
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	429a      	cmp	r2, r3
 8001384:	d10e      	bne.n	80013a4 <HAL_RCC_OscConfig+0x51c>
 8001386:	4b62      	ldr	r3, [pc, #392]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800138a:	4b61      	ldr	r3, [pc, #388]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	00c9      	lsls	r1, r1, #3
 8001390:	430a      	orrs	r2, r1
 8001392:	651a      	str	r2, [r3, #80]	; 0x50
 8001394:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001398:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	0049      	lsls	r1, r1, #1
 800139e:	430a      	orrs	r2, r1
 80013a0:	651a      	str	r2, [r3, #80]	; 0x50
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0x534>
 80013a4:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80013a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80013aa:	495b      	ldr	r1, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x690>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	651a      	str	r2, [r3, #80]	; 0x50
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80013b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80013b6:	495a      	ldr	r1, [pc, #360]	; (8001520 <HAL_RCC_OscConfig+0x698>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fadc 	bl	8000980 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff fad7 	bl	8000980 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	4a52      	ldr	r2, [pc, #328]	; (8001524 <HAL_RCC_OscConfig+0x69c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e11b      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013e2:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80013e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d0ef      	beq.n	80013ce <HAL_RCC_OscConfig+0x546>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fac6 	bl	8000980 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f8:	e009      	b.n	800140e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fac1 	bl	8000980 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4a47      	ldr	r2, [pc, #284]	; (8001524 <HAL_RCC_OscConfig+0x69c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e105      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800140e:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4013      	ands	r3, r2
 8001418:	d1ef      	bne.n	80013fa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800141a:	2323      	movs	r3, #35	; 0x23
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001424:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 800142a:	493f      	ldr	r1, [pc, #252]	; (8001528 <HAL_RCC_OscConfig+0x6a0>)
 800142c:	400a      	ands	r2, r1
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2220      	movs	r2, #32
 8001436:	4013      	ands	r3, r2
 8001438:	d049      	beq.n	80014ce <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d026      	beq.n	8001490 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <HAL_RCC_OscConfig+0x6a4>)
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_RCC_OscConfig+0x6a4>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0189      	lsls	r1, r1, #6
 8001464:	430a      	orrs	r2, r1
 8001466:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fa8a 	bl	8000980 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001472:	f7ff fa85 	bl	8000980 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0ca      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	d0f1      	beq.n	8001472 <HAL_RCC_OscConfig+0x5ea>
 800148e:	e01e      	b.n	80014ce <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_RCC_OscConfig+0x6a4>)
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_RCC_OscConfig+0x6a4>)
 80014a2:	4923      	ldr	r1, [pc, #140]	; (8001530 <HAL_RCC_OscConfig+0x6a8>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa6a 	bl	8000980 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b2:	f7ff fa65 	bl	8000980 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e0aa      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f1      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d100      	bne.n	80014d8 <HAL_RCC_OscConfig+0x650>
 80014d6:	e09f      	b.n	8001618 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d100      	bne.n	80014e0 <HAL_RCC_OscConfig+0x658>
 80014de:	e078      	b.n	80015d2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d159      	bne.n	800159c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_RCC_OscConfig+0x688>)
 80014ee:	4911      	ldr	r1, [pc, #68]	; (8001534 <HAL_RCC_OscConfig+0x6ac>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa44 	bl	8000980 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014fc:	e01c      	b.n	8001538 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fa3f 	bl	8000980 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d915      	bls.n	8001538 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e084      	b.n	800161a <HAL_RCC_OscConfig+0x792>
 8001510:	40021000 	.word	0x40021000
 8001514:	ffff1fff 	.word	0xffff1fff
 8001518:	fffffeff 	.word	0xfffffeff
 800151c:	40007000 	.word	0x40007000
 8001520:	fffffbff 	.word	0xfffffbff
 8001524:	00001388 	.word	0x00001388
 8001528:	efffffff 	.word	0xefffffff
 800152c:	40010000 	.word	0x40010000
 8001530:	ffffdfff 	.word	0xffffdfff
 8001534:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001538:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	049b      	lsls	r3, r3, #18
 8001540:	4013      	ands	r3, r2
 8001542:	d1dc      	bne.n	80014fe <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001544:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4a37      	ldr	r2, [pc, #220]	; (8001628 <HAL_RCC_OscConfig+0x7a0>)
 800154a:	4013      	ands	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	431a      	orrs	r2, r3
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 8001560:	430a      	orrs	r2, r1
 8001562:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	0449      	lsls	r1, r1, #17
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fa05 	bl	8000980 <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fa00 	bl	8000980 <HAL_GetTick>
 8001580:	0002      	movs	r2, r0
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e045      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	049b      	lsls	r3, r3, #18
 8001596:	4013      	ands	r3, r2
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x6f4>
 800159a:	e03d      	b.n	8001618 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 80015a2:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_RCC_OscConfig+0x7a4>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f9ea 	bl	8000980 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff f9e5 	bl	8000980 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e02a      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	049b      	lsls	r3, r3, #18
 80015cc:	4013      	ands	r3, r2
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x72a>
 80015d0:	e022      	b.n	8001618 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e01d      	b.n	800161a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x79c>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	401a      	ands	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10f      	bne.n	8001614 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	23f0      	movs	r3, #240	; 0xf0
 80015f8:	039b      	lsls	r3, r3, #14
 80015fa:	401a      	ands	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d107      	bne.n	8001614 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b00a      	add	sp, #40	; 0x28
 8001620:	bdb0      	pop	{r4, r5, r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40021000 	.word	0x40021000
 8001628:	ff02ffff 	.word	0xff02ffff
 800162c:	feffffff 	.word	0xfeffffff

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e128      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b96      	ldr	r3, [pc, #600]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d91e      	bls.n	8001690 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b93      	ldr	r3, [pc, #588]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	4393      	bics	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001664:	f7ff f98c 	bl	8000980 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166c:	e009      	b.n	8001682 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166e:	f7ff f987 	bl	8000980 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a8a      	ldr	r2, [pc, #552]	; (80018a4 <HAL_RCC_ClockConfig+0x274>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e109      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2201      	movs	r2, #1
 8001688:	4013      	ands	r3, r2
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d1ee      	bne.n	800166e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169a:	4b83      	ldr	r3, [pc, #524]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	22f0      	movs	r2, #240	; 0xf0
 80016a0:	4393      	bics	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	4b7f      	ldr	r3, [pc, #508]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_ClockConfig+0x8a>
 80016b8:	e089      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c2:	4b79      	ldr	r3, [pc, #484]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	029b      	lsls	r3, r3, #10
 80016ca:	4013      	ands	r3, r2
 80016cc:	d120      	bne.n	8001710 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0e1      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016da:	4b73      	ldr	r3, [pc, #460]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	049b      	lsls	r3, r3, #18
 80016e2:	4013      	ands	r3, r2
 80016e4:	d114      	bne.n	8001710 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0d5      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016f2:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2204      	movs	r2, #4
 80016f8:	4013      	ands	r3, r2
 80016fa:	d109      	bne.n	8001710 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0ca      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001700:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4013      	ands	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0c2      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001710:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2203      	movs	r2, #3
 8001716:	4393      	bics	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001720:	430a      	orrs	r2, r1
 8001722:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff f92c 	bl	8000980 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d111      	bne.n	8001758 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001734:	e009      	b.n	800174a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff f923 	bl	8000980 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_RCC_ClockConfig+0x274>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0a5      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800174a:	4b57      	ldr	r3, [pc, #348]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	220c      	movs	r2, #12
 8001750:	4013      	ands	r3, r2
 8001752:	2b08      	cmp	r3, #8
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_ClockConfig+0x106>
 8001756:	e03a      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d111      	bne.n	8001784 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001760:	e009      	b.n	8001776 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7ff f90d 	bl	8000980 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <HAL_RCC_ClockConfig+0x274>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e08f      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001776:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d1ef      	bne.n	8001762 <HAL_RCC_ClockConfig+0x132>
 8001782:	e024      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d11b      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7ff f8f7 	bl	8000980 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <HAL_RCC_ClockConfig+0x274>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e079      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	220c      	movs	r2, #12
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d1ef      	bne.n	800178e <HAL_RCC_ClockConfig+0x15e>
 80017ae:	e00e      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff f8e6 	bl	8000980 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <HAL_RCC_ClockConfig+0x274>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e068      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	220c      	movs	r2, #12
 80017ca:	4013      	ands	r3, r2
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d21e      	bcs.n	800181a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4393      	bics	r3, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ee:	f7ff f8c7 	bl	8000980 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	e009      	b.n	800180c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff f8c2 	bl	8000980 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <HAL_RCC_ClockConfig+0x274>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e044      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_ClockConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d1ee      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2204      	movs	r2, #4
 8001820:	4013      	ands	r3, r2
 8001822:	d009      	beq.n	8001838 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a20      	ldr	r2, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x27c>)
 800182a:	4013      	ands	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001834:	430a      	orrs	r2, r1
 8001836:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2208      	movs	r2, #8
 800183e:	4013      	ands	r3, r2
 8001840:	d00a      	beq.n	8001858 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <HAL_RCC_ClockConfig+0x280>)
 8001848:	4013      	ands	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	00da      	lsls	r2, r3, #3
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001858:	f000 f832 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800185c:	0001      	movs	r1, r0
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_ClockConfig+0x278>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	220f      	movs	r2, #15
 8001866:	4013      	ands	r3, r2
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x284>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	000a      	movs	r2, r1
 800186e:	40da      	lsrs	r2, r3
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_RCC_ClockConfig+0x288>)
 8001872:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_ClockConfig+0x28c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	250b      	movs	r5, #11
 800187a:	197c      	adds	r4, r7, r5
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff f839 	bl	80008f4 <HAL_InitTick>
 8001882:	0003      	movs	r3, r0
 8001884:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001886:	197b      	adds	r3, r7, r5
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800188e:	197b      	adds	r3, r7, r5
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	e000      	b.n	8001896 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bdb0      	pop	{r4, r5, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	40022000 	.word	0x40022000
 80018a4:	00001388 	.word	0x00001388
 80018a8:	40021000 	.word	0x40021000
 80018ac:	fffff8ff 	.word	0xfffff8ff
 80018b0:	ffffc7ff 	.word	0xffffc7ff
 80018b4:	080030c8 	.word	0x080030c8
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b08e      	sub	sp, #56	; 0x38
 80018c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018c6:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ce:	230c      	movs	r3, #12
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d014      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018d6:	d900      	bls.n	80018da <HAL_RCC_GetSysClockFreq+0x1a>
 80018d8:	e07b      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x112>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x24>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d00b      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3a>
 80018e2:	e076      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2210      	movs	r2, #16
 80018ea:	4013      	ands	r3, r2
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018f2:	e07c      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018f4:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x140>)
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f8:	e079      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x144>)
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fe:	e076      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	0c9a      	lsrs	r2, r3, #18
 8001904:	230f      	movs	r3, #15
 8001906:	401a      	ands	r2, r3
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x148>)
 800190a:	5c9b      	ldrb	r3, [r3, r2]
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	0d9a      	lsrs	r2, r3, #22
 8001912:	2303      	movs	r3, #3
 8001914:	4013      	ands	r3, r2
 8001916:	3301      	adds	r3, #1
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	4013      	ands	r3, r2
 8001924:	d01a      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	4a35      	ldr	r2, [pc, #212]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x144>)
 8001930:	2300      	movs	r3, #0
 8001932:	69b8      	ldr	r0, [r7, #24]
 8001934:	69f9      	ldr	r1, [r7, #28]
 8001936:	f7fe fc9b 	bl	8000270 <__aeabi_lmul>
 800193a:	0002      	movs	r2, r0
 800193c:	000b      	movs	r3, r1
 800193e:	0010      	movs	r0, r2
 8001940:	0019      	movs	r1, r3
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f7fe fc6f 	bl	8000230 <__aeabi_uldivmod>
 8001952:	0002      	movs	r2, r0
 8001954:	000b      	movs	r3, r1
 8001956:	0013      	movs	r3, r2
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
 800195a:	e037      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	4013      	ands	r3, r2
 8001964:	d01a      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001970:	2300      	movs	r3, #0
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	f7fe fc7b 	bl	8000270 <__aeabi_lmul>
 800197a:	0002      	movs	r2, r0
 800197c:	000b      	movs	r3, r1
 800197e:	0010      	movs	r0, r2
 8001980:	0019      	movs	r1, r3
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f7fe fc4f 	bl	8000230 <__aeabi_uldivmod>
 8001992:	0002      	movs	r2, r0
 8001994:	000b      	movs	r3, r1
 8001996:	0013      	movs	r3, r2
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
 800199a:	e017      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	0018      	movs	r0, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	0019      	movs	r1, r3
 80019a4:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x140>)
 80019a6:	2300      	movs	r3, #0
 80019a8:	f7fe fc62 	bl	8000270 <__aeabi_lmul>
 80019ac:	0002      	movs	r2, r0
 80019ae:	000b      	movs	r3, r1
 80019b0:	0010      	movs	r0, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	001c      	movs	r4, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	001d      	movs	r5, r3
 80019bc:	0022      	movs	r2, r4
 80019be:	002b      	movs	r3, r5
 80019c0:	f7fe fc36 	bl	8000230 <__aeabi_uldivmod>
 80019c4:	0002      	movs	r2, r0
 80019c6:	000b      	movs	r3, r1
 80019c8:	0013      	movs	r3, r2
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d0:	e00d      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	2207      	movs	r2, #7
 80019da:	4013      	ands	r3, r2
 80019dc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	3301      	adds	r3, #1
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	0212      	lsls	r2, r2, #8
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b00e      	add	sp, #56	; 0x38
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	003d0900 	.word	0x003d0900
 8001a00:	00f42400 	.word	0x00f42400
 8001a04:	007a1200 	.word	0x007a1200
 8001a08:	080030d8 	.word	0x080030d8

08001a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e032      	b.n	8001a84 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2239      	movs	r2, #57	; 0x39
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2238      	movs	r2, #56	; 0x38
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fe8f 	bl	8000758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2239      	movs	r2, #57	; 0x39
 8001a3e:	2102      	movs	r1, #2
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	0010      	movs	r0, r2
 8001a4e:	f000 fa53 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	223e      	movs	r2, #62	; 0x3e
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	223a      	movs	r2, #58	; 0x3a
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	223b      	movs	r2, #59	; 0x3b
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	223c      	movs	r2, #60	; 0x3c
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	223d      	movs	r2, #61	; 0x3d
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2239      	movs	r2, #57	; 0x39
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2239      	movs	r2, #57	; 0x39
 8001a98:	5c9b      	ldrb	r3, [r3, r2]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d001      	beq.n	8001aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e03b      	b.n	8001b1c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2239      	movs	r2, #57	; 0x39
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	05db      	lsls	r3, r3, #23
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d00e      	beq.n	8001ae6 <HAL_TIM_Base_Start_IT+0x5a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_TIM_Base_Start_IT+0x98>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_TIM_Base_Start_IT+0x5a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d004      	beq.n	8001ae6 <HAL_TIM_Base_Start_IT+0x5a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d111      	bne.n	8001b0a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2207      	movs	r2, #7
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d010      	beq.n	8001b1a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2101      	movs	r1, #1
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b08:	e007      	b.n	8001b1a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40011400 	.word	0x40011400

08001b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d124      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d11d      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4252      	negs	r2, r2
 8001b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 f9a8 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e007      	b.n	8001b8a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 f99b 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 f9a7 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2204      	movs	r2, #4
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d125      	bne.n	8001bea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d11e      	bne.n	8001bea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	4252      	negs	r2, r2
 8001bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	23c0      	movs	r3, #192	; 0xc0
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 f97b 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8001bd2:	e007      	b.n	8001be4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 f96e 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f97a 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d124      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2208      	movs	r2, #8
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11d      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2209      	movs	r2, #9
 8001c0c:	4252      	negs	r2, r2
 8001c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2204      	movs	r2, #4
 8001c14:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 f94f 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8001c2a:	e007      	b.n	8001c3c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 f942 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 f94e 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d125      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2210      	movs	r2, #16
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d11e      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2211      	movs	r2, #17
 8001c64:	4252      	negs	r2, r2
 8001c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	23c0      	movs	r3, #192	; 0xc0
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d004      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 f922 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e007      	b.n	8001c96 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 f915 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f921 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10f      	bne.n	8001cca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d108      	bne.n	8001cca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4252      	negs	r2, r2
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 f8ef 	bl	8001ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2240      	movs	r2, #64	; 0x40
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b40      	cmp	r3, #64	; 0x40
 8001ce4:	d108      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2241      	movs	r2, #65	; 0x41
 8001cec:	4252      	negs	r2, r2
 8001cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f8f8 	bl	8001ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2238      	movs	r2, #56	; 0x38
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_TIM_ConfigClockSource+0x20>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0bc      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x19a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2238      	movs	r2, #56	; 0x38
 8001d24:	2101      	movs	r1, #1
 8001d26:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2239      	movs	r2, #57	; 0x39
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2277      	movs	r2, #119	; 0x77
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4a58      	ldr	r2, [pc, #352]	; (8001ea4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	0192      	lsls	r2, r2, #6
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d040      	beq.n	8001dde <HAL_TIM_ConfigClockSource+0xde>
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	0192      	lsls	r2, r2, #6
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d900      	bls.n	8001d66 <HAL_TIM_ConfigClockSource+0x66>
 8001d64:	e088      	b.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0152      	lsls	r2, r2, #5
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d100      	bne.n	8001d70 <HAL_TIM_ConfigClockSource+0x70>
 8001d6e:	e088      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x182>
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	0152      	lsls	r2, r2, #5
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d900      	bls.n	8001d7a <HAL_TIM_ConfigClockSource+0x7a>
 8001d78:	e07e      	b.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001d7a:	2b70      	cmp	r3, #112	; 0x70
 8001d7c:	d018      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0xb0>
 8001d7e:	d900      	bls.n	8001d82 <HAL_TIM_ConfigClockSource+0x82>
 8001d80:	e07a      	b.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001d82:	2b60      	cmp	r3, #96	; 0x60
 8001d84:	d04f      	beq.n	8001e26 <HAL_TIM_ConfigClockSource+0x126>
 8001d86:	d900      	bls.n	8001d8a <HAL_TIM_ConfigClockSource+0x8a>
 8001d88:	e076      	b.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001d8a:	2b50      	cmp	r3, #80	; 0x50
 8001d8c:	d03b      	beq.n	8001e06 <HAL_TIM_ConfigClockSource+0x106>
 8001d8e:	d900      	bls.n	8001d92 <HAL_TIM_ConfigClockSource+0x92>
 8001d90:	e072      	b.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d057      	beq.n	8001e46 <HAL_TIM_ConfigClockSource+0x146>
 8001d96:	d900      	bls.n	8001d9a <HAL_TIM_ConfigClockSource+0x9a>
 8001d98:	e06e      	b.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001d9a:	2b30      	cmp	r3, #48	; 0x30
 8001d9c:	d063      	beq.n	8001e66 <HAL_TIM_ConfigClockSource+0x166>
 8001d9e:	d86b      	bhi.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d060      	beq.n	8001e66 <HAL_TIM_ConfigClockSource+0x166>
 8001da4:	d868      	bhi.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d05d      	beq.n	8001e66 <HAL_TIM_ConfigClockSource+0x166>
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d05b      	beq.n	8001e66 <HAL_TIM_ConfigClockSource+0x166>
 8001dae:	e063      	b.n	8001e78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dc0:	f000 f972 	bl	80020a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2277      	movs	r2, #119	; 0x77
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	609a      	str	r2, [r3, #8]
      break;
 8001ddc:	e052      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dee:	f000 f95b 	bl	80020a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	01c9      	lsls	r1, r1, #7
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
      break;
 8001e04:	e03e      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e12:	001a      	movs	r2, r3
 8001e14:	f000 f8ce 	bl	8001fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2150      	movs	r1, #80	; 0x50
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 f928 	bl	8002074 <TIM_ITRx_SetConfig>
      break;
 8001e24:	e02e      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e32:	001a      	movs	r2, r3
 8001e34:	f000 f8ec 	bl	8002010 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2160      	movs	r1, #96	; 0x60
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f918 	bl	8002074 <TIM_ITRx_SetConfig>
      break;
 8001e44:	e01e      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e52:	001a      	movs	r2, r3
 8001e54:	f000 f8ae 	bl	8001fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2140      	movs	r1, #64	; 0x40
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 f908 	bl	8002074 <TIM_ITRx_SetConfig>
      break;
 8001e64:	e00e      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0019      	movs	r1, r3
 8001e70:	0010      	movs	r0, r2
 8001e72:	f000 f8ff 	bl	8002074 <TIM_ITRx_SetConfig>
      break;
 8001e76:	e005      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001e78:	230f      	movs	r3, #15
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
      break;
 8001e80:	e000      	b.n	8001e84 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001e82:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2239      	movs	r2, #57	; 0x39
 8001e88:	2101      	movs	r1, #1
 8001e8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2238      	movs	r2, #56	; 0x38
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

  return status;
 8001e94:	230f      	movs	r3, #15
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	ffff00ff 	.word	0xffff00ff

08001ea8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	05db      	lsls	r3, r3, #23
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0x32>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <TIM_Base_SetConfig+0xac>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0x32>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <TIM_Base_SetConfig+0xb0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0x32>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <TIM_Base_SetConfig+0xb4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2270      	movs	r2, #112	; 0x70
 8001f2e:	4393      	bics	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	05db      	lsls	r3, r3, #23
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d00b      	beq.n	8001f5e <TIM_Base_SetConfig+0x66>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <TIM_Base_SetConfig+0xac>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <TIM_Base_SetConfig+0x66>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <TIM_Base_SetConfig+0xb0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d003      	beq.n	8001f5e <TIM_Base_SetConfig+0x66>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <TIM_Base_SetConfig+0xb4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d108      	bne.n	8001f70 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	4393      	bics	r3, r2
 8001f76:	001a      	movs	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	615a      	str	r2, [r3, #20]
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	fffffcff 	.word	0xfffffcff

08001fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4393      	bics	r3, r2
 8001fce:	001a      	movs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	22f0      	movs	r2, #240	; 0xf0
 8001fde:	4393      	bics	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	220a      	movs	r2, #10
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	621a      	str	r2, [r3, #32]
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b006      	add	sp, #24
 800200e:	bd80      	pop	{r7, pc}

08002010 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	2210      	movs	r2, #16
 8002022:	4393      	bics	r3, r2
 8002024:	001a      	movs	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <TIM_TI2_ConfigInputStage+0x60>)
 800203a:	4013      	ands	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	031b      	lsls	r3, r3, #12
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	22a0      	movs	r2, #160	; 0xa0
 800204c:	4393      	bics	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	621a      	str	r2, [r3, #32]
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b006      	add	sp, #24
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	ffff0fff 	.word	0xffff0fff

08002074 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2270      	movs	r2, #112	; 0x70
 8002088:	4393      	bics	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	2207      	movs	r2, #7
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	609a      	str	r2, [r3, #8]
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <TIM_ETR_SetConfig+0x3c>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	021a      	lsls	r2, r3, #8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	609a      	str	r2, [r3, #8]
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	ffff00ff 	.word	0xffff00ff

080020e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2238      	movs	r2, #56	; 0x38
 80020f6:	5c9b      	ldrb	r3, [r3, r2]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e047      	b.n	8002190 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2238      	movs	r2, #56	; 0x38
 8002104:	2101      	movs	r1, #1
 8002106:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2239      	movs	r2, #57	; 0x39
 800210c:	2102      	movs	r1, #2
 800210e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2270      	movs	r2, #112	; 0x70
 8002124:	4393      	bics	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	429a      	cmp	r2, r3
 8002144:	d00e      	beq.n	8002164 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d10c      	bne.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	4393      	bics	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	4313      	orrs	r3, r2
 8002174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2239      	movs	r2, #57	; 0x39
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2238      	movs	r2, #56	; 0x38
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40000400 	.word	0x40000400
 800219c:	40010800 	.word	0x40010800
 80021a0:	40011400 	.word	0x40011400

080021a4 <findslot>:
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <findslot+0x2c>)
 80021a6:	b510      	push	{r4, lr}
 80021a8:	0004      	movs	r4, r0
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d004      	beq.n	80021ba <findslot+0x16>
 80021b0:	6a03      	ldr	r3, [r0, #32]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <findslot+0x16>
 80021b6:	f000 fb1f 	bl	80027f8 <__sinit>
 80021ba:	2000      	movs	r0, #0
 80021bc:	2c13      	cmp	r4, #19
 80021be:	d805      	bhi.n	80021cc <findslot+0x28>
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <findslot+0x30>)
 80021c2:	00e4      	lsls	r4, r4, #3
 80021c4:	58e2      	ldr	r2, [r4, r3]
 80021c6:	3201      	adds	r2, #1
 80021c8:	d000      	beq.n	80021cc <findslot+0x28>
 80021ca:	18e0      	adds	r0, r4, r3
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	2000006c 	.word	0x2000006c
 80021d4:	200000e0 	.word	0x200000e0

080021d8 <error>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	0004      	movs	r4, r0
 80021dc:	f000 fce8 	bl	8002bb0 <__errno>
 80021e0:	2613      	movs	r6, #19
 80021e2:	0005      	movs	r5, r0
 80021e4:	2700      	movs	r7, #0
 80021e6:	1c30      	adds	r0, r6, #0
 80021e8:	1c39      	adds	r1, r7, #0
 80021ea:	beab      	bkpt	0x00ab
 80021ec:	1c06      	adds	r6, r0, #0
 80021ee:	602e      	str	r6, [r5, #0]
 80021f0:	0020      	movs	r0, r4
 80021f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021f4 <checkerror>:
 80021f4:	b510      	push	{r4, lr}
 80021f6:	1c43      	adds	r3, r0, #1
 80021f8:	d101      	bne.n	80021fe <checkerror+0xa>
 80021fa:	f7ff ffed 	bl	80021d8 <error>
 80021fe:	bd10      	pop	{r4, pc}

08002200 <_swiread>:
 8002200:	b530      	push	{r4, r5, lr}
 8002202:	b085      	sub	sp, #20
 8002204:	ad01      	add	r5, sp, #4
 8002206:	9001      	str	r0, [sp, #4]
 8002208:	9102      	str	r1, [sp, #8]
 800220a:	9203      	str	r2, [sp, #12]
 800220c:	2406      	movs	r4, #6
 800220e:	1c20      	adds	r0, r4, #0
 8002210:	1c29      	adds	r1, r5, #0
 8002212:	beab      	bkpt	0x00ab
 8002214:	1c04      	adds	r4, r0, #0
 8002216:	0020      	movs	r0, r4
 8002218:	f7ff ffec 	bl	80021f4 <checkerror>
 800221c:	b005      	add	sp, #20
 800221e:	bd30      	pop	{r4, r5, pc}

08002220 <_read>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	000e      	movs	r6, r1
 8002224:	0015      	movs	r5, r2
 8002226:	f7ff ffbd 	bl	80021a4 <findslot>
 800222a:	1e04      	subs	r4, r0, #0
 800222c:	d106      	bne.n	800223c <_read+0x1c>
 800222e:	f000 fcbf 	bl	8002bb0 <__errno>
 8002232:	2309      	movs	r3, #9
 8002234:	6003      	str	r3, [r0, #0]
 8002236:	2001      	movs	r0, #1
 8002238:	4240      	negs	r0, r0
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	002a      	movs	r2, r5
 800223e:	0031      	movs	r1, r6
 8002240:	6800      	ldr	r0, [r0, #0]
 8002242:	f7ff ffdd 	bl	8002200 <_swiread>
 8002246:	1c43      	adds	r3, r0, #1
 8002248:	d0f7      	beq.n	800223a <_read+0x1a>
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	1a28      	subs	r0, r5, r0
 800224e:	181b      	adds	r3, r3, r0
 8002250:	6063      	str	r3, [r4, #4]
 8002252:	e7f2      	b.n	800223a <_read+0x1a>

08002254 <_swilseek>:
 8002254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002256:	000c      	movs	r4, r1
 8002258:	0016      	movs	r6, r2
 800225a:	f7ff ffa3 	bl	80021a4 <findslot>
 800225e:	1e05      	subs	r5, r0, #0
 8002260:	d107      	bne.n	8002272 <_swilseek+0x1e>
 8002262:	f000 fca5 	bl	8002bb0 <__errno>
 8002266:	2309      	movs	r3, #9
 8002268:	6003      	str	r3, [r0, #0]
 800226a:	2401      	movs	r4, #1
 800226c:	4264      	negs	r4, r4
 800226e:	0020      	movs	r0, r4
 8002270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002272:	2e02      	cmp	r6, #2
 8002274:	d903      	bls.n	800227e <_swilseek+0x2a>
 8002276:	f000 fc9b 	bl	8002bb0 <__errno>
 800227a:	2316      	movs	r3, #22
 800227c:	e7f4      	b.n	8002268 <_swilseek+0x14>
 800227e:	2e01      	cmp	r6, #1
 8002280:	d112      	bne.n	80022a8 <_swilseek+0x54>
 8002282:	6843      	ldr	r3, [r0, #4]
 8002284:	18e4      	adds	r4, r4, r3
 8002286:	d4f6      	bmi.n	8002276 <_swilseek+0x22>
 8002288:	466f      	mov	r7, sp
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	260a      	movs	r6, #10
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	607c      	str	r4, [r7, #4]
 8002292:	1c30      	adds	r0, r6, #0
 8002294:	1c39      	adds	r1, r7, #0
 8002296:	beab      	bkpt	0x00ab
 8002298:	1c06      	adds	r6, r0, #0
 800229a:	0030      	movs	r0, r6
 800229c:	f7ff ffaa 	bl	80021f4 <checkerror>
 80022a0:	2800      	cmp	r0, #0
 80022a2:	dbe2      	blt.n	800226a <_swilseek+0x16>
 80022a4:	606c      	str	r4, [r5, #4]
 80022a6:	e7e2      	b.n	800226e <_swilseek+0x1a>
 80022a8:	6803      	ldr	r3, [r0, #0]
 80022aa:	2e02      	cmp	r6, #2
 80022ac:	d1ec      	bne.n	8002288 <_swilseek+0x34>
 80022ae:	466f      	mov	r7, sp
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	360a      	adds	r6, #10
 80022b4:	1c30      	adds	r0, r6, #0
 80022b6:	1c39      	adds	r1, r7, #0
 80022b8:	beab      	bkpt	0x00ab
 80022ba:	1c06      	adds	r6, r0, #0
 80022bc:	0030      	movs	r0, r6
 80022be:	f7ff ff99 	bl	80021f4 <checkerror>
 80022c2:	1824      	adds	r4, r4, r0
 80022c4:	3001      	adds	r0, #1
 80022c6:	d1df      	bne.n	8002288 <_swilseek+0x34>
 80022c8:	e7cf      	b.n	800226a <_swilseek+0x16>

080022ca <_lseek>:
 80022ca:	b510      	push	{r4, lr}
 80022cc:	f7ff ffc2 	bl	8002254 <_swilseek>
 80022d0:	bd10      	pop	{r4, pc}

080022d2 <_swiwrite>:
 80022d2:	b530      	push	{r4, r5, lr}
 80022d4:	b085      	sub	sp, #20
 80022d6:	ad01      	add	r5, sp, #4
 80022d8:	9001      	str	r0, [sp, #4]
 80022da:	9102      	str	r1, [sp, #8]
 80022dc:	9203      	str	r2, [sp, #12]
 80022de:	2405      	movs	r4, #5
 80022e0:	1c20      	adds	r0, r4, #0
 80022e2:	1c29      	adds	r1, r5, #0
 80022e4:	beab      	bkpt	0x00ab
 80022e6:	1c04      	adds	r4, r0, #0
 80022e8:	0020      	movs	r0, r4
 80022ea:	f7ff ff83 	bl	80021f4 <checkerror>
 80022ee:	b005      	add	sp, #20
 80022f0:	bd30      	pop	{r4, r5, pc}

080022f2 <_write>:
 80022f2:	b570      	push	{r4, r5, r6, lr}
 80022f4:	000e      	movs	r6, r1
 80022f6:	0015      	movs	r5, r2
 80022f8:	f7ff ff54 	bl	80021a4 <findslot>
 80022fc:	1e04      	subs	r4, r0, #0
 80022fe:	d106      	bne.n	800230e <_write+0x1c>
 8002300:	f000 fc56 	bl	8002bb0 <__errno>
 8002304:	2309      	movs	r3, #9
 8002306:	6003      	str	r3, [r0, #0]
 8002308:	2001      	movs	r0, #1
 800230a:	4240      	negs	r0, r0
 800230c:	e00f      	b.n	800232e <_write+0x3c>
 800230e:	002a      	movs	r2, r5
 8002310:	0031      	movs	r1, r6
 8002312:	6800      	ldr	r0, [r0, #0]
 8002314:	f7ff ffdd 	bl	80022d2 <_swiwrite>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	dbf5      	blt.n	8002308 <_write+0x16>
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	1a28      	subs	r0, r5, r0
 8002320:	1812      	adds	r2, r2, r0
 8002322:	6062      	str	r2, [r4, #4]
 8002324:	42ab      	cmp	r3, r5
 8002326:	d102      	bne.n	800232e <_write+0x3c>
 8002328:	2000      	movs	r0, #0
 800232a:	f7ff ff55 	bl	80021d8 <error>
 800232e:	bd70      	pop	{r4, r5, r6, pc}

08002330 <_swiclose>:
 8002330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002332:	2402      	movs	r4, #2
 8002334:	9001      	str	r0, [sp, #4]
 8002336:	ad01      	add	r5, sp, #4
 8002338:	1c20      	adds	r0, r4, #0
 800233a:	1c29      	adds	r1, r5, #0
 800233c:	beab      	bkpt	0x00ab
 800233e:	1c04      	adds	r4, r0, #0
 8002340:	0020      	movs	r0, r4
 8002342:	f7ff ff57 	bl	80021f4 <checkerror>
 8002346:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08002348 <_close>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	0005      	movs	r5, r0
 800234c:	f7ff ff2a 	bl	80021a4 <findslot>
 8002350:	1e04      	subs	r4, r0, #0
 8002352:	d106      	bne.n	8002362 <_close+0x1a>
 8002354:	f000 fc2c 	bl	8002bb0 <__errno>
 8002358:	2309      	movs	r3, #9
 800235a:	6003      	str	r3, [r0, #0]
 800235c:	2001      	movs	r0, #1
 800235e:	4240      	negs	r0, r0
 8002360:	bd70      	pop	{r4, r5, r6, pc}
 8002362:	3d01      	subs	r5, #1
 8002364:	2d01      	cmp	r5, #1
 8002366:	d809      	bhi.n	800237c <_close+0x34>
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <_close+0x48>)
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	429a      	cmp	r2, r3
 8002370:	d104      	bne.n	800237c <_close+0x34>
 8002372:	2301      	movs	r3, #1
 8002374:	425b      	negs	r3, r3
 8002376:	6003      	str	r3, [r0, #0]
 8002378:	2000      	movs	r0, #0
 800237a:	e7f1      	b.n	8002360 <_close+0x18>
 800237c:	6820      	ldr	r0, [r4, #0]
 800237e:	f7ff ffd7 	bl	8002330 <_swiclose>
 8002382:	2800      	cmp	r0, #0
 8002384:	d1ec      	bne.n	8002360 <_close+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	425b      	negs	r3, r3
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	e7e8      	b.n	8002360 <_close+0x18>
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	200000e0 	.word	0x200000e0

08002394 <_swistat>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	000c      	movs	r4, r1
 8002398:	f7ff ff04 	bl	80021a4 <findslot>
 800239c:	1e05      	subs	r5, r0, #0
 800239e:	d106      	bne.n	80023ae <_swistat+0x1a>
 80023a0:	f000 fc06 	bl	8002bb0 <__errno>
 80023a4:	2309      	movs	r3, #9
 80023a6:	6003      	str	r3, [r0, #0]
 80023a8:	2001      	movs	r0, #1
 80023aa:	4240      	negs	r0, r0
 80023ac:	bd70      	pop	{r4, r5, r6, pc}
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	6862      	ldr	r2, [r4, #4]
 80023b2:	019b      	lsls	r3, r3, #6
 80023b4:	4313      	orrs	r3, r2
 80023b6:	6063      	str	r3, [r4, #4]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	260c      	movs	r6, #12
 80023be:	64a3      	str	r3, [r4, #72]	; 0x48
 80023c0:	1c30      	adds	r0, r6, #0
 80023c2:	1c29      	adds	r1, r5, #0
 80023c4:	beab      	bkpt	0x00ab
 80023c6:	1c05      	adds	r5, r0, #0
 80023c8:	0028      	movs	r0, r5
 80023ca:	f7ff ff13 	bl	80021f4 <checkerror>
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	d0ec      	beq.n	80023ac <_swistat+0x18>
 80023d2:	6120      	str	r0, [r4, #16]
 80023d4:	2000      	movs	r0, #0
 80023d6:	e7e9      	b.n	80023ac <_swistat+0x18>

080023d8 <_fstat>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	000c      	movs	r4, r1
 80023dc:	0005      	movs	r5, r0
 80023de:	2258      	movs	r2, #88	; 0x58
 80023e0:	2100      	movs	r1, #0
 80023e2:	0020      	movs	r0, r4
 80023e4:	f000 fb8e 	bl	8002b04 <memset>
 80023e8:	0028      	movs	r0, r5
 80023ea:	0021      	movs	r1, r4
 80023ec:	f7ff ffd2 	bl	8002394 <_swistat>
 80023f0:	bd70      	pop	{r4, r5, r6, pc}

080023f2 <_stat>:
 80023f2:	b570      	push	{r4, r5, r6, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	2258      	movs	r2, #88	; 0x58
 80023fa:	2100      	movs	r1, #0
 80023fc:	0028      	movs	r0, r5
 80023fe:	f000 fb81 	bl	8002b04 <memset>
 8002402:	0020      	movs	r0, r4
 8002404:	2100      	movs	r1, #0
 8002406:	f000 f813 	bl	8002430 <_swiopen>
 800240a:	0004      	movs	r4, r0
 800240c:	1c43      	adds	r3, r0, #1
 800240e:	d00c      	beq.n	800242a <_stat+0x38>
 8002410:	2381      	movs	r3, #129	; 0x81
 8002412:	686a      	ldr	r2, [r5, #4]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	4313      	orrs	r3, r2
 8002418:	0029      	movs	r1, r5
 800241a:	606b      	str	r3, [r5, #4]
 800241c:	f7ff ffba 	bl	8002394 <_swistat>
 8002420:	0005      	movs	r5, r0
 8002422:	0020      	movs	r0, r4
 8002424:	f7ff ff90 	bl	8002348 <_close>
 8002428:	002c      	movs	r4, r5
 800242a:	0020      	movs	r0, r4
 800242c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002430 <_swiopen>:
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	000d      	movs	r5, r1
 8002434:	2600      	movs	r6, #0
 8002436:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <_swiopen+0xb4>)
 8002438:	b09b      	sub	sp, #108	; 0x6c
 800243a:	9001      	str	r0, [sp, #4]
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	00f3      	lsls	r3, r6, #3
 8002440:	9303      	str	r3, [sp, #12]
 8002442:	9b02      	ldr	r3, [sp, #8]
 8002444:	00f2      	lsls	r2, r6, #3
 8002446:	589c      	ldr	r4, [r3, r2]
 8002448:	1c63      	adds	r3, r4, #1
 800244a:	d036      	beq.n	80024ba <_swiopen+0x8a>
 800244c:	3601      	adds	r6, #1
 800244e:	2e14      	cmp	r6, #20
 8002450:	d1f5      	bne.n	800243e <_swiopen+0xe>
 8002452:	f000 fbad 	bl	8002bb0 <__errno>
 8002456:	2401      	movs	r4, #1
 8002458:	2318      	movs	r3, #24
 800245a:	4264      	negs	r4, r4
 800245c:	6003      	str	r3, [r0, #0]
 800245e:	e03d      	b.n	80024dc <_swiopen+0xac>
 8002460:	2302      	movs	r3, #2
 8002462:	03ec      	lsls	r4, r5, #15
 8002464:	0fe4      	lsrs	r4, r4, #31
 8002466:	421d      	tst	r5, r3
 8002468:	d000      	beq.n	800246c <_swiopen+0x3c>
 800246a:	431c      	orrs	r4, r3
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <_swiopen+0xb8>)
 800246e:	421d      	tst	r5, r3
 8002470:	d001      	beq.n	8002476 <_swiopen+0x46>
 8002472:	2304      	movs	r3, #4
 8002474:	431c      	orrs	r4, r3
 8002476:	2308      	movs	r3, #8
 8002478:	421d      	tst	r5, r3
 800247a:	d002      	beq.n	8002482 <_swiopen+0x52>
 800247c:	2204      	movs	r2, #4
 800247e:	4394      	bics	r4, r2
 8002480:	431c      	orrs	r4, r3
 8002482:	9b01      	ldr	r3, [sp, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	9304      	str	r3, [sp, #16]
 8002488:	f7fd fe3e 	bl	8000108 <strlen>
 800248c:	607c      	str	r4, [r7, #4]
 800248e:	60b8      	str	r0, [r7, #8]
 8002490:	2401      	movs	r4, #1
 8002492:	1c20      	adds	r0, r4, #0
 8002494:	1c39      	adds	r1, r7, #0
 8002496:	beab      	bkpt	0x00ab
 8002498:	1c04      	adds	r4, r0, #0
 800249a:	2c00      	cmp	r4, #0
 800249c:	db08      	blt.n	80024b0 <_swiopen+0x80>
 800249e:	00f2      	lsls	r2, r6, #3
 80024a0:	9b02      	ldr	r3, [sp, #8]
 80024a2:	4694      	mov	ip, r2
 80024a4:	509c      	str	r4, [r3, r2]
 80024a6:	2200      	movs	r2, #0
 80024a8:	4463      	add	r3, ip
 80024aa:	0034      	movs	r4, r6
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	e015      	b.n	80024dc <_swiopen+0xac>
 80024b0:	0020      	movs	r0, r4
 80024b2:	f7ff fe91 	bl	80021d8 <error>
 80024b6:	0004      	movs	r4, r0
 80024b8:	e010      	b.n	80024dc <_swiopen+0xac>
 80024ba:	23a0      	movs	r3, #160	; 0xa0
 80024bc:	002a      	movs	r2, r5
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	401a      	ands	r2, r3
 80024c2:	af04      	add	r7, sp, #16
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1cb      	bne.n	8002460 <_swiopen+0x30>
 80024c8:	0039      	movs	r1, r7
 80024ca:	9801      	ldr	r0, [sp, #4]
 80024cc:	f7ff ff91 	bl	80023f2 <_stat>
 80024d0:	3001      	adds	r0, #1
 80024d2:	d0c5      	beq.n	8002460 <_swiopen+0x30>
 80024d4:	f000 fb6c 	bl	8002bb0 <__errno>
 80024d8:	2311      	movs	r3, #17
 80024da:	6003      	str	r3, [r0, #0]
 80024dc:	0020      	movs	r0, r4
 80024de:	b01b      	add	sp, #108	; 0x6c
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	200000e0 	.word	0x200000e0
 80024e8:	00000601 	.word	0x00000601

080024ec <_get_semihosting_exts>:
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	b085      	sub	sp, #20
 80024f0:	9000      	str	r0, [sp, #0]
 80024f2:	9101      	str	r1, [sp, #4]
 80024f4:	4827      	ldr	r0, [pc, #156]	; (8002594 <_get_semihosting_exts+0xa8>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	0015      	movs	r5, r2
 80024fa:	f7ff ff99 	bl	8002430 <_swiopen>
 80024fe:	0004      	movs	r4, r0
 8002500:	002a      	movs	r2, r5
 8002502:	2100      	movs	r1, #0
 8002504:	9800      	ldr	r0, [sp, #0]
 8002506:	f000 fafd 	bl	8002b04 <memset>
 800250a:	1c63      	adds	r3, r4, #1
 800250c:	d015      	beq.n	800253a <_get_semihosting_exts+0x4e>
 800250e:	0020      	movs	r0, r4
 8002510:	f7ff fe48 	bl	80021a4 <findslot>
 8002514:	260c      	movs	r6, #12
 8002516:	0007      	movs	r7, r0
 8002518:	1c30      	adds	r0, r6, #0
 800251a:	1c39      	adds	r1, r7, #0
 800251c:	beab      	bkpt	0x00ab
 800251e:	1c06      	adds	r6, r0, #0
 8002520:	0030      	movs	r0, r6
 8002522:	f7ff fe67 	bl	80021f4 <checkerror>
 8002526:	2803      	cmp	r0, #3
 8002528:	dd02      	ble.n	8002530 <_get_semihosting_exts+0x44>
 800252a:	3803      	subs	r0, #3
 800252c:	42a8      	cmp	r0, r5
 800252e:	dc07      	bgt.n	8002540 <_get_semihosting_exts+0x54>
 8002530:	0020      	movs	r0, r4
 8002532:	2401      	movs	r4, #1
 8002534:	f7ff ff08 	bl	8002348 <_close>
 8002538:	4264      	negs	r4, r4
 800253a:	0020      	movs	r0, r4
 800253c:	b005      	add	sp, #20
 800253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002540:	ae03      	add	r6, sp, #12
 8002542:	2204      	movs	r2, #4
 8002544:	0031      	movs	r1, r6
 8002546:	0020      	movs	r0, r4
 8002548:	f7ff fe6a 	bl	8002220 <_read>
 800254c:	2803      	cmp	r0, #3
 800254e:	ddef      	ble.n	8002530 <_get_semihosting_exts+0x44>
 8002550:	7833      	ldrb	r3, [r6, #0]
 8002552:	2b53      	cmp	r3, #83	; 0x53
 8002554:	d1ec      	bne.n	8002530 <_get_semihosting_exts+0x44>
 8002556:	7873      	ldrb	r3, [r6, #1]
 8002558:	2b48      	cmp	r3, #72	; 0x48
 800255a:	d1e9      	bne.n	8002530 <_get_semihosting_exts+0x44>
 800255c:	78b3      	ldrb	r3, [r6, #2]
 800255e:	2b46      	cmp	r3, #70	; 0x46
 8002560:	d1e6      	bne.n	8002530 <_get_semihosting_exts+0x44>
 8002562:	78f3      	ldrb	r3, [r6, #3]
 8002564:	2b42      	cmp	r3, #66	; 0x42
 8002566:	d1e3      	bne.n	8002530 <_get_semihosting_exts+0x44>
 8002568:	2201      	movs	r2, #1
 800256a:	0020      	movs	r0, r4
 800256c:	9901      	ldr	r1, [sp, #4]
 800256e:	f7ff fe71 	bl	8002254 <_swilseek>
 8002572:	2800      	cmp	r0, #0
 8002574:	dbdc      	blt.n	8002530 <_get_semihosting_exts+0x44>
 8002576:	002a      	movs	r2, r5
 8002578:	9900      	ldr	r1, [sp, #0]
 800257a:	0020      	movs	r0, r4
 800257c:	f7ff fe50 	bl	8002220 <_read>
 8002580:	0005      	movs	r5, r0
 8002582:	0020      	movs	r0, r4
 8002584:	f7ff fee0 	bl	8002348 <_close>
 8002588:	0028      	movs	r0, r5
 800258a:	f7ff fe33 	bl	80021f4 <checkerror>
 800258e:	0004      	movs	r4, r0
 8002590:	e7d3      	b.n	800253a <_get_semihosting_exts+0x4e>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	080030e1 	.word	0x080030e1

08002598 <initialise_semihosting_exts>:
 8002598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800259a:	2401      	movs	r4, #1
 800259c:	2100      	movs	r1, #0
 800259e:	4e09      	ldr	r6, [pc, #36]	; (80025c4 <initialise_semihosting_exts+0x2c>)
 80025a0:	4d09      	ldr	r5, [pc, #36]	; (80025c8 <initialise_semihosting_exts+0x30>)
 80025a2:	af01      	add	r7, sp, #4
 80025a4:	0022      	movs	r2, r4
 80025a6:	0038      	movs	r0, r7
 80025a8:	6031      	str	r1, [r6, #0]
 80025aa:	602c      	str	r4, [r5, #0]
 80025ac:	f7ff ff9e 	bl	80024ec <_get_semihosting_exts>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	dd05      	ble.n	80025c0 <initialise_semihosting_exts+0x28>
 80025b4:	2202      	movs	r2, #2
 80025b6:	783b      	ldrb	r3, [r7, #0]
 80025b8:	401c      	ands	r4, r3
 80025ba:	4013      	ands	r3, r2
 80025bc:	6034      	str	r4, [r6, #0]
 80025be:	602b      	str	r3, [r5, #0]
 80025c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	20000010 	.word	0x20000010

080025cc <_has_ext_stdout_stderr>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	4c04      	ldr	r4, [pc, #16]	; (80025e0 <_has_ext_stdout_stderr+0x14>)
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da01      	bge.n	80025da <_has_ext_stdout_stderr+0xe>
 80025d6:	f7ff ffdf 	bl	8002598 <initialise_semihosting_exts>
 80025da:	6820      	ldr	r0, [r4, #0]
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	20000010 	.word	0x20000010

080025e4 <initialise_monitor_handles>:
 80025e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <initialise_monitor_handles+0xa4>)
 80025e8:	b087      	sub	sp, #28
 80025ea:	9303      	str	r3, [sp, #12]
 80025ec:	2500      	movs	r5, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2303      	movs	r3, #3
 80025f2:	ac03      	add	r4, sp, #12
 80025f4:	60a3      	str	r3, [r4, #8]
 80025f6:	2601      	movs	r6, #1
 80025f8:	6065      	str	r5, [r4, #4]
 80025fa:	1c30      	adds	r0, r6, #0
 80025fc:	1c21      	adds	r1, r4, #0
 80025fe:	beab      	bkpt	0x00ab
 8002600:	1c06      	adds	r6, r0, #0
 8002602:	2101      	movs	r1, #1
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <initialise_monitor_handles+0xa8>)
 8002606:	4249      	negs	r1, r1
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	601e      	str	r6, [r3, #0]
 800260c:	002b      	movs	r3, r5
 800260e:	4d20      	ldr	r5, [pc, #128]	; (8002690 <initialise_monitor_handles+0xac>)
 8002610:	00da      	lsls	r2, r3, #3
 8002612:	3301      	adds	r3, #1
 8002614:	50a9      	str	r1, [r5, r2]
 8002616:	2b14      	cmp	r3, #20
 8002618:	d1fa      	bne.n	8002610 <initialise_monitor_handles+0x2c>
 800261a:	f7ff ffd7 	bl	80025cc <_has_ext_stdout_stderr>
 800261e:	2800      	cmp	r0, #0
 8002620:	d018      	beq.n	8002654 <initialise_monitor_handles+0x70>
 8002622:	9b00      	ldr	r3, [sp, #0]
 8002624:	2601      	movs	r6, #1
 8002626:	9303      	str	r3, [sp, #12]
 8002628:	2303      	movs	r3, #3
 800262a:	60a3      	str	r3, [r4, #8]
 800262c:	3301      	adds	r3, #1
 800262e:	6063      	str	r3, [r4, #4]
 8002630:	1c30      	adds	r0, r6, #0
 8002632:	1c21      	adds	r1, r4, #0
 8002634:	beab      	bkpt	0x00ab
 8002636:	1c07      	adds	r7, r0, #0
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <initialise_monitor_handles+0xb0>)
 800263a:	9a00      	ldr	r2, [sp, #0]
 800263c:	601f      	str	r7, [r3, #0]
 800263e:	2303      	movs	r3, #3
 8002640:	9203      	str	r2, [sp, #12]
 8002642:	60a3      	str	r3, [r4, #8]
 8002644:	3305      	adds	r3, #5
 8002646:	6063      	str	r3, [r4, #4]
 8002648:	1c30      	adds	r0, r6, #0
 800264a:	1c21      	adds	r1, r4, #0
 800264c:	beab      	bkpt	0x00ab
 800264e:	1c06      	adds	r6, r0, #0
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <initialise_monitor_handles+0xb4>)
 8002652:	601e      	str	r6, [r3, #0]
 8002654:	4e10      	ldr	r6, [pc, #64]	; (8002698 <initialise_monitor_handles+0xb4>)
 8002656:	6833      	ldr	r3, [r6, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	d102      	bne.n	8002662 <initialise_monitor_handles+0x7e>
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <initialise_monitor_handles+0xb0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6033      	str	r3, [r6, #0]
 8002662:	2400      	movs	r4, #0
 8002664:	9b01      	ldr	r3, [sp, #4]
 8002666:	606c      	str	r4, [r5, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	602b      	str	r3, [r5, #0]
 800266c:	f7ff ffae 	bl	80025cc <_has_ext_stdout_stderr>
 8002670:	42a0      	cmp	r0, r4
 8002672:	d006      	beq.n	8002682 <initialise_monitor_handles+0x9e>
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <initialise_monitor_handles+0xb0>)
 8002676:	60ec      	str	r4, [r5, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	616c      	str	r4, [r5, #20]
 800267c:	60ab      	str	r3, [r5, #8]
 800267e:	6833      	ldr	r3, [r6, #0]
 8002680:	612b      	str	r3, [r5, #16]
 8002682:	b007      	add	sp, #28
 8002684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	080030f7 	.word	0x080030f7
 800268c:	200000d8 	.word	0x200000d8
 8002690:	200000e0 	.word	0x200000e0
 8002694:	200000dc 	.word	0x200000dc
 8002698:	200000d4 	.word	0x200000d4

0800269c <_isatty>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	f7ff fd81 	bl	80021a4 <findslot>
 80026a2:	2509      	movs	r5, #9
 80026a4:	1e04      	subs	r4, r0, #0
 80026a6:	d104      	bne.n	80026b2 <_isatty+0x16>
 80026a8:	f000 fa82 	bl	8002bb0 <__errno>
 80026ac:	6005      	str	r5, [r0, #0]
 80026ae:	0020      	movs	r0, r4
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
 80026b2:	1c28      	adds	r0, r5, #0
 80026b4:	1c21      	adds	r1, r4, #0
 80026b6:	beab      	bkpt	0x00ab
 80026b8:	1c04      	adds	r4, r0, #0
 80026ba:	0020      	movs	r0, r4
 80026bc:	2c01      	cmp	r4, #1
 80026be:	d0f7      	beq.n	80026b0 <_isatty+0x14>
 80026c0:	f000 fa76 	bl	8002bb0 <__errno>
 80026c4:	2400      	movs	r4, #0
 80026c6:	0005      	movs	r5, r0
 80026c8:	2613      	movs	r6, #19
 80026ca:	1c30      	adds	r0, r6, #0
 80026cc:	1c21      	adds	r1, r4, #0
 80026ce:	beab      	bkpt	0x00ab
 80026d0:	1c06      	adds	r6, r0, #0
 80026d2:	602e      	str	r6, [r5, #0]
 80026d4:	e7eb      	b.n	80026ae <_isatty+0x12>
	...

080026d8 <std>:
 80026d8:	2300      	movs	r3, #0
 80026da:	b510      	push	{r4, lr}
 80026dc:	0004      	movs	r4, r0
 80026de:	6003      	str	r3, [r0, #0]
 80026e0:	6043      	str	r3, [r0, #4]
 80026e2:	6083      	str	r3, [r0, #8]
 80026e4:	8181      	strh	r1, [r0, #12]
 80026e6:	6643      	str	r3, [r0, #100]	; 0x64
 80026e8:	81c2      	strh	r2, [r0, #14]
 80026ea:	6103      	str	r3, [r0, #16]
 80026ec:	6143      	str	r3, [r0, #20]
 80026ee:	6183      	str	r3, [r0, #24]
 80026f0:	0019      	movs	r1, r3
 80026f2:	2208      	movs	r2, #8
 80026f4:	305c      	adds	r0, #92	; 0x5c
 80026f6:	f000 fa05 	bl	8002b04 <memset>
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <std+0x50>)
 80026fc:	6224      	str	r4, [r4, #32]
 80026fe:	6263      	str	r3, [r4, #36]	; 0x24
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <std+0x54>)
 8002702:	62a3      	str	r3, [r4, #40]	; 0x28
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <std+0x58>)
 8002706:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <std+0x5c>)
 800270a:	6323      	str	r3, [r4, #48]	; 0x30
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <std+0x60>)
 800270e:	429c      	cmp	r4, r3
 8002710:	d005      	beq.n	800271e <std+0x46>
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <std+0x64>)
 8002714:	429c      	cmp	r4, r3
 8002716:	d002      	beq.n	800271e <std+0x46>
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <std+0x68>)
 800271a:	429c      	cmp	r4, r3
 800271c:	d103      	bne.n	8002726 <std+0x4e>
 800271e:	0020      	movs	r0, r4
 8002720:	3058      	adds	r0, #88	; 0x58
 8002722:	f000 fa6f 	bl	8002c04 <__retarget_lock_init_recursive>
 8002726:	bd10      	pop	{r4, pc}
 8002728:	08002921 	.word	0x08002921
 800272c:	08002949 	.word	0x08002949
 8002730:	08002981 	.word	0x08002981
 8002734:	080029ad 	.word	0x080029ad
 8002738:	20000180 	.word	0x20000180
 800273c:	200001e8 	.word	0x200001e8
 8002740:	20000250 	.word	0x20000250

08002744 <stdio_exit_handler>:
 8002744:	b510      	push	{r4, lr}
 8002746:	4a03      	ldr	r2, [pc, #12]	; (8002754 <stdio_exit_handler+0x10>)
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <stdio_exit_handler+0x14>)
 800274a:	4804      	ldr	r0, [pc, #16]	; (800275c <stdio_exit_handler+0x18>)
 800274c:	f000 f86c 	bl	8002828 <_fwalk_sglue>
 8002750:	bd10      	pop	{r4, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	20000014 	.word	0x20000014
 8002758:	08002f1d 	.word	0x08002f1d
 800275c:	20000020 	.word	0x20000020

08002760 <cleanup_stdio>:
 8002760:	6841      	ldr	r1, [r0, #4]
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <cleanup_stdio+0x30>)
 8002764:	b510      	push	{r4, lr}
 8002766:	0004      	movs	r4, r0
 8002768:	4299      	cmp	r1, r3
 800276a:	d001      	beq.n	8002770 <cleanup_stdio+0x10>
 800276c:	f000 fbd6 	bl	8002f1c <_fflush_r>
 8002770:	68a1      	ldr	r1, [r4, #8]
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <cleanup_stdio+0x34>)
 8002774:	4299      	cmp	r1, r3
 8002776:	d002      	beq.n	800277e <cleanup_stdio+0x1e>
 8002778:	0020      	movs	r0, r4
 800277a:	f000 fbcf 	bl	8002f1c <_fflush_r>
 800277e:	68e1      	ldr	r1, [r4, #12]
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <cleanup_stdio+0x38>)
 8002782:	4299      	cmp	r1, r3
 8002784:	d002      	beq.n	800278c <cleanup_stdio+0x2c>
 8002786:	0020      	movs	r0, r4
 8002788:	f000 fbc8 	bl	8002f1c <_fflush_r>
 800278c:	bd10      	pop	{r4, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	20000180 	.word	0x20000180
 8002794:	200001e8 	.word	0x200001e8
 8002798:	20000250 	.word	0x20000250

0800279c <global_stdio_init.part.0>:
 800279c:	b510      	push	{r4, lr}
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <global_stdio_init.part.0+0x28>)
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <global_stdio_init.part.0+0x2c>)
 80027a2:	2104      	movs	r1, #4
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	4809      	ldr	r0, [pc, #36]	; (80027cc <global_stdio_init.part.0+0x30>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f7ff ff95 	bl	80026d8 <std>
 80027ae:	2201      	movs	r2, #1
 80027b0:	2109      	movs	r1, #9
 80027b2:	4807      	ldr	r0, [pc, #28]	; (80027d0 <global_stdio_init.part.0+0x34>)
 80027b4:	f7ff ff90 	bl	80026d8 <std>
 80027b8:	2202      	movs	r2, #2
 80027ba:	2112      	movs	r1, #18
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <global_stdio_init.part.0+0x38>)
 80027be:	f7ff ff8b 	bl	80026d8 <std>
 80027c2:	bd10      	pop	{r4, pc}
 80027c4:	200002b8 	.word	0x200002b8
 80027c8:	08002745 	.word	0x08002745
 80027cc:	20000180 	.word	0x20000180
 80027d0:	200001e8 	.word	0x200001e8
 80027d4:	20000250 	.word	0x20000250

080027d8 <__sfp_lock_acquire>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	4802      	ldr	r0, [pc, #8]	; (80027e4 <__sfp_lock_acquire+0xc>)
 80027dc:	f000 fa13 	bl	8002c06 <__retarget_lock_acquire_recursive>
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	200002c1 	.word	0x200002c1

080027e8 <__sfp_lock_release>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4802      	ldr	r0, [pc, #8]	; (80027f4 <__sfp_lock_release+0xc>)
 80027ec:	f000 fa0c 	bl	8002c08 <__retarget_lock_release_recursive>
 80027f0:	bd10      	pop	{r4, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	200002c1 	.word	0x200002c1

080027f8 <__sinit>:
 80027f8:	b510      	push	{r4, lr}
 80027fa:	0004      	movs	r4, r0
 80027fc:	f7ff ffec 	bl	80027d8 <__sfp_lock_acquire>
 8002800:	6a23      	ldr	r3, [r4, #32]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <__sinit+0x14>
 8002806:	f7ff ffef 	bl	80027e8 <__sfp_lock_release>
 800280a:	bd10      	pop	{r4, pc}
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <__sinit+0x28>)
 800280e:	6223      	str	r3, [r4, #32]
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <__sinit+0x2c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f6      	bne.n	8002806 <__sinit+0xe>
 8002818:	f7ff ffc0 	bl	800279c <global_stdio_init.part.0>
 800281c:	e7f3      	b.n	8002806 <__sinit+0xe>
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	08002761 	.word	0x08002761
 8002824:	200002b8 	.word	0x200002b8

08002828 <_fwalk_sglue>:
 8002828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800282a:	0014      	movs	r4, r2
 800282c:	2600      	movs	r6, #0
 800282e:	9000      	str	r0, [sp, #0]
 8002830:	9101      	str	r1, [sp, #4]
 8002832:	68a5      	ldr	r5, [r4, #8]
 8002834:	6867      	ldr	r7, [r4, #4]
 8002836:	3f01      	subs	r7, #1
 8002838:	d504      	bpl.n	8002844 <_fwalk_sglue+0x1c>
 800283a:	6824      	ldr	r4, [r4, #0]
 800283c:	2c00      	cmp	r4, #0
 800283e:	d1f8      	bne.n	8002832 <_fwalk_sglue+0xa>
 8002840:	0030      	movs	r0, r6
 8002842:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002844:	89ab      	ldrh	r3, [r5, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d908      	bls.n	800285c <_fwalk_sglue+0x34>
 800284a:	220e      	movs	r2, #14
 800284c:	5eab      	ldrsh	r3, [r5, r2]
 800284e:	3301      	adds	r3, #1
 8002850:	d004      	beq.n	800285c <_fwalk_sglue+0x34>
 8002852:	0029      	movs	r1, r5
 8002854:	9800      	ldr	r0, [sp, #0]
 8002856:	9b01      	ldr	r3, [sp, #4]
 8002858:	4798      	blx	r3
 800285a:	4306      	orrs	r6, r0
 800285c:	3568      	adds	r5, #104	; 0x68
 800285e:	e7ea      	b.n	8002836 <_fwalk_sglue+0xe>

08002860 <_puts_r>:
 8002860:	6a03      	ldr	r3, [r0, #32]
 8002862:	b570      	push	{r4, r5, r6, lr}
 8002864:	0005      	movs	r5, r0
 8002866:	000e      	movs	r6, r1
 8002868:	6884      	ldr	r4, [r0, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <_puts_r+0x12>
 800286e:	f7ff ffc3 	bl	80027f8 <__sinit>
 8002872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002874:	07db      	lsls	r3, r3, #31
 8002876:	d405      	bmi.n	8002884 <_puts_r+0x24>
 8002878:	89a3      	ldrh	r3, [r4, #12]
 800287a:	059b      	lsls	r3, r3, #22
 800287c:	d402      	bmi.n	8002884 <_puts_r+0x24>
 800287e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002880:	f000 f9c1 	bl	8002c06 <__retarget_lock_acquire_recursive>
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	071b      	lsls	r3, r3, #28
 8002888:	d502      	bpl.n	8002890 <_puts_r+0x30>
 800288a:	6923      	ldr	r3, [r4, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11f      	bne.n	80028d0 <_puts_r+0x70>
 8002890:	0021      	movs	r1, r4
 8002892:	0028      	movs	r0, r5
 8002894:	f000 f8d2 	bl	8002a3c <__swsetup_r>
 8002898:	2800      	cmp	r0, #0
 800289a:	d019      	beq.n	80028d0 <_puts_r+0x70>
 800289c:	2501      	movs	r5, #1
 800289e:	426d      	negs	r5, r5
 80028a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028a2:	07db      	lsls	r3, r3, #31
 80028a4:	d405      	bmi.n	80028b2 <_puts_r+0x52>
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	059b      	lsls	r3, r3, #22
 80028aa:	d402      	bmi.n	80028b2 <_puts_r+0x52>
 80028ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028ae:	f000 f9ab 	bl	8002c08 <__retarget_lock_release_recursive>
 80028b2:	0028      	movs	r0, r5
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
 80028b6:	3601      	adds	r6, #1
 80028b8:	60a3      	str	r3, [r4, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	da04      	bge.n	80028c8 <_puts_r+0x68>
 80028be:	69a2      	ldr	r2, [r4, #24]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dc16      	bgt.n	80028f2 <_puts_r+0x92>
 80028c4:	290a      	cmp	r1, #10
 80028c6:	d014      	beq.n	80028f2 <_puts_r+0x92>
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	6022      	str	r2, [r4, #0]
 80028ce:	7019      	strb	r1, [r3, #0]
 80028d0:	68a3      	ldr	r3, [r4, #8]
 80028d2:	7831      	ldrb	r1, [r6, #0]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	2900      	cmp	r1, #0
 80028d8:	d1ed      	bne.n	80028b6 <_puts_r+0x56>
 80028da:	60a3      	str	r3, [r4, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	da0f      	bge.n	8002900 <_puts_r+0xa0>
 80028e0:	0028      	movs	r0, r5
 80028e2:	0022      	movs	r2, r4
 80028e4:	310a      	adds	r1, #10
 80028e6:	f000 f867 	bl	80029b8 <__swbuf_r>
 80028ea:	250a      	movs	r5, #10
 80028ec:	3001      	adds	r0, #1
 80028ee:	d1d7      	bne.n	80028a0 <_puts_r+0x40>
 80028f0:	e7d4      	b.n	800289c <_puts_r+0x3c>
 80028f2:	0022      	movs	r2, r4
 80028f4:	0028      	movs	r0, r5
 80028f6:	f000 f85f 	bl	80029b8 <__swbuf_r>
 80028fa:	3001      	adds	r0, #1
 80028fc:	d1e8      	bne.n	80028d0 <_puts_r+0x70>
 80028fe:	e7cd      	b.n	800289c <_puts_r+0x3c>
 8002900:	250a      	movs	r5, #10
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	6022      	str	r2, [r4, #0]
 8002908:	701d      	strb	r5, [r3, #0]
 800290a:	e7c9      	b.n	80028a0 <_puts_r+0x40>

0800290c <puts>:
 800290c:	b510      	push	{r4, lr}
 800290e:	4b03      	ldr	r3, [pc, #12]	; (800291c <puts+0x10>)
 8002910:	0001      	movs	r1, r0
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	f7ff ffa4 	bl	8002860 <_puts_r>
 8002918:	bd10      	pop	{r4, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	2000006c 	.word	0x2000006c

08002920 <__sread>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	000c      	movs	r4, r1
 8002924:	250e      	movs	r5, #14
 8002926:	5f49      	ldrsh	r1, [r1, r5]
 8002928:	f000 f91a 	bl	8002b60 <_read_r>
 800292c:	2800      	cmp	r0, #0
 800292e:	db03      	blt.n	8002938 <__sread+0x18>
 8002930:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002932:	181b      	adds	r3, r3, r0
 8002934:	6563      	str	r3, [r4, #84]	; 0x54
 8002936:	bd70      	pop	{r4, r5, r6, pc}
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	4a02      	ldr	r2, [pc, #8]	; (8002944 <__sread+0x24>)
 800293c:	4013      	ands	r3, r2
 800293e:	81a3      	strh	r3, [r4, #12]
 8002940:	e7f9      	b.n	8002936 <__sread+0x16>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	ffffefff 	.word	0xffffefff

08002948 <__swrite>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	001f      	movs	r7, r3
 800294c:	898b      	ldrh	r3, [r1, #12]
 800294e:	0005      	movs	r5, r0
 8002950:	000c      	movs	r4, r1
 8002952:	0016      	movs	r6, r2
 8002954:	05db      	lsls	r3, r3, #23
 8002956:	d505      	bpl.n	8002964 <__swrite+0x1c>
 8002958:	230e      	movs	r3, #14
 800295a:	5ec9      	ldrsh	r1, [r1, r3]
 800295c:	2200      	movs	r2, #0
 800295e:	2302      	movs	r3, #2
 8002960:	f000 f8ea 	bl	8002b38 <_lseek_r>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <__swrite+0x34>)
 8002968:	0028      	movs	r0, r5
 800296a:	4013      	ands	r3, r2
 800296c:	81a3      	strh	r3, [r4, #12]
 800296e:	0032      	movs	r2, r6
 8002970:	230e      	movs	r3, #14
 8002972:	5ee1      	ldrsh	r1, [r4, r3]
 8002974:	003b      	movs	r3, r7
 8002976:	f000 f907 	bl	8002b88 <_write_r>
 800297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800297c:	ffffefff 	.word	0xffffefff

08002980 <__sseek>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	000c      	movs	r4, r1
 8002984:	250e      	movs	r5, #14
 8002986:	5f49      	ldrsh	r1, [r1, r5]
 8002988:	f000 f8d6 	bl	8002b38 <_lseek_r>
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	1c42      	adds	r2, r0, #1
 8002990:	d103      	bne.n	800299a <__sseek+0x1a>
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <__sseek+0x28>)
 8002994:	4013      	ands	r3, r2
 8002996:	81a3      	strh	r3, [r4, #12]
 8002998:	bd70      	pop	{r4, r5, r6, pc}
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	0152      	lsls	r2, r2, #5
 800299e:	4313      	orrs	r3, r2
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	6560      	str	r0, [r4, #84]	; 0x54
 80029a4:	e7f8      	b.n	8002998 <__sseek+0x18>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	ffffefff 	.word	0xffffefff

080029ac <__sclose>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	230e      	movs	r3, #14
 80029b0:	5ec9      	ldrsh	r1, [r1, r3]
 80029b2:	f000 f8af 	bl	8002b14 <_close_r>
 80029b6:	bd10      	pop	{r4, pc}

080029b8 <__swbuf_r>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	0006      	movs	r6, r0
 80029bc:	000d      	movs	r5, r1
 80029be:	0014      	movs	r4, r2
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d004      	beq.n	80029ce <__swbuf_r+0x16>
 80029c4:	6a03      	ldr	r3, [r0, #32]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <__swbuf_r+0x16>
 80029ca:	f7ff ff15 	bl	80027f8 <__sinit>
 80029ce:	69a3      	ldr	r3, [r4, #24]
 80029d0:	60a3      	str	r3, [r4, #8]
 80029d2:	89a3      	ldrh	r3, [r4, #12]
 80029d4:	071b      	lsls	r3, r3, #28
 80029d6:	d528      	bpl.n	8002a2a <__swbuf_r+0x72>
 80029d8:	6923      	ldr	r3, [r4, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d025      	beq.n	8002a2a <__swbuf_r+0x72>
 80029de:	6923      	ldr	r3, [r4, #16]
 80029e0:	6820      	ldr	r0, [r4, #0]
 80029e2:	b2ef      	uxtb	r7, r5
 80029e4:	1ac0      	subs	r0, r0, r3
 80029e6:	6963      	ldr	r3, [r4, #20]
 80029e8:	b2ed      	uxtb	r5, r5
 80029ea:	4283      	cmp	r3, r0
 80029ec:	dc05      	bgt.n	80029fa <__swbuf_r+0x42>
 80029ee:	0021      	movs	r1, r4
 80029f0:	0030      	movs	r0, r6
 80029f2:	f000 fa93 	bl	8002f1c <_fflush_r>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d11d      	bne.n	8002a36 <__swbuf_r+0x7e>
 80029fa:	68a3      	ldr	r3, [r4, #8]
 80029fc:	3001      	adds	r0, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	60a3      	str	r3, [r4, #8]
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	6022      	str	r2, [r4, #0]
 8002a08:	701f      	strb	r7, [r3, #0]
 8002a0a:	6963      	ldr	r3, [r4, #20]
 8002a0c:	4283      	cmp	r3, r0
 8002a0e:	d004      	beq.n	8002a1a <__swbuf_r+0x62>
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	07db      	lsls	r3, r3, #31
 8002a14:	d507      	bpl.n	8002a26 <__swbuf_r+0x6e>
 8002a16:	2d0a      	cmp	r5, #10
 8002a18:	d105      	bne.n	8002a26 <__swbuf_r+0x6e>
 8002a1a:	0021      	movs	r1, r4
 8002a1c:	0030      	movs	r0, r6
 8002a1e:	f000 fa7d 	bl	8002f1c <_fflush_r>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d107      	bne.n	8002a36 <__swbuf_r+0x7e>
 8002a26:	0028      	movs	r0, r5
 8002a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a2a:	0021      	movs	r1, r4
 8002a2c:	0030      	movs	r0, r6
 8002a2e:	f000 f805 	bl	8002a3c <__swsetup_r>
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d0d3      	beq.n	80029de <__swbuf_r+0x26>
 8002a36:	2501      	movs	r5, #1
 8002a38:	426d      	negs	r5, r5
 8002a3a:	e7f4      	b.n	8002a26 <__swbuf_r+0x6e>

08002a3c <__swsetup_r>:
 8002a3c:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <__swsetup_r+0xc4>)
 8002a3e:	b570      	push	{r4, r5, r6, lr}
 8002a40:	0005      	movs	r5, r0
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	000c      	movs	r4, r1
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d004      	beq.n	8002a54 <__swsetup_r+0x18>
 8002a4a:	6a03      	ldr	r3, [r0, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <__swsetup_r+0x18>
 8002a50:	f7ff fed2 	bl	80027f8 <__sinit>
 8002a54:	230c      	movs	r3, #12
 8002a56:	5ee2      	ldrsh	r2, [r4, r3]
 8002a58:	b293      	uxth	r3, r2
 8002a5a:	0711      	lsls	r1, r2, #28
 8002a5c:	d423      	bmi.n	8002aa6 <__swsetup_r+0x6a>
 8002a5e:	06d9      	lsls	r1, r3, #27
 8002a60:	d407      	bmi.n	8002a72 <__swsetup_r+0x36>
 8002a62:	2309      	movs	r3, #9
 8002a64:	2001      	movs	r0, #1
 8002a66:	602b      	str	r3, [r5, #0]
 8002a68:	3337      	adds	r3, #55	; 0x37
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	81a3      	strh	r3, [r4, #12]
 8002a6e:	4240      	negs	r0, r0
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
 8002a72:	075b      	lsls	r3, r3, #29
 8002a74:	d513      	bpl.n	8002a9e <__swsetup_r+0x62>
 8002a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a78:	2900      	cmp	r1, #0
 8002a7a:	d008      	beq.n	8002a8e <__swsetup_r+0x52>
 8002a7c:	0023      	movs	r3, r4
 8002a7e:	3344      	adds	r3, #68	; 0x44
 8002a80:	4299      	cmp	r1, r3
 8002a82:	d002      	beq.n	8002a8a <__swsetup_r+0x4e>
 8002a84:	0028      	movs	r0, r5
 8002a86:	f000 f8c1 	bl	8002c0c <_free_r>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	4393      	bics	r3, r2
 8002a94:	81a3      	strh	r3, [r4, #12]
 8002a96:	2300      	movs	r3, #0
 8002a98:	6063      	str	r3, [r4, #4]
 8002a9a:	6923      	ldr	r3, [r4, #16]
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	89a2      	ldrh	r2, [r4, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	81a3      	strh	r3, [r4, #12]
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <__swsetup_r+0x88>
 8002aac:	21a0      	movs	r1, #160	; 0xa0
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	0089      	lsls	r1, r1, #2
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <__swsetup_r+0x88>
 8002abc:	0021      	movs	r1, r4
 8002abe:	0028      	movs	r0, r5
 8002ac0:	f000 fa80 	bl	8002fc4 <__smakebuf_r>
 8002ac4:	220c      	movs	r2, #12
 8002ac6:	5ea3      	ldrsh	r3, [r4, r2]
 8002ac8:	2001      	movs	r0, #1
 8002aca:	001a      	movs	r2, r3
 8002acc:	b299      	uxth	r1, r3
 8002ace:	4002      	ands	r2, r0
 8002ad0:	4203      	tst	r3, r0
 8002ad2:	d00f      	beq.n	8002af4 <__swsetup_r+0xb8>
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60a2      	str	r2, [r4, #8]
 8002ad8:	6962      	ldr	r2, [r4, #20]
 8002ada:	4252      	negs	r2, r2
 8002adc:	61a2      	str	r2, [r4, #24]
 8002ade:	2000      	movs	r0, #0
 8002ae0:	6922      	ldr	r2, [r4, #16]
 8002ae2:	4282      	cmp	r2, r0
 8002ae4:	d1c4      	bne.n	8002a70 <__swsetup_r+0x34>
 8002ae6:	0609      	lsls	r1, r1, #24
 8002ae8:	d5c2      	bpl.n	8002a70 <__swsetup_r+0x34>
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	4313      	orrs	r3, r2
 8002aee:	81a3      	strh	r3, [r4, #12]
 8002af0:	3801      	subs	r0, #1
 8002af2:	e7bd      	b.n	8002a70 <__swsetup_r+0x34>
 8002af4:	0788      	lsls	r0, r1, #30
 8002af6:	d400      	bmi.n	8002afa <__swsetup_r+0xbe>
 8002af8:	6962      	ldr	r2, [r4, #20]
 8002afa:	60a2      	str	r2, [r4, #8]
 8002afc:	e7ef      	b.n	8002ade <__swsetup_r+0xa2>
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	2000006c 	.word	0x2000006c

08002b04 <memset>:
 8002b04:	0003      	movs	r3, r0
 8002b06:	1882      	adds	r2, r0, r2
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <memset+0xa>
 8002b0c:	4770      	bx	lr
 8002b0e:	7019      	strb	r1, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	e7f9      	b.n	8002b08 <memset+0x4>

08002b14 <_close_r>:
 8002b14:	2300      	movs	r3, #0
 8002b16:	b570      	push	{r4, r5, r6, lr}
 8002b18:	4d06      	ldr	r5, [pc, #24]	; (8002b34 <_close_r+0x20>)
 8002b1a:	0004      	movs	r4, r0
 8002b1c:	0008      	movs	r0, r1
 8002b1e:	602b      	str	r3, [r5, #0]
 8002b20:	f7ff fc12 	bl	8002348 <_close>
 8002b24:	1c43      	adds	r3, r0, #1
 8002b26:	d103      	bne.n	8002b30 <_close_r+0x1c>
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d000      	beq.n	8002b30 <_close_r+0x1c>
 8002b2e:	6023      	str	r3, [r4, #0]
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	200002bc 	.word	0x200002bc

08002b38 <_lseek_r>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	0004      	movs	r4, r0
 8002b3c:	0008      	movs	r0, r1
 8002b3e:	0011      	movs	r1, r2
 8002b40:	001a      	movs	r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	4d05      	ldr	r5, [pc, #20]	; (8002b5c <_lseek_r+0x24>)
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	f7ff fbbf 	bl	80022ca <_lseek>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d103      	bne.n	8002b58 <_lseek_r+0x20>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d000      	beq.n	8002b58 <_lseek_r+0x20>
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	200002bc 	.word	0x200002bc

08002b60 <_read_r>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	0004      	movs	r4, r0
 8002b64:	0008      	movs	r0, r1
 8002b66:	0011      	movs	r1, r2
 8002b68:	001a      	movs	r2, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	4d05      	ldr	r5, [pc, #20]	; (8002b84 <_read_r+0x24>)
 8002b6e:	602b      	str	r3, [r5, #0]
 8002b70:	f7ff fb56 	bl	8002220 <_read>
 8002b74:	1c43      	adds	r3, r0, #1
 8002b76:	d103      	bne.n	8002b80 <_read_r+0x20>
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d000      	beq.n	8002b80 <_read_r+0x20>
 8002b7e:	6023      	str	r3, [r4, #0]
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	200002bc 	.word	0x200002bc

08002b88 <_write_r>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	0004      	movs	r4, r0
 8002b8c:	0008      	movs	r0, r1
 8002b8e:	0011      	movs	r1, r2
 8002b90:	001a      	movs	r2, r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	4d05      	ldr	r5, [pc, #20]	; (8002bac <_write_r+0x24>)
 8002b96:	602b      	str	r3, [r5, #0]
 8002b98:	f7ff fbab 	bl	80022f2 <_write>
 8002b9c:	1c43      	adds	r3, r0, #1
 8002b9e:	d103      	bne.n	8002ba8 <_write_r+0x20>
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d000      	beq.n	8002ba8 <_write_r+0x20>
 8002ba6:	6023      	str	r3, [r4, #0]
 8002ba8:	bd70      	pop	{r4, r5, r6, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	200002bc 	.word	0x200002bc

08002bb0 <__errno>:
 8002bb0:	4b01      	ldr	r3, [pc, #4]	; (8002bb8 <__errno+0x8>)
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	4770      	bx	lr
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	2000006c 	.word	0x2000006c

08002bbc <__libc_init_array>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	4c0c      	ldr	r4, [pc, #48]	; (8002bf4 <__libc_init_array+0x38>)
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	; (8002bf8 <__libc_init_array+0x3c>)
 8002bc4:	1b64      	subs	r4, r4, r5
 8002bc6:	10a4      	asrs	r4, r4, #2
 8002bc8:	42a6      	cmp	r6, r4
 8002bca:	d109      	bne.n	8002be0 <__libc_init_array+0x24>
 8002bcc:	2600      	movs	r6, #0
 8002bce:	f000 fa6d 	bl	80030ac <_init>
 8002bd2:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <__libc_init_array+0x40>)
 8002bd4:	4d0a      	ldr	r5, [pc, #40]	; (8002c00 <__libc_init_array+0x44>)
 8002bd6:	1b64      	subs	r4, r4, r5
 8002bd8:	10a4      	asrs	r4, r4, #2
 8002bda:	42a6      	cmp	r6, r4
 8002bdc:	d105      	bne.n	8002bea <__libc_init_array+0x2e>
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	00b3      	lsls	r3, r6, #2
 8002be2:	58eb      	ldr	r3, [r5, r3]
 8002be4:	4798      	blx	r3
 8002be6:	3601      	adds	r6, #1
 8002be8:	e7ee      	b.n	8002bc8 <__libc_init_array+0xc>
 8002bea:	00b3      	lsls	r3, r6, #2
 8002bec:	58eb      	ldr	r3, [r5, r3]
 8002bee:	4798      	blx	r3
 8002bf0:	3601      	adds	r6, #1
 8002bf2:	e7f2      	b.n	8002bda <__libc_init_array+0x1e>
 8002bf4:	08003104 	.word	0x08003104
 8002bf8:	08003104 	.word	0x08003104
 8002bfc:	08003108 	.word	0x08003108
 8002c00:	08003104 	.word	0x08003104

08002c04 <__retarget_lock_init_recursive>:
 8002c04:	4770      	bx	lr

08002c06 <__retarget_lock_acquire_recursive>:
 8002c06:	4770      	bx	lr

08002c08 <__retarget_lock_release_recursive>:
 8002c08:	4770      	bx	lr
	...

08002c0c <_free_r>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	0005      	movs	r5, r0
 8002c10:	2900      	cmp	r1, #0
 8002c12:	d010      	beq.n	8002c36 <_free_r+0x2a>
 8002c14:	1f0c      	subs	r4, r1, #4
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da00      	bge.n	8002c1e <_free_r+0x12>
 8002c1c:	18e4      	adds	r4, r4, r3
 8002c1e:	0028      	movs	r0, r5
 8002c20:	f000 f8e2 	bl	8002de8 <__malloc_lock>
 8002c24:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <_free_r+0x90>)
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <_free_r+0x2c>
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	6014      	str	r4, [r2, #0]
 8002c30:	0028      	movs	r0, r5
 8002c32:	f000 f8e1 	bl	8002df8 <__malloc_unlock>
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d908      	bls.n	8002c4e <_free_r+0x42>
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	1821      	adds	r1, r4, r0
 8002c40:	428b      	cmp	r3, r1
 8002c42:	d1f3      	bne.n	8002c2c <_free_r+0x20>
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	1809      	adds	r1, r1, r0
 8002c4a:	6021      	str	r1, [r4, #0]
 8002c4c:	e7ee      	b.n	8002c2c <_free_r+0x20>
 8002c4e:	001a      	movs	r2, r3
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <_free_r+0x4e>
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	d9f9      	bls.n	8002c4e <_free_r+0x42>
 8002c5a:	6811      	ldr	r1, [r2, #0]
 8002c5c:	1850      	adds	r0, r2, r1
 8002c5e:	42a0      	cmp	r0, r4
 8002c60:	d10b      	bne.n	8002c7a <_free_r+0x6e>
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	1809      	adds	r1, r1, r0
 8002c66:	1850      	adds	r0, r2, r1
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	4283      	cmp	r3, r0
 8002c6c:	d1e0      	bne.n	8002c30 <_free_r+0x24>
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	1841      	adds	r1, r0, r1
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	6053      	str	r3, [r2, #4]
 8002c78:	e7da      	b.n	8002c30 <_free_r+0x24>
 8002c7a:	42a0      	cmp	r0, r4
 8002c7c:	d902      	bls.n	8002c84 <_free_r+0x78>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	602b      	str	r3, [r5, #0]
 8002c82:	e7d5      	b.n	8002c30 <_free_r+0x24>
 8002c84:	6820      	ldr	r0, [r4, #0]
 8002c86:	1821      	adds	r1, r4, r0
 8002c88:	428b      	cmp	r3, r1
 8002c8a:	d103      	bne.n	8002c94 <_free_r+0x88>
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	1809      	adds	r1, r1, r0
 8002c92:	6021      	str	r1, [r4, #0]
 8002c94:	6063      	str	r3, [r4, #4]
 8002c96:	6054      	str	r4, [r2, #4]
 8002c98:	e7ca      	b.n	8002c30 <_free_r+0x24>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	200002c4 	.word	0x200002c4

08002ca0 <sbrk_aligned>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4e0f      	ldr	r6, [pc, #60]	; (8002ce0 <sbrk_aligned+0x40>)
 8002ca4:	000d      	movs	r5, r1
 8002ca6:	6831      	ldr	r1, [r6, #0]
 8002ca8:	0004      	movs	r4, r0
 8002caa:	2900      	cmp	r1, #0
 8002cac:	d102      	bne.n	8002cb4 <sbrk_aligned+0x14>
 8002cae:	f000 f9eb 	bl	8003088 <_sbrk_r>
 8002cb2:	6030      	str	r0, [r6, #0]
 8002cb4:	0029      	movs	r1, r5
 8002cb6:	0020      	movs	r0, r4
 8002cb8:	f000 f9e6 	bl	8003088 <_sbrk_r>
 8002cbc:	1c43      	adds	r3, r0, #1
 8002cbe:	d00a      	beq.n	8002cd6 <sbrk_aligned+0x36>
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	1cc5      	adds	r5, r0, #3
 8002cc4:	439d      	bics	r5, r3
 8002cc6:	42a8      	cmp	r0, r5
 8002cc8:	d007      	beq.n	8002cda <sbrk_aligned+0x3a>
 8002cca:	1a29      	subs	r1, r5, r0
 8002ccc:	0020      	movs	r0, r4
 8002cce:	f000 f9db 	bl	8003088 <_sbrk_r>
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d101      	bne.n	8002cda <sbrk_aligned+0x3a>
 8002cd6:	2501      	movs	r5, #1
 8002cd8:	426d      	negs	r5, r5
 8002cda:	0028      	movs	r0, r5
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	200002c8 	.word	0x200002c8

08002ce4 <_malloc_r>:
 8002ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	1ccb      	adds	r3, r1, #3
 8002cea:	4393      	bics	r3, r2
 8002cec:	3308      	adds	r3, #8
 8002cee:	0006      	movs	r6, r0
 8002cf0:	001f      	movs	r7, r3
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d238      	bcs.n	8002d68 <_malloc_r+0x84>
 8002cf6:	270c      	movs	r7, #12
 8002cf8:	42b9      	cmp	r1, r7
 8002cfa:	d837      	bhi.n	8002d6c <_malloc_r+0x88>
 8002cfc:	0030      	movs	r0, r6
 8002cfe:	f000 f873 	bl	8002de8 <__malloc_lock>
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <_malloc_r+0x100>)
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	001c      	movs	r4, r3
 8002d0a:	2c00      	cmp	r4, #0
 8002d0c:	d133      	bne.n	8002d76 <_malloc_r+0x92>
 8002d0e:	0039      	movs	r1, r7
 8002d10:	0030      	movs	r0, r6
 8002d12:	f7ff ffc5 	bl	8002ca0 <sbrk_aligned>
 8002d16:	0004      	movs	r4, r0
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d15e      	bne.n	8002dda <_malloc_r+0xf6>
 8002d1c:	9b00      	ldr	r3, [sp, #0]
 8002d1e:	681c      	ldr	r4, [r3, #0]
 8002d20:	0025      	movs	r5, r4
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d14e      	bne.n	8002dc4 <_malloc_r+0xe0>
 8002d26:	2c00      	cmp	r4, #0
 8002d28:	d051      	beq.n	8002dce <_malloc_r+0xea>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	0029      	movs	r1, r5
 8002d2e:	18e3      	adds	r3, r4, r3
 8002d30:	0030      	movs	r0, r6
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	f000 f9a8 	bl	8003088 <_sbrk_r>
 8002d38:	9b01      	ldr	r3, [sp, #4]
 8002d3a:	4283      	cmp	r3, r0
 8002d3c:	d147      	bne.n	8002dce <_malloc_r+0xea>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	0030      	movs	r0, r6
 8002d42:	1aff      	subs	r7, r7, r3
 8002d44:	0039      	movs	r1, r7
 8002d46:	f7ff ffab 	bl	8002ca0 <sbrk_aligned>
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d03f      	beq.n	8002dce <_malloc_r+0xea>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	19db      	adds	r3, r3, r7
 8002d52:	6023      	str	r3, [r4, #0]
 8002d54:	9b00      	ldr	r3, [sp, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d040      	beq.n	8002dde <_malloc_r+0xfa>
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	42a2      	cmp	r2, r4
 8002d60:	d133      	bne.n	8002dca <_malloc_r+0xe6>
 8002d62:	2200      	movs	r2, #0
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	e014      	b.n	8002d92 <_malloc_r+0xae>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	dac5      	bge.n	8002cf8 <_malloc_r+0x14>
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	2500      	movs	r5, #0
 8002d70:	6033      	str	r3, [r6, #0]
 8002d72:	0028      	movs	r0, r5
 8002d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d76:	6821      	ldr	r1, [r4, #0]
 8002d78:	1bc9      	subs	r1, r1, r7
 8002d7a:	d420      	bmi.n	8002dbe <_malloc_r+0xda>
 8002d7c:	290b      	cmp	r1, #11
 8002d7e:	d918      	bls.n	8002db2 <_malloc_r+0xce>
 8002d80:	19e2      	adds	r2, r4, r7
 8002d82:	6027      	str	r7, [r4, #0]
 8002d84:	42a3      	cmp	r3, r4
 8002d86:	d112      	bne.n	8002dae <_malloc_r+0xca>
 8002d88:	9b00      	ldr	r3, [sp, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	6863      	ldr	r3, [r4, #4]
 8002d8e:	6011      	str	r1, [r2, #0]
 8002d90:	6053      	str	r3, [r2, #4]
 8002d92:	0030      	movs	r0, r6
 8002d94:	0025      	movs	r5, r4
 8002d96:	f000 f82f 	bl	8002df8 <__malloc_unlock>
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	350b      	adds	r5, #11
 8002d9e:	1d23      	adds	r3, r4, #4
 8002da0:	4395      	bics	r5, r2
 8002da2:	1aea      	subs	r2, r5, r3
 8002da4:	429d      	cmp	r5, r3
 8002da6:	d0e4      	beq.n	8002d72 <_malloc_r+0x8e>
 8002da8:	1b5b      	subs	r3, r3, r5
 8002daa:	50a3      	str	r3, [r4, r2]
 8002dac:	e7e1      	b.n	8002d72 <_malloc_r+0x8e>
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	e7ec      	b.n	8002d8c <_malloc_r+0xa8>
 8002db2:	6862      	ldr	r2, [r4, #4]
 8002db4:	42a3      	cmp	r3, r4
 8002db6:	d1d5      	bne.n	8002d64 <_malloc_r+0x80>
 8002db8:	9b00      	ldr	r3, [sp, #0]
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e7e9      	b.n	8002d92 <_malloc_r+0xae>
 8002dbe:	0023      	movs	r3, r4
 8002dc0:	6864      	ldr	r4, [r4, #4]
 8002dc2:	e7a2      	b.n	8002d0a <_malloc_r+0x26>
 8002dc4:	002c      	movs	r4, r5
 8002dc6:	686d      	ldr	r5, [r5, #4]
 8002dc8:	e7ab      	b.n	8002d22 <_malloc_r+0x3e>
 8002dca:	0013      	movs	r3, r2
 8002dcc:	e7c4      	b.n	8002d58 <_malloc_r+0x74>
 8002dce:	230c      	movs	r3, #12
 8002dd0:	0030      	movs	r0, r6
 8002dd2:	6033      	str	r3, [r6, #0]
 8002dd4:	f000 f810 	bl	8002df8 <__malloc_unlock>
 8002dd8:	e7cb      	b.n	8002d72 <_malloc_r+0x8e>
 8002dda:	6027      	str	r7, [r4, #0]
 8002ddc:	e7d9      	b.n	8002d92 <_malloc_r+0xae>
 8002dde:	605b      	str	r3, [r3, #4]
 8002de0:	deff      	udf	#255	; 0xff
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	200002c4 	.word	0x200002c4

08002de8 <__malloc_lock>:
 8002de8:	b510      	push	{r4, lr}
 8002dea:	4802      	ldr	r0, [pc, #8]	; (8002df4 <__malloc_lock+0xc>)
 8002dec:	f7ff ff0b 	bl	8002c06 <__retarget_lock_acquire_recursive>
 8002df0:	bd10      	pop	{r4, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	200002c0 	.word	0x200002c0

08002df8 <__malloc_unlock>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4802      	ldr	r0, [pc, #8]	; (8002e04 <__malloc_unlock+0xc>)
 8002dfc:	f7ff ff04 	bl	8002c08 <__retarget_lock_release_recursive>
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	200002c0 	.word	0x200002c0

08002e08 <__sflush_r>:
 8002e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e0a:	898b      	ldrh	r3, [r1, #12]
 8002e0c:	0005      	movs	r5, r0
 8002e0e:	000c      	movs	r4, r1
 8002e10:	071a      	lsls	r2, r3, #28
 8002e12:	d45c      	bmi.n	8002ece <__sflush_r+0xc6>
 8002e14:	684a      	ldr	r2, [r1, #4]
 8002e16:	2a00      	cmp	r2, #0
 8002e18:	dc04      	bgt.n	8002e24 <__sflush_r+0x1c>
 8002e1a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002e1c:	2a00      	cmp	r2, #0
 8002e1e:	dc01      	bgt.n	8002e24 <__sflush_r+0x1c>
 8002e20:	2000      	movs	r0, #0
 8002e22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e26:	2f00      	cmp	r7, #0
 8002e28:	d0fa      	beq.n	8002e20 <__sflush_r+0x18>
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2080      	movs	r0, #128	; 0x80
 8002e2e:	682e      	ldr	r6, [r5, #0]
 8002e30:	602a      	str	r2, [r5, #0]
 8002e32:	001a      	movs	r2, r3
 8002e34:	0140      	lsls	r0, r0, #5
 8002e36:	6a21      	ldr	r1, [r4, #32]
 8002e38:	4002      	ands	r2, r0
 8002e3a:	4203      	tst	r3, r0
 8002e3c:	d034      	beq.n	8002ea8 <__sflush_r+0xa0>
 8002e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	075b      	lsls	r3, r3, #29
 8002e44:	d506      	bpl.n	8002e54 <__sflush_r+0x4c>
 8002e46:	6863      	ldr	r3, [r4, #4]
 8002e48:	1ac0      	subs	r0, r0, r3
 8002e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <__sflush_r+0x4c>
 8002e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e52:	1ac0      	subs	r0, r0, r3
 8002e54:	0002      	movs	r2, r0
 8002e56:	2300      	movs	r3, #0
 8002e58:	0028      	movs	r0, r5
 8002e5a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e5c:	6a21      	ldr	r1, [r4, #32]
 8002e5e:	47b8      	blx	r7
 8002e60:	89a2      	ldrh	r2, [r4, #12]
 8002e62:	1c43      	adds	r3, r0, #1
 8002e64:	d106      	bne.n	8002e74 <__sflush_r+0x6c>
 8002e66:	6829      	ldr	r1, [r5, #0]
 8002e68:	291d      	cmp	r1, #29
 8002e6a:	d82c      	bhi.n	8002ec6 <__sflush_r+0xbe>
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <__sflush_r+0x110>)
 8002e6e:	410b      	asrs	r3, r1
 8002e70:	07db      	lsls	r3, r3, #31
 8002e72:	d428      	bmi.n	8002ec6 <__sflush_r+0xbe>
 8002e74:	2300      	movs	r3, #0
 8002e76:	6063      	str	r3, [r4, #4]
 8002e78:	6923      	ldr	r3, [r4, #16]
 8002e7a:	6023      	str	r3, [r4, #0]
 8002e7c:	04d2      	lsls	r2, r2, #19
 8002e7e:	d505      	bpl.n	8002e8c <__sflush_r+0x84>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d102      	bne.n	8002e8a <__sflush_r+0x82>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d100      	bne.n	8002e8c <__sflush_r+0x84>
 8002e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8002e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e8e:	602e      	str	r6, [r5, #0]
 8002e90:	2900      	cmp	r1, #0
 8002e92:	d0c5      	beq.n	8002e20 <__sflush_r+0x18>
 8002e94:	0023      	movs	r3, r4
 8002e96:	3344      	adds	r3, #68	; 0x44
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	d002      	beq.n	8002ea2 <__sflush_r+0x9a>
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	f7ff feb5 	bl	8002c0c <_free_r>
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8002ea6:	e7bc      	b.n	8002e22 <__sflush_r+0x1a>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	0028      	movs	r0, r5
 8002eac:	47b8      	blx	r7
 8002eae:	1c43      	adds	r3, r0, #1
 8002eb0:	d1c6      	bne.n	8002e40 <__sflush_r+0x38>
 8002eb2:	682b      	ldr	r3, [r5, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0c3      	beq.n	8002e40 <__sflush_r+0x38>
 8002eb8:	2b1d      	cmp	r3, #29
 8002eba:	d001      	beq.n	8002ec0 <__sflush_r+0xb8>
 8002ebc:	2b16      	cmp	r3, #22
 8002ebe:	d101      	bne.n	8002ec4 <__sflush_r+0xbc>
 8002ec0:	602e      	str	r6, [r5, #0]
 8002ec2:	e7ad      	b.n	8002e20 <__sflush_r+0x18>
 8002ec4:	89a2      	ldrh	r2, [r4, #12]
 8002ec6:	2340      	movs	r3, #64	; 0x40
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	e7a9      	b.n	8002e22 <__sflush_r+0x1a>
 8002ece:	690e      	ldr	r6, [r1, #16]
 8002ed0:	2e00      	cmp	r6, #0
 8002ed2:	d0a5      	beq.n	8002e20 <__sflush_r+0x18>
 8002ed4:	680f      	ldr	r7, [r1, #0]
 8002ed6:	600e      	str	r6, [r1, #0]
 8002ed8:	1bba      	subs	r2, r7, r6
 8002eda:	9201      	str	r2, [sp, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	079b      	lsls	r3, r3, #30
 8002ee0:	d100      	bne.n	8002ee4 <__sflush_r+0xdc>
 8002ee2:	694a      	ldr	r2, [r1, #20]
 8002ee4:	60a2      	str	r2, [r4, #8]
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dd99      	ble.n	8002e20 <__sflush_r+0x18>
 8002eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eee:	0032      	movs	r2, r6
 8002ef0:	001f      	movs	r7, r3
 8002ef2:	0028      	movs	r0, r5
 8002ef4:	9b01      	ldr	r3, [sp, #4]
 8002ef6:	6a21      	ldr	r1, [r4, #32]
 8002ef8:	47b8      	blx	r7
 8002efa:	2800      	cmp	r0, #0
 8002efc:	dc06      	bgt.n	8002f0c <__sflush_r+0x104>
 8002efe:	2340      	movs	r3, #64	; 0x40
 8002f00:	2001      	movs	r0, #1
 8002f02:	89a2      	ldrh	r2, [r4, #12]
 8002f04:	4240      	negs	r0, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	81a3      	strh	r3, [r4, #12]
 8002f0a:	e78a      	b.n	8002e22 <__sflush_r+0x1a>
 8002f0c:	9b01      	ldr	r3, [sp, #4]
 8002f0e:	1836      	adds	r6, r6, r0
 8002f10:	1a1b      	subs	r3, r3, r0
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	e7e7      	b.n	8002ee6 <__sflush_r+0xde>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	dfbffffe 	.word	0xdfbffffe

08002f1c <_fflush_r>:
 8002f1c:	690b      	ldr	r3, [r1, #16]
 8002f1e:	b570      	push	{r4, r5, r6, lr}
 8002f20:	0005      	movs	r5, r0
 8002f22:	000c      	movs	r4, r1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_fflush_r+0x12>
 8002f28:	2500      	movs	r5, #0
 8002f2a:	0028      	movs	r0, r5
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d004      	beq.n	8002f3c <_fflush_r+0x20>
 8002f32:	6a03      	ldr	r3, [r0, #32]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <_fflush_r+0x20>
 8002f38:	f7ff fc5e 	bl	80027f8 <__sinit>
 8002f3c:	220c      	movs	r2, #12
 8002f3e:	5ea3      	ldrsh	r3, [r4, r2]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f1      	beq.n	8002f28 <_fflush_r+0xc>
 8002f44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f46:	07d2      	lsls	r2, r2, #31
 8002f48:	d404      	bmi.n	8002f54 <_fflush_r+0x38>
 8002f4a:	059b      	lsls	r3, r3, #22
 8002f4c:	d402      	bmi.n	8002f54 <_fflush_r+0x38>
 8002f4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f50:	f7ff fe59 	bl	8002c06 <__retarget_lock_acquire_recursive>
 8002f54:	0028      	movs	r0, r5
 8002f56:	0021      	movs	r1, r4
 8002f58:	f7ff ff56 	bl	8002e08 <__sflush_r>
 8002f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f5e:	0005      	movs	r5, r0
 8002f60:	07db      	lsls	r3, r3, #31
 8002f62:	d4e2      	bmi.n	8002f2a <_fflush_r+0xe>
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	059b      	lsls	r3, r3, #22
 8002f68:	d4df      	bmi.n	8002f2a <_fflush_r+0xe>
 8002f6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f6c:	f7ff fe4c 	bl	8002c08 <__retarget_lock_release_recursive>
 8002f70:	e7db      	b.n	8002f2a <_fflush_r+0xe>
	...

08002f74 <__swhatbuf_r>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	000e      	movs	r6, r1
 8002f78:	001d      	movs	r5, r3
 8002f7a:	230e      	movs	r3, #14
 8002f7c:	5ec9      	ldrsh	r1, [r1, r3]
 8002f7e:	0014      	movs	r4, r2
 8002f80:	b096      	sub	sp, #88	; 0x58
 8002f82:	2900      	cmp	r1, #0
 8002f84:	da0c      	bge.n	8002fa0 <__swhatbuf_r+0x2c>
 8002f86:	89b2      	ldrh	r2, [r6, #12]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	0011      	movs	r1, r2
 8002f8c:	4019      	ands	r1, r3
 8002f8e:	421a      	tst	r2, r3
 8002f90:	d013      	beq.n	8002fba <__swhatbuf_r+0x46>
 8002f92:	2100      	movs	r1, #0
 8002f94:	3b40      	subs	r3, #64	; 0x40
 8002f96:	2000      	movs	r0, #0
 8002f98:	6029      	str	r1, [r5, #0]
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	b016      	add	sp, #88	; 0x58
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	466a      	mov	r2, sp
 8002fa2:	f000 f84d 	bl	8003040 <_fstat_r>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	dbed      	blt.n	8002f86 <__swhatbuf_r+0x12>
 8002faa:	23f0      	movs	r3, #240	; 0xf0
 8002fac:	9901      	ldr	r1, [sp, #4]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	4019      	ands	r1, r3
 8002fb2:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <__swhatbuf_r+0x4c>)
 8002fb4:	18c9      	adds	r1, r1, r3
 8002fb6:	424b      	negs	r3, r1
 8002fb8:	4159      	adcs	r1, r3
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	e7ea      	b.n	8002f96 <__swhatbuf_r+0x22>
 8002fc0:	ffffe000 	.word	0xffffe000

08002fc4 <__smakebuf_r>:
 8002fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fc6:	2602      	movs	r6, #2
 8002fc8:	898b      	ldrh	r3, [r1, #12]
 8002fca:	0005      	movs	r5, r0
 8002fcc:	000c      	movs	r4, r1
 8002fce:	4233      	tst	r3, r6
 8002fd0:	d006      	beq.n	8002fe0 <__smakebuf_r+0x1c>
 8002fd2:	0023      	movs	r3, r4
 8002fd4:	3347      	adds	r3, #71	; 0x47
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	6123      	str	r3, [r4, #16]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6163      	str	r3, [r4, #20]
 8002fde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002fe0:	466a      	mov	r2, sp
 8002fe2:	ab01      	add	r3, sp, #4
 8002fe4:	f7ff ffc6 	bl	8002f74 <__swhatbuf_r>
 8002fe8:	9900      	ldr	r1, [sp, #0]
 8002fea:	0007      	movs	r7, r0
 8002fec:	0028      	movs	r0, r5
 8002fee:	f7ff fe79 	bl	8002ce4 <_malloc_r>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d108      	bne.n	8003008 <__smakebuf_r+0x44>
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	5ea3      	ldrsh	r3, [r4, r2]
 8002ffa:	059a      	lsls	r2, r3, #22
 8002ffc:	d4ef      	bmi.n	8002fde <__smakebuf_r+0x1a>
 8002ffe:	2203      	movs	r2, #3
 8003000:	4393      	bics	r3, r2
 8003002:	431e      	orrs	r6, r3
 8003004:	81a6      	strh	r6, [r4, #12]
 8003006:	e7e4      	b.n	8002fd2 <__smakebuf_r+0xe>
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	89a2      	ldrh	r2, [r4, #12]
 800300c:	6020      	str	r0, [r4, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	81a3      	strh	r3, [r4, #12]
 8003012:	9b00      	ldr	r3, [sp, #0]
 8003014:	6120      	str	r0, [r4, #16]
 8003016:	6163      	str	r3, [r4, #20]
 8003018:	9b01      	ldr	r3, [sp, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00c      	beq.n	8003038 <__smakebuf_r+0x74>
 800301e:	0028      	movs	r0, r5
 8003020:	230e      	movs	r3, #14
 8003022:	5ee1      	ldrsh	r1, [r4, r3]
 8003024:	f000 f81e 	bl	8003064 <_isatty_r>
 8003028:	2800      	cmp	r0, #0
 800302a:	d005      	beq.n	8003038 <__smakebuf_r+0x74>
 800302c:	2303      	movs	r3, #3
 800302e:	89a2      	ldrh	r2, [r4, #12]
 8003030:	439a      	bics	r2, r3
 8003032:	3b02      	subs	r3, #2
 8003034:	4313      	orrs	r3, r2
 8003036:	81a3      	strh	r3, [r4, #12]
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	433b      	orrs	r3, r7
 800303c:	81a3      	strh	r3, [r4, #12]
 800303e:	e7ce      	b.n	8002fde <__smakebuf_r+0x1a>

08003040 <_fstat_r>:
 8003040:	2300      	movs	r3, #0
 8003042:	b570      	push	{r4, r5, r6, lr}
 8003044:	4d06      	ldr	r5, [pc, #24]	; (8003060 <_fstat_r+0x20>)
 8003046:	0004      	movs	r4, r0
 8003048:	0008      	movs	r0, r1
 800304a:	0011      	movs	r1, r2
 800304c:	602b      	str	r3, [r5, #0]
 800304e:	f7ff f9c3 	bl	80023d8 <_fstat>
 8003052:	1c43      	adds	r3, r0, #1
 8003054:	d103      	bne.n	800305e <_fstat_r+0x1e>
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d000      	beq.n	800305e <_fstat_r+0x1e>
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	200002bc 	.word	0x200002bc

08003064 <_isatty_r>:
 8003064:	2300      	movs	r3, #0
 8003066:	b570      	push	{r4, r5, r6, lr}
 8003068:	4d06      	ldr	r5, [pc, #24]	; (8003084 <_isatty_r+0x20>)
 800306a:	0004      	movs	r4, r0
 800306c:	0008      	movs	r0, r1
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	f7ff fb14 	bl	800269c <_isatty>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d103      	bne.n	8003080 <_isatty_r+0x1c>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d000      	beq.n	8003080 <_isatty_r+0x1c>
 800307e:	6023      	str	r3, [r4, #0]
 8003080:	bd70      	pop	{r4, r5, r6, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	200002bc 	.word	0x200002bc

08003088 <_sbrk_r>:
 8003088:	2300      	movs	r3, #0
 800308a:	b570      	push	{r4, r5, r6, lr}
 800308c:	4d06      	ldr	r5, [pc, #24]	; (80030a8 <_sbrk_r+0x20>)
 800308e:	0004      	movs	r4, r0
 8003090:	0008      	movs	r0, r1
 8003092:	602b      	str	r3, [r5, #0]
 8003094:	f7fd fba8 	bl	80007e8 <_sbrk>
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	d103      	bne.n	80030a4 <_sbrk_r+0x1c>
 800309c:	682b      	ldr	r3, [r5, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d000      	beq.n	80030a4 <_sbrk_r+0x1c>
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	bd70      	pop	{r4, r5, r6, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	200002bc 	.word	0x200002bc

080030ac <_init>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr

080030b8 <_fini>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr
