
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003580  08003580  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003588  08003588  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08003600  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08003600  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076dc  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001809  00000000  00000000  000277b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00028fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067a  00000000  00000000  00029850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001462a  00000000  00000000  00029eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009261  00000000  00000000  0003e4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f794  00000000  00000000  00047755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002654  00000000  00000000  000c6eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c9540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003390 	.word	0x08003390

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003390 	.word	0x08003390

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#if SEMIHOSTING_MODE == 1
		initialise_monitor_handles();
 80004be:	f002 fc67 	bl	8002d90 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fdc7 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f84b 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f8fb 	bl	80006c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ce:	f000 f8a3 	bl	8000618 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <main+0x98>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fec5 	bl	8002264 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	481d      	ldr	r0, [pc, #116]	; (8000554 <main+0x9c>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	0019      	movs	r1, r3
 80004e4:	f001 f89f 	bl	8001626 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4819      	ldr	r0, [pc, #100]	; (8000554 <main+0x9c>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	0019      	movs	r1, r3
 80004f2:	f001 f898 	bl	8001626 <HAL_GPIO_WritePin>


  uint8_t tempHour[] = "0000";
 80004f6:	003b      	movs	r3, r7
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <main+0xa0>)
 80004fa:	6811      	ldr	r1, [r2, #0]
 80004fc:	6019      	str	r1, [r3, #0]
 80004fe:	7912      	ldrb	r2, [r2, #4]
 8000500:	711a      	strb	r2, [r3, #4]
  for (uint8_t i = 0; i<sizeof(tempHour); i++)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	e011      	b.n	800052e <main+0x76>
  {
	  tempHour[i] = char2segments(tempHour[i]);
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	003a      	movs	r2, r7
 8000510:	5cd2      	ldrb	r2, [r2, r3]
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	781c      	ldrb	r4, [r3, #0]
 8000516:	0010      	movs	r0, r2
 8000518:	f000 fc5c 	bl	8000dd4 <char2segments>
 800051c:	0003      	movs	r3, r0
 800051e:	001a      	movs	r2, r3
 8000520:	003b      	movs	r3, r7
 8000522:	551a      	strb	r2, [r3, r4]
  for (uint8_t i = 0; i<sizeof(tempHour); i++)
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	3201      	adds	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b04      	cmp	r3, #4
 8000534:	d9e9      	bls.n	800050a <main+0x52>
  }
  tm1637_DisplayHandle(7, tempHour);
 8000536:	003b      	movs	r3, r7
 8000538:	0019      	movs	r1, r3
 800053a:	2007      	movs	r0, #7
 800053c:	f000 fbb2 	bl	8000ca4 <tm1637_DisplayHandle>
  setTime(&ourClock, 23, 59);
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <main+0xa4>)
 8000542:	223b      	movs	r2, #59	; 0x3b
 8000544:	2117      	movs	r1, #23
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fcbc 	bl	8000ec4 <setTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x94>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	2000008c 	.word	0x2000008c
 8000554:	50000400 	.word	0x50000400
 8000558:	080033a8 	.word	0x080033a8
 800055c:	200000cc 	.word	0x200000cc

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b095      	sub	sp, #84	; 0x54
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	2418      	movs	r4, #24
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	2338      	movs	r3, #56	; 0x38
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f002 fd79 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	0018      	movs	r0, r3
 800057a:	2314      	movs	r3, #20
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f002 fd72 	bl	8003068 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xb0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <SystemClock_Config+0xb4>)
 800058a:	401a      	ands	r2, r3
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xb0>)
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0109      	lsls	r1, r1, #4
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000596:	0021      	movs	r1, r4
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2202      	movs	r2, #2
 800059c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2201      	movs	r2, #1
 80005a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2210      	movs	r2, #16
 80005a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2202      	movs	r2, #2
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	02d2      	lsls	r2, r2, #11
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	03d2      	lsls	r2, r2, #15
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 f849 	bl	8001660 <HAL_RCC_OscConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005d2:	f000 f92f 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	220f      	movs	r2, #15
 80005da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2203      	movs	r2, #3
 80005e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2101      	movs	r1, #1
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fc05 	bl	8001e08 <HAL_RCC_ClockConfig>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000602:	f000 f917 	bl	8000834 <Error_Handler>
  }
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b015      	add	sp, #84	; 0x54
 800060c:	bd90      	pop	{r4, r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40007000 	.word	0x40007000
 8000614:	ffffe7ff 	.word	0xffffe7ff

08000618 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	2308      	movs	r3, #8
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	0018      	movs	r0, r3
 8000624:	2310      	movs	r3, #16
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f002 fd1d 	bl	8003068 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062e:	003b      	movs	r3, r7
 8000630:	0018      	movs	r0, r3
 8000632:	2308      	movs	r3, #8
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f002 fd16 	bl	8003068 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_TIM2_Init+0xa4>)
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	05d2      	lsls	r2, r2, #23
 8000642:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_TIM2_Init+0xa4>)
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MX_TIM2_Init+0xa8>)
 8000648:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_TIM2_Init+0xa4>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_TIM2_Init+0xa4>)
 8000652:	22fa      	movs	r2, #250	; 0xfa
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_TIM2_Init+0xa4>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_TIM2_Init+0xa4>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_TIM2_Init+0xa4>)
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fdbc 	bl	80021e4 <HAL_TIM_Base_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 f8e0 	bl	8000834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	2108      	movs	r1, #8
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	0152      	lsls	r2, r2, #5
 800067c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067e:	187a      	adds	r2, r7, r1
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_TIM2_Init+0xa4>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f001 ff27 	bl	80024d8 <HAL_TIM_ConfigClockSource>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800068e:	f000 f8d1 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069e:	003a      	movs	r2, r7
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_TIM2_Init+0xa4>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 f903 	bl	80028b0 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006ae:	f000 f8c1 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b006      	add	sp, #24
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	00007cff 	.word	0x00007cff

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b08b      	sub	sp, #44	; 0x2c
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	2414      	movs	r4, #20
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	2314      	movs	r3, #20
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f002 fcc7 	bl	8003068 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b48      	ldr	r3, [pc, #288]	; (80007fc <MX_GPIO_Init+0x138>)
 80006dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006de:	4b47      	ldr	r3, [pc, #284]	; (80007fc <MX_GPIO_Init+0x138>)
 80006e0:	2104      	movs	r1, #4
 80006e2:	430a      	orrs	r2, r1
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006e6:	4b45      	ldr	r3, [pc, #276]	; (80007fc <MX_GPIO_Init+0x138>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	2204      	movs	r2, #4
 80006ec:	4013      	ands	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4b42      	ldr	r3, [pc, #264]	; (80007fc <MX_GPIO_Init+0x138>)
 80006f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <MX_GPIO_Init+0x138>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	430a      	orrs	r2, r1
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <MX_GPIO_Init+0x138>)
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	4013      	ands	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <MX_GPIO_Init+0x138>)
 800070c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <MX_GPIO_Init+0x138>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
 8000716:	4b39      	ldr	r3, [pc, #228]	; (80007fc <MX_GPIO_Init+0x138>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b36      	ldr	r3, [pc, #216]	; (80007fc <MX_GPIO_Init+0x138>)
 8000724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000726:	4b35      	ldr	r3, [pc, #212]	; (80007fc <MX_GPIO_Init+0x138>)
 8000728:	2102      	movs	r1, #2
 800072a:	430a      	orrs	r2, r1
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
 800072e:	4b33      	ldr	r3, [pc, #204]	; (80007fc <MX_GPIO_Init+0x138>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	2202      	movs	r2, #2
 8000734:	4013      	ands	r3, r2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	0018      	movs	r0, r3
 8000744:	f000 ff6f 	bl	8001626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCLK_Pin|SDO_Pin, GPIO_PIN_RESET);
 8000748:	23c0      	movs	r3, #192	; 0xc0
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <MX_GPIO_Init+0x13c>)
 800074e:	2200      	movs	r2, #0
 8000750:	0019      	movs	r1, r3
 8000752:	f000 ff68 	bl	8001626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0192      	lsls	r2, r2, #6
 800075c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2284      	movs	r2, #132	; 0x84
 8000762:	0392      	lsls	r2, r2, #14
 8000764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	193b      	adds	r3, r7, r4
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_GPIO_Init+0x140>)
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f000 fdbc 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2202      	movs	r2, #2
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2203      	movs	r2, #3
 800078e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2204      	movs	r2, #4
 8000794:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	193a      	adds	r2, r7, r4
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fda6 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2220      	movs	r2, #32
 80007a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2201      	movs	r2, #1
 80007ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007bc:	193a      	adds	r2, r7, r4
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fd93 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|SDO_Pin;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	22c0      	movs	r2, #192	; 0xc0
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <MX_GPIO_Init+0x13c>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f000 fd7f 	bl	80012f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b00b      	add	sp, #44	; 0x2c
 80007f8:	bd90      	pop	{r4, r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000
 8000800:	50000400 	.word	0x50000400
 8000804:	50000800 	.word	0x50000800

08000808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	updateTime(&ourClock);
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fb86 	bl	8000f24 <updateTime>
	tm1637_DisplayHandle(7, ourClock.timeToShow);
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800081a:	0019      	movs	r1, r3
 800081c:	2007      	movs	r0, #7
 800081e:	f000 fa41 	bl	8000ca4 <tm1637_DisplayHandle>
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	200000cc 	.word	0x200000cc
 8000830:	200000d2 	.word	0x200000d2

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <HAL_MspInit+0x24>)
 8000846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x24>)
 800084a:	2101      	movs	r1, #1
 800084c:	430a      	orrs	r2, r1
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <HAL_MspInit+0x24>)
 8000852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_MspInit+0x24>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0549      	lsls	r1, r1, #21
 800085a:	430a      	orrs	r2, r1
 800085c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	429a      	cmp	r2, r3
 800087a:	d10d      	bne.n	8000898 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_TIM_Base_MspInit+0x38>)
 800087e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <HAL_TIM_Base_MspInit+0x38>)
 8000882:	2101      	movs	r1, #1
 8000884:	430a      	orrs	r2, r1
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	200f      	movs	r0, #15
 800088e:	f000 fcfd 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 fd0f 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 fc18 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <TIM2_IRQHandler+0x14>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fd14 	bl	8002308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	2000008c 	.word	0x2000008c

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008fc:	f7ff fff6 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 fbfb 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092a:	f7ff fdc5 	bl	80004b8 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
   ldr   r0, =_estack
 8000930:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800093c:	08003590 	.word	0x08003590
  ldr r2, =_sbss
 8000940:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000944:	200002d0 	.word	0x200002d0

08000948 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_COMP_IRQHandler>
	...

0800094c <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <tm1637_CLKhigh+0x34>)
 8000956:	2201      	movs	r2, #1
 8000958:	0019      	movs	r1, r3
 800095a:	f000 fe64 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <tm1637_CLKhigh+0x34>)
 8000964:	2201      	movs	r2, #1
 8000966:	0019      	movs	r1, r3
 8000968:	f000 fe5d 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <tm1637_CLKhigh+0x34>)
 8000972:	2201      	movs	r2, #1
 8000974:	0019      	movs	r1, r3
 8000976:	f000 fe56 	bl	8001626 <HAL_GPIO_WritePin>
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	50000400 	.word	0x50000400

08000984 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <tm1637_CLKlow+0x34>)
 800098e:	2200      	movs	r2, #0
 8000990:	0019      	movs	r1, r3
 8000992:	f000 fe48 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <tm1637_CLKlow+0x34>)
 800099c:	2200      	movs	r2, #0
 800099e:	0019      	movs	r1, r3
 80009a0:	f000 fe41 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <tm1637_CLKlow+0x34>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	0019      	movs	r1, r3
 80009ae:	f000 fe3a 	bl	8001626 <HAL_GPIO_WritePin>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	50000400 	.word	0x50000400

080009bc <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <tm1637_SDOhigh+0x34>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	0019      	movs	r1, r3
 80009ca:	f000 fe2c 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <tm1637_SDOhigh+0x34>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	0019      	movs	r1, r3
 80009d8:	f000 fe25 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <tm1637_SDOhigh+0x34>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	0019      	movs	r1, r3
 80009e6:	f000 fe1e 	bl	8001626 <HAL_GPIO_WritePin>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	50000400 	.word	0x50000400

080009f4 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	480a      	ldr	r0, [pc, #40]	; (8000a28 <tm1637_SDOlow+0x34>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	0019      	movs	r1, r3
 8000a02:	f000 fe10 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <tm1637_SDOlow+0x34>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	0019      	movs	r1, r3
 8000a10:	f000 fe09 	bl	8001626 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <tm1637_SDOlow+0x34>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	f000 fe02 	bl	8001626 <HAL_GPIO_WritePin>
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	50000400 	.word	0x50000400

08000a2c <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8000a30:	f7ff ff8c 	bl	800094c <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8000a34:	f7ff ffc2 	bl	80009bc <tm1637_SDOhigh>
	tm1637_SDOlow();
 8000a38:	f7ff ffdc 	bl	80009f4 <tm1637_SDOlow>

	tm1637_CLKlow();
 8000a3c:	f7ff ffa2 	bl	8000984 <tm1637_CLKlow>
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 8000a4a:	f7ff ff9b 	bl	8000984 <tm1637_CLKlow>
	tm1637_SDOlow();
 8000a4e:	f7ff ffd1 	bl	80009f4 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8000a52:	f7ff ff7b 	bl	800094c <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8000a56:	f7ff ffb1 	bl	80009bc <tm1637_SDOhigh>
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8000a68:	230f      	movs	r3, #15
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e01a      	b.n	8000aa8 <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8000a72:	f7ff ff87 	bl	8000984 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8000a76:	230f      	movs	r3, #15
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d102      	bne.n	8000a8e <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 8000a88:	f7ff ff98 	bl	80009bc <tm1637_SDOhigh>
 8000a8c:	e001      	b.n	8000a92 <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8000a8e:	f7ff ffb1 	bl	80009f4 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8000a92:	f7ff ff5b 	bl	800094c <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8000a96:	210f      	movs	r1, #15
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	ddde      	ble.n	8000a72 <tm1637_DataOut+0x12>
	} 
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bd80      	pop	{r7, pc}

08000abe <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000ad2:	2317      	movs	r3, #23
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e018      	b.n	8000b0e <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2117      	movs	r1, #23
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	411a      	asrs	r2, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	2201      	movs	r2, #1
 8000aee:	4013      	ands	r3, r2
 8000af0:	1e5a      	subs	r2, r3, #1
 8000af2:	4193      	sbcs	r3, r2
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	0008      	movs	r0, r1
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	0011      	movs	r1, r2
 8000afe:	220c      	movs	r2, #12
 8000b00:	18ba      	adds	r2, r7, r2
 8000b02:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000b04:	183b      	adds	r3, r7, r0
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	183b      	adds	r3, r7, r0
 8000b0a:	3201      	adds	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	2317      	movs	r3, #23
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	d9e1      	bls.n	8000adc <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8000b18:	f7ff ff88 	bl	8000a2c <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ff9d 	bl	8000a60 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000b26:	f7ff ff2d 	bl	8000984 <tm1637_CLKlow>
	tm1637_CLKhigh();
 8000b2a:	f7ff ff0f 	bl	800094c <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8000b2e:	f000 f89f 	bl	8000c70 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	23c0      	movs	r3, #192	; 0xc0
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2bc0      	cmp	r3, #192	; 0xc0
 8000b3e:	d001      	beq.n	8000b44 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8000b40:	f7ff ff81 	bl	8000a46 <tm1637_EndPacket>
	}

}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b006      	add	sp, #24
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	000a      	movs	r2, r1
 8000b56:	1cfb      	adds	r3, r7, #3
 8000b58:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 8000b66:	2317      	movs	r3, #23
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e037      	b.n	8000be0 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8000b70:	2316      	movs	r3, #22
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e01c      	b.n	8000bb4 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8000b7a:	2317      	movs	r3, #23
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	18d3      	adds	r3, r2, r3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	2116      	movs	r1, #22
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	411a      	asrs	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	2201      	movs	r2, #1
 8000b94:	4013      	ands	r3, r2
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	4193      	sbcs	r3, r2
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	0008      	movs	r0, r1
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	220c      	movs	r2, #12
 8000ba6:	18ba      	adds	r2, r7, r2
 8000ba8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 8000baa:	183b      	adds	r3, r7, r0
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	183b      	adds	r3, r7, r0
 8000bb0:	3201      	adds	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	2316      	movs	r3, #22
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b07      	cmp	r3, #7
 8000bbc:	d9dd      	bls.n	8000b7a <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff ff4c 	bl	8000a60 <tm1637_DataOut>
		tm1637_CLKlow();
 8000bc8:	f7ff fedc 	bl	8000984 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8000bcc:	f7ff febe 	bl	800094c <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 8000bd0:	f000 f84e 	bl	8000c70 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 8000bd4:	2117      	movs	r1, #23
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	3201      	adds	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	2317      	movs	r3, #23
 8000be2:	18fa      	adds	r2, r7, r3
 8000be4:	1cfb      	adds	r3, r7, #3
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3c0      	bcc.n	8000b70 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 8000bee:	f7ff ff2a 	bl	8000a46 <tm1637_EndPacket>


}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b006      	add	sp, #24
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8000c08:	240c      	movs	r4, #12
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2314      	movs	r3, #20
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f002 fa28 	bl	8003068 <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 8000c18:	0021      	movs	r1, r4
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	0052      	lsls	r2, r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00b      	beq.n	8000c4e <tm1637_Initialize+0x52>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d114      	bne.n	8000c64 <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <tm1637_Initialize+0x70>)
 8000c44:	0019      	movs	r1, r3
 8000c46:	0010      	movs	r0, r2
 8000c48:	f000 fb52 	bl	80012f0 <HAL_GPIO_Init>
			break;
 8000c4c:	e00a      	b.n	8000c64 <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	210c      	movs	r1, #12
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2201      	movs	r2, #1
 8000c54:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <tm1637_Initialize+0x70>)
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	f000 fb47 	bl	80012f0 <HAL_GPIO_Init>
			break;
 8000c62:	46c0      	nop			; (mov r8, r8)

	}

}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b009      	add	sp, #36	; 0x24
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	50000c00 	.word	0x50000c00

08000c70 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff ffc1 	bl	8000bfc <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 8000c7a:	f7ff fe83 	bl	8000984 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8000c7e:	e002      	b.n	8000c86 <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff ffbb 	bl	8000bfc <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <tm1637_ACKcheck+0x30>)
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	0010      	movs	r0, r2
 8000c90:	f000 fcac 	bl	80015ec <HAL_GPIO_ReadPin>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d1f3      	bne.n	8000c80 <tm1637_ACKcheck+0x10>
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	50000400 	.word	0x50000400

08000ca4 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8000cb2:	210c      	movs	r1, #12
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <tm1637_DisplayHandle+0x78>)
 8000cb8:	7812      	ldrb	r2, [r2, #0]
 8000cba:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8000cbc:	250f      	movs	r5, #15
 8000cbe:	197b      	adds	r3, r7, r5
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b07      	cmp	r3, #7
 8000cca:	d81f      	bhi.n	8000d0c <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2240      	movs	r2, #64	; 0x40
 8000cd0:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8000cd2:	000c      	movs	r4, r1
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fef1 	bl	8000abe <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8000cdc:	0021      	movs	r1, r4
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	22c0      	movs	r2, #192	; 0xc0
 8000ce2:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fee9 	bl	8000abe <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2104      	movs	r1, #4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff2b 	bl	8000b4c <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f810 	bl	8000d20 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8000d00:	197b      	adds	r3, r7, r5
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8000d06:	197b      	adds	r3, r7, r5
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	e002      	b.n	8000d12 <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	781b      	ldrb	r3, [r3, #0]
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	080033b0 	.word	0x080033b0

08000d20 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8000d38:	2316      	movs	r3, #22
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	d83e      	bhi.n	8000dc6 <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	1dfa      	adds	r2, r7, #7
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	2178      	movs	r1, #120	; 0x78
 8000d50:	4249      	negs	r1, r1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8000d56:	2317      	movs	r3, #23
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e017      	b.n	8000d90 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	2117      	movs	r1, #23
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	411a      	asrs	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	4193      	sbcs	r3, r2
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	0008      	movs	r0, r1
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	220c      	movs	r2, #12
 8000d82:	18ba      	adds	r2, r7, r2
 8000d84:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8000d86:	183b      	adds	r3, r7, r0
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	183b      	adds	r3, r7, r0
 8000d8c:	3201      	adds	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	2317      	movs	r3, #23
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b07      	cmp	r3, #7
 8000d98:	d9e2      	bls.n	8000d60 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 8000d9a:	f7ff fe47 	bl	8000a2c <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 8000d9e:	230c      	movs	r3, #12
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fe5c 	bl	8000a60 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000da8:	f7ff fdec 	bl	8000984 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8000dac:	f7ff fdce 	bl	800094c <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8000db0:	f7ff ff5e 	bl	8000c70 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8000db4:	f7ff fe47 	bl	8000a46 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8000db8:	2116      	movs	r1, #22
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	e002      	b.n	8000dcc <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 8000dc6:	2316      	movs	r3, #22
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	781b      	ldrb	r3, [r3, #0]
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b006      	add	sp, #24
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <char2segments>:
		  }

	  }
}

uint8_t char2segments(char c) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	701a      	strb	r2, [r3, #0]
        switch (c) {
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	3b20      	subs	r3, #32
 8000de6:	2b5a      	cmp	r3, #90	; 0x5a
 8000de8:	d900      	bls.n	8000dec <char2segments+0x18>
 8000dea:	e064      	b.n	8000eb6 <char2segments+0xe2>
 8000dec:	009a      	lsls	r2, r3, #2
 8000dee:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <char2segments+0xec>)
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	469f      	mov	pc, r3
			case '0' : return 0x3f;
 8000df6:	233f      	movs	r3, #63	; 0x3f
 8000df8:	e05e      	b.n	8000eb8 <char2segments+0xe4>
			case '1' : return 0x06;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e05c      	b.n	8000eb8 <char2segments+0xe4>
			case '2' : return 0x5b;
 8000dfe:	235b      	movs	r3, #91	; 0x5b
 8000e00:	e05a      	b.n	8000eb8 <char2segments+0xe4>
			case '3' : return 0x4f;
 8000e02:	234f      	movs	r3, #79	; 0x4f
 8000e04:	e058      	b.n	8000eb8 <char2segments+0xe4>
			case '4' : return 0x66;
 8000e06:	2366      	movs	r3, #102	; 0x66
 8000e08:	e056      	b.n	8000eb8 <char2segments+0xe4>
			case '5' : return 0x6d;
 8000e0a:	236d      	movs	r3, #109	; 0x6d
 8000e0c:	e054      	b.n	8000eb8 <char2segments+0xe4>
			case '6' : return 0x7d;
 8000e0e:	237d      	movs	r3, #125	; 0x7d
 8000e10:	e052      	b.n	8000eb8 <char2segments+0xe4>
			case '7' : return 0x07;
 8000e12:	2307      	movs	r3, #7
 8000e14:	e050      	b.n	8000eb8 <char2segments+0xe4>
			case '8' : return 0x7f;
 8000e16:	237f      	movs	r3, #127	; 0x7f
 8000e18:	e04e      	b.n	8000eb8 <char2segments+0xe4>
			case '9' : return 0x6f;
 8000e1a:	236f      	movs	r3, #111	; 0x6f
 8000e1c:	e04c      	b.n	8000eb8 <char2segments+0xe4>
            case '_' : return 0x08;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e04a      	b.n	8000eb8 <char2segments+0xe4>
            case '^' : return 0x01; // ¯
 8000e22:	2301      	movs	r3, #1
 8000e24:	e048      	b.n	8000eb8 <char2segments+0xe4>
            case '-' : return 0x40;
 8000e26:	2340      	movs	r3, #64	; 0x40
 8000e28:	e046      	b.n	8000eb8 <char2segments+0xe4>
            case '*' : return 0x63; // °
 8000e2a:	2363      	movs	r3, #99	; 0x63
 8000e2c:	e044      	b.n	8000eb8 <char2segments+0xe4>
            case ' ' : return 0x00; // space
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e042      	b.n	8000eb8 <char2segments+0xe4>
            case 'A' : return 0x77; // upper case A
 8000e32:	2377      	movs	r3, #119	; 0x77
 8000e34:	e040      	b.n	8000eb8 <char2segments+0xe4>
            case 'a' : return 0x5f; // lower case a
 8000e36:	235f      	movs	r3, #95	; 0x5f
 8000e38:	e03e      	b.n	8000eb8 <char2segments+0xe4>
            case 'B' :              // lower case b
            case 'b' : return 0x7c; // lower case b
 8000e3a:	237c      	movs	r3, #124	; 0x7c
 8000e3c:	e03c      	b.n	8000eb8 <char2segments+0xe4>
            case 'C' : return 0x39; // upper case C
 8000e3e:	2339      	movs	r3, #57	; 0x39
 8000e40:	e03a      	b.n	8000eb8 <char2segments+0xe4>
            case 'c' : return 0x58; // lower case c
 8000e42:	2358      	movs	r3, #88	; 0x58
 8000e44:	e038      	b.n	8000eb8 <char2segments+0xe4>
            case 'D' :              // lower case d
            case 'd' : return 0x5e; // lower case d
 8000e46:	235e      	movs	r3, #94	; 0x5e
 8000e48:	e036      	b.n	8000eb8 <char2segments+0xe4>
            case 'E' :              // upper case E
            case 'e' : return 0x79; // upper case E
 8000e4a:	2379      	movs	r3, #121	; 0x79
 8000e4c:	e034      	b.n	8000eb8 <char2segments+0xe4>
            case 'F' :              // upper case F
            case 'f' : return 0x71; // upper case F
 8000e4e:	2371      	movs	r3, #113	; 0x71
 8000e50:	e032      	b.n	8000eb8 <char2segments+0xe4>
            case 'G' :              // upper case G
            case 'g' : return 0x35; // upper case G
 8000e52:	2335      	movs	r3, #53	; 0x35
 8000e54:	e030      	b.n	8000eb8 <char2segments+0xe4>
            case 'H' : return 0x76; // upper case H
 8000e56:	2376      	movs	r3, #118	; 0x76
 8000e58:	e02e      	b.n	8000eb8 <char2segments+0xe4>
            case 'h' : return 0x74; // lower case h
 8000e5a:	2374      	movs	r3, #116	; 0x74
 8000e5c:	e02c      	b.n	8000eb8 <char2segments+0xe4>
            case 'I' : return 0x06; // 1
 8000e5e:	2306      	movs	r3, #6
 8000e60:	e02a      	b.n	8000eb8 <char2segments+0xe4>
            case 'i' : return 0x04; // lower case i
 8000e62:	2304      	movs	r3, #4
 8000e64:	e028      	b.n	8000eb8 <char2segments+0xe4>
            case 'J' : return 0x1e; // upper case J
 8000e66:	231e      	movs	r3, #30
 8000e68:	e026      	b.n	8000eb8 <char2segments+0xe4>
            case 'j' : return 0x16; // lower case j
 8000e6a:	2316      	movs	r3, #22
 8000e6c:	e024      	b.n	8000eb8 <char2segments+0xe4>
            case 'K' :              // upper case K
            case 'k' : return 0x75; // upper case K
 8000e6e:	2375      	movs	r3, #117	; 0x75
 8000e70:	e022      	b.n	8000eb8 <char2segments+0xe4>
            case 'L' :              // upper case L
            case 'l' : return 0x38; // upper case L
 8000e72:	2338      	movs	r3, #56	; 0x38
 8000e74:	e020      	b.n	8000eb8 <char2segments+0xe4>
            case 'M' :              // twice tall n
            case 'm' : return 0x37; // twice tall ∩
 8000e76:	2337      	movs	r3, #55	; 0x37
 8000e78:	e01e      	b.n	8000eb8 <char2segments+0xe4>
            case 'N' :              // lower case n
            case 'n' : return 0x54; // lower case n
 8000e7a:	2354      	movs	r3, #84	; 0x54
 8000e7c:	e01c      	b.n	8000eb8 <char2segments+0xe4>
            case 'O' :              // lower case o
            case 'o' : return 0x5c; // lower case o
 8000e7e:	235c      	movs	r3, #92	; 0x5c
 8000e80:	e01a      	b.n	8000eb8 <char2segments+0xe4>
            case 'P' :              // upper case P
            case 'p' : return 0x73; // upper case P
 8000e82:	2373      	movs	r3, #115	; 0x73
 8000e84:	e018      	b.n	8000eb8 <char2segments+0xe4>
            case 'Q' : return 0x7b; // upper case Q
 8000e86:	237b      	movs	r3, #123	; 0x7b
 8000e88:	e016      	b.n	8000eb8 <char2segments+0xe4>
            case 'q' : return 0x67; // lower case q
 8000e8a:	2367      	movs	r3, #103	; 0x67
 8000e8c:	e014      	b.n	8000eb8 <char2segments+0xe4>
            case 'R' :              // lower case r
            case 'r' : return 0x50; // lower case r
 8000e8e:	2350      	movs	r3, #80	; 0x50
 8000e90:	e012      	b.n	8000eb8 <char2segments+0xe4>
            case 'S' :              // 5
            case 's' : return 0x6d; // 5
 8000e92:	236d      	movs	r3, #109	; 0x6d
 8000e94:	e010      	b.n	8000eb8 <char2segments+0xe4>
            case 'T' :              // lower case t
            case 't' : return 0x78; // lower case t
 8000e96:	2378      	movs	r3, #120	; 0x78
 8000e98:	e00e      	b.n	8000eb8 <char2segments+0xe4>
            case 'U' :              // lower case u
            case 'u' : return 0x1c; // lower case u
 8000e9a:	231c      	movs	r3, #28
 8000e9c:	e00c      	b.n	8000eb8 <char2segments+0xe4>
            case 'V' :              // twice tall u
            case 'v' : return 0x3e; // twice tall u
 8000e9e:	233e      	movs	r3, #62	; 0x3e
 8000ea0:	e00a      	b.n	8000eb8 <char2segments+0xe4>
            case 'W' : return 0x7e; // upside down A
 8000ea2:	237e      	movs	r3, #126	; 0x7e
 8000ea4:	e008      	b.n	8000eb8 <char2segments+0xe4>
            case 'w' : return 0x2a; // separated w
 8000ea6:	232a      	movs	r3, #42	; 0x2a
 8000ea8:	e006      	b.n	8000eb8 <char2segments+0xe4>
            case 'X' :              // upper case H
            case 'x' : return 0x76; // upper case H
 8000eaa:	2376      	movs	r3, #118	; 0x76
 8000eac:	e004      	b.n	8000eb8 <char2segments+0xe4>
            case 'Y' :              // lower case y
            case 'y' : return 0x6e; // lower case y
 8000eae:	236e      	movs	r3, #110	; 0x6e
 8000eb0:	e002      	b.n	8000eb8 <char2segments+0xe4>
            case 'Z' :              // separated Z
            case 'z' : return 0x1b; // separated Z
 8000eb2:	231b      	movs	r3, #27
 8000eb4:	e000      	b.n	8000eb8 <char2segments+0xe4>
        }
        return 0;
 8000eb6:	2300      	movs	r3, #0
    }
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	080033d0 	.word	0x080033d0

08000ec4 <setTime>:
 */
#include <stdint.h>
#include "clock.h"

void setTime(struct Clock * myClock, uint8_t newHour, uint8_t newMinutes)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	0008      	movs	r0, r1
 8000ece:	0011      	movs	r1, r2
 8000ed0:	1cfb      	adds	r3, r7, #3
 8000ed2:	1c02      	adds	r2, r0, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	1c0a      	adds	r2, r1, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	(*myClock).hour = newHour;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1cfa      	adds	r2, r7, #3
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	711a      	strb	r2, [r3, #4]
	(*myClock).minutes = newMinutes;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	1cba      	adds	r2, r7, #2
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	715a      	strb	r2, [r3, #5]
	(*myClock).allTimeInSeconds = newHour*HOUR_IN_SECONDS;
 8000eec:	1cfb      	adds	r3, r7, #3
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	011a      	lsls	r2, r3, #4
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	0113      	lsls	r3, r2, #4
 8000efc:	001a      	movs	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	001a      	movs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
	(*myClock).allTimeInSeconds += MINUTE_IN_SECONDS*newMinutes;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	1cbb      	adds	r3, r7, #2
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	0013      	movs	r3, r2
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	18ca      	adds	r2, r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <updateTime>:

void updateTime(struct Clock *myClock)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	(*myClock).allTimeInSeconds++;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
	if((*myClock).allTimeInSeconds == 86400) (*myClock).allTimeInSeconds = 0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a30      	ldr	r2, [pc, #192]	; (8000ffc <updateTime+0xd8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d102      	bne.n	8000f46 <updateTime+0x22>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	(*myClock).hour = (*myClock).allTimeInSeconds / HOUR_IN_SECONDS;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	22e1      	movs	r2, #225	; 0xe1
 8000f4c:	0111      	lsls	r1, r2, #4
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff f8e2 	bl	8000118 <__udivsi3>
 8000f54:	0003      	movs	r3, r0
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	711a      	strb	r2, [r3, #4]
	(*myClock).minutes = ((*myClock).allTimeInSeconds / MINUTE_IN_SECONDS) % MINUTE_IN_SECONDS;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	213c      	movs	r1, #60	; 0x3c
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff f8d8 	bl	8000118 <__udivsi3>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	213c      	movs	r1, #60	; 0x3c
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff f959 	bl	8000224 <__aeabi_uidivmod>
 8000f72:	000b      	movs	r3, r1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	715a      	strb	r2, [r3, #5]
	(*myClock).timeToShow[0] = int2int((*myClock).hour / 10);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	210a      	movs	r1, #10
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff f8c9 	bl	8000118 <__udivsi3>
 8000f86:	0003      	movs	r3, r0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 f838 	bl	8001000 <int2int>
 8000f90:	0003      	movs	r3, r0
 8000f92:	001a      	movs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	719a      	strb	r2, [r3, #6]
	(*myClock).timeToShow[1] = int2int((*myClock).hour % 10);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	210a      	movs	r1, #10
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff f940 	bl	8000224 <__aeabi_uidivmod>
 8000fa4:	000b      	movs	r3, r1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 f829 	bl	8001000 <int2int>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	71da      	strb	r2, [r3, #7]
	(*myClock).timeToShow[2] = int2int((*myClock).minutes / 10);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	795b      	ldrb	r3, [r3, #5]
 8000fba:	210a      	movs	r1, #10
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff f8ab 	bl	8000118 <__udivsi3>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 f81a 	bl	8001000 <int2int>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	001a      	movs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	721a      	strb	r2, [r3, #8]
	(*myClock).timeToShow[3] = int2int((*myClock).minutes % 10);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	795b      	ldrb	r3, [r3, #5]
 8000fd8:	210a      	movs	r1, #10
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff f922 	bl	8000224 <__aeabi_uidivmod>
 8000fe0:	000b      	movs	r3, r1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 f80b 	bl	8001000 <int2int>
 8000fea:	0003      	movs	r3, r0
 8000fec:	001a      	movs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	725a      	strb	r2, [r3, #9]
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	00015180 	.word	0x00015180

08001000 <int2int>:

uint8_t int2int(uint8_t c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	0002      	movs	r2, r0
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	701a      	strb	r2, [r3, #0]
	switch(c)
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d818      	bhi.n	8001046 <int2int+0x46>
 8001014:	009a      	lsls	r2, r3, #2
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <int2int+0x50>)
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 800101e:	233f      	movs	r3, #63	; 0x3f
 8001020:	e012      	b.n	8001048 <int2int+0x48>
		case 1 : return 0x06;
 8001022:	2306      	movs	r3, #6
 8001024:	e010      	b.n	8001048 <int2int+0x48>
		case 2 : return 0x5b;
 8001026:	235b      	movs	r3, #91	; 0x5b
 8001028:	e00e      	b.n	8001048 <int2int+0x48>
		case 3 : return 0x4f;
 800102a:	234f      	movs	r3, #79	; 0x4f
 800102c:	e00c      	b.n	8001048 <int2int+0x48>
		case 4 : return 0x66;
 800102e:	2366      	movs	r3, #102	; 0x66
 8001030:	e00a      	b.n	8001048 <int2int+0x48>
		case 5 : return 0x6d;
 8001032:	236d      	movs	r3, #109	; 0x6d
 8001034:	e008      	b.n	8001048 <int2int+0x48>
		case 6 : return 0x7d;
 8001036:	237d      	movs	r3, #125	; 0x7d
 8001038:	e006      	b.n	8001048 <int2int+0x48>
		case 7 : return 0x07;
 800103a:	2307      	movs	r3, #7
 800103c:	e004      	b.n	8001048 <int2int+0x48>
		case 8 : return 0x7f;
 800103e:	237f      	movs	r3, #127	; 0x7f
 8001040:	e002      	b.n	8001048 <int2int+0x48>
		case 9 : return 0x6f;
 8001042:	236f      	movs	r3, #111	; 0x6f
 8001044:	e000      	b.n	8001048 <int2int+0x48>
	}
	return 0x3f;
 8001046:	233f      	movs	r3, #63	; 0x3f
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800353c 	.word	0x0800353c

08001054 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x3c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_Init+0x3c>)
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f811 	bl	8001094 <HAL_InitTick>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d003      	beq.n	800107e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e001      	b.n	8001082 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107e:	f7ff fbdf 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_InitTick+0x5c>)
 800109e:	681c      	ldr	r4, [r3, #0]
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_InitTick+0x60>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	0019      	movs	r1, r3
 80010a6:	23fa      	movs	r3, #250	; 0xfa
 80010a8:	0098      	lsls	r0, r3, #2
 80010aa:	f7ff f835 	bl	8000118 <__udivsi3>
 80010ae:	0003      	movs	r3, r0
 80010b0:	0019      	movs	r1, r3
 80010b2:	0020      	movs	r0, r4
 80010b4:	f7ff f830 	bl	8000118 <__udivsi3>
 80010b8:	0003      	movs	r3, r0
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 f90b 	bl	80012d6 <HAL_SYSTICK_Config>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e00f      	b.n	80010e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d80b      	bhi.n	80010e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	2301      	movs	r3, #1
 80010d2:	425b      	negs	r3, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 f8d8 	bl	800128c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_InitTick+0x64>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b003      	add	sp, #12
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x1c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	001a      	movs	r2, r3
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x20>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	18d2      	adds	r2, r2, r3
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_IncTick+0x20>)
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000008 	.word	0x20000008
 800111c:	200000d8 	.word	0x200000d8

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <HAL_GetTick+0x10>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	200000d8 	.word	0x200000d8

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	0002      	movs	r2, r0
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b7f      	cmp	r3, #127	; 0x7f
 8001146:	d809      	bhi.n	800115c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	001a      	movs	r2, r3
 800114e:	231f      	movs	r3, #31
 8001150:	401a      	ands	r2, r3
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_EnableIRQ+0x30>)
 8001154:	2101      	movs	r1, #1
 8001156:	4091      	lsls	r1, r2
 8001158:	000a      	movs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
  }
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	0002      	movs	r2, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b7f      	cmp	r3, #127	; 0x7f
 800117c:	d828      	bhi.n	80011d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117e:	4a2f      	ldr	r2, [pc, #188]	; (800123c <__NVIC_SetPriority+0xd4>)
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b25b      	sxtb	r3, r3
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	33c0      	adds	r3, #192	; 0xc0
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	589b      	ldr	r3, [r3, r2]
 800118e:	1dfa      	adds	r2, r7, #7
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	0011      	movs	r1, r2
 8001194:	2203      	movs	r2, #3
 8001196:	400a      	ands	r2, r1
 8001198:	00d2      	lsls	r2, r2, #3
 800119a:	21ff      	movs	r1, #255	; 0xff
 800119c:	4091      	lsls	r1, r2
 800119e:	000a      	movs	r2, r1
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	22ff      	movs	r2, #255	; 0xff
 80011ac:	401a      	ands	r2, r3
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	2303      	movs	r3, #3
 80011b6:	4003      	ands	r3, r0
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011bc:	481f      	ldr	r0, [pc, #124]	; (800123c <__NVIC_SetPriority+0xd4>)
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	430a      	orrs	r2, r1
 80011c8:	33c0      	adds	r3, #192	; 0xc0
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ce:	e031      	b.n	8001234 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <__NVIC_SetPriority+0xd8>)
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	0019      	movs	r1, r3
 80011d8:	230f      	movs	r3, #15
 80011da:	400b      	ands	r3, r1
 80011dc:	3b08      	subs	r3, #8
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3306      	adds	r3, #6
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	18d3      	adds	r3, r2, r3
 80011e6:	3304      	adds	r3, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1dfa      	adds	r2, r7, #7
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	0011      	movs	r1, r2
 80011f0:	2203      	movs	r2, #3
 80011f2:	400a      	ands	r2, r1
 80011f4:	00d2      	lsls	r2, r2, #3
 80011f6:	21ff      	movs	r1, #255	; 0xff
 80011f8:	4091      	lsls	r1, r2
 80011fa:	000a      	movs	r2, r1
 80011fc:	43d2      	mvns	r2, r2
 80011fe:	401a      	ands	r2, r3
 8001200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	019b      	lsls	r3, r3, #6
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	401a      	ands	r2, r3
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	0018      	movs	r0, r3
 8001210:	2303      	movs	r3, #3
 8001212:	4003      	ands	r3, r0
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <__NVIC_SetPriority+0xd8>)
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	001c      	movs	r4, r3
 8001220:	230f      	movs	r3, #15
 8001222:	4023      	ands	r3, r4
 8001224:	3b08      	subs	r3, #8
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	430a      	orrs	r2, r1
 800122a:	3306      	adds	r3, #6
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	18c3      	adds	r3, r0, r3
 8001230:	3304      	adds	r3, #4
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b003      	add	sp, #12
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1e5a      	subs	r2, r3, #1
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	045b      	lsls	r3, r3, #17
 8001254:	429a      	cmp	r2, r3
 8001256:	d301      	bcc.n	800125c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001258:	2301      	movs	r3, #1
 800125a:	e010      	b.n	800127e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <SysTick_Config+0x44>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	3a01      	subs	r2, #1
 8001262:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001264:	2301      	movs	r3, #1
 8001266:	425b      	negs	r3, r3
 8001268:	2103      	movs	r1, #3
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff ff7c 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x44>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x44>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	210f      	movs	r1, #15
 8001298:	187b      	adds	r3, r7, r1
 800129a:	1c02      	adds	r2, r0, #0
 800129c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	0011      	movs	r1, r2
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	0002      	movs	r2, r0
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ff33 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ffaf 	bl	8001244 <SysTick_Config>
 80012e6:	0003      	movs	r3, r0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001306:	e155      	b.n	80015b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d100      	bne.n	8001320 <HAL_GPIO_Init+0x30>
 800131e:	e146      	b.n	80015ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	4013      	ands	r3, r2
 8001328:	2b01      	cmp	r3, #1
 800132a:	d005      	beq.n	8001338 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2203      	movs	r2, #3
 8001332:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001334:	2b02      	cmp	r3, #2
 8001336:	d130      	bne.n	800139a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	409a      	lsls	r2, r3
 8001346:	0013      	movs	r3, r2
 8001348:	43da      	mvns	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	409a      	lsls	r2, r3
 800135a:	0013      	movs	r3, r2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136e:	2201      	movs	r2, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	2201      	movs	r2, #1
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d017      	beq.n	80013d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	4013      	ands	r3, r2
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d123      	bne.n	800142a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	58d3      	ldr	r3, [r2, r3]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2207      	movs	r2, #7
 80013f4:	4013      	ands	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2107      	movs	r1, #7
 800140e:	400b      	ands	r3, r1
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	6939      	ldr	r1, [r7, #16]
 8001428:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2203      	movs	r2, #3
 8001448:	401a      	ands	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	029b      	lsls	r3, r3, #10
 8001466:	4013      	ands	r3, r2
 8001468:	d100      	bne.n	800146c <HAL_GPIO_Init+0x17c>
 800146a:	e0a0      	b.n	80015ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_GPIO_Init+0x2dc>)
 800146e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001470:	4b56      	ldr	r3, [pc, #344]	; (80015cc <HAL_GPIO_Init+0x2dc>)
 8001472:	2101      	movs	r1, #1
 8001474:	430a      	orrs	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001478:	4a55      	ldr	r2, [pc, #340]	; (80015d0 <HAL_GPIO_Init+0x2e0>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	589b      	ldr	r3, [r3, r2]
 8001484:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2203      	movs	r2, #3
 800148a:	4013      	ands	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	23a0      	movs	r3, #160	; 0xa0
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x1f6>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x1f2>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x1ee>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x1ea>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x1e6>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a46      	ldr	r2, [pc, #280]	; (80015e4 <HAL_GPIO_Init+0x2f4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x1e2>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e00a      	b.n	80014e8 <HAL_GPIO_Init+0x1f8>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x1f8>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x1f8>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x1f8>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x1f8>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x1f8>
 80014e6:	2300      	movs	r3, #0
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	2103      	movs	r1, #3
 80014ec:	400a      	ands	r2, r1
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4935      	ldr	r1, [pc, #212]	; (80015d0 <HAL_GPIO_Init+0x2e0>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43da      	mvns	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	035b      	lsls	r3, r3, #13
 800151e:	4013      	ands	r3, r2
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43da      	mvns	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	039b      	lsls	r3, r3, #14
 8001548:	4013      	ands	r3, r2
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	4013      	ands	r3, r2
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	40da      	lsrs	r2, r3
 80015bc:	1e13      	subs	r3, r2, #0
 80015be:	d000      	beq.n	80015c2 <HAL_GPIO_Init+0x2d2>
 80015c0:	e6a2      	b.n	8001308 <HAL_GPIO_Init+0x18>
  }
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b006      	add	sp, #24
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010000 	.word	0x40010000
 80015d4:	50000400 	.word	0x50000400
 80015d8:	50000800 	.word	0x50000800
 80015dc:	50000c00 	.word	0x50000c00
 80015e0:	50001000 	.word	0x50001000
 80015e4:	50001c00 	.word	0x50001c00
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	000a      	movs	r2, r1
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	1cba      	adds	r2, r7, #2
 8001600:	8812      	ldrh	r2, [r2, #0]
 8001602:	4013      	ands	r3, r2
 8001604:	d004      	beq.n	8001610 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001606:	230f      	movs	r3, #15
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e003      	b.n	8001618 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001618:	230f      	movs	r3, #15
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	781b      	ldrb	r3, [r3, #0]
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b004      	add	sp, #16
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	0008      	movs	r0, r1
 8001630:	0011      	movs	r1, r2
 8001632:	1cbb      	adds	r3, r7, #2
 8001634:	1c02      	adds	r2, r0, #0
 8001636:	801a      	strh	r2, [r3, #0]
 8001638:	1c7b      	adds	r3, r7, #1
 800163a:	1c0a      	adds	r2, r1, #0
 800163c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163e:	1c7b      	adds	r3, r7, #1
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	1cbb      	adds	r3, r7, #2
 8001648:	881a      	ldrh	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800164e:	e003      	b.n	8001658 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001650:	1cbb      	adds	r3, r7, #2
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f000 fbbf 	bl	8001df2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001674:	4bc9      	ldr	r3, [pc, #804]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	220c      	movs	r2, #12
 800167a:	4013      	ands	r3, r2
 800167c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167e:	4bc7      	ldr	r3, [pc, #796]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x36>
 8001694:	e07e      	b.n	8001794 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	2b08      	cmp	r3, #8
 800169a:	d007      	beq.n	80016ac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d112      	bne.n	80016c8 <HAL_RCC_OscConfig+0x68>
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	025b      	lsls	r3, r3, #9
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	4bbb      	ldr	r3, [pc, #748]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	029b      	lsls	r3, r3, #10
 80016b4:	4013      	ands	r3, r2
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_OscConfig+0x5a>
 80016b8:	e06b      	b.n	8001792 <HAL_RCC_OscConfig+0x132>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d167      	bne.n	8001792 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f000 fb95 	bl	8001df2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x84>
 80016d4:	4bb1      	ldr	r3, [pc, #708]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4bb0      	ldr	r3, [pc, #704]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0249      	lsls	r1, r1, #9
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e027      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	23a0      	movs	r3, #160	; 0xa0
 80016ea:	02db      	lsls	r3, r3, #11
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d10e      	bne.n	800170e <HAL_RCC_OscConfig+0xae>
 80016f0:	4baa      	ldr	r3, [pc, #680]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4ba9      	ldr	r3, [pc, #676]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	02c9      	lsls	r1, r1, #11
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	4ba7      	ldr	r3, [pc, #668]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4ba6      	ldr	r3, [pc, #664]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0249      	lsls	r1, r1, #9
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e012      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 800170e:	4ba3      	ldr	r3, [pc, #652]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4ba2      	ldr	r3, [pc, #648]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001714:	49a2      	ldr	r1, [pc, #648]	; (80019a0 <HAL_RCC_OscConfig+0x340>)
 8001716:	400a      	ands	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	4ba0      	ldr	r3, [pc, #640]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	4013      	ands	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4b9c      	ldr	r3, [pc, #624]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b9b      	ldr	r3, [pc, #620]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800172e:	499d      	ldr	r1, [pc, #628]	; (80019a4 <HAL_RCC_OscConfig+0x344>)
 8001730:	400a      	ands	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d015      	beq.n	8001768 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fcf0 	bl	8001120 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001744:	e009      	b.n	800175a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001746:	f7ff fceb 	bl	8001120 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d902      	bls.n	800175a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	f000 fb4c 	bl	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175a:	4b90      	ldr	r3, [pc, #576]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	029b      	lsls	r3, r3, #10
 8001762:	4013      	ands	r3, r2
 8001764:	d0ef      	beq.n	8001746 <HAL_RCC_OscConfig+0xe6>
 8001766:	e015      	b.n	8001794 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fcda 	bl	8001120 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001772:	f7ff fcd5 	bl	8001120 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	; 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e336      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001784:	4b85      	ldr	r3, [pc, #532]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	4013      	ands	r3, r2
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x112>
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d100      	bne.n	80017a0 <HAL_RCC_OscConfig+0x140>
 800179e:	e099      	b.n	80018d4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	2220      	movs	r2, #32
 80017aa:	4013      	ands	r3, r2
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80017ae:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b7a      	ldr	r3, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80017b4:	2120      	movs	r1, #32
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	2220      	movs	r2, #32
 80017be:	4393      	bics	r3, r2
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d13e      	bne.n	800184c <HAL_RCC_OscConfig+0x1ec>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d13b      	bne.n	800184c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017d4:	4b71      	ldr	r3, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2204      	movs	r2, #4
 80017da:	4013      	ands	r3, r2
 80017dc:	d004      	beq.n	80017e8 <HAL_RCC_OscConfig+0x188>
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e304      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b6c      	ldr	r3, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4a6e      	ldr	r2, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x348>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	021a      	lsls	r2, r3, #8
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2209      	movs	r2, #9
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800180a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001810:	f000 fc42 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8001814:	0001      	movs	r1, r0
 8001816:	4b61      	ldr	r3, [pc, #388]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	220f      	movs	r2, #15
 800181e:	4013      	ands	r3, r2
 8001820:	4a62      	ldr	r2, [pc, #392]	; (80019ac <HAL_RCC_OscConfig+0x34c>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	000a      	movs	r2, r1
 8001826:	40da      	lsrs	r2, r3
 8001828:	4b61      	ldr	r3, [pc, #388]	; (80019b0 <HAL_RCC_OscConfig+0x350>)
 800182a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800182c:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x354>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2513      	movs	r5, #19
 8001832:	197c      	adds	r4, r7, r5
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff fc2d 	bl	8001094 <HAL_InitTick>
 800183a:	0003      	movs	r3, r0
 800183c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800183e:	197b      	adds	r3, r7, r5
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d046      	beq.n	80018d4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001846:	197b      	adds	r3, r7, r5
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	e2d2      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d027      	beq.n	80018a2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001852:	4b52      	ldr	r3, [pc, #328]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2209      	movs	r2, #9
 8001858:	4393      	bics	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	4b4f      	ldr	r3, [pc, #316]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fc5c 	bl	8001120 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fc57 	bl	8001120 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e2b8      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2204      	movs	r2, #4
 8001886:	4013      	ands	r3, r2
 8001888:	d0f1      	beq.n	800186e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b44      	ldr	r3, [pc, #272]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a46      	ldr	r2, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x348>)
 8001890:	4013      	ands	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	021a      	lsls	r2, r3, #8
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	e018      	b.n	80018d4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	438a      	bics	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fc37 	bl	8001120 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b8:	f7ff fc32 	bl	8001120 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e293      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2204      	movs	r2, #4
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1f1      	bne.n	80018b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2210      	movs	r2, #16
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x280>
 80018de:	e0a2      	b.n	8001a26 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d140      	bne.n	8001968 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x29e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e279      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x358>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	0a19      	lsrs	r1, r3, #8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	061a      	lsls	r2, r3, #24
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	0b5b      	lsrs	r3, r3, #13
 800192c:	3301      	adds	r3, #1
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	0212      	lsls	r2, r2, #8
 8001932:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	210f      	movs	r1, #15
 800193c:	400b      	ands	r3, r1
 800193e:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x34c>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_RCC_OscConfig+0x350>)
 8001946:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_RCC_OscConfig+0x354>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2513      	movs	r5, #19
 800194e:	197c      	adds	r4, r7, r5
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fb9f 	bl	8001094 <HAL_InitTick>
 8001956:	0003      	movs	r3, r0
 8001958:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800195a:	197b      	adds	r3, r7, r5
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d061      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001962:	197b      	adds	r3, r7, r5
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	e244      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d040      	beq.n	80019f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	0049      	lsls	r1, r1, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fbcf 	bl	8001120 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001986:	e019      	b.n	80019bc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001988:	f7ff fbca 	bl	8001120 <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d912      	bls.n	80019bc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e22b      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40021000 	.word	0x40021000
 80019a0:	fffeffff 	.word	0xfffeffff
 80019a4:	fffbffff 	.word	0xfffbffff
 80019a8:	ffffe0ff 	.word	0xffffe0ff
 80019ac:	080033b4 	.word	0x080033b4
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004
 80019b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019bc:	4bca      	ldr	r3, [pc, #808]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d0df      	beq.n	8001988 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c8:	4bc7      	ldr	r3, [pc, #796]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4ac7      	ldr	r2, [pc, #796]	; (8001cec <HAL_RCC_OscConfig+0x68c>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d6:	4bc4      	ldr	r3, [pc, #784]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019dc:	4bc2      	ldr	r3, [pc, #776]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	0a19      	lsrs	r1, r3, #8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	061a      	lsls	r2, r3, #24
 80019ea:	4bbf      	ldr	r3, [pc, #764]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	e019      	b.n	8001a26 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019f2:	4bbd      	ldr	r3, [pc, #756]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4bbc      	ldr	r3, [pc, #752]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 80019f8:	49bd      	ldr	r1, [pc, #756]	; (8001cf0 <HAL_RCC_OscConfig+0x690>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fb8f 	bl	8001120 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb8a 	bl	8001120 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1eb      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a1a:	4bb3      	ldr	r3, [pc, #716]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d036      	beq.n	8001a9e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d019      	beq.n	8001a6c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a38:	4bab      	ldr	r3, [pc, #684]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001a3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a3c:	4baa      	ldr	r3, [pc, #680]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fb6c 	bl	8001120 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff fb67 	bl	8001120 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1c8      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a60:	4ba1      	ldr	r3, [pc, #644]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d0f1      	beq.n	8001a4e <HAL_RCC_OscConfig+0x3ee>
 8001a6a:	e018      	b.n	8001a9e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001a6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a70:	4b9d      	ldr	r3, [pc, #628]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	438a      	bics	r2, r1
 8001a76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fb52 	bl	8001120 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff fb4d 	bl	8001120 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1ae      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a94:	4b94      	ldr	r3, [pc, #592]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d1f1      	bne.n	8001a82 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 8001aa8:	e0ae      	b.n	8001c08 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2023      	movs	r0, #35	; 0x23
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b8d      	ldr	r3, [pc, #564]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	055b      	lsls	r3, r3, #21
 8001aba:	4013      	ands	r3, r2
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b8a      	ldr	r3, [pc, #552]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ac2:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	0549      	lsls	r1, r1, #21
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001acc:	183b      	adds	r3, r7, r0
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <HAL_RCC_OscConfig+0x694>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d11a      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b85      	ldr	r3, [pc, #532]	; (8001cf4 <HAL_RCC_OscConfig+0x694>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b84      	ldr	r3, [pc, #528]	; (8001cf4 <HAL_RCC_OscConfig+0x694>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0049      	lsls	r1, r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fb18 	bl	8001120 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff fb13 	bl	8001120 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e174      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b7a      	ldr	r3, [pc, #488]	; (8001cf4 <HAL_RCC_OscConfig+0x694>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4d0>
 8001b20:	4b71      	ldr	r3, [pc, #452]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	0049      	lsls	r1, r1, #1
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b2e:	e031      	b.n	8001b94 <HAL_RCC_OscConfig+0x534>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4f2>
 8001b38:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b3e:	496c      	ldr	r1, [pc, #432]	; (8001cf0 <HAL_RCC_OscConfig+0x690>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	651a      	str	r2, [r3, #80]	; 0x50
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b48:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b4a:	496b      	ldr	r1, [pc, #428]	; (8001cf8 <HAL_RCC_OscConfig+0x698>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b50:	e020      	b.n	8001b94 <HAL_RCC_OscConfig+0x534>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	23a0      	movs	r3, #160	; 0xa0
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d10e      	bne.n	8001b7c <HAL_RCC_OscConfig+0x51c>
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b62:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	00c9      	lsls	r1, r1, #3
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b70:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0049      	lsls	r1, r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	651a      	str	r2, [r3, #80]	; 0x50
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0x534>
 8001b7c:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b82:	495b      	ldr	r1, [pc, #364]	; (8001cf0 <HAL_RCC_OscConfig+0x690>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50
 8001b88:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b8c:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001b8e:	495a      	ldr	r1, [pc, #360]	; (8001cf8 <HAL_RCC_OscConfig+0x698>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d015      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fac0 	bl	8001120 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fabb 	bl	8001120 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_RCC_OscConfig+0x69c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e11b      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d0ef      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x546>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff faaa 	bl	8001120 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bd0:	e009      	b.n	8001be6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff faa5 	bl	8001120 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <HAL_RCC_OscConfig+0x69c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e105      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001be6:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001be8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d1ef      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bf2:	2323      	movs	r3, #35	; 0x23
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c00:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c02:	493f      	ldr	r1, [pc, #252]	; (8001d00 <HAL_RCC_OscConfig+0x6a0>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d049      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d026      	beq.n	8001c68 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
 8001c32:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x6a4>)
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_RCC_OscConfig+0x6a4>)
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0189      	lsls	r1, r1, #6
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa6e 	bl	8001120 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4a:	f7ff fa69 	bl	8001120 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0ca      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0f1      	beq.n	8001c4a <HAL_RCC_OscConfig+0x5ea>
 8001c66:	e01e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_RCC_OscConfig+0x6a4>)
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_RCC_OscConfig+0x6a4>)
 8001c7a:	4923      	ldr	r1, [pc, #140]	; (8001d08 <HAL_RCC_OscConfig+0x6a8>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa4e 	bl	8001120 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8a:	f7ff fa49 	bl	8001120 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0aa      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d1f1      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d100      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x650>
 8001cae:	e09f      	b.n	8001df0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d100      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x658>
 8001cb6:	e078      	b.n	8001daa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d159      	bne.n	8001d74 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_RCC_OscConfig+0x688>)
 8001cc6:	4911      	ldr	r1, [pc, #68]	; (8001d0c <HAL_RCC_OscConfig+0x6ac>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fa28 	bl	8001120 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cd4:	e01c      	b.n	8001d10 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff fa23 	bl	8001120 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d915      	bls.n	8001d10 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e084      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	ffff1fff 	.word	0xffff1fff
 8001cf0:	fffffeff 	.word	0xfffffeff
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	fffffbff 	.word	0xfffffbff
 8001cfc:	00001388 	.word	0x00001388
 8001d00:	efffffff 	.word	0xefffffff
 8001d04:	40010000 	.word	0x40010000
 8001d08:	ffffdfff 	.word	0xffffdfff
 8001d0c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	049b      	lsls	r3, r3, #18
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d1dc      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1c:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a37      	ldr	r2, [pc, #220]	; (8001e00 <HAL_RCC_OscConfig+0x7a0>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	431a      	orrs	r2, r3
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0449      	lsls	r1, r1, #17
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7ff f9e9 	bl	8001120 <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f9e4 	bl	8001120 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e045      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	049b      	lsls	r3, r3, #18
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x6f4>
 8001d72:	e03d      	b.n	8001df0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d7a:	4922      	ldr	r1, [pc, #136]	; (8001e04 <HAL_RCC_OscConfig+0x7a4>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff f9ce 	bl	8001120 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7ff f9c9 	bl	8001120 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e02a      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	049b      	lsls	r3, r3, #18
 8001da4:	4013      	ands	r3, r2
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x72a>
 8001da8:	e022      	b.n	8001df0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e01d      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_OscConfig+0x79c>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	025b      	lsls	r3, r3, #9
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d10f      	bne.n	8001dec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	23f0      	movs	r3, #240	; 0xf0
 8001dd0:	039b      	lsls	r3, r3, #14
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	23c0      	movs	r3, #192	; 0xc0
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b00a      	add	sp, #40	; 0x28
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	ff02ffff 	.word	0xff02ffff
 8001e04:	feffffff 	.word	0xfeffffff

08001e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e128      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b96      	ldr	r3, [pc, #600]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4013      	ands	r3, r2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d91e      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b93      	ldr	r3, [pc, #588]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4393      	bics	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	4b90      	ldr	r3, [pc, #576]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e3c:	f7ff f970 	bl	8001120 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7ff f96b 	bl	8001120 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a8a      	ldr	r2, [pc, #552]	; (800207c <HAL_RCC_ClockConfig+0x274>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e109      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b87      	ldr	r3, [pc, #540]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	4b83      	ldr	r3, [pc, #524]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	22f0      	movs	r2, #240	; 0xf0
 8001e78:	4393      	bics	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d100      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x8a>
 8001e90:	e089      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e9a:	4b79      	ldr	r3, [pc, #484]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d120      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0e1      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	049b      	lsls	r3, r3, #18
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d114      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0d5      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eca:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d109      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0ca      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ed8:	4b69      	ldr	r3, [pc, #420]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0c2      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee8:	4b65      	ldr	r3, [pc, #404]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2203      	movs	r2, #3
 8001eee:	4393      	bics	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7ff f910 	bl	8001120 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d111      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0c:	e009      	b.n	8001f22 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7ff f907 	bl	8001120 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_RCC_ClockConfig+0x274>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0a5      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d1ef      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x106>
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d111      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	e009      	b.n	8001f4e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7ff f8f1 	bl	8001120 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a4d      	ldr	r2, [pc, #308]	; (800207c <HAL_RCC_ClockConfig+0x274>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e08f      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	220c      	movs	r2, #12
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d1ef      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x132>
 8001f5a:	e024      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d11b      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f64:	e009      	b.n	8001f7a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f66:	f7ff f8db 	bl	8001120 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	4a42      	ldr	r2, [pc, #264]	; (800207c <HAL_RCC_ClockConfig+0x274>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e079      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	220c      	movs	r2, #12
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d1ef      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x15e>
 8001f86:	e00e      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff f8ca 	bl	8001120 <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	4a3a      	ldr	r2, [pc, #232]	; (800207c <HAL_RCC_ClockConfig+0x274>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e068      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f9c:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d21e      	bcs.n	8001ff2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fc6:	f7ff f8ab 	bl	8001120 <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	e009      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7ff f8a6 	bl	8001120 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_RCC_ClockConfig+0x274>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e044      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_ClockConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d1ee      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a20      	ldr	r2, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x27c>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2208      	movs	r2, #8
 8002016:	4013      	ands	r3, r2
 8002018:	d00a      	beq.n	8002030 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_RCC_ClockConfig+0x280>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00da      	lsls	r2, r3, #3
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002030:	f000 f832 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002034:	0001      	movs	r1, r0
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x278>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	220f      	movs	r2, #15
 800203e:	4013      	ands	r3, r2
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x284>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	000a      	movs	r2, r1
 8002046:	40da      	lsrs	r2, r3
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_ClockConfig+0x288>)
 800204a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_ClockConfig+0x28c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	250b      	movs	r5, #11
 8002052:	197c      	adds	r4, r7, r5
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff f81d 	bl	8001094 <HAL_InitTick>
 800205a:	0003      	movs	r3, r0
 800205c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800205e:	197b      	adds	r3, r7, r5
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002066:	197b      	adds	r3, r7, r5
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	e000      	b.n	800206e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bdb0      	pop	{r4, r5, r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	40022000 	.word	0x40022000
 800207c:	00001388 	.word	0x00001388
 8002080:	40021000 	.word	0x40021000
 8002084:	fffff8ff 	.word	0xfffff8ff
 8002088:	ffffc7ff 	.word	0xffffc7ff
 800208c:	080033b4 	.word	0x080033b4
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800209e:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a6:	230c      	movs	r3, #12
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d014      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x40>
 80020ae:	d900      	bls.n	80020b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80020b0:	e07b      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x112>
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d002      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x24>
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ba:	e076      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020bc:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2210      	movs	r2, #16
 80020c2:	4013      	ands	r3, r2
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80020ca:	e07c      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80020cc:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d0:	e079      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d2:	4b42      	ldr	r3, [pc, #264]	; (80021dc <HAL_RCC_GetSysClockFreq+0x144>)
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d6:	e076      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	0c9a      	lsrs	r2, r3, #18
 80020dc:	230f      	movs	r3, #15
 80020de:	401a      	ands	r2, r3
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80020e2:	5c9b      	ldrb	r3, [r3, r2]
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	0d9a      	lsrs	r2, r3, #22
 80020ea:	2303      	movs	r3, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	3301      	adds	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	025b      	lsls	r3, r3, #9
 80020fa:	4013      	ands	r3, r2
 80020fc:	d01a      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	4a35      	ldr	r2, [pc, #212]	; (80021dc <HAL_RCC_GetSysClockFreq+0x144>)
 8002108:	2300      	movs	r3, #0
 800210a:	69b8      	ldr	r0, [r7, #24]
 800210c:	69f9      	ldr	r1, [r7, #28]
 800210e:	f7fe f8af 	bl	8000270 <__aeabi_lmul>
 8002112:	0002      	movs	r2, r0
 8002114:	000b      	movs	r3, r1
 8002116:	0010      	movs	r0, r2
 8002118:	0019      	movs	r1, r3
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f7fe f883 	bl	8000230 <__aeabi_uldivmod>
 800212a:	0002      	movs	r2, r0
 800212c:	000b      	movs	r3, r1
 800212e:	0013      	movs	r3, r2
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
 8002132:	e037      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2210      	movs	r2, #16
 800213a:	4013      	ands	r3, r2
 800213c:	d01a      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002148:	2300      	movs	r3, #0
 800214a:	68b8      	ldr	r0, [r7, #8]
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	f7fe f88f 	bl	8000270 <__aeabi_lmul>
 8002152:	0002      	movs	r2, r0
 8002154:	000b      	movs	r3, r1
 8002156:	0010      	movs	r0, r2
 8002158:	0019      	movs	r1, r3
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f7fe f863 	bl	8000230 <__aeabi_uldivmod>
 800216a:	0002      	movs	r2, r0
 800216c:	000b      	movs	r3, r1
 800216e:	0013      	movs	r3, r2
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
 8002172:	e017      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	0018      	movs	r0, r3
 8002178:	2300      	movs	r3, #0
 800217a:	0019      	movs	r1, r3
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800217e:	2300      	movs	r3, #0
 8002180:	f7fe f876 	bl	8000270 <__aeabi_lmul>
 8002184:	0002      	movs	r2, r0
 8002186:	000b      	movs	r3, r1
 8002188:	0010      	movs	r0, r2
 800218a:	0019      	movs	r1, r3
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	001c      	movs	r4, r3
 8002190:	2300      	movs	r3, #0
 8002192:	001d      	movs	r5, r3
 8002194:	0022      	movs	r2, r4
 8002196:	002b      	movs	r3, r5
 8002198:	f7fe f84a 	bl	8000230 <__aeabi_uldivmod>
 800219c:	0002      	movs	r2, r0
 800219e:	000b      	movs	r3, r1
 80021a0:	0013      	movs	r3, r2
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021a8:	e00d      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0b5b      	lsrs	r3, r3, #13
 80021b0:	2207      	movs	r2, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	3301      	adds	r3, #1
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	0212      	lsls	r2, r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b00e      	add	sp, #56	; 0x38
 80021ce:	bdb0      	pop	{r4, r5, r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	003d0900 	.word	0x003d0900
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	080033c4 	.word	0x080033c4

080021e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e032      	b.n	800225c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2239      	movs	r2, #57	; 0x39
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2238      	movs	r2, #56	; 0x38
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0018      	movs	r0, r3
 800220e:	f7fe fb2b 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2239      	movs	r2, #57	; 0x39
 8002216:	2102      	movs	r1, #2
 8002218:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	0019      	movs	r1, r3
 8002224:	0010      	movs	r0, r2
 8002226:	f000 fa4b 	bl	80026c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223e      	movs	r2, #62	; 0x3e
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	223a      	movs	r2, #58	; 0x3a
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	223b      	movs	r2, #59	; 0x3b
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	223c      	movs	r2, #60	; 0x3c
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223d      	movs	r2, #61	; 0x3d
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2239      	movs	r2, #57	; 0x39
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2239      	movs	r2, #57	; 0x39
 8002270:	5c9b      	ldrb	r3, [r3, r2]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e03b      	b.n	80022f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2239      	movs	r2, #57	; 0x39
 8002280:	2102      	movs	r1, #2
 8002282:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2101      	movs	r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	05db      	lsls	r3, r3, #23
 800229c:	429a      	cmp	r2, r3
 800229e:	d00e      	beq.n	80022be <HAL_TIM_Base_Start_IT+0x5a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_TIM_Base_Start_IT+0x98>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_TIM_Base_Start_IT+0x5a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_TIM_Base_Start_IT+0x9c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_TIM_Base_Start_IT+0x5a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_TIM_Base_Start_IT+0xa0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d111      	bne.n	80022e2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2207      	movs	r2, #7
 80022c6:	4013      	ands	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d010      	beq.n	80022f2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2101      	movs	r1, #1
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e0:	e007      	b.n	80022f2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b004      	add	sp, #16
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40000400 	.word	0x40000400
 8002300:	40010800 	.word	0x40010800
 8002304:	40011400 	.word	0x40011400

08002308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2202      	movs	r2, #2
 8002318:	4013      	ands	r3, r2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d124      	bne.n	8002368 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d11d      	bne.n	8002368 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2203      	movs	r2, #3
 8002332:	4252      	negs	r2, r2
 8002334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2203      	movs	r2, #3
 8002344:	4013      	ands	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f9a0 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 8002350:	e007      	b.n	8002362 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f000 f993 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f000 f99f 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2204      	movs	r2, #4
 8002370:	4013      	ands	r3, r2
 8002372:	2b04      	cmp	r3, #4
 8002374:	d125      	bne.n	80023c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11e      	bne.n	80023c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2205      	movs	r2, #5
 800238a:	4252      	negs	r2, r2
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	23c0      	movs	r3, #192	; 0xc0
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 f973 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 80023aa:	e007      	b.n	80023bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 f966 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 f972 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2208      	movs	r2, #8
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d124      	bne.n	800241a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2208      	movs	r2, #8
 80023d8:	4013      	ands	r3, r2
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11d      	bne.n	800241a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2209      	movs	r2, #9
 80023e4:	4252      	negs	r2, r2
 80023e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2204      	movs	r2, #4
 80023ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2203      	movs	r2, #3
 80023f6:	4013      	ands	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f947 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 8002402:	e007      	b.n	8002414 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f000 f93a 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0018      	movs	r0, r3
 8002410:	f000 f946 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2210      	movs	r2, #16
 8002422:	4013      	ands	r3, r2
 8002424:	2b10      	cmp	r3, #16
 8002426:	d125      	bne.n	8002474 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2210      	movs	r2, #16
 8002430:	4013      	ands	r3, r2
 8002432:	2b10      	cmp	r3, #16
 8002434:	d11e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2211      	movs	r2, #17
 800243c:	4252      	negs	r2, r2
 800243e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2208      	movs	r2, #8
 8002444:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	23c0      	movs	r3, #192	; 0xc0
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f91a 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 800245c:	e007      	b.n	800246e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f90d 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	f000 f919 	bl	80026a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10f      	bne.n	80024a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	2b01      	cmp	r3, #1
 800248e:	d108      	bne.n	80024a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4252      	negs	r2, r2
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f7fe f9b3 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2240      	movs	r2, #64	; 0x40
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d10f      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d108      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2241      	movs	r2, #65	; 0x41
 80024c4:	4252      	negs	r2, r2
 80024c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 f8f0 	bl	80026b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	230f      	movs	r3, #15
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2238      	movs	r2, #56	; 0x38
 80024ee:	5c9b      	ldrb	r3, [r3, r2]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_TIM_ConfigClockSource+0x20>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e0bc      	b.n	8002672 <HAL_TIM_ConfigClockSource+0x19a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2238      	movs	r2, #56	; 0x38
 80024fc:	2101      	movs	r1, #1
 80024fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2239      	movs	r2, #57	; 0x39
 8002504:	2102      	movs	r1, #2
 8002506:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2277      	movs	r2, #119	; 0x77
 8002514:	4393      	bics	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_TIM_ConfigClockSource+0x1a4>)
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0192      	lsls	r2, r2, #6
 8002530:	4293      	cmp	r3, r2
 8002532:	d040      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0xde>
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0192      	lsls	r2, r2, #6
 8002538:	4293      	cmp	r3, r2
 800253a:	d900      	bls.n	800253e <HAL_TIM_ConfigClockSource+0x66>
 800253c:	e088      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	0152      	lsls	r2, r2, #5
 8002542:	4293      	cmp	r3, r2
 8002544:	d100      	bne.n	8002548 <HAL_TIM_ConfigClockSource+0x70>
 8002546:	e088      	b.n	800265a <HAL_TIM_ConfigClockSource+0x182>
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	0152      	lsls	r2, r2, #5
 800254c:	4293      	cmp	r3, r2
 800254e:	d900      	bls.n	8002552 <HAL_TIM_ConfigClockSource+0x7a>
 8002550:	e07e      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 8002552:	2b70      	cmp	r3, #112	; 0x70
 8002554:	d018      	beq.n	8002588 <HAL_TIM_ConfigClockSource+0xb0>
 8002556:	d900      	bls.n	800255a <HAL_TIM_ConfigClockSource+0x82>
 8002558:	e07a      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 800255a:	2b60      	cmp	r3, #96	; 0x60
 800255c:	d04f      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x126>
 800255e:	d900      	bls.n	8002562 <HAL_TIM_ConfigClockSource+0x8a>
 8002560:	e076      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 8002562:	2b50      	cmp	r3, #80	; 0x50
 8002564:	d03b      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x106>
 8002566:	d900      	bls.n	800256a <HAL_TIM_ConfigClockSource+0x92>
 8002568:	e072      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d057      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x146>
 800256e:	d900      	bls.n	8002572 <HAL_TIM_ConfigClockSource+0x9a>
 8002570:	e06e      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 8002572:	2b30      	cmp	r3, #48	; 0x30
 8002574:	d063      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x166>
 8002576:	d86b      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d060      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x166>
 800257c:	d868      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d05d      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x166>
 8002582:	2b10      	cmp	r3, #16
 8002584:	d05b      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x166>
 8002586:	e063      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002598:	f000 f96a 	bl	8002870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2277      	movs	r2, #119	; 0x77
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]
      break;
 80025b4:	e052      	b.n	800265c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c6:	f000 f953 	bl	8002870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	01c9      	lsls	r1, r1, #7
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
      break;
 80025dc:	e03e      	b.n	800265c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	001a      	movs	r2, r3
 80025ec:	f000 f8c6 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2150      	movs	r1, #80	; 0x50
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 f920 	bl	800283c <TIM_ITRx_SetConfig>
      break;
 80025fc:	e02e      	b.n	800265c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800260a:	001a      	movs	r2, r3
 800260c:	f000 f8e4 	bl	80027d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2160      	movs	r1, #96	; 0x60
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f910 	bl	800283c <TIM_ITRx_SetConfig>
      break;
 800261c:	e01e      	b.n	800265c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800262a:	001a      	movs	r2, r3
 800262c:	f000 f8a6 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f900 	bl	800283c <TIM_ITRx_SetConfig>
      break;
 800263c:	e00e      	b.n	800265c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0019      	movs	r1, r3
 8002648:	0010      	movs	r0, r2
 800264a:	f000 f8f7 	bl	800283c <TIM_ITRx_SetConfig>
      break;
 800264e:	e005      	b.n	800265c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
      break;
 8002658:	e000      	b.n	800265c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800265a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2239      	movs	r2, #57	; 0x39
 8002660:	2101      	movs	r1, #1
 8002662:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2238      	movs	r2, #56	; 0x38
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]

  return status;
 800266c:	230f      	movs	r3, #15
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	ffff00ff 	.word	0xffff00ff

08002680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}

080026c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d00b      	beq.n	80026f2 <TIM_Base_SetConfig+0x32>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a23      	ldr	r2, [pc, #140]	; (800276c <TIM_Base_SetConfig+0xac>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <TIM_Base_SetConfig+0x32>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a22      	ldr	r2, [pc, #136]	; (8002770 <TIM_Base_SetConfig+0xb0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_Base_SetConfig+0x32>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <TIM_Base_SetConfig+0xb4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d108      	bne.n	8002704 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2270      	movs	r2, #112	; 0x70
 80026f6:	4393      	bics	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	429a      	cmp	r2, r3
 800270c:	d00b      	beq.n	8002726 <TIM_Base_SetConfig+0x66>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a16      	ldr	r2, [pc, #88]	; (800276c <TIM_Base_SetConfig+0xac>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_Base_SetConfig+0x66>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <TIM_Base_SetConfig+0xb0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_Base_SetConfig+0x66>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <TIM_Base_SetConfig+0xb4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d108      	bne.n	8002738 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <TIM_Base_SetConfig+0xb8>)
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	4393      	bics	r3, r2
 800273e:	001a      	movs	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	615a      	str	r2, [r3, #20]
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40000400 	.word	0x40000400
 8002770:	40010800 	.word	0x40010800
 8002774:	40011400 	.word	0x40011400
 8002778:	fffffcff 	.word	0xfffffcff

0800277c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	2201      	movs	r2, #1
 8002794:	4393      	bics	r3, r2
 8002796:	001a      	movs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	22f0      	movs	r2, #240	; 0xf0
 80027a6:	4393      	bics	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	220a      	movs	r2, #10
 80027b8:	4393      	bics	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	621a      	str	r2, [r3, #32]
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b006      	add	sp, #24
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	2210      	movs	r2, #16
 80027ea:	4393      	bics	r3, r2
 80027ec:	001a      	movs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <TIM_TI2_ConfigInputStage+0x60>)
 8002802:	4013      	ands	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	031b      	lsls	r3, r3, #12
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	22a0      	movs	r2, #160	; 0xa0
 8002814:	4393      	bics	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b006      	add	sp, #24
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	ffff0fff 	.word	0xffff0fff

0800283c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2270      	movs	r2, #112	; 0x70
 8002850:	4393      	bics	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	2207      	movs	r2, #7
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	609a      	str	r2, [r3, #8]
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <TIM_ETR_SetConfig+0x3c>)
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	431a      	orrs	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b006      	add	sp, #24
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	ffff00ff 	.word	0xffff00ff

080028b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2238      	movs	r2, #56	; 0x38
 80028be:	5c9b      	ldrb	r3, [r3, r2]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e047      	b.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2238      	movs	r2, #56	; 0x38
 80028cc:	2101      	movs	r1, #1
 80028ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2239      	movs	r2, #57	; 0x39
 80028d4:	2102      	movs	r1, #2
 80028d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2270      	movs	r2, #112	; 0x70
 80028ec:	4393      	bics	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	05db      	lsls	r3, r3, #23
 800290a:	429a      	cmp	r2, r3
 800290c:	d00e      	beq.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10c      	bne.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	4393      	bics	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	4313      	orrs	r3, r2
 800293c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2239      	movs	r2, #57	; 0x39
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2238      	movs	r2, #56	; 0x38
 8002952:	2100      	movs	r1, #0
 8002954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40000400 	.word	0x40000400
 8002964:	40010800 	.word	0x40010800
 8002968:	40011400 	.word	0x40011400

0800296c <findslot>:
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <findslot+0x2c>)
 800296e:	b510      	push	{r4, lr}
 8002970:	0004      	movs	r4, r0
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	d004      	beq.n	8002982 <findslot+0x16>
 8002978:	6a03      	ldr	r3, [r0, #32]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <findslot+0x16>
 800297e:	f000 faf3 	bl	8002f68 <__sinit>
 8002982:	2000      	movs	r0, #0
 8002984:	2c13      	cmp	r4, #19
 8002986:	d805      	bhi.n	8002994 <findslot+0x28>
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <findslot+0x30>)
 800298a:	00e4      	lsls	r4, r4, #3
 800298c:	58e2      	ldr	r2, [r4, r3]
 800298e:	3201      	adds	r2, #1
 8002990:	d000      	beq.n	8002994 <findslot+0x28>
 8002992:	18e0      	adds	r0, r4, r3
 8002994:	bd10      	pop	{r4, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	2000006c 	.word	0x2000006c
 800299c:	200000e8 	.word	0x200000e8

080029a0 <error>:
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	0004      	movs	r4, r0
 80029a4:	f000 fbb6 	bl	8003114 <__errno>
 80029a8:	2613      	movs	r6, #19
 80029aa:	0005      	movs	r5, r0
 80029ac:	2700      	movs	r7, #0
 80029ae:	1c30      	adds	r0, r6, #0
 80029b0:	1c39      	adds	r1, r7, #0
 80029b2:	beab      	bkpt	0x00ab
 80029b4:	1c06      	adds	r6, r0, #0
 80029b6:	602e      	str	r6, [r5, #0]
 80029b8:	0020      	movs	r0, r4
 80029ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029bc <checkerror>:
 80029bc:	b510      	push	{r4, lr}
 80029be:	1c43      	adds	r3, r0, #1
 80029c0:	d101      	bne.n	80029c6 <checkerror+0xa>
 80029c2:	f7ff ffed 	bl	80029a0 <error>
 80029c6:	bd10      	pop	{r4, pc}

080029c8 <_swiread>:
 80029c8:	b530      	push	{r4, r5, lr}
 80029ca:	b085      	sub	sp, #20
 80029cc:	ad01      	add	r5, sp, #4
 80029ce:	9001      	str	r0, [sp, #4]
 80029d0:	9102      	str	r1, [sp, #8]
 80029d2:	9203      	str	r2, [sp, #12]
 80029d4:	2406      	movs	r4, #6
 80029d6:	1c20      	adds	r0, r4, #0
 80029d8:	1c29      	adds	r1, r5, #0
 80029da:	beab      	bkpt	0x00ab
 80029dc:	1c04      	adds	r4, r0, #0
 80029de:	0020      	movs	r0, r4
 80029e0:	f7ff ffec 	bl	80029bc <checkerror>
 80029e4:	b005      	add	sp, #20
 80029e6:	bd30      	pop	{r4, r5, pc}

080029e8 <_read>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	000e      	movs	r6, r1
 80029ec:	0015      	movs	r5, r2
 80029ee:	f7ff ffbd 	bl	800296c <findslot>
 80029f2:	1e04      	subs	r4, r0, #0
 80029f4:	d106      	bne.n	8002a04 <_read+0x1c>
 80029f6:	f000 fb8d 	bl	8003114 <__errno>
 80029fa:	2309      	movs	r3, #9
 80029fc:	6003      	str	r3, [r0, #0]
 80029fe:	2001      	movs	r0, #1
 8002a00:	4240      	negs	r0, r0
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
 8002a04:	002a      	movs	r2, r5
 8002a06:	0031      	movs	r1, r6
 8002a08:	6800      	ldr	r0, [r0, #0]
 8002a0a:	f7ff ffdd 	bl	80029c8 <_swiread>
 8002a0e:	1c43      	adds	r3, r0, #1
 8002a10:	d0f7      	beq.n	8002a02 <_read+0x1a>
 8002a12:	6863      	ldr	r3, [r4, #4]
 8002a14:	1a28      	subs	r0, r5, r0
 8002a16:	181b      	adds	r3, r3, r0
 8002a18:	6063      	str	r3, [r4, #4]
 8002a1a:	e7f2      	b.n	8002a02 <_read+0x1a>

08002a1c <_swilseek>:
 8002a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a1e:	000c      	movs	r4, r1
 8002a20:	0016      	movs	r6, r2
 8002a22:	f7ff ffa3 	bl	800296c <findslot>
 8002a26:	1e05      	subs	r5, r0, #0
 8002a28:	d107      	bne.n	8002a3a <_swilseek+0x1e>
 8002a2a:	f000 fb73 	bl	8003114 <__errno>
 8002a2e:	2309      	movs	r3, #9
 8002a30:	6003      	str	r3, [r0, #0]
 8002a32:	2401      	movs	r4, #1
 8002a34:	4264      	negs	r4, r4
 8002a36:	0020      	movs	r0, r4
 8002a38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a3a:	2e02      	cmp	r6, #2
 8002a3c:	d903      	bls.n	8002a46 <_swilseek+0x2a>
 8002a3e:	f000 fb69 	bl	8003114 <__errno>
 8002a42:	2316      	movs	r3, #22
 8002a44:	e7f4      	b.n	8002a30 <_swilseek+0x14>
 8002a46:	2e01      	cmp	r6, #1
 8002a48:	d112      	bne.n	8002a70 <_swilseek+0x54>
 8002a4a:	6843      	ldr	r3, [r0, #4]
 8002a4c:	18e4      	adds	r4, r4, r3
 8002a4e:	d4f6      	bmi.n	8002a3e <_swilseek+0x22>
 8002a50:	466f      	mov	r7, sp
 8002a52:	682b      	ldr	r3, [r5, #0]
 8002a54:	260a      	movs	r6, #10
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	607c      	str	r4, [r7, #4]
 8002a5a:	1c30      	adds	r0, r6, #0
 8002a5c:	1c39      	adds	r1, r7, #0
 8002a5e:	beab      	bkpt	0x00ab
 8002a60:	1c06      	adds	r6, r0, #0
 8002a62:	0030      	movs	r0, r6
 8002a64:	f7ff ffaa 	bl	80029bc <checkerror>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	dbe2      	blt.n	8002a32 <_swilseek+0x16>
 8002a6c:	606c      	str	r4, [r5, #4]
 8002a6e:	e7e2      	b.n	8002a36 <_swilseek+0x1a>
 8002a70:	6803      	ldr	r3, [r0, #0]
 8002a72:	2e02      	cmp	r6, #2
 8002a74:	d1ec      	bne.n	8002a50 <_swilseek+0x34>
 8002a76:	466f      	mov	r7, sp
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	360a      	adds	r6, #10
 8002a7c:	1c30      	adds	r0, r6, #0
 8002a7e:	1c39      	adds	r1, r7, #0
 8002a80:	beab      	bkpt	0x00ab
 8002a82:	1c06      	adds	r6, r0, #0
 8002a84:	0030      	movs	r0, r6
 8002a86:	f7ff ff99 	bl	80029bc <checkerror>
 8002a8a:	1824      	adds	r4, r4, r0
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d1df      	bne.n	8002a50 <_swilseek+0x34>
 8002a90:	e7cf      	b.n	8002a32 <_swilseek+0x16>

08002a92 <_lseek>:
 8002a92:	b510      	push	{r4, lr}
 8002a94:	f7ff ffc2 	bl	8002a1c <_swilseek>
 8002a98:	bd10      	pop	{r4, pc}

08002a9a <_swiwrite>:
 8002a9a:	b530      	push	{r4, r5, lr}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	ad01      	add	r5, sp, #4
 8002aa0:	9001      	str	r0, [sp, #4]
 8002aa2:	9102      	str	r1, [sp, #8]
 8002aa4:	9203      	str	r2, [sp, #12]
 8002aa6:	2405      	movs	r4, #5
 8002aa8:	1c20      	adds	r0, r4, #0
 8002aaa:	1c29      	adds	r1, r5, #0
 8002aac:	beab      	bkpt	0x00ab
 8002aae:	1c04      	adds	r4, r0, #0
 8002ab0:	0020      	movs	r0, r4
 8002ab2:	f7ff ff83 	bl	80029bc <checkerror>
 8002ab6:	b005      	add	sp, #20
 8002ab8:	bd30      	pop	{r4, r5, pc}

08002aba <_write>:
 8002aba:	b570      	push	{r4, r5, r6, lr}
 8002abc:	000e      	movs	r6, r1
 8002abe:	0015      	movs	r5, r2
 8002ac0:	f7ff ff54 	bl	800296c <findslot>
 8002ac4:	1e04      	subs	r4, r0, #0
 8002ac6:	d106      	bne.n	8002ad6 <_write+0x1c>
 8002ac8:	f000 fb24 	bl	8003114 <__errno>
 8002acc:	2309      	movs	r3, #9
 8002ace:	6003      	str	r3, [r0, #0]
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	e00f      	b.n	8002af6 <_write+0x3c>
 8002ad6:	002a      	movs	r2, r5
 8002ad8:	0031      	movs	r1, r6
 8002ada:	6800      	ldr	r0, [r0, #0]
 8002adc:	f7ff ffdd 	bl	8002a9a <_swiwrite>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	dbf5      	blt.n	8002ad0 <_write+0x16>
 8002ae4:	6862      	ldr	r2, [r4, #4]
 8002ae6:	1a28      	subs	r0, r5, r0
 8002ae8:	1812      	adds	r2, r2, r0
 8002aea:	6062      	str	r2, [r4, #4]
 8002aec:	42ab      	cmp	r3, r5
 8002aee:	d102      	bne.n	8002af6 <_write+0x3c>
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7ff ff55 	bl	80029a0 <error>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}

08002af8 <_swiclose>:
 8002af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002afa:	2402      	movs	r4, #2
 8002afc:	9001      	str	r0, [sp, #4]
 8002afe:	ad01      	add	r5, sp, #4
 8002b00:	1c20      	adds	r0, r4, #0
 8002b02:	1c29      	adds	r1, r5, #0
 8002b04:	beab      	bkpt	0x00ab
 8002b06:	1c04      	adds	r4, r0, #0
 8002b08:	0020      	movs	r0, r4
 8002b0a:	f7ff ff57 	bl	80029bc <checkerror>
 8002b0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08002b10 <_close>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	0005      	movs	r5, r0
 8002b14:	f7ff ff2a 	bl	800296c <findslot>
 8002b18:	1e04      	subs	r4, r0, #0
 8002b1a:	d106      	bne.n	8002b2a <_close+0x1a>
 8002b1c:	f000 fafa 	bl	8003114 <__errno>
 8002b20:	2309      	movs	r3, #9
 8002b22:	6003      	str	r3, [r0, #0]
 8002b24:	2001      	movs	r0, #1
 8002b26:	4240      	negs	r0, r0
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
 8002b2a:	3d01      	subs	r5, #1
 8002b2c:	2d01      	cmp	r5, #1
 8002b2e:	d809      	bhi.n	8002b44 <_close+0x34>
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <_close+0x48>)
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d104      	bne.n	8002b44 <_close+0x34>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	6003      	str	r3, [r0, #0]
 8002b40:	2000      	movs	r0, #0
 8002b42:	e7f1      	b.n	8002b28 <_close+0x18>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	f7ff ffd7 	bl	8002af8 <_swiclose>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d1ec      	bne.n	8002b28 <_close+0x18>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	425b      	negs	r3, r3
 8002b52:	6023      	str	r3, [r4, #0]
 8002b54:	e7e8      	b.n	8002b28 <_close+0x18>
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	200000e8 	.word	0x200000e8

08002b5c <_swistat>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	000c      	movs	r4, r1
 8002b60:	f7ff ff04 	bl	800296c <findslot>
 8002b64:	1e05      	subs	r5, r0, #0
 8002b66:	d106      	bne.n	8002b76 <_swistat+0x1a>
 8002b68:	f000 fad4 	bl	8003114 <__errno>
 8002b6c:	2309      	movs	r3, #9
 8002b6e:	6003      	str	r3, [r0, #0]
 8002b70:	2001      	movs	r0, #1
 8002b72:	4240      	negs	r0, r0
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	6862      	ldr	r2, [r4, #4]
 8002b7a:	019b      	lsls	r3, r3, #6
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	6063      	str	r3, [r4, #4]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	260c      	movs	r6, #12
 8002b86:	64a3      	str	r3, [r4, #72]	; 0x48
 8002b88:	1c30      	adds	r0, r6, #0
 8002b8a:	1c29      	adds	r1, r5, #0
 8002b8c:	beab      	bkpt	0x00ab
 8002b8e:	1c05      	adds	r5, r0, #0
 8002b90:	0028      	movs	r0, r5
 8002b92:	f7ff ff13 	bl	80029bc <checkerror>
 8002b96:	1c43      	adds	r3, r0, #1
 8002b98:	d0ec      	beq.n	8002b74 <_swistat+0x18>
 8002b9a:	6120      	str	r0, [r4, #16]
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	e7e9      	b.n	8002b74 <_swistat+0x18>

08002ba0 <_stat>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	000d      	movs	r5, r1
 8002ba4:	0004      	movs	r4, r0
 8002ba6:	2258      	movs	r2, #88	; 0x58
 8002ba8:	2100      	movs	r1, #0
 8002baa:	0028      	movs	r0, r5
 8002bac:	f000 fa5c 	bl	8003068 <memset>
 8002bb0:	0020      	movs	r0, r4
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	f000 f812 	bl	8002bdc <_swiopen>
 8002bb8:	0004      	movs	r4, r0
 8002bba:	1c43      	adds	r3, r0, #1
 8002bbc:	d00c      	beq.n	8002bd8 <_stat+0x38>
 8002bbe:	2381      	movs	r3, #129	; 0x81
 8002bc0:	686a      	ldr	r2, [r5, #4]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	0029      	movs	r1, r5
 8002bc8:	606b      	str	r3, [r5, #4]
 8002bca:	f7ff ffc7 	bl	8002b5c <_swistat>
 8002bce:	0005      	movs	r5, r0
 8002bd0:	0020      	movs	r0, r4
 8002bd2:	f7ff ff9d 	bl	8002b10 <_close>
 8002bd6:	002c      	movs	r4, r5
 8002bd8:	0020      	movs	r0, r4
 8002bda:	bd70      	pop	{r4, r5, r6, pc}

08002bdc <_swiopen>:
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	000d      	movs	r5, r1
 8002be0:	2600      	movs	r6, #0
 8002be2:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <_swiopen+0xb4>)
 8002be4:	b09b      	sub	sp, #108	; 0x6c
 8002be6:	9001      	str	r0, [sp, #4]
 8002be8:	9302      	str	r3, [sp, #8]
 8002bea:	00f3      	lsls	r3, r6, #3
 8002bec:	9303      	str	r3, [sp, #12]
 8002bee:	9b02      	ldr	r3, [sp, #8]
 8002bf0:	00f2      	lsls	r2, r6, #3
 8002bf2:	589c      	ldr	r4, [r3, r2]
 8002bf4:	1c63      	adds	r3, r4, #1
 8002bf6:	d036      	beq.n	8002c66 <_swiopen+0x8a>
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	2e14      	cmp	r6, #20
 8002bfc:	d1f5      	bne.n	8002bea <_swiopen+0xe>
 8002bfe:	f000 fa89 	bl	8003114 <__errno>
 8002c02:	2401      	movs	r4, #1
 8002c04:	2318      	movs	r3, #24
 8002c06:	4264      	negs	r4, r4
 8002c08:	6003      	str	r3, [r0, #0]
 8002c0a:	e03d      	b.n	8002c88 <_swiopen+0xac>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	03ec      	lsls	r4, r5, #15
 8002c10:	0fe4      	lsrs	r4, r4, #31
 8002c12:	421d      	tst	r5, r3
 8002c14:	d000      	beq.n	8002c18 <_swiopen+0x3c>
 8002c16:	431c      	orrs	r4, r3
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <_swiopen+0xb8>)
 8002c1a:	421d      	tst	r5, r3
 8002c1c:	d001      	beq.n	8002c22 <_swiopen+0x46>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	431c      	orrs	r4, r3
 8002c22:	2308      	movs	r3, #8
 8002c24:	421d      	tst	r5, r3
 8002c26:	d002      	beq.n	8002c2e <_swiopen+0x52>
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4394      	bics	r4, r2
 8002c2c:	431c      	orrs	r4, r3
 8002c2e:	9b01      	ldr	r3, [sp, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	9304      	str	r3, [sp, #16]
 8002c34:	f7fd fa68 	bl	8000108 <strlen>
 8002c38:	607c      	str	r4, [r7, #4]
 8002c3a:	60b8      	str	r0, [r7, #8]
 8002c3c:	2401      	movs	r4, #1
 8002c3e:	1c20      	adds	r0, r4, #0
 8002c40:	1c39      	adds	r1, r7, #0
 8002c42:	beab      	bkpt	0x00ab
 8002c44:	1c04      	adds	r4, r0, #0
 8002c46:	2c00      	cmp	r4, #0
 8002c48:	db08      	blt.n	8002c5c <_swiopen+0x80>
 8002c4a:	00f2      	lsls	r2, r6, #3
 8002c4c:	9b02      	ldr	r3, [sp, #8]
 8002c4e:	4694      	mov	ip, r2
 8002c50:	509c      	str	r4, [r3, r2]
 8002c52:	2200      	movs	r2, #0
 8002c54:	4463      	add	r3, ip
 8002c56:	0034      	movs	r4, r6
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e015      	b.n	8002c88 <_swiopen+0xac>
 8002c5c:	0020      	movs	r0, r4
 8002c5e:	f7ff fe9f 	bl	80029a0 <error>
 8002c62:	0004      	movs	r4, r0
 8002c64:	e010      	b.n	8002c88 <_swiopen+0xac>
 8002c66:	23a0      	movs	r3, #160	; 0xa0
 8002c68:	002a      	movs	r2, r5
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	af04      	add	r7, sp, #16
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d1cb      	bne.n	8002c0c <_swiopen+0x30>
 8002c74:	0039      	movs	r1, r7
 8002c76:	9801      	ldr	r0, [sp, #4]
 8002c78:	f7ff ff92 	bl	8002ba0 <_stat>
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d0c5      	beq.n	8002c0c <_swiopen+0x30>
 8002c80:	f000 fa48 	bl	8003114 <__errno>
 8002c84:	2311      	movs	r3, #17
 8002c86:	6003      	str	r3, [r0, #0]
 8002c88:	0020      	movs	r0, r4
 8002c8a:	b01b      	add	sp, #108	; 0x6c
 8002c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	200000e8 	.word	0x200000e8
 8002c94:	00000601 	.word	0x00000601

08002c98 <_get_semihosting_exts>:
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	9000      	str	r0, [sp, #0]
 8002c9e:	9101      	str	r1, [sp, #4]
 8002ca0:	4827      	ldr	r0, [pc, #156]	; (8002d40 <_get_semihosting_exts+0xa8>)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	0015      	movs	r5, r2
 8002ca6:	f7ff ff99 	bl	8002bdc <_swiopen>
 8002caa:	0004      	movs	r4, r0
 8002cac:	002a      	movs	r2, r5
 8002cae:	2100      	movs	r1, #0
 8002cb0:	9800      	ldr	r0, [sp, #0]
 8002cb2:	f000 f9d9 	bl	8003068 <memset>
 8002cb6:	1c63      	adds	r3, r4, #1
 8002cb8:	d015      	beq.n	8002ce6 <_get_semihosting_exts+0x4e>
 8002cba:	0020      	movs	r0, r4
 8002cbc:	f7ff fe56 	bl	800296c <findslot>
 8002cc0:	260c      	movs	r6, #12
 8002cc2:	0007      	movs	r7, r0
 8002cc4:	1c30      	adds	r0, r6, #0
 8002cc6:	1c39      	adds	r1, r7, #0
 8002cc8:	beab      	bkpt	0x00ab
 8002cca:	1c06      	adds	r6, r0, #0
 8002ccc:	0030      	movs	r0, r6
 8002cce:	f7ff fe75 	bl	80029bc <checkerror>
 8002cd2:	2803      	cmp	r0, #3
 8002cd4:	dd02      	ble.n	8002cdc <_get_semihosting_exts+0x44>
 8002cd6:	3803      	subs	r0, #3
 8002cd8:	42a8      	cmp	r0, r5
 8002cda:	dc07      	bgt.n	8002cec <_get_semihosting_exts+0x54>
 8002cdc:	0020      	movs	r0, r4
 8002cde:	2401      	movs	r4, #1
 8002ce0:	f7ff ff16 	bl	8002b10 <_close>
 8002ce4:	4264      	negs	r4, r4
 8002ce6:	0020      	movs	r0, r4
 8002ce8:	b005      	add	sp, #20
 8002cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cec:	ae03      	add	r6, sp, #12
 8002cee:	2204      	movs	r2, #4
 8002cf0:	0031      	movs	r1, r6
 8002cf2:	0020      	movs	r0, r4
 8002cf4:	f7ff fe78 	bl	80029e8 <_read>
 8002cf8:	2803      	cmp	r0, #3
 8002cfa:	ddef      	ble.n	8002cdc <_get_semihosting_exts+0x44>
 8002cfc:	7833      	ldrb	r3, [r6, #0]
 8002cfe:	2b53      	cmp	r3, #83	; 0x53
 8002d00:	d1ec      	bne.n	8002cdc <_get_semihosting_exts+0x44>
 8002d02:	7873      	ldrb	r3, [r6, #1]
 8002d04:	2b48      	cmp	r3, #72	; 0x48
 8002d06:	d1e9      	bne.n	8002cdc <_get_semihosting_exts+0x44>
 8002d08:	78b3      	ldrb	r3, [r6, #2]
 8002d0a:	2b46      	cmp	r3, #70	; 0x46
 8002d0c:	d1e6      	bne.n	8002cdc <_get_semihosting_exts+0x44>
 8002d0e:	78f3      	ldrb	r3, [r6, #3]
 8002d10:	2b42      	cmp	r3, #66	; 0x42
 8002d12:	d1e3      	bne.n	8002cdc <_get_semihosting_exts+0x44>
 8002d14:	2201      	movs	r2, #1
 8002d16:	0020      	movs	r0, r4
 8002d18:	9901      	ldr	r1, [sp, #4]
 8002d1a:	f7ff fe7f 	bl	8002a1c <_swilseek>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	dbdc      	blt.n	8002cdc <_get_semihosting_exts+0x44>
 8002d22:	002a      	movs	r2, r5
 8002d24:	9900      	ldr	r1, [sp, #0]
 8002d26:	0020      	movs	r0, r4
 8002d28:	f7ff fe5e 	bl	80029e8 <_read>
 8002d2c:	0005      	movs	r5, r0
 8002d2e:	0020      	movs	r0, r4
 8002d30:	f7ff feee 	bl	8002b10 <_close>
 8002d34:	0028      	movs	r0, r5
 8002d36:	f7ff fe41 	bl	80029bc <checkerror>
 8002d3a:	0004      	movs	r4, r0
 8002d3c:	e7d3      	b.n	8002ce6 <_get_semihosting_exts+0x4e>
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	08003564 	.word	0x08003564

08002d44 <initialise_semihosting_exts>:
 8002d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d46:	2401      	movs	r4, #1
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4e09      	ldr	r6, [pc, #36]	; (8002d70 <initialise_semihosting_exts+0x2c>)
 8002d4c:	4d09      	ldr	r5, [pc, #36]	; (8002d74 <initialise_semihosting_exts+0x30>)
 8002d4e:	af01      	add	r7, sp, #4
 8002d50:	0022      	movs	r2, r4
 8002d52:	0038      	movs	r0, r7
 8002d54:	6031      	str	r1, [r6, #0]
 8002d56:	602c      	str	r4, [r5, #0]
 8002d58:	f7ff ff9e 	bl	8002c98 <_get_semihosting_exts>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	dd05      	ble.n	8002d6c <initialise_semihosting_exts+0x28>
 8002d60:	2202      	movs	r2, #2
 8002d62:	783b      	ldrb	r3, [r7, #0]
 8002d64:	401c      	ands	r4, r3
 8002d66:	4013      	ands	r3, r2
 8002d68:	6034      	str	r4, [r6, #0]
 8002d6a:	602b      	str	r3, [r5, #0]
 8002d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	2000000c 	.word	0x2000000c
 8002d74:	20000010 	.word	0x20000010

08002d78 <_has_ext_stdout_stderr>:
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	4c04      	ldr	r4, [pc, #16]	; (8002d8c <_has_ext_stdout_stderr+0x14>)
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da01      	bge.n	8002d86 <_has_ext_stdout_stderr+0xe>
 8002d82:	f7ff ffdf 	bl	8002d44 <initialise_semihosting_exts>
 8002d86:	6820      	ldr	r0, [r4, #0]
 8002d88:	bd10      	pop	{r4, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	20000010 	.word	0x20000010

08002d90 <initialise_monitor_handles>:
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <initialise_monitor_handles+0xa4>)
 8002d94:	b087      	sub	sp, #28
 8002d96:	9303      	str	r3, [sp, #12]
 8002d98:	2500      	movs	r5, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	ac03      	add	r4, sp, #12
 8002da0:	60a3      	str	r3, [r4, #8]
 8002da2:	2601      	movs	r6, #1
 8002da4:	6065      	str	r5, [r4, #4]
 8002da6:	1c30      	adds	r0, r6, #0
 8002da8:	1c21      	adds	r1, r4, #0
 8002daa:	beab      	bkpt	0x00ab
 8002dac:	1c06      	adds	r6, r0, #0
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <initialise_monitor_handles+0xa8>)
 8002db2:	4249      	negs	r1, r1
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	601e      	str	r6, [r3, #0]
 8002db8:	002b      	movs	r3, r5
 8002dba:	4d20      	ldr	r5, [pc, #128]	; (8002e3c <initialise_monitor_handles+0xac>)
 8002dbc:	00da      	lsls	r2, r3, #3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	50a9      	str	r1, [r5, r2]
 8002dc2:	2b14      	cmp	r3, #20
 8002dc4:	d1fa      	bne.n	8002dbc <initialise_monitor_handles+0x2c>
 8002dc6:	f7ff ffd7 	bl	8002d78 <_has_ext_stdout_stderr>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d018      	beq.n	8002e00 <initialise_monitor_handles+0x70>
 8002dce:	9b00      	ldr	r3, [sp, #0]
 8002dd0:	2601      	movs	r6, #1
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	60a3      	str	r3, [r4, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	6063      	str	r3, [r4, #4]
 8002ddc:	1c30      	adds	r0, r6, #0
 8002dde:	1c21      	adds	r1, r4, #0
 8002de0:	beab      	bkpt	0x00ab
 8002de2:	1c07      	adds	r7, r0, #0
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <initialise_monitor_handles+0xb0>)
 8002de6:	9a00      	ldr	r2, [sp, #0]
 8002de8:	601f      	str	r7, [r3, #0]
 8002dea:	2303      	movs	r3, #3
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	60a3      	str	r3, [r4, #8]
 8002df0:	3305      	adds	r3, #5
 8002df2:	6063      	str	r3, [r4, #4]
 8002df4:	1c30      	adds	r0, r6, #0
 8002df6:	1c21      	adds	r1, r4, #0
 8002df8:	beab      	bkpt	0x00ab
 8002dfa:	1c06      	adds	r6, r0, #0
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <initialise_monitor_handles+0xb4>)
 8002dfe:	601e      	str	r6, [r3, #0]
 8002e00:	4e10      	ldr	r6, [pc, #64]	; (8002e44 <initialise_monitor_handles+0xb4>)
 8002e02:	6833      	ldr	r3, [r6, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	d102      	bne.n	8002e0e <initialise_monitor_handles+0x7e>
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <initialise_monitor_handles+0xb0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6033      	str	r3, [r6, #0]
 8002e0e:	2400      	movs	r4, #0
 8002e10:	9b01      	ldr	r3, [sp, #4]
 8002e12:	606c      	str	r4, [r5, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	602b      	str	r3, [r5, #0]
 8002e18:	f7ff ffae 	bl	8002d78 <_has_ext_stdout_stderr>
 8002e1c:	42a0      	cmp	r0, r4
 8002e1e:	d006      	beq.n	8002e2e <initialise_monitor_handles+0x9e>
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <initialise_monitor_handles+0xb0>)
 8002e22:	60ec      	str	r4, [r5, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	616c      	str	r4, [r5, #20]
 8002e28:	60ab      	str	r3, [r5, #8]
 8002e2a:	6833      	ldr	r3, [r6, #0]
 8002e2c:	612b      	str	r3, [r5, #16]
 8002e2e:	b007      	add	sp, #28
 8002e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	0800357a 	.word	0x0800357a
 8002e38:	200000e0 	.word	0x200000e0
 8002e3c:	200000e8 	.word	0x200000e8
 8002e40:	200000e4 	.word	0x200000e4
 8002e44:	200000dc 	.word	0x200000dc

08002e48 <std>:
 8002e48:	2300      	movs	r3, #0
 8002e4a:	b510      	push	{r4, lr}
 8002e4c:	0004      	movs	r4, r0
 8002e4e:	6003      	str	r3, [r0, #0]
 8002e50:	6043      	str	r3, [r0, #4]
 8002e52:	6083      	str	r3, [r0, #8]
 8002e54:	8181      	strh	r1, [r0, #12]
 8002e56:	6643      	str	r3, [r0, #100]	; 0x64
 8002e58:	81c2      	strh	r2, [r0, #14]
 8002e5a:	6103      	str	r3, [r0, #16]
 8002e5c:	6143      	str	r3, [r0, #20]
 8002e5e:	6183      	str	r3, [r0, #24]
 8002e60:	0019      	movs	r1, r3
 8002e62:	2208      	movs	r2, #8
 8002e64:	305c      	adds	r0, #92	; 0x5c
 8002e66:	f000 f8ff 	bl	8003068 <memset>
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <std+0x50>)
 8002e6c:	6224      	str	r4, [r4, #32]
 8002e6e:	6263      	str	r3, [r4, #36]	; 0x24
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <std+0x54>)
 8002e72:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <std+0x58>)
 8002e76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <std+0x5c>)
 8002e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <std+0x60>)
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	d005      	beq.n	8002e8e <std+0x46>
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <std+0x64>)
 8002e84:	429c      	cmp	r4, r3
 8002e86:	d002      	beq.n	8002e8e <std+0x46>
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <std+0x68>)
 8002e8a:	429c      	cmp	r4, r3
 8002e8c:	d103      	bne.n	8002e96 <std+0x4e>
 8002e8e:	0020      	movs	r0, r4
 8002e90:	3058      	adds	r0, #88	; 0x58
 8002e92:	f000 f969 	bl	8003168 <__retarget_lock_init_recursive>
 8002e96:	bd10      	pop	{r4, pc}
 8002e98:	08002fd1 	.word	0x08002fd1
 8002e9c:	08002ff9 	.word	0x08002ff9
 8002ea0:	08003031 	.word	0x08003031
 8002ea4:	0800305d 	.word	0x0800305d
 8002ea8:	20000188 	.word	0x20000188
 8002eac:	200001f0 	.word	0x200001f0
 8002eb0:	20000258 	.word	0x20000258

08002eb4 <stdio_exit_handler>:
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <stdio_exit_handler+0x10>)
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <stdio_exit_handler+0x14>)
 8002eba:	4804      	ldr	r0, [pc, #16]	; (8002ecc <stdio_exit_handler+0x18>)
 8002ebc:	f000 f86c 	bl	8002f98 <_fwalk_sglue>
 8002ec0:	bd10      	pop	{r4, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000014 	.word	0x20000014
 8002ec8:	08003339 	.word	0x08003339
 8002ecc:	20000020 	.word	0x20000020

08002ed0 <cleanup_stdio>:
 8002ed0:	6841      	ldr	r1, [r0, #4]
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <cleanup_stdio+0x30>)
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	0004      	movs	r4, r0
 8002ed8:	4299      	cmp	r1, r3
 8002eda:	d001      	beq.n	8002ee0 <cleanup_stdio+0x10>
 8002edc:	f000 fa2c 	bl	8003338 <_fflush_r>
 8002ee0:	68a1      	ldr	r1, [r4, #8]
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <cleanup_stdio+0x34>)
 8002ee4:	4299      	cmp	r1, r3
 8002ee6:	d002      	beq.n	8002eee <cleanup_stdio+0x1e>
 8002ee8:	0020      	movs	r0, r4
 8002eea:	f000 fa25 	bl	8003338 <_fflush_r>
 8002eee:	68e1      	ldr	r1, [r4, #12]
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <cleanup_stdio+0x38>)
 8002ef2:	4299      	cmp	r1, r3
 8002ef4:	d002      	beq.n	8002efc <cleanup_stdio+0x2c>
 8002ef6:	0020      	movs	r0, r4
 8002ef8:	f000 fa1e 	bl	8003338 <_fflush_r>
 8002efc:	bd10      	pop	{r4, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	20000188 	.word	0x20000188
 8002f04:	200001f0 	.word	0x200001f0
 8002f08:	20000258 	.word	0x20000258

08002f0c <global_stdio_init.part.0>:
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <global_stdio_init.part.0+0x28>)
 8002f10:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <global_stdio_init.part.0+0x2c>)
 8002f12:	2104      	movs	r1, #4
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	4809      	ldr	r0, [pc, #36]	; (8002f3c <global_stdio_init.part.0+0x30>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f7ff ff95 	bl	8002e48 <std>
 8002f1e:	2201      	movs	r2, #1
 8002f20:	2109      	movs	r1, #9
 8002f22:	4807      	ldr	r0, [pc, #28]	; (8002f40 <global_stdio_init.part.0+0x34>)
 8002f24:	f7ff ff90 	bl	8002e48 <std>
 8002f28:	2202      	movs	r2, #2
 8002f2a:	2112      	movs	r1, #18
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <global_stdio_init.part.0+0x38>)
 8002f2e:	f7ff ff8b 	bl	8002e48 <std>
 8002f32:	bd10      	pop	{r4, pc}
 8002f34:	200002c0 	.word	0x200002c0
 8002f38:	08002eb5 	.word	0x08002eb5
 8002f3c:	20000188 	.word	0x20000188
 8002f40:	200001f0 	.word	0x200001f0
 8002f44:	20000258 	.word	0x20000258

08002f48 <__sfp_lock_acquire>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	4802      	ldr	r0, [pc, #8]	; (8002f54 <__sfp_lock_acquire+0xc>)
 8002f4c:	f000 f90d 	bl	800316a <__retarget_lock_acquire_recursive>
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	200002c9 	.word	0x200002c9

08002f58 <__sfp_lock_release>:
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	4802      	ldr	r0, [pc, #8]	; (8002f64 <__sfp_lock_release+0xc>)
 8002f5c:	f000 f906 	bl	800316c <__retarget_lock_release_recursive>
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	200002c9 	.word	0x200002c9

08002f68 <__sinit>:
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	0004      	movs	r4, r0
 8002f6c:	f7ff ffec 	bl	8002f48 <__sfp_lock_acquire>
 8002f70:	6a23      	ldr	r3, [r4, #32]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <__sinit+0x14>
 8002f76:	f7ff ffef 	bl	8002f58 <__sfp_lock_release>
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__sinit+0x28>)
 8002f7e:	6223      	str	r3, [r4, #32]
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <__sinit+0x2c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f6      	bne.n	8002f76 <__sinit+0xe>
 8002f88:	f7ff ffc0 	bl	8002f0c <global_stdio_init.part.0>
 8002f8c:	e7f3      	b.n	8002f76 <__sinit+0xe>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	08002ed1 	.word	0x08002ed1
 8002f94:	200002c0 	.word	0x200002c0

08002f98 <_fwalk_sglue>:
 8002f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f9a:	0014      	movs	r4, r2
 8002f9c:	2600      	movs	r6, #0
 8002f9e:	9000      	str	r0, [sp, #0]
 8002fa0:	9101      	str	r1, [sp, #4]
 8002fa2:	68a5      	ldr	r5, [r4, #8]
 8002fa4:	6867      	ldr	r7, [r4, #4]
 8002fa6:	3f01      	subs	r7, #1
 8002fa8:	d504      	bpl.n	8002fb4 <_fwalk_sglue+0x1c>
 8002faa:	6824      	ldr	r4, [r4, #0]
 8002fac:	2c00      	cmp	r4, #0
 8002fae:	d1f8      	bne.n	8002fa2 <_fwalk_sglue+0xa>
 8002fb0:	0030      	movs	r0, r6
 8002fb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fb4:	89ab      	ldrh	r3, [r5, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d908      	bls.n	8002fcc <_fwalk_sglue+0x34>
 8002fba:	220e      	movs	r2, #14
 8002fbc:	5eab      	ldrsh	r3, [r5, r2]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	d004      	beq.n	8002fcc <_fwalk_sglue+0x34>
 8002fc2:	0029      	movs	r1, r5
 8002fc4:	9800      	ldr	r0, [sp, #0]
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	4798      	blx	r3
 8002fca:	4306      	orrs	r6, r0
 8002fcc:	3568      	adds	r5, #104	; 0x68
 8002fce:	e7ea      	b.n	8002fa6 <_fwalk_sglue+0xe>

08002fd0 <__sread>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	000c      	movs	r4, r1
 8002fd4:	250e      	movs	r5, #14
 8002fd6:	5f49      	ldrsh	r1, [r1, r5]
 8002fd8:	f000 f874 	bl	80030c4 <_read_r>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	db03      	blt.n	8002fe8 <__sread+0x18>
 8002fe0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fe2:	181b      	adds	r3, r3, r0
 8002fe4:	6563      	str	r3, [r4, #84]	; 0x54
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	4a02      	ldr	r2, [pc, #8]	; (8002ff4 <__sread+0x24>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	81a3      	strh	r3, [r4, #12]
 8002ff0:	e7f9      	b.n	8002fe6 <__sread+0x16>
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	ffffefff 	.word	0xffffefff

08002ff8 <__swrite>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	001f      	movs	r7, r3
 8002ffc:	898b      	ldrh	r3, [r1, #12]
 8002ffe:	0005      	movs	r5, r0
 8003000:	000c      	movs	r4, r1
 8003002:	0016      	movs	r6, r2
 8003004:	05db      	lsls	r3, r3, #23
 8003006:	d505      	bpl.n	8003014 <__swrite+0x1c>
 8003008:	230e      	movs	r3, #14
 800300a:	5ec9      	ldrsh	r1, [r1, r3]
 800300c:	2200      	movs	r2, #0
 800300e:	2302      	movs	r3, #2
 8003010:	f000 f844 	bl	800309c <_lseek_r>
 8003014:	89a3      	ldrh	r3, [r4, #12]
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <__swrite+0x34>)
 8003018:	0028      	movs	r0, r5
 800301a:	4013      	ands	r3, r2
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	0032      	movs	r2, r6
 8003020:	230e      	movs	r3, #14
 8003022:	5ee1      	ldrsh	r1, [r4, r3]
 8003024:	003b      	movs	r3, r7
 8003026:	f000 f861 	bl	80030ec <_write_r>
 800302a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800302c:	ffffefff 	.word	0xffffefff

08003030 <__sseek>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	000c      	movs	r4, r1
 8003034:	250e      	movs	r5, #14
 8003036:	5f49      	ldrsh	r1, [r1, r5]
 8003038:	f000 f830 	bl	800309c <_lseek_r>
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	1c42      	adds	r2, r0, #1
 8003040:	d103      	bne.n	800304a <__sseek+0x1a>
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <__sseek+0x28>)
 8003044:	4013      	ands	r3, r2
 8003046:	81a3      	strh	r3, [r4, #12]
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	0152      	lsls	r2, r2, #5
 800304e:	4313      	orrs	r3, r2
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	6560      	str	r0, [r4, #84]	; 0x54
 8003054:	e7f8      	b.n	8003048 <__sseek+0x18>
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	ffffefff 	.word	0xffffefff

0800305c <__sclose>:
 800305c:	b510      	push	{r4, lr}
 800305e:	230e      	movs	r3, #14
 8003060:	5ec9      	ldrsh	r1, [r1, r3]
 8003062:	f000 f809 	bl	8003078 <_close_r>
 8003066:	bd10      	pop	{r4, pc}

08003068 <memset>:
 8003068:	0003      	movs	r3, r0
 800306a:	1882      	adds	r2, r0, r2
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	7019      	strb	r1, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <_close_r>:
 8003078:	2300      	movs	r3, #0
 800307a:	b570      	push	{r4, r5, r6, lr}
 800307c:	4d06      	ldr	r5, [pc, #24]	; (8003098 <_close_r+0x20>)
 800307e:	0004      	movs	r4, r0
 8003080:	0008      	movs	r0, r1
 8003082:	602b      	str	r3, [r5, #0]
 8003084:	f7ff fd44 	bl	8002b10 <_close>
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	d103      	bne.n	8003094 <_close_r+0x1c>
 800308c:	682b      	ldr	r3, [r5, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d000      	beq.n	8003094 <_close_r+0x1c>
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	200002c4 	.word	0x200002c4

0800309c <_lseek_r>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	0004      	movs	r4, r0
 80030a0:	0008      	movs	r0, r1
 80030a2:	0011      	movs	r1, r2
 80030a4:	001a      	movs	r2, r3
 80030a6:	2300      	movs	r3, #0
 80030a8:	4d05      	ldr	r5, [pc, #20]	; (80030c0 <_lseek_r+0x24>)
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	f7ff fcf1 	bl	8002a92 <_lseek>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d103      	bne.n	80030bc <_lseek_r+0x20>
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d000      	beq.n	80030bc <_lseek_r+0x20>
 80030ba:	6023      	str	r3, [r4, #0]
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	200002c4 	.word	0x200002c4

080030c4 <_read_r>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	0004      	movs	r4, r0
 80030c8:	0008      	movs	r0, r1
 80030ca:	0011      	movs	r1, r2
 80030cc:	001a      	movs	r2, r3
 80030ce:	2300      	movs	r3, #0
 80030d0:	4d05      	ldr	r5, [pc, #20]	; (80030e8 <_read_r+0x24>)
 80030d2:	602b      	str	r3, [r5, #0]
 80030d4:	f7ff fc88 	bl	80029e8 <_read>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d103      	bne.n	80030e4 <_read_r+0x20>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d000      	beq.n	80030e4 <_read_r+0x20>
 80030e2:	6023      	str	r3, [r4, #0]
 80030e4:	bd70      	pop	{r4, r5, r6, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	200002c4 	.word	0x200002c4

080030ec <_write_r>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	0004      	movs	r4, r0
 80030f0:	0008      	movs	r0, r1
 80030f2:	0011      	movs	r1, r2
 80030f4:	001a      	movs	r2, r3
 80030f6:	2300      	movs	r3, #0
 80030f8:	4d05      	ldr	r5, [pc, #20]	; (8003110 <_write_r+0x24>)
 80030fa:	602b      	str	r3, [r5, #0]
 80030fc:	f7ff fcdd 	bl	8002aba <_write>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d103      	bne.n	800310c <_write_r+0x20>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d000      	beq.n	800310c <_write_r+0x20>
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	bd70      	pop	{r4, r5, r6, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	200002c4 	.word	0x200002c4

08003114 <__errno>:
 8003114:	4b01      	ldr	r3, [pc, #4]	; (800311c <__errno+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	2000006c 	.word	0x2000006c

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	2600      	movs	r6, #0
 8003124:	4c0c      	ldr	r4, [pc, #48]	; (8003158 <__libc_init_array+0x38>)
 8003126:	4d0d      	ldr	r5, [pc, #52]	; (800315c <__libc_init_array+0x3c>)
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	2600      	movs	r6, #0
 8003132:	f000 f92d 	bl	8003390 <_init>
 8003136:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <__libc_init_array+0x40>)
 8003138:	4d0a      	ldr	r5, [pc, #40]	; (8003164 <__libc_init_array+0x44>)
 800313a:	1b64      	subs	r4, r4, r5
 800313c:	10a4      	asrs	r4, r4, #2
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	00b3      	lsls	r3, r6, #2
 8003146:	58eb      	ldr	r3, [r5, r3]
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	00b3      	lsls	r3, r6, #2
 8003150:	58eb      	ldr	r3, [r5, r3]
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	08003588 	.word	0x08003588
 800315c:	08003588 	.word	0x08003588
 8003160:	0800358c 	.word	0x0800358c
 8003164:	08003588 	.word	0x08003588

08003168 <__retarget_lock_init_recursive>:
 8003168:	4770      	bx	lr

0800316a <__retarget_lock_acquire_recursive>:
 800316a:	4770      	bx	lr

0800316c <__retarget_lock_release_recursive>:
 800316c:	4770      	bx	lr
	...

08003170 <_free_r>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	0005      	movs	r5, r0
 8003174:	2900      	cmp	r1, #0
 8003176:	d010      	beq.n	800319a <_free_r+0x2a>
 8003178:	1f0c      	subs	r4, r1, #4
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	da00      	bge.n	8003182 <_free_r+0x12>
 8003180:	18e4      	adds	r4, r4, r3
 8003182:	0028      	movs	r0, r5
 8003184:	f000 f83e 	bl	8003204 <__malloc_lock>
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <_free_r+0x90>)
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <_free_r+0x2c>
 8003190:	6063      	str	r3, [r4, #4]
 8003192:	6014      	str	r4, [r2, #0]
 8003194:	0028      	movs	r0, r5
 8003196:	f000 f83d 	bl	8003214 <__malloc_unlock>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	42a3      	cmp	r3, r4
 800319e:	d908      	bls.n	80031b2 <_free_r+0x42>
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	1821      	adds	r1, r4, r0
 80031a4:	428b      	cmp	r3, r1
 80031a6:	d1f3      	bne.n	8003190 <_free_r+0x20>
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	1809      	adds	r1, r1, r0
 80031ae:	6021      	str	r1, [r4, #0]
 80031b0:	e7ee      	b.n	8003190 <_free_r+0x20>
 80031b2:	001a      	movs	r2, r3
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <_free_r+0x4e>
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	d9f9      	bls.n	80031b2 <_free_r+0x42>
 80031be:	6811      	ldr	r1, [r2, #0]
 80031c0:	1850      	adds	r0, r2, r1
 80031c2:	42a0      	cmp	r0, r4
 80031c4:	d10b      	bne.n	80031de <_free_r+0x6e>
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	1809      	adds	r1, r1, r0
 80031ca:	1850      	adds	r0, r2, r1
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	4283      	cmp	r3, r0
 80031d0:	d1e0      	bne.n	8003194 <_free_r+0x24>
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	1841      	adds	r1, r0, r1
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	6053      	str	r3, [r2, #4]
 80031dc:	e7da      	b.n	8003194 <_free_r+0x24>
 80031de:	42a0      	cmp	r0, r4
 80031e0:	d902      	bls.n	80031e8 <_free_r+0x78>
 80031e2:	230c      	movs	r3, #12
 80031e4:	602b      	str	r3, [r5, #0]
 80031e6:	e7d5      	b.n	8003194 <_free_r+0x24>
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	1821      	adds	r1, r4, r0
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d103      	bne.n	80031f8 <_free_r+0x88>
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	1809      	adds	r1, r1, r0
 80031f6:	6021      	str	r1, [r4, #0]
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	6054      	str	r4, [r2, #4]
 80031fc:	e7ca      	b.n	8003194 <_free_r+0x24>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	200002cc 	.word	0x200002cc

08003204 <__malloc_lock>:
 8003204:	b510      	push	{r4, lr}
 8003206:	4802      	ldr	r0, [pc, #8]	; (8003210 <__malloc_lock+0xc>)
 8003208:	f7ff ffaf 	bl	800316a <__retarget_lock_acquire_recursive>
 800320c:	bd10      	pop	{r4, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	200002c8 	.word	0x200002c8

08003214 <__malloc_unlock>:
 8003214:	b510      	push	{r4, lr}
 8003216:	4802      	ldr	r0, [pc, #8]	; (8003220 <__malloc_unlock+0xc>)
 8003218:	f7ff ffa8 	bl	800316c <__retarget_lock_release_recursive>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	200002c8 	.word	0x200002c8

08003224 <__sflush_r>:
 8003224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003226:	898b      	ldrh	r3, [r1, #12]
 8003228:	0005      	movs	r5, r0
 800322a:	000c      	movs	r4, r1
 800322c:	071a      	lsls	r2, r3, #28
 800322e:	d45c      	bmi.n	80032ea <__sflush_r+0xc6>
 8003230:	684a      	ldr	r2, [r1, #4]
 8003232:	2a00      	cmp	r2, #0
 8003234:	dc04      	bgt.n	8003240 <__sflush_r+0x1c>
 8003236:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003238:	2a00      	cmp	r2, #0
 800323a:	dc01      	bgt.n	8003240 <__sflush_r+0x1c>
 800323c:	2000      	movs	r0, #0
 800323e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003240:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003242:	2f00      	cmp	r7, #0
 8003244:	d0fa      	beq.n	800323c <__sflush_r+0x18>
 8003246:	2200      	movs	r2, #0
 8003248:	2080      	movs	r0, #128	; 0x80
 800324a:	682e      	ldr	r6, [r5, #0]
 800324c:	602a      	str	r2, [r5, #0]
 800324e:	001a      	movs	r2, r3
 8003250:	0140      	lsls	r0, r0, #5
 8003252:	6a21      	ldr	r1, [r4, #32]
 8003254:	4002      	ands	r2, r0
 8003256:	4203      	tst	r3, r0
 8003258:	d034      	beq.n	80032c4 <__sflush_r+0xa0>
 800325a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	075b      	lsls	r3, r3, #29
 8003260:	d506      	bpl.n	8003270 <__sflush_r+0x4c>
 8003262:	6863      	ldr	r3, [r4, #4]
 8003264:	1ac0      	subs	r0, r0, r3
 8003266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <__sflush_r+0x4c>
 800326c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800326e:	1ac0      	subs	r0, r0, r3
 8003270:	0002      	movs	r2, r0
 8003272:	2300      	movs	r3, #0
 8003274:	0028      	movs	r0, r5
 8003276:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003278:	6a21      	ldr	r1, [r4, #32]
 800327a:	47b8      	blx	r7
 800327c:	89a2      	ldrh	r2, [r4, #12]
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	d106      	bne.n	8003290 <__sflush_r+0x6c>
 8003282:	6829      	ldr	r1, [r5, #0]
 8003284:	291d      	cmp	r1, #29
 8003286:	d82c      	bhi.n	80032e2 <__sflush_r+0xbe>
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <__sflush_r+0x110>)
 800328a:	410b      	asrs	r3, r1
 800328c:	07db      	lsls	r3, r3, #31
 800328e:	d428      	bmi.n	80032e2 <__sflush_r+0xbe>
 8003290:	2300      	movs	r3, #0
 8003292:	6063      	str	r3, [r4, #4]
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	6023      	str	r3, [r4, #0]
 8003298:	04d2      	lsls	r2, r2, #19
 800329a:	d505      	bpl.n	80032a8 <__sflush_r+0x84>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d102      	bne.n	80032a6 <__sflush_r+0x82>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d100      	bne.n	80032a8 <__sflush_r+0x84>
 80032a6:	6560      	str	r0, [r4, #84]	; 0x54
 80032a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032aa:	602e      	str	r6, [r5, #0]
 80032ac:	2900      	cmp	r1, #0
 80032ae:	d0c5      	beq.n	800323c <__sflush_r+0x18>
 80032b0:	0023      	movs	r3, r4
 80032b2:	3344      	adds	r3, #68	; 0x44
 80032b4:	4299      	cmp	r1, r3
 80032b6:	d002      	beq.n	80032be <__sflush_r+0x9a>
 80032b8:	0028      	movs	r0, r5
 80032ba:	f7ff ff59 	bl	8003170 <_free_r>
 80032be:	2000      	movs	r0, #0
 80032c0:	6360      	str	r0, [r4, #52]	; 0x34
 80032c2:	e7bc      	b.n	800323e <__sflush_r+0x1a>
 80032c4:	2301      	movs	r3, #1
 80032c6:	0028      	movs	r0, r5
 80032c8:	47b8      	blx	r7
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	d1c6      	bne.n	800325c <__sflush_r+0x38>
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0c3      	beq.n	800325c <__sflush_r+0x38>
 80032d4:	2b1d      	cmp	r3, #29
 80032d6:	d001      	beq.n	80032dc <__sflush_r+0xb8>
 80032d8:	2b16      	cmp	r3, #22
 80032da:	d101      	bne.n	80032e0 <__sflush_r+0xbc>
 80032dc:	602e      	str	r6, [r5, #0]
 80032de:	e7ad      	b.n	800323c <__sflush_r+0x18>
 80032e0:	89a2      	ldrh	r2, [r4, #12]
 80032e2:	2340      	movs	r3, #64	; 0x40
 80032e4:	4313      	orrs	r3, r2
 80032e6:	81a3      	strh	r3, [r4, #12]
 80032e8:	e7a9      	b.n	800323e <__sflush_r+0x1a>
 80032ea:	690e      	ldr	r6, [r1, #16]
 80032ec:	2e00      	cmp	r6, #0
 80032ee:	d0a5      	beq.n	800323c <__sflush_r+0x18>
 80032f0:	680f      	ldr	r7, [r1, #0]
 80032f2:	600e      	str	r6, [r1, #0]
 80032f4:	1bba      	subs	r2, r7, r6
 80032f6:	9201      	str	r2, [sp, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	079b      	lsls	r3, r3, #30
 80032fc:	d100      	bne.n	8003300 <__sflush_r+0xdc>
 80032fe:	694a      	ldr	r2, [r1, #20]
 8003300:	60a2      	str	r2, [r4, #8]
 8003302:	9b01      	ldr	r3, [sp, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	dd99      	ble.n	800323c <__sflush_r+0x18>
 8003308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800330a:	0032      	movs	r2, r6
 800330c:	001f      	movs	r7, r3
 800330e:	0028      	movs	r0, r5
 8003310:	9b01      	ldr	r3, [sp, #4]
 8003312:	6a21      	ldr	r1, [r4, #32]
 8003314:	47b8      	blx	r7
 8003316:	2800      	cmp	r0, #0
 8003318:	dc06      	bgt.n	8003328 <__sflush_r+0x104>
 800331a:	2340      	movs	r3, #64	; 0x40
 800331c:	2001      	movs	r0, #1
 800331e:	89a2      	ldrh	r2, [r4, #12]
 8003320:	4240      	negs	r0, r0
 8003322:	4313      	orrs	r3, r2
 8003324:	81a3      	strh	r3, [r4, #12]
 8003326:	e78a      	b.n	800323e <__sflush_r+0x1a>
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	1836      	adds	r6, r6, r0
 800332c:	1a1b      	subs	r3, r3, r0
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	e7e7      	b.n	8003302 <__sflush_r+0xde>
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	dfbffffe 	.word	0xdfbffffe

08003338 <_fflush_r>:
 8003338:	690b      	ldr	r3, [r1, #16]
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	0005      	movs	r5, r0
 800333e:	000c      	movs	r4, r1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_fflush_r+0x12>
 8003344:	2500      	movs	r5, #0
 8003346:	0028      	movs	r0, r5
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	2800      	cmp	r0, #0
 800334c:	d004      	beq.n	8003358 <_fflush_r+0x20>
 800334e:	6a03      	ldr	r3, [r0, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <_fflush_r+0x20>
 8003354:	f7ff fe08 	bl	8002f68 <__sinit>
 8003358:	220c      	movs	r2, #12
 800335a:	5ea3      	ldrsh	r3, [r4, r2]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f1      	beq.n	8003344 <_fflush_r+0xc>
 8003360:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003362:	07d2      	lsls	r2, r2, #31
 8003364:	d404      	bmi.n	8003370 <_fflush_r+0x38>
 8003366:	059b      	lsls	r3, r3, #22
 8003368:	d402      	bmi.n	8003370 <_fflush_r+0x38>
 800336a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336c:	f7ff fefd 	bl	800316a <__retarget_lock_acquire_recursive>
 8003370:	0028      	movs	r0, r5
 8003372:	0021      	movs	r1, r4
 8003374:	f7ff ff56 	bl	8003224 <__sflush_r>
 8003378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800337a:	0005      	movs	r5, r0
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	d4e2      	bmi.n	8003346 <_fflush_r+0xe>
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	059b      	lsls	r3, r3, #22
 8003384:	d4df      	bmi.n	8003346 <_fflush_r+0xe>
 8003386:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003388:	f7ff fef0 	bl	800316c <__retarget_lock_release_recursive>
 800338c:	e7db      	b.n	8003346 <_fflush_r+0xe>
	...

08003390 <_init>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr

0800339c <_fini>:
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a2:	bc08      	pop	{r3}
 80033a4:	469e      	mov	lr, r3
 80033a6:	4770      	bx	lr
