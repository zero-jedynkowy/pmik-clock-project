
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dfc  08004dfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e04  08004e04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000070  08004e7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004e7c  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c5a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f05  00000000  00000000  00029d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081f  00000000  00000000  0002c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f52  00000000  00000000  0002cf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1ca  00000000  00000000  00042e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000863b6  00000000  00000000  0005003b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003058  00000000  00000000  000d63f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000d944c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cb0 	.word	0x08004cb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004cb0 	.word	0x08004cb0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 80004d2:	f003 fc09 	bl	8003ce8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fff1 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f879 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f9fd 	bl	80008dc <MX_GPIO_Init>
  MX_TIM2_Init();
 80004e2:	f000 f94f 	bl	8000784 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e6:	f000 f9a3 	bl	8000830 <MX_TIM3_Init>
  MX_RTC_Init();
 80004ea:	f000 f8e7 	bl	80006bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <main+0xe8>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f002 fe55 	bl	80031a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <main+0xec>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fe07 	bl	800310c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	482e      	ldr	r0, [pc, #184]	; (80005bc <main+0xf0>)
 8000504:	2201      	movs	r2, #1
 8000506:	0019      	movs	r1, r3
 8000508:	f001 fae5 	bl	8001ad6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	482a      	ldr	r0, [pc, #168]	; (80005bc <main+0xf0>)
 8000512:	2201      	movs	r2, #1
 8000514:	0019      	movs	r1, r3
 8000516:	f001 fade 	bl	8001ad6 <HAL_GPIO_WritePin>
  //setTime(&ourClock, 23, 59);
  //uint8_t time [4];
  //HAL_RTC_SetTime(&hrtc, sTime, RTC_FORMAT_BCD);
  uint8_t Godziny = 12;
 800051a:	2133      	movs	r1, #51	; 0x33
 800051c:	187b      	adds	r3, r7, r1
 800051e:	220c      	movs	r2, #12
 8000520:	701a      	strb	r2, [r3, #0]
  uint8_t Minuty = 25;
 8000522:	2032      	movs	r0, #50	; 0x32
 8000524:	183b      	adds	r3, r7, r0
 8000526:	2219      	movs	r2, #25
 8000528:	701a      	strb	r2, [r3, #0]
  setTime_RTC(&sTime, Godziny, Minuty);
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	187b      	adds	r3, r7, r1
 8000530:	7819      	ldrb	r1, [r3, #0]
 8000532:	4b23      	ldr	r3, [pc, #140]	; (80005c0 <main+0xf4>)
 8000534:	0018      	movs	r0, r3
 8000536:	f000 ff17 	bl	8001368 <setTime_RTC>
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800053a:	4921      	ldr	r1, [pc, #132]	; (80005c0 <main+0xf4>)
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <main+0xf8>)
 800053e:	2200      	movs	r2, #0
 8000540:	0018      	movs	r0, r3
 8000542:	f002 fae1 	bl	8002b08 <HAL_RTC_SetTime>
  lcd_init ();
 8000546:	f000 fc77 	bl	8000e38 <lcd_init>
  lcd_clear();
 800054a:	f000 fc4b 	bl	8000de4 <lcd_clear>


  char * content[6][2] = {{"POGODA", ""}, {"25 st. C", "SNIEG"},
 800054e:	003b      	movs	r3, r7
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <main+0xfc>)
 8000552:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000554:	c313      	stmia	r3!, {r0, r1, r4}
 8000556:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000558:	c313      	stmia	r3!, {r0, r1, r4}
 800055a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800055c:	c313      	stmia	r3!, {r0, r1, r4}
 800055e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000560:	c313      	stmia	r3!, {r0, r1, r4}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i=0; i<6; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
 8000566:	e020      	b.n	80005aa <main+0xde>
	  {
		  lcd_put_cur(0, 0);
 8000568:	2100      	movs	r1, #0
 800056a:	2000      	movs	r0, #0
 800056c:	f000 fc45 	bl	8000dfa <lcd_put_cur>
		  lcd_send_string(content[i][0]);
 8000570:	003b      	movs	r3, r7
 8000572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000574:	00d2      	lsls	r2, r2, #3
 8000576:	58d3      	ldr	r3, [r2, r3]
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fc9b 	bl	8000eb4 <lcd_send_string>
		  lcd_put_cur(1, 0);
 800057e:	2100      	movs	r1, #0
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fc3a 	bl	8000dfa <lcd_put_cur>
		  lcd_send_string(content[i][1]);
 8000586:	003a      	movs	r2, r7
 8000588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	3304      	adds	r3, #4
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fc8e 	bl	8000eb4 <lcd_send_string>
		  HAL_Delay(3000);
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <main+0x100>)
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fffe 	bl	800159c <HAL_Delay>
		  lcd_clear();
 80005a0:	f000 fc20 	bl	8000de4 <lcd_clear>
	  for(int i=0; i<6; i++)
 80005a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a6:	3301      	adds	r3, #1
 80005a8:	637b      	str	r3, [r7, #52]	; 0x34
 80005aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ac:	2b05      	cmp	r3, #5
 80005ae:	dddb      	ble.n	8000568 <main+0x9c>
 80005b0:	e7d7      	b.n	8000562 <main+0x96>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	20000108 	.word	0x20000108
 80005bc:	50000400 	.word	0x50000400
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	200000a4 	.word	0x200000a4
 80005c8:	08004d30 	.word	0x08004d30
 80005cc:	00000bb8 	.word	0x00000bb8

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b09f      	sub	sp, #124	; 0x7c
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	2440      	movs	r4, #64	; 0x40
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	2338      	movs	r3, #56	; 0x38
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f003 fd1b 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	232c      	movs	r3, #44	; 0x2c
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f003 fd13 	bl	800401c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2328      	movs	r3, #40	; 0x28
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f003 fd0c 	bl	800401c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <SystemClock_Config+0xe4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a2b      	ldr	r2, [pc, #172]	; (80006b8 <SystemClock_Config+0xe8>)
 800060a:	401a      	ands	r2, r3
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xe4>)
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0109      	lsls	r1, r1, #4
 8000612:	430a      	orrs	r2, r1
 8000614:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000616:	0021      	movs	r1, r4
 8000618:	187b      	adds	r3, r7, r1
 800061a:	220a      	movs	r2, #10
 800061c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2210      	movs	r2, #16
 8000628:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2201      	movs	r2, #1
 800062e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2202      	movs	r2, #2
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	02d2      	lsls	r2, r2, #11
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	03d2      	lsls	r2, r2, #15
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	187b      	adds	r3, r7, r1
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fa5e 	bl	8001b10 <HAL_RCC_OscConfig>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000658:	f000 fa1c 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	212c      	movs	r1, #44	; 0x2c
 800065e:	187b      	adds	r3, r7, r1
 8000660:	220f      	movs	r2, #15
 8000662:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2203      	movs	r2, #3
 8000668:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2101      	movs	r1, #1
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fe19 	bl	80022b8 <HAL_RCC_ClockConfig>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800068a:	f000 fa03 	bl	8000a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2220      	movs	r2, #32
 8000692:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	0292      	lsls	r2, r2, #10
 800069a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 fff8 	bl	8002694 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006a8:	f000 f9f4 	bl	8000a94 <Error_Handler>
  }
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b01f      	add	sp, #124	; 0x7c
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	40007000 	.word	0x40007000
 80006b8:	ffffe7ff 	.word	0xffffe7ff

080006bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	2314      	movs	r3, #20
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f003 fca6 	bl	800401c <memset>
  RTC_DateTypeDef sDate = {0};
 80006d0:	003b      	movs	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <MX_RTC_Init+0xc0>)
 80006d8:	4a29      	ldr	r2, [pc, #164]	; (8000780 <MX_RTC_Init+0xc4>)
 80006da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_RTC_Init+0xc0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <MX_RTC_Init+0xc0>)
 80006e4:	227f      	movs	r2, #127	; 0x7f
 80006e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_RTC_Init+0xc0>)
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_RTC_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_RTC_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_RTC_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_RTC_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_RTC_Init+0xc0>)
 8000708:	0018      	movs	r0, r3
 800070a:	f002 f961 	bl	80029d0 <HAL_RTC_Init>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000712:	f000 f9bf 	bl	8000a94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000734:	1d39      	adds	r1, r7, #4
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_RTC_Init+0xc0>)
 8000738:	2201      	movs	r2, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f002 f9e4 	bl	8002b08 <HAL_RTC_SetTime>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8000744:	f000 f9a6 	bl	8000a94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000748:	003b      	movs	r3, r7
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800074e:	003b      	movs	r3, r7
 8000750:	2201      	movs	r2, #1
 8000752:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000754:	003b      	movs	r3, r7
 8000756:	2201      	movs	r2, #1
 8000758:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000760:	0039      	movs	r1, r7
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_RTC_Init+0xc0>)
 8000764:	2201      	movs	r2, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fad6 	bl	8002d18 <HAL_RTC_SetDate>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000770:	f000 f990 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b006      	add	sp, #24
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000a4 	.word	0x200000a4
 8000780:	40002800 	.word	0x40002800

08000784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	2308      	movs	r3, #8
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2310      	movs	r3, #16
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f003 fc41 	bl	800401c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	003b      	movs	r3, r7
 800079c:	0018      	movs	r0, r3
 800079e:	2308      	movs	r3, #8
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f003 fc3a 	bl	800401c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	05d2      	lsls	r2, r2, #23
 80007ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_TIM2_Init+0xa8>)
 80007b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007be:	22fa      	movs	r2, #250	; 0xfa
 80007c0:	0092      	lsls	r2, r2, #2
 80007c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 fc5a 	bl	800308c <HAL_TIM_Base_Init>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 f95a 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	2108      	movs	r1, #8
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	0152      	lsls	r2, r2, #5
 80007e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ea:	187a      	adds	r2, r7, r1
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM2_Init+0xa4>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fe0f 	bl	8003414 <HAL_TIM_ConfigClockSource>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007fa:	f000 f94b 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	003b      	movs	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080a:	003a      	movs	r2, r7
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_TIM2_Init+0xa4>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f002 ffeb 	bl	80037ec <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800081a:	f000 f93b 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b006      	add	sp, #24
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	200000c8 	.word	0x200000c8
 800082c:	00007cff 	.word	0x00007cff

08000830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	2308      	movs	r3, #8
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2310      	movs	r3, #16
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f003 fbeb 	bl	800401c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	003b      	movs	r3, r7
 8000848:	0018      	movs	r0, r3
 800084a:	2308      	movs	r3, #8
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f003 fbe4 	bl	800401c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM3_Init+0xa0>)
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_TIM3_Init+0xa4>)
 8000858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM3_Init+0xa0>)
 800085c:	221f      	movs	r2, #31
 800085e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM3_Init+0xa0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM3_Init+0xa0>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_TIM3_Init+0xa8>)
 800086a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM3_Init+0xa0>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_TIM3_Init+0xa0>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM3_Init+0xa0>)
 800087a:	0018      	movs	r0, r3
 800087c:	f002 fc06 	bl	800308c <HAL_TIM_Base_Init>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 f906 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	2108      	movs	r1, #8
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	0152      	lsls	r2, r2, #5
 8000890:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000892:	187a      	adds	r2, r7, r1
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_TIM3_Init+0xa0>)
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f002 fdbb 	bl	8003414 <HAL_TIM_ConfigClockSource>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008a2:	f000 f8f7 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b2:	003a      	movs	r2, r7
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_TIM3_Init+0xa0>)
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 ff97 	bl	80037ec <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008c2:	f000 f8e7 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b006      	add	sp, #24
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20000108 	.word	0x20000108
 80008d4:	40000400 	.word	0x40000400
 80008d8:	0000fffe 	.word	0x0000fffe

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	2414      	movs	r4, #20
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f003 fb95 	bl	800401c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b56      	ldr	r3, [pc, #344]	; (8000a4c <MX_GPIO_Init+0x170>)
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <MX_GPIO_Init+0x170>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	430a      	orrs	r2, r1
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fe:	4b53      	ldr	r3, [pc, #332]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	2204      	movs	r2, #4
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <MX_GPIO_Init+0x170>)
 800090c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090e:	4b4f      	ldr	r3, [pc, #316]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	430a      	orrs	r2, r1
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000926:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
 800092e:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b44      	ldr	r3, [pc, #272]	; (8000a4c <MX_GPIO_Init+0x170>)
 800093c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000940:	2102      	movs	r1, #2
 8000942:	430a      	orrs	r2, r1
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
 8000946:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <MX_GPIO_Init+0x170>)
 8000948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094a:	2202      	movs	r2, #2
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 8000952:	23f8      	movs	r3, #248	; 0xf8
 8000954:	0099      	lsls	r1, r3, #2
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2200      	movs	r2, #0
 800095c:	0018      	movs	r0, r3
 800095e:	f001 f8ba 	bl	8001ad6 <HAL_GPIO_WritePin>
                          |D_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 8000962:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <MX_GPIO_Init+0x174>)
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	0018      	movs	r0, r3
 800096a:	f001 f8b4 	bl	8001ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_4_Pin|SCLK_Pin|SDO_Pin, GPIO_PIN_RESET);
 800096e:	23d0      	movs	r3, #208	; 0xd0
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4838      	ldr	r0, [pc, #224]	; (8000a54 <MX_GPIO_Init+0x178>)
 8000974:	2200      	movs	r2, #0
 8000976:	0019      	movs	r1, r3
 8000978:	f001 f8ad 	bl	8001ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0192      	lsls	r2, r2, #6
 8000982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2284      	movs	r2, #132	; 0x84
 8000988:	0392      	lsls	r2, r2, #14
 800098a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000992:	193b      	adds	r3, r7, r4
 8000994:	4a2e      	ldr	r2, [pc, #184]	; (8000a50 <MX_GPIO_Init+0x174>)
 8000996:	0019      	movs	r1, r3
 8000998:	0010      	movs	r0, r2
 800099a:	f000 ff01 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	220c      	movs	r2, #12
 80009a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2202      	movs	r2, #2
 80009a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2203      	movs	r2, #3
 80009b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2204      	movs	r2, #4
 80009ba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	193a      	adds	r2, r7, r4
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 feeb 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin D_7_Pin
                           D_6_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 80009ca:	0021      	movs	r1, r4
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	22f8      	movs	r2, #248	; 0xf8
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
                          |D_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	000c      	movs	r4, r1
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2201      	movs	r2, #1
 80009da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	193a      	adds	r2, r7, r4
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fed5 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2201      	movs	r2, #1
 8000a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <MX_GPIO_Init+0x174>)
 8000a12:	0019      	movs	r1, r3
 8000a14:	0010      	movs	r0, r2
 8000a16:	f000 fec3 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_4_Pin SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = D_4_Pin|SCLK_Pin|SDO_Pin;
 8000a1a:	0021      	movs	r1, r4
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	22d0      	movs	r2, #208	; 0xd0
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2201      	movs	r2, #1
 8000a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <MX_GPIO_Init+0x178>)
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	0010      	movs	r0, r2
 8000a3e:	f000 feaf 	bl	80017a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b00b      	add	sp, #44	; 0x2c
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	50000800 	.word	0x50000800
 8000a54:	50000400 	.word	0x50000400

08000a58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

//	updateTime(&ourClock);
//	tm1637_DisplayHandle(7, ourClock.timeToShow);
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000a60:	4909      	ldr	r1, [pc, #36]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 f8f8 	bl	8002c5c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000a6c:	4908      	ldr	r1, [pc, #32]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 f9e4 	bl	8002e40 <HAL_RTC_GetDate>
	updateTime_RTC(&sTime);
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fca0 	bl	80013c0 <updateTime_RTC>
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	200000a4 	.word	0x200000a4
 8000a90:	200000a0 	.word	0x200000a0

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_MspInit+0x24>)
 8000aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x24>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	430a      	orrs	r2, r1
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_MspInit+0x24>)
 8000ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_MspInit+0x24>)
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	0549      	lsls	r1, r1, #21
 8000aba:	430a      	orrs	r2, r1
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_RTC_MspInit+0x28>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_RTC_MspInit+0x2c>)
 8000adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_RTC_MspInit+0x2c>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	02c9      	lsls	r1, r1, #11
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40002800 	.word	0x40002800
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d10e      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_TIM_Base_MspInit+0x50>)
 8000b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_TIM_Base_MspInit+0x50>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	430a      	orrs	r2, r1
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f000 fe0d 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 fe1f 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b28:	e00a      	b.n	8000b40 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_TIM_Base_MspInit+0x54>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d105      	bne.n	8000b40 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_TIM_Base_MspInit+0x50>)
 8000b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_TIM_Base_MspInit+0x50>)
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40000400 	.word	0x40000400

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 fcf6 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <TIM2_IRQHandler+0x14>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f002 fb5c 	bl	8003244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	200000c8 	.word	0x200000c8

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f003 fa7e 	bl	80040c8 <__errno>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	18d2      	adds	r2, r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b006      	add	sp, #24
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20005000 	.word	0x20005000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	20000148 	.word	0x20000148
 8000c00:	20000348 	.word	0x20000348

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c14:	f7ff fff6 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	; (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f003 fa49 	bl	80040d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc43 	bl	80004cc <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
   ldr   r0, =_estack
 8000c48:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c54:	08004e0c 	.word	0x08004e0c
  ldr r2, =_sbss
 8000c58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c5c:	20000348 	.word	0x20000348

08000c60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_COMP_IRQHandler>
	...

08000c64 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <delay+0x30>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <delay+0x30>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3f8      	bcc.n	8000c7a <delay+0x16>
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000108 	.word	0x20000108

08000c98 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	23a0      	movs	r3, #160	; 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	2120      	movs	r1, #32
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 ff10 	bl	8001ad6 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	0059      	lsls	r1, r3, #1
 8000cc8:	23a0      	movs	r3, #160	; 0xa0
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 ff02 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	0099      	lsls	r1, r3, #2
 8000ce4:	23a0      	movs	r3, #160	; 0xa0
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 fef4 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <send_to_lcd+0xb4>)
 8000cfe:	001a      	movs	r2, r3
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	f000 fee8 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	480f      	ldr	r0, [pc, #60]	; (8000d50 <send_to_lcd+0xb8>)
 8000d12:	001a      	movs	r2, r3
 8000d14:	2140      	movs	r1, #64	; 0x40
 8000d16:	f000 fede 	bl	8001ad6 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000d1a:	23a0      	movs	r3, #160	; 0xa0
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fed7 	bl	8001ad6 <HAL_GPIO_WritePin>
	delay (20);
 8000d28:	2014      	movs	r0, #20
 8000d2a:	f7ff ff9b 	bl	8000c64 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000d2e:	23a0      	movs	r3, #160	; 0xa0
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	2200      	movs	r2, #0
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fecd 	bl	8001ad6 <HAL_GPIO_WritePin>
	delay (20);
 8000d3c:	2014      	movs	r0, #20
 8000d3e:	f7ff ff91 	bl	8000c64 <delay>
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	50000800 	.word	0x50000800
 8000d50:	50000400 	.word	0x50000400

08000d54 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000d60:	200f      	movs	r0, #15
 8000d62:	183b      	adds	r3, r7, r0
 8000d64:	1dfa      	adds	r2, r7, #7
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	0912      	lsrs	r2, r2, #4
 8000d6a:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2100      	movs	r1, #0
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff ff8f 	bl	8000c98 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	183b      	adds	r3, r7, r0
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	210f      	movs	r1, #15
 8000d84:	400a      	ands	r2, r1
 8000d86:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8000d88:	183b      	adds	r3, r7, r0
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff ff82 	bl	8000c98 <send_to_lcd>
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b005      	add	sp, #20
 8000d9a:	bd90      	pop	{r4, r7, pc}

08000d9c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000da8:	200f      	movs	r0, #15
 8000daa:	183b      	adds	r3, r7, r0
 8000dac:	1dfa      	adds	r2, r7, #7
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	0912      	lsrs	r2, r2, #4
 8000db2:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000db4:	0004      	movs	r4, r0
 8000db6:	183b      	adds	r3, r7, r0
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2101      	movs	r1, #1
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ff6b 	bl	8000c98 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	183b      	adds	r3, r7, r0
 8000dc6:	1dfa      	adds	r2, r7, #7
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	210f      	movs	r1, #15
 8000dcc:	400a      	ands	r2, r1
 8000dce:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8000dd0:	183b      	adds	r3, r7, r0
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ff5e 	bl	8000c98 <send_to_lcd>
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b005      	add	sp, #20
 8000de2:	bd90      	pop	{r4, r7, pc}

08000de4 <lcd_clear>:

void lcd_clear (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff ffb3 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(2);
 8000dee:	2002      	movs	r0, #2
 8000df0:	f000 fbd4 	bl	800159c <HAL_Delay>
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <lcd_put_cur+0x18>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d005      	beq.n	8000e1c <lcd_put_cur+0x22>
 8000e10:	e009      	b.n	8000e26 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	4313      	orrs	r3, r2
 8000e18:	603b      	str	r3, [r7, #0]
            break;
 8000e1a:	e004      	b.n	8000e26 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	22c0      	movs	r2, #192	; 0xc0
 8000e20:	4313      	orrs	r3, r2
 8000e22:	603b      	str	r3, [r7, #0]
            break;
 8000e24:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff ff92 	bl	8000d54 <lcd_send_cmd>
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <lcd_init>:


void lcd_init (void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e3c:	2032      	movs	r0, #50	; 0x32
 8000e3e:	f000 fbad 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e42:	2030      	movs	r0, #48	; 0x30
 8000e44:	f7ff ff86 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e48:	2005      	movs	r0, #5
 8000e4a:	f000 fba7 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e4e:	2030      	movs	r0, #48	; 0x30
 8000e50:	f7ff ff80 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 fba1 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e5a:	2030      	movs	r0, #48	; 0x30
 8000e5c:	f7ff ff7a 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f000 fb9b 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e66:	2020      	movs	r0, #32
 8000e68:	f7ff ff74 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f000 fb95 	bl	800159c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e72:	2028      	movs	r0, #40	; 0x28
 8000e74:	f7ff ff6e 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f000 fb8f 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e7e:	2008      	movs	r0, #8
 8000e80:	f7ff ff68 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 fb89 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff ff62 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 fb83 	bl	800159c <HAL_Delay>
	HAL_Delay(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 fb80 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e9c:	2006      	movs	r0, #6
 8000e9e:	f7ff ff59 	bl	8000d54 <lcd_send_cmd>
	HAL_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f000 fb7a 	bl	800159c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f7ff ff53 	bl	8000d54 <lcd_send_cmd>
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ebc:	e006      	b.n	8000ecc <lcd_send_string+0x18>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff ff68 	bl	8000d9c <lcd_send_data>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f4      	bne.n	8000ebe <lcd_send_string+0xa>
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <tm1637_CLKhigh+0x34>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	0019      	movs	r1, r3
 8000eee:	f000 fdf2 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <tm1637_CLKhigh+0x34>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	0019      	movs	r1, r3
 8000efc:	f000 fdeb 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <tm1637_CLKhigh+0x34>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	0019      	movs	r1, r3
 8000f0a:	f000 fde4 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	50000400 	.word	0x50000400

08000f18 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <tm1637_CLKlow+0x34>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	0019      	movs	r1, r3
 8000f26:	f000 fdd6 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <tm1637_CLKlow+0x34>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	0019      	movs	r1, r3
 8000f34:	f000 fdcf 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <tm1637_CLKlow+0x34>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	0019      	movs	r1, r3
 8000f42:	f000 fdc8 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	50000400 	.word	0x50000400

08000f50 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <tm1637_SDOhigh+0x34>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	f000 fdba 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <tm1637_SDOhigh+0x34>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	f000 fdb3 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <tm1637_SDOhigh+0x34>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	0019      	movs	r1, r3
 8000f7a:	f000 fdac 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	50000400 	.word	0x50000400

08000f88 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <tm1637_SDOlow+0x34>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	0019      	movs	r1, r3
 8000f96:	f000 fd9e 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <tm1637_SDOlow+0x34>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	f000 fd97 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <tm1637_SDOlow+0x34>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	f000 fd90 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	50000400 	.word	0x50000400

08000fc0 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8000fc4:	f7ff ff8c 	bl	8000ee0 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8000fc8:	f7ff ffc2 	bl	8000f50 <tm1637_SDOhigh>
	tm1637_SDOlow();
 8000fcc:	f7ff ffdc 	bl	8000f88 <tm1637_SDOlow>

	tm1637_CLKlow();
 8000fd0:	f7ff ffa2 	bl	8000f18 <tm1637_CLKlow>
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 8000fde:	f7ff ff9b 	bl	8000f18 <tm1637_CLKlow>
	tm1637_SDOlow();
 8000fe2:	f7ff ffd1 	bl	8000f88 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8000fe6:	f7ff ff7b 	bl	8000ee0 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8000fea:	f7ff ffb1 	bl	8000f50 <tm1637_SDOhigh>
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e01a      	b.n	800103c <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8001006:	f7ff ff87 	bl	8000f18 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 800100a:	230f      	movs	r3, #15
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d102      	bne.n	8001022 <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 800101c:	f7ff ff98 	bl	8000f50 <tm1637_SDOhigh>
 8001020:	e001      	b.n	8001026 <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8001022:	f7ff ffb1 	bl	8000f88 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8001026:	f7ff ff5b 	bl	8000ee0 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800102a:	210f      	movs	r1, #15
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3301      	adds	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	187b      	adds	r3, r7, r1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddde      	ble.n	8001006 <tm1637_DataOut+0x12>
	} 
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}

08001052 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 800105a:	230c      	movs	r3, #12
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001066:	2317      	movs	r3, #23
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e018      	b.n	80010a2 <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	001a      	movs	r2, r3
 8001076:	2117      	movs	r1, #23
 8001078:	187b      	adds	r3, r7, r1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	411a      	asrs	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	4193      	sbcs	r3, r2
 8001088:	b2da      	uxtb	r2, r3
 800108a:	0008      	movs	r0, r1
 800108c:	187b      	adds	r3, r7, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	0011      	movs	r1, r2
 8001092:	220c      	movs	r2, #12
 8001094:	18ba      	adds	r2, r7, r2
 8001096:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001098:	183b      	adds	r3, r7, r0
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	183b      	adds	r3, r7, r0
 800109e:	3201      	adds	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	2317      	movs	r3, #23
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b07      	cmp	r3, #7
 80010aa:	d9e1      	bls.n	8001070 <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 80010ac:	f7ff ff88 	bl	8000fc0 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 80010b0:	230c      	movs	r3, #12
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ff9d 	bl	8000ff4 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 80010ba:	f7ff ff2d 	bl	8000f18 <tm1637_CLKlow>
	tm1637_CLKhigh();
 80010be:	f7ff ff0f 	bl	8000ee0 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 80010c2:	f000 f89f 	bl	8001204 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	001a      	movs	r2, r3
 80010cc:	23c0      	movs	r3, #192	; 0xc0
 80010ce:	4013      	ands	r3, r2
 80010d0:	2bc0      	cmp	r3, #192	; 0xc0
 80010d2:	d001      	beq.n	80010d8 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 80010d4:	f7ff ff81 	bl	8000fda <tm1637_EndPacket>
	}

}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}

080010e0 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	000a      	movs	r2, r1
 80010ea:	1cfb      	adds	r3, r7, #3
 80010ec:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 80010ee:	230c      	movs	r3, #12
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 80010fa:	2317      	movs	r3, #23
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e037      	b.n	8001174 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8001104:	2316      	movs	r3, #22
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e01c      	b.n	8001148 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 800110e:	2317      	movs	r3, #23
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	18d3      	adds	r3, r2, r3
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	001a      	movs	r2, r3
 800111c:	2116      	movs	r1, #22
 800111e:	187b      	adds	r3, r7, r1
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	411a      	asrs	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	2201      	movs	r2, #1
 8001128:	4013      	ands	r3, r2
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	4193      	sbcs	r3, r2
 800112e:	b2da      	uxtb	r2, r3
 8001130:	0008      	movs	r0, r1
 8001132:	187b      	adds	r3, r7, r1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0011      	movs	r1, r2
 8001138:	220c      	movs	r2, #12
 800113a:	18ba      	adds	r2, r7, r2
 800113c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 800113e:	183b      	adds	r3, r7, r0
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	183b      	adds	r3, r7, r0
 8001144:	3201      	adds	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	2316      	movs	r3, #22
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b07      	cmp	r3, #7
 8001150:	d9dd      	bls.n	800110e <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 8001152:	230c      	movs	r3, #12
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff4c 	bl	8000ff4 <tm1637_DataOut>
		tm1637_CLKlow();
 800115c:	f7ff fedc 	bl	8000f18 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8001160:	f7ff febe 	bl	8000ee0 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 8001164:	f000 f84e 	bl	8001204 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 8001168:	2117      	movs	r1, #23
 800116a:	187b      	adds	r3, r7, r1
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	187b      	adds	r3, r7, r1
 8001170:	3201      	adds	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	2317      	movs	r3, #23
 8001176:	18fa      	adds	r2, r7, r3
 8001178:	1cfb      	adds	r3, r7, #3
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3c0      	bcc.n	8001104 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 8001182:	f7ff ff2a 	bl	8000fda <tm1637_EndPacket>


}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b006      	add	sp, #24
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	0002      	movs	r2, r0
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 800119c:	240c      	movs	r4, #12
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	0018      	movs	r0, r3
 80011a2:	2314      	movs	r3, #20
 80011a4:	001a      	movs	r2, r3
 80011a6:	2100      	movs	r1, #0
 80011a8:	f002 ff38 	bl	800401c <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 80011ac:	0021      	movs	r1, r4
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	0052      	lsls	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <tm1637_Initialize+0x52>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d114      	bne.n	80011f8 <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <tm1637_Initialize+0x70>)
 80011d8:	0019      	movs	r1, r3
 80011da:	0010      	movs	r0, r2
 80011dc:	f000 fae0 	bl	80017a0 <HAL_GPIO_Init>
			break;
 80011e0:	e00a      	b.n	80011f8 <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	210c      	movs	r1, #12
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2201      	movs	r2, #1
 80011e8:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <tm1637_Initialize+0x70>)
 80011ee:	0019      	movs	r1, r3
 80011f0:	0010      	movs	r0, r2
 80011f2:	f000 fad5 	bl	80017a0 <HAL_GPIO_Init>
			break;
 80011f6:	46c0      	nop			; (mov r8, r8)

	}

}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b009      	add	sp, #36	; 0x24
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	50000c00 	.word	0x50000c00

08001204 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ffc1 	bl	8001190 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 800120e:	f7ff fe83 	bl	8000f18 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001212:	e002      	b.n	800121a <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ffbb 	bl	8001190 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <tm1637_ACKcheck+0x30>)
 8001220:	0019      	movs	r1, r3
 8001222:	0010      	movs	r0, r2
 8001224:	f000 fc3a 	bl	8001a9c <HAL_GPIO_ReadPin>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d1f3      	bne.n	8001214 <tm1637_ACKcheck+0x10>
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	50000400 	.word	0x50000400

08001238 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	0002      	movs	r2, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8001246:	210c      	movs	r1, #12
 8001248:	187b      	adds	r3, r7, r1
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <tm1637_DisplayHandle+0x78>)
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8001250:	250f      	movs	r5, #15
 8001252:	197b      	adds	r3, r7, r5
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b07      	cmp	r3, #7
 800125e:	d81f      	bhi.n	80012a0 <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8001266:	000c      	movs	r4, r1
 8001268:	187b      	adds	r3, r7, r1
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff fef1 	bl	8001052 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8001270:	0021      	movs	r1, r4
 8001272:	187b      	adds	r3, r7, r1
 8001274:	22c0      	movs	r2, #192	; 0xc0
 8001276:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8001278:	187b      	adds	r3, r7, r1
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff fee9 	bl	8001052 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2104      	movs	r1, #4
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff2b 	bl	80010e0 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f810 	bl	80012b4 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8001294:	197b      	adds	r3, r7, r5
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 800129a:	197b      	adds	r3, r7, r5
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	e002      	b.n	80012a6 <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b004      	add	sp, #16
 80012ac:	bdb0      	pop	{r4, r5, r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	08004d60 	.word	0x08004d60

080012b4 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	0002      	movs	r2, r0
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 80012c0:	230c      	movs	r3, #12
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 80012cc:	2316      	movs	r3, #22
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d83e      	bhi.n	800135a <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	1dfa      	adds	r2, r7, #7
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	2178      	movs	r1, #120	; 0x78
 80012e4:	4249      	negs	r1, r1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80012ea:	2317      	movs	r3, #23
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e017      	b.n	8001324 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	2117      	movs	r1, #23
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	411a      	asrs	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	2201      	movs	r2, #1
 8001304:	4013      	ands	r3, r2
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	4193      	sbcs	r3, r2
 800130a:	b2da      	uxtb	r2, r3
 800130c:	0008      	movs	r0, r1
 800130e:	187b      	adds	r3, r7, r1
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	0011      	movs	r1, r2
 8001314:	220c      	movs	r2, #12
 8001316:	18ba      	adds	r2, r7, r2
 8001318:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 800131a:	183b      	adds	r3, r7, r0
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	183b      	adds	r3, r7, r0
 8001320:	3201      	adds	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	2317      	movs	r3, #23
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b07      	cmp	r3, #7
 800132c:	d9e2      	bls.n	80012f4 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 800132e:	f7ff fe47 	bl	8000fc0 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 8001332:	230c      	movs	r3, #12
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff fe5c 	bl	8000ff4 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 800133c:	f7ff fdec 	bl	8000f18 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8001340:	f7ff fdce 	bl	8000ee0 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8001344:	f7ff ff5e 	bl	8001204 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8001348:	f7ff fe47 	bl	8000fda <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 800134c:	2116      	movs	r1, #22
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	e002      	b.n	8001360 <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 800135a:	2316      	movs	r3, #22
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bd80      	pop	{r7, pc}

08001368 <setTime_RTC>:
#include <stdio.h>
#include "clock_rtc.h"
#include "TM1637.h"

void setTime_RTC(RTC_TimeTypeDef *Time, uint8_t Godziny, uint8_t Minuty)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	0008      	movs	r0, r1
 8001372:	0011      	movs	r1, r2
 8001374:	1cfb      	adds	r3, r7, #3
 8001376:	1c02      	adds	r2, r0, #0
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	1cbb      	adds	r3, r7, #2
 800137c:	1c0a      	adds	r2, r1, #0
 800137e:	701a      	strb	r2, [r3, #0]
  (*Time).Hours = Godziny;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1cfa      	adds	r2, r7, #3
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	701a      	strb	r2, [r3, #0]
  (*Time).Minutes = Minuty;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1cba      	adds	r2, r7, #2
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	705a      	strb	r2, [r3, #1]
  printf("%d\n",(*Time).Minutes);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	001a      	movs	r2, r3
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <setTime_RTC+0x54>)
 8001398:	0011      	movs	r1, r2
 800139a:	0018      	movs	r0, r3
 800139c:	f002 fde2 	bl	8003f64 <iprintf>
  (*Time).Seconds = 0x0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	709a      	strb	r2, [r3, #2]
  (*Time).DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  (*Time).StoreOperation = RTC_STOREOPERATION_RESET;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	08004d64 	.word	0x08004d64

080013c0 <updateTime_RTC>:

void updateTime_RTC(RTC_TimeTypeDef *Time)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint8_t total_time[4];
	total_time[0] = int2inta((*Time).Hours/10);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	210a      	movs	r1, #10
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7fe feac 	bl	800012c <__udivsi3>
 80013d4:	0003      	movs	r3, r0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	0018      	movs	r0, r3
 80013da:	f000 f845 	bl	8001468 <int2inta>
 80013de:	0003      	movs	r3, r0
 80013e0:	001a      	movs	r2, r3
 80013e2:	240c      	movs	r4, #12
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	701a      	strb	r2, [r3, #0]
	total_time[1] = int2inta((*Time).Hours%10);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	210a      	movs	r1, #10
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7fe ff22 	bl	8000238 <__aeabi_uidivmod>
 80013f4:	000b      	movs	r3, r1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	0018      	movs	r0, r3
 80013fa:	f000 f835 	bl	8001468 <int2inta>
 80013fe:	0003      	movs	r3, r0
 8001400:	001a      	movs	r2, r3
 8001402:	193b      	adds	r3, r7, r4
 8001404:	705a      	strb	r2, [r3, #1]
	total_time[2] = int2inta((*Time).Minutes/10);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	210a      	movs	r1, #10
 800140c:	0018      	movs	r0, r3
 800140e:	f7fe fe8d 	bl	800012c <__udivsi3>
 8001412:	0003      	movs	r3, r0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f826 	bl	8001468 <int2inta>
 800141c:	0003      	movs	r3, r0
 800141e:	001a      	movs	r2, r3
 8001420:	193b      	adds	r3, r7, r4
 8001422:	709a      	strb	r2, [r3, #2]
	total_time[3] = int2inta((*Time).Minutes%10);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	785b      	ldrb	r3, [r3, #1]
 8001428:	210a      	movs	r1, #10
 800142a:	0018      	movs	r0, r3
 800142c:	f7fe ff04 	bl	8000238 <__aeabi_uidivmod>
 8001430:	000b      	movs	r3, r1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	0018      	movs	r0, r3
 8001436:	f000 f817 	bl	8001468 <int2inta>
 800143a:	0003      	movs	r3, r0
 800143c:	001a      	movs	r2, r3
 800143e:	193b      	adds	r3, r7, r4
 8001440:	70da      	strb	r2, [r3, #3]
	printf("%d\n",(*Time).Minutes);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	001a      	movs	r2, r3
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <updateTime_RTC+0xa4>)
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f002 fd89 	bl	8003f64 <iprintf>
	tm1637_DisplayHandle(7, total_time);
 8001452:	193b      	adds	r3, r7, r4
 8001454:	0019      	movs	r1, r3
 8001456:	2007      	movs	r0, #7
 8001458:	f7ff feee 	bl	8001238 <tm1637_DisplayHandle>
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b005      	add	sp, #20
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	08004d64 	.word	0x08004d64

08001468 <int2inta>:

uint8_t int2inta (uint8_t c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	0002      	movs	r2, r0
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	701a      	strb	r2, [r3, #0]
	switch(c)
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b09      	cmp	r3, #9
 800147a:	d818      	bhi.n	80014ae <int2inta+0x46>
 800147c:	009a      	lsls	r2, r3, #2
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <int2inta+0x50>)
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 8001486:	233f      	movs	r3, #63	; 0x3f
 8001488:	e012      	b.n	80014b0 <int2inta+0x48>
		case 1 : return 0x06;
 800148a:	2306      	movs	r3, #6
 800148c:	e010      	b.n	80014b0 <int2inta+0x48>
		case 2 : return 0x5b;
 800148e:	235b      	movs	r3, #91	; 0x5b
 8001490:	e00e      	b.n	80014b0 <int2inta+0x48>
		case 3 : return 0x4f;
 8001492:	234f      	movs	r3, #79	; 0x4f
 8001494:	e00c      	b.n	80014b0 <int2inta+0x48>
		case 4 : return 0x66;
 8001496:	2366      	movs	r3, #102	; 0x66
 8001498:	e00a      	b.n	80014b0 <int2inta+0x48>
		case 5 : return 0x6d;
 800149a:	236d      	movs	r3, #109	; 0x6d
 800149c:	e008      	b.n	80014b0 <int2inta+0x48>
		case 6 : return 0x7d;
 800149e:	237d      	movs	r3, #125	; 0x7d
 80014a0:	e006      	b.n	80014b0 <int2inta+0x48>
		case 7 : return 0x07;
 80014a2:	2307      	movs	r3, #7
 80014a4:	e004      	b.n	80014b0 <int2inta+0x48>
		case 8 : return 0x7f;
 80014a6:	237f      	movs	r3, #127	; 0x7f
 80014a8:	e002      	b.n	80014b0 <int2inta+0x48>
		case 9 : return 0x6f;
 80014aa:	236f      	movs	r3, #111	; 0x6f
 80014ac:	e000      	b.n	80014b0 <int2inta+0x48>
	}
	return 0x3f;
 80014ae:	233f      	movs	r3, #63	; 0x3f
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08004d84 	.word	0x08004d84

080014bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_Init+0x3c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_Init+0x3c>)
 80014ce:	2140      	movs	r1, #64	; 0x40
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d4:	2000      	movs	r0, #0
 80014d6:	f000 f811 	bl	80014fc <HAL_InitTick>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e001      	b.n	80014ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e6:	f7ff fadb 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_InitTick+0x5c>)
 8001506:	681c      	ldr	r4, [r3, #0]
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	0019      	movs	r1, r3
 800150e:	23fa      	movs	r3, #250	; 0xfa
 8001510:	0098      	lsls	r0, r3, #2
 8001512:	f7fe fe0b 	bl	800012c <__udivsi3>
 8001516:	0003      	movs	r3, r0
 8001518:	0019      	movs	r1, r3
 800151a:	0020      	movs	r0, r4
 800151c:	f7fe fe06 	bl	800012c <__udivsi3>
 8001520:	0003      	movs	r3, r0
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f92f 	bl	8001786 <HAL_SYSTICK_Config>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e00f      	b.n	8001550 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d80b      	bhi.n	800154e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2301      	movs	r3, #1
 800153a:	425b      	negs	r3, r3
 800153c:	2200      	movs	r2, #0
 800153e:	0018      	movs	r0, r3
 8001540:	f000 f8fc 	bl	800173c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_InitTick+0x64>)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b003      	add	sp, #12
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	001a      	movs	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	18d2      	adds	r2, r2, r3
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_IncTick+0x20>)
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	20000008 	.word	0x20000008
 8001584:	2000014c 	.word	0x2000014c

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	2000014c 	.word	0x2000014c

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff0 	bl	8001588 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	001a      	movs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	f7ff ffe0 	bl	8001588 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b004      	add	sp, #16
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0002      	movs	r2, r0
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b7f      	cmp	r3, #127	; 0x7f
 80015f6:	d809      	bhi.n	800160c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	001a      	movs	r2, r3
 80015fe:	231f      	movs	r3, #31
 8001600:	401a      	ands	r2, r3
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_EnableIRQ+0x30>)
 8001604:	2101      	movs	r1, #1
 8001606:	4091      	lsls	r1, r2
 8001608:	000a      	movs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
  }
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d828      	bhi.n	8001680 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800162e:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <__NVIC_SetPriority+0xd4>)
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b25b      	sxtb	r3, r3
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	33c0      	adds	r3, #192	; 0xc0
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	589b      	ldr	r3, [r3, r2]
 800163e:	1dfa      	adds	r2, r7, #7
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0011      	movs	r1, r2
 8001644:	2203      	movs	r2, #3
 8001646:	400a      	ands	r2, r1
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	401a      	ands	r2, r3
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	2303      	movs	r3, #3
 8001666:	4003      	ands	r3, r0
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	481f      	ldr	r0, [pc, #124]	; (80016ec <__NVIC_SetPriority+0xd4>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	430a      	orrs	r2, r1
 8001678:	33c0      	adds	r3, #192	; 0xc0
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800167e:	e031      	b.n	80016e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <__NVIC_SetPriority+0xd8>)
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	0019      	movs	r1, r3
 8001688:	230f      	movs	r3, #15
 800168a:	400b      	ands	r3, r1
 800168c:	3b08      	subs	r3, #8
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3306      	adds	r3, #6
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	18d3      	adds	r3, r2, r3
 8001696:	3304      	adds	r3, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1dfa      	adds	r2, r7, #7
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	0011      	movs	r1, r2
 80016a0:	2203      	movs	r2, #3
 80016a2:	400a      	ands	r2, r1
 80016a4:	00d2      	lsls	r2, r2, #3
 80016a6:	21ff      	movs	r1, #255	; 0xff
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	401a      	ands	r2, r3
 80016b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	22ff      	movs	r2, #255	; 0xff
 80016b8:	401a      	ands	r2, r3
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0018      	movs	r0, r3
 80016c0:	2303      	movs	r3, #3
 80016c2:	4003      	ands	r3, r0
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <__NVIC_SetPriority+0xd8>)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	001c      	movs	r4, r3
 80016d0:	230f      	movs	r3, #15
 80016d2:	4023      	ands	r3, r4
 80016d4:	3b08      	subs	r3, #8
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	430a      	orrs	r2, r1
 80016da:	3306      	adds	r3, #6
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	18c3      	adds	r3, r0, r3
 80016e0:	3304      	adds	r3, #4
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b003      	add	sp, #12
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1e5a      	subs	r2, r3, #1
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	045b      	lsls	r3, r3, #17
 8001704:	429a      	cmp	r2, r3
 8001706:	d301      	bcc.n	800170c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001708:	2301      	movs	r3, #1
 800170a:	e010      	b.n	800172e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <SysTick_Config+0x44>)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	3a01      	subs	r2, #1
 8001712:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001714:	2301      	movs	r3, #1
 8001716:	425b      	negs	r3, r3
 8001718:	2103      	movs	r1, #3
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff ff7c 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x44>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x44>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	210f      	movs	r1, #15
 8001748:	187b      	adds	r3, r7, r1
 800174a:	1c02      	adds	r2, r0, #0
 800174c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	187b      	adds	r3, r7, r1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <__NVIC_SetPriority>
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	0002      	movs	r2, r0
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff ff33 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff ffaf 	bl	80016f4 <SysTick_Config>
 8001796:	0003      	movs	r3, r0
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017b6:	e155      	b.n	8001a64 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4091      	lsls	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d100      	bne.n	80017d0 <HAL_GPIO_Init+0x30>
 80017ce:	e146      	b.n	8001a5e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d005      	beq.n	80017e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d130      	bne.n	800184a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	43da      	mvns	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800181e:	2201      	movs	r2, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	43da      	mvns	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	2201      	movs	r2, #1
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	4013      	ands	r3, r2
 8001852:	2b03      	cmp	r3, #3
 8001854:	d017      	beq.n	8001886 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	43da      	mvns	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2203      	movs	r2, #3
 800188c:	4013      	ands	r3, r2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d123      	bne.n	80018da <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	58d3      	ldr	r3, [r2, r3]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2207      	movs	r2, #7
 80018a4:	4013      	ands	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	409a      	lsls	r2, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2107      	movs	r1, #7
 80018be:	400b      	ands	r3, r1
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	6939      	ldr	r1, [r7, #16]
 80018d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	409a      	lsls	r2, r3
 80018e8:	0013      	movs	r3, r2
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2203      	movs	r2, #3
 80018f8:	401a      	ands	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	23c0      	movs	r3, #192	; 0xc0
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	4013      	ands	r3, r2
 8001918:	d100      	bne.n	800191c <HAL_GPIO_Init+0x17c>
 800191a:	e0a0      	b.n	8001a5e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191c:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_GPIO_Init+0x2dc>)
 800191e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001920:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_GPIO_Init+0x2dc>)
 8001922:	2101      	movs	r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001928:	4a55      	ldr	r2, [pc, #340]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	589b      	ldr	r3, [r3, r2]
 8001934:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2203      	movs	r2, #3
 800193a:	4013      	ands	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	409a      	lsls	r2, r3
 8001942:	0013      	movs	r3, r2
 8001944:	43da      	mvns	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	23a0      	movs	r3, #160	; 0xa0
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	429a      	cmp	r2, r3
 8001954:	d01f      	beq.n	8001996 <HAL_GPIO_Init+0x1f6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4a      	ldr	r2, [pc, #296]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0x1f2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0x1ee>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_GPIO_Init+0x1ea>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0x1e6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x1e2>
 800197e:	2305      	movs	r3, #5
 8001980:	e00a      	b.n	8001998 <HAL_GPIO_Init+0x1f8>
 8001982:	2306      	movs	r3, #6
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x1f8>
 8001986:	2304      	movs	r3, #4
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x1f8>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x1f8>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x1f8>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x1f8>
 8001996:	2300      	movs	r3, #0
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	2103      	movs	r1, #3
 800199c:	400a      	ands	r2, r1
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a8:	4935      	ldr	r1, [pc, #212]	; (8001a80 <HAL_GPIO_Init+0x2e0>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43da      	mvns	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	035b      	lsls	r3, r3, #13
 80019ce:	4013      	ands	r3, r2
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43da      	mvns	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	039b      	lsls	r3, r3, #14
 80019f8:	4013      	ands	r3, r2
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43da      	mvns	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	025b      	lsls	r3, r3, #9
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	40da      	lsrs	r2, r3
 8001a6c:	1e13      	subs	r3, r2, #0
 8001a6e:	d000      	beq.n	8001a72 <HAL_GPIO_Init+0x2d2>
 8001a70:	e6a2      	b.n	80017b8 <HAL_GPIO_Init+0x18>
  }
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b006      	add	sp, #24
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	50000400 	.word	0x50000400
 8001a88:	50000800 	.word	0x50000800
 8001a8c:	50000c00 	.word	0x50000c00
 8001a90:	50001000 	.word	0x50001000
 8001a94:	50001c00 	.word	0x50001c00
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	1cbb      	adds	r3, r7, #2
 8001aa8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	1cba      	adds	r2, r7, #2
 8001ab0:	8812      	ldrh	r2, [r2, #0]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab6:	230f      	movs	r3, #15
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e003      	b.n	8001ac8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ac8:	230f      	movs	r3, #15
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	781b      	ldrb	r3, [r3, #0]
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b004      	add	sp, #16
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	0008      	movs	r0, r1
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	1cbb      	adds	r3, r7, #2
 8001ae4:	1c02      	adds	r2, r0, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
 8001ae8:	1c7b      	adds	r3, r7, #1
 8001aea:	1c0a      	adds	r2, r1, #0
 8001aec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aee:	1c7b      	adds	r3, r7, #1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af6:	1cbb      	adds	r3, r7, #2
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001afe:	e003      	b.n	8001b08 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b00:	1cbb      	adds	r3, r7, #2
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f000 fbbf 	bl	80022a2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b24:	4bc9      	ldr	r3, [pc, #804]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	220c      	movs	r2, #12
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2e:	4bc7      	ldr	r3, [pc, #796]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d100      	bne.n	8001b46 <HAL_RCC_OscConfig+0x36>
 8001b44:	e07e      	b.n	8001c44 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d007      	beq.n	8001b5c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x68>
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d10d      	bne.n	8001b78 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	4bbb      	ldr	r3, [pc, #748]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	4013      	ands	r3, r2
 8001b66:	d100      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5a>
 8001b68:	e06b      	b.n	8001c42 <HAL_RCC_OscConfig+0x132>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d167      	bne.n	8001c42 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f000 fb95 	bl	80022a2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_OscConfig+0x84>
 8001b84:	4bb1      	ldr	r3, [pc, #708]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4bb0      	ldr	r3, [pc, #704]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	0249      	lsls	r1, r1, #9
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e027      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	23a0      	movs	r3, #160	; 0xa0
 8001b9a:	02db      	lsls	r3, r3, #11
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d10e      	bne.n	8001bbe <HAL_RCC_OscConfig+0xae>
 8001ba0:	4baa      	ldr	r3, [pc, #680]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4ba9      	ldr	r3, [pc, #676]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	02c9      	lsls	r1, r1, #11
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4ba7      	ldr	r3, [pc, #668]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4ba6      	ldr	r3, [pc, #664]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	0249      	lsls	r1, r1, #9
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e012      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001bbe:	4ba3      	ldr	r3, [pc, #652]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4ba2      	ldr	r3, [pc, #648]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001bc4:	49a2      	ldr	r1, [pc, #648]	; (8001e50 <HAL_RCC_OscConfig+0x340>)
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4ba0      	ldr	r3, [pc, #640]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	025b      	lsls	r3, r3, #9
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4b9c      	ldr	r3, [pc, #624]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b9b      	ldr	r3, [pc, #620]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001bde:	499d      	ldr	r1, [pc, #628]	; (8001e54 <HAL_RCC_OscConfig+0x344>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d015      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fccc 	bl	8001588 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fcc7 	bl	8001588 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d902      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	f000 fb4c 	bl	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c0a:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	4013      	ands	r3, r2
 8001c14:	d0ef      	beq.n	8001bf6 <HAL_RCC_OscConfig+0xe6>
 8001c16:	e015      	b.n	8001c44 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fcb6 	bl	8001588 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c22:	f7ff fcb1 	bl	8001588 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	; 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e336      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c34:	4b85      	ldr	r3, [pc, #532]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x112>
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d100      	bne.n	8001c50 <HAL_RCC_OscConfig+0x140>
 8001c4e:	e099      	b.n	8001d84 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	2220      	movs	r2, #32
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001c64:	2120      	movs	r1, #32
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	4393      	bics	r3, r2
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d13e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1ec>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d13b      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c84:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_RCC_OscConfig+0x188>
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e304      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x348>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	021a      	lsls	r2, r3, #8
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2209      	movs	r2, #9
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc0:	f000 fc42 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8001cc4:	0001      	movs	r1, r0
 8001cc6:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	220f      	movs	r2, #15
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a62      	ldr	r2, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x34c>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	40da      	lsrs	r2, r3
 8001cd8:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <HAL_RCC_OscConfig+0x350>)
 8001cda:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x354>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2513      	movs	r5, #19
 8001ce2:	197c      	adds	r4, r7, r5
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff fc09 	bl	80014fc <HAL_InitTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001cee:	197b      	adds	r3, r7, r5
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d046      	beq.n	8001d84 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001cf6:	197b      	adds	r3, r7, r5
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	e2d2      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d027      	beq.n	8001d52 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2209      	movs	r2, #9
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc38 	bl	8001588 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fc33 	bl	8001588 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e2b8      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d30:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2204      	movs	r2, #4
 8001d36:	4013      	ands	r3, r2
 8001d38:	d0f1      	beq.n	8001d1e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_RCC_OscConfig+0x348>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	438a      	bics	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fc13 	bl	8001588 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff fc0e 	bl	8001588 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e293      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d1f1      	bne.n	8001d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2210      	movs	r2, #16
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d100      	bne.n	8001d90 <HAL_RCC_OscConfig+0x280>
 8001d8e:	e0a2      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d140      	bne.n	8001e18 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x29e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e279      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <HAL_RCC_OscConfig+0x358>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	0a19      	lsrs	r1, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	061a      	lsls	r2, r3, #24
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	0b5b      	lsrs	r3, r3, #13
 8001ddc:	3301      	adds	r3, #1
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	0212      	lsls	r2, r2, #8
 8001de2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	210f      	movs	r1, #15
 8001dec:	400b      	ands	r3, r1
 8001dee:	491b      	ldr	r1, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x34c>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCC_OscConfig+0x350>)
 8001df6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_RCC_OscConfig+0x354>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2513      	movs	r5, #19
 8001dfe:	197c      	adds	r4, r7, r5
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fb7b 	bl	80014fc <HAL_InitTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d061      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	e244      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d040      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_OscConfig+0x33c>)
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0049      	lsls	r1, r1, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fbab 	bl	8001588 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e36:	e019      	b.n	8001e6c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e38:	f7ff fba6 	bl	8001588 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d912      	bls.n	8001e6c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e22b      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	fffeffff 	.word	0xfffeffff
 8001e54:	fffbffff 	.word	0xfffbffff
 8001e58:	ffffe0ff 	.word	0xffffe0ff
 8001e5c:	08004d68 	.word	0x08004d68
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004
 8001e68:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e6c:	4bca      	ldr	r3, [pc, #808]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d0df      	beq.n	8001e38 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e78:	4bc7      	ldr	r3, [pc, #796]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4ac7      	ldr	r2, [pc, #796]	; (800219c <HAL_RCC_OscConfig+0x68c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e86:	4bc4      	ldr	r3, [pc, #784]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8c:	4bc2      	ldr	r3, [pc, #776]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	0a19      	lsrs	r1, r3, #8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	061a      	lsls	r2, r3, #24
 8001e9a:	4bbf      	ldr	r3, [pc, #764]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	e019      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ea2:	4bbd      	ldr	r3, [pc, #756]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4bbc      	ldr	r3, [pc, #752]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001ea8:	49bd      	ldr	r1, [pc, #756]	; (80021a0 <HAL_RCC_OscConfig+0x690>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff fb6b 	bl	8001588 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fb66 	bl	8001588 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1eb      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eca:	4bb3      	ldr	r3, [pc, #716]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2208      	movs	r2, #8
 8001edc:	4013      	ands	r3, r2
 8001ede:	d036      	beq.n	8001f4e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d019      	beq.n	8001f1c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee8:	4bab      	ldr	r3, [pc, #684]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eec:	4baa      	ldr	r3, [pc, #680]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fb48 	bl	8001588 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff fb43 	bl	8001588 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1c8      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f10:	4ba1      	ldr	r3, [pc, #644]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d0f1      	beq.n	8001efe <HAL_RCC_OscConfig+0x3ee>
 8001f1a:	e018      	b.n	8001f4e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1c:	4b9e      	ldr	r3, [pc, #632]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f20:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	438a      	bics	r2, r1
 8001f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fb2e 	bl	8001588 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff fb29 	bl	8001588 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1ae      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f44:	4b94      	ldr	r3, [pc, #592]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d1f1      	bne.n	8001f32 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2204      	movs	r2, #4
 8001f54:	4013      	ands	r3, r2
 8001f56:	d100      	bne.n	8001f5a <HAL_RCC_OscConfig+0x44a>
 8001f58:	e0ae      	b.n	80020b8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2023      	movs	r0, #35	; 0x23
 8001f5c:	183b      	adds	r3, r7, r0
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	055b      	lsls	r3, r3, #21
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b8a      	ldr	r3, [pc, #552]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0549      	lsls	r1, r1, #21
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f7c:	183b      	adds	r3, r7, r0
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x694>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x694>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_RCC_OscConfig+0x694>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0049      	lsls	r1, r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff faf4 	bl	8001588 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff faef 	bl	8001588 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e174      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x694>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4d0>
 8001fd0:	4b71      	ldr	r3, [pc, #452]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	0049      	lsls	r1, r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8001fde:	e031      	b.n	8002044 <HAL_RCC_OscConfig+0x534>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10c      	bne.n	8002002 <HAL_RCC_OscConfig+0x4f2>
 8001fe8:	4b6b      	ldr	r3, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001fee:	496c      	ldr	r1, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x690>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff8:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8001ffa:	496b      	ldr	r1, [pc, #428]	; (80021a8 <HAL_RCC_OscConfig+0x698>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	651a      	str	r2, [r3, #80]	; 0x50
 8002000:	e020      	b.n	8002044 <HAL_RCC_OscConfig+0x534>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	23a0      	movs	r3, #160	; 0xa0
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	429a      	cmp	r2, r3
 800200c:	d10e      	bne.n	800202c <HAL_RCC_OscConfig+0x51c>
 800200e:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8002010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002012:	4b61      	ldr	r3, [pc, #388]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	00c9      	lsls	r1, r1, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	651a      	str	r2, [r3, #80]	; 0x50
 800201c:	4b5e      	ldr	r3, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800201e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002020:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0049      	lsls	r1, r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	651a      	str	r2, [r3, #80]	; 0x50
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x534>
 800202c:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800202e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8002032:	495b      	ldr	r1, [pc, #364]	; (80021a0 <HAL_RCC_OscConfig+0x690>)
 8002034:	400a      	ands	r2, r1
 8002036:	651a      	str	r2, [r3, #80]	; 0x50
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800203a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203c:	4b56      	ldr	r3, [pc, #344]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800203e:	495a      	ldr	r1, [pc, #360]	; (80021a8 <HAL_RCC_OscConfig+0x698>)
 8002040:	400a      	ands	r2, r1
 8002042:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7ff fa9c 	bl	8001588 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002054:	e009      	b.n	800206a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7ff fa97 	bl	8001588 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_OscConfig+0x69c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e11b      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800206c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d0ef      	beq.n	8002056 <HAL_RCC_OscConfig+0x546>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7ff fa86 	bl	8001588 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002080:	e009      	b.n	8002096 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff fa81 	bl	8001588 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	4a47      	ldr	r2, [pc, #284]	; (80021ac <HAL_RCC_OscConfig+0x69c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e105      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002096:	4b40      	ldr	r3, [pc, #256]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8002098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d1ef      	bne.n	8002082 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a2:	2323      	movs	r3, #35	; 0x23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 80020ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 80020b2:	493f      	ldr	r1, [pc, #252]	; (80021b0 <HAL_RCC_OscConfig+0x6a0>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2220      	movs	r2, #32
 80020be:	4013      	ands	r3, r2
 80020c0:	d049      	beq.n	8002156 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d026      	beq.n	8002118 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 80020d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_OscConfig+0x6a4>)
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_RCC_OscConfig+0x6a4>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0189      	lsls	r1, r1, #6
 80020ec:	430a      	orrs	r2, r1
 80020ee:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fa4a 	bl	8001588 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020fa:	f7ff fa45 	bl	8001588 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0ca      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d0f1      	beq.n	80020fa <HAL_RCC_OscConfig+0x5ea>
 8002116:	e01e      	b.n	8002156 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <HAL_RCC_OscConfig+0x6a4>)
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_OscConfig+0x6a4>)
 800212a:	4923      	ldr	r1, [pc, #140]	; (80021b8 <HAL_RCC_OscConfig+0x6a8>)
 800212c:	400a      	ands	r2, r1
 800212e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fa2a 	bl	8001588 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213a:	f7ff fa25 	bl	8001588 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0aa      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d1f1      	bne.n	800213a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d100      	bne.n	8002160 <HAL_RCC_OscConfig+0x650>
 800215e:	e09f      	b.n	80022a0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d100      	bne.n	8002168 <HAL_RCC_OscConfig+0x658>
 8002166:	e078      	b.n	800225a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	2b02      	cmp	r3, #2
 800216e:	d159      	bne.n	8002224 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_RCC_OscConfig+0x688>)
 8002176:	4911      	ldr	r1, [pc, #68]	; (80021bc <HAL_RCC_OscConfig+0x6ac>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fa04 	bl	8001588 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff f9ff 	bl	8001588 <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d915      	bls.n	80021c0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e084      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
 8002198:	40021000 	.word	0x40021000
 800219c:	ffff1fff 	.word	0xffff1fff
 80021a0:	fffffeff 	.word	0xfffffeff
 80021a4:	40007000 	.word	0x40007000
 80021a8:	fffffbff 	.word	0xfffffbff
 80021ac:	00001388 	.word	0x00001388
 80021b0:	efffffff 	.word	0xefffffff
 80021b4:	40010000 	.word	0x40010000
 80021b8:	ffffdfff 	.word	0xffffdfff
 80021bc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021c0:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	049b      	lsls	r3, r3, #18
 80021c8:	4013      	ands	r3, r2
 80021ca:	d1dc      	bne.n	8002186 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a37      	ldr	r2, [pc, #220]	; (80022b0 <HAL_RCC_OscConfig+0x7a0>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	431a      	orrs	r2, r3
 80021e6:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 80021e8:	430a      	orrs	r2, r1
 80021ea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	0449      	lsls	r1, r1, #17
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7ff f9c5 	bl	8001588 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7ff f9c0 	bl	8001588 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e045      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	049b      	lsls	r3, r3, #18
 800221e:	4013      	ands	r3, r2
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x6f4>
 8002222:	e03d      	b.n	80022a0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 800222a:	4922      	ldr	r1, [pc, #136]	; (80022b4 <HAL_RCC_OscConfig+0x7a4>)
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff f9aa 	bl	8001588 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff f9a5 	bl	8001588 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e02a      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	049b      	lsls	r3, r3, #18
 8002254:	4013      	ands	r3, r2
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x72a>
 8002258:	e022      	b.n	80022a0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e01d      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_OscConfig+0x79c>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	401a      	ands	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	429a      	cmp	r2, r3
 800227a:	d10f      	bne.n	800229c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	23f0      	movs	r3, #240	; 0xf0
 8002280:	039b      	lsls	r3, r3, #14
 8002282:	401a      	ands	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d107      	bne.n	800229c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	23c0      	movs	r3, #192	; 0xc0
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b00a      	add	sp, #40	; 0x28
 80022a8:	bdb0      	pop	{r4, r5, r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	40021000 	.word	0x40021000
 80022b0:	ff02ffff 	.word	0xff02ffff
 80022b4:	feffffff 	.word	0xfeffffff

080022b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e128      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b96      	ldr	r3, [pc, #600]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d91e      	bls.n	8002318 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b93      	ldr	r3, [pc, #588]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2201      	movs	r2, #1
 80022e0:	4393      	bics	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	4b90      	ldr	r3, [pc, #576]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022ec:	f7ff f94c 	bl	8001588 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f4:	e009      	b.n	800230a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7ff f947 	bl	8001588 <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	4a8a      	ldr	r2, [pc, #552]	; (800252c <HAL_RCC_ClockConfig+0x274>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e109      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b87      	ldr	r3, [pc, #540]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d1ee      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002322:	4b83      	ldr	r3, [pc, #524]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	22f0      	movs	r2, #240	; 0xf0
 8002328:	4393      	bics	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d100      	bne.n	8002342 <HAL_RCC_ClockConfig+0x8a>
 8002340:	e089      	b.n	8002456 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800234a:	4b79      	ldr	r3, [pc, #484]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	4013      	ands	r3, r2
 8002354:	d120      	bne.n	8002398 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0e1      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002362:	4b73      	ldr	r3, [pc, #460]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	049b      	lsls	r3, r3, #18
 800236a:	4013      	ands	r3, r2
 800236c:	d114      	bne.n	8002398 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0d5      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d106      	bne.n	8002388 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800237a:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2204      	movs	r2, #4
 8002380:	4013      	ands	r3, r2
 8002382:	d109      	bne.n	8002398 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0ca      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002388:	4b69      	ldr	r3, [pc, #420]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0c2      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002398:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2203      	movs	r2, #3
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7ff f8ec 	bl	8001588 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d111      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	e009      	b.n	80023d2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023be:	f7ff f8e3 	bl	8001588 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x274>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0a5      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	220c      	movs	r2, #12
 80023d8:	4013      	ands	r3, r2
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d1ef      	bne.n	80023be <HAL_RCC_ClockConfig+0x106>
 80023de:	e03a      	b.n	8002456 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d111      	bne.n	800240c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e8:	e009      	b.n	80023fe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7ff f8cd 	bl	8001588 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a4d      	ldr	r2, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x274>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e08f      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fe:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	220c      	movs	r2, #12
 8002404:	4013      	ands	r3, r2
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d1ef      	bne.n	80023ea <HAL_RCC_ClockConfig+0x132>
 800240a:	e024      	b.n	8002456 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d11b      	bne.n	800244c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002414:	e009      	b.n	800242a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002416:	f7ff f8b7 	bl	8001588 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	4a42      	ldr	r2, [pc, #264]	; (800252c <HAL_RCC_ClockConfig+0x274>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e079      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	220c      	movs	r2, #12
 8002430:	4013      	ands	r3, r2
 8002432:	2b04      	cmp	r3, #4
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_ClockConfig+0x15e>
 8002436:	e00e      	b.n	8002456 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7ff f8a6 	bl	8001588 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	4a3a      	ldr	r2, [pc, #232]	; (800252c <HAL_RCC_ClockConfig+0x274>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e068      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	220c      	movs	r2, #12
 8002452:	4013      	ands	r3, r2
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d21e      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	4393      	bics	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002476:	f7ff f887 	bl	8001588 <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	e009      	b.n	8002494 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7ff f882 	bl	8001588 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_RCC_ClockConfig+0x274>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e044      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_ClockConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	4013      	ands	r3, r2
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d1ee      	bne.n	8002480 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2204      	movs	r2, #4
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x27c>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4a1a      	ldr	r2, [pc, #104]	; (8002538 <HAL_RCC_ClockConfig+0x280>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00da      	lsls	r2, r3, #3
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e0:	f000 f832 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80024e4:	0001      	movs	r1, r0
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x278>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	220f      	movs	r2, #15
 80024ee:	4013      	ands	r3, r2
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_RCC_ClockConfig+0x284>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	000a      	movs	r2, r1
 80024f6:	40da      	lsrs	r2, r3
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_ClockConfig+0x288>)
 80024fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_RCC_ClockConfig+0x28c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	250b      	movs	r5, #11
 8002502:	197c      	adds	r4, r7, r5
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe fff9 	bl	80014fc <HAL_InitTick>
 800250a:	0003      	movs	r3, r0
 800250c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800250e:	197b      	adds	r3, r7, r5
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002516:	197b      	adds	r3, r7, r5
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	e000      	b.n	800251e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bdb0      	pop	{r4, r5, r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	40022000 	.word	0x40022000
 800252c:	00001388 	.word	0x00001388
 8002530:	40021000 	.word	0x40021000
 8002534:	fffff8ff 	.word	0xfffff8ff
 8002538:	ffffc7ff 	.word	0xffffc7ff
 800253c:	08004d68 	.word	0x08004d68
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b08e      	sub	sp, #56	; 0x38
 800254c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002556:	230c      	movs	r3, #12
 8002558:	4013      	ands	r3, r2
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d014      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x40>
 800255e:	d900      	bls.n	8002562 <HAL_RCC_GetSysClockFreq+0x1a>
 8002560:	e07b      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x112>
 8002562:	2b04      	cmp	r3, #4
 8002564:	d002      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x24>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x3a>
 800256a:	e076      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800256c:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2210      	movs	r2, #16
 8002572:	4013      	ands	r3, r2
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800257a:	e07c      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCC_GetSysClockFreq+0x140>)
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002580:	e079      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002582:	4b42      	ldr	r3, [pc, #264]	; (800268c <HAL_RCC_GetSysClockFreq+0x144>)
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002586:	e076      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	0c9a      	lsrs	r2, r3, #18
 800258c:	230f      	movs	r3, #15
 800258e:	401a      	ands	r2, r3
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_RCC_GetSysClockFreq+0x148>)
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	0d9a      	lsrs	r2, r3, #22
 800259a:	2303      	movs	r3, #3
 800259c:	4013      	ands	r3, r2
 800259e:	3301      	adds	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	4013      	ands	r3, r2
 80025ac:	d01a      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	4a35      	ldr	r2, [pc, #212]	; (800268c <HAL_RCC_GetSysClockFreq+0x144>)
 80025b8:	2300      	movs	r3, #0
 80025ba:	69b8      	ldr	r0, [r7, #24]
 80025bc:	69f9      	ldr	r1, [r7, #28]
 80025be:	f7fd fe61 	bl	8000284 <__aeabi_lmul>
 80025c2:	0002      	movs	r2, r0
 80025c4:	000b      	movs	r3, r1
 80025c6:	0010      	movs	r0, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f7fd fe35 	bl	8000244 <__aeabi_uldivmod>
 80025da:	0002      	movs	r2, r0
 80025dc:	000b      	movs	r3, r1
 80025de:	0013      	movs	r3, r2
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
 80025e2:	e037      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025e4:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	4013      	ands	r3, r2
 80025ec:	d01a      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025f8:	2300      	movs	r3, #0
 80025fa:	68b8      	ldr	r0, [r7, #8]
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	f7fd fe41 	bl	8000284 <__aeabi_lmul>
 8002602:	0002      	movs	r2, r0
 8002604:	000b      	movs	r3, r1
 8002606:	0010      	movs	r0, r2
 8002608:	0019      	movs	r1, r3
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f7fd fe15 	bl	8000244 <__aeabi_uldivmod>
 800261a:	0002      	movs	r2, r0
 800261c:	000b      	movs	r3, r1
 800261e:	0013      	movs	r3, r2
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
 8002622:	e017      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	0018      	movs	r0, r3
 8002628:	2300      	movs	r3, #0
 800262a:	0019      	movs	r1, r3
 800262c:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_RCC_GetSysClockFreq+0x140>)
 800262e:	2300      	movs	r3, #0
 8002630:	f7fd fe28 	bl	8000284 <__aeabi_lmul>
 8002634:	0002      	movs	r2, r0
 8002636:	000b      	movs	r3, r1
 8002638:	0010      	movs	r0, r2
 800263a:	0019      	movs	r1, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	001c      	movs	r4, r3
 8002640:	2300      	movs	r3, #0
 8002642:	001d      	movs	r5, r3
 8002644:	0022      	movs	r2, r4
 8002646:	002b      	movs	r3, r5
 8002648:	f7fd fdfc 	bl	8000244 <__aeabi_uldivmod>
 800264c:	0002      	movs	r2, r0
 800264e:	000b      	movs	r3, r1
 8002650:	0013      	movs	r3, r2
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002658:	e00d      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0b5b      	lsrs	r3, r3, #13
 8002660:	2207      	movs	r2, #7
 8002662:	4013      	ands	r3, r2
 8002664:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	3301      	adds	r3, #1
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	0212      	lsls	r2, r2, #8
 800266e:	409a      	lsls	r2, r3
 8002670:	0013      	movs	r3, r2
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002674:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b00e      	add	sp, #56	; 0x38
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	003d0900 	.word	0x003d0900
 8002688:	00f42400 	.word	0x00f42400
 800268c:	007a1200 	.word	0x007a1200
 8002690:	08004d78 	.word	0x08004d78

08002694 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800269c:	2317      	movs	r3, #23
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2220      	movs	r2, #32
 80026aa:	4013      	ands	r3, r2
 80026ac:	d106      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80026ba:	e104      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026bc:	4bb9      	ldr	r3, [pc, #740]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	055b      	lsls	r3, r3, #21
 80026c4:	4013      	ands	r3, r2
 80026c6:	d10a      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4bb6      	ldr	r3, [pc, #728]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026cc:	4bb5      	ldr	r3, [pc, #724]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	0549      	lsls	r1, r1, #21
 80026d2:	430a      	orrs	r2, r1
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026d6:	2317      	movs	r3, #23
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4bb2      	ldr	r3, [pc, #712]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	d11a      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4baf      	ldr	r3, [pc, #700]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4bae      	ldr	r3, [pc, #696]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0049      	lsls	r1, r1, #1
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f8:	f7fe ff46 	bl	8001588 <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	e008      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7fe ff41 	bl	8001588 <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e143      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4ba4      	ldr	r3, [pc, #656]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4013      	ands	r3, r2
 800271e:	d0f0      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002720:	4ba0      	ldr	r3, [pc, #640]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	23c0      	movs	r3, #192	; 0xc0
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	23c0      	movs	r3, #192	; 0xc0
 8002732:	039b      	lsls	r3, r3, #14
 8002734:	4013      	ands	r3, r2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d107      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	23c0      	movs	r3, #192	; 0xc0
 8002742:	039b      	lsls	r3, r3, #14
 8002744:	4013      	ands	r3, r2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d013      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	401a      	ands	r2, r3
 8002756:	23c0      	movs	r3, #192	; 0xc0
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	429a      	cmp	r2, r3
 800275c:	d10a      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800275e:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	401a      	ands	r2, r3
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	029b      	lsls	r3, r3, #10
 800276c:	429a      	cmp	r2, r3
 800276e:	d101      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e113      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002774:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002778:	23c0      	movs	r3, #192	; 0xc0
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d049      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	23c0      	movs	r3, #192	; 0xc0
 800278c:	029b      	lsls	r3, r3, #10
 800278e:	4013      	ands	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	429a      	cmp	r2, r3
 8002794:	d004      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2220      	movs	r2, #32
 800279c:	4013      	ands	r3, r2
 800279e:	d10d      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	23c0      	movs	r3, #192	; 0xc0
 80027a6:	029b      	lsls	r3, r3, #10
 80027a8:	4013      	ands	r3, r2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d034      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	4013      	ands	r3, r2
 80027ba:	d02e      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027bc:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	4a7a      	ldr	r2, [pc, #488]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c6:	4b77      	ldr	r3, [pc, #476]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0309      	lsls	r1, r1, #12
 80027d0:	430a      	orrs	r2, r1
 80027d2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d4:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d8:	4b72      	ldr	r3, [pc, #456]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027da:	4975      	ldr	r1, [pc, #468]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80027dc:	400a      	ands	r2, r1
 80027de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027e0:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	d014      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe feca 	bl	8001588 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f8:	e009      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fec5 	bl	8001588 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	4a6b      	ldr	r2, [pc, #428]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0c6      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4013      	ands	r3, r2
 8002818:	d0ef      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4013      	ands	r3, r2
 8002824:	d01f      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	029b      	lsls	r3, r3, #10
 800282e:	401a      	ands	r2, r3
 8002830:	23c0      	movs	r3, #192	; 0xc0
 8002832:	029b      	lsls	r3, r3, #10
 8002834:	429a      	cmp	r2, r3
 8002836:	d10c      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002838:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5e      	ldr	r2, [pc, #376]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	23c0      	movs	r3, #192	; 0xc0
 8002848:	039b      	lsls	r3, r3, #14
 800284a:	401a      	ands	r2, r3
 800284c:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002854:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	23c0      	movs	r3, #192	; 0xc0
 800285c:	029b      	lsls	r3, r3, #10
 800285e:	401a      	ands	r2, r3
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002862:	430a      	orrs	r2, r1
 8002864:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2220      	movs	r2, #32
 800286c:	4013      	ands	r3, r2
 800286e:	d01f      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	23c0      	movs	r3, #192	; 0xc0
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	401a      	ands	r2, r3
 800287a:	23c0      	movs	r3, #192	; 0xc0
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	429a      	cmp	r2, r3
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002882:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	23c0      	movs	r3, #192	; 0xc0
 8002892:	039b      	lsls	r3, r3, #14
 8002894:	401a      	ands	r2, r3
 8002896:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800289e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	401a      	ands	r2, r3
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028b0:	2317      	movs	r3, #23
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028c0:	493e      	ldr	r1, [pc, #248]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4013      	ands	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d4:	2203      	movs	r2, #3
 80028d6:	4393      	bics	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2202      	movs	r2, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ee:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	220c      	movs	r2, #12
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2204      	movs	r2, #4
 8002908:	4013      	ands	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800291c:	430a      	orrs	r2, r1
 800291e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2208      	movs	r2, #8
 8002926:	4013      	ands	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002930:	4013      	ands	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800293a:	430a      	orrs	r2, r1
 800293c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800295a:	430a      	orrs	r2, r1
 800295c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	4013      	ands	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002978:	430a      	orrs	r2, r1
 800297a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	4013      	ands	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800298c:	4013      	ands	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002996:	430a      	orrs	r2, r1
 8002998:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b006      	add	sp, #24
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
 80029ac:	fffcffff 	.word	0xfffcffff
 80029b0:	fff7ffff 	.word	0xfff7ffff
 80029b4:	00001388 	.word	0x00001388
 80029b8:	ffcfffff 	.word	0xffcfffff
 80029bc:	efffffff 	.word	0xefffffff
 80029c0:	fffff3ff 	.word	0xfffff3ff
 80029c4:	ffffcfff 	.word	0xffffcfff
 80029c8:	fbffffff 	.word	0xfbffffff
 80029cc:	fff3ffff 	.word	0xfff3ffff

080029d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029d8:	230f      	movs	r3, #15
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e088      	b.n	8002afc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2221      	movs	r2, #33	; 0x21
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7fe f861 	bl	8000ac8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2210      	movs	r2, #16
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d05f      	beq.n	8002adc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	22ca      	movs	r2, #202	; 0xca
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2253      	movs	r2, #83	; 0x53
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a2c:	250f      	movs	r5, #15
 8002a2e:	197c      	adds	r4, r7, r5
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fa7c 	bl	8002f30 <RTC_EnterInitMode>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002a3c:	0028      	movs	r0, r5
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d12c      	bne.n	8002aa0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	492c      	ldr	r1, [pc, #176]	; (8002b04 <HAL_RTC_Init+0x134>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6919      	ldr	r1, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a92:	183c      	adds	r4, r7, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 fa8e 	bl	8002fb8 <RTC_ExitInitMode>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d113      	bne.n	8002ad2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2103      	movs	r1, #3
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	22ff      	movs	r2, #255	; 0xff
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8002ada:	e003      	b.n	8002ae4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002adc:	230f      	movs	r3, #15
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2221      	movs	r2, #33	; 0x21
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002af6:	230f      	movs	r3, #15
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	781b      	ldrb	r3, [r3, #0]
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}
 8002b04:	ff8fffbf 	.word	0xff8fffbf

08002b08 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_RTC_SetTime+0x1e>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e092      	b.n	8002c4c <HAL_RTC_SetTime+0x144>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	2102      	movs	r1, #2
 8002b34:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d125      	bne.n	8002b88 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	4013      	ands	r3, r2
 8002b46:	d102      	bne.n	8002b4e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fa5a 	bl	800300c <RTC_ByteToBcd2>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 fa53 	bl	800300c <RTC_ByteToBcd2>
 8002b66:	0003      	movs	r3, r0
 8002b68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	789b      	ldrb	r3, [r3, #2]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fa4b 	bl	800300c <RTC_ByteToBcd2>
 8002b76:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b78:	0022      	movs	r2, r4
 8002b7a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	78db      	ldrb	r3, [r3, #3]
 8002b80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e017      	b.n	8002bb8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	4013      	ands	r3, r2
 8002b92:	d102      	bne.n	8002b9a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ba6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002bac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	78db      	ldrb	r3, [r3, #3]
 8002bb2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	22ca      	movs	r2, #202	; 0xca
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2253      	movs	r2, #83	; 0x53
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bc8:	2513      	movs	r5, #19
 8002bca:	197c      	adds	r4, r7, r5
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 f9ae 	bl	8002f30 <RTC_EnterInitMode>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002bd8:	0028      	movs	r0, r5
 8002bda:	183b      	adds	r3, r7, r0
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d120      	bne.n	8002c24 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	491a      	ldr	r1, [pc, #104]	; (8002c54 <HAL_RTC_SetTime+0x14c>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4917      	ldr	r1, [pc, #92]	; (8002c58 <HAL_RTC_SetTime+0x150>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c16:	183c      	adds	r4, r7, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 f9cc 	bl	8002fb8 <RTC_ExitInitMode>
 8002c20:	0003      	movs	r3, r0
 8002c22:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002c24:	2313      	movs	r3, #19
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]

  return status;
 8002c46:	2313      	movs	r3, #19
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b006      	add	sp, #24
 8002c52:	bdb0      	pop	{r4, r5, r7, pc}
 8002c54:	007f7f7f 	.word	0x007f7f7f
 8002c58:	fffbffff 	.word	0xfffbffff

08002c5c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	045b      	lsls	r3, r3, #17
 8002c7e:	0c5a      	lsrs	r2, r3, #17
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_RTC_GetTime+0xb8>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	223f      	movs	r2, #63	; 0x3f
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	227f      	movs	r2, #127	; 0x7f
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	227f      	movs	r2, #127	; 0x7f
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	0d9b      	lsrs	r3, r3, #22
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11a      	bne.n	8002d0a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f9b8 	bl	800304e <RTC_Bcd2ToByte>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f9af 	bl	800304e <RTC_Bcd2ToByte>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	789b      	ldrb	r3, [r3, #2]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f9a6 	bl	800304e <RTC_Bcd2ToByte>
 8002d02:	0003      	movs	r3, r0
 8002d04:	001a      	movs	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b006      	add	sp, #24
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	007f7f7f 	.word	0x007f7f7f

08002d18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	5c9b      	ldrb	r3, [r3, r2]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_RTC_SetDate+0x1e>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e07e      	b.n	8002e34 <HAL_RTC_SetDate+0x11c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	2102      	movs	r1, #2
 8002d44:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10e      	bne.n	8002d6a <HAL_RTC_SetDate+0x52>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	001a      	movs	r2, r3
 8002d52:	2310      	movs	r3, #16
 8002d54:	4013      	ands	r3, r2
 8002d56:	d008      	beq.n	8002d6a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	4393      	bics	r3, r2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	330a      	adds	r3, #10
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11c      	bne.n	8002daa <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	78db      	ldrb	r3, [r3, #3]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f000 f949 	bl	800300c <RTC_ByteToBcd2>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	785b      	ldrb	r3, [r3, #1]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 f942 	bl	800300c <RTC_ByteToBcd2>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	789b      	ldrb	r3, [r3, #2]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f93a 	bl	800300c <RTC_ByteToBcd2>
 8002d98:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d9a:	0022      	movs	r2, r4
 8002d9c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e00e      	b.n	8002dc8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002db6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002dbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	22ca      	movs	r2, #202	; 0xca
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2253      	movs	r2, #83	; 0x53
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dd8:	2513      	movs	r5, #19
 8002dda:	197c      	adds	r4, r7, r5
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 f8a6 	bl	8002f30 <RTC_EnterInitMode>
 8002de4:	0003      	movs	r3, r0
 8002de6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002de8:	0028      	movs	r0, r5
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10c      	bne.n	8002e0c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4910      	ldr	r1, [pc, #64]	; (8002e3c <HAL_RTC_SetDate+0x124>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002dfe:	183c      	adds	r4, r7, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f8d8 	bl	8002fb8 <RTC_ExitInitMode>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002e0c:	2313      	movs	r3, #19
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	; 0x21
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]

  return status;
 8002e2e:	2313      	movs	r3, #19
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	781b      	ldrb	r3, [r3, #0]
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b006      	add	sp, #24
 8002e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3c:	00ffff3f 	.word	0x00ffff3f

08002e40 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a21      	ldr	r2, [pc, #132]	; (8002edc <HAL_RTC_GetDate+0x9c>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	221f      	movs	r2, #31
 8002e6e:	4013      	ands	r3, r2
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	223f      	movs	r2, #63	; 0x3f
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	0b5b      	lsrs	r3, r3, #13
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11a      	bne.n	8002ed0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	78db      	ldrb	r3, [r3, #3]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 f8d5 	bl	800304e <RTC_Bcd2ToByte>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 f8cc 	bl	800304e <RTC_Bcd2ToByte>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	001a      	movs	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	789b      	ldrb	r3, [r3, #2]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 f8c3 	bl	800304e <RTC_Bcd2ToByte>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	001a      	movs	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	00ffff3f 	.word	0x00ffff3f

08002ee0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_RTC_WaitForSynchro+0x4c>)
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef4:	f7fe fb48 	bl	8001588 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002efc:	e00a      	b.n	8002f14 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002efe:	f7fe fb43 	bl	8001588 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad2      	subs	r2, r2, r3
 8002f08:	23fa      	movs	r3, #250	; 0xfa
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d901      	bls.n	8002f14 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e006      	b.n	8002f22 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b004      	add	sp, #16
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	0001ff5f 	.word	0x0001ff5f

08002f30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d12c      	bne.n	8002faa <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f60:	f7fe fb12 	bl	8001588 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f68:	e014      	b.n	8002f94 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f6a:	f7fe fb0d 	bl	8001588 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	200f      	movs	r0, #15
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	1839      	adds	r1, r7, r0
 8002f7a:	7809      	ldrb	r1, [r1, #0]
 8002f7c:	7019      	strb	r1, [r3, #0]
 8002f7e:	23fa      	movs	r3, #250	; 0xfa
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d906      	bls.n	8002f94 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d104      	bne.n	8002faa <RTC_EnterInitMode+0x7a>
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d1df      	bne.n	8002f6a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002faa:	230f      	movs	r3, #15
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	781b      	ldrb	r3, [r3, #0]
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	240f      	movs	r4, #15
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d10c      	bne.n	8002ffe <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff ff7a 	bl	8002ee0 <HAL_RTC_WaitForSynchro>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d006      	beq.n	8002ffe <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2221      	movs	r2, #33	; 0x21
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002ffe:	230f      	movs	r3, #15
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b005      	add	sp, #20
 800300a:	bd90      	pop	{r4, r7, pc}

0800300c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	0002      	movs	r2, r0
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800301c:	e007      	b.n	800302e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3301      	adds	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	1dfa      	adds	r2, r7, #7
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	3a0a      	subs	r2, #10
 800302c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b09      	cmp	r3, #9
 8003034:	d8f3      	bhi.n	800301e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	b2da      	uxtb	r2, r3
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	b2db      	uxtb	r3, r3
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}

0800304e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	0002      	movs	r2, r0
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	b2db      	uxtb	r3, r3
 8003066:	001a      	movs	r2, r3
 8003068:	0013      	movs	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	189b      	adds	r3, r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	1dfb      	adds	r3, r7, #7
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	210f      	movs	r1, #15
 800307c:	400b      	ands	r3, r1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	b2db      	uxtb	r3, r3
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e032      	b.n	8003104 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2239      	movs	r2, #57	; 0x39
 80030a2:	5c9b      	ldrb	r3, [r3, r2]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2238      	movs	r2, #56	; 0x38
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7fd fd1f 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2239      	movs	r2, #57	; 0x39
 80030be:	2102      	movs	r1, #2
 80030c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	0019      	movs	r1, r3
 80030cc:	0010      	movs	r0, r2
 80030ce:	f000 fa95 	bl	80035fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223e      	movs	r2, #62	; 0x3e
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	223a      	movs	r2, #58	; 0x3a
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223b      	movs	r2, #59	; 0x3b
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	223c      	movs	r2, #60	; 0x3c
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	223d      	movs	r2, #61	; 0x3d
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2239      	movs	r2, #57	; 0x39
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2239      	movs	r2, #57	; 0x39
 8003118:	5c9b      	ldrb	r3, [r3, r2]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d001      	beq.n	8003124 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e033      	b.n	800318c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2239      	movs	r2, #57	; 0x39
 8003128:	2102      	movs	r1, #2
 800312a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	05db      	lsls	r3, r3, #23
 8003134:	429a      	cmp	r2, r3
 8003136:	d00e      	beq.n	8003156 <HAL_TIM_Base_Start+0x4a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_TIM_Base_Start+0x88>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_TIM_Base_Start+0x4a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a14      	ldr	r2, [pc, #80]	; (8003198 <HAL_TIM_Base_Start+0x8c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_TIM_Base_Start+0x4a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a12      	ldr	r2, [pc, #72]	; (800319c <HAL_TIM_Base_Start+0x90>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d111      	bne.n	800317a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2207      	movs	r2, #7
 800315e:	4013      	ands	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b06      	cmp	r3, #6
 8003166:	d010      	beq.n	800318a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2101      	movs	r1, #1
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003178:	e007      	b.n	800318a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b004      	add	sp, #16
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40000400 	.word	0x40000400
 8003198:	40010800 	.word	0x40010800
 800319c:	40011400 	.word	0x40011400

080031a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2239      	movs	r2, #57	; 0x39
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d001      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e03b      	b.n	8003230 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2239      	movs	r2, #57	; 0x39
 80031bc:	2102      	movs	r1, #2
 80031be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	05db      	lsls	r3, r3, #23
 80031d8:	429a      	cmp	r2, r3
 80031da:	d00e      	beq.n	80031fa <HAL_TIM_Base_Start_IT+0x5a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_TIM_Base_Start_IT+0x98>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_TIM_Base_Start_IT+0x5a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_TIM_Base_Start_IT+0x9c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIM_Base_Start_IT+0x5a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a12      	ldr	r2, [pc, #72]	; (8003240 <HAL_TIM_Base_Start_IT+0xa0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d111      	bne.n	800321e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2207      	movs	r2, #7
 8003202:	4013      	ands	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d010      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	e007      	b.n	800322e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b004      	add	sp, #16
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40000400 	.word	0x40000400
 800323c:	40010800 	.word	0x40010800
 8003240:	40011400 	.word	0x40011400

08003244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2202      	movs	r2, #2
 8003254:	4013      	ands	r3, r2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d124      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2202      	movs	r2, #2
 8003262:	4013      	ands	r3, r2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d11d      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2203      	movs	r2, #3
 800326e:	4252      	negs	r2, r2
 8003270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2203      	movs	r2, #3
 8003280:	4013      	ands	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f9a0 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 800328c:	e007      	b.n	800329e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 f993 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f000 f99f 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2204      	movs	r2, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d125      	bne.n	80032fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d11e      	bne.n	80032fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2205      	movs	r2, #5
 80032c6:	4252      	negs	r2, r2
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	23c0      	movs	r3, #192	; 0xc0
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4013      	ands	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 f973 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 80032e6:	e007      	b.n	80032f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f966 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 f972 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2208      	movs	r2, #8
 8003306:	4013      	ands	r3, r2
 8003308:	2b08      	cmp	r3, #8
 800330a:	d124      	bne.n	8003356 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2208      	movs	r2, #8
 8003314:	4013      	ands	r3, r2
 8003316:	2b08      	cmp	r3, #8
 8003318:	d11d      	bne.n	8003356 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2209      	movs	r2, #9
 8003320:	4252      	negs	r2, r2
 8003322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2204      	movs	r2, #4
 8003328:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2203      	movs	r2, #3
 8003332:	4013      	ands	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f000 f947 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 800333e:	e007      	b.n	8003350 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f93a 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	0018      	movs	r0, r3
 800334c:	f000 f946 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2210      	movs	r2, #16
 800335e:	4013      	ands	r3, r2
 8003360:	2b10      	cmp	r3, #16
 8003362:	d125      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2210      	movs	r2, #16
 800336c:	4013      	ands	r3, r2
 800336e:	2b10      	cmp	r3, #16
 8003370:	d11e      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2211      	movs	r2, #17
 8003378:	4252      	negs	r2, r2
 800337a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2208      	movs	r2, #8
 8003380:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	23c0      	movs	r3, #192	; 0xc0
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	0018      	movs	r0, r3
 8003394:	f000 f91a 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 8003398:	e007      	b.n	80033aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f90d 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f919 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2201      	movs	r2, #1
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10f      	bne.n	80033de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d108      	bne.n	80033de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2202      	movs	r2, #2
 80033d2:	4252      	negs	r2, r2
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f7fd fb3d 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2240      	movs	r2, #64	; 0x40
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d10f      	bne.n	800340c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2240      	movs	r2, #64	; 0x40
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d108      	bne.n	800340c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2241      	movs	r2, #65	; 0x41
 8003400:	4252      	negs	r2, r2
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f8f0 	bl	80035ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	230f      	movs	r3, #15
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2238      	movs	r2, #56	; 0x38
 800342a:	5c9b      	ldrb	r3, [r3, r2]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_TIM_ConfigClockSource+0x20>
 8003430:	2302      	movs	r3, #2
 8003432:	e0bc      	b.n	80035ae <HAL_TIM_ConfigClockSource+0x19a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2238      	movs	r2, #56	; 0x38
 8003438:	2101      	movs	r1, #1
 800343a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2239      	movs	r2, #57	; 0x39
 8003440:	2102      	movs	r1, #2
 8003442:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2277      	movs	r2, #119	; 0x77
 8003450:	4393      	bics	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003458:	4013      	ands	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	0192      	lsls	r2, r2, #6
 800346c:	4293      	cmp	r3, r2
 800346e:	d040      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0xde>
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	0192      	lsls	r2, r2, #6
 8003474:	4293      	cmp	r3, r2
 8003476:	d900      	bls.n	800347a <HAL_TIM_ConfigClockSource+0x66>
 8003478:	e088      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	0152      	lsls	r2, r2, #5
 800347e:	4293      	cmp	r3, r2
 8003480:	d100      	bne.n	8003484 <HAL_TIM_ConfigClockSource+0x70>
 8003482:	e088      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x182>
 8003484:	2280      	movs	r2, #128	; 0x80
 8003486:	0152      	lsls	r2, r2, #5
 8003488:	4293      	cmp	r3, r2
 800348a:	d900      	bls.n	800348e <HAL_TIM_ConfigClockSource+0x7a>
 800348c:	e07e      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 800348e:	2b70      	cmp	r3, #112	; 0x70
 8003490:	d018      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0xb0>
 8003492:	d900      	bls.n	8003496 <HAL_TIM_ConfigClockSource+0x82>
 8003494:	e07a      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 8003496:	2b60      	cmp	r3, #96	; 0x60
 8003498:	d04f      	beq.n	800353a <HAL_TIM_ConfigClockSource+0x126>
 800349a:	d900      	bls.n	800349e <HAL_TIM_ConfigClockSource+0x8a>
 800349c:	e076      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 800349e:	2b50      	cmp	r3, #80	; 0x50
 80034a0:	d03b      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x106>
 80034a2:	d900      	bls.n	80034a6 <HAL_TIM_ConfigClockSource+0x92>
 80034a4:	e072      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d057      	beq.n	800355a <HAL_TIM_ConfigClockSource+0x146>
 80034aa:	d900      	bls.n	80034ae <HAL_TIM_ConfigClockSource+0x9a>
 80034ac:	e06e      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 80034ae:	2b30      	cmp	r3, #48	; 0x30
 80034b0:	d063      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x166>
 80034b2:	d86b      	bhi.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d060      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x166>
 80034b8:	d868      	bhi.n	800358c <HAL_TIM_ConfigClockSource+0x178>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d05d      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x166>
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d05b      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x166>
 80034c2:	e063      	b.n	800358c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d4:	f000 f96a 	bl	80037ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2277      	movs	r2, #119	; 0x77
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
      break;
 80034f0:	e052      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003502:	f000 f953 	bl	80037ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	01c9      	lsls	r1, r1, #7
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
      break;
 8003518:	e03e      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003526:	001a      	movs	r2, r3
 8003528:	f000 f8c6 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2150      	movs	r1, #80	; 0x50
 8003532:	0018      	movs	r0, r3
 8003534:	f000 f920 	bl	8003778 <TIM_ITRx_SetConfig>
      break;
 8003538:	e02e      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003546:	001a      	movs	r2, r3
 8003548:	f000 f8e4 	bl	8003714 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2160      	movs	r1, #96	; 0x60
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f910 	bl	8003778 <TIM_ITRx_SetConfig>
      break;
 8003558:	e01e      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	001a      	movs	r2, r3
 8003568:	f000 f8a6 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f900 	bl	8003778 <TIM_ITRx_SetConfig>
      break;
 8003578:	e00e      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0019      	movs	r1, r3
 8003584:	0010      	movs	r0, r2
 8003586:	f000 f8f7 	bl	8003778 <TIM_ITRx_SetConfig>
      break;
 800358a:	e005      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800358c:	230f      	movs	r3, #15
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
      break;
 8003594:	e000      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003596:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2239      	movs	r2, #57	; 0x39
 800359c:	2101      	movs	r1, #1
 800359e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2238      	movs	r2, #56	; 0x38
 80035a4:	2100      	movs	r1, #0
 80035a6:	5499      	strb	r1, [r3, r2]

  return status;
 80035a8:	230f      	movs	r3, #15
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	781b      	ldrb	r3, [r3, #0]
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	ffff00ff 	.word	0xffff00ff

080035bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	05db      	lsls	r3, r3, #23
 8003612:	429a      	cmp	r2, r3
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0x32>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <TIM_Base_SetConfig+0xac>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0x32>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <TIM_Base_SetConfig+0xb0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0x32>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <TIM_Base_SetConfig+0xb4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2270      	movs	r2, #112	; 0x70
 8003632:	4393      	bics	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	05db      	lsls	r3, r3, #23
 8003646:	429a      	cmp	r2, r3
 8003648:	d00b      	beq.n	8003662 <TIM_Base_SetConfig+0x66>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <TIM_Base_SetConfig+0xac>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_Base_SetConfig+0x66>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <TIM_Base_SetConfig+0xb0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_Base_SetConfig+0x66>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <TIM_Base_SetConfig+0xb4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <TIM_Base_SetConfig+0xb8>)
 8003666:	4013      	ands	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	4393      	bics	r3, r2
 800367a:	001a      	movs	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	615a      	str	r2, [r3, #20]
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b004      	add	sp, #16
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40010800 	.word	0x40010800
 80036b0:	40011400 	.word	0x40011400
 80036b4:	fffffcff 	.word	0xfffffcff

080036b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	2201      	movs	r2, #1
 80036d0:	4393      	bics	r3, r2
 80036d2:	001a      	movs	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	22f0      	movs	r2, #240	; 0xf0
 80036e2:	4393      	bics	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	220a      	movs	r2, #10
 80036f4:	4393      	bics	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b006      	add	sp, #24
 8003712:	bd80      	pop	{r7, pc}

08003714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	2210      	movs	r2, #16
 8003726:	4393      	bics	r3, r2
 8003728:	001a      	movs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <TIM_TI2_ConfigInputStage+0x60>)
 800373e:	4013      	ands	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	031b      	lsls	r3, r3, #12
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	22a0      	movs	r2, #160	; 0xa0
 8003750:	4393      	bics	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b006      	add	sp, #24
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	ffff0fff 	.word	0xffff0fff

08003778 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2270      	movs	r2, #112	; 0x70
 800378c:	4393      	bics	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	2207      	movs	r2, #7
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	609a      	str	r2, [r3, #8]
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b004      	add	sp, #16
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <TIM_ETR_SetConfig+0x3c>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	021a      	lsls	r2, r3, #8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	609a      	str	r2, [r3, #8]
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b006      	add	sp, #24
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	ffff00ff 	.word	0xffff00ff

080037ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2238      	movs	r2, #56	; 0x38
 80037fa:	5c9b      	ldrb	r3, [r3, r2]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003800:	2302      	movs	r3, #2
 8003802:	e047      	b.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2238      	movs	r2, #56	; 0x38
 8003808:	2101      	movs	r1, #1
 800380a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2239      	movs	r2, #57	; 0x39
 8003810:	2102      	movs	r1, #2
 8003812:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2270      	movs	r2, #112	; 0x70
 8003828:	4393      	bics	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	05db      	lsls	r3, r3, #23
 8003846:	429a      	cmp	r2, r3
 8003848:	d00e      	beq.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d009      	beq.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d10c      	bne.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	4393      	bics	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2239      	movs	r2, #57	; 0x39
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2238      	movs	r2, #56	; 0x38
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40000400 	.word	0x40000400
 80038a0:	40010800 	.word	0x40010800
 80038a4:	40011400 	.word	0x40011400

080038a8 <findslot>:
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <findslot+0x2c>)
 80038aa:	b510      	push	{r4, lr}
 80038ac:	0004      	movs	r4, r0
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d004      	beq.n	80038be <findslot+0x16>
 80038b4:	6a03      	ldr	r3, [r0, #32]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <findslot+0x16>
 80038ba:	f000 fb1f 	bl	8003efc <__sinit>
 80038be:	2000      	movs	r0, #0
 80038c0:	2c13      	cmp	r4, #19
 80038c2:	d805      	bhi.n	80038d0 <findslot+0x28>
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <findslot+0x30>)
 80038c6:	00e4      	lsls	r4, r4, #3
 80038c8:	58e2      	ldr	r2, [r4, r3]
 80038ca:	3201      	adds	r2, #1
 80038cc:	d000      	beq.n	80038d0 <findslot+0x28>
 80038ce:	18e0      	adds	r0, r4, r3
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	2000006c 	.word	0x2000006c
 80038d8:	2000015c 	.word	0x2000015c

080038dc <error>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	0004      	movs	r4, r0
 80038e0:	f000 fbf2 	bl	80040c8 <__errno>
 80038e4:	2613      	movs	r6, #19
 80038e6:	0005      	movs	r5, r0
 80038e8:	2700      	movs	r7, #0
 80038ea:	1c30      	adds	r0, r6, #0
 80038ec:	1c39      	adds	r1, r7, #0
 80038ee:	beab      	bkpt	0x00ab
 80038f0:	1c06      	adds	r6, r0, #0
 80038f2:	602e      	str	r6, [r5, #0]
 80038f4:	0020      	movs	r0, r4
 80038f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038f8 <checkerror>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d101      	bne.n	8003902 <checkerror+0xa>
 80038fe:	f7ff ffed 	bl	80038dc <error>
 8003902:	bd10      	pop	{r4, pc}

08003904 <_swiread>:
 8003904:	b530      	push	{r4, r5, lr}
 8003906:	b085      	sub	sp, #20
 8003908:	ad01      	add	r5, sp, #4
 800390a:	9001      	str	r0, [sp, #4]
 800390c:	9102      	str	r1, [sp, #8]
 800390e:	9203      	str	r2, [sp, #12]
 8003910:	2406      	movs	r4, #6
 8003912:	1c20      	adds	r0, r4, #0
 8003914:	1c29      	adds	r1, r5, #0
 8003916:	beab      	bkpt	0x00ab
 8003918:	1c04      	adds	r4, r0, #0
 800391a:	0020      	movs	r0, r4
 800391c:	f7ff ffec 	bl	80038f8 <checkerror>
 8003920:	b005      	add	sp, #20
 8003922:	bd30      	pop	{r4, r5, pc}

08003924 <_read>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	000e      	movs	r6, r1
 8003928:	0015      	movs	r5, r2
 800392a:	f7ff ffbd 	bl	80038a8 <findslot>
 800392e:	1e04      	subs	r4, r0, #0
 8003930:	d106      	bne.n	8003940 <_read+0x1c>
 8003932:	f000 fbc9 	bl	80040c8 <__errno>
 8003936:	2309      	movs	r3, #9
 8003938:	6003      	str	r3, [r0, #0]
 800393a:	2001      	movs	r0, #1
 800393c:	4240      	negs	r0, r0
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	002a      	movs	r2, r5
 8003942:	0031      	movs	r1, r6
 8003944:	6800      	ldr	r0, [r0, #0]
 8003946:	f7ff ffdd 	bl	8003904 <_swiread>
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	d0f7      	beq.n	800393e <_read+0x1a>
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	1a28      	subs	r0, r5, r0
 8003952:	181b      	adds	r3, r3, r0
 8003954:	6063      	str	r3, [r4, #4]
 8003956:	e7f2      	b.n	800393e <_read+0x1a>

08003958 <_swilseek>:
 8003958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800395a:	000c      	movs	r4, r1
 800395c:	0016      	movs	r6, r2
 800395e:	f7ff ffa3 	bl	80038a8 <findslot>
 8003962:	1e05      	subs	r5, r0, #0
 8003964:	d107      	bne.n	8003976 <_swilseek+0x1e>
 8003966:	f000 fbaf 	bl	80040c8 <__errno>
 800396a:	2309      	movs	r3, #9
 800396c:	6003      	str	r3, [r0, #0]
 800396e:	2401      	movs	r4, #1
 8003970:	4264      	negs	r4, r4
 8003972:	0020      	movs	r0, r4
 8003974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003976:	2e02      	cmp	r6, #2
 8003978:	d903      	bls.n	8003982 <_swilseek+0x2a>
 800397a:	f000 fba5 	bl	80040c8 <__errno>
 800397e:	2316      	movs	r3, #22
 8003980:	e7f4      	b.n	800396c <_swilseek+0x14>
 8003982:	2e01      	cmp	r6, #1
 8003984:	d112      	bne.n	80039ac <_swilseek+0x54>
 8003986:	6843      	ldr	r3, [r0, #4]
 8003988:	18e4      	adds	r4, r4, r3
 800398a:	d4f6      	bmi.n	800397a <_swilseek+0x22>
 800398c:	466f      	mov	r7, sp
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	260a      	movs	r6, #10
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	607c      	str	r4, [r7, #4]
 8003996:	1c30      	adds	r0, r6, #0
 8003998:	1c39      	adds	r1, r7, #0
 800399a:	beab      	bkpt	0x00ab
 800399c:	1c06      	adds	r6, r0, #0
 800399e:	0030      	movs	r0, r6
 80039a0:	f7ff ffaa 	bl	80038f8 <checkerror>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	dbe2      	blt.n	800396e <_swilseek+0x16>
 80039a8:	606c      	str	r4, [r5, #4]
 80039aa:	e7e2      	b.n	8003972 <_swilseek+0x1a>
 80039ac:	6803      	ldr	r3, [r0, #0]
 80039ae:	2e02      	cmp	r6, #2
 80039b0:	d1ec      	bne.n	800398c <_swilseek+0x34>
 80039b2:	466f      	mov	r7, sp
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	360a      	adds	r6, #10
 80039b8:	1c30      	adds	r0, r6, #0
 80039ba:	1c39      	adds	r1, r7, #0
 80039bc:	beab      	bkpt	0x00ab
 80039be:	1c06      	adds	r6, r0, #0
 80039c0:	0030      	movs	r0, r6
 80039c2:	f7ff ff99 	bl	80038f8 <checkerror>
 80039c6:	1824      	adds	r4, r4, r0
 80039c8:	3001      	adds	r0, #1
 80039ca:	d1df      	bne.n	800398c <_swilseek+0x34>
 80039cc:	e7cf      	b.n	800396e <_swilseek+0x16>

080039ce <_lseek>:
 80039ce:	b510      	push	{r4, lr}
 80039d0:	f7ff ffc2 	bl	8003958 <_swilseek>
 80039d4:	bd10      	pop	{r4, pc}

080039d6 <_swiwrite>:
 80039d6:	b530      	push	{r4, r5, lr}
 80039d8:	b085      	sub	sp, #20
 80039da:	ad01      	add	r5, sp, #4
 80039dc:	9001      	str	r0, [sp, #4]
 80039de:	9102      	str	r1, [sp, #8]
 80039e0:	9203      	str	r2, [sp, #12]
 80039e2:	2405      	movs	r4, #5
 80039e4:	1c20      	adds	r0, r4, #0
 80039e6:	1c29      	adds	r1, r5, #0
 80039e8:	beab      	bkpt	0x00ab
 80039ea:	1c04      	adds	r4, r0, #0
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7ff ff83 	bl	80038f8 <checkerror>
 80039f2:	b005      	add	sp, #20
 80039f4:	bd30      	pop	{r4, r5, pc}

080039f6 <_write>:
 80039f6:	b570      	push	{r4, r5, r6, lr}
 80039f8:	000e      	movs	r6, r1
 80039fa:	0015      	movs	r5, r2
 80039fc:	f7ff ff54 	bl	80038a8 <findslot>
 8003a00:	1e04      	subs	r4, r0, #0
 8003a02:	d106      	bne.n	8003a12 <_write+0x1c>
 8003a04:	f000 fb60 	bl	80040c8 <__errno>
 8003a08:	2309      	movs	r3, #9
 8003a0a:	6003      	str	r3, [r0, #0]
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	4240      	negs	r0, r0
 8003a10:	e00f      	b.n	8003a32 <_write+0x3c>
 8003a12:	002a      	movs	r2, r5
 8003a14:	0031      	movs	r1, r6
 8003a16:	6800      	ldr	r0, [r0, #0]
 8003a18:	f7ff ffdd 	bl	80039d6 <_swiwrite>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	dbf5      	blt.n	8003a0c <_write+0x16>
 8003a20:	6862      	ldr	r2, [r4, #4]
 8003a22:	1a28      	subs	r0, r5, r0
 8003a24:	1812      	adds	r2, r2, r0
 8003a26:	6062      	str	r2, [r4, #4]
 8003a28:	42ab      	cmp	r3, r5
 8003a2a:	d102      	bne.n	8003a32 <_write+0x3c>
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7ff ff55 	bl	80038dc <error>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}

08003a34 <_swiclose>:
 8003a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a36:	2402      	movs	r4, #2
 8003a38:	9001      	str	r0, [sp, #4]
 8003a3a:	ad01      	add	r5, sp, #4
 8003a3c:	1c20      	adds	r0, r4, #0
 8003a3e:	1c29      	adds	r1, r5, #0
 8003a40:	beab      	bkpt	0x00ab
 8003a42:	1c04      	adds	r4, r0, #0
 8003a44:	0020      	movs	r0, r4
 8003a46:	f7ff ff57 	bl	80038f8 <checkerror>
 8003a4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08003a4c <_close>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	0005      	movs	r5, r0
 8003a50:	f7ff ff2a 	bl	80038a8 <findslot>
 8003a54:	1e04      	subs	r4, r0, #0
 8003a56:	d106      	bne.n	8003a66 <_close+0x1a>
 8003a58:	f000 fb36 	bl	80040c8 <__errno>
 8003a5c:	2309      	movs	r3, #9
 8003a5e:	6003      	str	r3, [r0, #0]
 8003a60:	2001      	movs	r0, #1
 8003a62:	4240      	negs	r0, r0
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	3d01      	subs	r5, #1
 8003a68:	2d01      	cmp	r5, #1
 8003a6a:	d809      	bhi.n	8003a80 <_close+0x34>
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <_close+0x48>)
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d104      	bne.n	8003a80 <_close+0x34>
 8003a76:	2301      	movs	r3, #1
 8003a78:	425b      	negs	r3, r3
 8003a7a:	6003      	str	r3, [r0, #0]
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	e7f1      	b.n	8003a64 <_close+0x18>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	f7ff ffd7 	bl	8003a34 <_swiclose>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d1ec      	bne.n	8003a64 <_close+0x18>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	425b      	negs	r3, r3
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	e7e8      	b.n	8003a64 <_close+0x18>
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	2000015c 	.word	0x2000015c

08003a98 <_swistat>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	000c      	movs	r4, r1
 8003a9c:	f7ff ff04 	bl	80038a8 <findslot>
 8003aa0:	1e05      	subs	r5, r0, #0
 8003aa2:	d106      	bne.n	8003ab2 <_swistat+0x1a>
 8003aa4:	f000 fb10 	bl	80040c8 <__errno>
 8003aa8:	2309      	movs	r3, #9
 8003aaa:	6003      	str	r3, [r0, #0]
 8003aac:	2001      	movs	r0, #1
 8003aae:	4240      	negs	r0, r0
 8003ab0:	bd70      	pop	{r4, r5, r6, pc}
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	6862      	ldr	r2, [r4, #4]
 8003ab6:	019b      	lsls	r3, r3, #6
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	6063      	str	r3, [r4, #4]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	260c      	movs	r6, #12
 8003ac2:	64a3      	str	r3, [r4, #72]	; 0x48
 8003ac4:	1c30      	adds	r0, r6, #0
 8003ac6:	1c29      	adds	r1, r5, #0
 8003ac8:	beab      	bkpt	0x00ab
 8003aca:	1c05      	adds	r5, r0, #0
 8003acc:	0028      	movs	r0, r5
 8003ace:	f7ff ff13 	bl	80038f8 <checkerror>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	d0ec      	beq.n	8003ab0 <_swistat+0x18>
 8003ad6:	6120      	str	r0, [r4, #16]
 8003ad8:	2000      	movs	r0, #0
 8003ada:	e7e9      	b.n	8003ab0 <_swistat+0x18>

08003adc <_fstat>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	000c      	movs	r4, r1
 8003ae0:	0005      	movs	r5, r0
 8003ae2:	2258      	movs	r2, #88	; 0x58
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	0020      	movs	r0, r4
 8003ae8:	f000 fa98 	bl	800401c <memset>
 8003aec:	0028      	movs	r0, r5
 8003aee:	0021      	movs	r1, r4
 8003af0:	f7ff ffd2 	bl	8003a98 <_swistat>
 8003af4:	bd70      	pop	{r4, r5, r6, pc}

08003af6 <_stat>:
 8003af6:	b570      	push	{r4, r5, r6, lr}
 8003af8:	000d      	movs	r5, r1
 8003afa:	0004      	movs	r4, r0
 8003afc:	2258      	movs	r2, #88	; 0x58
 8003afe:	2100      	movs	r1, #0
 8003b00:	0028      	movs	r0, r5
 8003b02:	f000 fa8b 	bl	800401c <memset>
 8003b06:	0020      	movs	r0, r4
 8003b08:	2100      	movs	r1, #0
 8003b0a:	f000 f813 	bl	8003b34 <_swiopen>
 8003b0e:	0004      	movs	r4, r0
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d00c      	beq.n	8003b2e <_stat+0x38>
 8003b14:	2381      	movs	r3, #129	; 0x81
 8003b16:	686a      	ldr	r2, [r5, #4]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	0029      	movs	r1, r5
 8003b1e:	606b      	str	r3, [r5, #4]
 8003b20:	f7ff ffba 	bl	8003a98 <_swistat>
 8003b24:	0005      	movs	r5, r0
 8003b26:	0020      	movs	r0, r4
 8003b28:	f7ff ff90 	bl	8003a4c <_close>
 8003b2c:	002c      	movs	r4, r5
 8003b2e:	0020      	movs	r0, r4
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b34 <_swiopen>:
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b36:	000d      	movs	r5, r1
 8003b38:	2600      	movs	r6, #0
 8003b3a:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <_swiopen+0xb4>)
 8003b3c:	b09b      	sub	sp, #108	; 0x6c
 8003b3e:	9001      	str	r0, [sp, #4]
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	00f3      	lsls	r3, r6, #3
 8003b44:	9303      	str	r3, [sp, #12]
 8003b46:	9b02      	ldr	r3, [sp, #8]
 8003b48:	00f2      	lsls	r2, r6, #3
 8003b4a:	589c      	ldr	r4, [r3, r2]
 8003b4c:	1c63      	adds	r3, r4, #1
 8003b4e:	d036      	beq.n	8003bbe <_swiopen+0x8a>
 8003b50:	3601      	adds	r6, #1
 8003b52:	2e14      	cmp	r6, #20
 8003b54:	d1f5      	bne.n	8003b42 <_swiopen+0xe>
 8003b56:	f000 fab7 	bl	80040c8 <__errno>
 8003b5a:	2401      	movs	r4, #1
 8003b5c:	2318      	movs	r3, #24
 8003b5e:	4264      	negs	r4, r4
 8003b60:	6003      	str	r3, [r0, #0]
 8003b62:	e03d      	b.n	8003be0 <_swiopen+0xac>
 8003b64:	2302      	movs	r3, #2
 8003b66:	03ec      	lsls	r4, r5, #15
 8003b68:	0fe4      	lsrs	r4, r4, #31
 8003b6a:	421d      	tst	r5, r3
 8003b6c:	d000      	beq.n	8003b70 <_swiopen+0x3c>
 8003b6e:	431c      	orrs	r4, r3
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <_swiopen+0xb8>)
 8003b72:	421d      	tst	r5, r3
 8003b74:	d001      	beq.n	8003b7a <_swiopen+0x46>
 8003b76:	2304      	movs	r3, #4
 8003b78:	431c      	orrs	r4, r3
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	421d      	tst	r5, r3
 8003b7e:	d002      	beq.n	8003b86 <_swiopen+0x52>
 8003b80:	2204      	movs	r2, #4
 8003b82:	4394      	bics	r4, r2
 8003b84:	431c      	orrs	r4, r3
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	f7fc fabc 	bl	8000108 <strlen>
 8003b90:	607c      	str	r4, [r7, #4]
 8003b92:	60b8      	str	r0, [r7, #8]
 8003b94:	2401      	movs	r4, #1
 8003b96:	1c20      	adds	r0, r4, #0
 8003b98:	1c39      	adds	r1, r7, #0
 8003b9a:	beab      	bkpt	0x00ab
 8003b9c:	1c04      	adds	r4, r0, #0
 8003b9e:	2c00      	cmp	r4, #0
 8003ba0:	db08      	blt.n	8003bb4 <_swiopen+0x80>
 8003ba2:	00f2      	lsls	r2, r6, #3
 8003ba4:	9b02      	ldr	r3, [sp, #8]
 8003ba6:	4694      	mov	ip, r2
 8003ba8:	509c      	str	r4, [r3, r2]
 8003baa:	2200      	movs	r2, #0
 8003bac:	4463      	add	r3, ip
 8003bae:	0034      	movs	r4, r6
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	e015      	b.n	8003be0 <_swiopen+0xac>
 8003bb4:	0020      	movs	r0, r4
 8003bb6:	f7ff fe91 	bl	80038dc <error>
 8003bba:	0004      	movs	r4, r0
 8003bbc:	e010      	b.n	8003be0 <_swiopen+0xac>
 8003bbe:	23a0      	movs	r3, #160	; 0xa0
 8003bc0:	002a      	movs	r2, r5
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	af04      	add	r7, sp, #16
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1cb      	bne.n	8003b64 <_swiopen+0x30>
 8003bcc:	0039      	movs	r1, r7
 8003bce:	9801      	ldr	r0, [sp, #4]
 8003bd0:	f7ff ff91 	bl	8003af6 <_stat>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d0c5      	beq.n	8003b64 <_swiopen+0x30>
 8003bd8:	f000 fa76 	bl	80040c8 <__errno>
 8003bdc:	2311      	movs	r3, #17
 8003bde:	6003      	str	r3, [r0, #0]
 8003be0:	0020      	movs	r0, r4
 8003be2:	b01b      	add	sp, #108	; 0x6c
 8003be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	2000015c 	.word	0x2000015c
 8003bec:	00000601 	.word	0x00000601

08003bf0 <_get_semihosting_exts>:
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	9000      	str	r0, [sp, #0]
 8003bf6:	9101      	str	r1, [sp, #4]
 8003bf8:	4827      	ldr	r0, [pc, #156]	; (8003c98 <_get_semihosting_exts+0xa8>)
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	0015      	movs	r5, r2
 8003bfe:	f7ff ff99 	bl	8003b34 <_swiopen>
 8003c02:	0004      	movs	r4, r0
 8003c04:	002a      	movs	r2, r5
 8003c06:	2100      	movs	r1, #0
 8003c08:	9800      	ldr	r0, [sp, #0]
 8003c0a:	f000 fa07 	bl	800401c <memset>
 8003c0e:	1c63      	adds	r3, r4, #1
 8003c10:	d015      	beq.n	8003c3e <_get_semihosting_exts+0x4e>
 8003c12:	0020      	movs	r0, r4
 8003c14:	f7ff fe48 	bl	80038a8 <findslot>
 8003c18:	260c      	movs	r6, #12
 8003c1a:	0007      	movs	r7, r0
 8003c1c:	1c30      	adds	r0, r6, #0
 8003c1e:	1c39      	adds	r1, r7, #0
 8003c20:	beab      	bkpt	0x00ab
 8003c22:	1c06      	adds	r6, r0, #0
 8003c24:	0030      	movs	r0, r6
 8003c26:	f7ff fe67 	bl	80038f8 <checkerror>
 8003c2a:	2803      	cmp	r0, #3
 8003c2c:	dd02      	ble.n	8003c34 <_get_semihosting_exts+0x44>
 8003c2e:	3803      	subs	r0, #3
 8003c30:	42a8      	cmp	r0, r5
 8003c32:	dc07      	bgt.n	8003c44 <_get_semihosting_exts+0x54>
 8003c34:	0020      	movs	r0, r4
 8003c36:	2401      	movs	r4, #1
 8003c38:	f7ff ff08 	bl	8003a4c <_close>
 8003c3c:	4264      	negs	r4, r4
 8003c3e:	0020      	movs	r0, r4
 8003c40:	b005      	add	sp, #20
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c44:	ae03      	add	r6, sp, #12
 8003c46:	2204      	movs	r2, #4
 8003c48:	0031      	movs	r1, r6
 8003c4a:	0020      	movs	r0, r4
 8003c4c:	f7ff fe6a 	bl	8003924 <_read>
 8003c50:	2803      	cmp	r0, #3
 8003c52:	ddef      	ble.n	8003c34 <_get_semihosting_exts+0x44>
 8003c54:	7833      	ldrb	r3, [r6, #0]
 8003c56:	2b53      	cmp	r3, #83	; 0x53
 8003c58:	d1ec      	bne.n	8003c34 <_get_semihosting_exts+0x44>
 8003c5a:	7873      	ldrb	r3, [r6, #1]
 8003c5c:	2b48      	cmp	r3, #72	; 0x48
 8003c5e:	d1e9      	bne.n	8003c34 <_get_semihosting_exts+0x44>
 8003c60:	78b3      	ldrb	r3, [r6, #2]
 8003c62:	2b46      	cmp	r3, #70	; 0x46
 8003c64:	d1e6      	bne.n	8003c34 <_get_semihosting_exts+0x44>
 8003c66:	78f3      	ldrb	r3, [r6, #3]
 8003c68:	2b42      	cmp	r3, #66	; 0x42
 8003c6a:	d1e3      	bne.n	8003c34 <_get_semihosting_exts+0x44>
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	0020      	movs	r0, r4
 8003c70:	9901      	ldr	r1, [sp, #4]
 8003c72:	f7ff fe71 	bl	8003958 <_swilseek>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	dbdc      	blt.n	8003c34 <_get_semihosting_exts+0x44>
 8003c7a:	002a      	movs	r2, r5
 8003c7c:	9900      	ldr	r1, [sp, #0]
 8003c7e:	0020      	movs	r0, r4
 8003c80:	f7ff fe50 	bl	8003924 <_read>
 8003c84:	0005      	movs	r5, r0
 8003c86:	0020      	movs	r0, r4
 8003c88:	f7ff fee0 	bl	8003a4c <_close>
 8003c8c:	0028      	movs	r0, r5
 8003c8e:	f7ff fe33 	bl	80038f8 <checkerror>
 8003c92:	0004      	movs	r4, r0
 8003c94:	e7d3      	b.n	8003c3e <_get_semihosting_exts+0x4e>
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	08004dac 	.word	0x08004dac

08003c9c <initialise_semihosting_exts>:
 8003c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c9e:	2401      	movs	r4, #1
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4e09      	ldr	r6, [pc, #36]	; (8003cc8 <initialise_semihosting_exts+0x2c>)
 8003ca4:	4d09      	ldr	r5, [pc, #36]	; (8003ccc <initialise_semihosting_exts+0x30>)
 8003ca6:	af01      	add	r7, sp, #4
 8003ca8:	0022      	movs	r2, r4
 8003caa:	0038      	movs	r0, r7
 8003cac:	6031      	str	r1, [r6, #0]
 8003cae:	602c      	str	r4, [r5, #0]
 8003cb0:	f7ff ff9e 	bl	8003bf0 <_get_semihosting_exts>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	dd05      	ble.n	8003cc4 <initialise_semihosting_exts+0x28>
 8003cb8:	2202      	movs	r2, #2
 8003cba:	783b      	ldrb	r3, [r7, #0]
 8003cbc:	401c      	ands	r4, r3
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	6034      	str	r4, [r6, #0]
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	2000000c 	.word	0x2000000c
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <_has_ext_stdout_stderr>:
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	4c04      	ldr	r4, [pc, #16]	; (8003ce4 <_has_ext_stdout_stderr+0x14>)
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da01      	bge.n	8003cde <_has_ext_stdout_stderr+0xe>
 8003cda:	f7ff ffdf 	bl	8003c9c <initialise_semihosting_exts>
 8003cde:	6820      	ldr	r0, [r4, #0]
 8003ce0:	bd10      	pop	{r4, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	20000010 	.word	0x20000010

08003ce8 <initialise_monitor_handles>:
 8003ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <initialise_monitor_handles+0xa4>)
 8003cec:	b087      	sub	sp, #28
 8003cee:	9303      	str	r3, [sp, #12]
 8003cf0:	2500      	movs	r5, #0
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	ac03      	add	r4, sp, #12
 8003cf8:	60a3      	str	r3, [r4, #8]
 8003cfa:	2601      	movs	r6, #1
 8003cfc:	6065      	str	r5, [r4, #4]
 8003cfe:	1c30      	adds	r0, r6, #0
 8003d00:	1c21      	adds	r1, r4, #0
 8003d02:	beab      	bkpt	0x00ab
 8003d04:	1c06      	adds	r6, r0, #0
 8003d06:	2101      	movs	r1, #1
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <initialise_monitor_handles+0xa8>)
 8003d0a:	4249      	negs	r1, r1
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	601e      	str	r6, [r3, #0]
 8003d10:	002b      	movs	r3, r5
 8003d12:	4d20      	ldr	r5, [pc, #128]	; (8003d94 <initialise_monitor_handles+0xac>)
 8003d14:	00da      	lsls	r2, r3, #3
 8003d16:	3301      	adds	r3, #1
 8003d18:	50a9      	str	r1, [r5, r2]
 8003d1a:	2b14      	cmp	r3, #20
 8003d1c:	d1fa      	bne.n	8003d14 <initialise_monitor_handles+0x2c>
 8003d1e:	f7ff ffd7 	bl	8003cd0 <_has_ext_stdout_stderr>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d018      	beq.n	8003d58 <initialise_monitor_handles+0x70>
 8003d26:	9b00      	ldr	r3, [sp, #0]
 8003d28:	2601      	movs	r6, #1
 8003d2a:	9303      	str	r3, [sp, #12]
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	60a3      	str	r3, [r4, #8]
 8003d30:	3301      	adds	r3, #1
 8003d32:	6063      	str	r3, [r4, #4]
 8003d34:	1c30      	adds	r0, r6, #0
 8003d36:	1c21      	adds	r1, r4, #0
 8003d38:	beab      	bkpt	0x00ab
 8003d3a:	1c07      	adds	r7, r0, #0
 8003d3c:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <initialise_monitor_handles+0xb0>)
 8003d3e:	9a00      	ldr	r2, [sp, #0]
 8003d40:	601f      	str	r7, [r3, #0]
 8003d42:	2303      	movs	r3, #3
 8003d44:	9203      	str	r2, [sp, #12]
 8003d46:	60a3      	str	r3, [r4, #8]
 8003d48:	3305      	adds	r3, #5
 8003d4a:	6063      	str	r3, [r4, #4]
 8003d4c:	1c30      	adds	r0, r6, #0
 8003d4e:	1c21      	adds	r1, r4, #0
 8003d50:	beab      	bkpt	0x00ab
 8003d52:	1c06      	adds	r6, r0, #0
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <initialise_monitor_handles+0xb4>)
 8003d56:	601e      	str	r6, [r3, #0]
 8003d58:	4e10      	ldr	r6, [pc, #64]	; (8003d9c <initialise_monitor_handles+0xb4>)
 8003d5a:	6833      	ldr	r3, [r6, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <initialise_monitor_handles+0x7e>
 8003d60:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <initialise_monitor_handles+0xb0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6033      	str	r3, [r6, #0]
 8003d66:	2400      	movs	r4, #0
 8003d68:	9b01      	ldr	r3, [sp, #4]
 8003d6a:	606c      	str	r4, [r5, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	f7ff ffae 	bl	8003cd0 <_has_ext_stdout_stderr>
 8003d74:	42a0      	cmp	r0, r4
 8003d76:	d006      	beq.n	8003d86 <initialise_monitor_handles+0x9e>
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <initialise_monitor_handles+0xb0>)
 8003d7a:	60ec      	str	r4, [r5, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	616c      	str	r4, [r5, #20]
 8003d80:	60ab      	str	r3, [r5, #8]
 8003d82:	6833      	ldr	r3, [r6, #0]
 8003d84:	612b      	str	r3, [r5, #16]
 8003d86:	b007      	add	sp, #28
 8003d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	08004dc2 	.word	0x08004dc2
 8003d90:	20000154 	.word	0x20000154
 8003d94:	2000015c 	.word	0x2000015c
 8003d98:	20000158 	.word	0x20000158
 8003d9c:	20000150 	.word	0x20000150

08003da0 <_isatty>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	f7ff fd81 	bl	80038a8 <findslot>
 8003da6:	2509      	movs	r5, #9
 8003da8:	1e04      	subs	r4, r0, #0
 8003daa:	d104      	bne.n	8003db6 <_isatty+0x16>
 8003dac:	f000 f98c 	bl	80040c8 <__errno>
 8003db0:	6005      	str	r5, [r0, #0]
 8003db2:	0020      	movs	r0, r4
 8003db4:	bd70      	pop	{r4, r5, r6, pc}
 8003db6:	1c28      	adds	r0, r5, #0
 8003db8:	1c21      	adds	r1, r4, #0
 8003dba:	beab      	bkpt	0x00ab
 8003dbc:	1c04      	adds	r4, r0, #0
 8003dbe:	0020      	movs	r0, r4
 8003dc0:	2c01      	cmp	r4, #1
 8003dc2:	d0f7      	beq.n	8003db4 <_isatty+0x14>
 8003dc4:	f000 f980 	bl	80040c8 <__errno>
 8003dc8:	2400      	movs	r4, #0
 8003dca:	0005      	movs	r5, r0
 8003dcc:	2613      	movs	r6, #19
 8003dce:	1c30      	adds	r0, r6, #0
 8003dd0:	1c21      	adds	r1, r4, #0
 8003dd2:	beab      	bkpt	0x00ab
 8003dd4:	1c06      	adds	r6, r0, #0
 8003dd6:	602e      	str	r6, [r5, #0]
 8003dd8:	e7eb      	b.n	8003db2 <_isatty+0x12>
	...

08003ddc <std>:
 8003ddc:	2300      	movs	r3, #0
 8003dde:	b510      	push	{r4, lr}
 8003de0:	0004      	movs	r4, r0
 8003de2:	6003      	str	r3, [r0, #0]
 8003de4:	6043      	str	r3, [r0, #4]
 8003de6:	6083      	str	r3, [r0, #8]
 8003de8:	8181      	strh	r1, [r0, #12]
 8003dea:	6643      	str	r3, [r0, #100]	; 0x64
 8003dec:	81c2      	strh	r2, [r0, #14]
 8003dee:	6103      	str	r3, [r0, #16]
 8003df0:	6143      	str	r3, [r0, #20]
 8003df2:	6183      	str	r3, [r0, #24]
 8003df4:	0019      	movs	r1, r3
 8003df6:	2208      	movs	r2, #8
 8003df8:	305c      	adds	r0, #92	; 0x5c
 8003dfa:	f000 f90f 	bl	800401c <memset>
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <std+0x50>)
 8003e00:	6224      	str	r4, [r4, #32]
 8003e02:	6263      	str	r3, [r4, #36]	; 0x24
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <std+0x54>)
 8003e06:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <std+0x58>)
 8003e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <std+0x5c>)
 8003e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <std+0x60>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	d005      	beq.n	8003e22 <std+0x46>
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <std+0x64>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d002      	beq.n	8003e22 <std+0x46>
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <std+0x68>)
 8003e1e:	429c      	cmp	r4, r3
 8003e20:	d103      	bne.n	8003e2a <std+0x4e>
 8003e22:	0020      	movs	r0, r4
 8003e24:	3058      	adds	r0, #88	; 0x58
 8003e26:	f000 f979 	bl	800411c <__retarget_lock_init_recursive>
 8003e2a:	bd10      	pop	{r4, pc}
 8003e2c:	08003f85 	.word	0x08003f85
 8003e30:	08003fad 	.word	0x08003fad
 8003e34:	08003fe5 	.word	0x08003fe5
 8003e38:	08004011 	.word	0x08004011
 8003e3c:	200001fc 	.word	0x200001fc
 8003e40:	20000264 	.word	0x20000264
 8003e44:	200002cc 	.word	0x200002cc

08003e48 <stdio_exit_handler>:
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	4a03      	ldr	r2, [pc, #12]	; (8003e58 <stdio_exit_handler+0x10>)
 8003e4c:	4903      	ldr	r1, [pc, #12]	; (8003e5c <stdio_exit_handler+0x14>)
 8003e4e:	4804      	ldr	r0, [pc, #16]	; (8003e60 <stdio_exit_handler+0x18>)
 8003e50:	f000 f86c 	bl	8003f2c <_fwalk_sglue>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	20000014 	.word	0x20000014
 8003e5c:	080049bd 	.word	0x080049bd
 8003e60:	20000020 	.word	0x20000020

08003e64 <cleanup_stdio>:
 8003e64:	6841      	ldr	r1, [r0, #4]
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <cleanup_stdio+0x30>)
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	0004      	movs	r4, r0
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	d001      	beq.n	8003e74 <cleanup_stdio+0x10>
 8003e70:	f000 fda4 	bl	80049bc <_fflush_r>
 8003e74:	68a1      	ldr	r1, [r4, #8]
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <cleanup_stdio+0x34>)
 8003e78:	4299      	cmp	r1, r3
 8003e7a:	d002      	beq.n	8003e82 <cleanup_stdio+0x1e>
 8003e7c:	0020      	movs	r0, r4
 8003e7e:	f000 fd9d 	bl	80049bc <_fflush_r>
 8003e82:	68e1      	ldr	r1, [r4, #12]
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <cleanup_stdio+0x38>)
 8003e86:	4299      	cmp	r1, r3
 8003e88:	d002      	beq.n	8003e90 <cleanup_stdio+0x2c>
 8003e8a:	0020      	movs	r0, r4
 8003e8c:	f000 fd96 	bl	80049bc <_fflush_r>
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	200001fc 	.word	0x200001fc
 8003e98:	20000264 	.word	0x20000264
 8003e9c:	200002cc 	.word	0x200002cc

08003ea0 <global_stdio_init.part.0>:
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <global_stdio_init.part.0+0x28>)
 8003ea4:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <global_stdio_init.part.0+0x2c>)
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	4809      	ldr	r0, [pc, #36]	; (8003ed0 <global_stdio_init.part.0+0x30>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	f7ff ff95 	bl	8003ddc <std>
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2109      	movs	r1, #9
 8003eb6:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <global_stdio_init.part.0+0x34>)
 8003eb8:	f7ff ff90 	bl	8003ddc <std>
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	2112      	movs	r1, #18
 8003ec0:	4805      	ldr	r0, [pc, #20]	; (8003ed8 <global_stdio_init.part.0+0x38>)
 8003ec2:	f7ff ff8b 	bl	8003ddc <std>
 8003ec6:	bd10      	pop	{r4, pc}
 8003ec8:	20000334 	.word	0x20000334
 8003ecc:	08003e49 	.word	0x08003e49
 8003ed0:	200001fc 	.word	0x200001fc
 8003ed4:	20000264 	.word	0x20000264
 8003ed8:	200002cc 	.word	0x200002cc

08003edc <__sfp_lock_acquire>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <__sfp_lock_acquire+0xc>)
 8003ee0:	f000 f91d 	bl	800411e <__retarget_lock_acquire_recursive>
 8003ee4:	bd10      	pop	{r4, pc}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	2000033d 	.word	0x2000033d

08003eec <__sfp_lock_release>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <__sfp_lock_release+0xc>)
 8003ef0:	f000 f916 	bl	8004120 <__retarget_lock_release_recursive>
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	2000033d 	.word	0x2000033d

08003efc <__sinit>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	0004      	movs	r4, r0
 8003f00:	f7ff ffec 	bl	8003edc <__sfp_lock_acquire>
 8003f04:	6a23      	ldr	r3, [r4, #32]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <__sinit+0x14>
 8003f0a:	f7ff ffef 	bl	8003eec <__sfp_lock_release>
 8003f0e:	bd10      	pop	{r4, pc}
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <__sinit+0x28>)
 8003f12:	6223      	str	r3, [r4, #32]
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <__sinit+0x2c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f6      	bne.n	8003f0a <__sinit+0xe>
 8003f1c:	f7ff ffc0 	bl	8003ea0 <global_stdio_init.part.0>
 8003f20:	e7f3      	b.n	8003f0a <__sinit+0xe>
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	08003e65 	.word	0x08003e65
 8003f28:	20000334 	.word	0x20000334

08003f2c <_fwalk_sglue>:
 8003f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f2e:	0014      	movs	r4, r2
 8003f30:	2600      	movs	r6, #0
 8003f32:	9000      	str	r0, [sp, #0]
 8003f34:	9101      	str	r1, [sp, #4]
 8003f36:	68a5      	ldr	r5, [r4, #8]
 8003f38:	6867      	ldr	r7, [r4, #4]
 8003f3a:	3f01      	subs	r7, #1
 8003f3c:	d504      	bpl.n	8003f48 <_fwalk_sglue+0x1c>
 8003f3e:	6824      	ldr	r4, [r4, #0]
 8003f40:	2c00      	cmp	r4, #0
 8003f42:	d1f8      	bne.n	8003f36 <_fwalk_sglue+0xa>
 8003f44:	0030      	movs	r0, r6
 8003f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f48:	89ab      	ldrh	r3, [r5, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d908      	bls.n	8003f60 <_fwalk_sglue+0x34>
 8003f4e:	220e      	movs	r2, #14
 8003f50:	5eab      	ldrsh	r3, [r5, r2]
 8003f52:	3301      	adds	r3, #1
 8003f54:	d004      	beq.n	8003f60 <_fwalk_sglue+0x34>
 8003f56:	0029      	movs	r1, r5
 8003f58:	9800      	ldr	r0, [sp, #0]
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	4798      	blx	r3
 8003f5e:	4306      	orrs	r6, r0
 8003f60:	3568      	adds	r5, #104	; 0x68
 8003f62:	e7ea      	b.n	8003f3a <_fwalk_sglue+0xe>

08003f64 <iprintf>:
 8003f64:	b40f      	push	{r0, r1, r2, r3}
 8003f66:	b507      	push	{r0, r1, r2, lr}
 8003f68:	4905      	ldr	r1, [pc, #20]	; (8003f80 <iprintf+0x1c>)
 8003f6a:	ab04      	add	r3, sp, #16
 8003f6c:	6808      	ldr	r0, [r1, #0]
 8003f6e:	cb04      	ldmia	r3!, {r2}
 8003f70:	6881      	ldr	r1, [r0, #8]
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	f000 f9fc 	bl	8004370 <_vfiprintf_r>
 8003f78:	b003      	add	sp, #12
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	b004      	add	sp, #16
 8003f7e:	4718      	bx	r3
 8003f80:	2000006c 	.word	0x2000006c

08003f84 <__sread>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	000c      	movs	r4, r1
 8003f88:	250e      	movs	r5, #14
 8003f8a:	5f49      	ldrsh	r1, [r1, r5]
 8003f8c:	f000 f874 	bl	8004078 <_read_r>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	db03      	blt.n	8003f9c <__sread+0x18>
 8003f94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f96:	181b      	adds	r3, r3, r0
 8003f98:	6563      	str	r3, [r4, #84]	; 0x54
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	4a02      	ldr	r2, [pc, #8]	; (8003fa8 <__sread+0x24>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	e7f9      	b.n	8003f9a <__sread+0x16>
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	ffffefff 	.word	0xffffefff

08003fac <__swrite>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	001f      	movs	r7, r3
 8003fb0:	898b      	ldrh	r3, [r1, #12]
 8003fb2:	0005      	movs	r5, r0
 8003fb4:	000c      	movs	r4, r1
 8003fb6:	0016      	movs	r6, r2
 8003fb8:	05db      	lsls	r3, r3, #23
 8003fba:	d505      	bpl.n	8003fc8 <__swrite+0x1c>
 8003fbc:	230e      	movs	r3, #14
 8003fbe:	5ec9      	ldrsh	r1, [r1, r3]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f000 f844 	bl	8004050 <_lseek_r>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <__swrite+0x34>)
 8003fcc:	0028      	movs	r0, r5
 8003fce:	4013      	ands	r3, r2
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	0032      	movs	r2, r6
 8003fd4:	230e      	movs	r3, #14
 8003fd6:	5ee1      	ldrsh	r1, [r4, r3]
 8003fd8:	003b      	movs	r3, r7
 8003fda:	f000 f861 	bl	80040a0 <_write_r>
 8003fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe0:	ffffefff 	.word	0xffffefff

08003fe4 <__sseek>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	000c      	movs	r4, r1
 8003fe8:	250e      	movs	r5, #14
 8003fea:	5f49      	ldrsh	r1, [r1, r5]
 8003fec:	f000 f830 	bl	8004050 <_lseek_r>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	1c42      	adds	r2, r0, #1
 8003ff4:	d103      	bne.n	8003ffe <__sseek+0x1a>
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <__sseek+0x28>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	0152      	lsls	r2, r2, #5
 8004002:	4313      	orrs	r3, r2
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	6560      	str	r0, [r4, #84]	; 0x54
 8004008:	e7f8      	b.n	8003ffc <__sseek+0x18>
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	ffffefff 	.word	0xffffefff

08004010 <__sclose>:
 8004010:	b510      	push	{r4, lr}
 8004012:	230e      	movs	r3, #14
 8004014:	5ec9      	ldrsh	r1, [r1, r3]
 8004016:	f000 f809 	bl	800402c <_close_r>
 800401a:	bd10      	pop	{r4, pc}

0800401c <memset>:
 800401c:	0003      	movs	r3, r0
 800401e:	1882      	adds	r2, r0, r2
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	7019      	strb	r1, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <_close_r>:
 800402c:	2300      	movs	r3, #0
 800402e:	b570      	push	{r4, r5, r6, lr}
 8004030:	4d06      	ldr	r5, [pc, #24]	; (800404c <_close_r+0x20>)
 8004032:	0004      	movs	r4, r0
 8004034:	0008      	movs	r0, r1
 8004036:	602b      	str	r3, [r5, #0]
 8004038:	f7ff fd08 	bl	8003a4c <_close>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d103      	bne.n	8004048 <_close_r+0x1c>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d000      	beq.n	8004048 <_close_r+0x1c>
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	bd70      	pop	{r4, r5, r6, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	20000338 	.word	0x20000338

08004050 <_lseek_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	0004      	movs	r4, r0
 8004054:	0008      	movs	r0, r1
 8004056:	0011      	movs	r1, r2
 8004058:	001a      	movs	r2, r3
 800405a:	2300      	movs	r3, #0
 800405c:	4d05      	ldr	r5, [pc, #20]	; (8004074 <_lseek_r+0x24>)
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	f7ff fcb5 	bl	80039ce <_lseek>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d103      	bne.n	8004070 <_lseek_r+0x20>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d000      	beq.n	8004070 <_lseek_r+0x20>
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	bd70      	pop	{r4, r5, r6, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	20000338 	.word	0x20000338

08004078 <_read_r>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	0004      	movs	r4, r0
 800407c:	0008      	movs	r0, r1
 800407e:	0011      	movs	r1, r2
 8004080:	001a      	movs	r2, r3
 8004082:	2300      	movs	r3, #0
 8004084:	4d05      	ldr	r5, [pc, #20]	; (800409c <_read_r+0x24>)
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	f7ff fc4c 	bl	8003924 <_read>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d103      	bne.n	8004098 <_read_r+0x20>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d000      	beq.n	8004098 <_read_r+0x20>
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	bd70      	pop	{r4, r5, r6, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20000338 	.word	0x20000338

080040a0 <_write_r>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	0004      	movs	r4, r0
 80040a4:	0008      	movs	r0, r1
 80040a6:	0011      	movs	r1, r2
 80040a8:	001a      	movs	r2, r3
 80040aa:	2300      	movs	r3, #0
 80040ac:	4d05      	ldr	r5, [pc, #20]	; (80040c4 <_write_r+0x24>)
 80040ae:	602b      	str	r3, [r5, #0]
 80040b0:	f7ff fca1 	bl	80039f6 <_write>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d103      	bne.n	80040c0 <_write_r+0x20>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d000      	beq.n	80040c0 <_write_r+0x20>
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	20000338 	.word	0x20000338

080040c8 <__errno>:
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <__errno+0x8>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	4770      	bx	lr
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	2000006c 	.word	0x2000006c

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	2600      	movs	r6, #0
 80040d8:	4c0c      	ldr	r4, [pc, #48]	; (800410c <__libc_init_array+0x38>)
 80040da:	4d0d      	ldr	r5, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	2600      	movs	r6, #0
 80040e6:	f000 fde3 	bl	8004cb0 <_init>
 80040ea:	4c0a      	ldr	r4, [pc, #40]	; (8004114 <__libc_init_array+0x40>)
 80040ec:	4d0a      	ldr	r5, [pc, #40]	; (8004118 <__libc_init_array+0x44>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	42a6      	cmp	r6, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	00b3      	lsls	r3, r6, #2
 80040fa:	58eb      	ldr	r3, [r5, r3]
 80040fc:	4798      	blx	r3
 80040fe:	3601      	adds	r6, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	00b3      	lsls	r3, r6, #2
 8004104:	58eb      	ldr	r3, [r5, r3]
 8004106:	4798      	blx	r3
 8004108:	3601      	adds	r6, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08004e04 	.word	0x08004e04
 8004110:	08004e04 	.word	0x08004e04
 8004114:	08004e08 	.word	0x08004e08
 8004118:	08004e04 	.word	0x08004e04

0800411c <__retarget_lock_init_recursive>:
 800411c:	4770      	bx	lr

0800411e <__retarget_lock_acquire_recursive>:
 800411e:	4770      	bx	lr

08004120 <__retarget_lock_release_recursive>:
 8004120:	4770      	bx	lr
	...

08004124 <_free_r>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	0005      	movs	r5, r0
 8004128:	2900      	cmp	r1, #0
 800412a:	d010      	beq.n	800414e <_free_r+0x2a>
 800412c:	1f0c      	subs	r4, r1, #4
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da00      	bge.n	8004136 <_free_r+0x12>
 8004134:	18e4      	adds	r4, r4, r3
 8004136:	0028      	movs	r0, r5
 8004138:	f000 f8e2 	bl	8004300 <__malloc_lock>
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <_free_r+0x90>)
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <_free_r+0x2c>
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	6014      	str	r4, [r2, #0]
 8004148:	0028      	movs	r0, r5
 800414a:	f000 f8e1 	bl	8004310 <__malloc_unlock>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	42a3      	cmp	r3, r4
 8004152:	d908      	bls.n	8004166 <_free_r+0x42>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	1821      	adds	r1, r4, r0
 8004158:	428b      	cmp	r3, r1
 800415a:	d1f3      	bne.n	8004144 <_free_r+0x20>
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	1809      	adds	r1, r1, r0
 8004162:	6021      	str	r1, [r4, #0]
 8004164:	e7ee      	b.n	8004144 <_free_r+0x20>
 8004166:	001a      	movs	r2, r3
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <_free_r+0x4e>
 800416e:	42a3      	cmp	r3, r4
 8004170:	d9f9      	bls.n	8004166 <_free_r+0x42>
 8004172:	6811      	ldr	r1, [r2, #0]
 8004174:	1850      	adds	r0, r2, r1
 8004176:	42a0      	cmp	r0, r4
 8004178:	d10b      	bne.n	8004192 <_free_r+0x6e>
 800417a:	6820      	ldr	r0, [r4, #0]
 800417c:	1809      	adds	r1, r1, r0
 800417e:	1850      	adds	r0, r2, r1
 8004180:	6011      	str	r1, [r2, #0]
 8004182:	4283      	cmp	r3, r0
 8004184:	d1e0      	bne.n	8004148 <_free_r+0x24>
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	1841      	adds	r1, r0, r1
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	6053      	str	r3, [r2, #4]
 8004190:	e7da      	b.n	8004148 <_free_r+0x24>
 8004192:	42a0      	cmp	r0, r4
 8004194:	d902      	bls.n	800419c <_free_r+0x78>
 8004196:	230c      	movs	r3, #12
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	e7d5      	b.n	8004148 <_free_r+0x24>
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	1821      	adds	r1, r4, r0
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d103      	bne.n	80041ac <_free_r+0x88>
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	1809      	adds	r1, r1, r0
 80041aa:	6021      	str	r1, [r4, #0]
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6054      	str	r4, [r2, #4]
 80041b0:	e7ca      	b.n	8004148 <_free_r+0x24>
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	20000340 	.word	0x20000340

080041b8 <sbrk_aligned>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	4e0f      	ldr	r6, [pc, #60]	; (80041f8 <sbrk_aligned+0x40>)
 80041bc:	000d      	movs	r5, r1
 80041be:	6831      	ldr	r1, [r6, #0]
 80041c0:	0004      	movs	r4, r0
 80041c2:	2900      	cmp	r1, #0
 80041c4:	d102      	bne.n	80041cc <sbrk_aligned+0x14>
 80041c6:	f000 fccb 	bl	8004b60 <_sbrk_r>
 80041ca:	6030      	str	r0, [r6, #0]
 80041cc:	0029      	movs	r1, r5
 80041ce:	0020      	movs	r0, r4
 80041d0:	f000 fcc6 	bl	8004b60 <_sbrk_r>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d00a      	beq.n	80041ee <sbrk_aligned+0x36>
 80041d8:	2303      	movs	r3, #3
 80041da:	1cc5      	adds	r5, r0, #3
 80041dc:	439d      	bics	r5, r3
 80041de:	42a8      	cmp	r0, r5
 80041e0:	d007      	beq.n	80041f2 <sbrk_aligned+0x3a>
 80041e2:	1a29      	subs	r1, r5, r0
 80041e4:	0020      	movs	r0, r4
 80041e6:	f000 fcbb 	bl	8004b60 <_sbrk_r>
 80041ea:	3001      	adds	r0, #1
 80041ec:	d101      	bne.n	80041f2 <sbrk_aligned+0x3a>
 80041ee:	2501      	movs	r5, #1
 80041f0:	426d      	negs	r5, r5
 80041f2:	0028      	movs	r0, r5
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	20000344 	.word	0x20000344

080041fc <_malloc_r>:
 80041fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041fe:	2203      	movs	r2, #3
 8004200:	1ccb      	adds	r3, r1, #3
 8004202:	4393      	bics	r3, r2
 8004204:	3308      	adds	r3, #8
 8004206:	0006      	movs	r6, r0
 8004208:	001f      	movs	r7, r3
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d238      	bcs.n	8004280 <_malloc_r+0x84>
 800420e:	270c      	movs	r7, #12
 8004210:	42b9      	cmp	r1, r7
 8004212:	d837      	bhi.n	8004284 <_malloc_r+0x88>
 8004214:	0030      	movs	r0, r6
 8004216:	f000 f873 	bl	8004300 <__malloc_lock>
 800421a:	4b38      	ldr	r3, [pc, #224]	; (80042fc <_malloc_r+0x100>)
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	001c      	movs	r4, r3
 8004222:	2c00      	cmp	r4, #0
 8004224:	d133      	bne.n	800428e <_malloc_r+0x92>
 8004226:	0039      	movs	r1, r7
 8004228:	0030      	movs	r0, r6
 800422a:	f7ff ffc5 	bl	80041b8 <sbrk_aligned>
 800422e:	0004      	movs	r4, r0
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d15e      	bne.n	80042f2 <_malloc_r+0xf6>
 8004234:	9b00      	ldr	r3, [sp, #0]
 8004236:	681c      	ldr	r4, [r3, #0]
 8004238:	0025      	movs	r5, r4
 800423a:	2d00      	cmp	r5, #0
 800423c:	d14e      	bne.n	80042dc <_malloc_r+0xe0>
 800423e:	2c00      	cmp	r4, #0
 8004240:	d051      	beq.n	80042e6 <_malloc_r+0xea>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0029      	movs	r1, r5
 8004246:	18e3      	adds	r3, r4, r3
 8004248:	0030      	movs	r0, r6
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	f000 fc88 	bl	8004b60 <_sbrk_r>
 8004250:	9b01      	ldr	r3, [sp, #4]
 8004252:	4283      	cmp	r3, r0
 8004254:	d147      	bne.n	80042e6 <_malloc_r+0xea>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	0030      	movs	r0, r6
 800425a:	1aff      	subs	r7, r7, r3
 800425c:	0039      	movs	r1, r7
 800425e:	f7ff ffab 	bl	80041b8 <sbrk_aligned>
 8004262:	3001      	adds	r0, #1
 8004264:	d03f      	beq.n	80042e6 <_malloc_r+0xea>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	19db      	adds	r3, r3, r7
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	9b00      	ldr	r3, [sp, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d040      	beq.n	80042f6 <_malloc_r+0xfa>
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	42a2      	cmp	r2, r4
 8004278:	d133      	bne.n	80042e2 <_malloc_r+0xe6>
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e014      	b.n	80042aa <_malloc_r+0xae>
 8004280:	2b00      	cmp	r3, #0
 8004282:	dac5      	bge.n	8004210 <_malloc_r+0x14>
 8004284:	230c      	movs	r3, #12
 8004286:	2500      	movs	r5, #0
 8004288:	6033      	str	r3, [r6, #0]
 800428a:	0028      	movs	r0, r5
 800428c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800428e:	6821      	ldr	r1, [r4, #0]
 8004290:	1bc9      	subs	r1, r1, r7
 8004292:	d420      	bmi.n	80042d6 <_malloc_r+0xda>
 8004294:	290b      	cmp	r1, #11
 8004296:	d918      	bls.n	80042ca <_malloc_r+0xce>
 8004298:	19e2      	adds	r2, r4, r7
 800429a:	6027      	str	r7, [r4, #0]
 800429c:	42a3      	cmp	r3, r4
 800429e:	d112      	bne.n	80042c6 <_malloc_r+0xca>
 80042a0:	9b00      	ldr	r3, [sp, #0]
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	6863      	ldr	r3, [r4, #4]
 80042a6:	6011      	str	r1, [r2, #0]
 80042a8:	6053      	str	r3, [r2, #4]
 80042aa:	0030      	movs	r0, r6
 80042ac:	0025      	movs	r5, r4
 80042ae:	f000 f82f 	bl	8004310 <__malloc_unlock>
 80042b2:	2207      	movs	r2, #7
 80042b4:	350b      	adds	r5, #11
 80042b6:	1d23      	adds	r3, r4, #4
 80042b8:	4395      	bics	r5, r2
 80042ba:	1aea      	subs	r2, r5, r3
 80042bc:	429d      	cmp	r5, r3
 80042be:	d0e4      	beq.n	800428a <_malloc_r+0x8e>
 80042c0:	1b5b      	subs	r3, r3, r5
 80042c2:	50a3      	str	r3, [r4, r2]
 80042c4:	e7e1      	b.n	800428a <_malloc_r+0x8e>
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	e7ec      	b.n	80042a4 <_malloc_r+0xa8>
 80042ca:	6862      	ldr	r2, [r4, #4]
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	d1d5      	bne.n	800427c <_malloc_r+0x80>
 80042d0:	9b00      	ldr	r3, [sp, #0]
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e7e9      	b.n	80042aa <_malloc_r+0xae>
 80042d6:	0023      	movs	r3, r4
 80042d8:	6864      	ldr	r4, [r4, #4]
 80042da:	e7a2      	b.n	8004222 <_malloc_r+0x26>
 80042dc:	002c      	movs	r4, r5
 80042de:	686d      	ldr	r5, [r5, #4]
 80042e0:	e7ab      	b.n	800423a <_malloc_r+0x3e>
 80042e2:	0013      	movs	r3, r2
 80042e4:	e7c4      	b.n	8004270 <_malloc_r+0x74>
 80042e6:	230c      	movs	r3, #12
 80042e8:	0030      	movs	r0, r6
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	f000 f810 	bl	8004310 <__malloc_unlock>
 80042f0:	e7cb      	b.n	800428a <_malloc_r+0x8e>
 80042f2:	6027      	str	r7, [r4, #0]
 80042f4:	e7d9      	b.n	80042aa <_malloc_r+0xae>
 80042f6:	605b      	str	r3, [r3, #4]
 80042f8:	deff      	udf	#255	; 0xff
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	20000340 	.word	0x20000340

08004300 <__malloc_lock>:
 8004300:	b510      	push	{r4, lr}
 8004302:	4802      	ldr	r0, [pc, #8]	; (800430c <__malloc_lock+0xc>)
 8004304:	f7ff ff0b 	bl	800411e <__retarget_lock_acquire_recursive>
 8004308:	bd10      	pop	{r4, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	2000033c 	.word	0x2000033c

08004310 <__malloc_unlock>:
 8004310:	b510      	push	{r4, lr}
 8004312:	4802      	ldr	r0, [pc, #8]	; (800431c <__malloc_unlock+0xc>)
 8004314:	f7ff ff04 	bl	8004120 <__retarget_lock_release_recursive>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	2000033c 	.word	0x2000033c

08004320 <__sfputc_r>:
 8004320:	6893      	ldr	r3, [r2, #8]
 8004322:	b510      	push	{r4, lr}
 8004324:	3b01      	subs	r3, #1
 8004326:	6093      	str	r3, [r2, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da04      	bge.n	8004336 <__sfputc_r+0x16>
 800432c:	6994      	ldr	r4, [r2, #24]
 800432e:	42a3      	cmp	r3, r4
 8004330:	db07      	blt.n	8004342 <__sfputc_r+0x22>
 8004332:	290a      	cmp	r1, #10
 8004334:	d005      	beq.n	8004342 <__sfputc_r+0x22>
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	1c58      	adds	r0, r3, #1
 800433a:	6010      	str	r0, [r2, #0]
 800433c:	7019      	strb	r1, [r3, #0]
 800433e:	0008      	movs	r0, r1
 8004340:	bd10      	pop	{r4, pc}
 8004342:	f000 fb66 	bl	8004a12 <__swbuf_r>
 8004346:	0001      	movs	r1, r0
 8004348:	e7f9      	b.n	800433e <__sfputc_r+0x1e>

0800434a <__sfputs_r>:
 800434a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434c:	0006      	movs	r6, r0
 800434e:	000f      	movs	r7, r1
 8004350:	0014      	movs	r4, r2
 8004352:	18d5      	adds	r5, r2, r3
 8004354:	42ac      	cmp	r4, r5
 8004356:	d101      	bne.n	800435c <__sfputs_r+0x12>
 8004358:	2000      	movs	r0, #0
 800435a:	e007      	b.n	800436c <__sfputs_r+0x22>
 800435c:	7821      	ldrb	r1, [r4, #0]
 800435e:	003a      	movs	r2, r7
 8004360:	0030      	movs	r0, r6
 8004362:	f7ff ffdd 	bl	8004320 <__sfputc_r>
 8004366:	3401      	adds	r4, #1
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d1f3      	bne.n	8004354 <__sfputs_r+0xa>
 800436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004370 <_vfiprintf_r>:
 8004370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004372:	b0a1      	sub	sp, #132	; 0x84
 8004374:	000f      	movs	r7, r1
 8004376:	0015      	movs	r5, r2
 8004378:	001e      	movs	r6, r3
 800437a:	9003      	str	r0, [sp, #12]
 800437c:	2800      	cmp	r0, #0
 800437e:	d004      	beq.n	800438a <_vfiprintf_r+0x1a>
 8004380:	6a03      	ldr	r3, [r0, #32]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <_vfiprintf_r+0x1a>
 8004386:	f7ff fdb9 	bl	8003efc <__sinit>
 800438a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800438c:	07db      	lsls	r3, r3, #31
 800438e:	d405      	bmi.n	800439c <_vfiprintf_r+0x2c>
 8004390:	89bb      	ldrh	r3, [r7, #12]
 8004392:	059b      	lsls	r3, r3, #22
 8004394:	d402      	bmi.n	800439c <_vfiprintf_r+0x2c>
 8004396:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004398:	f7ff fec1 	bl	800411e <__retarget_lock_acquire_recursive>
 800439c:	89bb      	ldrh	r3, [r7, #12]
 800439e:	071b      	lsls	r3, r3, #28
 80043a0:	d502      	bpl.n	80043a8 <_vfiprintf_r+0x38>
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d113      	bne.n	80043d0 <_vfiprintf_r+0x60>
 80043a8:	0039      	movs	r1, r7
 80043aa:	9803      	ldr	r0, [sp, #12]
 80043ac:	f000 fb74 	bl	8004a98 <__swsetup_r>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d00d      	beq.n	80043d0 <_vfiprintf_r+0x60>
 80043b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b6:	07db      	lsls	r3, r3, #31
 80043b8:	d503      	bpl.n	80043c2 <_vfiprintf_r+0x52>
 80043ba:	2001      	movs	r0, #1
 80043bc:	4240      	negs	r0, r0
 80043be:	b021      	add	sp, #132	; 0x84
 80043c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c2:	89bb      	ldrh	r3, [r7, #12]
 80043c4:	059b      	lsls	r3, r3, #22
 80043c6:	d4f8      	bmi.n	80043ba <_vfiprintf_r+0x4a>
 80043c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80043ca:	f7ff fea9 	bl	8004120 <__retarget_lock_release_recursive>
 80043ce:	e7f4      	b.n	80043ba <_vfiprintf_r+0x4a>
 80043d0:	2300      	movs	r3, #0
 80043d2:	ac08      	add	r4, sp, #32
 80043d4:	6163      	str	r3, [r4, #20]
 80043d6:	3320      	adds	r3, #32
 80043d8:	7663      	strb	r3, [r4, #25]
 80043da:	3310      	adds	r3, #16
 80043dc:	76a3      	strb	r3, [r4, #26]
 80043de:	9607      	str	r6, [sp, #28]
 80043e0:	002e      	movs	r6, r5
 80043e2:	7833      	ldrb	r3, [r6, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <_vfiprintf_r+0x7c>
 80043e8:	2b25      	cmp	r3, #37	; 0x25
 80043ea:	d148      	bne.n	800447e <_vfiprintf_r+0x10e>
 80043ec:	1b73      	subs	r3, r6, r5
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	42ae      	cmp	r6, r5
 80043f2:	d00b      	beq.n	800440c <_vfiprintf_r+0x9c>
 80043f4:	002a      	movs	r2, r5
 80043f6:	0039      	movs	r1, r7
 80043f8:	9803      	ldr	r0, [sp, #12]
 80043fa:	f7ff ffa6 	bl	800434a <__sfputs_r>
 80043fe:	3001      	adds	r0, #1
 8004400:	d100      	bne.n	8004404 <_vfiprintf_r+0x94>
 8004402:	e0af      	b.n	8004564 <_vfiprintf_r+0x1f4>
 8004404:	6963      	ldr	r3, [r4, #20]
 8004406:	9a05      	ldr	r2, [sp, #20]
 8004408:	189b      	adds	r3, r3, r2
 800440a:	6163      	str	r3, [r4, #20]
 800440c:	7833      	ldrb	r3, [r6, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d100      	bne.n	8004414 <_vfiprintf_r+0xa4>
 8004412:	e0a7      	b.n	8004564 <_vfiprintf_r+0x1f4>
 8004414:	2201      	movs	r2, #1
 8004416:	2300      	movs	r3, #0
 8004418:	4252      	negs	r2, r2
 800441a:	6062      	str	r2, [r4, #4]
 800441c:	a904      	add	r1, sp, #16
 800441e:	3254      	adds	r2, #84	; 0x54
 8004420:	1852      	adds	r2, r2, r1
 8004422:	1c75      	adds	r5, r6, #1
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	60e3      	str	r3, [r4, #12]
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	7013      	strb	r3, [r2, #0]
 800442c:	65a3      	str	r3, [r4, #88]	; 0x58
 800442e:	4b59      	ldr	r3, [pc, #356]	; (8004594 <_vfiprintf_r+0x224>)
 8004430:	2205      	movs	r2, #5
 8004432:	0018      	movs	r0, r3
 8004434:	7829      	ldrb	r1, [r5, #0]
 8004436:	9305      	str	r3, [sp, #20]
 8004438:	f000 fba4 	bl	8004b84 <memchr>
 800443c:	1c6e      	adds	r6, r5, #1
 800443e:	2800      	cmp	r0, #0
 8004440:	d11f      	bne.n	8004482 <_vfiprintf_r+0x112>
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	06d3      	lsls	r3, r2, #27
 8004446:	d504      	bpl.n	8004452 <_vfiprintf_r+0xe2>
 8004448:	2353      	movs	r3, #83	; 0x53
 800444a:	a904      	add	r1, sp, #16
 800444c:	185b      	adds	r3, r3, r1
 800444e:	2120      	movs	r1, #32
 8004450:	7019      	strb	r1, [r3, #0]
 8004452:	0713      	lsls	r3, r2, #28
 8004454:	d504      	bpl.n	8004460 <_vfiprintf_r+0xf0>
 8004456:	2353      	movs	r3, #83	; 0x53
 8004458:	a904      	add	r1, sp, #16
 800445a:	185b      	adds	r3, r3, r1
 800445c:	212b      	movs	r1, #43	; 0x2b
 800445e:	7019      	strb	r1, [r3, #0]
 8004460:	782b      	ldrb	r3, [r5, #0]
 8004462:	2b2a      	cmp	r3, #42	; 0x2a
 8004464:	d016      	beq.n	8004494 <_vfiprintf_r+0x124>
 8004466:	002e      	movs	r6, r5
 8004468:	2100      	movs	r1, #0
 800446a:	200a      	movs	r0, #10
 800446c:	68e3      	ldr	r3, [r4, #12]
 800446e:	7832      	ldrb	r2, [r6, #0]
 8004470:	1c75      	adds	r5, r6, #1
 8004472:	3a30      	subs	r2, #48	; 0x30
 8004474:	2a09      	cmp	r2, #9
 8004476:	d94e      	bls.n	8004516 <_vfiprintf_r+0x1a6>
 8004478:	2900      	cmp	r1, #0
 800447a:	d111      	bne.n	80044a0 <_vfiprintf_r+0x130>
 800447c:	e017      	b.n	80044ae <_vfiprintf_r+0x13e>
 800447e:	3601      	adds	r6, #1
 8004480:	e7af      	b.n	80043e2 <_vfiprintf_r+0x72>
 8004482:	9b05      	ldr	r3, [sp, #20]
 8004484:	6822      	ldr	r2, [r4, #0]
 8004486:	1ac0      	subs	r0, r0, r3
 8004488:	2301      	movs	r3, #1
 800448a:	4083      	lsls	r3, r0
 800448c:	4313      	orrs	r3, r2
 800448e:	0035      	movs	r5, r6
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	e7cc      	b.n	800442e <_vfiprintf_r+0xbe>
 8004494:	9b07      	ldr	r3, [sp, #28]
 8004496:	1d19      	adds	r1, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	9107      	str	r1, [sp, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db01      	blt.n	80044a4 <_vfiprintf_r+0x134>
 80044a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044a2:	e004      	b.n	80044ae <_vfiprintf_r+0x13e>
 80044a4:	425b      	negs	r3, r3
 80044a6:	60e3      	str	r3, [r4, #12]
 80044a8:	2302      	movs	r3, #2
 80044aa:	4313      	orrs	r3, r2
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	7833      	ldrb	r3, [r6, #0]
 80044b0:	2b2e      	cmp	r3, #46	; 0x2e
 80044b2:	d10a      	bne.n	80044ca <_vfiprintf_r+0x15a>
 80044b4:	7873      	ldrb	r3, [r6, #1]
 80044b6:	2b2a      	cmp	r3, #42	; 0x2a
 80044b8:	d135      	bne.n	8004526 <_vfiprintf_r+0x1b6>
 80044ba:	9b07      	ldr	r3, [sp, #28]
 80044bc:	3602      	adds	r6, #2
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	9207      	str	r2, [sp, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db2b      	blt.n	8004520 <_vfiprintf_r+0x1b0>
 80044c8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ca:	4d33      	ldr	r5, [pc, #204]	; (8004598 <_vfiprintf_r+0x228>)
 80044cc:	2203      	movs	r2, #3
 80044ce:	0028      	movs	r0, r5
 80044d0:	7831      	ldrb	r1, [r6, #0]
 80044d2:	f000 fb57 	bl	8004b84 <memchr>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d006      	beq.n	80044e8 <_vfiprintf_r+0x178>
 80044da:	2340      	movs	r3, #64	; 0x40
 80044dc:	1b40      	subs	r0, r0, r5
 80044de:	4083      	lsls	r3, r0
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	3601      	adds	r6, #1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	7831      	ldrb	r1, [r6, #0]
 80044ea:	2206      	movs	r2, #6
 80044ec:	482b      	ldr	r0, [pc, #172]	; (800459c <_vfiprintf_r+0x22c>)
 80044ee:	1c75      	adds	r5, r6, #1
 80044f0:	7621      	strb	r1, [r4, #24]
 80044f2:	f000 fb47 	bl	8004b84 <memchr>
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d043      	beq.n	8004582 <_vfiprintf_r+0x212>
 80044fa:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <_vfiprintf_r+0x230>)
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d125      	bne.n	800454c <_vfiprintf_r+0x1dc>
 8004500:	2207      	movs	r2, #7
 8004502:	9b07      	ldr	r3, [sp, #28]
 8004504:	3307      	adds	r3, #7
 8004506:	4393      	bics	r3, r2
 8004508:	3308      	adds	r3, #8
 800450a:	9307      	str	r3, [sp, #28]
 800450c:	6963      	ldr	r3, [r4, #20]
 800450e:	9a04      	ldr	r2, [sp, #16]
 8004510:	189b      	adds	r3, r3, r2
 8004512:	6163      	str	r3, [r4, #20]
 8004514:	e764      	b.n	80043e0 <_vfiprintf_r+0x70>
 8004516:	4343      	muls	r3, r0
 8004518:	002e      	movs	r6, r5
 800451a:	2101      	movs	r1, #1
 800451c:	189b      	adds	r3, r3, r2
 800451e:	e7a6      	b.n	800446e <_vfiprintf_r+0xfe>
 8004520:	2301      	movs	r3, #1
 8004522:	425b      	negs	r3, r3
 8004524:	e7d0      	b.n	80044c8 <_vfiprintf_r+0x158>
 8004526:	2300      	movs	r3, #0
 8004528:	200a      	movs	r0, #10
 800452a:	001a      	movs	r2, r3
 800452c:	3601      	adds	r6, #1
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	7831      	ldrb	r1, [r6, #0]
 8004532:	1c75      	adds	r5, r6, #1
 8004534:	3930      	subs	r1, #48	; 0x30
 8004536:	2909      	cmp	r1, #9
 8004538:	d903      	bls.n	8004542 <_vfiprintf_r+0x1d2>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0c5      	beq.n	80044ca <_vfiprintf_r+0x15a>
 800453e:	9209      	str	r2, [sp, #36]	; 0x24
 8004540:	e7c3      	b.n	80044ca <_vfiprintf_r+0x15a>
 8004542:	4342      	muls	r2, r0
 8004544:	002e      	movs	r6, r5
 8004546:	2301      	movs	r3, #1
 8004548:	1852      	adds	r2, r2, r1
 800454a:	e7f1      	b.n	8004530 <_vfiprintf_r+0x1c0>
 800454c:	aa07      	add	r2, sp, #28
 800454e:	9200      	str	r2, [sp, #0]
 8004550:	0021      	movs	r1, r4
 8004552:	003a      	movs	r2, r7
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <_vfiprintf_r+0x234>)
 8004556:	9803      	ldr	r0, [sp, #12]
 8004558:	e000      	b.n	800455c <_vfiprintf_r+0x1ec>
 800455a:	bf00      	nop
 800455c:	9004      	str	r0, [sp, #16]
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	d1d3      	bne.n	800450c <_vfiprintf_r+0x19c>
 8004564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004566:	07db      	lsls	r3, r3, #31
 8004568:	d405      	bmi.n	8004576 <_vfiprintf_r+0x206>
 800456a:	89bb      	ldrh	r3, [r7, #12]
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	d402      	bmi.n	8004576 <_vfiprintf_r+0x206>
 8004570:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004572:	f7ff fdd5 	bl	8004120 <__retarget_lock_release_recursive>
 8004576:	89bb      	ldrh	r3, [r7, #12]
 8004578:	065b      	lsls	r3, r3, #25
 800457a:	d500      	bpl.n	800457e <_vfiprintf_r+0x20e>
 800457c:	e71d      	b.n	80043ba <_vfiprintf_r+0x4a>
 800457e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004580:	e71d      	b.n	80043be <_vfiprintf_r+0x4e>
 8004582:	aa07      	add	r2, sp, #28
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	0021      	movs	r1, r4
 8004588:	003a      	movs	r2, r7
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <_vfiprintf_r+0x234>)
 800458c:	9803      	ldr	r0, [sp, #12]
 800458e:	f000 f87b 	bl	8004688 <_printf_i>
 8004592:	e7e3      	b.n	800455c <_vfiprintf_r+0x1ec>
 8004594:	08004dc6 	.word	0x08004dc6
 8004598:	08004dcc 	.word	0x08004dcc
 800459c:	08004dd0 	.word	0x08004dd0
 80045a0:	00000000 	.word	0x00000000
 80045a4:	0800434b 	.word	0x0800434b

080045a8 <_printf_common>:
 80045a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045aa:	0016      	movs	r6, r2
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	688a      	ldr	r2, [r1, #8]
 80045b0:	690b      	ldr	r3, [r1, #16]
 80045b2:	000c      	movs	r4, r1
 80045b4:	9000      	str	r0, [sp, #0]
 80045b6:	4293      	cmp	r3, r2
 80045b8:	da00      	bge.n	80045bc <_printf_common+0x14>
 80045ba:	0013      	movs	r3, r2
 80045bc:	0022      	movs	r2, r4
 80045be:	6033      	str	r3, [r6, #0]
 80045c0:	3243      	adds	r2, #67	; 0x43
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	d001      	beq.n	80045cc <_printf_common+0x24>
 80045c8:	3301      	adds	r3, #1
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	069b      	lsls	r3, r3, #26
 80045d0:	d502      	bpl.n	80045d8 <_printf_common+0x30>
 80045d2:	6833      	ldr	r3, [r6, #0]
 80045d4:	3302      	adds	r3, #2
 80045d6:	6033      	str	r3, [r6, #0]
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	2306      	movs	r3, #6
 80045dc:	0015      	movs	r5, r2
 80045de:	401d      	ands	r5, r3
 80045e0:	421a      	tst	r2, r3
 80045e2:	d027      	beq.n	8004634 <_printf_common+0x8c>
 80045e4:	0023      	movs	r3, r4
 80045e6:	3343      	adds	r3, #67	; 0x43
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	4193      	sbcs	r3, r2
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	0692      	lsls	r2, r2, #26
 80045f2:	d430      	bmi.n	8004656 <_printf_common+0xae>
 80045f4:	0022      	movs	r2, r4
 80045f6:	9901      	ldr	r1, [sp, #4]
 80045f8:	9800      	ldr	r0, [sp, #0]
 80045fa:	9d08      	ldr	r5, [sp, #32]
 80045fc:	3243      	adds	r2, #67	; 0x43
 80045fe:	47a8      	blx	r5
 8004600:	3001      	adds	r0, #1
 8004602:	d025      	beq.n	8004650 <_printf_common+0xa8>
 8004604:	2206      	movs	r2, #6
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	2500      	movs	r5, #0
 800460a:	4013      	ands	r3, r2
 800460c:	2b04      	cmp	r3, #4
 800460e:	d105      	bne.n	800461c <_printf_common+0x74>
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	68e5      	ldr	r5, [r4, #12]
 8004614:	1aed      	subs	r5, r5, r3
 8004616:	43eb      	mvns	r3, r5
 8004618:	17db      	asrs	r3, r3, #31
 800461a:	401d      	ands	r5, r3
 800461c:	68a3      	ldr	r3, [r4, #8]
 800461e:	6922      	ldr	r2, [r4, #16]
 8004620:	4293      	cmp	r3, r2
 8004622:	dd01      	ble.n	8004628 <_printf_common+0x80>
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	18ed      	adds	r5, r5, r3
 8004628:	2600      	movs	r6, #0
 800462a:	42b5      	cmp	r5, r6
 800462c:	d120      	bne.n	8004670 <_printf_common+0xc8>
 800462e:	2000      	movs	r0, #0
 8004630:	e010      	b.n	8004654 <_printf_common+0xac>
 8004632:	3501      	adds	r5, #1
 8004634:	68e3      	ldr	r3, [r4, #12]
 8004636:	6832      	ldr	r2, [r6, #0]
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	42ab      	cmp	r3, r5
 800463c:	ddd2      	ble.n	80045e4 <_printf_common+0x3c>
 800463e:	0022      	movs	r2, r4
 8004640:	2301      	movs	r3, #1
 8004642:	9901      	ldr	r1, [sp, #4]
 8004644:	9800      	ldr	r0, [sp, #0]
 8004646:	9f08      	ldr	r7, [sp, #32]
 8004648:	3219      	adds	r2, #25
 800464a:	47b8      	blx	r7
 800464c:	3001      	adds	r0, #1
 800464e:	d1f0      	bne.n	8004632 <_printf_common+0x8a>
 8004650:	2001      	movs	r0, #1
 8004652:	4240      	negs	r0, r0
 8004654:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004656:	2030      	movs	r0, #48	; 0x30
 8004658:	18e1      	adds	r1, r4, r3
 800465a:	3143      	adds	r1, #67	; 0x43
 800465c:	7008      	strb	r0, [r1, #0]
 800465e:	0021      	movs	r1, r4
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	3145      	adds	r1, #69	; 0x45
 8004664:	7809      	ldrb	r1, [r1, #0]
 8004666:	18a2      	adds	r2, r4, r2
 8004668:	3243      	adds	r2, #67	; 0x43
 800466a:	3302      	adds	r3, #2
 800466c:	7011      	strb	r1, [r2, #0]
 800466e:	e7c1      	b.n	80045f4 <_printf_common+0x4c>
 8004670:	0022      	movs	r2, r4
 8004672:	2301      	movs	r3, #1
 8004674:	9901      	ldr	r1, [sp, #4]
 8004676:	9800      	ldr	r0, [sp, #0]
 8004678:	9f08      	ldr	r7, [sp, #32]
 800467a:	321a      	adds	r2, #26
 800467c:	47b8      	blx	r7
 800467e:	3001      	adds	r0, #1
 8004680:	d0e6      	beq.n	8004650 <_printf_common+0xa8>
 8004682:	3601      	adds	r6, #1
 8004684:	e7d1      	b.n	800462a <_printf_common+0x82>
	...

08004688 <_printf_i>:
 8004688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468a:	b08b      	sub	sp, #44	; 0x2c
 800468c:	9206      	str	r2, [sp, #24]
 800468e:	000a      	movs	r2, r1
 8004690:	3243      	adds	r2, #67	; 0x43
 8004692:	9307      	str	r3, [sp, #28]
 8004694:	9005      	str	r0, [sp, #20]
 8004696:	9204      	str	r2, [sp, #16]
 8004698:	7e0a      	ldrb	r2, [r1, #24]
 800469a:	000c      	movs	r4, r1
 800469c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800469e:	2a78      	cmp	r2, #120	; 0x78
 80046a0:	d809      	bhi.n	80046b6 <_printf_i+0x2e>
 80046a2:	2a62      	cmp	r2, #98	; 0x62
 80046a4:	d80b      	bhi.n	80046be <_printf_i+0x36>
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	d100      	bne.n	80046ac <_printf_i+0x24>
 80046aa:	e0be      	b.n	800482a <_printf_i+0x1a2>
 80046ac:	497c      	ldr	r1, [pc, #496]	; (80048a0 <_printf_i+0x218>)
 80046ae:	9103      	str	r1, [sp, #12]
 80046b0:	2a58      	cmp	r2, #88	; 0x58
 80046b2:	d100      	bne.n	80046b6 <_printf_i+0x2e>
 80046b4:	e093      	b.n	80047de <_printf_i+0x156>
 80046b6:	0026      	movs	r6, r4
 80046b8:	3642      	adds	r6, #66	; 0x42
 80046ba:	7032      	strb	r2, [r6, #0]
 80046bc:	e022      	b.n	8004704 <_printf_i+0x7c>
 80046be:	0010      	movs	r0, r2
 80046c0:	3863      	subs	r0, #99	; 0x63
 80046c2:	2815      	cmp	r0, #21
 80046c4:	d8f7      	bhi.n	80046b6 <_printf_i+0x2e>
 80046c6:	f7fb fd27 	bl	8000118 <__gnu_thumb1_case_shi>
 80046ca:	0016      	.short	0x0016
 80046cc:	fff6001f 	.word	0xfff6001f
 80046d0:	fff6fff6 	.word	0xfff6fff6
 80046d4:	001ffff6 	.word	0x001ffff6
 80046d8:	fff6fff6 	.word	0xfff6fff6
 80046dc:	fff6fff6 	.word	0xfff6fff6
 80046e0:	003600a3 	.word	0x003600a3
 80046e4:	fff60083 	.word	0xfff60083
 80046e8:	00b4fff6 	.word	0x00b4fff6
 80046ec:	0036fff6 	.word	0x0036fff6
 80046f0:	fff6fff6 	.word	0xfff6fff6
 80046f4:	0087      	.short	0x0087
 80046f6:	0026      	movs	r6, r4
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	3642      	adds	r6, #66	; 0x42
 80046fc:	1d11      	adds	r1, r2, #4
 80046fe:	6019      	str	r1, [r3, #0]
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	7033      	strb	r3, [r6, #0]
 8004704:	2301      	movs	r3, #1
 8004706:	e0a2      	b.n	800484e <_printf_i+0x1c6>
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	6809      	ldr	r1, [r1, #0]
 800470c:	1d02      	adds	r2, r0, #4
 800470e:	060d      	lsls	r5, r1, #24
 8004710:	d50b      	bpl.n	800472a <_printf_i+0xa2>
 8004712:	6805      	ldr	r5, [r0, #0]
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	2d00      	cmp	r5, #0
 8004718:	da03      	bge.n	8004722 <_printf_i+0x9a>
 800471a:	232d      	movs	r3, #45	; 0x2d
 800471c:	9a04      	ldr	r2, [sp, #16]
 800471e:	426d      	negs	r5, r5
 8004720:	7013      	strb	r3, [r2, #0]
 8004722:	4b5f      	ldr	r3, [pc, #380]	; (80048a0 <_printf_i+0x218>)
 8004724:	270a      	movs	r7, #10
 8004726:	9303      	str	r3, [sp, #12]
 8004728:	e01b      	b.n	8004762 <_printf_i+0xda>
 800472a:	6805      	ldr	r5, [r0, #0]
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	0649      	lsls	r1, r1, #25
 8004730:	d5f1      	bpl.n	8004716 <_printf_i+0x8e>
 8004732:	b22d      	sxth	r5, r5
 8004734:	e7ef      	b.n	8004716 <_printf_i+0x8e>
 8004736:	680d      	ldr	r5, [r1, #0]
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	1d08      	adds	r0, r1, #4
 800473c:	6018      	str	r0, [r3, #0]
 800473e:	062e      	lsls	r6, r5, #24
 8004740:	d501      	bpl.n	8004746 <_printf_i+0xbe>
 8004742:	680d      	ldr	r5, [r1, #0]
 8004744:	e003      	b.n	800474e <_printf_i+0xc6>
 8004746:	066d      	lsls	r5, r5, #25
 8004748:	d5fb      	bpl.n	8004742 <_printf_i+0xba>
 800474a:	680d      	ldr	r5, [r1, #0]
 800474c:	b2ad      	uxth	r5, r5
 800474e:	4b54      	ldr	r3, [pc, #336]	; (80048a0 <_printf_i+0x218>)
 8004750:	2708      	movs	r7, #8
 8004752:	9303      	str	r3, [sp, #12]
 8004754:	2a6f      	cmp	r2, #111	; 0x6f
 8004756:	d000      	beq.n	800475a <_printf_i+0xd2>
 8004758:	3702      	adds	r7, #2
 800475a:	0023      	movs	r3, r4
 800475c:	2200      	movs	r2, #0
 800475e:	3343      	adds	r3, #67	; 0x43
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	6863      	ldr	r3, [r4, #4]
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	db03      	blt.n	8004772 <_printf_i+0xea>
 800476a:	2104      	movs	r1, #4
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	438a      	bics	r2, r1
 8004770:	6022      	str	r2, [r4, #0]
 8004772:	2d00      	cmp	r5, #0
 8004774:	d102      	bne.n	800477c <_printf_i+0xf4>
 8004776:	9e04      	ldr	r6, [sp, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00c      	beq.n	8004796 <_printf_i+0x10e>
 800477c:	9e04      	ldr	r6, [sp, #16]
 800477e:	0028      	movs	r0, r5
 8004780:	0039      	movs	r1, r7
 8004782:	f7fb fd59 	bl	8000238 <__aeabi_uidivmod>
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	3e01      	subs	r6, #1
 800478a:	5c5b      	ldrb	r3, [r3, r1]
 800478c:	7033      	strb	r3, [r6, #0]
 800478e:	002b      	movs	r3, r5
 8004790:	0005      	movs	r5, r0
 8004792:	429f      	cmp	r7, r3
 8004794:	d9f3      	bls.n	800477e <_printf_i+0xf6>
 8004796:	2f08      	cmp	r7, #8
 8004798:	d109      	bne.n	80047ae <_printf_i+0x126>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	07db      	lsls	r3, r3, #31
 800479e:	d506      	bpl.n	80047ae <_printf_i+0x126>
 80047a0:	6862      	ldr	r2, [r4, #4]
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	dc02      	bgt.n	80047ae <_printf_i+0x126>
 80047a8:	2330      	movs	r3, #48	; 0x30
 80047aa:	3e01      	subs	r6, #1
 80047ac:	7033      	strb	r3, [r6, #0]
 80047ae:	9b04      	ldr	r3, [sp, #16]
 80047b0:	1b9b      	subs	r3, r3, r6
 80047b2:	6123      	str	r3, [r4, #16]
 80047b4:	9b07      	ldr	r3, [sp, #28]
 80047b6:	0021      	movs	r1, r4
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	9805      	ldr	r0, [sp, #20]
 80047bc:	9b06      	ldr	r3, [sp, #24]
 80047be:	aa09      	add	r2, sp, #36	; 0x24
 80047c0:	f7ff fef2 	bl	80045a8 <_printf_common>
 80047c4:	3001      	adds	r0, #1
 80047c6:	d147      	bne.n	8004858 <_printf_i+0x1d0>
 80047c8:	2001      	movs	r0, #1
 80047ca:	4240      	negs	r0, r0
 80047cc:	b00b      	add	sp, #44	; 0x2c
 80047ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d0:	2220      	movs	r2, #32
 80047d2:	6809      	ldr	r1, [r1, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	6022      	str	r2, [r4, #0]
 80047d8:	2278      	movs	r2, #120	; 0x78
 80047da:	4932      	ldr	r1, [pc, #200]	; (80048a4 <_printf_i+0x21c>)
 80047dc:	9103      	str	r1, [sp, #12]
 80047de:	0021      	movs	r1, r4
 80047e0:	3145      	adds	r1, #69	; 0x45
 80047e2:	700a      	strb	r2, [r1, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	c920      	ldmia	r1!, {r5}
 80047ea:	0610      	lsls	r0, r2, #24
 80047ec:	d402      	bmi.n	80047f4 <_printf_i+0x16c>
 80047ee:	0650      	lsls	r0, r2, #25
 80047f0:	d500      	bpl.n	80047f4 <_printf_i+0x16c>
 80047f2:	b2ad      	uxth	r5, r5
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	07d3      	lsls	r3, r2, #31
 80047f8:	d502      	bpl.n	8004800 <_printf_i+0x178>
 80047fa:	2320      	movs	r3, #32
 80047fc:	4313      	orrs	r3, r2
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	2710      	movs	r7, #16
 8004802:	2d00      	cmp	r5, #0
 8004804:	d1a9      	bne.n	800475a <_printf_i+0xd2>
 8004806:	2220      	movs	r2, #32
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	4393      	bics	r3, r2
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	e7a4      	b.n	800475a <_printf_i+0xd2>
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	680d      	ldr	r5, [r1, #0]
 8004814:	1d10      	adds	r0, r2, #4
 8004816:	6949      	ldr	r1, [r1, #20]
 8004818:	6018      	str	r0, [r3, #0]
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	062e      	lsls	r6, r5, #24
 800481e:	d501      	bpl.n	8004824 <_printf_i+0x19c>
 8004820:	6019      	str	r1, [r3, #0]
 8004822:	e002      	b.n	800482a <_printf_i+0x1a2>
 8004824:	066d      	lsls	r5, r5, #25
 8004826:	d5fb      	bpl.n	8004820 <_printf_i+0x198>
 8004828:	8019      	strh	r1, [r3, #0]
 800482a:	2300      	movs	r3, #0
 800482c:	9e04      	ldr	r6, [sp, #16]
 800482e:	6123      	str	r3, [r4, #16]
 8004830:	e7c0      	b.n	80047b4 <_printf_i+0x12c>
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	1d11      	adds	r1, r2, #4
 8004836:	6019      	str	r1, [r3, #0]
 8004838:	6816      	ldr	r6, [r2, #0]
 800483a:	2100      	movs	r1, #0
 800483c:	0030      	movs	r0, r6
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	f000 f9a0 	bl	8004b84 <memchr>
 8004844:	2800      	cmp	r0, #0
 8004846:	d001      	beq.n	800484c <_printf_i+0x1c4>
 8004848:	1b80      	subs	r0, r0, r6
 800484a:	6060      	str	r0, [r4, #4]
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	6123      	str	r3, [r4, #16]
 8004850:	2300      	movs	r3, #0
 8004852:	9a04      	ldr	r2, [sp, #16]
 8004854:	7013      	strb	r3, [r2, #0]
 8004856:	e7ad      	b.n	80047b4 <_printf_i+0x12c>
 8004858:	0032      	movs	r2, r6
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	9906      	ldr	r1, [sp, #24]
 800485e:	9805      	ldr	r0, [sp, #20]
 8004860:	9d07      	ldr	r5, [sp, #28]
 8004862:	47a8      	blx	r5
 8004864:	3001      	adds	r0, #1
 8004866:	d0af      	beq.n	80047c8 <_printf_i+0x140>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	079b      	lsls	r3, r3, #30
 800486c:	d415      	bmi.n	800489a <_printf_i+0x212>
 800486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004870:	68e0      	ldr	r0, [r4, #12]
 8004872:	4298      	cmp	r0, r3
 8004874:	daaa      	bge.n	80047cc <_printf_i+0x144>
 8004876:	0018      	movs	r0, r3
 8004878:	e7a8      	b.n	80047cc <_printf_i+0x144>
 800487a:	0022      	movs	r2, r4
 800487c:	2301      	movs	r3, #1
 800487e:	9906      	ldr	r1, [sp, #24]
 8004880:	9805      	ldr	r0, [sp, #20]
 8004882:	9e07      	ldr	r6, [sp, #28]
 8004884:	3219      	adds	r2, #25
 8004886:	47b0      	blx	r6
 8004888:	3001      	adds	r0, #1
 800488a:	d09d      	beq.n	80047c8 <_printf_i+0x140>
 800488c:	3501      	adds	r5, #1
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	42ab      	cmp	r3, r5
 8004896:	dcf0      	bgt.n	800487a <_printf_i+0x1f2>
 8004898:	e7e9      	b.n	800486e <_printf_i+0x1e6>
 800489a:	2500      	movs	r5, #0
 800489c:	e7f7      	b.n	800488e <_printf_i+0x206>
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	08004dd7 	.word	0x08004dd7
 80048a4:	08004de8 	.word	0x08004de8

080048a8 <__sflush_r>:
 80048a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048aa:	898b      	ldrh	r3, [r1, #12]
 80048ac:	0005      	movs	r5, r0
 80048ae:	000c      	movs	r4, r1
 80048b0:	071a      	lsls	r2, r3, #28
 80048b2:	d45c      	bmi.n	800496e <__sflush_r+0xc6>
 80048b4:	684a      	ldr	r2, [r1, #4]
 80048b6:	2a00      	cmp	r2, #0
 80048b8:	dc04      	bgt.n	80048c4 <__sflush_r+0x1c>
 80048ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80048bc:	2a00      	cmp	r2, #0
 80048be:	dc01      	bgt.n	80048c4 <__sflush_r+0x1c>
 80048c0:	2000      	movs	r0, #0
 80048c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80048c6:	2f00      	cmp	r7, #0
 80048c8:	d0fa      	beq.n	80048c0 <__sflush_r+0x18>
 80048ca:	2200      	movs	r2, #0
 80048cc:	2080      	movs	r0, #128	; 0x80
 80048ce:	682e      	ldr	r6, [r5, #0]
 80048d0:	602a      	str	r2, [r5, #0]
 80048d2:	001a      	movs	r2, r3
 80048d4:	0140      	lsls	r0, r0, #5
 80048d6:	6a21      	ldr	r1, [r4, #32]
 80048d8:	4002      	ands	r2, r0
 80048da:	4203      	tst	r3, r0
 80048dc:	d034      	beq.n	8004948 <__sflush_r+0xa0>
 80048de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	075b      	lsls	r3, r3, #29
 80048e4:	d506      	bpl.n	80048f4 <__sflush_r+0x4c>
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	1ac0      	subs	r0, r0, r3
 80048ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <__sflush_r+0x4c>
 80048f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f2:	1ac0      	subs	r0, r0, r3
 80048f4:	0002      	movs	r2, r0
 80048f6:	2300      	movs	r3, #0
 80048f8:	0028      	movs	r0, r5
 80048fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80048fc:	6a21      	ldr	r1, [r4, #32]
 80048fe:	47b8      	blx	r7
 8004900:	89a2      	ldrh	r2, [r4, #12]
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	d106      	bne.n	8004914 <__sflush_r+0x6c>
 8004906:	6829      	ldr	r1, [r5, #0]
 8004908:	291d      	cmp	r1, #29
 800490a:	d82c      	bhi.n	8004966 <__sflush_r+0xbe>
 800490c:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <__sflush_r+0x110>)
 800490e:	410b      	asrs	r3, r1
 8004910:	07db      	lsls	r3, r3, #31
 8004912:	d428      	bmi.n	8004966 <__sflush_r+0xbe>
 8004914:	2300      	movs	r3, #0
 8004916:	6063      	str	r3, [r4, #4]
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	04d2      	lsls	r2, r2, #19
 800491e:	d505      	bpl.n	800492c <__sflush_r+0x84>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <__sflush_r+0x82>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d100      	bne.n	800492c <__sflush_r+0x84>
 800492a:	6560      	str	r0, [r4, #84]	; 0x54
 800492c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492e:	602e      	str	r6, [r5, #0]
 8004930:	2900      	cmp	r1, #0
 8004932:	d0c5      	beq.n	80048c0 <__sflush_r+0x18>
 8004934:	0023      	movs	r3, r4
 8004936:	3344      	adds	r3, #68	; 0x44
 8004938:	4299      	cmp	r1, r3
 800493a:	d002      	beq.n	8004942 <__sflush_r+0x9a>
 800493c:	0028      	movs	r0, r5
 800493e:	f7ff fbf1 	bl	8004124 <_free_r>
 8004942:	2000      	movs	r0, #0
 8004944:	6360      	str	r0, [r4, #52]	; 0x34
 8004946:	e7bc      	b.n	80048c2 <__sflush_r+0x1a>
 8004948:	2301      	movs	r3, #1
 800494a:	0028      	movs	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	d1c6      	bne.n	80048e0 <__sflush_r+0x38>
 8004952:	682b      	ldr	r3, [r5, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0c3      	beq.n	80048e0 <__sflush_r+0x38>
 8004958:	2b1d      	cmp	r3, #29
 800495a:	d001      	beq.n	8004960 <__sflush_r+0xb8>
 800495c:	2b16      	cmp	r3, #22
 800495e:	d101      	bne.n	8004964 <__sflush_r+0xbc>
 8004960:	602e      	str	r6, [r5, #0]
 8004962:	e7ad      	b.n	80048c0 <__sflush_r+0x18>
 8004964:	89a2      	ldrh	r2, [r4, #12]
 8004966:	2340      	movs	r3, #64	; 0x40
 8004968:	4313      	orrs	r3, r2
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	e7a9      	b.n	80048c2 <__sflush_r+0x1a>
 800496e:	690e      	ldr	r6, [r1, #16]
 8004970:	2e00      	cmp	r6, #0
 8004972:	d0a5      	beq.n	80048c0 <__sflush_r+0x18>
 8004974:	680f      	ldr	r7, [r1, #0]
 8004976:	600e      	str	r6, [r1, #0]
 8004978:	1bba      	subs	r2, r7, r6
 800497a:	9201      	str	r2, [sp, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	079b      	lsls	r3, r3, #30
 8004980:	d100      	bne.n	8004984 <__sflush_r+0xdc>
 8004982:	694a      	ldr	r2, [r1, #20]
 8004984:	60a2      	str	r2, [r4, #8]
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	dd99      	ble.n	80048c0 <__sflush_r+0x18>
 800498c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800498e:	0032      	movs	r2, r6
 8004990:	001f      	movs	r7, r3
 8004992:	0028      	movs	r0, r5
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	6a21      	ldr	r1, [r4, #32]
 8004998:	47b8      	blx	r7
 800499a:	2800      	cmp	r0, #0
 800499c:	dc06      	bgt.n	80049ac <__sflush_r+0x104>
 800499e:	2340      	movs	r3, #64	; 0x40
 80049a0:	2001      	movs	r0, #1
 80049a2:	89a2      	ldrh	r2, [r4, #12]
 80049a4:	4240      	negs	r0, r0
 80049a6:	4313      	orrs	r3, r2
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	e78a      	b.n	80048c2 <__sflush_r+0x1a>
 80049ac:	9b01      	ldr	r3, [sp, #4]
 80049ae:	1836      	adds	r6, r6, r0
 80049b0:	1a1b      	subs	r3, r3, r0
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	e7e7      	b.n	8004986 <__sflush_r+0xde>
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	dfbffffe 	.word	0xdfbffffe

080049bc <_fflush_r>:
 80049bc:	690b      	ldr	r3, [r1, #16]
 80049be:	b570      	push	{r4, r5, r6, lr}
 80049c0:	0005      	movs	r5, r0
 80049c2:	000c      	movs	r4, r1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <_fflush_r+0x12>
 80049c8:	2500      	movs	r5, #0
 80049ca:	0028      	movs	r0, r5
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d004      	beq.n	80049dc <_fflush_r+0x20>
 80049d2:	6a03      	ldr	r3, [r0, #32]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <_fflush_r+0x20>
 80049d8:	f7ff fa90 	bl	8003efc <__sinit>
 80049dc:	220c      	movs	r2, #12
 80049de:	5ea3      	ldrsh	r3, [r4, r2]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f1      	beq.n	80049c8 <_fflush_r+0xc>
 80049e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e6:	07d2      	lsls	r2, r2, #31
 80049e8:	d404      	bmi.n	80049f4 <_fflush_r+0x38>
 80049ea:	059b      	lsls	r3, r3, #22
 80049ec:	d402      	bmi.n	80049f4 <_fflush_r+0x38>
 80049ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f0:	f7ff fb95 	bl	800411e <__retarget_lock_acquire_recursive>
 80049f4:	0028      	movs	r0, r5
 80049f6:	0021      	movs	r1, r4
 80049f8:	f7ff ff56 	bl	80048a8 <__sflush_r>
 80049fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049fe:	0005      	movs	r5, r0
 8004a00:	07db      	lsls	r3, r3, #31
 8004a02:	d4e2      	bmi.n	80049ca <_fflush_r+0xe>
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	059b      	lsls	r3, r3, #22
 8004a08:	d4df      	bmi.n	80049ca <_fflush_r+0xe>
 8004a0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0c:	f7ff fb88 	bl	8004120 <__retarget_lock_release_recursive>
 8004a10:	e7db      	b.n	80049ca <_fflush_r+0xe>

08004a12 <__swbuf_r>:
 8004a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a14:	0006      	movs	r6, r0
 8004a16:	000d      	movs	r5, r1
 8004a18:	0014      	movs	r4, r2
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d004      	beq.n	8004a28 <__swbuf_r+0x16>
 8004a1e:	6a03      	ldr	r3, [r0, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <__swbuf_r+0x16>
 8004a24:	f7ff fa6a 	bl	8003efc <__sinit>
 8004a28:	69a3      	ldr	r3, [r4, #24]
 8004a2a:	60a3      	str	r3, [r4, #8]
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	071b      	lsls	r3, r3, #28
 8004a30:	d528      	bpl.n	8004a84 <__swbuf_r+0x72>
 8004a32:	6923      	ldr	r3, [r4, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d025      	beq.n	8004a84 <__swbuf_r+0x72>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	b2ef      	uxtb	r7, r5
 8004a3e:	1ac0      	subs	r0, r0, r3
 8004a40:	6963      	ldr	r3, [r4, #20]
 8004a42:	b2ed      	uxtb	r5, r5
 8004a44:	4283      	cmp	r3, r0
 8004a46:	dc05      	bgt.n	8004a54 <__swbuf_r+0x42>
 8004a48:	0021      	movs	r1, r4
 8004a4a:	0030      	movs	r0, r6
 8004a4c:	f7ff ffb6 	bl	80049bc <_fflush_r>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d11d      	bne.n	8004a90 <__swbuf_r+0x7e>
 8004a54:	68a3      	ldr	r3, [r4, #8]
 8004a56:	3001      	adds	r0, #1
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	60a3      	str	r3, [r4, #8]
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	701f      	strb	r7, [r3, #0]
 8004a64:	6963      	ldr	r3, [r4, #20]
 8004a66:	4283      	cmp	r3, r0
 8004a68:	d004      	beq.n	8004a74 <__swbuf_r+0x62>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	07db      	lsls	r3, r3, #31
 8004a6e:	d507      	bpl.n	8004a80 <__swbuf_r+0x6e>
 8004a70:	2d0a      	cmp	r5, #10
 8004a72:	d105      	bne.n	8004a80 <__swbuf_r+0x6e>
 8004a74:	0021      	movs	r1, r4
 8004a76:	0030      	movs	r0, r6
 8004a78:	f7ff ffa0 	bl	80049bc <_fflush_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d107      	bne.n	8004a90 <__swbuf_r+0x7e>
 8004a80:	0028      	movs	r0, r5
 8004a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a84:	0021      	movs	r1, r4
 8004a86:	0030      	movs	r0, r6
 8004a88:	f000 f806 	bl	8004a98 <__swsetup_r>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d0d3      	beq.n	8004a38 <__swbuf_r+0x26>
 8004a90:	2501      	movs	r5, #1
 8004a92:	426d      	negs	r5, r5
 8004a94:	e7f4      	b.n	8004a80 <__swbuf_r+0x6e>
	...

08004a98 <__swsetup_r>:
 8004a98:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <__swsetup_r+0xc4>)
 8004a9a:	b570      	push	{r4, r5, r6, lr}
 8004a9c:	0005      	movs	r5, r0
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	000c      	movs	r4, r1
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d004      	beq.n	8004ab0 <__swsetup_r+0x18>
 8004aa6:	6a03      	ldr	r3, [r0, #32]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <__swsetup_r+0x18>
 8004aac:	f7ff fa26 	bl	8003efc <__sinit>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	5ee2      	ldrsh	r2, [r4, r3]
 8004ab4:	b293      	uxth	r3, r2
 8004ab6:	0711      	lsls	r1, r2, #28
 8004ab8:	d423      	bmi.n	8004b02 <__swsetup_r+0x6a>
 8004aba:	06d9      	lsls	r1, r3, #27
 8004abc:	d407      	bmi.n	8004ace <__swsetup_r+0x36>
 8004abe:	2309      	movs	r3, #9
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	3337      	adds	r3, #55	; 0x37
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	81a3      	strh	r3, [r4, #12]
 8004aca:	4240      	negs	r0, r0
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	075b      	lsls	r3, r3, #29
 8004ad0:	d513      	bpl.n	8004afa <__swsetup_r+0x62>
 8004ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	d008      	beq.n	8004aea <__swsetup_r+0x52>
 8004ad8:	0023      	movs	r3, r4
 8004ada:	3344      	adds	r3, #68	; 0x44
 8004adc:	4299      	cmp	r1, r3
 8004ade:	d002      	beq.n	8004ae6 <__swsetup_r+0x4e>
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7ff fb1f 	bl	8004124 <_free_r>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aea:	2224      	movs	r2, #36	; 0x24
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	4393      	bics	r3, r2
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	2300      	movs	r3, #0
 8004af4:	6063      	str	r3, [r4, #4]
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	2308      	movs	r3, #8
 8004afc:	89a2      	ldrh	r2, [r4, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <__swsetup_r+0x88>
 8004b08:	21a0      	movs	r1, #160	; 0xa0
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	0089      	lsls	r1, r1, #2
 8004b10:	0092      	lsls	r2, r2, #2
 8004b12:	400b      	ands	r3, r1
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <__swsetup_r+0x88>
 8004b18:	0021      	movs	r1, r4
 8004b1a:	0028      	movs	r0, r5
 8004b1c:	f000 f866 	bl	8004bec <__smakebuf_r>
 8004b20:	220c      	movs	r2, #12
 8004b22:	5ea3      	ldrsh	r3, [r4, r2]
 8004b24:	2001      	movs	r0, #1
 8004b26:	001a      	movs	r2, r3
 8004b28:	b299      	uxth	r1, r3
 8004b2a:	4002      	ands	r2, r0
 8004b2c:	4203      	tst	r3, r0
 8004b2e:	d00f      	beq.n	8004b50 <__swsetup_r+0xb8>
 8004b30:	2200      	movs	r2, #0
 8004b32:	60a2      	str	r2, [r4, #8]
 8004b34:	6962      	ldr	r2, [r4, #20]
 8004b36:	4252      	negs	r2, r2
 8004b38:	61a2      	str	r2, [r4, #24]
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	6922      	ldr	r2, [r4, #16]
 8004b3e:	4282      	cmp	r2, r0
 8004b40:	d1c4      	bne.n	8004acc <__swsetup_r+0x34>
 8004b42:	0609      	lsls	r1, r1, #24
 8004b44:	d5c2      	bpl.n	8004acc <__swsetup_r+0x34>
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	3801      	subs	r0, #1
 8004b4e:	e7bd      	b.n	8004acc <__swsetup_r+0x34>
 8004b50:	0788      	lsls	r0, r1, #30
 8004b52:	d400      	bmi.n	8004b56 <__swsetup_r+0xbe>
 8004b54:	6962      	ldr	r2, [r4, #20]
 8004b56:	60a2      	str	r2, [r4, #8]
 8004b58:	e7ef      	b.n	8004b3a <__swsetup_r+0xa2>
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	2000006c 	.word	0x2000006c

08004b60 <_sbrk_r>:
 8004b60:	2300      	movs	r3, #0
 8004b62:	b570      	push	{r4, r5, r6, lr}
 8004b64:	4d06      	ldr	r5, [pc, #24]	; (8004b80 <_sbrk_r+0x20>)
 8004b66:	0004      	movs	r4, r0
 8004b68:	0008      	movs	r0, r1
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	f7fc f814 	bl	8000b98 <_sbrk>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d103      	bne.n	8004b7c <_sbrk_r+0x1c>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d000      	beq.n	8004b7c <_sbrk_r+0x1c>
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	20000338 	.word	0x20000338

08004b84 <memchr>:
 8004b84:	b2c9      	uxtb	r1, r1
 8004b86:	1882      	adds	r2, r0, r2
 8004b88:	4290      	cmp	r0, r2
 8004b8a:	d101      	bne.n	8004b90 <memchr+0xc>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	4770      	bx	lr
 8004b90:	7803      	ldrb	r3, [r0, #0]
 8004b92:	428b      	cmp	r3, r1
 8004b94:	d0fb      	beq.n	8004b8e <memchr+0xa>
 8004b96:	3001      	adds	r0, #1
 8004b98:	e7f6      	b.n	8004b88 <memchr+0x4>
	...

08004b9c <__swhatbuf_r>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	000e      	movs	r6, r1
 8004ba0:	001d      	movs	r5, r3
 8004ba2:	230e      	movs	r3, #14
 8004ba4:	5ec9      	ldrsh	r1, [r1, r3]
 8004ba6:	0014      	movs	r4, r2
 8004ba8:	b096      	sub	sp, #88	; 0x58
 8004baa:	2900      	cmp	r1, #0
 8004bac:	da0c      	bge.n	8004bc8 <__swhatbuf_r+0x2c>
 8004bae:	89b2      	ldrh	r2, [r6, #12]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	0011      	movs	r1, r2
 8004bb4:	4019      	ands	r1, r3
 8004bb6:	421a      	tst	r2, r3
 8004bb8:	d013      	beq.n	8004be2 <__swhatbuf_r+0x46>
 8004bba:	2100      	movs	r1, #0
 8004bbc:	3b40      	subs	r3, #64	; 0x40
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	6029      	str	r1, [r5, #0]
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	b016      	add	sp, #88	; 0x58
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
 8004bc8:	466a      	mov	r2, sp
 8004bca:	f000 f84d 	bl	8004c68 <_fstat_r>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	dbed      	blt.n	8004bae <__swhatbuf_r+0x12>
 8004bd2:	23f0      	movs	r3, #240	; 0xf0
 8004bd4:	9901      	ldr	r1, [sp, #4]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	4019      	ands	r1, r3
 8004bda:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <__swhatbuf_r+0x4c>)
 8004bdc:	18c9      	adds	r1, r1, r3
 8004bde:	424b      	negs	r3, r1
 8004be0:	4159      	adcs	r1, r3
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	e7ea      	b.n	8004bbe <__swhatbuf_r+0x22>
 8004be8:	ffffe000 	.word	0xffffe000

08004bec <__smakebuf_r>:
 8004bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bee:	2602      	movs	r6, #2
 8004bf0:	898b      	ldrh	r3, [r1, #12]
 8004bf2:	0005      	movs	r5, r0
 8004bf4:	000c      	movs	r4, r1
 8004bf6:	4233      	tst	r3, r6
 8004bf8:	d006      	beq.n	8004c08 <__smakebuf_r+0x1c>
 8004bfa:	0023      	movs	r3, r4
 8004bfc:	3347      	adds	r3, #71	; 0x47
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	2301      	movs	r3, #1
 8004c04:	6163      	str	r3, [r4, #20]
 8004c06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004c08:	466a      	mov	r2, sp
 8004c0a:	ab01      	add	r3, sp, #4
 8004c0c:	f7ff ffc6 	bl	8004b9c <__swhatbuf_r>
 8004c10:	9900      	ldr	r1, [sp, #0]
 8004c12:	0007      	movs	r7, r0
 8004c14:	0028      	movs	r0, r5
 8004c16:	f7ff faf1 	bl	80041fc <_malloc_r>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d108      	bne.n	8004c30 <__smakebuf_r+0x44>
 8004c1e:	220c      	movs	r2, #12
 8004c20:	5ea3      	ldrsh	r3, [r4, r2]
 8004c22:	059a      	lsls	r2, r3, #22
 8004c24:	d4ef      	bmi.n	8004c06 <__smakebuf_r+0x1a>
 8004c26:	2203      	movs	r2, #3
 8004c28:	4393      	bics	r3, r2
 8004c2a:	431e      	orrs	r6, r3
 8004c2c:	81a6      	strh	r6, [r4, #12]
 8004c2e:	e7e4      	b.n	8004bfa <__smakebuf_r+0xe>
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	89a2      	ldrh	r2, [r4, #12]
 8004c34:	6020      	str	r0, [r4, #0]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	9b00      	ldr	r3, [sp, #0]
 8004c3c:	6120      	str	r0, [r4, #16]
 8004c3e:	6163      	str	r3, [r4, #20]
 8004c40:	9b01      	ldr	r3, [sp, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <__smakebuf_r+0x74>
 8004c46:	0028      	movs	r0, r5
 8004c48:	230e      	movs	r3, #14
 8004c4a:	5ee1      	ldrsh	r1, [r4, r3]
 8004c4c:	f000 f81e 	bl	8004c8c <_isatty_r>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d005      	beq.n	8004c60 <__smakebuf_r+0x74>
 8004c54:	2303      	movs	r3, #3
 8004c56:	89a2      	ldrh	r2, [r4, #12]
 8004c58:	439a      	bics	r2, r3
 8004c5a:	3b02      	subs	r3, #2
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	81a3      	strh	r3, [r4, #12]
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	433b      	orrs	r3, r7
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	e7ce      	b.n	8004c06 <__smakebuf_r+0x1a>

08004c68 <_fstat_r>:
 8004c68:	2300      	movs	r3, #0
 8004c6a:	b570      	push	{r4, r5, r6, lr}
 8004c6c:	4d06      	ldr	r5, [pc, #24]	; (8004c88 <_fstat_r+0x20>)
 8004c6e:	0004      	movs	r4, r0
 8004c70:	0008      	movs	r0, r1
 8004c72:	0011      	movs	r1, r2
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	f7fe ff31 	bl	8003adc <_fstat>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d103      	bne.n	8004c86 <_fstat_r+0x1e>
 8004c7e:	682b      	ldr	r3, [r5, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d000      	beq.n	8004c86 <_fstat_r+0x1e>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	20000338 	.word	0x20000338

08004c8c <_isatty_r>:
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	b570      	push	{r4, r5, r6, lr}
 8004c90:	4d06      	ldr	r5, [pc, #24]	; (8004cac <_isatty_r+0x20>)
 8004c92:	0004      	movs	r4, r0
 8004c94:	0008      	movs	r0, r1
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	f7ff f882 	bl	8003da0 <_isatty>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d103      	bne.n	8004ca8 <_isatty_r+0x1c>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d000      	beq.n	8004ca8 <_isatty_r+0x1c>
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	20000338 	.word	0x20000338

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
