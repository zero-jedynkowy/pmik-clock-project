
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000439c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c8  080044c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044d0  080044d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000070  08004548  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08004548  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fe8  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f97  00000000  00000000  0002a0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000825  00000000  00000000  0002cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e25  00000000  00000000  0002d34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c63a  00000000  00000000  00043172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086529  00000000  00000000  0004f7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e3c  00000000  00000000  000d5cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000d8b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004444 	.word	0x08004444

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004444 	.word	0x08004444

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 80004be:	f003 fc01 	bl	8003cc4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fff7 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f84d 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f9c7 	bl	800085c <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ce:	f000 f919 	bl	8000704 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d2:	f000 f96d 	bl	80007b0 <MX_TIM3_Init>
  MX_RTC_Init();
 80004d6:	f000 f8b1 	bl	800063c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	481a      	ldr	r0, [pc, #104]	; (8000548 <main+0x90>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	0019      	movs	r1, r3
 80004e4:	f001 faf3 	bl	8001ace <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <main+0x90>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	0019      	movs	r1, r3
 80004f2:	f001 faec 	bl	8001ace <HAL_GPIO_WritePin>

  Clocker_Init(&ourClocker, &hrtc);
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <main+0x94>)
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <main+0x98>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fb66 	bl	8000bce <Clocker_Init>
  Clocker_Set_Time(&ourClocker, 22, 35, 00);
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <main+0x98>)
 8000504:	2300      	movs	r3, #0
 8000506:	2223      	movs	r2, #35	; 0x23
 8000508:	2116      	movs	r1, #22
 800050a:	f000 fb93 	bl	8000c34 <Clocker_Set_Time>

  HAL_TIM_Base_Start_IT(&htim2);
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <main+0x9c>)
 8000510:	0018      	movs	r0, r3
 8000512:	f002 fe41 	bl	8003198 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0xa0>)
 8000518:	0018      	movs	r0, r3
 800051a:	f002 fdf3 	bl	8003104 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init ();
 800051e:	f000 fd31 	bl	8000f84 <lcd_init>
    lcd_clear();
 8000522:	f000 fd05 	bl	8000f30 <lcd_clear>
    char * ada = "ssss";
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <main+0xa4>)
 8000528:	607b      	str	r3, [r7, #4]
  while (1)
  {

    /* USER CODE END WHILE */

	  lcd_put_cur(0, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fd0a 	bl	8000f46 <lcd_put_cur>
	  lcd_send_string(ada);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fd63 	bl	8001000 <lcd_send_string>
	  HAL_Delay(3000);
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <main+0xa8>)
 800053c:	0018      	movs	r0, r3
 800053e:	f001 f829 	bl	8001594 <HAL_Delay>
	  lcd_clear();
 8000542:	f000 fcf5 	bl	8000f30 <lcd_clear>
	  lcd_put_cur(0, 0);
 8000546:	e7f0      	b.n	800052a <main+0x72>
 8000548:	50000400 	.word	0x50000400
 800054c:	2000008c 	.word	0x2000008c
 8000550:	20000130 	.word	0x20000130
 8000554:	200000b0 	.word	0x200000b0
 8000558:	200000f0 	.word	0x200000f0
 800055c:	0800445c 	.word	0x0800445c
 8000560:	00000bb8 	.word	0x00000bb8

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b09f      	sub	sp, #124	; 0x7c
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	2440      	movs	r4, #64	; 0x40
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0018      	movs	r0, r3
 8000570:	2338      	movs	r3, #56	; 0x38
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f003 fdcf 	bl	8004118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	232c      	movs	r3, #44	; 0x2c
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	0018      	movs	r0, r3
 8000580:	2314      	movs	r3, #20
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f003 fdc7 	bl	8004118 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	0018      	movs	r0, r3
 800058e:	2328      	movs	r3, #40	; 0x28
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f003 fdc0 	bl	8004118 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <SystemClock_Config+0xd4>)
 800059e:	401a      	ands	r2, r3
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <SystemClock_Config+0xd0>)
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	0109      	lsls	r1, r1, #4
 80005a6:	430a      	orrs	r2, r1
 80005a8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2206      	movs	r2, #6
 80005ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2201      	movs	r2, #1
 80005bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2210      	movs	r2, #16
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fa9b 	bl	8001b08 <HAL_RCC_OscConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005d6:	f000 fa13 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	212c      	movs	r1, #44	; 0x2c
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	220f      	movs	r2, #15
 80005e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2100      	movs	r1, #0
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fe56 	bl	80022b0 <HAL_RCC_ClockConfig>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000608:	f000 f9fa 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2220      	movs	r2, #32
 8000610:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	0252      	lsls	r2, r2, #9
 8000618:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	0018      	movs	r0, r3
 800061e:	f002 f835 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000626:	f000 f9eb 	bl	8000a00 <Error_Handler>
  }
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b01f      	add	sp, #124	; 0x7c
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40007000 	.word	0x40007000
 8000638:	ffffe7ff 	.word	0xffffe7ff

0800063c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f003 fd64 	bl	8004118 <memset>
  RTC_DateTypeDef sDate = {0};
 8000650:	003b      	movs	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <MX_RTC_Init+0xc0>)
 8000658:	4a29      	ldr	r2, [pc, #164]	; (8000700 <MX_RTC_Init+0xc4>)
 800065a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_RTC_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <MX_RTC_Init+0xc0>)
 8000664:	227f      	movs	r2, #127	; 0x7f
 8000666:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_RTC_Init+0xc0>)
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <MX_RTC_Init+0xc0>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_RTC_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <MX_RTC_Init+0xc0>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_RTC_Init+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <MX_RTC_Init+0xc0>)
 8000688:	0018      	movs	r0, r3
 800068a:	f002 f99d 	bl	80029c8 <HAL_RTC_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000692:	f000 f9b5 	bl	8000a00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_RTC_Init+0xc0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	0018      	movs	r0, r3
 80006bc:	f002 fa20 	bl	8002b00 <HAL_RTC_SetTime>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80006c4:	f000 f99c 	bl	8000a00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2201      	movs	r2, #1
 80006d2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2201      	movs	r2, #1
 80006d8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006e0:	0039      	movs	r1, r7
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_RTC_Init+0xc0>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fb12 	bl	8002d10 <HAL_RTC_SetDate>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80006f0:	f000 f986 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b006      	add	sp, #24
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40002800 	.word	0x40002800

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	2308      	movs	r3, #8
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	0018      	movs	r0, r3
 8000710:	2310      	movs	r3, #16
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f003 fcff 	bl	8004118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	003b      	movs	r3, r7
 800071c:	0018      	movs	r0, r3
 800071e:	2308      	movs	r3, #8
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f003 fcf8 	bl	8004118 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_TIM2_Init+0xa4>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	05d2      	lsls	r2, r2, #23
 800072e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_TIM2_Init+0xa4>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <MX_TIM2_Init+0xa8>)
 8000734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_TIM2_Init+0xa4>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_TIM2_Init+0xa4>)
 800073e:	22fa      	movs	r2, #250	; 0xfa
 8000740:	0092      	lsls	r2, r2, #2
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_TIM2_Init+0xa4>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_TIM2_Init+0xa4>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM2_Init+0xa4>)
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fc96 	bl	8003084 <HAL_TIM_Base_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 f950 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	2108      	movs	r1, #8
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0152      	lsls	r2, r2, #5
 8000768:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076a:	187a      	adds	r2, r7, r1
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM2_Init+0xa4>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f002 fe4b 	bl	800340c <HAL_TIM_ConfigClockSource>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800077a:	f000 f941 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078a:	003a      	movs	r2, r7
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_TIM2_Init+0xa4>)
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f003 f827 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800079a:	f000 f931 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b006      	add	sp, #24
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	200000b0 	.word	0x200000b0
 80007ac:	00007cff 	.word	0x00007cff

080007b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	2308      	movs	r3, #8
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	0018      	movs	r0, r3
 80007bc:	2310      	movs	r3, #16
 80007be:	001a      	movs	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f003 fca9 	bl	8004118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	003b      	movs	r3, r7
 80007c8:	0018      	movs	r0, r3
 80007ca:	2308      	movs	r3, #8
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f003 fca2 	bl	8004118 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007d6:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <MX_TIM3_Init+0xa4>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007dc:	221f      	movs	r2, #31
 80007de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_TIM3_Init+0xa8>)
 80007ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 fc42 	bl	8003084 <HAL_TIM_Base_Init>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 f8fc 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	2108      	movs	r1, #8
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	0152      	lsls	r2, r2, #5
 8000810:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000812:	187a      	adds	r2, r7, r1
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_TIM3_Init+0xa0>)
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fdf7 	bl	800340c <HAL_TIM_ConfigClockSource>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000822:	f000 f8ed 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000832:	003a      	movs	r2, r7
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_TIM3_Init+0xa0>)
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f002 ffd3 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000842:	f000 f8dd 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b006      	add	sp, #24
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	200000f0 	.word	0x200000f0
 8000854:	40000400 	.word	0x40000400
 8000858:	0000fffe 	.word	0x0000fffe

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b08b      	sub	sp, #44	; 0x2c
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	2414      	movs	r4, #20
 8000864:	193b      	adds	r3, r7, r4
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f003 fc53 	bl	8004118 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <MX_GPIO_Init+0x170>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b55      	ldr	r3, [pc, #340]	; (80009cc <MX_GPIO_Init+0x170>)
 8000878:	2104      	movs	r1, #4
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b53      	ldr	r3, [pc, #332]	; (80009cc <MX_GPIO_Init+0x170>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2204      	movs	r2, #4
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	4b50      	ldr	r3, [pc, #320]	; (80009cc <MX_GPIO_Init+0x170>)
 800088c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088e:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <MX_GPIO_Init+0x170>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	430a      	orrs	r2, r1
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <MX_GPIO_Init+0x170>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <MX_GPIO_Init+0x170>)
 80008a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a6:	4b49      	ldr	r3, [pc, #292]	; (80009cc <MX_GPIO_Init+0x170>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ae:	4b47      	ldr	r3, [pc, #284]	; (80009cc <MX_GPIO_Init+0x170>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b44      	ldr	r3, [pc, #272]	; (80009cc <MX_GPIO_Init+0x170>)
 80008bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <MX_GPIO_Init+0x170>)
 80008c0:	2102      	movs	r1, #2
 80008c2:	430a      	orrs	r2, r1
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c6:	4b41      	ldr	r3, [pc, #260]	; (80009cc <MX_GPIO_Init+0x170>)
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	2202      	movs	r2, #2
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 80008d2:	23f8      	movs	r3, #248	; 0xf8
 80008d4:	0099      	lsls	r1, r3, #2
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2200      	movs	r2, #0
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 f8f6 	bl	8001ace <HAL_GPIO_WritePin>
                          |D_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_GPIO_Init+0x174>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 f8f0 	bl	8001ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_4_Pin|SCLK_Pin|SDO_Pin, GPIO_PIN_RESET);
 80008ee:	23d0      	movs	r3, #208	; 0xd0
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4838      	ldr	r0, [pc, #224]	; (80009d4 <MX_GPIO_Init+0x178>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	0019      	movs	r1, r3
 80008f8:	f001 f8e9 	bl	8001ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	0192      	lsls	r2, r2, #6
 8000902:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2284      	movs	r2, #132	; 0x84
 8000908:	0392      	lsls	r2, r2, #14
 800090a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	193b      	adds	r3, r7, r4
 8000914:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <MX_GPIO_Init+0x174>)
 8000916:	0019      	movs	r1, r3
 8000918:	0010      	movs	r0, r2
 800091a:	f000 ff3d 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	220c      	movs	r2, #12
 8000922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2202      	movs	r2, #2
 8000928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2203      	movs	r2, #3
 8000934:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2204      	movs	r2, #4
 800093a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	193a      	adds	r2, r7, r4
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 ff27 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin D_7_Pin
                           D_6_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	22f8      	movs	r2, #248	; 0xf8
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	601a      	str	r2, [r3, #0]
                          |D_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	000c      	movs	r4, r1
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2201      	movs	r2, #1
 800095a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	193a      	adds	r2, r7, r4
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f000 ff11 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2201      	movs	r2, #1
 8000980:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 800098e:	193b      	adds	r3, r7, r4
 8000990:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x174>)
 8000992:	0019      	movs	r1, r3
 8000994:	0010      	movs	r0, r2
 8000996:	f000 feff 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_4_Pin SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = D_4_Pin|SCLK_Pin|SDO_Pin;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	22d0      	movs	r2, #208	; 0xd0
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <MX_GPIO_Init+0x178>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f000 feeb 	bl	8001798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b00b      	add	sp, #44	; 0x2c
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000
 80009d0:	50000800 	.word	0x50000800
 80009d4:	50000400 	.word	0x50000400

080009d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) Clocker_Segment_Update(&ourClocker);
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d103      	bne.n	80009f0 <HAL_TIM_PeriodElapsedCallback+0x18>
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f955 	bl	8000c9a <Clocker_Segment_Update>
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000b0 	.word	0x200000b0
 80009fc:	20000130 	.word	0x20000130

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_MspInit+0x24>)
 8000a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x24>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <HAL_MspInit+0x24>)
 8000a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_MspInit+0x24>)
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	0549      	lsls	r1, r1, #21
 8000a26:	430a      	orrs	r2, r1
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_RTC_MspInit+0x28>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_RTC_MspInit+0x2c>)
 8000a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_RTC_MspInit+0x2c>)
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	02c9      	lsls	r1, r1, #11
 8000a50:	430a      	orrs	r2, r1
 8000a52:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40002800 	.word	0x40002800
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d10e      	bne.n	8000a96 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_TIM_Base_MspInit+0x50>)
 8000a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_TIM_Base_MspInit+0x50>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	430a      	orrs	r2, r1
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	200f      	movs	r0, #15
 8000a8a:	f000 fe53 	bl	8001734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 fe65 	bl	800175e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a94:	e00a      	b.n	8000aac <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_TIM_Base_MspInit+0x54>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d105      	bne.n	8000aac <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_TIM_Base_MspInit+0x50>)
 8000aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_TIM_Base_MspInit+0x50>)
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40000400 	.word	0x40000400

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 fd3c 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <TIM2_IRQHandler+0x14>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f002 fba2 	bl	800323c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	200000b0 	.word	0x200000b0

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f003 fb58 	bl	80041e8 <__errno>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	425b      	negs	r3, r3
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	18d2      	adds	r2, r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b006      	add	sp, #24
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20005000 	.word	0x20005000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000144 	.word	0x20000144
 8000b6c:	20000348 	.word	0x20000348

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <Reset_Handler>:
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
 8000b7e:	4685      	mov	sp, r0
 8000b80:	f7ff fff6 	bl	8000b70 <SystemInit>
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopForever+0x6>)
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopForever+0xa>)
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopForever+0xe>)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:
 8000b8e:	58d4      	ldr	r4, [r2, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:
 8000b94:	18c4      	adds	r4, r0, r3
 8000b96:	428c      	cmp	r4, r1
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopForever+0x12>)
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopForever+0x16>)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:
 8000ba6:	42a2      	cmp	r2, r4
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>
 8000baa:	f003 fb23 	bl	80041f4 <__libc_init_array>
 8000bae:	f7ff fc83 	bl	80004b8 <main>

08000bb2 <LoopForever>:
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
 8000bb4:	20005000 	.word	0x20005000
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000070 	.word	0x20000070
 8000bc0:	080044d8 	.word	0x080044d8
 8000bc4:	20000070 	.word	0x20000070
 8000bc8:	20000344 	.word	0x20000344

08000bcc <ADC1_COMP_IRQHandler>:
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_COMP_IRQHandler>

08000bce <Clocker_Init>:
 *      Author: zero-jedynkowy
 */
#include "Clocker.h"

void Clocker_Init(struct Clocker * myClocker, RTC_HandleTypeDef * rtcHandle)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b088      	sub	sp, #32
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	myClocker->numberOfScreens = 5;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2205      	movs	r2, #5
 8000bdc:	701a      	strb	r2, [r3, #0]
	myClocker->currentScreen = 1;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	705a      	strb	r2, [r3, #1]
	myClocker->screenTimeChanging = 5;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2205      	movs	r2, #5
 8000be8:	709a      	strb	r2, [r3, #2]
	myClocker->sTime = (RTC_TimeTypeDef *)malloc(sizeof(RTC_TimeTypeDef));
 8000bea:	2014      	movs	r0, #20
 8000bec:	f003 f8c6 	bl	8003d7c <malloc>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
	*myClocker->sTime = (RTC_TimeTypeDef){0};
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 fa88 	bl	8004118 <memset>
	myClocker->sDate = (RTC_DateTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8000c08:	2004      	movs	r0, #4
 8000c0a:	f003 f8b7 	bl	8003d7c <malloc>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	001a      	movs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60da      	str	r2, [r3, #12]
	*myClocker->sDate = (RTC_DateTypeDef){0};
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f003 fa79 	bl	8004118 <memset>
	myClocker->rtcHandle = rtcHandle;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	611a      	str	r2, [r3, #16]
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b008      	add	sp, #32
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <Clocker_Set_Time>:

void Clocker_Set_Time(struct Clocker * myClocker, uint8_t newHours, uint8_t newMinutes, uint8_t newSeconds)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	0010      	movs	r0, r2
 8000c40:	0019      	movs	r1, r3
 8000c42:	1cfb      	adds	r3, r7, #3
 8000c44:	1c22      	adds	r2, r4, #0
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	1cbb      	adds	r3, r7, #2
 8000c4a:	1c02      	adds	r2, r0, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	1c7b      	adds	r3, r7, #1
 8000c50:	1c0a      	adds	r2, r1, #0
 8000c52:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Hours = newHours;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	1cfa      	adds	r2, r7, #3
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Minutes = newMinutes;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	1cba      	adds	r2, r7, #2
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	705a      	strb	r2, [r3, #1]
	myClocker->sTime->Seconds = newSeconds;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	1c7a      	adds	r2, r7, #1
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	709a      	strb	r2, [r3, #2]
	myClocker->sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
	myClocker->sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6918      	ldr	r0, [r3, #16]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	f001 ff37 	bl	8002b00 <HAL_RTC_SetTime>
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b003      	add	sp, #12
 8000c98:	bd90      	pop	{r4, r7, pc}

08000c9a <Clocker_Segment_Update>:

void Clocker_Segment_Update(struct Clocker * myClocker)
{
 8000c9a:	b590      	push	{r4, r7, lr}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	uint8_t tempTime[4] = {0};
 8000ca2:	240c      	movs	r4, #12
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	HAL_RTC_GetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6918      	ldr	r0, [r3, #16]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	f001 ffcd 	bl	8002c54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(myClocker->rtcHandle, myClocker->sDate, RTC_FORMAT_BIN);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6918      	ldr	r0, [r3, #16]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	0019      	movs	r1, r3
 8000cc6:	f002 f8b7 	bl	8002e38 <HAL_RTC_GetDate>
	tempTime[0] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)/10);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	210a      	movs	r1, #10
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fa20 	bl	8000118 <__udivsi3>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 f83d 	bl	8000d5c <Clocker_Convert_Int_to_Segment>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	701a      	strb	r2, [r3, #0]
	tempTime[1] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)%10);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fa96 	bl	8000224 <__aeabi_uidivmod>
 8000cf8:	000b      	movs	r3, r1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 f82d 	bl	8000d5c <Clocker_Convert_Int_to_Segment>
 8000d02:	0003      	movs	r3, r0
 8000d04:	001a      	movs	r2, r3
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	705a      	strb	r2, [r3, #1]
	tempTime[2] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)/10);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	210a      	movs	r1, #10
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff fa00 	bl	8000118 <__udivsi3>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 f81d 	bl	8000d5c <Clocker_Convert_Int_to_Segment>
 8000d22:	0003      	movs	r3, r0
 8000d24:	001a      	movs	r2, r3
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	709a      	strb	r2, [r3, #2]
	tempTime[3] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)%10);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	210a      	movs	r1, #10
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fa76 	bl	8000224 <__aeabi_uidivmod>
 8000d38:	000b      	movs	r3, r1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 f80d 	bl	8000d5c <Clocker_Convert_Int_to_Segment>
 8000d42:	0003      	movs	r3, r0
 8000d44:	001a      	movs	r2, r3
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	70da      	strb	r2, [r3, #3]
	tm1637_DisplayHandle(7, tempTime);
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	2007      	movs	r0, #7
 8000d50:	f000 fb18 	bl	8001384 <tm1637_DisplayHandle>
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b005      	add	sp, #20
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <Clocker_Convert_Int_to_Segment>:

uint8_t Clocker_Convert_Int_to_Segment(uint8_t c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	0002      	movs	r2, r0
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	701a      	strb	r2, [r3, #0]
	switch(c)
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b09      	cmp	r3, #9
 8000d6e:	d818      	bhi.n	8000da2 <Clocker_Convert_Int_to_Segment+0x46>
 8000d70:	009a      	lsls	r2, r3, #2
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <Clocker_Convert_Int_to_Segment+0x50>)
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 8000d7a:	233f      	movs	r3, #63	; 0x3f
 8000d7c:	e012      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 1 : return 0x06;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	e010      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 2 : return 0x5b;
 8000d82:	235b      	movs	r3, #91	; 0x5b
 8000d84:	e00e      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 3 : return 0x4f;
 8000d86:	234f      	movs	r3, #79	; 0x4f
 8000d88:	e00c      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 4 : return 0x66;
 8000d8a:	2366      	movs	r3, #102	; 0x66
 8000d8c:	e00a      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 5 : return 0x6d;
 8000d8e:	236d      	movs	r3, #109	; 0x6d
 8000d90:	e008      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 6 : return 0x7d;
 8000d92:	237d      	movs	r3, #125	; 0x7d
 8000d94:	e006      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 7 : return 0x07;
 8000d96:	2307      	movs	r3, #7
 8000d98:	e004      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 8 : return 0x7f;
 8000d9a:	237f      	movs	r3, #127	; 0x7f
 8000d9c:	e002      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
		case 9 : return 0x6f;
 8000d9e:	236f      	movs	r3, #111	; 0x6f
 8000da0:	e000      	b.n	8000da4 <Clocker_Convert_Int_to_Segment+0x48>
	}
	return 0x3f;
 8000da2:	233f      	movs	r3, #63	; 0x3f
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	08004484 	.word	0x08004484

08000db0 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <delay+0x30>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <delay+0x30>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dcc:	1dbb      	adds	r3, r7, #6
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3f8      	bcc.n	8000dc6 <delay+0x16>
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	200000f0 	.word	0x200000f0

08000de4 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	0002      	movs	r2, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 fe66 	bl	8001ace <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	0059      	lsls	r1, r3, #1
 8000e14:	23a0      	movs	r3, #160	; 0xa0
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 fe58 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	0099      	lsls	r1, r3, #2
 8000e30:	23a0      	movs	r3, #160	; 0xa0
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fe4a 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	085b      	lsrs	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <send_to_lcd+0xb4>)
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	f000 fe3e 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <send_to_lcd+0xb8>)
 8000e5e:	001a      	movs	r2, r3
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	f000 fe34 	bl	8001ace <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000e66:	23a0      	movs	r3, #160	; 0xa0
 8000e68:	05db      	lsls	r3, r3, #23
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 fe2d 	bl	8001ace <HAL_GPIO_WritePin>
	delay (20);
 8000e74:	2014      	movs	r0, #20
 8000e76:	f7ff ff9b 	bl	8000db0 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fe23 	bl	8001ace <HAL_GPIO_WritePin>
	delay (20);
 8000e88:	2014      	movs	r0, #20
 8000e8a:	f7ff ff91 	bl	8000db0 <delay>
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	50000800 	.word	0x50000800
 8000e9c:	50000400 	.word	0x50000400

08000ea0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000eac:	200f      	movs	r0, #15
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	1dfa      	adds	r2, r7, #7
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	0912      	lsrs	r2, r2, #4
 8000eb6:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000eb8:	0004      	movs	r4, r0
 8000eba:	183b      	adds	r3, r7, r0
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ff8f 	bl	8000de4 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	183b      	adds	r3, r7, r0
 8000eca:	1dfa      	adds	r2, r7, #7
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	210f      	movs	r1, #15
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8000ed4:	183b      	adds	r3, r7, r0
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff ff82 	bl	8000de4 <send_to_lcd>
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b005      	add	sp, #20
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000ef4:	200f      	movs	r0, #15
 8000ef6:	183b      	adds	r3, r7, r0
 8000ef8:	1dfa      	adds	r2, r7, #7
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	0912      	lsrs	r2, r2, #4
 8000efe:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000f00:	0004      	movs	r4, r0
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2101      	movs	r1, #1
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ff6b 	bl	8000de4 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000f0e:	0020      	movs	r0, r4
 8000f10:	183b      	adds	r3, r7, r0
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	210f      	movs	r1, #15
 8000f18:	400a      	ands	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8000f1c:	183b      	adds	r3, r7, r0
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff ff5e 	bl	8000de4 <send_to_lcd>
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b005      	add	sp, #20
 8000f2e:	bd90      	pop	{r4, r7, pc}

08000f30 <lcd_clear>:

void lcd_clear (void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff ffb3 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(2);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 fb2a 	bl	8001594 <HAL_Delay>
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <lcd_put_cur+0x18>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <lcd_put_cur+0x22>
 8000f5c:	e009      	b.n	8000f72 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	4313      	orrs	r3, r2
 8000f64:	603b      	str	r3, [r7, #0]
            break;
 8000f66:	e004      	b.n	8000f72 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	22c0      	movs	r2, #192	; 0xc0
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	603b      	str	r3, [r7, #0]
            break;
 8000f70:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff ff92 	bl	8000ea0 <lcd_send_cmd>
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <lcd_init>:


void lcd_init (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f88:	2032      	movs	r0, #50	; 0x32
 8000f8a:	f000 fb03 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f8e:	2030      	movs	r0, #48	; 0x30
 8000f90:	f7ff ff86 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f94:	2005      	movs	r0, #5
 8000f96:	f000 fafd 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f9a:	2030      	movs	r0, #48	; 0x30
 8000f9c:	f7ff ff80 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 faf7 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fa6:	2030      	movs	r0, #48	; 0x30
 8000fa8:	f7ff ff7a 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f000 faf1 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000fb2:	2020      	movs	r0, #32
 8000fb4:	f7ff ff74 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(10);
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f000 faeb 	bl	8001594 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000fbe:	2028      	movs	r0, #40	; 0x28
 8000fc0:	f7ff ff6e 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 fae5 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f7ff ff68 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(1);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f000 fadf 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff ff62 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 fad9 	bl	8001594 <HAL_Delay>
	HAL_Delay(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 fad6 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fe8:	2006      	movs	r0, #6
 8000fea:	f7ff ff59 	bl	8000ea0 <lcd_send_cmd>
	HAL_Delay(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 fad0 	bl	8001594 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f7ff ff53 	bl	8000ea0 <lcd_send_cmd>
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001008:	e006      	b.n	8001018 <lcd_send_string+0x18>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff ff68 	bl	8000ee8 <lcd_send_data>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f4      	bne.n	800100a <lcd_send_string+0xa>
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <tm1637_CLKhigh+0x34>)
 8001036:	2201      	movs	r2, #1
 8001038:	0019      	movs	r1, r3
 800103a:	f000 fd48 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <tm1637_CLKhigh+0x34>)
 8001044:	2201      	movs	r2, #1
 8001046:	0019      	movs	r1, r3
 8001048:	f000 fd41 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <tm1637_CLKhigh+0x34>)
 8001052:	2201      	movs	r2, #1
 8001054:	0019      	movs	r1, r3
 8001056:	f000 fd3a 	bl	8001ace <HAL_GPIO_WritePin>
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	50000400 	.word	0x50000400

08001064 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	480a      	ldr	r0, [pc, #40]	; (8001098 <tm1637_CLKlow+0x34>)
 800106e:	2200      	movs	r2, #0
 8001070:	0019      	movs	r1, r3
 8001072:	f000 fd2c 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <tm1637_CLKlow+0x34>)
 800107c:	2200      	movs	r2, #0
 800107e:	0019      	movs	r1, r3
 8001080:	f000 fd25 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <tm1637_CLKlow+0x34>)
 800108a:	2200      	movs	r2, #0
 800108c:	0019      	movs	r1, r3
 800108e:	f000 fd1e 	bl	8001ace <HAL_GPIO_WritePin>
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	50000400 	.word	0x50000400

0800109c <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <tm1637_SDOhigh+0x34>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	0019      	movs	r1, r3
 80010aa:	f000 fd10 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <tm1637_SDOhigh+0x34>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	0019      	movs	r1, r3
 80010b8:	f000 fd09 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <tm1637_SDOhigh+0x34>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	0019      	movs	r1, r3
 80010c6:	f000 fd02 	bl	8001ace <HAL_GPIO_WritePin>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	50000400 	.word	0x50000400

080010d4 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <tm1637_SDOlow+0x34>)
 80010de:	2200      	movs	r2, #0
 80010e0:	0019      	movs	r1, r3
 80010e2:	f000 fcf4 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <tm1637_SDOlow+0x34>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	0019      	movs	r1, r3
 80010f0:	f000 fced 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <tm1637_SDOlow+0x34>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	0019      	movs	r1, r3
 80010fe:	f000 fce6 	bl	8001ace <HAL_GPIO_WritePin>
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	50000400 	.word	0x50000400

0800110c <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8001110:	f7ff ff8c 	bl	800102c <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8001114:	f7ff ffc2 	bl	800109c <tm1637_SDOhigh>
	tm1637_SDOlow();
 8001118:	f7ff ffdc 	bl	80010d4 <tm1637_SDOlow>

	tm1637_CLKlow();
 800111c:	f7ff ffa2 	bl	8001064 <tm1637_CLKlow>
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 800112a:	f7ff ff9b 	bl	8001064 <tm1637_CLKlow>
	tm1637_SDOlow();
 800112e:	f7ff ffd1 	bl	80010d4 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8001132:	f7ff ff7b 	bl	800102c <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8001136:	f7ff ffb1 	bl	800109c <tm1637_SDOhigh>
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e01a      	b.n	8001188 <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8001152:	f7ff ff87 	bl	8001064 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8001156:	230f      	movs	r3, #15
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 8001168:	f7ff ff98 	bl	800109c <tm1637_SDOhigh>
 800116c:	e001      	b.n	8001172 <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 800116e:	f7ff ffb1 	bl	80010d4 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8001172:	f7ff ff5b 	bl	800102c <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8001176:	210f      	movs	r1, #15
 8001178:	187b      	adds	r3, r7, r1
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	3301      	adds	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	187b      	adds	r3, r7, r1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	2b07      	cmp	r3, #7
 8001192:	ddde      	ble.n	8001152 <tm1637_DataOut+0x12>
	} 
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}

0800119e <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 80011a6:	230c      	movs	r3, #12
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80011b2:	2317      	movs	r3, #23
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e018      	b.n	80011ee <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	001a      	movs	r2, r3
 80011c2:	2117      	movs	r1, #23
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	411a      	asrs	r2, r3
 80011ca:	0013      	movs	r3, r2
 80011cc:	2201      	movs	r2, #1
 80011ce:	4013      	ands	r3, r2
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	4193      	sbcs	r3, r2
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	0008      	movs	r0, r1
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	0011      	movs	r1, r2
 80011de:	220c      	movs	r2, #12
 80011e0:	18ba      	adds	r2, r7, r2
 80011e2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80011e4:	183b      	adds	r3, r7, r0
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	183b      	adds	r3, r7, r0
 80011ea:	3201      	adds	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	2317      	movs	r3, #23
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d9e1      	bls.n	80011bc <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 80011f8:	f7ff ff88 	bl	800110c <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 80011fc:	230c      	movs	r3, #12
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ff9d 	bl	8001140 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8001206:	f7ff ff2d 	bl	8001064 <tm1637_CLKlow>
	tm1637_CLKhigh();
 800120a:	f7ff ff0f 	bl	800102c <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 800120e:	f000 f89f 	bl	8001350 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	001a      	movs	r2, r3
 8001218:	23c0      	movs	r3, #192	; 0xc0
 800121a:	4013      	ands	r3, r2
 800121c:	2bc0      	cmp	r3, #192	; 0xc0
 800121e:	d001      	beq.n	8001224 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8001220:	f7ff ff81 	bl	8001126 <tm1637_EndPacket>
	}

}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b006      	add	sp, #24
 800122a:	bd80      	pop	{r7, pc}

0800122c <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	000a      	movs	r2, r1
 8001236:	1cfb      	adds	r3, r7, #3
 8001238:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 800123a:	230c      	movs	r3, #12
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 8001246:	2317      	movs	r3, #23
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e037      	b.n	80012c0 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8001250:	2316      	movs	r3, #22
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	e01c      	b.n	8001294 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 800125a:	2317      	movs	r3, #23
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	18d3      	adds	r3, r2, r3
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	001a      	movs	r2, r3
 8001268:	2116      	movs	r1, #22
 800126a:	187b      	adds	r3, r7, r1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	411a      	asrs	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	2201      	movs	r2, #1
 8001274:	4013      	ands	r3, r2
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	4193      	sbcs	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	0008      	movs	r0, r1
 800127e:	187b      	adds	r3, r7, r1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0011      	movs	r1, r2
 8001284:	220c      	movs	r2, #12
 8001286:	18ba      	adds	r2, r7, r2
 8001288:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 800128a:	183b      	adds	r3, r7, r0
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	183b      	adds	r3, r7, r0
 8001290:	3201      	adds	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	2316      	movs	r3, #22
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d9dd      	bls.n	800125a <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 800129e:	230c      	movs	r3, #12
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff4c 	bl	8001140 <tm1637_DataOut>
		tm1637_CLKlow();
 80012a8:	f7ff fedc 	bl	8001064 <tm1637_CLKlow>
		tm1637_CLKhigh();
 80012ac:	f7ff febe 	bl	800102c <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 80012b0:	f000 f84e 	bl	8001350 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 80012b4:	2117      	movs	r1, #23
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	3201      	adds	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	2317      	movs	r3, #23
 80012c2:	18fa      	adds	r2, r7, r3
 80012c4:	1cfb      	adds	r3, r7, #3
 80012c6:	7812      	ldrb	r2, [r2, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3c0      	bcc.n	8001250 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 80012ce:	f7ff ff2a 	bl	8001126 <tm1637_EndPacket>


}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b006      	add	sp, #24
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	0002      	movs	r2, r0
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 80012e8:	240c      	movs	r4, #12
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	0018      	movs	r0, r3
 80012ee:	2314      	movs	r3, #20
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f002 ff10 	bl	8004118 <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 80012f8:	0021      	movs	r1, r4
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <tm1637_Initialize+0x52>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d114      	bne.n	8001344 <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	187b      	adds	r3, r7, r1
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <tm1637_Initialize+0x70>)
 8001324:	0019      	movs	r1, r3
 8001326:	0010      	movs	r0, r2
 8001328:	f000 fa36 	bl	8001798 <HAL_GPIO_Init>
			break;
 800132c:	e00a      	b.n	8001344 <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	210c      	movs	r1, #12
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2201      	movs	r2, #1
 8001334:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	187b      	adds	r3, r7, r1
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <tm1637_Initialize+0x70>)
 800133a:	0019      	movs	r1, r3
 800133c:	0010      	movs	r0, r2
 800133e:	f000 fa2b 	bl	8001798 <HAL_GPIO_Init>
			break;
 8001342:	46c0      	nop			; (mov r8, r8)

	}

}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b009      	add	sp, #36	; 0x24
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	50000c00 	.word	0x50000c00

08001350 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff ffc1 	bl	80012dc <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 800135a:	f7ff fe83 	bl	8001064 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 800135e:	e002      	b.n	8001366 <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff ffbb 	bl	80012dc <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <tm1637_ACKcheck+0x30>)
 800136c:	0019      	movs	r1, r3
 800136e:	0010      	movs	r0, r2
 8001370:	f000 fb90 	bl	8001a94 <HAL_GPIO_ReadPin>
 8001374:	1e03      	subs	r3, r0, #0
 8001376:	d1f3      	bne.n	8001360 <tm1637_ACKcheck+0x10>
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	50000400 	.word	0x50000400

08001384 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8001392:	210c      	movs	r1, #12
 8001394:	187b      	adds	r3, r7, r1
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <tm1637_DisplayHandle+0x78>)
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 800139c:	250f      	movs	r5, #15
 800139e:	197b      	adds	r3, r7, r5
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d81f      	bhi.n	80013ec <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80013b2:	000c      	movs	r4, r1
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff fef1 	bl	800119e <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 80013bc:	0021      	movs	r1, r4
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	22c0      	movs	r2, #192	; 0xc0
 80013c2:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff fee9 	bl	800119e <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2104      	movs	r1, #4
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff ff2b 	bl	800122c <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 f810 	bl	8001400 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 80013e0:	197b      	adds	r3, r7, r5
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 80013e6:	197b      	adds	r3, r7, r5
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	e002      	b.n	80013f2 <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 80013ec:	230f      	movs	r3, #15
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bdb0      	pop	{r4, r5, r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	08004464 	.word	0x08004464

08001400 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	0002      	movs	r2, r0
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 800140c:	230c      	movs	r3, #12
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8001418:	2316      	movs	r3, #22
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b07      	cmp	r3, #7
 8001426:	d83e      	bhi.n	80014a6 <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	1dfa      	adds	r2, r7, #7
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	2178      	movs	r1, #120	; 0x78
 8001430:	4249      	negs	r1, r1
 8001432:	430a      	orrs	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 8001436:	2317      	movs	r3, #23
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e017      	b.n	8001470 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	2117      	movs	r1, #23
 8001446:	187b      	adds	r3, r7, r1
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	411a      	asrs	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	2201      	movs	r2, #1
 8001450:	4013      	ands	r3, r2
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	4193      	sbcs	r3, r2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	0008      	movs	r0, r1
 800145a:	187b      	adds	r3, r7, r1
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0011      	movs	r1, r2
 8001460:	220c      	movs	r2, #12
 8001462:	18ba      	adds	r2, r7, r2
 8001464:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8001466:	183b      	adds	r3, r7, r0
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	183b      	adds	r3, r7, r0
 800146c:	3201      	adds	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	2317      	movs	r3, #23
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d9e2      	bls.n	8001440 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 800147a:	f7ff fe47 	bl	800110c <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 800147e:	230c      	movs	r3, #12
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff fe5c 	bl	8001140 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8001488:	f7ff fdec 	bl	8001064 <tm1637_CLKlow>
		tm1637_CLKhigh();
 800148c:	f7ff fdce 	bl	800102c <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8001490:	f7ff ff5e 	bl	8001350 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8001494:	f7ff fe47 	bl	8001126 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8001498:	2116      	movs	r1, #22
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	e002      	b.n	80014ac <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 80014a6:	2316      	movs	r3, #22
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	781b      	ldrb	r3, [r3, #0]
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b006      	add	sp, #24
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_Init+0x3c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Init+0x3c>)
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f811 	bl	80014f4 <HAL_InitTick>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d003      	beq.n	80014de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e001      	b.n	80014e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014de:	f7ff fa95 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_InitTick+0x5c>)
 80014fe:	681c      	ldr	r4, [r3, #0]
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_InitTick+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	0019      	movs	r1, r3
 8001506:	23fa      	movs	r3, #250	; 0xfa
 8001508:	0098      	lsls	r0, r3, #2
 800150a:	f7fe fe05 	bl	8000118 <__udivsi3>
 800150e:	0003      	movs	r3, r0
 8001510:	0019      	movs	r1, r3
 8001512:	0020      	movs	r0, r4
 8001514:	f7fe fe00 	bl	8000118 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f92f 	bl	800177e <HAL_SYSTICK_Config>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e00f      	b.n	8001548 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d80b      	bhi.n	8001546 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2301      	movs	r3, #1
 8001532:	425b      	negs	r3, r3
 8001534:	2200      	movs	r2, #0
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f8fc 	bl	8001734 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_InitTick+0x64>)
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b003      	add	sp, #12
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	18d2      	adds	r2, r2, r3
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_IncTick+0x20>)
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	20000008 	.word	0x20000008
 800157c:	20000148 	.word	0x20000148

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	20000148 	.word	0x20000148

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fff0 	bl	8001580 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	001a      	movs	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	f7ff ffe0 	bl	8001580 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	0002      	movs	r2, r0
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b7f      	cmp	r3, #127	; 0x7f
 80015ee:	d809      	bhi.n	8001604 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	001a      	movs	r2, r3
 80015f6:	231f      	movs	r3, #31
 80015f8:	401a      	ands	r2, r3
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_EnableIRQ+0x30>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	4091      	lsls	r1, r2
 8001600:	000a      	movs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
  }
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	0002      	movs	r2, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b7f      	cmp	r3, #127	; 0x7f
 8001624:	d828      	bhi.n	8001678 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001626:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <__NVIC_SetPriority+0xd4>)
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	33c0      	adds	r3, #192	; 0xc0
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	589b      	ldr	r3, [r3, r2]
 8001636:	1dfa      	adds	r2, r7, #7
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	0011      	movs	r1, r2
 800163c:	2203      	movs	r2, #3
 800163e:	400a      	ands	r2, r1
 8001640:	00d2      	lsls	r2, r2, #3
 8001642:	21ff      	movs	r1, #255	; 0xff
 8001644:	4091      	lsls	r1, r2
 8001646:	000a      	movs	r2, r1
 8001648:	43d2      	mvns	r2, r2
 800164a:	401a      	ands	r2, r3
 800164c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	019b      	lsls	r3, r3, #6
 8001652:	22ff      	movs	r2, #255	; 0xff
 8001654:	401a      	ands	r2, r3
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	0018      	movs	r0, r3
 800165c:	2303      	movs	r3, #3
 800165e:	4003      	ands	r3, r0
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001664:	481f      	ldr	r0, [pc, #124]	; (80016e4 <__NVIC_SetPriority+0xd4>)
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b25b      	sxtb	r3, r3
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	430a      	orrs	r2, r1
 8001670:	33c0      	adds	r3, #192	; 0xc0
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001676:	e031      	b.n	80016dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <__NVIC_SetPriority+0xd8>)
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	0019      	movs	r1, r3
 8001680:	230f      	movs	r3, #15
 8001682:	400b      	ands	r3, r1
 8001684:	3b08      	subs	r3, #8
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3306      	adds	r3, #6
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	18d3      	adds	r3, r2, r3
 800168e:	3304      	adds	r3, #4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	1dfa      	adds	r2, r7, #7
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	0011      	movs	r1, r2
 8001698:	2203      	movs	r2, #3
 800169a:	400a      	ands	r2, r1
 800169c:	00d2      	lsls	r2, r2, #3
 800169e:	21ff      	movs	r1, #255	; 0xff
 80016a0:	4091      	lsls	r1, r2
 80016a2:	000a      	movs	r2, r1
 80016a4:	43d2      	mvns	r2, r2
 80016a6:	401a      	ands	r2, r3
 80016a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	22ff      	movs	r2, #255	; 0xff
 80016b0:	401a      	ands	r2, r3
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	0018      	movs	r0, r3
 80016b8:	2303      	movs	r3, #3
 80016ba:	4003      	ands	r3, r0
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c0:	4809      	ldr	r0, [pc, #36]	; (80016e8 <__NVIC_SetPriority+0xd8>)
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	001c      	movs	r4, r3
 80016c8:	230f      	movs	r3, #15
 80016ca:	4023      	ands	r3, r4
 80016cc:	3b08      	subs	r3, #8
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	430a      	orrs	r2, r1
 80016d2:	3306      	adds	r3, #6
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	18c3      	adds	r3, r0, r3
 80016d8:	3304      	adds	r3, #4
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b003      	add	sp, #12
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	045b      	lsls	r3, r3, #17
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d301      	bcc.n	8001704 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001700:	2301      	movs	r3, #1
 8001702:	e010      	b.n	8001726 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <SysTick_Config+0x44>)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	3a01      	subs	r2, #1
 800170a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170c:	2301      	movs	r3, #1
 800170e:	425b      	negs	r3, r3
 8001710:	2103      	movs	r1, #3
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff ff7c 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x44>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x44>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	210f      	movs	r1, #15
 8001740:	187b      	adds	r3, r7, r1
 8001742:	1c02      	adds	r2, r0, #0
 8001744:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	187b      	adds	r3, r7, r1
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	0011      	movs	r1, r2
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ff5d 	bl	8001610 <__NVIC_SetPriority>
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	0002      	movs	r2, r0
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25b      	sxtb	r3, r3
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff ff33 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff ffaf 	bl	80016ec <SysTick_Config>
 800178e:	0003      	movs	r3, r0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017ae:	e155      	b.n	8001a5c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4091      	lsls	r1, r2
 80017ba:	000a      	movs	r2, r1
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d100      	bne.n	80017c8 <HAL_GPIO_Init+0x30>
 80017c6:	e146      	b.n	8001a56 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2203      	movs	r2, #3
 80017da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	409a      	lsls	r2, r3
 80017ee:	0013      	movs	r3, r2
 80017f0:	43da      	mvns	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	409a      	lsls	r2, r3
 8001802:	0013      	movs	r3, r2
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	2201      	movs	r2, #1
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	4013      	ands	r3, r2
 800184a:	2b03      	cmp	r3, #3
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	43da      	mvns	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	4013      	ands	r3, r2
 8001886:	2b02      	cmp	r3, #2
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	58d3      	ldr	r3, [r2, r3]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2207      	movs	r2, #7
 800189c:	4013      	ands	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	409a      	lsls	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	43da      	mvns	r2, r3
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2107      	movs	r1, #7
 80018b6:	400b      	ands	r3, r1
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	6939      	ldr	r1, [r7, #16]
 80018d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	43da      	mvns	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2203      	movs	r2, #3
 80018f0:	401a      	ands	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	409a      	lsls	r2, r3
 80018f8:	0013      	movs	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	029b      	lsls	r3, r3, #10
 800190e:	4013      	ands	r3, r2
 8001910:	d100      	bne.n	8001914 <HAL_GPIO_Init+0x17c>
 8001912:	e0a0      	b.n	8001a56 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 800191a:	2101      	movs	r1, #1
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001920:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	589b      	ldr	r3, [r3, r2]
 800192c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2203      	movs	r2, #3
 8001932:	4013      	ands	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	409a      	lsls	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	43da      	mvns	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	23a0      	movs	r3, #160	; 0xa0
 8001948:	05db      	lsls	r3, r3, #23
 800194a:	429a      	cmp	r2, r3
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x1f6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <HAL_GPIO_Init+0x2e4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x1f2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x1ee>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a48      	ldr	r2, [pc, #288]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x1ea>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x1e6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <HAL_GPIO_Init+0x2f4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x1e2>
 8001976:	2305      	movs	r3, #5
 8001978:	e00a      	b.n	8001990 <HAL_GPIO_Init+0x1f8>
 800197a:	2306      	movs	r3, #6
 800197c:	e008      	b.n	8001990 <HAL_GPIO_Init+0x1f8>
 800197e:	2304      	movs	r3, #4
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x1f8>
 8001982:	2303      	movs	r3, #3
 8001984:	e004      	b.n	8001990 <HAL_GPIO_Init+0x1f8>
 8001986:	2302      	movs	r3, #2
 8001988:	e002      	b.n	8001990 <HAL_GPIO_Init+0x1f8>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x1f8>
 800198e:	2300      	movs	r3, #0
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	2103      	movs	r1, #3
 8001994:	400a      	ands	r2, r1
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4093      	lsls	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a0:	4935      	ldr	r1, [pc, #212]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43da      	mvns	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	035b      	lsls	r3, r3, #13
 80019c6:	4013      	ands	r3, r2
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43da      	mvns	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	039b      	lsls	r3, r3, #14
 80019f0:	4013      	ands	r3, r2
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43da      	mvns	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	025b      	lsls	r3, r3, #9
 8001a44:	4013      	ands	r3, r2
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	40da      	lsrs	r2, r3
 8001a64:	1e13      	subs	r3, r2, #0
 8001a66:	d000      	beq.n	8001a6a <HAL_GPIO_Init+0x2d2>
 8001a68:	e6a2      	b.n	80017b0 <HAL_GPIO_Init+0x18>
  }
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b006      	add	sp, #24
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	50000400 	.word	0x50000400
 8001a80:	50000800 	.word	0x50000800
 8001a84:	50000c00 	.word	0x50000c00
 8001a88:	50001000 	.word	0x50001000
 8001a8c:	50001c00 	.word	0x50001c00
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	1cbb      	adds	r3, r7, #2
 8001aa0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	1cba      	adds	r2, r7, #2
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d004      	beq.n	8001ab8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001aae:	230f      	movs	r3, #15
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e003      	b.n	8001ac0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab8:	230f      	movs	r3, #15
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b004      	add	sp, #16
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	0008      	movs	r0, r1
 8001ad8:	0011      	movs	r1, r2
 8001ada:	1cbb      	adds	r3, r7, #2
 8001adc:	1c02      	adds	r2, r0, #0
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	1c7b      	adds	r3, r7, #1
 8001ae2:	1c0a      	adds	r2, r1, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae6:	1c7b      	adds	r3, r7, #1
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aee:	1cbb      	adds	r3, r7, #2
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001af6:	e003      	b.n	8001b00 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001af8:	1cbb      	adds	r3, r7, #2
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	f000 fbbf 	bl	800229a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1c:	4bc9      	ldr	r3, [pc, #804]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	220c      	movs	r2, #12
 8001b22:	4013      	ands	r3, r2
 8001b24:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b26:	4bc7      	ldr	r3, [pc, #796]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d100      	bne.n	8001b3e <HAL_RCC_OscConfig+0x36>
 8001b3c:	e07e      	b.n	8001c3c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d007      	beq.n	8001b54 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d112      	bne.n	8001b70 <HAL_RCC_OscConfig+0x68>
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10d      	bne.n	8001b70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4bbb      	ldr	r3, [pc, #748]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d100      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5a>
 8001b60:	e06b      	b.n	8001c3a <HAL_RCC_OscConfig+0x132>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d167      	bne.n	8001c3a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f000 fb95 	bl	800229a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x84>
 8001b7c:	4bb1      	ldr	r3, [pc, #708]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4bb0      	ldr	r3, [pc, #704]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	0249      	lsls	r1, r1, #9
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e027      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	23a0      	movs	r3, #160	; 0xa0
 8001b92:	02db      	lsls	r3, r3, #11
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10e      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xae>
 8001b98:	4baa      	ldr	r3, [pc, #680]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4ba9      	ldr	r3, [pc, #676]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	02c9      	lsls	r1, r1, #11
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	4ba7      	ldr	r3, [pc, #668]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4ba6      	ldr	r3, [pc, #664]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0249      	lsls	r1, r1, #9
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e012      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001bb6:	4ba3      	ldr	r3, [pc, #652]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4ba2      	ldr	r3, [pc, #648]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001bbc:	49a2      	ldr	r1, [pc, #648]	; (8001e48 <HAL_RCC_OscConfig+0x340>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	4ba0      	ldr	r3, [pc, #640]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4b9c      	ldr	r3, [pc, #624]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b9b      	ldr	r3, [pc, #620]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001bd6:	499d      	ldr	r1, [pc, #628]	; (8001e4c <HAL_RCC_OscConfig+0x344>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fccc 	bl	8001580 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bee:	f7ff fcc7 	bl	8001580 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d902      	bls.n	8001c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	f000 fb4c 	bl	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c02:	4b90      	ldr	r3, [pc, #576]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	029b      	lsls	r3, r3, #10
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d0ef      	beq.n	8001bee <HAL_RCC_OscConfig+0xe6>
 8001c0e:	e015      	b.n	8001c3c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fcb6 	bl	8001580 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fcb1 	bl	8001580 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b64      	cmp	r3, #100	; 0x64
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e336      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c2c:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x112>
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d100      	bne.n	8001c48 <HAL_RCC_OscConfig+0x140>
 8001c46:	e099      	b.n	8001d7c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	2220      	movs	r2, #32
 8001c52:	4013      	ands	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c56:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	2220      	movs	r2, #32
 8001c66:	4393      	bics	r3, r2
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d13e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1ec>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d13b      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c7c:	4b71      	ldr	r3, [pc, #452]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_RCC_OscConfig+0x188>
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e304      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x348>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	021a      	lsls	r2, r3, #8
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2209      	movs	r2, #9
 8001cac:	4393      	bics	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb8:	f000 fc42 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8001cbc:	0001      	movs	r1, r0
 8001cbe:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	4a62      	ldr	r2, [pc, #392]	; (8001e54 <HAL_RCC_OscConfig+0x34c>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	000a      	movs	r2, r1
 8001cce:	40da      	lsrs	r2, r3
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <HAL_RCC_OscConfig+0x350>)
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001cd4:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <HAL_RCC_OscConfig+0x354>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2513      	movs	r5, #19
 8001cda:	197c      	adds	r4, r7, r5
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff fc09 	bl	80014f4 <HAL_InitTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ce6:	197b      	adds	r3, r7, r5
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d046      	beq.n	8001d7c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001cee:	197b      	adds	r3, r7, r5
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	e2d2      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d027      	beq.n	8001d4a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cfa:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2209      	movs	r2, #9
 8001d00:	4393      	bics	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fc38 	bl	8001580 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fc33 	bl	8001580 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e2b8      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d0f1      	beq.n	8001d16 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4a46      	ldr	r2, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x348>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	021a      	lsls	r2, r3, #8
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	e018      	b.n	8001d7c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	438a      	bics	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fc13 	bl	8001580 <HAL_GetTick>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc0e 	bl	8001580 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e293      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2204      	movs	r2, #4
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1f1      	bne.n	8001d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2210      	movs	r2, #16
 8001d82:	4013      	ands	r3, r2
 8001d84:	d100      	bne.n	8001d88 <HAL_RCC_OscConfig+0x280>
 8001d86:	e0a2      	b.n	8001ece <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d140      	bne.n	8001e10 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x29e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e279      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <HAL_RCC_OscConfig+0x358>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	0a19      	lsrs	r1, r3, #8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	061a      	lsls	r2, r3, #24
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	0b5b      	lsrs	r3, r3, #13
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	0212      	lsls	r2, r2, #8
 8001dda:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	210f      	movs	r1, #15
 8001de4:	400b      	ands	r3, r1
 8001de6:	491b      	ldr	r1, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x34c>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCC_OscConfig+0x350>)
 8001dee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x354>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2513      	movs	r5, #19
 8001df6:	197c      	adds	r4, r7, r5
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fb7b 	bl	80014f4 <HAL_InitTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e02:	197b      	adds	r3, r7, r5
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d061      	beq.n	8001ece <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	e244      	b.n	800229a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d040      	beq.n	8001e9a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0049      	lsls	r1, r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fbab 	bl	8001580 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e2e:	e019      	b.n	8001e64 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e30:	f7ff fba6 	bl	8001580 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d912      	bls.n	8001e64 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e22b      	b.n	800229a <HAL_RCC_OscConfig+0x792>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000
 8001e48:	fffeffff 	.word	0xfffeffff
 8001e4c:	fffbffff 	.word	0xfffbffff
 8001e50:	ffffe0ff 	.word	0xffffe0ff
 8001e54:	08004468 	.word	0x08004468
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e64:	4bca      	ldr	r3, [pc, #808]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0df      	beq.n	8001e30 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e70:	4bc7      	ldr	r3, [pc, #796]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4ac7      	ldr	r2, [pc, #796]	; (8002194 <HAL_RCC_OscConfig+0x68c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7e:	4bc4      	ldr	r3, [pc, #784]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e84:	4bc2      	ldr	r3, [pc, #776]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	0a19      	lsrs	r1, r3, #8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	061a      	lsls	r2, r3, #24
 8001e92:	4bbf      	ldr	r3, [pc, #764]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	e019      	b.n	8001ece <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e9a:	4bbd      	ldr	r3, [pc, #756]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4bbc      	ldr	r3, [pc, #752]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001ea0:	49bd      	ldr	r1, [pc, #756]	; (8002198 <HAL_RCC_OscConfig+0x690>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff fb6b 	bl	8001580 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fb66 	bl	8001580 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1eb      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ec2:	4bb3      	ldr	r3, [pc, #716]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d036      	beq.n	8001f46 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d019      	beq.n	8001f14 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee0:	4bab      	ldr	r3, [pc, #684]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee4:	4baa      	ldr	r3, [pc, #680]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7ff fb48 	bl	8001580 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fb43 	bl	8001580 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1c8      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f08:	4ba1      	ldr	r3, [pc, #644]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f1      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3ee>
 8001f12:	e018      	b.n	8001f46 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b9e      	ldr	r3, [pc, #632]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f18:	4b9d      	ldr	r3, [pc, #628]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fb2e 	bl	8001580 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fb29 	bl	8001580 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1ae      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f3c:	4b94      	ldr	r3, [pc, #592]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f40:	2202      	movs	r2, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d1f1      	bne.n	8001f2a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x44a>
 8001f50:	e0ae      	b.n	80020b0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2023      	movs	r0, #35	; 0x23
 8001f54:	183b      	adds	r3, r7, r0
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b8d      	ldr	r3, [pc, #564]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	055b      	lsls	r3, r3, #21
 8001f62:	4013      	ands	r3, r2
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b8a      	ldr	r3, [pc, #552]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6a:	4b89      	ldr	r3, [pc, #548]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	0549      	lsls	r1, r1, #21
 8001f70:	430a      	orrs	r2, r1
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f74:	183b      	adds	r3, r7, r0
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x694>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f86:	4b85      	ldr	r3, [pc, #532]	; (800219c <HAL_RCC_OscConfig+0x694>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b84      	ldr	r3, [pc, #528]	; (800219c <HAL_RCC_OscConfig+0x694>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0049      	lsls	r1, r1, #1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f94:	f7ff faf4 	bl	8001580 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7ff faef 	bl	8001580 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e174      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b7a      	ldr	r3, [pc, #488]	; (800219c <HAL_RCC_OscConfig+0x694>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4d0>
 8001fc8:	4b71      	ldr	r3, [pc, #452]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fcc:	4b70      	ldr	r3, [pc, #448]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	0049      	lsls	r1, r1, #1
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	651a      	str	r2, [r3, #80]	; 0x50
 8001fd6:	e031      	b.n	800203c <HAL_RCC_OscConfig+0x534>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4f2>
 8001fe0:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001fe6:	496c      	ldr	r1, [pc, #432]	; (8002198 <HAL_RCC_OscConfig+0x690>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	651a      	str	r2, [r3, #80]	; 0x50
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff0:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x698>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff8:	e020      	b.n	800203c <HAL_RCC_OscConfig+0x534>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	23a0      	movs	r3, #160	; 0xa0
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	429a      	cmp	r2, r3
 8002004:	d10e      	bne.n	8002024 <HAL_RCC_OscConfig+0x51c>
 8002006:	4b62      	ldr	r3, [pc, #392]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	00c9      	lsls	r1, r1, #3
 8002010:	430a      	orrs	r2, r1
 8002012:	651a      	str	r2, [r3, #80]	; 0x50
 8002014:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002018:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	0049      	lsls	r1, r1, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	651a      	str	r2, [r3, #80]	; 0x50
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0x534>
 8002024:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 800202a:	495b      	ldr	r1, [pc, #364]	; (8002198 <HAL_RCC_OscConfig+0x690>)
 800202c:	400a      	ands	r2, r1
 800202e:	651a      	str	r2, [r3, #80]	; 0x50
 8002030:	4b57      	ldr	r3, [pc, #348]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002034:	4b56      	ldr	r3, [pc, #344]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002036:	495a      	ldr	r1, [pc, #360]	; (80021a0 <HAL_RCC_OscConfig+0x698>)
 8002038:	400a      	ands	r2, r1
 800203a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7ff fa9c 	bl	8001580 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800204c:	e009      	b.n	8002062 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fa97 	bl	8001580 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_RCC_OscConfig+0x69c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e11b      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002062:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4013      	ands	r3, r2
 800206c:	d0ef      	beq.n	800204e <HAL_RCC_OscConfig+0x546>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fa86 	bl	8001580 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002078:	e009      	b.n	800208e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fa81 	bl	8001580 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x69c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e105      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800208e:	4b40      	ldr	r3, [pc, #256]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d1ef      	bne.n	800207a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209a:	2323      	movs	r3, #35	; 0x23
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 80020a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 80020aa:	493f      	ldr	r1, [pc, #252]	; (80021a8 <HAL_RCC_OscConfig+0x6a0>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2220      	movs	r2, #32
 80020b6:	4013      	ands	r3, r2
 80020b8:	d049      	beq.n	800214e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d026      	beq.n	8002110 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	4b32      	ldr	r3, [pc, #200]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 80020d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_OscConfig+0x6a4>)
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_RCC_OscConfig+0x6a4>)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	0189      	lsls	r1, r1, #6
 80020e4:	430a      	orrs	r2, r1
 80020e6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fa4a 	bl	8001580 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f2:	f7ff fa45 	bl	8001580 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e0ca      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d0f1      	beq.n	80020f2 <HAL_RCC_OscConfig+0x5ea>
 800210e:	e01e      	b.n	800214e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_OscConfig+0x6a4>)
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_OscConfig+0x6a4>)
 8002122:	4923      	ldr	r1, [pc, #140]	; (80021b0 <HAL_RCC_OscConfig+0x6a8>)
 8002124:	400a      	ands	r2, r1
 8002126:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fa2a 	bl	8001580 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002132:	f7ff fa25 	bl	8001580 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0aa      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d1f1      	bne.n	8002132 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	d100      	bne.n	8002158 <HAL_RCC_OscConfig+0x650>
 8002156:	e09f      	b.n	8002298 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d100      	bne.n	8002160 <HAL_RCC_OscConfig+0x658>
 800215e:	e078      	b.n	8002252 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	2b02      	cmp	r3, #2
 8002166:	d159      	bne.n	800221c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_RCC_OscConfig+0x688>)
 800216e:	4911      	ldr	r1, [pc, #68]	; (80021b4 <HAL_RCC_OscConfig+0x6ac>)
 8002170:	400a      	ands	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fa04 	bl	8001580 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800217c:	e01c      	b.n	80021b8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff f9ff 	bl	8001580 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d915      	bls.n	80021b8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e084      	b.n	800229a <HAL_RCC_OscConfig+0x792>
 8002190:	40021000 	.word	0x40021000
 8002194:	ffff1fff 	.word	0xffff1fff
 8002198:	fffffeff 	.word	0xfffffeff
 800219c:	40007000 	.word	0x40007000
 80021a0:	fffffbff 	.word	0xfffffbff
 80021a4:	00001388 	.word	0x00001388
 80021a8:	efffffff 	.word	0xefffffff
 80021ac:	40010000 	.word	0x40010000
 80021b0:	ffffdfff 	.word	0xffffdfff
 80021b4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021b8:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	049b      	lsls	r3, r3, #18
 80021c0:	4013      	ands	r3, r2
 80021c2:	d1dc      	bne.n	800217e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c4:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a37      	ldr	r2, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x7a0>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	431a      	orrs	r2, r3
 80021de:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0449      	lsls	r1, r1, #17
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7ff f9c5 	bl	8001580 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f9c0 	bl	8001580 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e045      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800220e:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	049b      	lsls	r3, r3, #18
 8002216:	4013      	ands	r3, r2
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x6f4>
 800221a:	e03d      	b.n	8002298 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_OscConfig+0x7a4>)
 8002224:	400a      	ands	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff f9aa 	bl	8001580 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002232:	f7ff f9a5 	bl	8001580 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e02a      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	049b      	lsls	r3, r3, #18
 800224c:	4013      	ands	r3, r2
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x72a>
 8002250:	e022      	b.n	8002298 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01d      	b.n	800229a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_RCC_OscConfig+0x79c>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	401a      	ands	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	429a      	cmp	r2, r3
 8002272:	d10f      	bne.n	8002294 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	23f0      	movs	r3, #240	; 0xf0
 8002278:	039b      	lsls	r3, r3, #14
 800227a:	401a      	ands	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d107      	bne.n	8002294 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	23c0      	movs	r3, #192	; 0xc0
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	401a      	ands	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b00a      	add	sp, #40	; 0x28
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40021000 	.word	0x40021000
 80022a8:	ff02ffff 	.word	0xff02ffff
 80022ac:	feffffff 	.word	0xfeffffff

080022b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e128      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b96      	ldr	r3, [pc, #600]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4013      	ands	r3, r2
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d91e      	bls.n	8002310 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b93      	ldr	r3, [pc, #588]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4393      	bics	r3, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e4:	f7ff f94c 	bl	8001580 <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ec:	e009      	b.n	8002302 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ee:	f7ff f947 	bl	8001580 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	4a8a      	ldr	r2, [pc, #552]	; (8002524 <HAL_RCC_ClockConfig+0x274>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e109      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b87      	ldr	r3, [pc, #540]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d1ee      	bne.n	80022ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231a:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	22f0      	movs	r2, #240	; 0xf0
 8002320:	4393      	bics	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b7f      	ldr	r3, [pc, #508]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 800232a:	430a      	orrs	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2201      	movs	r2, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d100      	bne.n	800233a <HAL_RCC_ClockConfig+0x8a>
 8002338:	e089      	b.n	800244e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002342:	4b79      	ldr	r3, [pc, #484]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	4013      	ands	r3, r2
 800234c:	d120      	bne.n	8002390 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0e1      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800235a:	4b73      	ldr	r3, [pc, #460]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	049b      	lsls	r3, r3, #18
 8002362:	4013      	ands	r3, r2
 8002364:	d114      	bne.n	8002390 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0d5      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d106      	bne.n	8002380 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	4013      	ands	r3, r2
 800237a:	d109      	bne.n	8002390 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0ca      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0c2      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002390:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2203      	movs	r2, #3
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7ff f8ec 	bl	8001580 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d111      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b4:	e009      	b.n	80023ca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b6:	f7ff f8e3 	bl	8001580 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_RCC_ClockConfig+0x274>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0a5      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ca:	4b57      	ldr	r3, [pc, #348]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	220c      	movs	r2, #12
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d1ef      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x106>
 80023d6:	e03a      	b.n	800244e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d111      	bne.n	8002404 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	e009      	b.n	80023f6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e2:	f7ff f8cd 	bl	8001580 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <HAL_RCC_ClockConfig+0x274>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e08f      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	220c      	movs	r2, #12
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d1ef      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x132>
 8002402:	e024      	b.n	800244e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d11b      	bne.n	8002444 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800240c:	e009      	b.n	8002422 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240e:	f7ff f8b7 	bl	8001580 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	4a42      	ldr	r2, [pc, #264]	; (8002524 <HAL_RCC_ClockConfig+0x274>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e079      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	220c      	movs	r2, #12
 8002428:	4013      	ands	r3, r2
 800242a:	2b04      	cmp	r3, #4
 800242c:	d1ef      	bne.n	800240e <HAL_RCC_ClockConfig+0x15e>
 800242e:	e00e      	b.n	800244e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7ff f8a6 	bl	8001580 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_RCC_ClockConfig+0x274>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e068      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002444:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	220c      	movs	r2, #12
 800244a:	4013      	ands	r3, r2
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d21e      	bcs.n	800249a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	4393      	bics	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800246e:	f7ff f887 	bl	8001580 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	e009      	b.n	800248c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff f882 	bl	8001580 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	4a28      	ldr	r2, [pc, #160]	; (8002524 <HAL_RCC_ClockConfig+0x274>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e044      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_ClockConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d1ee      	bne.n	8002478 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2204      	movs	r2, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x27c>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2208      	movs	r2, #8
 80024be:	4013      	ands	r3, r2
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HAL_RCC_ClockConfig+0x280>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	00da      	lsls	r2, r3, #3
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024d8:	f000 f832 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024dc:	0001      	movs	r1, r0
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_RCC_ClockConfig+0x278>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	220f      	movs	r2, #15
 80024e6:	4013      	ands	r3, r2
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_RCC_ClockConfig+0x284>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	000a      	movs	r2, r1
 80024ee:	40da      	lsrs	r2, r3
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_RCC_ClockConfig+0x288>)
 80024f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCC_ClockConfig+0x28c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	250b      	movs	r5, #11
 80024fa:	197c      	adds	r4, r7, r5
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7fe fff9 	bl	80014f4 <HAL_InitTick>
 8002502:	0003      	movs	r3, r0
 8002504:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002506:	197b      	adds	r3, r7, r5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800250e:	197b      	adds	r3, r7, r5
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	e000      	b.n	8002516 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b004      	add	sp, #16
 800251c:	bdb0      	pop	{r4, r5, r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40022000 	.word	0x40022000
 8002524:	00001388 	.word	0x00001388
 8002528:	40021000 	.word	0x40021000
 800252c:	fffff8ff 	.word	0xfffff8ff
 8002530:	ffffc7ff 	.word	0xffffc7ff
 8002534:	08004468 	.word	0x08004468
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002546:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCC_GetSysClockFreq+0x138>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	230c      	movs	r3, #12
 8002550:	4013      	ands	r3, r2
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d014      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x40>
 8002556:	d900      	bls.n	800255a <HAL_RCC_GetSysClockFreq+0x1a>
 8002558:	e07b      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x112>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x24>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d00b      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3a>
 8002562:	e076      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002564:	4b44      	ldr	r3, [pc, #272]	; (8002678 <HAL_RCC_GetSysClockFreq+0x138>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2210      	movs	r2, #16
 800256a:	4013      	ands	r3, r2
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002572:	e07c      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002574:	4b42      	ldr	r3, [pc, #264]	; (8002680 <HAL_RCC_GetSysClockFreq+0x140>)
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002578:	e079      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257a:	4b42      	ldr	r3, [pc, #264]	; (8002684 <HAL_RCC_GetSysClockFreq+0x144>)
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800257e:	e076      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	0c9a      	lsrs	r2, r3, #18
 8002584:	230f      	movs	r3, #15
 8002586:	401a      	ands	r2, r3
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_GetSysClockFreq+0x148>)
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	0d9a      	lsrs	r2, r3, #22
 8002592:	2303      	movs	r3, #3
 8002594:	4013      	ands	r3, r2
 8002596:	3301      	adds	r3, #1
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_GetSysClockFreq+0x138>)
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	025b      	lsls	r3, r3, #9
 80025a2:	4013      	ands	r3, r2
 80025a4:	d01a      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	4a35      	ldr	r2, [pc, #212]	; (8002684 <HAL_RCC_GetSysClockFreq+0x144>)
 80025b0:	2300      	movs	r3, #0
 80025b2:	69b8      	ldr	r0, [r7, #24]
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	f7fd fe5b 	bl	8000270 <__aeabi_lmul>
 80025ba:	0002      	movs	r2, r0
 80025bc:	000b      	movs	r3, r1
 80025be:	0010      	movs	r0, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f7fd fe2f 	bl	8000230 <__aeabi_uldivmod>
 80025d2:	0002      	movs	r2, r0
 80025d4:	000b      	movs	r3, r1
 80025d6:	0013      	movs	r3, r2
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	e037      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025dc:	4b26      	ldr	r3, [pc, #152]	; (8002678 <HAL_RCC_GetSysClockFreq+0x138>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	4013      	ands	r3, r2
 80025e4:	d01a      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025f0:	2300      	movs	r3, #0
 80025f2:	68b8      	ldr	r0, [r7, #8]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	f7fd fe3b 	bl	8000270 <__aeabi_lmul>
 80025fa:	0002      	movs	r2, r0
 80025fc:	000b      	movs	r3, r1
 80025fe:	0010      	movs	r0, r2
 8002600:	0019      	movs	r1, r3
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f7fd fe0f 	bl	8000230 <__aeabi_uldivmod>
 8002612:	0002      	movs	r2, r0
 8002614:	000b      	movs	r3, r1
 8002616:	0013      	movs	r3, r2
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
 800261a:	e017      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	0018      	movs	r0, r3
 8002620:	2300      	movs	r3, #0
 8002622:	0019      	movs	r1, r3
 8002624:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_RCC_GetSysClockFreq+0x140>)
 8002626:	2300      	movs	r3, #0
 8002628:	f7fd fe22 	bl	8000270 <__aeabi_lmul>
 800262c:	0002      	movs	r2, r0
 800262e:	000b      	movs	r3, r1
 8002630:	0010      	movs	r0, r2
 8002632:	0019      	movs	r1, r3
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	001c      	movs	r4, r3
 8002638:	2300      	movs	r3, #0
 800263a:	001d      	movs	r5, r3
 800263c:	0022      	movs	r2, r4
 800263e:	002b      	movs	r3, r5
 8002640:	f7fd fdf6 	bl	8000230 <__aeabi_uldivmod>
 8002644:	0002      	movs	r2, r0
 8002646:	000b      	movs	r3, r1
 8002648:	0013      	movs	r3, r2
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002650:	e00d      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_GetSysClockFreq+0x138>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0b5b      	lsrs	r3, r3, #13
 8002658:	2207      	movs	r2, #7
 800265a:	4013      	ands	r3, r2
 800265c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	3301      	adds	r3, #1
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	0212      	lsls	r2, r2, #8
 8002666:	409a      	lsls	r2, r3
 8002668:	0013      	movs	r3, r2
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800266c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	b00e      	add	sp, #56	; 0x38
 8002676:	bdb0      	pop	{r4, r5, r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	003d0900 	.word	0x003d0900
 8002680:	00f42400 	.word	0x00f42400
 8002684:	007a1200 	.word	0x007a1200
 8002688:	08004478 	.word	0x08004478

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002694:	2317      	movs	r3, #23
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2220      	movs	r2, #32
 80026a2:	4013      	ands	r3, r2
 80026a4:	d106      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80026b2:	e104      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b4:	4bb9      	ldr	r3, [pc, #740]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	d10a      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4bb6      	ldr	r3, [pc, #728]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c4:	4bb5      	ldr	r3, [pc, #724]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0549      	lsls	r1, r1, #21
 80026ca:	430a      	orrs	r2, r1
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026ce:	2317      	movs	r3, #23
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4bb2      	ldr	r3, [pc, #712]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	d11a      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4baf      	ldr	r3, [pc, #700]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4bae      	ldr	r3, [pc, #696]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0049      	lsls	r1, r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f0:	f7fe ff46 	bl	8001580 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe ff41 	bl	8001580 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	; 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e143      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4ba4      	ldr	r3, [pc, #656]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d0f0      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002718:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	039b      	lsls	r3, r3, #14
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	23c0      	movs	r3, #192	; 0xc0
 800272a:	039b      	lsls	r3, r3, #14
 800272c:	4013      	ands	r3, r2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d107      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	23c0      	movs	r3, #192	; 0xc0
 800273a:	039b      	lsls	r3, r3, #14
 800273c:	4013      	ands	r3, r2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d013      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	401a      	ands	r2, r3
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	429a      	cmp	r2, r3
 8002754:	d10a      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002756:	4b91      	ldr	r3, [pc, #580]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	029b      	lsls	r3, r3, #10
 800275e:	401a      	ands	r2, r3
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	429a      	cmp	r2, r3
 8002766:	d101      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e113      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800276c:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800276e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d049      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	4013      	ands	r3, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	429a      	cmp	r2, r3
 800278c:	d004      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2220      	movs	r2, #32
 8002794:	4013      	ands	r3, r2
 8002796:	d10d      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d034      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	d02e      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027b4:	4b79      	ldr	r3, [pc, #484]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b8:	4a7a      	ldr	r2, [pc, #488]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027be:	4b77      	ldr	r3, [pc, #476]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0309      	lsls	r1, r1, #12
 80027c8:	430a      	orrs	r2, r1
 80027ca:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027cc:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d0:	4b72      	ldr	r3, [pc, #456]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027d2:	4975      	ldr	r1, [pc, #468]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027d8:	4b70      	ldr	r3, [pc, #448]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d014      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe feca 	bl	8001580 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f0:	e009      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fec5 	bl	8001580 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0c6      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d0ef      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	4013      	ands	r3, r2
 800281c:	d01f      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	401a      	ands	r2, r3
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	429a      	cmp	r2, r3
 800282e:	d10c      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002830:	4b5a      	ldr	r3, [pc, #360]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5e      	ldr	r2, [pc, #376]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	039b      	lsls	r3, r3, #14
 8002842:	401a      	ands	r2, r3
 8002844:	4b55      	ldr	r3, [pc, #340]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800284c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	401a      	ands	r2, r3
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800285a:	430a      	orrs	r2, r1
 800285c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2220      	movs	r2, #32
 8002864:	4013      	ands	r3, r2
 8002866:	d01f      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	23c0      	movs	r3, #192	; 0xc0
 800286e:	029b      	lsls	r3, r3, #10
 8002870:	401a      	ands	r2, r3
 8002872:	23c0      	movs	r3, #192	; 0xc0
 8002874:	029b      	lsls	r3, r3, #10
 8002876:	429a      	cmp	r2, r3
 8002878:	d10c      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800287a:	4b48      	ldr	r3, [pc, #288]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	23c0      	movs	r3, #192	; 0xc0
 800288a:	039b      	lsls	r3, r3, #14
 800288c:	401a      	ands	r2, r3
 800288e:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002896:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	23c0      	movs	r3, #192	; 0xc0
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	401a      	ands	r2, r3
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a8:	2317      	movs	r3, #23
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028b8:	493e      	ldr	r1, [pc, #248]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80028ba:	400a      	ands	r2, r1
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	4013      	ands	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	2203      	movs	r2, #3
 80028ce:	4393      	bics	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2202      	movs	r2, #2
 80028e2:	4013      	ands	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	220c      	movs	r2, #12
 80028ec:	4393      	bics	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028f6:	430a      	orrs	r2, r1
 80028f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2204      	movs	r2, #4
 8002900:	4013      	ands	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002914:	430a      	orrs	r2, r1
 8002916:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2208      	movs	r2, #8
 800291e:	4013      	ands	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002932:	430a      	orrs	r2, r1
 8002934:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4013      	ands	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002948:	4013      	ands	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002952:	430a      	orrs	r2, r1
 8002954:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	4013      	ands	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002970:	430a      	orrs	r2, r1
 8002972:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	4013      	ands	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002984:	4013      	ands	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800298e:	430a      	orrs	r2, r1
 8002990:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b006      	add	sp, #24
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
 80029a4:	fffcffff 	.word	0xfffcffff
 80029a8:	fff7ffff 	.word	0xfff7ffff
 80029ac:	00001388 	.word	0x00001388
 80029b0:	ffcfffff 	.word	0xffcfffff
 80029b4:	efffffff 	.word	0xefffffff
 80029b8:	fffff3ff 	.word	0xfffff3ff
 80029bc:	ffffcfff 	.word	0xffffcfff
 80029c0:	fbffffff 	.word	0xfbffffff
 80029c4:	fff3ffff 	.word	0xfff3ffff

080029c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029c8:	b5b0      	push	{r4, r5, r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029d0:	230f      	movs	r3, #15
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e088      	b.n	8002af4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2221      	movs	r2, #33	; 0x21
 80029e6:	5c9b      	ldrb	r3, [r3, r2]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d107      	bne.n	80029fe <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7fe f81b 	bl	8000a34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2221      	movs	r2, #33	; 0x21
 8002a02:	2102      	movs	r1, #2
 8002a04:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d05f      	beq.n	8002ad4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	22ca      	movs	r2, #202	; 0xca
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2253      	movs	r2, #83	; 0x53
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a24:	250f      	movs	r5, #15
 8002a26:	197c      	adds	r4, r7, r5
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 fa7c 	bl	8002f28 <RTC_EnterInitMode>
 8002a30:	0003      	movs	r3, r0
 8002a32:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002a34:	0028      	movs	r0, r5
 8002a36:	183b      	adds	r3, r7, r0
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d12c      	bne.n	8002a98 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	492c      	ldr	r1, [pc, #176]	; (8002afc <HAL_RTC_Init+0x134>)
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68d2      	ldr	r2, [r2, #12]
 8002a74:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6919      	ldr	r1, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a8a:	183c      	adds	r4, r7, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 fa8e 	bl	8002fb0 <RTC_ExitInitMode>
 8002a94:	0003      	movs	r3, r0
 8002a96:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002a98:	230f      	movs	r3, #15
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d113      	bne.n	8002aca <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2103      	movs	r1, #3
 8002aae:	438a      	bics	r2, r1
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	22ff      	movs	r2, #255	; 0xff
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ad2:	e003      	b.n	8002adc <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002adc:	230f      	movs	r3, #15
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2221      	movs	r2, #33	; 0x21
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002aee:	230f      	movs	r3, #15
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b004      	add	sp, #16
 8002afa:	bdb0      	pop	{r4, r5, r7, pc}
 8002afc:	ff8fffbf 	.word	0xff8fffbf

08002b00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b00:	b5b0      	push	{r4, r5, r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	5c9b      	ldrb	r3, [r3, r2]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_RTC_SetTime+0x1e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e092      	b.n	8002c44 <HAL_RTC_SetTime+0x144>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2221      	movs	r2, #33	; 0x21
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d125      	bne.n	8002b80 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d102      	bne.n	8002b46 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2200      	movs	r2, #0
 8002b44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fa5a 	bl	8003004 <RTC_ByteToBcd2>
 8002b50:	0003      	movs	r3, r0
 8002b52:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 fa53 	bl	8003004 <RTC_ByteToBcd2>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b62:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	789b      	ldrb	r3, [r3, #2]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fa4b 	bl	8003004 <RTC_ByteToBcd2>
 8002b6e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b70:	0022      	movs	r2, r4
 8002b72:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	78db      	ldrb	r3, [r3, #3]
 8002b78:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e017      	b.n	8002bb0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2240      	movs	r2, #64	; 0x40
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d102      	bne.n	8002b92 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b9e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ba4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	78db      	ldrb	r3, [r3, #3]
 8002baa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	22ca      	movs	r2, #202	; 0xca
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2253      	movs	r2, #83	; 0x53
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bc0:	2513      	movs	r5, #19
 8002bc2:	197c      	adds	r4, r7, r5
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 f9ae 	bl	8002f28 <RTC_EnterInitMode>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002bd0:	0028      	movs	r0, r5
 8002bd2:	183b      	adds	r3, r7, r0
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d120      	bne.n	8002c1c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	491a      	ldr	r1, [pc, #104]	; (8002c4c <HAL_RTC_SetTime+0x14c>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4917      	ldr	r1, [pc, #92]	; (8002c50 <HAL_RTC_SetTime+0x150>)
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c0e:	183c      	adds	r4, r7, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f9cc 	bl	8002fb0 <RTC_ExitInitMode>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002c1c:	2313      	movs	r3, #19
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2221      	movs	r2, #33	; 0x21
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	22ff      	movs	r2, #255	; 0xff
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

  return status;
 8002c3e:	2313      	movs	r3, #19
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b006      	add	sp, #24
 8002c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4c:	007f7f7f 	.word	0x007f7f7f
 8002c50:	fffbffff 	.word	0xfffbffff

08002c54 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	045b      	lsls	r3, r3, #17
 8002c76:	0c5a      	lsrs	r2, r3, #17
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <HAL_RTC_GetTime+0xb8>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	223f      	movs	r2, #63	; 0x3f
 8002c90:	4013      	ands	r3, r2
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	227f      	movs	r2, #127	; 0x7f
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	227f      	movs	r2, #127	; 0x7f
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	0d9b      	lsrs	r3, r3, #22
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d11a      	bne.n	8002d02 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 f9b8 	bl	8003046 <RTC_Bcd2ToByte>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	001a      	movs	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f9af 	bl	8003046 <RTC_Bcd2ToByte>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	001a      	movs	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	789b      	ldrb	r3, [r3, #2]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f9a6 	bl	8003046 <RTC_Bcd2ToByte>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b006      	add	sp, #24
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	007f7f7f 	.word	0x007f7f7f

08002d10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d10:	b5b0      	push	{r4, r5, r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_RTC_SetDate+0x1e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e07e      	b.n	8002e2c <HAL_RTC_SetDate+0x11c>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2221      	movs	r2, #33	; 0x21
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10e      	bne.n	8002d62 <HAL_RTC_SetDate+0x52>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	785b      	ldrb	r3, [r3, #1]
 8002d48:	001a      	movs	r2, r3
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d008      	beq.n	8002d62 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	2210      	movs	r2, #16
 8002d56:	4393      	bics	r3, r2
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	330a      	adds	r3, #10
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11c      	bne.n	8002da2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	78db      	ldrb	r3, [r3, #3]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 f949 	bl	8003004 <RTC_ByteToBcd2>
 8002d72:	0003      	movs	r3, r0
 8002d74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f942 	bl	8003004 <RTC_ByteToBcd2>
 8002d80:	0003      	movs	r3, r0
 8002d82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	789b      	ldrb	r3, [r3, #2]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f93a 	bl	8003004 <RTC_ByteToBcd2>
 8002d90:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d92:	0022      	movs	r2, r4
 8002d94:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e00e      	b.n	8002dc0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	78db      	ldrb	r3, [r3, #3]
 8002da6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002dae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002db4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	22ca      	movs	r2, #202	; 0xca
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2253      	movs	r2, #83	; 0x53
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dd0:	2513      	movs	r5, #19
 8002dd2:	197c      	adds	r4, r7, r5
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 f8a6 	bl	8002f28 <RTC_EnterInitMode>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002de0:	0028      	movs	r0, r5
 8002de2:	183b      	adds	r3, r7, r0
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4910      	ldr	r1, [pc, #64]	; (8002e34 <HAL_RTC_SetDate+0x124>)
 8002df2:	400a      	ands	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002df6:	183c      	adds	r4, r7, r0
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 f8d8 	bl	8002fb0 <RTC_ExitInitMode>
 8002e00:	0003      	movs	r3, r0
 8002e02:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002e04:	2313      	movs	r3, #19
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2221      	movs	r2, #33	; 0x21
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	22ff      	movs	r2, #255	; 0xff
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

  return status;
 8002e26:	2313      	movs	r3, #19
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	781b      	ldrb	r3, [r3, #0]
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b006      	add	sp, #24
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}
 8002e34:	00ffff3f 	.word	0x00ffff3f

08002e38 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_RTC_GetDate+0x9c>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	0c1b      	lsrs	r3, r3, #16
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	221f      	movs	r2, #31
 8002e66:	4013      	ands	r3, r2
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	223f      	movs	r2, #63	; 0x3f
 8002e74:	4013      	ands	r3, r2
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	0b5b      	lsrs	r3, r3, #13
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2207      	movs	r2, #7
 8002e84:	4013      	ands	r3, r2
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11a      	bne.n	8002ec8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f8d5 	bl	8003046 <RTC_Bcd2ToByte>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f8cc 	bl	8003046 <RTC_Bcd2ToByte>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	789b      	ldrb	r3, [r3, #2]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f8c3 	bl	8003046 <RTC_Bcd2ToByte>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	00ffff3f 	.word	0x00ffff3f

08002ed8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <HAL_RTC_WaitForSynchro+0x4c>)
 8002eea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eec:	f7fe fb48 	bl	8001580 <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ef6:	f7fe fb43 	bl	8001580 <HAL_GetTick>
 8002efa:	0002      	movs	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	23fa      	movs	r3, #250	; 0xfa
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d901      	bls.n	8002f0c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e006      	b.n	8002f1a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	4013      	ands	r3, r2
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b004      	add	sp, #16
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	0001ff5f 	.word	0x0001ff5f

08002f28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	230f      	movs	r3, #15
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	4013      	ands	r3, r2
 8002f46:	d12c      	bne.n	8002fa2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fb12 	bl	8001580 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f60:	e014      	b.n	8002f8c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f62:	f7fe fb0d 	bl	8001580 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	200f      	movs	r0, #15
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	1839      	adds	r1, r7, r0
 8002f72:	7809      	ldrb	r1, [r1, #0]
 8002f74:	7019      	strb	r1, [r3, #0]
 8002f76:	23fa      	movs	r3, #250	; 0xfa
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d906      	bls.n	8002f8c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2221      	movs	r2, #33	; 0x21
 8002f82:	2104      	movs	r1, #4
 8002f84:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002f86:	183b      	adds	r3, r7, r0
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	4013      	ands	r3, r2
 8002f96:	d104      	bne.n	8002fa2 <RTC_EnterInitMode+0x7a>
 8002f98:	230f      	movs	r3, #15
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d1df      	bne.n	8002f62 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	781b      	ldrb	r3, [r3, #0]
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b004      	add	sp, #16
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	240f      	movs	r4, #15
 8002fba:	193b      	adds	r3, r7, r4
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	438a      	bics	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d10c      	bne.n	8002ff6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff ff7a 	bl	8002ed8 <HAL_RTC_WaitForSynchro>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d006      	beq.n	8002ff6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2221      	movs	r2, #33	; 0x21
 8002fec:	2104      	movs	r1, #4
 8002fee:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b005      	add	sp, #20
 8003002:	bd90      	pop	{r4, r7, pc}

08003004 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	0002      	movs	r2, r0
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003014:	e007      	b.n	8003026 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3301      	adds	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800301c:	1dfb      	adds	r3, r7, #7
 800301e:	1dfa      	adds	r2, r7, #7
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	3a0a      	subs	r2, #10
 8003024:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b09      	cmp	r3, #9
 800302c:	d8f3      	bhi.n	8003016 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	b2da      	uxtb	r2, r3
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	b2db      	uxtb	r3, r3
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}

08003046 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	0002      	movs	r2, r0
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	b2db      	uxtb	r3, r3
 800305e:	001a      	movs	r2, r3
 8003060:	0013      	movs	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	189b      	adds	r3, r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	210f      	movs	r1, #15
 8003074:	400b      	ands	r3, r1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	18d3      	adds	r3, r2, r3
 800307a:	b2db      	uxtb	r3, r3
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e032      	b.n	80030fc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2239      	movs	r2, #57	; 0x39
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2238      	movs	r2, #56	; 0x38
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fd fcd9 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2239      	movs	r2, #57	; 0x39
 80030b6:	2102      	movs	r1, #2
 80030b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f000 fa95 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	223e      	movs	r2, #62	; 0x3e
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223a      	movs	r2, #58	; 0x3a
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	223b      	movs	r2, #59	; 0x3b
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223c      	movs	r2, #60	; 0x3c
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	223d      	movs	r2, #61	; 0x3d
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2239      	movs	r2, #57	; 0x39
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2239      	movs	r2, #57	; 0x39
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e033      	b.n	8003184 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2239      	movs	r2, #57	; 0x39
 8003120:	2102      	movs	r1, #2
 8003122:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	05db      	lsls	r3, r3, #23
 800312c:	429a      	cmp	r2, r3
 800312e:	d00e      	beq.n	800314e <HAL_TIM_Base_Start+0x4a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a15      	ldr	r2, [pc, #84]	; (800318c <HAL_TIM_Base_Start+0x88>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_TIM_Base_Start+0x4a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_Base_Start+0x8c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_Base_Start+0x4a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <HAL_TIM_Base_Start+0x90>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2207      	movs	r2, #7
 8003156:	4013      	ands	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d010      	beq.n	8003182 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2101      	movs	r1, #1
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e007      	b.n	8003182 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	430a      	orrs	r2, r1
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40000400 	.word	0x40000400
 8003190:	40010800 	.word	0x40010800
 8003194:	40011400 	.word	0x40011400

08003198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2239      	movs	r2, #57	; 0x39
 80031a4:	5c9b      	ldrb	r3, [r3, r2]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d001      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e03b      	b.n	8003228 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2239      	movs	r2, #57	; 0x39
 80031b4:	2102      	movs	r1, #2
 80031b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	430a      	orrs	r2, r1
 80031c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x5a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a15      	ldr	r2, [pc, #84]	; (8003230 <HAL_TIM_Base_Start_IT+0x98>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x5a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_TIM_Base_Start_IT+0x9c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x5a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a12      	ldr	r2, [pc, #72]	; (8003238 <HAL_TIM_Base_Start_IT+0xa0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d111      	bne.n	8003216 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2207      	movs	r2, #7
 80031fa:	4013      	ands	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d010      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2101      	movs	r1, #1
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	e007      	b.n	8003226 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b004      	add	sp, #16
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40000400 	.word	0x40000400
 8003234:	40010800 	.word	0x40010800
 8003238:	40011400 	.word	0x40011400

0800323c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d124      	bne.n	800329c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11d      	bne.n	800329c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2203      	movs	r2, #3
 8003266:	4252      	negs	r2, r2
 8003268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2203      	movs	r2, #3
 8003278:	4013      	ands	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0018      	movs	r0, r3
 8003280:	f000 f9a0 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 8003284:	e007      	b.n	8003296 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 f993 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 f99f 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2204      	movs	r2, #4
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d125      	bne.n	80032f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2204      	movs	r2, #4
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d11e      	bne.n	80032f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2205      	movs	r2, #5
 80032be:	4252      	negs	r2, r2
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	23c0      	movs	r3, #192	; 0xc0
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4013      	ands	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f973 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 80032de:	e007      	b.n	80032f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f966 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f972 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2208      	movs	r2, #8
 80032fe:	4013      	ands	r3, r2
 8003300:	2b08      	cmp	r3, #8
 8003302:	d124      	bne.n	800334e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2208      	movs	r2, #8
 800330c:	4013      	ands	r3, r2
 800330e:	2b08      	cmp	r3, #8
 8003310:	d11d      	bne.n	800334e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2209      	movs	r2, #9
 8003318:	4252      	negs	r2, r2
 800331a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	2203      	movs	r2, #3
 800332a:	4013      	ands	r3, r2
 800332c:	d004      	beq.n	8003338 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f947 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 8003336:	e007      	b.n	8003348 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	0018      	movs	r0, r3
 800333c:	f000 f93a 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f946 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2210      	movs	r2, #16
 8003356:	4013      	ands	r3, r2
 8003358:	2b10      	cmp	r3, #16
 800335a:	d125      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2210      	movs	r2, #16
 8003364:	4013      	ands	r3, r2
 8003366:	2b10      	cmp	r3, #16
 8003368:	d11e      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2211      	movs	r2, #17
 8003370:	4252      	negs	r2, r2
 8003372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2208      	movs	r2, #8
 8003378:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	23c0      	movs	r3, #192	; 0xc0
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f91a 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 8003390:	e007      	b.n	80033a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f90d 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f919 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2201      	movs	r2, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10f      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	4013      	ands	r3, r2
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d108      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2202      	movs	r2, #2
 80033ca:	4252      	negs	r2, r2
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7fd fb01 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	4013      	ands	r3, r2
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d10f      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d108      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2241      	movs	r2, #65	; 0x41
 80033f8:	4252      	negs	r2, r2
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f8f0 	bl	80035e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	230f      	movs	r3, #15
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2238      	movs	r2, #56	; 0x38
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIM_ConfigClockSource+0x20>
 8003428:	2302      	movs	r3, #2
 800342a:	e0bc      	b.n	80035a6 <HAL_TIM_ConfigClockSource+0x19a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2238      	movs	r2, #56	; 0x38
 8003430:	2101      	movs	r1, #1
 8003432:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2239      	movs	r2, #57	; 0x39
 8003438:	2102      	movs	r1, #2
 800343a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2277      	movs	r2, #119	; 0x77
 8003448:	4393      	bics	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	0192      	lsls	r2, r2, #6
 8003464:	4293      	cmp	r3, r2
 8003466:	d040      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0xde>
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	0192      	lsls	r2, r2, #6
 800346c:	4293      	cmp	r3, r2
 800346e:	d900      	bls.n	8003472 <HAL_TIM_ConfigClockSource+0x66>
 8003470:	e088      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	0152      	lsls	r2, r2, #5
 8003476:	4293      	cmp	r3, r2
 8003478:	d100      	bne.n	800347c <HAL_TIM_ConfigClockSource+0x70>
 800347a:	e088      	b.n	800358e <HAL_TIM_ConfigClockSource+0x182>
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	0152      	lsls	r2, r2, #5
 8003480:	4293      	cmp	r3, r2
 8003482:	d900      	bls.n	8003486 <HAL_TIM_ConfigClockSource+0x7a>
 8003484:	e07e      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 8003486:	2b70      	cmp	r3, #112	; 0x70
 8003488:	d018      	beq.n	80034bc <HAL_TIM_ConfigClockSource+0xb0>
 800348a:	d900      	bls.n	800348e <HAL_TIM_ConfigClockSource+0x82>
 800348c:	e07a      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 800348e:	2b60      	cmp	r3, #96	; 0x60
 8003490:	d04f      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x126>
 8003492:	d900      	bls.n	8003496 <HAL_TIM_ConfigClockSource+0x8a>
 8003494:	e076      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 8003496:	2b50      	cmp	r3, #80	; 0x50
 8003498:	d03b      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x106>
 800349a:	d900      	bls.n	800349e <HAL_TIM_ConfigClockSource+0x92>
 800349c:	e072      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d057      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x146>
 80034a2:	d900      	bls.n	80034a6 <HAL_TIM_ConfigClockSource+0x9a>
 80034a4:	e06e      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 80034a6:	2b30      	cmp	r3, #48	; 0x30
 80034a8:	d063      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x166>
 80034aa:	d86b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d060      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x166>
 80034b0:	d868      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d05d      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x166>
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d05b      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x166>
 80034ba:	e063      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034cc:	f000 f96a 	bl	80037a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2277      	movs	r2, #119	; 0x77
 80034dc:	4313      	orrs	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	609a      	str	r2, [r3, #8]
      break;
 80034e8:	e052      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fa:	f000 f953 	bl	80037a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	01c9      	lsls	r1, r1, #7
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
      break;
 8003510:	e03e      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	001a      	movs	r2, r3
 8003520:	f000 f8c6 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2150      	movs	r1, #80	; 0x50
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f920 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 8003530:	e02e      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800353e:	001a      	movs	r2, r3
 8003540:	f000 f8e4 	bl	800370c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2160      	movs	r1, #96	; 0x60
 800354a:	0018      	movs	r0, r3
 800354c:	f000 f910 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 8003550:	e01e      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355e:	001a      	movs	r2, r3
 8003560:	f000 f8a6 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f900 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 8003570:	e00e      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0019      	movs	r1, r3
 800357c:	0010      	movs	r0, r2
 800357e:	f000 f8f7 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 8003582:	e005      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003584:	230f      	movs	r3, #15
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
      break;
 800358c:	e000      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800358e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2239      	movs	r2, #57	; 0x39
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2238      	movs	r2, #56	; 0x38
 800359c:	2100      	movs	r1, #0
 800359e:	5499      	strb	r1, [r3, r2]

  return status;
 80035a0:	230f      	movs	r3, #15
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	781b      	ldrb	r3, [r3, #0]
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	ffff00ff 	.word	0xffff00ff

080035b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	05db      	lsls	r3, r3, #23
 800360a:	429a      	cmp	r2, r3
 800360c:	d00b      	beq.n	8003626 <TIM_Base_SetConfig+0x32>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <TIM_Base_SetConfig+0xac>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_Base_SetConfig+0x32>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <TIM_Base_SetConfig+0xb0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_Base_SetConfig+0x32>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <TIM_Base_SetConfig+0xb4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2270      	movs	r2, #112	; 0x70
 800362a:	4393      	bics	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	05db      	lsls	r3, r3, #23
 800363e:	429a      	cmp	r2, r3
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x66>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <TIM_Base_SetConfig+0xac>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x66>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <TIM_Base_SetConfig+0xb0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x66>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <TIM_Base_SetConfig+0xb4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <TIM_Base_SetConfig+0xb8>)
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	4393      	bics	r3, r2
 8003672:	001a      	movs	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	615a      	str	r2, [r3, #20]
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40010800 	.word	0x40010800
 80036a8:	40011400 	.word	0x40011400
 80036ac:	fffffcff 	.word	0xfffffcff

080036b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	2201      	movs	r2, #1
 80036c8:	4393      	bics	r3, r2
 80036ca:	001a      	movs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	22f0      	movs	r2, #240	; 0xf0
 80036da:	4393      	bics	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	220a      	movs	r2, #10
 80036ec:	4393      	bics	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b006      	add	sp, #24
 800370a:	bd80      	pop	{r7, pc}

0800370c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	2210      	movs	r2, #16
 800371e:	4393      	bics	r3, r2
 8003720:	001a      	movs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <TIM_TI2_ConfigInputStage+0x60>)
 8003736:	4013      	ands	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	031b      	lsls	r3, r3, #12
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	22a0      	movs	r2, #160	; 0xa0
 8003748:	4393      	bics	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b006      	add	sp, #24
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	ffff0fff 	.word	0xffff0fff

08003770 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2270      	movs	r2, #112	; 0x70
 8003784:	4393      	bics	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	2207      	movs	r2, #7
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	609a      	str	r2, [r3, #8]
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b004      	add	sp, #16
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <TIM_ETR_SetConfig+0x3c>)
 80037bc:	4013      	ands	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	021a      	lsls	r2, r3, #8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b006      	add	sp, #24
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	ffff00ff 	.word	0xffff00ff

080037e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2238      	movs	r2, #56	; 0x38
 80037f2:	5c9b      	ldrb	r3, [r3, r2]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e047      	b.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2238      	movs	r2, #56	; 0x38
 8003800:	2101      	movs	r1, #1
 8003802:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2239      	movs	r2, #57	; 0x39
 8003808:	2102      	movs	r1, #2
 800380a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2270      	movs	r2, #112	; 0x70
 8003820:	4393      	bics	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	05db      	lsls	r3, r3, #23
 800383e:	429a      	cmp	r2, r3
 8003840:	d00e      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a11      	ldr	r2, [pc, #68]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10c      	bne.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	4393      	bics	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2239      	movs	r2, #57	; 0x39
 800387e:	2101      	movs	r1, #1
 8003880:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2238      	movs	r2, #56	; 0x38
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b004      	add	sp, #16
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40000400 	.word	0x40000400
 8003898:	40010800 	.word	0x40010800
 800389c:	40011400 	.word	0x40011400

080038a0 <findslot>:
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <findslot+0x2c>)
 80038a2:	b510      	push	{r4, lr}
 80038a4:	0004      	movs	r4, r0
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d004      	beq.n	80038b6 <findslot+0x16>
 80038ac:	6a03      	ldr	r3, [r0, #32]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <findslot+0x16>
 80038b2:	f000 fbb1 	bl	8004018 <__sinit>
 80038b6:	2000      	movs	r0, #0
 80038b8:	2c13      	cmp	r4, #19
 80038ba:	d805      	bhi.n	80038c8 <findslot+0x28>
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <findslot+0x30>)
 80038be:	00e4      	lsls	r4, r4, #3
 80038c0:	58e2      	ldr	r2, [r4, r3]
 80038c2:	3201      	adds	r2, #1
 80038c4:	d000      	beq.n	80038c8 <findslot+0x28>
 80038c6:	18e0      	adds	r0, r4, r3
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	2000006c 	.word	0x2000006c
 80038d0:	20000158 	.word	0x20000158

080038d4 <error>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	0004      	movs	r4, r0
 80038d8:	f000 fc86 	bl	80041e8 <__errno>
 80038dc:	2613      	movs	r6, #19
 80038de:	0005      	movs	r5, r0
 80038e0:	2700      	movs	r7, #0
 80038e2:	1c30      	adds	r0, r6, #0
 80038e4:	1c39      	adds	r1, r7, #0
 80038e6:	beab      	bkpt	0x00ab
 80038e8:	1c06      	adds	r6, r0, #0
 80038ea:	602e      	str	r6, [r5, #0]
 80038ec:	0020      	movs	r0, r4
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038f0 <checkerror>:
 80038f0:	b510      	push	{r4, lr}
 80038f2:	1c43      	adds	r3, r0, #1
 80038f4:	d101      	bne.n	80038fa <checkerror+0xa>
 80038f6:	f7ff ffed 	bl	80038d4 <error>
 80038fa:	bd10      	pop	{r4, pc}

080038fc <_swiread>:
 80038fc:	b530      	push	{r4, r5, lr}
 80038fe:	b085      	sub	sp, #20
 8003900:	ad01      	add	r5, sp, #4
 8003902:	9001      	str	r0, [sp, #4]
 8003904:	9102      	str	r1, [sp, #8]
 8003906:	9203      	str	r2, [sp, #12]
 8003908:	2406      	movs	r4, #6
 800390a:	1c20      	adds	r0, r4, #0
 800390c:	1c29      	adds	r1, r5, #0
 800390e:	beab      	bkpt	0x00ab
 8003910:	1c04      	adds	r4, r0, #0
 8003912:	0020      	movs	r0, r4
 8003914:	f7ff ffec 	bl	80038f0 <checkerror>
 8003918:	b005      	add	sp, #20
 800391a:	bd30      	pop	{r4, r5, pc}

0800391c <_read>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	000e      	movs	r6, r1
 8003920:	0015      	movs	r5, r2
 8003922:	f7ff ffbd 	bl	80038a0 <findslot>
 8003926:	1e04      	subs	r4, r0, #0
 8003928:	d106      	bne.n	8003938 <_read+0x1c>
 800392a:	f000 fc5d 	bl	80041e8 <__errno>
 800392e:	2309      	movs	r3, #9
 8003930:	6003      	str	r3, [r0, #0]
 8003932:	2001      	movs	r0, #1
 8003934:	4240      	negs	r0, r0
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	002a      	movs	r2, r5
 800393a:	0031      	movs	r1, r6
 800393c:	6800      	ldr	r0, [r0, #0]
 800393e:	f7ff ffdd 	bl	80038fc <_swiread>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d0f7      	beq.n	8003936 <_read+0x1a>
 8003946:	6863      	ldr	r3, [r4, #4]
 8003948:	1a28      	subs	r0, r5, r0
 800394a:	181b      	adds	r3, r3, r0
 800394c:	6063      	str	r3, [r4, #4]
 800394e:	e7f2      	b.n	8003936 <_read+0x1a>

08003950 <_swilseek>:
 8003950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003952:	000c      	movs	r4, r1
 8003954:	0016      	movs	r6, r2
 8003956:	f7ff ffa3 	bl	80038a0 <findslot>
 800395a:	1e05      	subs	r5, r0, #0
 800395c:	d107      	bne.n	800396e <_swilseek+0x1e>
 800395e:	f000 fc43 	bl	80041e8 <__errno>
 8003962:	2309      	movs	r3, #9
 8003964:	6003      	str	r3, [r0, #0]
 8003966:	2401      	movs	r4, #1
 8003968:	4264      	negs	r4, r4
 800396a:	0020      	movs	r0, r4
 800396c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800396e:	2e02      	cmp	r6, #2
 8003970:	d903      	bls.n	800397a <_swilseek+0x2a>
 8003972:	f000 fc39 	bl	80041e8 <__errno>
 8003976:	2316      	movs	r3, #22
 8003978:	e7f4      	b.n	8003964 <_swilseek+0x14>
 800397a:	2e01      	cmp	r6, #1
 800397c:	d112      	bne.n	80039a4 <_swilseek+0x54>
 800397e:	6843      	ldr	r3, [r0, #4]
 8003980:	18e4      	adds	r4, r4, r3
 8003982:	d4f6      	bmi.n	8003972 <_swilseek+0x22>
 8003984:	466f      	mov	r7, sp
 8003986:	682b      	ldr	r3, [r5, #0]
 8003988:	260a      	movs	r6, #10
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	607c      	str	r4, [r7, #4]
 800398e:	1c30      	adds	r0, r6, #0
 8003990:	1c39      	adds	r1, r7, #0
 8003992:	beab      	bkpt	0x00ab
 8003994:	1c06      	adds	r6, r0, #0
 8003996:	0030      	movs	r0, r6
 8003998:	f7ff ffaa 	bl	80038f0 <checkerror>
 800399c:	2800      	cmp	r0, #0
 800399e:	dbe2      	blt.n	8003966 <_swilseek+0x16>
 80039a0:	606c      	str	r4, [r5, #4]
 80039a2:	e7e2      	b.n	800396a <_swilseek+0x1a>
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	2e02      	cmp	r6, #2
 80039a8:	d1ec      	bne.n	8003984 <_swilseek+0x34>
 80039aa:	466f      	mov	r7, sp
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	360a      	adds	r6, #10
 80039b0:	1c30      	adds	r0, r6, #0
 80039b2:	1c39      	adds	r1, r7, #0
 80039b4:	beab      	bkpt	0x00ab
 80039b6:	1c06      	adds	r6, r0, #0
 80039b8:	0030      	movs	r0, r6
 80039ba:	f7ff ff99 	bl	80038f0 <checkerror>
 80039be:	1824      	adds	r4, r4, r0
 80039c0:	3001      	adds	r0, #1
 80039c2:	d1df      	bne.n	8003984 <_swilseek+0x34>
 80039c4:	e7cf      	b.n	8003966 <_swilseek+0x16>

080039c6 <_lseek>:
 80039c6:	b510      	push	{r4, lr}
 80039c8:	f7ff ffc2 	bl	8003950 <_swilseek>
 80039cc:	bd10      	pop	{r4, pc}

080039ce <_swiwrite>:
 80039ce:	b530      	push	{r4, r5, lr}
 80039d0:	b085      	sub	sp, #20
 80039d2:	ad01      	add	r5, sp, #4
 80039d4:	9001      	str	r0, [sp, #4]
 80039d6:	9102      	str	r1, [sp, #8]
 80039d8:	9203      	str	r2, [sp, #12]
 80039da:	2405      	movs	r4, #5
 80039dc:	1c20      	adds	r0, r4, #0
 80039de:	1c29      	adds	r1, r5, #0
 80039e0:	beab      	bkpt	0x00ab
 80039e2:	1c04      	adds	r4, r0, #0
 80039e4:	0020      	movs	r0, r4
 80039e6:	f7ff ff83 	bl	80038f0 <checkerror>
 80039ea:	b005      	add	sp, #20
 80039ec:	bd30      	pop	{r4, r5, pc}

080039ee <_write>:
 80039ee:	b570      	push	{r4, r5, r6, lr}
 80039f0:	000e      	movs	r6, r1
 80039f2:	0015      	movs	r5, r2
 80039f4:	f7ff ff54 	bl	80038a0 <findslot>
 80039f8:	1e04      	subs	r4, r0, #0
 80039fa:	d106      	bne.n	8003a0a <_write+0x1c>
 80039fc:	f000 fbf4 	bl	80041e8 <__errno>
 8003a00:	2309      	movs	r3, #9
 8003a02:	6003      	str	r3, [r0, #0]
 8003a04:	2001      	movs	r0, #1
 8003a06:	4240      	negs	r0, r0
 8003a08:	e00f      	b.n	8003a2a <_write+0x3c>
 8003a0a:	002a      	movs	r2, r5
 8003a0c:	0031      	movs	r1, r6
 8003a0e:	6800      	ldr	r0, [r0, #0]
 8003a10:	f7ff ffdd 	bl	80039ce <_swiwrite>
 8003a14:	1e03      	subs	r3, r0, #0
 8003a16:	dbf5      	blt.n	8003a04 <_write+0x16>
 8003a18:	6862      	ldr	r2, [r4, #4]
 8003a1a:	1a28      	subs	r0, r5, r0
 8003a1c:	1812      	adds	r2, r2, r0
 8003a1e:	6062      	str	r2, [r4, #4]
 8003a20:	42ab      	cmp	r3, r5
 8003a22:	d102      	bne.n	8003a2a <_write+0x3c>
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7ff ff55 	bl	80038d4 <error>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}

08003a2c <_swiclose>:
 8003a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a2e:	2402      	movs	r4, #2
 8003a30:	9001      	str	r0, [sp, #4]
 8003a32:	ad01      	add	r5, sp, #4
 8003a34:	1c20      	adds	r0, r4, #0
 8003a36:	1c29      	adds	r1, r5, #0
 8003a38:	beab      	bkpt	0x00ab
 8003a3a:	1c04      	adds	r4, r0, #0
 8003a3c:	0020      	movs	r0, r4
 8003a3e:	f7ff ff57 	bl	80038f0 <checkerror>
 8003a42:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08003a44 <_close>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	0005      	movs	r5, r0
 8003a48:	f7ff ff2a 	bl	80038a0 <findslot>
 8003a4c:	1e04      	subs	r4, r0, #0
 8003a4e:	d106      	bne.n	8003a5e <_close+0x1a>
 8003a50:	f000 fbca 	bl	80041e8 <__errno>
 8003a54:	2309      	movs	r3, #9
 8003a56:	6003      	str	r3, [r0, #0]
 8003a58:	2001      	movs	r0, #1
 8003a5a:	4240      	negs	r0, r0
 8003a5c:	bd70      	pop	{r4, r5, r6, pc}
 8003a5e:	3d01      	subs	r5, #1
 8003a60:	2d01      	cmp	r5, #1
 8003a62:	d809      	bhi.n	8003a78 <_close+0x34>
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <_close+0x48>)
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d104      	bne.n	8003a78 <_close+0x34>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	425b      	negs	r3, r3
 8003a72:	6003      	str	r3, [r0, #0]
 8003a74:	2000      	movs	r0, #0
 8003a76:	e7f1      	b.n	8003a5c <_close+0x18>
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	f7ff ffd7 	bl	8003a2c <_swiclose>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d1ec      	bne.n	8003a5c <_close+0x18>
 8003a82:	2301      	movs	r3, #1
 8003a84:	425b      	negs	r3, r3
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	e7e8      	b.n	8003a5c <_close+0x18>
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	20000158 	.word	0x20000158

08003a90 <_swistat>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	000c      	movs	r4, r1
 8003a94:	f7ff ff04 	bl	80038a0 <findslot>
 8003a98:	1e05      	subs	r5, r0, #0
 8003a9a:	d106      	bne.n	8003aaa <_swistat+0x1a>
 8003a9c:	f000 fba4 	bl	80041e8 <__errno>
 8003aa0:	2309      	movs	r3, #9
 8003aa2:	6003      	str	r3, [r0, #0]
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	4240      	negs	r0, r0
 8003aa8:	bd70      	pop	{r4, r5, r6, pc}
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	6862      	ldr	r2, [r4, #4]
 8003aae:	019b      	lsls	r3, r3, #6
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	6063      	str	r3, [r4, #4]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	260c      	movs	r6, #12
 8003aba:	64a3      	str	r3, [r4, #72]	; 0x48
 8003abc:	1c30      	adds	r0, r6, #0
 8003abe:	1c29      	adds	r1, r5, #0
 8003ac0:	beab      	bkpt	0x00ab
 8003ac2:	1c05      	adds	r5, r0, #0
 8003ac4:	0028      	movs	r0, r5
 8003ac6:	f7ff ff13 	bl	80038f0 <checkerror>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d0ec      	beq.n	8003aa8 <_swistat+0x18>
 8003ace:	6120      	str	r0, [r4, #16]
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e7e9      	b.n	8003aa8 <_swistat+0x18>

08003ad4 <_stat>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	000d      	movs	r5, r1
 8003ad8:	0004      	movs	r4, r0
 8003ada:	2258      	movs	r2, #88	; 0x58
 8003adc:	2100      	movs	r1, #0
 8003ade:	0028      	movs	r0, r5
 8003ae0:	f000 fb1a 	bl	8004118 <memset>
 8003ae4:	0020      	movs	r0, r4
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f000 f812 	bl	8003b10 <_swiopen>
 8003aec:	0004      	movs	r4, r0
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d00c      	beq.n	8003b0c <_stat+0x38>
 8003af2:	2381      	movs	r3, #129	; 0x81
 8003af4:	686a      	ldr	r2, [r5, #4]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4313      	orrs	r3, r2
 8003afa:	0029      	movs	r1, r5
 8003afc:	606b      	str	r3, [r5, #4]
 8003afe:	f7ff ffc7 	bl	8003a90 <_swistat>
 8003b02:	0005      	movs	r5, r0
 8003b04:	0020      	movs	r0, r4
 8003b06:	f7ff ff9d 	bl	8003a44 <_close>
 8003b0a:	002c      	movs	r4, r5
 8003b0c:	0020      	movs	r0, r4
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}

08003b10 <_swiopen>:
 8003b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b12:	000d      	movs	r5, r1
 8003b14:	2600      	movs	r6, #0
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <_swiopen+0xb4>)
 8003b18:	b09b      	sub	sp, #108	; 0x6c
 8003b1a:	9001      	str	r0, [sp, #4]
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	00f3      	lsls	r3, r6, #3
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	9b02      	ldr	r3, [sp, #8]
 8003b24:	00f2      	lsls	r2, r6, #3
 8003b26:	589c      	ldr	r4, [r3, r2]
 8003b28:	1c63      	adds	r3, r4, #1
 8003b2a:	d036      	beq.n	8003b9a <_swiopen+0x8a>
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	2e14      	cmp	r6, #20
 8003b30:	d1f5      	bne.n	8003b1e <_swiopen+0xe>
 8003b32:	f000 fb59 	bl	80041e8 <__errno>
 8003b36:	2401      	movs	r4, #1
 8003b38:	2318      	movs	r3, #24
 8003b3a:	4264      	negs	r4, r4
 8003b3c:	6003      	str	r3, [r0, #0]
 8003b3e:	e03d      	b.n	8003bbc <_swiopen+0xac>
 8003b40:	2302      	movs	r3, #2
 8003b42:	03ec      	lsls	r4, r5, #15
 8003b44:	0fe4      	lsrs	r4, r4, #31
 8003b46:	421d      	tst	r5, r3
 8003b48:	d000      	beq.n	8003b4c <_swiopen+0x3c>
 8003b4a:	431c      	orrs	r4, r3
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <_swiopen+0xb8>)
 8003b4e:	421d      	tst	r5, r3
 8003b50:	d001      	beq.n	8003b56 <_swiopen+0x46>
 8003b52:	2304      	movs	r3, #4
 8003b54:	431c      	orrs	r4, r3
 8003b56:	2308      	movs	r3, #8
 8003b58:	421d      	tst	r5, r3
 8003b5a:	d002      	beq.n	8003b62 <_swiopen+0x52>
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	4394      	bics	r4, r2
 8003b60:	431c      	orrs	r4, r3
 8003b62:	9b01      	ldr	r3, [sp, #4]
 8003b64:	0018      	movs	r0, r3
 8003b66:	9304      	str	r3, [sp, #16]
 8003b68:	f7fc face 	bl	8000108 <strlen>
 8003b6c:	607c      	str	r4, [r7, #4]
 8003b6e:	60b8      	str	r0, [r7, #8]
 8003b70:	2401      	movs	r4, #1
 8003b72:	1c20      	adds	r0, r4, #0
 8003b74:	1c39      	adds	r1, r7, #0
 8003b76:	beab      	bkpt	0x00ab
 8003b78:	1c04      	adds	r4, r0, #0
 8003b7a:	2c00      	cmp	r4, #0
 8003b7c:	db08      	blt.n	8003b90 <_swiopen+0x80>
 8003b7e:	00f2      	lsls	r2, r6, #3
 8003b80:	9b02      	ldr	r3, [sp, #8]
 8003b82:	4694      	mov	ip, r2
 8003b84:	509c      	str	r4, [r3, r2]
 8003b86:	2200      	movs	r2, #0
 8003b88:	4463      	add	r3, ip
 8003b8a:	0034      	movs	r4, r6
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e015      	b.n	8003bbc <_swiopen+0xac>
 8003b90:	0020      	movs	r0, r4
 8003b92:	f7ff fe9f 	bl	80038d4 <error>
 8003b96:	0004      	movs	r4, r0
 8003b98:	e010      	b.n	8003bbc <_swiopen+0xac>
 8003b9a:	23a0      	movs	r3, #160	; 0xa0
 8003b9c:	002a      	movs	r2, r5
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	401a      	ands	r2, r3
 8003ba2:	af04      	add	r7, sp, #16
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1cb      	bne.n	8003b40 <_swiopen+0x30>
 8003ba8:	0039      	movs	r1, r7
 8003baa:	9801      	ldr	r0, [sp, #4]
 8003bac:	f7ff ff92 	bl	8003ad4 <_stat>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d0c5      	beq.n	8003b40 <_swiopen+0x30>
 8003bb4:	f000 fb18 	bl	80041e8 <__errno>
 8003bb8:	2311      	movs	r3, #17
 8003bba:	6003      	str	r3, [r0, #0]
 8003bbc:	0020      	movs	r0, r4
 8003bbe:	b01b      	add	sp, #108	; 0x6c
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	20000158 	.word	0x20000158
 8003bc8:	00000601 	.word	0x00000601

08003bcc <_get_semihosting_exts>:
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	9000      	str	r0, [sp, #0]
 8003bd2:	9101      	str	r1, [sp, #4]
 8003bd4:	4827      	ldr	r0, [pc, #156]	; (8003c74 <_get_semihosting_exts+0xa8>)
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	0015      	movs	r5, r2
 8003bda:	f7ff ff99 	bl	8003b10 <_swiopen>
 8003bde:	0004      	movs	r4, r0
 8003be0:	002a      	movs	r2, r5
 8003be2:	2100      	movs	r1, #0
 8003be4:	9800      	ldr	r0, [sp, #0]
 8003be6:	f000 fa97 	bl	8004118 <memset>
 8003bea:	1c63      	adds	r3, r4, #1
 8003bec:	d015      	beq.n	8003c1a <_get_semihosting_exts+0x4e>
 8003bee:	0020      	movs	r0, r4
 8003bf0:	f7ff fe56 	bl	80038a0 <findslot>
 8003bf4:	260c      	movs	r6, #12
 8003bf6:	0007      	movs	r7, r0
 8003bf8:	1c30      	adds	r0, r6, #0
 8003bfa:	1c39      	adds	r1, r7, #0
 8003bfc:	beab      	bkpt	0x00ab
 8003bfe:	1c06      	adds	r6, r0, #0
 8003c00:	0030      	movs	r0, r6
 8003c02:	f7ff fe75 	bl	80038f0 <checkerror>
 8003c06:	2803      	cmp	r0, #3
 8003c08:	dd02      	ble.n	8003c10 <_get_semihosting_exts+0x44>
 8003c0a:	3803      	subs	r0, #3
 8003c0c:	42a8      	cmp	r0, r5
 8003c0e:	dc07      	bgt.n	8003c20 <_get_semihosting_exts+0x54>
 8003c10:	0020      	movs	r0, r4
 8003c12:	2401      	movs	r4, #1
 8003c14:	f7ff ff16 	bl	8003a44 <_close>
 8003c18:	4264      	negs	r4, r4
 8003c1a:	0020      	movs	r0, r4
 8003c1c:	b005      	add	sp, #20
 8003c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c20:	ae03      	add	r6, sp, #12
 8003c22:	2204      	movs	r2, #4
 8003c24:	0031      	movs	r1, r6
 8003c26:	0020      	movs	r0, r4
 8003c28:	f7ff fe78 	bl	800391c <_read>
 8003c2c:	2803      	cmp	r0, #3
 8003c2e:	ddef      	ble.n	8003c10 <_get_semihosting_exts+0x44>
 8003c30:	7833      	ldrb	r3, [r6, #0]
 8003c32:	2b53      	cmp	r3, #83	; 0x53
 8003c34:	d1ec      	bne.n	8003c10 <_get_semihosting_exts+0x44>
 8003c36:	7873      	ldrb	r3, [r6, #1]
 8003c38:	2b48      	cmp	r3, #72	; 0x48
 8003c3a:	d1e9      	bne.n	8003c10 <_get_semihosting_exts+0x44>
 8003c3c:	78b3      	ldrb	r3, [r6, #2]
 8003c3e:	2b46      	cmp	r3, #70	; 0x46
 8003c40:	d1e6      	bne.n	8003c10 <_get_semihosting_exts+0x44>
 8003c42:	78f3      	ldrb	r3, [r6, #3]
 8003c44:	2b42      	cmp	r3, #66	; 0x42
 8003c46:	d1e3      	bne.n	8003c10 <_get_semihosting_exts+0x44>
 8003c48:	2201      	movs	r2, #1
 8003c4a:	0020      	movs	r0, r4
 8003c4c:	9901      	ldr	r1, [sp, #4]
 8003c4e:	f7ff fe7f 	bl	8003950 <_swilseek>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	dbdc      	blt.n	8003c10 <_get_semihosting_exts+0x44>
 8003c56:	002a      	movs	r2, r5
 8003c58:	9900      	ldr	r1, [sp, #0]
 8003c5a:	0020      	movs	r0, r4
 8003c5c:	f7ff fe5e 	bl	800391c <_read>
 8003c60:	0005      	movs	r5, r0
 8003c62:	0020      	movs	r0, r4
 8003c64:	f7ff feee 	bl	8003a44 <_close>
 8003c68:	0028      	movs	r0, r5
 8003c6a:	f7ff fe41 	bl	80038f0 <checkerror>
 8003c6e:	0004      	movs	r4, r0
 8003c70:	e7d3      	b.n	8003c1a <_get_semihosting_exts+0x4e>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	080044ac 	.word	0x080044ac

08003c78 <initialise_semihosting_exts>:
 8003c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c7a:	2401      	movs	r4, #1
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4e09      	ldr	r6, [pc, #36]	; (8003ca4 <initialise_semihosting_exts+0x2c>)
 8003c80:	4d09      	ldr	r5, [pc, #36]	; (8003ca8 <initialise_semihosting_exts+0x30>)
 8003c82:	af01      	add	r7, sp, #4
 8003c84:	0022      	movs	r2, r4
 8003c86:	0038      	movs	r0, r7
 8003c88:	6031      	str	r1, [r6, #0]
 8003c8a:	602c      	str	r4, [r5, #0]
 8003c8c:	f7ff ff9e 	bl	8003bcc <_get_semihosting_exts>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	dd05      	ble.n	8003ca0 <initialise_semihosting_exts+0x28>
 8003c94:	2202      	movs	r2, #2
 8003c96:	783b      	ldrb	r3, [r7, #0]
 8003c98:	401c      	ands	r4, r3
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	6034      	str	r4, [r6, #0]
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	20000010 	.word	0x20000010

08003cac <_has_ext_stdout_stderr>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	4c04      	ldr	r4, [pc, #16]	; (8003cc0 <_has_ext_stdout_stderr+0x14>)
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da01      	bge.n	8003cba <_has_ext_stdout_stderr+0xe>
 8003cb6:	f7ff ffdf 	bl	8003c78 <initialise_semihosting_exts>
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <initialise_monitor_handles>:
 8003cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc6:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <initialise_monitor_handles+0xa4>)
 8003cc8:	b087      	sub	sp, #28
 8003cca:	9303      	str	r3, [sp, #12]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	ac03      	add	r4, sp, #12
 8003cd4:	60a3      	str	r3, [r4, #8]
 8003cd6:	2601      	movs	r6, #1
 8003cd8:	6065      	str	r5, [r4, #4]
 8003cda:	1c30      	adds	r0, r6, #0
 8003cdc:	1c21      	adds	r1, r4, #0
 8003cde:	beab      	bkpt	0x00ab
 8003ce0:	1c06      	adds	r6, r0, #0
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <initialise_monitor_handles+0xa8>)
 8003ce6:	4249      	negs	r1, r1
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	601e      	str	r6, [r3, #0]
 8003cec:	002b      	movs	r3, r5
 8003cee:	4d20      	ldr	r5, [pc, #128]	; (8003d70 <initialise_monitor_handles+0xac>)
 8003cf0:	00da      	lsls	r2, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	50a9      	str	r1, [r5, r2]
 8003cf6:	2b14      	cmp	r3, #20
 8003cf8:	d1fa      	bne.n	8003cf0 <initialise_monitor_handles+0x2c>
 8003cfa:	f7ff ffd7 	bl	8003cac <_has_ext_stdout_stderr>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d018      	beq.n	8003d34 <initialise_monitor_handles+0x70>
 8003d02:	9b00      	ldr	r3, [sp, #0]
 8003d04:	2601      	movs	r6, #1
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	2303      	movs	r3, #3
 8003d0a:	60a3      	str	r3, [r4, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	6063      	str	r3, [r4, #4]
 8003d10:	1c30      	adds	r0, r6, #0
 8003d12:	1c21      	adds	r1, r4, #0
 8003d14:	beab      	bkpt	0x00ab
 8003d16:	1c07      	adds	r7, r0, #0
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <initialise_monitor_handles+0xb0>)
 8003d1a:	9a00      	ldr	r2, [sp, #0]
 8003d1c:	601f      	str	r7, [r3, #0]
 8003d1e:	2303      	movs	r3, #3
 8003d20:	9203      	str	r2, [sp, #12]
 8003d22:	60a3      	str	r3, [r4, #8]
 8003d24:	3305      	adds	r3, #5
 8003d26:	6063      	str	r3, [r4, #4]
 8003d28:	1c30      	adds	r0, r6, #0
 8003d2a:	1c21      	adds	r1, r4, #0
 8003d2c:	beab      	bkpt	0x00ab
 8003d2e:	1c06      	adds	r6, r0, #0
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <initialise_monitor_handles+0xb4>)
 8003d32:	601e      	str	r6, [r3, #0]
 8003d34:	4e10      	ldr	r6, [pc, #64]	; (8003d78 <initialise_monitor_handles+0xb4>)
 8003d36:	6833      	ldr	r3, [r6, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	d102      	bne.n	8003d42 <initialise_monitor_handles+0x7e>
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <initialise_monitor_handles+0xb0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6033      	str	r3, [r6, #0]
 8003d42:	2400      	movs	r4, #0
 8003d44:	9b01      	ldr	r3, [sp, #4]
 8003d46:	606c      	str	r4, [r5, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	602b      	str	r3, [r5, #0]
 8003d4c:	f7ff ffae 	bl	8003cac <_has_ext_stdout_stderr>
 8003d50:	42a0      	cmp	r0, r4
 8003d52:	d006      	beq.n	8003d62 <initialise_monitor_handles+0x9e>
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <initialise_monitor_handles+0xb0>)
 8003d56:	60ec      	str	r4, [r5, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	616c      	str	r4, [r5, #20]
 8003d5c:	60ab      	str	r3, [r5, #8]
 8003d5e:	6833      	ldr	r3, [r6, #0]
 8003d60:	612b      	str	r3, [r5, #16]
 8003d62:	b007      	add	sp, #28
 8003d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	080044c2 	.word	0x080044c2
 8003d6c:	20000150 	.word	0x20000150
 8003d70:	20000158 	.word	0x20000158
 8003d74:	20000154 	.word	0x20000154
 8003d78:	2000014c 	.word	0x2000014c

08003d7c <malloc>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <malloc+0x10>)
 8003d80:	0001      	movs	r1, r0
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	f000 f826 	bl	8003dd4 <_malloc_r>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	2000006c 	.word	0x2000006c

08003d90 <sbrk_aligned>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	4e0f      	ldr	r6, [pc, #60]	; (8003dd0 <sbrk_aligned+0x40>)
 8003d94:	000d      	movs	r5, r1
 8003d96:	6831      	ldr	r1, [r6, #0]
 8003d98:	0004      	movs	r4, r0
 8003d9a:	2900      	cmp	r1, #0
 8003d9c:	d102      	bne.n	8003da4 <sbrk_aligned+0x14>
 8003d9e:	f000 f9fd 	bl	800419c <_sbrk_r>
 8003da2:	6030      	str	r0, [r6, #0]
 8003da4:	0029      	movs	r1, r5
 8003da6:	0020      	movs	r0, r4
 8003da8:	f000 f9f8 	bl	800419c <_sbrk_r>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d00a      	beq.n	8003dc6 <sbrk_aligned+0x36>
 8003db0:	2303      	movs	r3, #3
 8003db2:	1cc5      	adds	r5, r0, #3
 8003db4:	439d      	bics	r5, r3
 8003db6:	42a8      	cmp	r0, r5
 8003db8:	d007      	beq.n	8003dca <sbrk_aligned+0x3a>
 8003dba:	1a29      	subs	r1, r5, r0
 8003dbc:	0020      	movs	r0, r4
 8003dbe:	f000 f9ed 	bl	800419c <_sbrk_r>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d101      	bne.n	8003dca <sbrk_aligned+0x3a>
 8003dc6:	2501      	movs	r5, #1
 8003dc8:	426d      	negs	r5, r5
 8003dca:	0028      	movs	r0, r5
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	200001fc 	.word	0x200001fc

08003dd4 <_malloc_r>:
 8003dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	1ccb      	adds	r3, r1, #3
 8003dda:	4393      	bics	r3, r2
 8003ddc:	3308      	adds	r3, #8
 8003dde:	0006      	movs	r6, r0
 8003de0:	001f      	movs	r7, r3
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d238      	bcs.n	8003e58 <_malloc_r+0x84>
 8003de6:	270c      	movs	r7, #12
 8003de8:	42b9      	cmp	r1, r7
 8003dea:	d837      	bhi.n	8003e5c <_malloc_r+0x88>
 8003dec:	0030      	movs	r0, r6
 8003dee:	f000 f873 	bl	8003ed8 <__malloc_lock>
 8003df2:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <_malloc_r+0x100>)
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	001c      	movs	r4, r3
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	d133      	bne.n	8003e66 <_malloc_r+0x92>
 8003dfe:	0039      	movs	r1, r7
 8003e00:	0030      	movs	r0, r6
 8003e02:	f7ff ffc5 	bl	8003d90 <sbrk_aligned>
 8003e06:	0004      	movs	r4, r0
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d15e      	bne.n	8003eca <_malloc_r+0xf6>
 8003e0c:	9b00      	ldr	r3, [sp, #0]
 8003e0e:	681c      	ldr	r4, [r3, #0]
 8003e10:	0025      	movs	r5, r4
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	d14e      	bne.n	8003eb4 <_malloc_r+0xe0>
 8003e16:	2c00      	cmp	r4, #0
 8003e18:	d051      	beq.n	8003ebe <_malloc_r+0xea>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	0029      	movs	r1, r5
 8003e1e:	18e3      	adds	r3, r4, r3
 8003e20:	0030      	movs	r0, r6
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	f000 f9ba 	bl	800419c <_sbrk_r>
 8003e28:	9b01      	ldr	r3, [sp, #4]
 8003e2a:	4283      	cmp	r3, r0
 8003e2c:	d147      	bne.n	8003ebe <_malloc_r+0xea>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0030      	movs	r0, r6
 8003e32:	1aff      	subs	r7, r7, r3
 8003e34:	0039      	movs	r1, r7
 8003e36:	f7ff ffab 	bl	8003d90 <sbrk_aligned>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d03f      	beq.n	8003ebe <_malloc_r+0xea>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	19db      	adds	r3, r3, r7
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	9b00      	ldr	r3, [sp, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d040      	beq.n	8003ece <_malloc_r+0xfa>
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	42a2      	cmp	r2, r4
 8003e50:	d133      	bne.n	8003eba <_malloc_r+0xe6>
 8003e52:	2200      	movs	r2, #0
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	e014      	b.n	8003e82 <_malloc_r+0xae>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	dac5      	bge.n	8003de8 <_malloc_r+0x14>
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	2500      	movs	r5, #0
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	0028      	movs	r0, r5
 8003e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e66:	6821      	ldr	r1, [r4, #0]
 8003e68:	1bc9      	subs	r1, r1, r7
 8003e6a:	d420      	bmi.n	8003eae <_malloc_r+0xda>
 8003e6c:	290b      	cmp	r1, #11
 8003e6e:	d918      	bls.n	8003ea2 <_malloc_r+0xce>
 8003e70:	19e2      	adds	r2, r4, r7
 8003e72:	6027      	str	r7, [r4, #0]
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	d112      	bne.n	8003e9e <_malloc_r+0xca>
 8003e78:	9b00      	ldr	r3, [sp, #0]
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	6011      	str	r1, [r2, #0]
 8003e80:	6053      	str	r3, [r2, #4]
 8003e82:	0030      	movs	r0, r6
 8003e84:	0025      	movs	r5, r4
 8003e86:	f000 f82f 	bl	8003ee8 <__malloc_unlock>
 8003e8a:	2207      	movs	r2, #7
 8003e8c:	350b      	adds	r5, #11
 8003e8e:	1d23      	adds	r3, r4, #4
 8003e90:	4395      	bics	r5, r2
 8003e92:	1aea      	subs	r2, r5, r3
 8003e94:	429d      	cmp	r5, r3
 8003e96:	d0e4      	beq.n	8003e62 <_malloc_r+0x8e>
 8003e98:	1b5b      	subs	r3, r3, r5
 8003e9a:	50a3      	str	r3, [r4, r2]
 8003e9c:	e7e1      	b.n	8003e62 <_malloc_r+0x8e>
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	e7ec      	b.n	8003e7c <_malloc_r+0xa8>
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d1d5      	bne.n	8003e54 <_malloc_r+0x80>
 8003ea8:	9b00      	ldr	r3, [sp, #0]
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e7e9      	b.n	8003e82 <_malloc_r+0xae>
 8003eae:	0023      	movs	r3, r4
 8003eb0:	6864      	ldr	r4, [r4, #4]
 8003eb2:	e7a2      	b.n	8003dfa <_malloc_r+0x26>
 8003eb4:	002c      	movs	r4, r5
 8003eb6:	686d      	ldr	r5, [r5, #4]
 8003eb8:	e7ab      	b.n	8003e12 <_malloc_r+0x3e>
 8003eba:	0013      	movs	r3, r2
 8003ebc:	e7c4      	b.n	8003e48 <_malloc_r+0x74>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	0030      	movs	r0, r6
 8003ec2:	6033      	str	r3, [r6, #0]
 8003ec4:	f000 f810 	bl	8003ee8 <__malloc_unlock>
 8003ec8:	e7cb      	b.n	8003e62 <_malloc_r+0x8e>
 8003eca:	6027      	str	r7, [r4, #0]
 8003ecc:	e7d9      	b.n	8003e82 <_malloc_r+0xae>
 8003ece:	605b      	str	r3, [r3, #4]
 8003ed0:	deff      	udf	#255	; 0xff
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	200001f8 	.word	0x200001f8

08003ed8 <__malloc_lock>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <__malloc_lock+0xc>)
 8003edc:	f000 f9af 	bl	800423e <__retarget_lock_acquire_recursive>
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	20000340 	.word	0x20000340

08003ee8 <__malloc_unlock>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <__malloc_unlock+0xc>)
 8003eec:	f000 f9a8 	bl	8004240 <__retarget_lock_release_recursive>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	20000340 	.word	0x20000340

08003ef8 <std>:
 8003ef8:	2300      	movs	r3, #0
 8003efa:	b510      	push	{r4, lr}
 8003efc:	0004      	movs	r4, r0
 8003efe:	6003      	str	r3, [r0, #0]
 8003f00:	6043      	str	r3, [r0, #4]
 8003f02:	6083      	str	r3, [r0, #8]
 8003f04:	8181      	strh	r1, [r0, #12]
 8003f06:	6643      	str	r3, [r0, #100]	; 0x64
 8003f08:	81c2      	strh	r2, [r0, #14]
 8003f0a:	6103      	str	r3, [r0, #16]
 8003f0c:	6143      	str	r3, [r0, #20]
 8003f0e:	6183      	str	r3, [r0, #24]
 8003f10:	0019      	movs	r1, r3
 8003f12:	2208      	movs	r2, #8
 8003f14:	305c      	adds	r0, #92	; 0x5c
 8003f16:	f000 f8ff 	bl	8004118 <memset>
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <std+0x50>)
 8003f1c:	6224      	str	r4, [r4, #32]
 8003f1e:	6263      	str	r3, [r4, #36]	; 0x24
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <std+0x54>)
 8003f22:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <std+0x58>)
 8003f26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <std+0x5c>)
 8003f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <std+0x60>)
 8003f2e:	429c      	cmp	r4, r3
 8003f30:	d005      	beq.n	8003f3e <std+0x46>
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <std+0x64>)
 8003f34:	429c      	cmp	r4, r3
 8003f36:	d002      	beq.n	8003f3e <std+0x46>
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <std+0x68>)
 8003f3a:	429c      	cmp	r4, r3
 8003f3c:	d103      	bne.n	8003f46 <std+0x4e>
 8003f3e:	0020      	movs	r0, r4
 8003f40:	3058      	adds	r0, #88	; 0x58
 8003f42:	f000 f97b 	bl	800423c <__retarget_lock_init_recursive>
 8003f46:	bd10      	pop	{r4, pc}
 8003f48:	08004081 	.word	0x08004081
 8003f4c:	080040a9 	.word	0x080040a9
 8003f50:	080040e1 	.word	0x080040e1
 8003f54:	0800410d 	.word	0x0800410d
 8003f58:	20000200 	.word	0x20000200
 8003f5c:	20000268 	.word	0x20000268
 8003f60:	200002d0 	.word	0x200002d0

08003f64 <stdio_exit_handler>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <stdio_exit_handler+0x10>)
 8003f68:	4903      	ldr	r1, [pc, #12]	; (8003f78 <stdio_exit_handler+0x14>)
 8003f6a:	4804      	ldr	r0, [pc, #16]	; (8003f7c <stdio_exit_handler+0x18>)
 8003f6c:	f000 f86c 	bl	8004048 <_fwalk_sglue>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	20000014 	.word	0x20000014
 8003f78:	080043ed 	.word	0x080043ed
 8003f7c:	20000020 	.word	0x20000020

08003f80 <cleanup_stdio>:
 8003f80:	6841      	ldr	r1, [r0, #4]
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <cleanup_stdio+0x30>)
 8003f84:	b510      	push	{r4, lr}
 8003f86:	0004      	movs	r4, r0
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	d001      	beq.n	8003f90 <cleanup_stdio+0x10>
 8003f8c:	f000 fa2e 	bl	80043ec <_fflush_r>
 8003f90:	68a1      	ldr	r1, [r4, #8]
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <cleanup_stdio+0x34>)
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d002      	beq.n	8003f9e <cleanup_stdio+0x1e>
 8003f98:	0020      	movs	r0, r4
 8003f9a:	f000 fa27 	bl	80043ec <_fflush_r>
 8003f9e:	68e1      	ldr	r1, [r4, #12]
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <cleanup_stdio+0x38>)
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d002      	beq.n	8003fac <cleanup_stdio+0x2c>
 8003fa6:	0020      	movs	r0, r4
 8003fa8:	f000 fa20 	bl	80043ec <_fflush_r>
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000200 	.word	0x20000200
 8003fb4:	20000268 	.word	0x20000268
 8003fb8:	200002d0 	.word	0x200002d0

08003fbc <global_stdio_init.part.0>:
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <global_stdio_init.part.0+0x28>)
 8003fc0:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <global_stdio_init.part.0+0x2c>)
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	4809      	ldr	r0, [pc, #36]	; (8003fec <global_stdio_init.part.0+0x30>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f7ff ff95 	bl	8003ef8 <std>
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2109      	movs	r1, #9
 8003fd2:	4807      	ldr	r0, [pc, #28]	; (8003ff0 <global_stdio_init.part.0+0x34>)
 8003fd4:	f7ff ff90 	bl	8003ef8 <std>
 8003fd8:	2202      	movs	r2, #2
 8003fda:	2112      	movs	r1, #18
 8003fdc:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <global_stdio_init.part.0+0x38>)
 8003fde:	f7ff ff8b 	bl	8003ef8 <std>
 8003fe2:	bd10      	pop	{r4, pc}
 8003fe4:	20000338 	.word	0x20000338
 8003fe8:	08003f65 	.word	0x08003f65
 8003fec:	20000200 	.word	0x20000200
 8003ff0:	20000268 	.word	0x20000268
 8003ff4:	200002d0 	.word	0x200002d0

08003ff8 <__sfp_lock_acquire>:
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	4802      	ldr	r0, [pc, #8]	; (8004004 <__sfp_lock_acquire+0xc>)
 8003ffc:	f000 f91f 	bl	800423e <__retarget_lock_acquire_recursive>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	20000341 	.word	0x20000341

08004008 <__sfp_lock_release>:
 8004008:	b510      	push	{r4, lr}
 800400a:	4802      	ldr	r0, [pc, #8]	; (8004014 <__sfp_lock_release+0xc>)
 800400c:	f000 f918 	bl	8004240 <__retarget_lock_release_recursive>
 8004010:	bd10      	pop	{r4, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	20000341 	.word	0x20000341

08004018 <__sinit>:
 8004018:	b510      	push	{r4, lr}
 800401a:	0004      	movs	r4, r0
 800401c:	f7ff ffec 	bl	8003ff8 <__sfp_lock_acquire>
 8004020:	6a23      	ldr	r3, [r4, #32]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <__sinit+0x14>
 8004026:	f7ff ffef 	bl	8004008 <__sfp_lock_release>
 800402a:	bd10      	pop	{r4, pc}
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <__sinit+0x28>)
 800402e:	6223      	str	r3, [r4, #32]
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <__sinit+0x2c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f6      	bne.n	8004026 <__sinit+0xe>
 8004038:	f7ff ffc0 	bl	8003fbc <global_stdio_init.part.0>
 800403c:	e7f3      	b.n	8004026 <__sinit+0xe>
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	08003f81 	.word	0x08003f81
 8004044:	20000338 	.word	0x20000338

08004048 <_fwalk_sglue>:
 8004048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800404a:	0014      	movs	r4, r2
 800404c:	2600      	movs	r6, #0
 800404e:	9000      	str	r0, [sp, #0]
 8004050:	9101      	str	r1, [sp, #4]
 8004052:	68a5      	ldr	r5, [r4, #8]
 8004054:	6867      	ldr	r7, [r4, #4]
 8004056:	3f01      	subs	r7, #1
 8004058:	d504      	bpl.n	8004064 <_fwalk_sglue+0x1c>
 800405a:	6824      	ldr	r4, [r4, #0]
 800405c:	2c00      	cmp	r4, #0
 800405e:	d1f8      	bne.n	8004052 <_fwalk_sglue+0xa>
 8004060:	0030      	movs	r0, r6
 8004062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004064:	89ab      	ldrh	r3, [r5, #12]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d908      	bls.n	800407c <_fwalk_sglue+0x34>
 800406a:	220e      	movs	r2, #14
 800406c:	5eab      	ldrsh	r3, [r5, r2]
 800406e:	3301      	adds	r3, #1
 8004070:	d004      	beq.n	800407c <_fwalk_sglue+0x34>
 8004072:	0029      	movs	r1, r5
 8004074:	9800      	ldr	r0, [sp, #0]
 8004076:	9b01      	ldr	r3, [sp, #4]
 8004078:	4798      	blx	r3
 800407a:	4306      	orrs	r6, r0
 800407c:	3568      	adds	r5, #104	; 0x68
 800407e:	e7ea      	b.n	8004056 <_fwalk_sglue+0xe>

08004080 <__sread>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	000c      	movs	r4, r1
 8004084:	250e      	movs	r5, #14
 8004086:	5f49      	ldrsh	r1, [r1, r5]
 8004088:	f000 f874 	bl	8004174 <_read_r>
 800408c:	2800      	cmp	r0, #0
 800408e:	db03      	blt.n	8004098 <__sread+0x18>
 8004090:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004092:	181b      	adds	r3, r3, r0
 8004094:	6563      	str	r3, [r4, #84]	; 0x54
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <__sread+0x24>)
 800409c:	4013      	ands	r3, r2
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	e7f9      	b.n	8004096 <__sread+0x16>
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	ffffefff 	.word	0xffffefff

080040a8 <__swrite>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	001f      	movs	r7, r3
 80040ac:	898b      	ldrh	r3, [r1, #12]
 80040ae:	0005      	movs	r5, r0
 80040b0:	000c      	movs	r4, r1
 80040b2:	0016      	movs	r6, r2
 80040b4:	05db      	lsls	r3, r3, #23
 80040b6:	d505      	bpl.n	80040c4 <__swrite+0x1c>
 80040b8:	230e      	movs	r3, #14
 80040ba:	5ec9      	ldrsh	r1, [r1, r3]
 80040bc:	2200      	movs	r2, #0
 80040be:	2302      	movs	r3, #2
 80040c0:	f000 f844 	bl	800414c <_lseek_r>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	4a05      	ldr	r2, [pc, #20]	; (80040dc <__swrite+0x34>)
 80040c8:	0028      	movs	r0, r5
 80040ca:	4013      	ands	r3, r2
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	0032      	movs	r2, r6
 80040d0:	230e      	movs	r3, #14
 80040d2:	5ee1      	ldrsh	r1, [r4, r3]
 80040d4:	003b      	movs	r3, r7
 80040d6:	f000 f873 	bl	80041c0 <_write_r>
 80040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040dc:	ffffefff 	.word	0xffffefff

080040e0 <__sseek>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	000c      	movs	r4, r1
 80040e4:	250e      	movs	r5, #14
 80040e6:	5f49      	ldrsh	r1, [r1, r5]
 80040e8:	f000 f830 	bl	800414c <_lseek_r>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	1c42      	adds	r2, r0, #1
 80040f0:	d103      	bne.n	80040fa <__sseek+0x1a>
 80040f2:	4a05      	ldr	r2, [pc, #20]	; (8004108 <__sseek+0x28>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	0152      	lsls	r2, r2, #5
 80040fe:	4313      	orrs	r3, r2
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	6560      	str	r0, [r4, #84]	; 0x54
 8004104:	e7f8      	b.n	80040f8 <__sseek+0x18>
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	ffffefff 	.word	0xffffefff

0800410c <__sclose>:
 800410c:	b510      	push	{r4, lr}
 800410e:	230e      	movs	r3, #14
 8004110:	5ec9      	ldrsh	r1, [r1, r3]
 8004112:	f000 f809 	bl	8004128 <_close_r>
 8004116:	bd10      	pop	{r4, pc}

08004118 <memset>:
 8004118:	0003      	movs	r3, r0
 800411a:	1882      	adds	r2, r0, r2
 800411c:	4293      	cmp	r3, r2
 800411e:	d100      	bne.n	8004122 <memset+0xa>
 8004120:	4770      	bx	lr
 8004122:	7019      	strb	r1, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	e7f9      	b.n	800411c <memset+0x4>

08004128 <_close_r>:
 8004128:	2300      	movs	r3, #0
 800412a:	b570      	push	{r4, r5, r6, lr}
 800412c:	4d06      	ldr	r5, [pc, #24]	; (8004148 <_close_r+0x20>)
 800412e:	0004      	movs	r4, r0
 8004130:	0008      	movs	r0, r1
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f7ff fc86 	bl	8003a44 <_close>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d103      	bne.n	8004144 <_close_r+0x1c>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d000      	beq.n	8004144 <_close_r+0x1c>
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	bd70      	pop	{r4, r5, r6, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	2000033c 	.word	0x2000033c

0800414c <_lseek_r>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	0004      	movs	r4, r0
 8004150:	0008      	movs	r0, r1
 8004152:	0011      	movs	r1, r2
 8004154:	001a      	movs	r2, r3
 8004156:	2300      	movs	r3, #0
 8004158:	4d05      	ldr	r5, [pc, #20]	; (8004170 <_lseek_r+0x24>)
 800415a:	602b      	str	r3, [r5, #0]
 800415c:	f7ff fc33 	bl	80039c6 <_lseek>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d103      	bne.n	800416c <_lseek_r+0x20>
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d000      	beq.n	800416c <_lseek_r+0x20>
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	bd70      	pop	{r4, r5, r6, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	2000033c 	.word	0x2000033c

08004174 <_read_r>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	0004      	movs	r4, r0
 8004178:	0008      	movs	r0, r1
 800417a:	0011      	movs	r1, r2
 800417c:	001a      	movs	r2, r3
 800417e:	2300      	movs	r3, #0
 8004180:	4d05      	ldr	r5, [pc, #20]	; (8004198 <_read_r+0x24>)
 8004182:	602b      	str	r3, [r5, #0]
 8004184:	f7ff fbca 	bl	800391c <_read>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d103      	bne.n	8004194 <_read_r+0x20>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d000      	beq.n	8004194 <_read_r+0x20>
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	bd70      	pop	{r4, r5, r6, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	2000033c 	.word	0x2000033c

0800419c <_sbrk_r>:
 800419c:	2300      	movs	r3, #0
 800419e:	b570      	push	{r4, r5, r6, lr}
 80041a0:	4d06      	ldr	r5, [pc, #24]	; (80041bc <_sbrk_r+0x20>)
 80041a2:	0004      	movs	r4, r0
 80041a4:	0008      	movs	r0, r1
 80041a6:	602b      	str	r3, [r5, #0]
 80041a8:	f7fc fcac 	bl	8000b04 <_sbrk>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d103      	bne.n	80041b8 <_sbrk_r+0x1c>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d000      	beq.n	80041b8 <_sbrk_r+0x1c>
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	2000033c 	.word	0x2000033c

080041c0 <_write_r>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	0004      	movs	r4, r0
 80041c4:	0008      	movs	r0, r1
 80041c6:	0011      	movs	r1, r2
 80041c8:	001a      	movs	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	4d05      	ldr	r5, [pc, #20]	; (80041e4 <_write_r+0x24>)
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	f7ff fc0d 	bl	80039ee <_write>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d103      	bne.n	80041e0 <_write_r+0x20>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d000      	beq.n	80041e0 <_write_r+0x20>
 80041de:	6023      	str	r3, [r4, #0]
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	2000033c 	.word	0x2000033c

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	2000006c 	.word	0x2000006c

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	2600      	movs	r6, #0
 80041f8:	4c0c      	ldr	r4, [pc, #48]	; (800422c <__libc_init_array+0x38>)
 80041fa:	4d0d      	ldr	r5, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fc:	1b64      	subs	r4, r4, r5
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	2600      	movs	r6, #0
 8004206:	f000 f91d 	bl	8004444 <_init>
 800420a:	4c0a      	ldr	r4, [pc, #40]	; (8004234 <__libc_init_array+0x40>)
 800420c:	4d0a      	ldr	r5, [pc, #40]	; (8004238 <__libc_init_array+0x44>)
 800420e:	1b64      	subs	r4, r4, r5
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	00b3      	lsls	r3, r6, #2
 800421a:	58eb      	ldr	r3, [r5, r3]
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	00b3      	lsls	r3, r6, #2
 8004224:	58eb      	ldr	r3, [r5, r3]
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	080044d0 	.word	0x080044d0
 8004230:	080044d0 	.word	0x080044d0
 8004234:	080044d4 	.word	0x080044d4
 8004238:	080044d0 	.word	0x080044d0

0800423c <__retarget_lock_init_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_acquire_recursive>:
 800423e:	4770      	bx	lr

08004240 <__retarget_lock_release_recursive>:
 8004240:	4770      	bx	lr
	...

08004244 <_free_r>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	0005      	movs	r5, r0
 8004248:	2900      	cmp	r1, #0
 800424a:	d010      	beq.n	800426e <_free_r+0x2a>
 800424c:	1f0c      	subs	r4, r1, #4
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	da00      	bge.n	8004256 <_free_r+0x12>
 8004254:	18e4      	adds	r4, r4, r3
 8004256:	0028      	movs	r0, r5
 8004258:	f7ff fe3e 	bl	8003ed8 <__malloc_lock>
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <_free_r+0x90>)
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <_free_r+0x2c>
 8004264:	6063      	str	r3, [r4, #4]
 8004266:	6014      	str	r4, [r2, #0]
 8004268:	0028      	movs	r0, r5
 800426a:	f7ff fe3d 	bl	8003ee8 <__malloc_unlock>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	42a3      	cmp	r3, r4
 8004272:	d908      	bls.n	8004286 <_free_r+0x42>
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	1821      	adds	r1, r4, r0
 8004278:	428b      	cmp	r3, r1
 800427a:	d1f3      	bne.n	8004264 <_free_r+0x20>
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	1809      	adds	r1, r1, r0
 8004282:	6021      	str	r1, [r4, #0]
 8004284:	e7ee      	b.n	8004264 <_free_r+0x20>
 8004286:	001a      	movs	r2, r3
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <_free_r+0x4e>
 800428e:	42a3      	cmp	r3, r4
 8004290:	d9f9      	bls.n	8004286 <_free_r+0x42>
 8004292:	6811      	ldr	r1, [r2, #0]
 8004294:	1850      	adds	r0, r2, r1
 8004296:	42a0      	cmp	r0, r4
 8004298:	d10b      	bne.n	80042b2 <_free_r+0x6e>
 800429a:	6820      	ldr	r0, [r4, #0]
 800429c:	1809      	adds	r1, r1, r0
 800429e:	1850      	adds	r0, r2, r1
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	4283      	cmp	r3, r0
 80042a4:	d1e0      	bne.n	8004268 <_free_r+0x24>
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	1841      	adds	r1, r0, r1
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	6053      	str	r3, [r2, #4]
 80042b0:	e7da      	b.n	8004268 <_free_r+0x24>
 80042b2:	42a0      	cmp	r0, r4
 80042b4:	d902      	bls.n	80042bc <_free_r+0x78>
 80042b6:	230c      	movs	r3, #12
 80042b8:	602b      	str	r3, [r5, #0]
 80042ba:	e7d5      	b.n	8004268 <_free_r+0x24>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428b      	cmp	r3, r1
 80042c2:	d103      	bne.n	80042cc <_free_r+0x88>
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	1809      	adds	r1, r1, r0
 80042ca:	6021      	str	r1, [r4, #0]
 80042cc:	6063      	str	r3, [r4, #4]
 80042ce:	6054      	str	r4, [r2, #4]
 80042d0:	e7ca      	b.n	8004268 <_free_r+0x24>
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	200001f8 	.word	0x200001f8

080042d8 <__sflush_r>:
 80042d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042da:	898b      	ldrh	r3, [r1, #12]
 80042dc:	0005      	movs	r5, r0
 80042de:	000c      	movs	r4, r1
 80042e0:	071a      	lsls	r2, r3, #28
 80042e2:	d45c      	bmi.n	800439e <__sflush_r+0xc6>
 80042e4:	684a      	ldr	r2, [r1, #4]
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	dc04      	bgt.n	80042f4 <__sflush_r+0x1c>
 80042ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80042ec:	2a00      	cmp	r2, #0
 80042ee:	dc01      	bgt.n	80042f4 <__sflush_r+0x1c>
 80042f0:	2000      	movs	r0, #0
 80042f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80042f6:	2f00      	cmp	r7, #0
 80042f8:	d0fa      	beq.n	80042f0 <__sflush_r+0x18>
 80042fa:	2200      	movs	r2, #0
 80042fc:	2080      	movs	r0, #128	; 0x80
 80042fe:	682e      	ldr	r6, [r5, #0]
 8004300:	602a      	str	r2, [r5, #0]
 8004302:	001a      	movs	r2, r3
 8004304:	0140      	lsls	r0, r0, #5
 8004306:	6a21      	ldr	r1, [r4, #32]
 8004308:	4002      	ands	r2, r0
 800430a:	4203      	tst	r3, r0
 800430c:	d034      	beq.n	8004378 <__sflush_r+0xa0>
 800430e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	075b      	lsls	r3, r3, #29
 8004314:	d506      	bpl.n	8004324 <__sflush_r+0x4c>
 8004316:	6863      	ldr	r3, [r4, #4]
 8004318:	1ac0      	subs	r0, r0, r3
 800431a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <__sflush_r+0x4c>
 8004320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004322:	1ac0      	subs	r0, r0, r3
 8004324:	0002      	movs	r2, r0
 8004326:	2300      	movs	r3, #0
 8004328:	0028      	movs	r0, r5
 800432a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800432c:	6a21      	ldr	r1, [r4, #32]
 800432e:	47b8      	blx	r7
 8004330:	89a2      	ldrh	r2, [r4, #12]
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d106      	bne.n	8004344 <__sflush_r+0x6c>
 8004336:	6829      	ldr	r1, [r5, #0]
 8004338:	291d      	cmp	r1, #29
 800433a:	d82c      	bhi.n	8004396 <__sflush_r+0xbe>
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <__sflush_r+0x110>)
 800433e:	410b      	asrs	r3, r1
 8004340:	07db      	lsls	r3, r3, #31
 8004342:	d428      	bmi.n	8004396 <__sflush_r+0xbe>
 8004344:	2300      	movs	r3, #0
 8004346:	6063      	str	r3, [r4, #4]
 8004348:	6923      	ldr	r3, [r4, #16]
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	04d2      	lsls	r2, r2, #19
 800434e:	d505      	bpl.n	800435c <__sflush_r+0x84>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <__sflush_r+0x82>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d100      	bne.n	800435c <__sflush_r+0x84>
 800435a:	6560      	str	r0, [r4, #84]	; 0x54
 800435c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800435e:	602e      	str	r6, [r5, #0]
 8004360:	2900      	cmp	r1, #0
 8004362:	d0c5      	beq.n	80042f0 <__sflush_r+0x18>
 8004364:	0023      	movs	r3, r4
 8004366:	3344      	adds	r3, #68	; 0x44
 8004368:	4299      	cmp	r1, r3
 800436a:	d002      	beq.n	8004372 <__sflush_r+0x9a>
 800436c:	0028      	movs	r0, r5
 800436e:	f7ff ff69 	bl	8004244 <_free_r>
 8004372:	2000      	movs	r0, #0
 8004374:	6360      	str	r0, [r4, #52]	; 0x34
 8004376:	e7bc      	b.n	80042f2 <__sflush_r+0x1a>
 8004378:	2301      	movs	r3, #1
 800437a:	0028      	movs	r0, r5
 800437c:	47b8      	blx	r7
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	d1c6      	bne.n	8004310 <__sflush_r+0x38>
 8004382:	682b      	ldr	r3, [r5, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0c3      	beq.n	8004310 <__sflush_r+0x38>
 8004388:	2b1d      	cmp	r3, #29
 800438a:	d001      	beq.n	8004390 <__sflush_r+0xb8>
 800438c:	2b16      	cmp	r3, #22
 800438e:	d101      	bne.n	8004394 <__sflush_r+0xbc>
 8004390:	602e      	str	r6, [r5, #0]
 8004392:	e7ad      	b.n	80042f0 <__sflush_r+0x18>
 8004394:	89a2      	ldrh	r2, [r4, #12]
 8004396:	2340      	movs	r3, #64	; 0x40
 8004398:	4313      	orrs	r3, r2
 800439a:	81a3      	strh	r3, [r4, #12]
 800439c:	e7a9      	b.n	80042f2 <__sflush_r+0x1a>
 800439e:	690e      	ldr	r6, [r1, #16]
 80043a0:	2e00      	cmp	r6, #0
 80043a2:	d0a5      	beq.n	80042f0 <__sflush_r+0x18>
 80043a4:	680f      	ldr	r7, [r1, #0]
 80043a6:	600e      	str	r6, [r1, #0]
 80043a8:	1bba      	subs	r2, r7, r6
 80043aa:	9201      	str	r2, [sp, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	079b      	lsls	r3, r3, #30
 80043b0:	d100      	bne.n	80043b4 <__sflush_r+0xdc>
 80043b2:	694a      	ldr	r2, [r1, #20]
 80043b4:	60a2      	str	r2, [r4, #8]
 80043b6:	9b01      	ldr	r3, [sp, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	dd99      	ble.n	80042f0 <__sflush_r+0x18>
 80043bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043be:	0032      	movs	r2, r6
 80043c0:	001f      	movs	r7, r3
 80043c2:	0028      	movs	r0, r5
 80043c4:	9b01      	ldr	r3, [sp, #4]
 80043c6:	6a21      	ldr	r1, [r4, #32]
 80043c8:	47b8      	blx	r7
 80043ca:	2800      	cmp	r0, #0
 80043cc:	dc06      	bgt.n	80043dc <__sflush_r+0x104>
 80043ce:	2340      	movs	r3, #64	; 0x40
 80043d0:	2001      	movs	r0, #1
 80043d2:	89a2      	ldrh	r2, [r4, #12]
 80043d4:	4240      	negs	r0, r0
 80043d6:	4313      	orrs	r3, r2
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	e78a      	b.n	80042f2 <__sflush_r+0x1a>
 80043dc:	9b01      	ldr	r3, [sp, #4]
 80043de:	1836      	adds	r6, r6, r0
 80043e0:	1a1b      	subs	r3, r3, r0
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	e7e7      	b.n	80043b6 <__sflush_r+0xde>
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	dfbffffe 	.word	0xdfbffffe

080043ec <_fflush_r>:
 80043ec:	690b      	ldr	r3, [r1, #16]
 80043ee:	b570      	push	{r4, r5, r6, lr}
 80043f0:	0005      	movs	r5, r0
 80043f2:	000c      	movs	r4, r1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_fflush_r+0x12>
 80043f8:	2500      	movs	r5, #0
 80043fa:	0028      	movs	r0, r5
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
 80043fe:	2800      	cmp	r0, #0
 8004400:	d004      	beq.n	800440c <_fflush_r+0x20>
 8004402:	6a03      	ldr	r3, [r0, #32]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <_fflush_r+0x20>
 8004408:	f7ff fe06 	bl	8004018 <__sinit>
 800440c:	220c      	movs	r2, #12
 800440e:	5ea3      	ldrsh	r3, [r4, r2]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f1      	beq.n	80043f8 <_fflush_r+0xc>
 8004414:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004416:	07d2      	lsls	r2, r2, #31
 8004418:	d404      	bmi.n	8004424 <_fflush_r+0x38>
 800441a:	059b      	lsls	r3, r3, #22
 800441c:	d402      	bmi.n	8004424 <_fflush_r+0x38>
 800441e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004420:	f7ff ff0d 	bl	800423e <__retarget_lock_acquire_recursive>
 8004424:	0028      	movs	r0, r5
 8004426:	0021      	movs	r1, r4
 8004428:	f7ff ff56 	bl	80042d8 <__sflush_r>
 800442c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800442e:	0005      	movs	r5, r0
 8004430:	07db      	lsls	r3, r3, #31
 8004432:	d4e2      	bmi.n	80043fa <_fflush_r+0xe>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	059b      	lsls	r3, r3, #22
 8004438:	d4df      	bmi.n	80043fa <_fflush_r+0xe>
 800443a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800443c:	f7ff ff00 	bl	8004240 <__retarget_lock_release_recursive>
 8004440:	e7db      	b.n	80043fa <_fflush_r+0xe>
	...

08004444 <_init>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr

08004450 <_fini>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr
