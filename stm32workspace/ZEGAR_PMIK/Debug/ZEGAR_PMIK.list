
ZEGAR_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005880  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a88  08005a88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a90  08005a90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000070  08005b08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08005b08  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f48c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b2  00000000  00000000  0002f567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00031b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6c  00000000  00000000  000328a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c61  00000000  00000000  0003330c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001016b  00000000  00000000  00049f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b3bd  00000000  00000000  0005a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003890  00000000  00000000  000e5498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e8d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005928 	.word	0x08005928

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005928 	.word	0x08005928

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef SEMIHOSTING_MODE
		initialise_monitor_handles();
 80004be:	f004 fe6b 	bl	8005198 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f001 fa89 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f82b 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fa17 	bl	80008fc <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ce:	f000 f939 	bl	8000744 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d2:	f000 f98d 	bl	80007f0 <MX_TIM3_Init>
  MX_RTC_Init();
 80004d6:	f000 f88f 	bl	80005f8 <MX_RTC_Init>
  MX_USART4_UART_Init();
 80004da:	f000 f9df 	bl	800089c <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  Clocker_Init(&ourClocker, &hrtc, &htim2, &htim3);
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <main+0x58>)
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <main+0x5c>)
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <main+0x60>)
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <main+0x64>)
 80004e6:	f000 fc07 	bl	8000cf8 <Clocker_Init>
  Clocker_Set_Time(&ourClocker, 21, 37, 00);
 80004ea:	480c      	ldr	r0, [pc, #48]	; (800051c <main+0x64>)
 80004ec:	2300      	movs	r3, #0
 80004ee:	2225      	movs	r2, #37	; 0x25
 80004f0:	2115      	movs	r1, #21
 80004f2:	f000 fd67 	bl	8000fc4 <Clocker_Set_Time>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t alarm = 0; //Tymczasowa wartość
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  Clocker_Change_Screen(&ourClocker);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <main+0x64>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fe12 	bl	8001128 <Clocker_Change_Screen>
	  HAL_Delay(2000);
 8000504:	23fa      	movs	r3, #250	; 0xfa
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fad5 	bl	8001ab8 <HAL_Delay>
	  Clocker_Change_Screen(&ourClocker);
 800050e:	e7f5      	b.n	80004fc <main+0x44>
 8000510:	200000f0 	.word	0x200000f0
 8000514:	200000b0 	.word	0x200000b0
 8000518:	2000008c 	.word	0x2000008c
 800051c:	200001b8 	.word	0x200001b8

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b09f      	sub	sp, #124	; 0x7c
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	2440      	movs	r4, #64	; 0x40
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2338      	movs	r3, #56	; 0x38
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f005 f85b 	bl	80055ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	232c      	movs	r3, #44	; 0x2c
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	2314      	movs	r3, #20
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f005 f853 	bl	80055ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	0018      	movs	r0, r3
 800054a:	2328      	movs	r3, #40	; 0x28
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f005 f84c 	bl	80055ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <SystemClock_Config+0xd4>)
 800055a:	401a      	ands	r2, r3
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <SystemClock_Config+0xd0>)
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	0109      	lsls	r1, r1, #4
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2206      	movs	r2, #6
 800056a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2201      	movs	r2, #1
 8000578:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2210      	movs	r2, #16
 800057e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2200      	movs	r2, #0
 8000584:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	193b      	adds	r3, r7, r4
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fd4f 	bl	800202c <HAL_RCC_OscConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000592:	f000 fa85 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	212c      	movs	r1, #44	; 0x2c
 8000598:	187b      	adds	r3, r7, r1
 800059a:	220f      	movs	r2, #15
 800059c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2201      	movs	r2, #1
 80005a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 f90a 	bl	80027d4 <HAL_RCC_ClockConfig>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005c4:	f000 fa6c 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2220      	movs	r2, #32
 80005cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	0252      	lsls	r2, r2, #9
 80005d4:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 fb1f 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e2:	f000 fa5d 	bl	8000aa0 <Error_Handler>
  }
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b01f      	add	sp, #124	; 0x7c
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40007000 	.word	0x40007000
 80005f4:	ffffe7ff 	.word	0xffffe7ff

080005f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b090      	sub	sp, #64	; 0x40
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005fe:	232c      	movs	r3, #44	; 0x2c
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	0018      	movs	r0, r3
 8000604:	2314      	movs	r3, #20
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f004 ffef 	bl	80055ec <memset>
  RTC_DateTypeDef sDate = {0};
 800060e:	2328      	movs	r3, #40	; 0x28
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000616:	003b      	movs	r3, r7
 8000618:	0018      	movs	r0, r3
 800061a:	2328      	movs	r3, #40	; 0x28
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f004 ffe4 	bl	80055ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000624:	4b44      	ldr	r3, [pc, #272]	; (8000738 <MX_RTC_Init+0x140>)
 8000626:	4a45      	ldr	r2, [pc, #276]	; (800073c <MX_RTC_Init+0x144>)
 8000628:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <MX_RTC_Init+0x140>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000630:	4b41      	ldr	r3, [pc, #260]	; (8000738 <MX_RTC_Init+0x140>)
 8000632:	227f      	movs	r2, #127	; 0x7f
 8000634:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <MX_RTC_Init+0x140>)
 8000638:	22ff      	movs	r2, #255	; 0xff
 800063a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <MX_RTC_Init+0x140>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000642:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <MX_RTC_Init+0x140>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <MX_RTC_Init+0x140>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800064e:	4b3a      	ldr	r3, [pc, #232]	; (8000738 <MX_RTC_Init+0x140>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_RTC_Init+0x140>)
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fc7e 	bl	8002f58 <HAL_RTC_Init>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000660:	f000 fa1e 	bl	8000aa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000664:	212c      	movs	r1, #44	; 0x2c
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000684:	1879      	adds	r1, r7, r1
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <MX_RTC_Init+0x140>)
 8000688:	2201      	movs	r2, #1
 800068a:	0018      	movs	r0, r3
 800068c:	f002 fd00 	bl	8003090 <HAL_RTC_SetTime>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000694:	f000 fa04 	bl	8000aa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000698:	2128      	movs	r1, #40	; 0x28
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006b2:	1879      	adds	r1, r7, r1
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_RTC_Init+0x140>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 fdf1 	bl	80032a0 <HAL_RTC_SetDate>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80006c2:	f000 f9ed 	bl	8000aa0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80006c6:	003b      	movs	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006de:	003b      	movs	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS;
 80006ea:	003b      	movs	r3, r7
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <MX_RTC_Init+0x148>)
 80006ee:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2220      	movs	r2, #32
 8000700:	2101      	movs	r1, #1
 8000702:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000704:	003b      	movs	r3, r7
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0052      	lsls	r2, r2, #1
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800070c:	0039      	movs	r1, r7
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_RTC_Init+0x140>)
 8000710:	2201      	movs	r2, #1
 8000712:	0018      	movs	r0, r3
 8000714:	f002 fea8 	bl	8003468 <HAL_RTC_SetAlarm>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 800071c:	f000 f9c0 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	005a      	lsls	r2, r3, #1
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <MX_RTC_Init+0x140>)
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f002 ffe1 	bl	80036f0 <HAL_RTC_DeactivateAlarm>
  /* USER CODE END RTC_Init 2 */

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b010      	add	sp, #64	; 0x40
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40002800 	.word	0x40002800
 8000740:	80000080 	.word	0x80000080

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	2308      	movs	r3, #8
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	0018      	movs	r0, r3
 8000750:	2310      	movs	r3, #16
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f004 ff49 	bl	80055ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	003b      	movs	r3, r7
 800075c:	0018      	movs	r0, r3
 800075e:	2308      	movs	r3, #8
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f004 ff42 	bl	80055ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_TIM2_Init+0xa4>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	05d2      	lsls	r2, r2, #23
 800076e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_TIM2_Init+0xa8>)
 8000774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM2_Init+0xa4>)
 800077e:	22fa      	movs	r2, #250	; 0xfa
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_TIM2_Init+0xa4>)
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000792:	0018      	movs	r0, r3
 8000794:	f003 f924 	bl	80039e0 <HAL_TIM_Base_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 f980 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	2108      	movs	r1, #8
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0152      	lsls	r2, r2, #5
 80007a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_TIM2_Init+0xa4>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 fad9 	bl	8003d68 <HAL_TIM_ConfigClockSource>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007ba:	f000 f971 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ca:	003a      	movs	r2, r7
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_TIM2_Init+0xa4>)
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 fcb5 	bl	8004140 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007da:	f000 f961 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b006      	add	sp, #24
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200000b0 	.word	0x200000b0
 80007ec:	00007cff 	.word	0x00007cff

080007f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	2308      	movs	r3, #8
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	0018      	movs	r0, r3
 80007fc:	2310      	movs	r3, #16
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f004 fef3 	bl	80055ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	003b      	movs	r3, r7
 8000808:	0018      	movs	r0, r3
 800080a:	2308      	movs	r3, #8
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f004 feec 	bl	80055ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <MX_TIM3_Init+0xa4>)
 8000818:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_TIM3_Init+0xa0>)
 800081c:	221f      	movs	r2, #31
 800081e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_TIM3_Init+0xa8>)
 800082a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_TIM3_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_TIM3_Init+0xa0>)
 800083a:	0018      	movs	r0, r3
 800083c:	f003 f8d0 	bl	80039e0 <HAL_TIM_Base_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f92c 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	2108      	movs	r1, #8
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0152      	lsls	r2, r2, #5
 8000850:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000852:	187a      	adds	r2, r7, r1
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f003 fa85 	bl	8003d68 <HAL_TIM_ConfigClockSource>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000862:	f000 f91d 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	003b      	movs	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	003b      	movs	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000872:	003a      	movs	r2, r7
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_TIM3_Init+0xa0>)
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f003 fc61 	bl	8004140 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000882:	f000 f90d 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	200000f0 	.word	0x200000f0
 8000894:	40000400 	.word	0x40000400
 8000898:	0000fffe 	.word	0x0000fffe

0800089c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART4_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008a8:	2296      	movs	r2, #150	; 0x96
 80008aa:	0192      	lsls	r2, r2, #6
 80008ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <MX_USART4_UART_Init+0x58>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f003 fc8b 	bl	80041fc <HAL_UART_Init>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f8d9 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000130 	.word	0x20000130
 80008f8:	40004c00 	.word	0x40004c00

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	2414      	movs	r4, #20
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2314      	movs	r3, #20
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f004 fe6d 	bl	80055ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000918:	2104      	movs	r1, #4
 800091a:	430a      	orrs	r2, r1
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
 800091e:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	2204      	movs	r2, #4
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b50      	ldr	r3, [pc, #320]	; (8000a6c <MX_GPIO_Init+0x170>)
 800092c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092e:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	430a      	orrs	r2, r1
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
 8000936:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000946:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
 800094e:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	2201      	movs	r2, #1
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x170>)
 800095c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000960:	2102      	movs	r1, #2
 8000962:	430a      	orrs	r2, r1
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x170>)
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	2202      	movs	r2, #2
 800096c:	4013      	ands	r3, r2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 8000972:	23f8      	movs	r3, #248	; 0xf8
 8000974:	0099      	lsls	r1, r3, #2
 8000976:	23a0      	movs	r3, #160	; 0xa0
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2200      	movs	r2, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fb38 	bl	8001ff2 <HAL_GPIO_WritePin>
                          |D_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_5_GPIO_Port, D_5_Pin, GPIO_PIN_RESET);
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <MX_GPIO_Init+0x174>)
 8000984:	2200      	movs	r2, #0
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fb32 	bl	8001ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_4_Pin|SCLK_Pin|SDO_Pin, GPIO_PIN_RESET);
 800098e:	23d0      	movs	r3, #208	; 0xd0
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4838      	ldr	r0, [pc, #224]	; (8000a74 <MX_GPIO_Init+0x178>)
 8000994:	2200      	movs	r2, #0
 8000996:	0019      	movs	r1, r3
 8000998:	f001 fb2b 	bl	8001ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0192      	lsls	r2, r2, #6
 80009a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2284      	movs	r2, #132	; 0x84
 80009a8:	0392      	lsls	r2, r2, #14
 80009aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <MX_GPIO_Init+0x174>)
 80009b6:	0019      	movs	r1, r3
 80009b8:	0010      	movs	r0, r2
 80009ba:	f001 f97f 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	220c      	movs	r2, #12
 80009c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2202      	movs	r2, #2
 80009c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2203      	movs	r2, #3
 80009d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2204      	movs	r2, #4
 80009da:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	193a      	adds	r2, r7, r4
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f969 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : R_S_Pin R_W_Pin E_N_Pin D_7_Pin
                           D_6_Pin */
  GPIO_InitStruct.Pin = R_S_Pin|R_W_Pin|E_N_Pin|D_7_Pin
 80009ea:	0021      	movs	r1, r4
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	22f8      	movs	r2, #248	; 0xf8
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
                          |D_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	000c      	movs	r4, r1
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2201      	movs	r2, #1
 80009fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	193a      	adds	r2, r7, r4
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 f953 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : D_5_Pin */
  GPIO_InitStruct.Pin = D_5_Pin;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2201      	movs	r2, #1
 8000a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_5_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <MX_GPIO_Init+0x174>)
 8000a32:	0019      	movs	r1, r3
 8000a34:	0010      	movs	r0, r2
 8000a36:	f001 f941 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : D_4_Pin SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = D_4_Pin|SCLK_Pin|SDO_Pin;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	22d0      	movs	r2, #208	; 0xd0
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2201      	movs	r2, #1
 8000a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x178>)
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	f001 f92d 	bl	8001cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b00b      	add	sp, #44	; 0x2c
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	50000800 	.word	0x50000800
 8000a74:	50000400 	.word	0x50000400

08000a78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) Clocker_Segment_Update(&ourClocker);
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d103      	bne.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x18>
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fadb 	bl	8001046 <Clocker_Segment_Update>
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000b0 	.word	0x200000b0
 8000a9c:	200001b8 	.word	0x200001b8

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <HAL_MspInit+0x24>)
 8000abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	0549      	lsls	r1, r1, #21
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_RTC_MspInit+0x28>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_RTC_MspInit+0x2c>)
 8000ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_RTC_MspInit+0x2c>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	02c9      	lsls	r1, r1, #11
 8000af0:	430a      	orrs	r2, r1
 8000af2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40002800 	.word	0x40002800
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d10e      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_TIM_Base_MspInit+0x50>)
 8000b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_TIM_Base_MspInit+0x50>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	200f      	movs	r0, #15
 8000b2a:	f001 f895 	bl	8001c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f001 f8a7 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b34:	e00a      	b.n	8000b4c <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM3)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_TIM_Base_MspInit+0x54>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d105      	bne.n	8000b4c <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_TIM_Base_MspInit+0x50>)
 8000b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_TIM_Base_MspInit+0x50>)
 8000b46:	2102      	movs	r1, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40000400 	.word	0x40000400

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	240c      	movs	r4, #12
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2314      	movs	r3, #20
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f004 fd3c 	bl	80055ec <memset>
  if(huart->Instance==USART4)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <HAL_UART_MspInit+0x80>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d129      	bne.n	8000bd2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0x84>)
 8000b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0x84>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0309      	lsls	r1, r1, #12
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_UART_MspInit+0x84>)
 8000b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0x84>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0x84>)
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART4 GPIO Configuration
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba4:	0021      	movs	r1, r4
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2202      	movs	r2, #2
 8000bb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2206      	movs	r2, #6
 8000bc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	187a      	adds	r2, r7, r1
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 f875 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b009      	add	sp, #36	; 0x24
 8000bd8:	bd90      	pop	{r4, r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40004c00 	.word	0x40004c00
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 ff3a 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <TIM2_IRQHandler+0x14>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 ffbc 	bl	8003b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	200000b0 	.word	0x200000b0

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f004 fd2e 	bl	80056bc <__errno>
 8000c60:	0003      	movs	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	425b      	negs	r3, r3
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	18d2      	adds	r2, r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b006      	add	sp, #24
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20005000 	.word	0x20005000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	2000030c 	.word	0x2000030c
 8000c94:	20000510 	.word	0x20000510

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Reset_Handler>:
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
 8000ca6:	4685      	mov	sp, r0
 8000ca8:	f7ff fff6 	bl	8000c98 <SystemInit>
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:
 8000cb6:	58d4      	ldr	r4, [r2, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:
 8000cbc:	18c4      	adds	r4, r0, r3
 8000cbe:	428c      	cmp	r4, r1
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:
 8000cce:	42a2      	cmp	r2, r4
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>
 8000cd2:	f004 fcf9 	bl	80056c8 <__libc_init_array>
 8000cd6:	f7ff fbef 	bl	80004b8 <main>

08000cda <LoopForever>:
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
 8000cdc:	20005000 	.word	0x20005000
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000070 	.word	0x20000070
 8000ce8:	08005a98 	.word	0x08005a98
 8000cec:	20000070 	.word	0x20000070
 8000cf0:	2000050c 	.word	0x2000050c

08000cf4 <ADC1_COMP_IRQHandler>:
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_COMP_IRQHandler>
	...

08000cf8 <Clocker_Init>:
 *      Author: zero-jedynkowy
 */
#include "Clocker.h"

void Clocker_Init(Clocker * myClocker, RTC_HandleTypeDef * rtcHandle, TIM_HandleTypeDef * timSegment, TIM_HandleTypeDef * timScreen)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
	DF_Init(20);
 8000d06:	2014      	movs	r0, #20
 8000d08:	f000 fac6 	bl	8001298 <DF_Init>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4833      	ldr	r0, [pc, #204]	; (8000de0 <Clocker_Init+0xe8>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	0019      	movs	r1, r3
 8000d16:	f001 f96c 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4830      	ldr	r0, [pc, #192]	; (8000de0 <Clocker_Init+0xe8>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	0019      	movs	r1, r3
 8000d24:	f001 f965 	bl	8001ff2 <HAL_GPIO_WritePin>
	myClocker->maxScreen = 9;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2209      	movs	r2, #9
 8000d2c:	701a      	strb	r2, [r3, #0]
	myClocker->currentScreen = 0;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	705a      	strb	r2, [r3, #1]
	myClocker->screenTimeChanging = 5; //in seconds
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2205      	movs	r2, #5
 8000d38:	709a      	strb	r2, [r3, #2]
	Clocker_Set_Screens(myClocker);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 f851 	bl	8000de4 <Clocker_Set_Screens>
	myClocker->sTime = (RTC_TimeTypeDef *)malloc(sizeof(RTC_TimeTypeDef));
 8000d42:	2014      	movs	r0, #20
 8000d44:	f004 fa84 	bl	8005250 <malloc>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	23a2      	movs	r3, #162	; 0xa2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	50d1      	str	r1, [r2, r3]
	*myClocker->sTime = (RTC_TimeTypeDef){0};
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	23a2      	movs	r3, #162	; 0xa2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	58d3      	ldr	r3, [r2, r3]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2314      	movs	r3, #20
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f004 fc42 	bl	80055ec <memset>
	myClocker->sDate = (RTC_DateTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f004 fa71 	bl	8005250 <malloc>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	0019      	movs	r1, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	23a4      	movs	r3, #164	; 0xa4
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	50d1      	str	r1, [r2, r3]
	*myClocker->sDate = (RTC_DateTypeDef){0};
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	23a4      	movs	r3, #164	; 0xa4
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	58d3      	ldr	r3, [r2, r3]
 8000d82:	0018      	movs	r0, r3
 8000d84:	2304      	movs	r3, #4
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f004 fc2f 	bl	80055ec <memset>
	myClocker->sAlarm = (RTC_AlarmTypeDef *)malloc(sizeof(RTC_DateTypeDef));
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f004 fa5e 	bl	8005250 <malloc>
 8000d94:	0003      	movs	r3, r0
 8000d96:	0019      	movs	r1, r3
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	23a6      	movs	r3, #166	; 0xa6
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	50d1      	str	r1, [r2, r3]
	*myClocker->sAlarm = (RTC_AlarmTypeDef){0};
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	23a6      	movs	r3, #166	; 0xa6
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	58d3      	ldr	r3, [r2, r3]
 8000da8:	0018      	movs	r0, r3
 8000daa:	2328      	movs	r3, #40	; 0x28
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f004 fc1c 	bl	80055ec <memset>
	myClocker->rtcHandle = rtcHandle;
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	23a8      	movs	r3, #168	; 0xa8
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	50d1      	str	r1, [r2, r3]
	HAL_TIM_Base_Start_IT(timSegment);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f002 fe97 	bl	8003af4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(timScreen);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 fe49 	bl	8003a60 <HAL_TIM_Base_Start>
	lcd_init();
 8000dce:	f000 fb6b 	bl	80014a8 <lcd_init>
	lcd_clear();
 8000dd2:	f000 fb3f 	bl	8001454 <lcd_clear>
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b014      	add	sp, #80	; 0x50
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	50000400 	.word	0x50000400

08000de4 <Clocker_Set_Screens>:

void Clocker_Set_Screens(Clocker * myClocker)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	strcpy(myClocker->tableOfScreens[0][0], "WEATHER");
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1cda      	adds	r2, r3, #3
 8000df0:	4b65      	ldr	r3, [pc, #404]	; (8000f88 <Clocker_Set_Screens+0x1a4>)
 8000df2:	0010      	movs	r0, r2
 8000df4:	0019      	movs	r1, r3
 8000df6:	2308      	movs	r3, #8
 8000df8:	001a      	movs	r2, r3
 8000dfa:	f004 fc8c 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[0][1], "%s");
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3313      	adds	r3, #19
 8000e02:	001a      	movs	r2, r3
 8000e04:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <Clocker_Set_Screens+0x1a8>)
 8000e06:	0010      	movs	r0, r2
 8000e08:	0019      	movs	r1, r3
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	f004 fc82 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[1][0], "TEMPERATURE");
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3323      	adds	r3, #35	; 0x23
 8000e16:	001a      	movs	r2, r3
 8000e18:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <Clocker_Set_Screens+0x1ac>)
 8000e1a:	0010      	movs	r0, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	230c      	movs	r3, #12
 8000e20:	001a      	movs	r2, r3
 8000e22:	f004 fc78 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[1][1], "%.1f st. C");
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3333      	adds	r3, #51	; 0x33
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	4b59      	ldr	r3, [pc, #356]	; (8000f94 <Clocker_Set_Screens+0x1b0>)
 8000e2e:	0010      	movs	r0, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	230b      	movs	r3, #11
 8000e34:	001a      	movs	r2, r3
 8000e36:	f004 fc6e 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[2][0], "FEELS LIKE");
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3343      	adds	r3, #67	; 0x43
 8000e3e:	001a      	movs	r2, r3
 8000e40:	4b55      	ldr	r3, [pc, #340]	; (8000f98 <Clocker_Set_Screens+0x1b4>)
 8000e42:	0010      	movs	r0, r2
 8000e44:	0019      	movs	r1, r3
 8000e46:	230b      	movs	r3, #11
 8000e48:	001a      	movs	r2, r3
 8000e4a:	f004 fc64 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[2][1], "%.1f st. C");
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3353      	adds	r3, #83	; 0x53
 8000e52:	001a      	movs	r2, r3
 8000e54:	4b4f      	ldr	r3, [pc, #316]	; (8000f94 <Clocker_Set_Screens+0x1b0>)
 8000e56:	0010      	movs	r0, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	230b      	movs	r3, #11
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	f004 fc5a 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[3][0], "PRESSURE");
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3363      	adds	r3, #99	; 0x63
 8000e66:	001a      	movs	r2, r3
 8000e68:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <Clocker_Set_Screens+0x1b8>)
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	2309      	movs	r3, #9
 8000e70:	001a      	movs	r2, r3
 8000e72:	f004 fc50 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[3][1], "%.0f hPa");
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3373      	adds	r3, #115	; 0x73
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <Clocker_Set_Screens+0x1bc>)
 8000e7e:	0010      	movs	r0, r2
 8000e80:	0019      	movs	r1, r3
 8000e82:	2309      	movs	r3, #9
 8000e84:	001a      	movs	r2, r3
 8000e86:	f004 fc46 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[4][0], "HUMIDITY");
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3383      	adds	r3, #131	; 0x83
 8000e8e:	001a      	movs	r2, r3
 8000e90:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <Clocker_Set_Screens+0x1c0>)
 8000e92:	0010      	movs	r0, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	2309      	movs	r3, #9
 8000e98:	001a      	movs	r2, r3
 8000e9a:	f004 fc3c 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[4][1], "%.1f %");
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3393      	adds	r3, #147	; 0x93
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <Clocker_Set_Screens+0x1c4>)
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	2307      	movs	r3, #7
 8000eac:	001a      	movs	r2, r3
 8000eae:	f004 fc32 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[5][0], "WIND SPEED");
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	33a3      	adds	r3, #163	; 0xa3
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <Clocker_Set_Screens+0x1c8>)
 8000eba:	0010      	movs	r0, r2
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	230b      	movs	r3, #11
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	f004 fc28 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[5][1], "%.1f m.s");
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	33b3      	adds	r3, #179	; 0xb3
 8000eca:	001a      	movs	r2, r3
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <Clocker_Set_Screens+0x1cc>)
 8000ece:	0010      	movs	r0, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	f004 fc1e 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[6][0], "WIND SPEED");
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	33c3      	adds	r3, #195	; 0xc3
 8000ede:	001a      	movs	r2, r3
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <Clocker_Set_Screens+0x1c8>)
 8000ee2:	0010      	movs	r0, r2
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	001a      	movs	r2, r3
 8000eea:	f004 fc14 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[6][1], "%.1f m.s");
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	33d3      	adds	r3, #211	; 0xd3
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <Clocker_Set_Screens+0x1cc>)
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	0019      	movs	r1, r3
 8000efa:	2309      	movs	r3, #9
 8000efc:	001a      	movs	r2, r3
 8000efe:	f004 fc0a 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[7][0], "SUNRISE");
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	33e3      	adds	r3, #227	; 0xe3
 8000f06:	001a      	movs	r2, r3
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <Clocker_Set_Screens+0x1d0>)
 8000f0a:	0010      	movs	r0, r2
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	2308      	movs	r3, #8
 8000f10:	001a      	movs	r2, r3
 8000f12:	f004 fc00 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[7][1], "%d:%d");
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	33f3      	adds	r3, #243	; 0xf3
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <Clocker_Set_Screens+0x1d4>)
 8000f1e:	0010      	movs	r0, r2
 8000f20:	0019      	movs	r1, r3
 8000f22:	2306      	movs	r3, #6
 8000f24:	001a      	movs	r2, r3
 8000f26:	f004 fbf6 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[8][0], "SUNSET");
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	32ff      	adds	r2, #255	; 0xff
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <Clocker_Set_Screens+0x1d8>)
 8000f32:	0010      	movs	r0, r2
 8000f34:	0019      	movs	r1, r3
 8000f36:	2307      	movs	r3, #7
 8000f38:	001a      	movs	r2, r3
 8000f3a:	f004 fbec 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[8][1], "%d:%d");
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3314      	adds	r3, #20
 8000f42:	33ff      	adds	r3, #255	; 0xff
 8000f44:	001a      	movs	r2, r3
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <Clocker_Set_Screens+0x1d4>)
 8000f48:	0010      	movs	r0, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	001a      	movs	r2, r3
 8000f50:	f004 fbe1 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[9][0], "CITY");
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3324      	adds	r3, #36	; 0x24
 8000f58:	33ff      	adds	r3, #255	; 0xff
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <Clocker_Set_Screens+0x1dc>)
 8000f5e:	0010      	movs	r0, r2
 8000f60:	0019      	movs	r1, r3
 8000f62:	2305      	movs	r3, #5
 8000f64:	001a      	movs	r2, r3
 8000f66:	f004 fbd6 	bl	8005716 <memcpy>
	strcpy(myClocker->tableOfScreens[9][1], "%s");
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3334      	adds	r3, #52	; 0x34
 8000f6e:	33ff      	adds	r3, #255	; 0xff
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <Clocker_Set_Screens+0x1a8>)
 8000f74:	0010      	movs	r0, r2
 8000f76:	0019      	movs	r1, r3
 8000f78:	2303      	movs	r3, #3
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	f004 fbcb 	bl	8005716 <memcpy>
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08005940 	.word	0x08005940
 8000f8c:	08005948 	.word	0x08005948
 8000f90:	0800594c 	.word	0x0800594c
 8000f94:	08005958 	.word	0x08005958
 8000f98:	08005964 	.word	0x08005964
 8000f9c:	08005970 	.word	0x08005970
 8000fa0:	0800597c 	.word	0x0800597c
 8000fa4:	08005988 	.word	0x08005988
 8000fa8:	08005994 	.word	0x08005994
 8000fac:	0800599c 	.word	0x0800599c
 8000fb0:	080059a8 	.word	0x080059a8
 8000fb4:	080059b4 	.word	0x080059b4
 8000fb8:	080059bc 	.word	0x080059bc
 8000fbc:	080059c4 	.word	0x080059c4
 8000fc0:	080059cc 	.word	0x080059cc

08000fc4 <Clocker_Set_Time>:

void Clocker_Set_Time(Clocker * myClocker, uint8_t newHours, uint8_t newMinutes, uint8_t newSeconds)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	000c      	movs	r4, r1
 8000fce:	0010      	movs	r0, r2
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	1cfb      	adds	r3, r7, #3
 8000fd4:	1c22      	adds	r2, r4, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	1cbb      	adds	r3, r7, #2
 8000fda:	1c02      	adds	r2, r0, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	1c7b      	adds	r3, r7, #1
 8000fe0:	1c0a      	adds	r2, r1, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Hours = newHours;
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	23a2      	movs	r3, #162	; 0xa2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	58d3      	ldr	r3, [r2, r3]
 8000fec:	1cfa      	adds	r2, r7, #3
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	701a      	strb	r2, [r3, #0]
	myClocker->sTime->Minutes = newMinutes;
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	23a2      	movs	r3, #162	; 0xa2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	58d3      	ldr	r3, [r2, r3]
 8000ffa:	1cba      	adds	r2, r7, #2
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	705a      	strb	r2, [r3, #1]
	myClocker->sTime->Seconds = newSeconds;
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	23a2      	movs	r3, #162	; 0xa2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	58d3      	ldr	r3, [r2, r3]
 8001008:	1c7a      	adds	r2, r7, #1
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	709a      	strb	r2, [r3, #2]
	myClocker->sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	23a2      	movs	r3, #162	; 0xa2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	58d3      	ldr	r3, [r2, r3]
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
	myClocker->sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	23a2      	movs	r3, #162	; 0xa2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	58d3      	ldr	r3, [r2, r3]
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	23a8      	movs	r3, #168	; 0xa8
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	58d0      	ldr	r0, [r2, r3]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	23a2      	movs	r3, #162	; 0xa2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	58d3      	ldr	r3, [r2, r3]
 8001036:	2200      	movs	r2, #0
 8001038:	0019      	movs	r1, r3
 800103a:	f002 f829 	bl	8003090 <HAL_RTC_SetTime>
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b003      	add	sp, #12
 8001044:	bd90      	pop	{r4, r7, pc}

08001046 <Clocker_Segment_Update>:
	myClocker->sAlarm->Alarm = RTC_ALARM_A;
	HAL_RTC_SetAlarm(myClocker->rtcHandle, myClocker->sAlarm, RTC_FORMAT_BCD);
}

void Clocker_Segment_Update(Clocker * myClocker)
{
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	uint8_t tempTime[4] = {0};
 800104e:	240c      	movs	r4, #12
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	HAL_RTC_GetTime(myClocker->rtcHandle, myClocker->sTime, RTC_FORMAT_BIN);
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	23a8      	movs	r3, #168	; 0xa8
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	58d0      	ldr	r0, [r2, r3]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	23a2      	movs	r3, #162	; 0xa2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	58d3      	ldr	r3, [r2, r3]
 8001066:	2200      	movs	r2, #0
 8001068:	0019      	movs	r1, r3
 800106a:	f002 f8bb 	bl	80031e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(myClocker->rtcHandle, myClocker->sDate, RTC_FORMAT_BIN);
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	23a8      	movs	r3, #168	; 0xa8
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	58d0      	ldr	r0, [r2, r3]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	23a4      	movs	r3, #164	; 0xa4
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	58d3      	ldr	r3, [r2, r3]
 800107e:	2200      	movs	r2, #0
 8001080:	0019      	movs	r1, r3
 8001082:	f002 f9a1 	bl	80033c8 <HAL_RTC_GetDate>
	tempTime[0] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)/10);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	23a2      	movs	r3, #162	; 0xa2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	58d3      	ldr	r3, [r2, r3]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	210a      	movs	r1, #10
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff f840 	bl	8000118 <__udivsi3>
 8001098:	0003      	movs	r3, r0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	0018      	movs	r0, r3
 800109e:	f000 f875 	bl	800118c <Clocker_Convert_Int_to_Segment>
 80010a2:	0003      	movs	r3, r0
 80010a4:	001a      	movs	r2, r3
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	701a      	strb	r2, [r3, #0]
	tempTime[1] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Hours)%10);
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	23a2      	movs	r3, #162	; 0xa2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	210a      	movs	r1, #10
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff f8b4 	bl	8000224 <__aeabi_uidivmod>
 80010bc:	000b      	movs	r3, r1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 f863 	bl	800118c <Clocker_Convert_Int_to_Segment>
 80010c6:	0003      	movs	r3, r0
 80010c8:	001a      	movs	r2, r3
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	705a      	strb	r2, [r3, #1]
	tempTime[2] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)/10);
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	23a2      	movs	r3, #162	; 0xa2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	58d3      	ldr	r3, [r2, r3]
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	210a      	movs	r1, #10
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff f81c 	bl	8000118 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	0018      	movs	r0, r3
 80010e6:	f000 f851 	bl	800118c <Clocker_Convert_Int_to_Segment>
 80010ea:	0003      	movs	r3, r0
 80010ec:	001a      	movs	r2, r3
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	709a      	strb	r2, [r3, #2]
	tempTime[3] = Clocker_Convert_Int_to_Segment((myClocker->sTime->Minutes)%10);
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	23a2      	movs	r3, #162	; 0xa2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	210a      	movs	r1, #10
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff f890 	bl	8000224 <__aeabi_uidivmod>
 8001104:	000b      	movs	r3, r1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	0018      	movs	r0, r3
 800110a:	f000 f83f 	bl	800118c <Clocker_Convert_Int_to_Segment>
 800110e:	0003      	movs	r3, r0
 8001110:	001a      	movs	r2, r3
 8001112:	193b      	adds	r3, r7, r4
 8001114:	70da      	strb	r2, [r3, #3]
	tm1637_DisplayHandle(7, tempTime);
 8001116:	193b      	adds	r3, r7, r4
 8001118:	0019      	movs	r1, r3
 800111a:	2007      	movs	r0, #7
 800111c:	f000 fbc4 	bl	80018a8 <tm1637_DisplayHandle>
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b005      	add	sp, #20
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <Clocker_Change_Screen>:

void Clocker_Change_Screen(Clocker * myClocker)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	myClocker->currentScreen++;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	705a      	strb	r2, [r3, #1]
	if(myClocker->currentScreen >= 10)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	2b09      	cmp	r3, #9
 8001142:	d902      	bls.n	800114a <Clocker_Change_Screen+0x22>
	{
		myClocker->currentScreen = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	705a      	strb	r2, [r3, #1]
	}
	lcd_clear();
 800114a:	f000 f983 	bl	8001454 <lcd_clear>
	lcd_put_cur(0, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	2000      	movs	r0, #0
 8001152:	f000 f98a 	bl	800146a <lcd_put_cur>
	lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][0]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	015b      	lsls	r3, r3, #5
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	18d3      	adds	r3, r2, r3
 8001160:	3303      	adds	r3, #3
 8001162:	0018      	movs	r0, r3
 8001164:	f000 f9de 	bl	8001524 <lcd_send_string>
	lcd_put_cur(1, 0);
 8001168:	2100      	movs	r1, #0
 800116a:	2001      	movs	r0, #1
 800116c:	f000 f97d 	bl	800146a <lcd_put_cur>
	lcd_send_string(myClocker->tableOfScreens[myClocker->currentScreen][1]);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	785b      	ldrb	r3, [r3, #1]
 8001174:	015b      	lsls	r3, r3, #5
 8001176:	3310      	adds	r3, #16
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	18d3      	adds	r3, r2, r3
 800117c:	3303      	adds	r3, #3
 800117e:	0018      	movs	r0, r3
 8001180:	f000 f9d0 	bl	8001524 <lcd_send_string>
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <Clocker_Convert_Int_to_Segment>:
{
	//tutaj rób
}

uint8_t Clocker_Convert_Int_to_Segment(uint8_t c)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]
	switch(c)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b09      	cmp	r3, #9
 800119e:	d818      	bhi.n	80011d2 <Clocker_Convert_Int_to_Segment+0x46>
 80011a0:	009a      	lsls	r2, r3, #2
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <Clocker_Convert_Int_to_Segment+0x50>)
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	469f      	mov	pc, r3
	{
		case 0 : return 0x3f;
 80011aa:	233f      	movs	r3, #63	; 0x3f
 80011ac:	e012      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 1 : return 0x06;
 80011ae:	2306      	movs	r3, #6
 80011b0:	e010      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 2 : return 0x5b;
 80011b2:	235b      	movs	r3, #91	; 0x5b
 80011b4:	e00e      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 3 : return 0x4f;
 80011b6:	234f      	movs	r3, #79	; 0x4f
 80011b8:	e00c      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 4 : return 0x66;
 80011ba:	2366      	movs	r3, #102	; 0x66
 80011bc:	e00a      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 5 : return 0x6d;
 80011be:	236d      	movs	r3, #109	; 0x6d
 80011c0:	e008      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 6 : return 0x7d;
 80011c2:	237d      	movs	r3, #125	; 0x7d
 80011c4:	e006      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 7 : return 0x07;
 80011c6:	2307      	movs	r3, #7
 80011c8:	e004      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 8 : return 0x7f;
 80011ca:	237f      	movs	r3, #127	; 0x7f
 80011cc:	e002      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
		case 9 : return 0x6f;
 80011ce:	236f      	movs	r3, #111	; 0x6f
 80011d0:	e000      	b.n	80011d4 <Clocker_Convert_Int_to_Segment+0x48>
	}
	return 0x3f;
 80011d2:	233f      	movs	r3, #63	; 0x3f
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	080059fc 	.word	0x080059fc

080011e0 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0004      	movs	r4, r0
 80011e8:	0008      	movs	r0, r1
 80011ea:	0011      	movs	r1, r2
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	1c22      	adds	r2, r4, #0
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	1dbb      	adds	r3, r7, #6
 80011f4:	1c02      	adds	r2, r0, #0
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	1d7b      	adds	r3, r7, #5
 80011fa:	1c0a      	adds	r2, r1, #0
 80011fc:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	b29a      	uxth	r2, r3
 800120e:	1d7b      	adds	r3, r7, #5
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	18d3      	adds	r3, r2, r3
 8001216:	b29a      	uxth	r2, r3
 8001218:	2016      	movs	r0, #22
 800121a:	183b      	adds	r3, r7, r0
 800121c:	3206      	adds	r2, #6
 800121e:	32ff      	adds	r2, #255	; 0xff
 8001220:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 8001222:	183b      	adds	r3, r7, r0
 8001224:	183a      	adds	r2, r7, r0
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	4252      	negs	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800122c:	210c      	movs	r1, #12
 800122e:	187b      	adds	r3, r7, r1
 8001230:	227e      	movs	r2, #126	; 0x7e
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	187b      	adds	r3, r7, r1
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	705a      	strb	r2, [r3, #1]
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2206      	movs	r2, #6
 800123e:	709a      	strb	r2, [r3, #2]
 8001240:	187b      	adds	r3, r7, r1
 8001242:	1dfa      	adds	r2, r7, #7
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	70da      	strb	r2, [r3, #3]
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	711a      	strb	r2, [r3, #4]
 800124e:	187b      	adds	r3, r7, r1
 8001250:	1dba      	adds	r2, r7, #6
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	715a      	strb	r2, [r3, #5]
 8001256:	187b      	adds	r3, r7, r1
 8001258:	1d7a      	adds	r2, r7, #5
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	719a      	strb	r2, [r3, #6]
 800125e:	183b      	adds	r3, r7, r0
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	187b      	adds	r3, r7, r1
 800126a:	71da      	strb	r2, [r3, #7]
 800126c:	183b      	adds	r3, r7, r0
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	187b      	adds	r3, r7, r1
 8001274:	721a      	strb	r2, [r3, #8]
 8001276:	187b      	adds	r3, r7, r1
 8001278:	22ef      	movs	r2, #239	; 0xef
 800127a:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800127c:	2301      	movs	r3, #1
 800127e:	425b      	negs	r3, r3
 8001280:	1879      	adds	r1, r7, r1
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <Send_cmd+0xb4>)
 8001284:	220a      	movs	r2, #10
 8001286:	f003 f80d 	bl	80042a4 <HAL_UART_Transmit>
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b007      	add	sp, #28
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	20000130 	.word	0x20000130

08001298 <DF_Init>:
  HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	0002      	movs	r2, r0
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 80012a4:	2202      	movs	r2, #2
 80012a6:	2100      	movs	r1, #0
 80012a8:	203f      	movs	r0, #63	; 0x3f
 80012aa:	f7ff ff99 	bl	80011e0 <Send_cmd>
	HAL_Delay(200);
 80012ae:	20c8      	movs	r0, #200	; 0xc8
 80012b0:	f000 fc02 	bl	8001ab8 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	001a      	movs	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	2006      	movs	r0, #6
 80012be:	f7ff ff8f 	bl	80011e0 <Send_cmd>
	HAL_Delay(500);
 80012c2:	23fa      	movs	r3, #250	; 0xfa
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fbf6 	bl	8001ab8 <HAL_Delay>
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0002      	movs	r2, r0
 80012dc:	1dbb      	adds	r3, r7, #6
 80012de:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <delay+0x30>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <delay+0x30>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3f8      	bcc.n	80012ea <delay+0x16>
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	200000f0 	.word	0x200000f0

08001308 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	23a0      	movs	r3, #160	; 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	2120      	movs	r1, #32
 8001320:	0018      	movs	r0, r3
 8001322:	f000 fe66 	bl	8001ff2 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2201      	movs	r2, #1
 8001330:	4013      	ands	r3, r2
 8001332:	b2da      	uxtb	r2, r3
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	0059      	lsls	r1, r3, #1
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fe58 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2201      	movs	r2, #1
 800134c:	4013      	ands	r3, r2
 800134e:	b2da      	uxtb	r2, r3
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	0099      	lsls	r1, r3, #2
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	0018      	movs	r0, r3
 800135a:	f000 fe4a 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2201      	movs	r2, #1
 8001368:	4013      	ands	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4813      	ldr	r0, [pc, #76]	; (80013bc <send_to_lcd+0xb4>)
 800136e:	001a      	movs	r2, r3
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	f000 fe3e 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2201      	movs	r2, #1
 800137c:	4013      	ands	r3, r2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <send_to_lcd+0xb8>)
 8001382:	001a      	movs	r2, r3
 8001384:	2140      	movs	r1, #64	; 0x40
 8001386:	f000 fe34 	bl	8001ff2 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800138a:	23a0      	movs	r3, #160	; 0xa0
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	2201      	movs	r2, #1
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	0018      	movs	r0, r3
 8001394:	f000 fe2d 	bl	8001ff2 <HAL_GPIO_WritePin>
	delay (20);
 8001398:	2014      	movs	r0, #20
 800139a:	f7ff ff9b 	bl	80012d4 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800139e:	23a0      	movs	r3, #160	; 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	2200      	movs	r2, #0
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 fe23 	bl	8001ff2 <HAL_GPIO_WritePin>
	delay (20);
 80013ac:	2014      	movs	r0, #20
 80013ae:	f7ff ff91 	bl	80012d4 <delay>
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	50000800 	.word	0x50000800
 80013c0:	50000400 	.word	0x50000400

080013c4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	0002      	movs	r2, r0
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80013d0:	200f      	movs	r0, #15
 80013d2:	183b      	adds	r3, r7, r0
 80013d4:	1dfa      	adds	r2, r7, #7
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	0912      	lsrs	r2, r2, #4
 80013da:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80013dc:	0004      	movs	r4, r0
 80013de:	183b      	adds	r3, r7, r0
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2100      	movs	r1, #0
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff8f 	bl	8001308 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80013ea:	0020      	movs	r0, r4
 80013ec:	183b      	adds	r3, r7, r0
 80013ee:	1dfa      	adds	r2, r7, #7
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	210f      	movs	r1, #15
 80013f4:	400a      	ands	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 80013f8:	183b      	adds	r3, r7, r0
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	0018      	movs	r0, r3
 8001400:	f7ff ff82 	bl	8001308 <send_to_lcd>
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b005      	add	sp, #20
 800140a:	bd90      	pop	{r4, r7, pc}

0800140c <lcd_send_data>:

void lcd_send_data (char data)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	0002      	movs	r2, r0
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8001418:	200f      	movs	r0, #15
 800141a:	183b      	adds	r3, r7, r0
 800141c:	1dfa      	adds	r2, r7, #7
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	0912      	lsrs	r2, r2, #4
 8001422:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001424:	0004      	movs	r4, r0
 8001426:	183b      	adds	r3, r7, r0
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2101      	movs	r1, #1
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff ff6b 	bl	8001308 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8001432:	0020      	movs	r0, r4
 8001434:	183b      	adds	r3, r7, r0
 8001436:	1dfa      	adds	r2, r7, #7
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	210f      	movs	r1, #15
 800143c:	400a      	ands	r2, r1
 800143e:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8001440:	183b      	adds	r3, r7, r0
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff ff5e 	bl	8001308 <send_to_lcd>
}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b005      	add	sp, #20
 8001452:	bd90      	pop	{r4, r7, pc}

08001454 <lcd_clear>:

void lcd_clear (void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff ffb3 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(2);
 800145e:	2002      	movs	r0, #2
 8001460:	f000 fb2a 	bl	8001ab8 <HAL_Delay>
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
    switch (row)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <lcd_put_cur+0x18>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <lcd_put_cur+0x22>
 8001480:	e009      	b.n	8001496 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	4313      	orrs	r3, r2
 8001488:	603b      	str	r3, [r7, #0]
            break;
 800148a:	e004      	b.n	8001496 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	22c0      	movs	r2, #192	; 0xc0
 8001490:	4313      	orrs	r3, r2
 8001492:	603b      	str	r3, [r7, #0]
            break;
 8001494:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	0018      	movs	r0, r3
 800149c:	f7ff ff92 	bl	80013c4 <lcd_send_cmd>
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <lcd_init>:


void lcd_init (void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80014ac:	2032      	movs	r0, #50	; 0x32
 80014ae:	f000 fb03 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80014b2:	2030      	movs	r0, #48	; 0x30
 80014b4:	f7ff ff86 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 fafd 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80014be:	2030      	movs	r0, #48	; 0x30
 80014c0:	f7ff ff80 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80014c4:	2001      	movs	r0, #1
 80014c6:	f000 faf7 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80014ca:	2030      	movs	r0, #48	; 0x30
 80014cc:	f7ff ff7a 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(10);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f000 faf1 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80014d6:	2020      	movs	r0, #32
 80014d8:	f7ff ff74 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(10);
 80014dc:	200a      	movs	r0, #10
 80014de:	f000 faeb 	bl	8001ab8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80014e2:	2028      	movs	r0, #40	; 0x28
 80014e4:	f7ff ff6e 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fae5 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80014ee:	2008      	movs	r0, #8
 80014f0:	f7ff ff68 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(1);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f000 fadf 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ff62 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f000 fad9 	bl	8001ab8 <HAL_Delay>
	HAL_Delay(1);
 8001506:	2001      	movs	r0, #1
 8001508:	f000 fad6 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800150c:	2006      	movs	r0, #6
 800150e:	f7ff ff59 	bl	80013c4 <lcd_send_cmd>
	HAL_Delay(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 fad0 	bl	8001ab8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001518:	200c      	movs	r0, #12
 800151a:	f7ff ff53 	bl	80013c4 <lcd_send_cmd>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800152c:	e006      	b.n	800153c <lcd_send_string+0x18>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff ff68 	bl	800140c <lcd_send_data>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f4      	bne.n	800152e <lcd_send_string+0xa>
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <tm1637_CLKhigh+0x34>)
 800155a:	2201      	movs	r2, #1
 800155c:	0019      	movs	r1, r3
 800155e:	f000 fd48 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <tm1637_CLKhigh+0x34>)
 8001568:	2201      	movs	r2, #1
 800156a:	0019      	movs	r1, r3
 800156c:	f000 fd41 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <tm1637_CLKhigh+0x34>)
 8001576:	2201      	movs	r2, #1
 8001578:	0019      	movs	r1, r3
 800157a:	f000 fd3a 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	50000400 	.word	0x50000400

08001588 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <tm1637_CLKlow+0x34>)
 8001592:	2200      	movs	r2, #0
 8001594:	0019      	movs	r1, r3
 8001596:	f000 fd2c 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <tm1637_CLKlow+0x34>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	0019      	movs	r1, r3
 80015a4:	f000 fd25 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <tm1637_CLKlow+0x34>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	0019      	movs	r1, r3
 80015b2:	f000 fd1e 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	50000400 	.word	0x50000400

080015c0 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <tm1637_SDOhigh+0x34>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	0019      	movs	r1, r3
 80015ce:	f000 fd10 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <tm1637_SDOhigh+0x34>)
 80015d8:	2201      	movs	r2, #1
 80015da:	0019      	movs	r1, r3
 80015dc:	f000 fd09 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <tm1637_SDOhigh+0x34>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	0019      	movs	r1, r3
 80015ea:	f000 fd02 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	50000400 	.word	0x50000400

080015f8 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <tm1637_SDOlow+0x34>)
 8001602:	2200      	movs	r2, #0
 8001604:	0019      	movs	r1, r3
 8001606:	f000 fcf4 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <tm1637_SDOlow+0x34>)
 8001610:	2200      	movs	r2, #0
 8001612:	0019      	movs	r1, r3
 8001614:	f000 fced 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <tm1637_SDOlow+0x34>)
 800161e:	2200      	movs	r2, #0
 8001620:	0019      	movs	r1, r3
 8001622:	f000 fce6 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	50000400 	.word	0x50000400

08001630 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8001634:	f7ff ff8c 	bl	8001550 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8001638:	f7ff ffc2 	bl	80015c0 <tm1637_SDOhigh>
	tm1637_SDOlow();
 800163c:	f7ff ffdc 	bl	80015f8 <tm1637_SDOlow>

	tm1637_CLKlow();
 8001640:	f7ff ffa2 	bl	8001588 <tm1637_CLKlow>
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 800164e:	f7ff ff9b 	bl	8001588 <tm1637_CLKlow>
	tm1637_SDOlow();
 8001652:	f7ff ffd1 	bl	80015f8 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8001656:	f7ff ff7b 	bl	8001550 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 800165a:	f7ff ffb1 	bl	80015c0 <tm1637_SDOhigh>
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800166c:	230f      	movs	r3, #15
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e01a      	b.n	80016ac <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 8001676:	f7ff ff87 	bl	8001588 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 800167a:	230f      	movs	r3, #15
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b25b      	sxtb	r3, r3
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 800168c:	f7ff ff98 	bl	80015c0 <tm1637_SDOhigh>
 8001690:	e001      	b.n	8001696 <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 8001692:	f7ff ffb1 	bl	80015f8 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8001696:	f7ff ff5b 	bl	8001550 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800169a:	210f      	movs	r1, #15
 800169c:	187b      	adds	r3, r7, r1
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	230f      	movs	r3, #15
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	2b07      	cmp	r3, #7
 80016b6:	ddde      	ble.n	8001676 <tm1637_DataOut+0x12>
	} 
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 80016ca:	230c      	movs	r3, #12
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80016d6:	2317      	movs	r3, #23
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e018      	b.n	8001712 <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	001a      	movs	r2, r3
 80016e6:	2117      	movs	r1, #23
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	411a      	asrs	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	4193      	sbcs	r3, r2
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	0008      	movs	r0, r1
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	0011      	movs	r1, r2
 8001702:	220c      	movs	r2, #12
 8001704:	18ba      	adds	r2, r7, r2
 8001706:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8001708:	183b      	adds	r3, r7, r0
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	183b      	adds	r3, r7, r0
 800170e:	3201      	adds	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	2317      	movs	r3, #23
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b07      	cmp	r3, #7
 800171a:	d9e1      	bls.n	80016e0 <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 800171c:	f7ff ff88 	bl	8001630 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8001720:	230c      	movs	r3, #12
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff ff9d 	bl	8001664 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 800172a:	f7ff ff2d 	bl	8001588 <tm1637_CLKlow>
	tm1637_CLKhigh();
 800172e:	f7ff ff0f 	bl	8001550 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8001732:	f000 f89f 	bl	8001874 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	001a      	movs	r2, r3
 800173c:	23c0      	movs	r3, #192	; 0xc0
 800173e:	4013      	ands	r3, r2
 8001740:	2bc0      	cmp	r3, #192	; 0xc0
 8001742:	d001      	beq.n	8001748 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8001744:	f7ff ff81 	bl	800164a <tm1637_EndPacket>
	}

}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b006      	add	sp, #24
 800174e:	bd80      	pop	{r7, pc}

08001750 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	000a      	movs	r2, r1
 800175a:	1cfb      	adds	r3, r7, #3
 800175c:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 800175e:	230c      	movs	r3, #12
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 800176a:	2317      	movs	r3, #23
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e037      	b.n	80017e4 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 8001774:	2316      	movs	r3, #22
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e01c      	b.n	80017b8 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 800177e:	2317      	movs	r3, #23
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	18d3      	adds	r3, r2, r3
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	001a      	movs	r2, r3
 800178c:	2116      	movs	r1, #22
 800178e:	187b      	adds	r3, r7, r1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	411a      	asrs	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	4193      	sbcs	r3, r2
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	0008      	movs	r0, r1
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	0011      	movs	r1, r2
 80017a8:	220c      	movs	r2, #12
 80017aa:	18ba      	adds	r2, r7, r2
 80017ac:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	3201      	adds	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	2316      	movs	r3, #22
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d9dd      	bls.n	800177e <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 80017c2:	230c      	movs	r3, #12
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff ff4c 	bl	8001664 <tm1637_DataOut>
		tm1637_CLKlow();
 80017cc:	f7ff fedc 	bl	8001588 <tm1637_CLKlow>
		tm1637_CLKhigh();
 80017d0:	f7ff febe 	bl	8001550 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 80017d4:	f000 f84e 	bl	8001874 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 80017d8:	2117      	movs	r1, #23
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	3201      	adds	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	2317      	movs	r3, #23
 80017e6:	18fa      	adds	r2, r7, r3
 80017e8:	1cfb      	adds	r3, r7, #3
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3c0      	bcc.n	8001774 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 80017f2:	f7ff ff2a 	bl	800164a <tm1637_EndPacket>


}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b006      	add	sp, #24
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	0002      	movs	r2, r0
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 800180c:	240c      	movs	r4, #12
 800180e:	193b      	adds	r3, r7, r4
 8001810:	0018      	movs	r0, r3
 8001812:	2314      	movs	r3, #20
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f003 fee8 	bl	80055ec <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 800181c:	0021      	movs	r1, r4
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0052      	lsls	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <tm1637_Initialize+0x52>
 800183a:	2b01      	cmp	r3, #1
 800183c:	d114      	bne.n	8001868 <tm1637_Initialize+0x68>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001844:	187b      	adds	r3, r7, r1
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <tm1637_Initialize+0x70>)
 8001848:	0019      	movs	r1, r3
 800184a:	0010      	movs	r0, r2
 800184c:	f000 fa36 	bl	8001cbc <HAL_GPIO_Init>
			break;
 8001850:	e00a      	b.n	8001868 <tm1637_Initialize+0x68>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	210c      	movs	r1, #12
 8001854:	187b      	adds	r3, r7, r1
 8001856:	2201      	movs	r2, #1
 8001858:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	187b      	adds	r3, r7, r1
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <tm1637_Initialize+0x70>)
 800185e:	0019      	movs	r1, r3
 8001860:	0010      	movs	r0, r2
 8001862:	f000 fa2b 	bl	8001cbc <HAL_GPIO_Init>
			break;
 8001866:	46c0      	nop			; (mov r8, r8)

	}

}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b009      	add	sp, #36	; 0x24
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	50000c00 	.word	0x50000c00

08001874 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ffc1 	bl	8001800 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 800187e:	f7ff fe83 	bl	8001588 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8001882:	e002      	b.n	800188a <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff ffbb 	bl	8001800 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <tm1637_ACKcheck+0x30>)
 8001890:	0019      	movs	r1, r3
 8001892:	0010      	movs	r0, r2
 8001894:	f000 fb90 	bl	8001fb8 <HAL_GPIO_ReadPin>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d1f3      	bne.n	8001884 <tm1637_ACKcheck+0x10>
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50000400 	.word	0x50000400

080018a8 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	0002      	movs	r2, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 80018b6:	210c      	movs	r1, #12
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <tm1637_DisplayHandle+0x78>)
 80018bc:	7812      	ldrb	r2, [r2, #0]
 80018be:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 80018c0:	250f      	movs	r5, #15
 80018c2:	197b      	adds	r3, r7, r5
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 80018c8:	1dfb      	adds	r3, r7, #7
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b07      	cmp	r3, #7
 80018ce:	d81f      	bhi.n	8001910 <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80018d6:	000c      	movs	r4, r1
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	0018      	movs	r0, r3
 80018dc:	f7ff fef1 	bl	80016c2 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 80018e0:	0021      	movs	r1, r4
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	22c0      	movs	r2, #192	; 0xc0
 80018e6:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff fee9 	bl	80016c2 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2104      	movs	r1, #4
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff ff2b 	bl	8001750 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 f810 	bl	8001924 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8001904:	197b      	adds	r3, r7, r5
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 800190a:	197b      	adds	r3, r7, r5
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	e002      	b.n	8001916 <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 8001910:	230f      	movs	r3, #15
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b004      	add	sp, #16
 800191c:	bdb0      	pop	{r4, r5, r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	080059d4 	.word	0x080059d4

08001924 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 8001930:	230c      	movs	r3, #12
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 800193c:	2316      	movs	r3, #22
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b07      	cmp	r3, #7
 800194a:	d83e      	bhi.n	80019ca <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	1dfa      	adds	r2, r7, #7
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	2178      	movs	r1, #120	; 0x78
 8001954:	4249      	negs	r1, r1
 8001956:	430a      	orrs	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 800195a:	2317      	movs	r3, #23
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e017      	b.n	8001994 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 8001964:	1dfb      	adds	r3, r7, #7
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	2117      	movs	r1, #23
 800196a:	187b      	adds	r3, r7, r1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	411a      	asrs	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	4193      	sbcs	r3, r2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	0008      	movs	r0, r1
 800197e:	187b      	adds	r3, r7, r1
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0011      	movs	r1, r2
 8001984:	220c      	movs	r2, #12
 8001986:	18ba      	adds	r2, r7, r2
 8001988:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 800198a:	183b      	adds	r3, r7, r0
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	183b      	adds	r3, r7, r0
 8001990:	3201      	adds	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	2317      	movs	r3, #23
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b07      	cmp	r3, #7
 800199c:	d9e2      	bls.n	8001964 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 800199e:	f7ff fe47 	bl	8001630 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 80019a2:	230c      	movs	r3, #12
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff fe5c 	bl	8001664 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 80019ac:	f7ff fdec 	bl	8001588 <tm1637_CLKlow>
		tm1637_CLKhigh();
 80019b0:	f7ff fdce 	bl	8001550 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 80019b4:	f7ff ff5e 	bl	8001874 <tm1637_ACKcheck>
		tm1637_EndPacket();
 80019b8:	f7ff fe47 	bl	800164a <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 80019bc:	2116      	movs	r1, #22
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	e002      	b.n	80019d0 <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 80019ca:	2316      	movs	r3, #22
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781b      	ldrb	r3, [r3, #0]
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b006      	add	sp, #24
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x3c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_Init+0x3c>)
 80019ea:	2140      	movs	r1, #64	; 0x40
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 f811 	bl	8001a18 <HAL_InitTick>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e001      	b.n	8001a06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a02:	f7ff f853 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40022000 	.word	0x40022000

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a22:	681c      	ldr	r4, [r3, #0]
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_InitTick+0x60>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	0019      	movs	r1, r3
 8001a2a:	23fa      	movs	r3, #250	; 0xfa
 8001a2c:	0098      	lsls	r0, r3, #2
 8001a2e:	f7fe fb73 	bl	8000118 <__udivsi3>
 8001a32:	0003      	movs	r3, r0
 8001a34:	0019      	movs	r1, r3
 8001a36:	0020      	movs	r0, r4
 8001a38:	f7fe fb6e 	bl	8000118 <__udivsi3>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f92f 	bl	8001ca2 <HAL_SYSTICK_Config>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e00f      	b.n	8001a6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d80b      	bhi.n	8001a6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	2301      	movs	r3, #1
 8001a56:	425b      	negs	r3, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f8fc 	bl	8001c58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_InitTick+0x64>)
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b003      	add	sp, #12
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	001a      	movs	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	18d2      	adds	r2, r2, r3
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000310 	.word	0x20000310

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	20000310 	.word	0x20000310

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	189b      	adds	r3, r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	f7ff ffe0 	bl	8001aa4 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	20000008 	.word	0x20000008

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	0002      	movs	r2, r0
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b7f      	cmp	r3, #127	; 0x7f
 8001b12:	d809      	bhi.n	8001b28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	001a      	movs	r2, r3
 8001b1a:	231f      	movs	r3, #31
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_EnableIRQ+0x30>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	4091      	lsls	r1, r2
 8001b24:	000a      	movs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
  }
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b7f      	cmp	r3, #127	; 0x7f
 8001b48:	d828      	bhi.n	8001b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b4a:	4a2f      	ldr	r2, [pc, #188]	; (8001c08 <__NVIC_SetPriority+0xd4>)
 8001b4c:	1dfb      	adds	r3, r7, #7
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	33c0      	adds	r3, #192	; 0xc0
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	589b      	ldr	r3, [r3, r2]
 8001b5a:	1dfa      	adds	r2, r7, #7
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	0011      	movs	r1, r2
 8001b60:	2203      	movs	r2, #3
 8001b62:	400a      	ands	r2, r1
 8001b64:	00d2      	lsls	r2, r2, #3
 8001b66:	21ff      	movs	r1, #255	; 0xff
 8001b68:	4091      	lsls	r1, r2
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	43d2      	mvns	r2, r2
 8001b6e:	401a      	ands	r2, r3
 8001b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	22ff      	movs	r2, #255	; 0xff
 8001b78:	401a      	ands	r2, r3
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	2303      	movs	r3, #3
 8001b82:	4003      	ands	r3, r0
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b88:	481f      	ldr	r0, [pc, #124]	; (8001c08 <__NVIC_SetPriority+0xd4>)
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	430a      	orrs	r2, r1
 8001b94:	33c0      	adds	r3, #192	; 0xc0
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b9a:	e031      	b.n	8001c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <__NVIC_SetPriority+0xd8>)
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	3b08      	subs	r3, #8
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3306      	adds	r3, #6
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1dfa      	adds	r2, r7, #7
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	0011      	movs	r1, r2
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	00d2      	lsls	r2, r2, #3
 8001bc2:	21ff      	movs	r1, #255	; 0xff
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	000a      	movs	r2, r1
 8001bc8:	43d2      	mvns	r2, r2
 8001bca:	401a      	ands	r2, r3
 8001bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	22ff      	movs	r2, #255	; 0xff
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	2303      	movs	r3, #3
 8001bde:	4003      	ands	r3, r0
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <__NVIC_SetPriority+0xd8>)
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	001c      	movs	r4, r3
 8001bec:	230f      	movs	r3, #15
 8001bee:	4023      	ands	r3, r4
 8001bf0:	3b08      	subs	r3, #8
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	18c3      	adds	r3, r0, r3
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b003      	add	sp, #12
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	045b      	lsls	r3, r3, #17
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d301      	bcc.n	8001c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c24:	2301      	movs	r3, #1
 8001c26:	e010      	b.n	8001c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <SysTick_Config+0x44>)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c30:	2301      	movs	r3, #1
 8001c32:	425b      	negs	r3, r3
 8001c34:	2103      	movs	r1, #3
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff ff7c 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x44>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x44>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	210f      	movs	r1, #15
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	1c02      	adds	r2, r0, #0
 8001c68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	0011      	movs	r1, r2
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b004      	add	sp, #16
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	0002      	movs	r2, r0
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ff33 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff ffaf 	bl	8001c10 <SysTick_Config>
 8001cb2:	0003      	movs	r3, r0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cd2:	e155      	b.n	8001f80 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d100      	bne.n	8001cec <HAL_GPIO_Init+0x30>
 8001cea:	e146      	b.n	8001f7a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d005      	beq.n	8001d04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d130      	bne.n	8001d66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	409a      	lsls	r2, r3
 8001d12:	0013      	movs	r3, r2
 8001d14:	43da      	mvns	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	409a      	lsls	r2, r3
 8001d26:	0013      	movs	r3, r2
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	2201      	movs	r2, #1
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d017      	beq.n	8001da2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	43da      	mvns	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	409a      	lsls	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d123      	bne.n	8001df6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	58d3      	ldr	r3, [r2, r3]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2107      	movs	r1, #7
 8001dda:	400b      	ands	r3, r1
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	6939      	ldr	r1, [r7, #16]
 8001df4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	401a      	ands	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4013      	ands	r3, r2
 8001e34:	d100      	bne.n	8001e38 <HAL_GPIO_Init+0x17c>
 8001e36:	e0a0      	b.n	8001f7a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e38:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	589b      	ldr	r3, [r3, r2]
 8001e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4013      	ands	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	43da      	mvns	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	23a0      	movs	r3, #160	; 0xa0
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d01f      	beq.n	8001eb2 <HAL_GPIO_Init+0x1f6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4a      	ldr	r2, [pc, #296]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0x1f2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <HAL_GPIO_Init+0x2e8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_GPIO_Init+0x2ec>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x1ea>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x1e6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a46      	ldr	r2, [pc, #280]	; (8001fb0 <HAL_GPIO_Init+0x2f4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x1e2>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x1f8>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x1f8>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x1f8>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x1f8>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x1f8>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x1f8>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	400a      	ands	r2, r1
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	035b      	lsls	r3, r3, #13
 8001eea:	4013      	ands	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	40da      	lsrs	r2, r3
 8001f88:	1e13      	subs	r3, r2, #0
 8001f8a:	d000      	beq.n	8001f8e <HAL_GPIO_Init+0x2d2>
 8001f8c:	e6a2      	b.n	8001cd4 <HAL_GPIO_Init+0x18>
  }
}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b006      	add	sp, #24
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	50000400 	.word	0x50000400
 8001fa4:	50000800 	.word	0x50000800
 8001fa8:	50000c00 	.word	0x50000c00
 8001fac:	50001000 	.word	0x50001000
 8001fb0:	50001c00 	.word	0x50001c00
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	1cbb      	adds	r3, r7, #2
 8001fc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	1cba      	adds	r2, r7, #2
 8001fcc:	8812      	ldrh	r2, [r2, #0]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fdc:	230f      	movs	r3, #15
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b004      	add	sp, #16
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	0008      	movs	r0, r1
 8001ffc:	0011      	movs	r1, r2
 8001ffe:	1cbb      	adds	r3, r7, #2
 8002000:	1c02      	adds	r2, r0, #0
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	1c7b      	adds	r3, r7, #1
 8002006:	1c0a      	adds	r2, r1, #0
 8002008:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200a:	1c7b      	adds	r3, r7, #1
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	1cbb      	adds	r3, r7, #2
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800201a:	e003      	b.n	8002024 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800201c:	1cbb      	adds	r3, r7, #2
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	f000 fbbf 	bl	80027be <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002040:	4bc9      	ldr	r3, [pc, #804]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	220c      	movs	r2, #12
 8002046:	4013      	ands	r3, r2
 8002048:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204a:	4bc7      	ldr	r3, [pc, #796]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x36>
 8002060:	e07e      	b.n	8002160 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d007      	beq.n	8002078 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x68>
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	429a      	cmp	r2, r3
 8002076:	d10d      	bne.n	8002094 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	4bbb      	ldr	r3, [pc, #748]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	d100      	bne.n	8002086 <HAL_RCC_OscConfig+0x5a>
 8002084:	e06b      	b.n	800215e <HAL_RCC_OscConfig+0x132>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d167      	bne.n	800215e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f000 fb95 	bl	80027be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	025b      	lsls	r3, r3, #9
 800209c:	429a      	cmp	r2, r3
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x84>
 80020a0:	4bb1      	ldr	r3, [pc, #708]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4bb0      	ldr	r3, [pc, #704]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	0249      	lsls	r1, r1, #9
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e027      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	23a0      	movs	r3, #160	; 0xa0
 80020b6:	02db      	lsls	r3, r3, #11
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d10e      	bne.n	80020da <HAL_RCC_OscConfig+0xae>
 80020bc:	4baa      	ldr	r3, [pc, #680]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4ba9      	ldr	r3, [pc, #676]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	02c9      	lsls	r1, r1, #11
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	4ba7      	ldr	r3, [pc, #668]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4ba6      	ldr	r3, [pc, #664]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0249      	lsls	r1, r1, #9
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e012      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020da:	4ba3      	ldr	r3, [pc, #652]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4ba2      	ldr	r3, [pc, #648]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020e0:	49a2      	ldr	r1, [pc, #648]	; (800236c <HAL_RCC_OscConfig+0x340>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	4ba0      	ldr	r3, [pc, #640]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	4013      	ands	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4b9c      	ldr	r3, [pc, #624]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b9b      	ldr	r3, [pc, #620]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020fa:	499d      	ldr	r1, [pc, #628]	; (8002370 <HAL_RCC_OscConfig+0x344>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fccc 	bl	8001aa4 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002110:	e009      	b.n	8002126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002112:	f7ff fcc7 	bl	8001aa4 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	; 0x64
 800211e:	d902      	bls.n	8002126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	f000 fb4c 	bl	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002126:	4b90      	ldr	r3, [pc, #576]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d0ef      	beq.n	8002112 <HAL_RCC_OscConfig+0xe6>
 8002132:	e015      	b.n	8002160 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fcb6 	bl	8001aa4 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213e:	f7ff fcb1 	bl	8001aa4 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e336      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	4013      	ands	r3, r2
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x112>
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d100      	bne.n	800216c <HAL_RCC_OscConfig+0x140>
 800216a:	e099      	b.n	80022a0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	2220      	movs	r2, #32
 8002176:	4013      	ands	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800217a:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b7a      	ldr	r3, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002180:	2120      	movs	r1, #32
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	2220      	movs	r2, #32
 800218a:	4393      	bics	r3, r2
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d13e      	bne.n	8002218 <HAL_RCC_OscConfig+0x1ec>
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d13b      	bne.n	8002218 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80021a0:	4b71      	ldr	r3, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2204      	movs	r2, #4
 80021a6:	4013      	ands	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_RCC_OscConfig+0x188>
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e304      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a6e      	ldr	r2, [pc, #440]	; (8002374 <HAL_RCC_OscConfig+0x348>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2209      	movs	r2, #9
 80021d0:	4393      	bics	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	4b64      	ldr	r3, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021dc:	f000 fc42 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 80021e0:	0001      	movs	r1, r0
 80021e2:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	220f      	movs	r2, #15
 80021ea:	4013      	ands	r3, r2
 80021ec:	4a62      	ldr	r2, [pc, #392]	; (8002378 <HAL_RCC_OscConfig+0x34c>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	000a      	movs	r2, r1
 80021f2:	40da      	lsrs	r2, r3
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <HAL_RCC_OscConfig+0x350>)
 80021f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCC_OscConfig+0x354>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2513      	movs	r5, #19
 80021fe:	197c      	adds	r4, r7, r5
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff fc09 	bl	8001a18 <HAL_InitTick>
 8002206:	0003      	movs	r3, r0
 8002208:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800220a:	197b      	adds	r3, r7, r5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d046      	beq.n	80022a0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002212:	197b      	adds	r3, r7, r5
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	e2d2      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	d027      	beq.n	800226e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800221e:	4b52      	ldr	r3, [pc, #328]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2209      	movs	r2, #9
 8002224:	4393      	bics	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fc38 	bl	8001aa4 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff fc33 	bl	8001aa4 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e2b8      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224c:	4b46      	ldr	r3, [pc, #280]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2204      	movs	r2, #4
 8002252:	4013      	ands	r3, r2
 8002254:	d0f1      	beq.n	800223a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4a46      	ldr	r2, [pc, #280]	; (8002374 <HAL_RCC_OscConfig+0x348>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	e018      	b.n	80022a0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002274:	2101      	movs	r1, #1
 8002276:	438a      	bics	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fc13 	bl	8001aa4 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff fc0e 	bl	8001aa4 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e293      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	d1f1      	bne.n	8002284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2210      	movs	r2, #16
 80022a6:	4013      	ands	r3, r2
 80022a8:	d100      	bne.n	80022ac <HAL_RCC_OscConfig+0x280>
 80022aa:	e0a2      	b.n	80023f2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d140      	bne.n	8002334 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4013      	ands	r3, r2
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x29e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e279      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <HAL_RCC_OscConfig+0x358>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	0a19      	lsrs	r1, r3, #8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	061a      	lsls	r2, r3, #24
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	0b5b      	lsrs	r3, r3, #13
 80022f8:	3301      	adds	r3, #1
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	0212      	lsls	r2, r2, #8
 80022fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	210f      	movs	r1, #15
 8002308:	400b      	ands	r3, r1
 800230a:	491b      	ldr	r1, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x34c>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_OscConfig+0x350>)
 8002312:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_OscConfig+0x354>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2513      	movs	r5, #19
 800231a:	197c      	adds	r4, r7, r5
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff fb7b 	bl	8001a18 <HAL_InitTick>
 8002322:	0003      	movs	r3, r0
 8002324:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002326:	197b      	adds	r3, r7, r5
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d061      	beq.n	80023f2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800232e:	197b      	adds	r3, r7, r5
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	e244      	b.n	80027be <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d040      	beq.n	80023be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x33c>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0049      	lsls	r1, r1, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff fbab 	bl	8001aa4 <HAL_GetTick>
 800234e:	0003      	movs	r3, r0
 8002350:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002352:	e019      	b.n	8002388 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002354:	f7ff fba6 	bl	8001aa4 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d912      	bls.n	8002388 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e22b      	b.n	80027be <HAL_RCC_OscConfig+0x792>
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000
 800236c:	fffeffff 	.word	0xfffeffff
 8002370:	fffbffff 	.word	0xfffbffff
 8002374:	ffffe0ff 	.word	0xffffe0ff
 8002378:	080059d8 	.word	0x080059d8
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004
 8002384:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002388:	4bca      	ldr	r3, [pc, #808]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d0df      	beq.n	8002354 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002394:	4bc7      	ldr	r3, [pc, #796]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4ac7      	ldr	r2, [pc, #796]	; (80026b8 <HAL_RCC_OscConfig+0x68c>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a2:	4bc4      	ldr	r3, [pc, #784]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a8:	4bc2      	ldr	r3, [pc, #776]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	0a19      	lsrs	r1, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	061a      	lsls	r2, r3, #24
 80023b6:	4bbf      	ldr	r3, [pc, #764]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	e019      	b.n	80023f2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023be:	4bbd      	ldr	r3, [pc, #756]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4bbc      	ldr	r3, [pc, #752]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80023c4:	49bd      	ldr	r1, [pc, #756]	; (80026bc <HAL_RCC_OscConfig+0x690>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fb6b 	bl	8001aa4 <HAL_GetTick>
 80023ce:	0003      	movs	r3, r0
 80023d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d4:	f7ff fb66 	bl	8001aa4 <HAL_GetTick>
 80023d8:	0002      	movs	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1eb      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023e6:	4bb3      	ldr	r3, [pc, #716]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2208      	movs	r2, #8
 80023f8:	4013      	ands	r3, r2
 80023fa:	d036      	beq.n	800246a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d019      	beq.n	8002438 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002404:	4bab      	ldr	r3, [pc, #684]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002408:	4baa      	ldr	r3, [pc, #680]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7ff fb48 	bl	8001aa4 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241a:	f7ff fb43 	bl	8001aa4 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1c8      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800242c:	4ba1      	ldr	r3, [pc, #644]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800242e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002430:	2202      	movs	r2, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d0f1      	beq.n	800241a <HAL_RCC_OscConfig+0x3ee>
 8002436:	e018      	b.n	800246a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002438:	4b9e      	ldr	r3, [pc, #632]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800243a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800243c:	4b9d      	ldr	r3, [pc, #628]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800243e:	2101      	movs	r1, #1
 8002440:	438a      	bics	r2, r1
 8002442:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7ff fb2e 	bl	8001aa4 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fb29 	bl	8001aa4 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1ae      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002460:	4b94      	ldr	r3, [pc, #592]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	2202      	movs	r2, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d1f1      	bne.n	800244e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2204      	movs	r2, #4
 8002470:	4013      	ands	r3, r2
 8002472:	d100      	bne.n	8002476 <HAL_RCC_OscConfig+0x44a>
 8002474:	e0ae      	b.n	80025d4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002476:	2023      	movs	r0, #35	; 0x23
 8002478:	183b      	adds	r3, r7, r0
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b8d      	ldr	r3, [pc, #564]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	055b      	lsls	r3, r3, #21
 8002486:	4013      	ands	r3, r2
 8002488:	d109      	bne.n	800249e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b8a      	ldr	r3, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800248c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0549      	lsls	r1, r1, #21
 8002494:	430a      	orrs	r2, r1
 8002496:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002498:	183b      	adds	r3, r7, r0
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x694>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d11a      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b85      	ldr	r3, [pc, #532]	; (80026c0 <HAL_RCC_OscConfig+0x694>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b84      	ldr	r3, [pc, #528]	; (80026c0 <HAL_RCC_OscConfig+0x694>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0049      	lsls	r1, r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b8:	f7ff faf4 	bl	8001aa4 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7ff faef 	bl	8001aa4 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e174      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	4b7a      	ldr	r3, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x694>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x4d0>
 80024ec:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80024ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f0:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	0049      	lsls	r1, r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	651a      	str	r2, [r3, #80]	; 0x50
 80024fa:	e031      	b.n	8002560 <HAL_RCC_OscConfig+0x534>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10c      	bne.n	800251e <HAL_RCC_OscConfig+0x4f2>
 8002504:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800250a:	496c      	ldr	r1, [pc, #432]	; (80026bc <HAL_RCC_OscConfig+0x690>)
 800250c:	400a      	ands	r2, r1
 800250e:	651a      	str	r2, [r3, #80]	; 0x50
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002514:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002516:	496b      	ldr	r1, [pc, #428]	; (80026c4 <HAL_RCC_OscConfig+0x698>)
 8002518:	400a      	ands	r2, r1
 800251a:	651a      	str	r2, [r3, #80]	; 0x50
 800251c:	e020      	b.n	8002560 <HAL_RCC_OscConfig+0x534>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	23a0      	movs	r3, #160	; 0xa0
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	429a      	cmp	r2, r3
 8002528:	d10e      	bne.n	8002548 <HAL_RCC_OscConfig+0x51c>
 800252a:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800252c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	00c9      	lsls	r1, r1, #3
 8002534:	430a      	orrs	r2, r1
 8002536:	651a      	str	r2, [r3, #80]	; 0x50
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800253a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800253c:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	0049      	lsls	r1, r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	651a      	str	r2, [r3, #80]	; 0x50
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0x534>
 8002548:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800254a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800254e:	495b      	ldr	r1, [pc, #364]	; (80026bc <HAL_RCC_OscConfig+0x690>)
 8002550:	400a      	ands	r2, r1
 8002552:	651a      	str	r2, [r3, #80]	; 0x50
 8002554:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800255a:	495a      	ldr	r1, [pc, #360]	; (80026c4 <HAL_RCC_OscConfig+0x698>)
 800255c:	400a      	ands	r2, r1
 800255e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d015      	beq.n	8002594 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002568:	f7ff fa9c 	bl	8001aa4 <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002570:	e009      	b.n	8002586 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7ff fa97 	bl	8001aa4 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_OscConfig+0x69c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e11b      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d0ef      	beq.n	8002572 <HAL_RCC_OscConfig+0x546>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f7ff fa86 	bl	8001aa4 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7ff fa81 	bl	8001aa4 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4a47      	ldr	r2, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x69c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e105      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1ef      	bne.n	800259e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025be:	2323      	movs	r3, #35	; 0x23
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025ce:	493f      	ldr	r1, [pc, #252]	; (80026cc <HAL_RCC_OscConfig+0x6a0>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2220      	movs	r2, #32
 80025da:	4013      	ands	r3, r2
 80025dc:	d049      	beq.n	8002672 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d026      	beq.n	8002634 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80025e6:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
 80025fe:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <HAL_RCC_OscConfig+0x6a4>)
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x6a4>)
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0189      	lsls	r1, r1, #6
 8002608:	430a      	orrs	r2, r1
 800260a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff fa4a 	bl	8001aa4 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002616:	f7ff fa45 	bl	8001aa4 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0ca      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2202      	movs	r2, #2
 800262e:	4013      	ands	r3, r2
 8002630:	d0f1      	beq.n	8002616 <HAL_RCC_OscConfig+0x5ea>
 8002632:	e01e      	b.n	8002672 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800263a:	2101      	movs	r1, #1
 800263c:	438a      	bics	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_RCC_OscConfig+0x6a4>)
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_OscConfig+0x6a4>)
 8002646:	4923      	ldr	r1, [pc, #140]	; (80026d4 <HAL_RCC_OscConfig+0x6a8>)
 8002648:	400a      	ands	r2, r1
 800264a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff fa2a 	bl	8001aa4 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002656:	f7ff fa25 	bl	8001aa4 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0aa      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2202      	movs	r2, #2
 800266e:	4013      	ands	r3, r2
 8002670:	d1f1      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	d100      	bne.n	800267c <HAL_RCC_OscConfig+0x650>
 800267a:	e09f      	b.n	80027bc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d100      	bne.n	8002684 <HAL_RCC_OscConfig+0x658>
 8002682:	e078      	b.n	8002776 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	2b02      	cmp	r3, #2
 800268a:	d159      	bne.n	8002740 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_RCC_OscConfig+0x688>)
 8002692:	4911      	ldr	r1, [pc, #68]	; (80026d8 <HAL_RCC_OscConfig+0x6ac>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff fa04 	bl	8001aa4 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026a0:	e01c      	b.n	80026dc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a2:	f7ff f9ff 	bl	8001aa4 <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d915      	bls.n	80026dc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e084      	b.n	80027be <HAL_RCC_OscConfig+0x792>
 80026b4:	40021000 	.word	0x40021000
 80026b8:	ffff1fff 	.word	0xffff1fff
 80026bc:	fffffeff 	.word	0xfffffeff
 80026c0:	40007000 	.word	0x40007000
 80026c4:	fffffbff 	.word	0xfffffbff
 80026c8:	00001388 	.word	0x00001388
 80026cc:	efffffff 	.word	0xefffffff
 80026d0:	40010000 	.word	0x40010000
 80026d4:	ffffdfff 	.word	0xffffdfff
 80026d8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	049b      	lsls	r3, r3, #18
 80026e4:	4013      	ands	r3, r2
 80026e6:	d1dc      	bne.n	80026a2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a37      	ldr	r2, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x7a0>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	431a      	orrs	r2, r3
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	0449      	lsls	r1, r1, #17
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7ff f9c5 	bl	8001aa4 <HAL_GetTick>
 800271a:	0003      	movs	r3, r0
 800271c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7ff f9c0 	bl	8001aa4 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e045      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x6f4>
 800273e:	e03d      	b.n	80027bc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 8002746:	4922      	ldr	r1, [pc, #136]	; (80027d0 <HAL_RCC_OscConfig+0x7a4>)
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff f9aa 	bl	8001aa4 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7ff f9a5 	bl	8001aa4 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e02a      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	049b      	lsls	r3, r3, #18
 8002770:	4013      	ands	r3, r2
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x72a>
 8002774:	e022      	b.n	80027bc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e01d      	b.n	80027be <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_OscConfig+0x79c>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	025b      	lsls	r3, r3, #9
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	429a      	cmp	r2, r3
 8002796:	d10f      	bne.n	80027b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	23f0      	movs	r3, #240	; 0xf0
 800279c:	039b      	lsls	r3, r3, #14
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	041b      	lsls	r3, r3, #16
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b00a      	add	sp, #40	; 0x28
 80027c4:	bdb0      	pop	{r4, r5, r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	ff02ffff 	.word	0xff02ffff
 80027d0:	feffffff 	.word	0xfeffffff

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b5b0      	push	{r4, r5, r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e128      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b96      	ldr	r3, [pc, #600]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2201      	movs	r2, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d91e      	bls.n	8002834 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b93      	ldr	r3, [pc, #588]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4393      	bics	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	4b90      	ldr	r3, [pc, #576]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002808:	f7ff f94c 	bl	8001aa4 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002810:	e009      	b.n	8002826 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002812:	f7ff f947 	bl	8001aa4 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	4a8a      	ldr	r2, [pc, #552]	; (8002a48 <HAL_RCC_ClockConfig+0x274>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e109      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283e:	4b83      	ldr	r3, [pc, #524]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	22f0      	movs	r2, #240	; 0xf0
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4b7f      	ldr	r3, [pc, #508]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 800284e:	430a      	orrs	r2, r1
 8002850:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	d100      	bne.n	800285e <HAL_RCC_ClockConfig+0x8a>
 800285c:	e089      	b.n	8002972 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002866:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	4013      	ands	r3, r2
 8002870:	d120      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0e1      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	049b      	lsls	r3, r3, #18
 8002886:	4013      	ands	r3, r2
 8002888:	d114      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0d5      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d106      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002896:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2204      	movs	r2, #4
 800289c:	4013      	ands	r3, r2
 800289e:	d109      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0ca      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0c2      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b4:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2203      	movs	r2, #3
 80028ba:	4393      	bics	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7ff f8ec 	bl	8001aa4 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d8:	e009      	b.n	80028ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028da:	f7ff f8e3 	bl	8001aa4 <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_ClockConfig+0x274>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0a5      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ee:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	220c      	movs	r2, #12
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d1ef      	bne.n	80028da <HAL_RCC_ClockConfig+0x106>
 80028fa:	e03a      	b.n	8002972 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d111      	bne.n	8002928 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002904:	e009      	b.n	800291a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002906:	f7ff f8cd 	bl	8001aa4 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <HAL_RCC_ClockConfig+0x274>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e08f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800291a:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	220c      	movs	r2, #12
 8002920:	4013      	ands	r3, r2
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d1ef      	bne.n	8002906 <HAL_RCC_ClockConfig+0x132>
 8002926:	e024      	b.n	8002972 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d11b      	bne.n	8002968 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002930:	e009      	b.n	8002946 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f7ff f8b7 	bl	8001aa4 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <HAL_RCC_ClockConfig+0x274>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e079      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	220c      	movs	r2, #12
 800294c:	4013      	ands	r3, r2
 800294e:	2b04      	cmp	r3, #4
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_ClockConfig+0x15e>
 8002952:	e00e      	b.n	8002972 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7ff f8a6 	bl	8001aa4 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <HAL_RCC_ClockConfig+0x274>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e068      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002968:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	220c      	movs	r2, #12
 800296e:	4013      	ands	r3, r2
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d21e      	bcs.n	80029be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	4393      	bics	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002992:	f7ff f887 	bl	8001aa4 <HAL_GetTick>
 8002996:	0003      	movs	r3, r0
 8002998:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	e009      	b.n	80029b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7ff f882 	bl	8001aa4 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <HAL_RCC_ClockConfig+0x274>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e044      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d1ee      	bne.n	800299c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2204      	movs	r2, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x27c>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2208      	movs	r2, #8
 80029e2:	4013      	ands	r3, r2
 80029e4:	d00a      	beq.n	80029fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_RCC_ClockConfig+0x280>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029fc:	f000 f832 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a00:	0001      	movs	r1, r0
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_RCC_ClockConfig+0x278>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	220f      	movs	r2, #15
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <HAL_RCC_ClockConfig+0x284>)
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	000a      	movs	r2, r1
 8002a12:	40da      	lsrs	r2, r3
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_ClockConfig+0x288>)
 8002a16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_ClockConfig+0x28c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	250b      	movs	r5, #11
 8002a1e:	197c      	adds	r4, r7, r5
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7fe fff9 	bl	8001a18 <HAL_InitTick>
 8002a26:	0003      	movs	r3, r0
 8002a28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002a2a:	197b      	adds	r3, r7, r5
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002a32:	197b      	adds	r3, r7, r5
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bdb0      	pop	{r4, r5, r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	40022000 	.word	0x40022000
 8002a48:	00001388 	.word	0x00001388
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	fffff8ff 	.word	0xfffff8ff
 8002a54:	ffffc7ff 	.word	0xffffc7ff
 8002a58:	080059d8 	.word	0x080059d8
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	20000004 	.word	0x20000004

08002a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a6a:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a72:	230c      	movs	r3, #12
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d014      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a7a:	d900      	bls.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1a>
 8002a7c:	e07b      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x112>
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x24>
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d00b      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a86:	e076      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a88:	4b44      	ldr	r3, [pc, #272]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002a92:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002a96:	e07c      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002a98:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a9c:	e079      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a9e:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aa2:	e076      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	0c9a      	lsrs	r2, r3, #18
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	401a      	ands	r2, r3
 8002aac:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_GetSysClockFreq+0x148>)
 8002aae:	5c9b      	ldrb	r3, [r3, r2]
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	0d9a      	lsrs	r2, r3, #22
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	3301      	adds	r3, #1
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	025b      	lsls	r3, r3, #9
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d01a      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	4a35      	ldr	r2, [pc, #212]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	69b8      	ldr	r0, [r7, #24]
 8002ad8:	69f9      	ldr	r1, [r7, #28]
 8002ada:	f7fd fbc9 	bl	8000270 <__aeabi_lmul>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	000b      	movs	r3, r1
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f7fd fb9d 	bl	8000230 <__aeabi_uldivmod>
 8002af6:	0002      	movs	r2, r0
 8002af8:	000b      	movs	r3, r1
 8002afa:	0013      	movs	r3, r2
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
 8002afe:	e037      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2210      	movs	r2, #16
 8002b06:	4013      	ands	r3, r2
 8002b08:	d01a      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b14:	2300      	movs	r3, #0
 8002b16:	68b8      	ldr	r0, [r7, #8]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	f7fd fba9 	bl	8000270 <__aeabi_lmul>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	000b      	movs	r3, r1
 8002b22:	0010      	movs	r0, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f7fd fb7d 	bl	8000230 <__aeabi_uldivmod>
 8002b36:	0002      	movs	r2, r0
 8002b38:	000b      	movs	r3, r1
 8002b3a:	0013      	movs	r3, r2
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3e:	e017      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	0018      	movs	r0, r3
 8002b44:	2300      	movs	r3, #0
 8002b46:	0019      	movs	r1, r3
 8002b48:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f7fd fb90 	bl	8000270 <__aeabi_lmul>
 8002b50:	0002      	movs	r2, r0
 8002b52:	000b      	movs	r3, r1
 8002b54:	0010      	movs	r0, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	001c      	movs	r4, r3
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	001d      	movs	r5, r3
 8002b60:	0022      	movs	r2, r4
 8002b62:	002b      	movs	r3, r5
 8002b64:	f7fd fb64 	bl	8000230 <__aeabi_uldivmod>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	000b      	movs	r3, r1
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b74:	e00d      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0b5b      	lsrs	r3, r3, #13
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	4013      	ands	r3, r2
 8002b80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	3301      	adds	r3, #1
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	0212      	lsls	r2, r2, #8
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b90:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b00e      	add	sp, #56	; 0x38
 8002b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	003d0900 	.word	0x003d0900
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200
 8002bac:	080059f0 	.word	0x080059f0

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff2 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bcc:	0001      	movs	r1, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	40d9      	lsrs	r1, r3
 8002bde:	000b      	movs	r3, r1
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	40021000 	.word	0x40021000
 8002bec:	080059e8 	.word	0x080059e8

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	f7ff ffdc 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bf8:	0001      	movs	r1, r0
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	0adb      	lsrs	r3, r3, #11
 8002c00:	2207      	movs	r2, #7
 8002c02:	4013      	ands	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	40d9      	lsrs	r1, r3
 8002c0a:	000b      	movs	r3, r1
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000
 8002c18:	080059e8 	.word	0x080059e8

08002c1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002c24:	2317      	movs	r3, #23
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2220      	movs	r2, #32
 8002c32:	4013      	ands	r3, r2
 8002c34:	d106      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d100      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002c42:	e104      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c44:	4bb9      	ldr	r3, [pc, #740]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	055b      	lsls	r3, r3, #21
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d10a      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4bb6      	ldr	r3, [pc, #728]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c54:	4bb5      	ldr	r3, [pc, #724]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	0549      	lsls	r1, r1, #21
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c5e:	2317      	movs	r3, #23
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4bb2      	ldr	r3, [pc, #712]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d11a      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4baf      	ldr	r3, [pc, #700]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4bae      	ldr	r3, [pc, #696]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0049      	lsls	r1, r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c80:	f7fe ff10 	bl	8001aa4 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e008      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fe ff0b 	bl	8001aa4 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	; 0x64
 8002c96:	d901      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e143      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4ba4      	ldr	r3, [pc, #656]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002ca8:	4ba0      	ldr	r3, [pc, #640]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	23c0      	movs	r3, #192	; 0xc0
 8002cae:	039b      	lsls	r3, r3, #14
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	23c0      	movs	r3, #192	; 0xc0
 8002cba:	039b      	lsls	r3, r3, #14
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	23c0      	movs	r3, #192	; 0xc0
 8002cca:	039b      	lsls	r3, r3, #14
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	23c0      	movs	r3, #192	; 0xc0
 8002cda:	029b      	lsls	r3, r3, #10
 8002cdc:	401a      	ands	r2, r3
 8002cde:	23c0      	movs	r3, #192	; 0xc0
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10a      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ce6:	4b91      	ldr	r3, [pc, #580]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	029b      	lsls	r3, r3, #10
 8002cee:	401a      	ands	r2, r3
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	029b      	lsls	r3, r3, #10
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e113      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002cfc:	4b8b      	ldr	r3, [pc, #556]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d00:	23c0      	movs	r3, #192	; 0xc0
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d049      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	4013      	ands	r3, r2
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d004      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2220      	movs	r2, #32
 8002d24:	4013      	ands	r3, r2
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	4013      	ands	r3, r2
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d034      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	d02e      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002d44:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d48:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d4e:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0309      	lsls	r1, r1, #12
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5c:	4b73      	ldr	r3, [pc, #460]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d60:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d62:	4975      	ldr	r1, [pc, #468]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002d68:	4b70      	ldr	r3, [pc, #448]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4013      	ands	r3, r2
 8002d76:	d014      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fe94 	bl	8001aa4 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d80:	e009      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe fe8f 	bl	8001aa4 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	4a6b      	ldr	r2, [pc, #428]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0c6      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d96:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d0ef      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4013      	ands	r3, r2
 8002dac:	d01f      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	23c0      	movs	r3, #192	; 0xc0
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	401a      	ands	r2, r3
 8002db8:	23c0      	movs	r3, #192	; 0xc0
 8002dba:	029b      	lsls	r3, r3, #10
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002dc0:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5e      	ldr	r2, [pc, #376]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	23c0      	movs	r3, #192	; 0xc0
 8002dd0:	039b      	lsls	r3, r3, #14
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	4b55      	ldr	r3, [pc, #340]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ddc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	029b      	lsls	r3, r3, #10
 8002de6:	401a      	ands	r2, r3
 8002de8:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2220      	movs	r2, #32
 8002df4:	4013      	ands	r3, r2
 8002df6:	d01f      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	23c0      	movs	r3, #192	; 0xc0
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	401a      	ands	r2, r3
 8002e02:	23c0      	movs	r3, #192	; 0xc0
 8002e04:	029b      	lsls	r3, r3, #10
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002e0a:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4c      	ldr	r2, [pc, #304]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	23c0      	movs	r3, #192	; 0xc0
 8002e1a:	039b      	lsls	r3, r3, #14
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e26:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	23c0      	movs	r3, #192	; 0xc0
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	401a      	ands	r2, r3
 8002e32:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e38:	2317      	movs	r3, #23
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e48:	493e      	ldr	r1, [pc, #248]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e58:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	4393      	bics	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2202      	movs	r2, #2
 8002e72:	4013      	ands	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e86:	430a      	orrs	r2, r1
 8002e88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2204      	movs	r2, #4
 8002e90:	4013      	ands	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2208      	movs	r2, #8
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	4013      	ands	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef4:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b006      	add	sp, #24
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
 8002f34:	fffcffff 	.word	0xfffcffff
 8002f38:	fff7ffff 	.word	0xfff7ffff
 8002f3c:	00001388 	.word	0x00001388
 8002f40:	ffcfffff 	.word	0xffcfffff
 8002f44:	efffffff 	.word	0xefffffff
 8002f48:	fffff3ff 	.word	0xfffff3ff
 8002f4c:	ffffcfff 	.word	0xffffcfff
 8002f50:	fbffffff 	.word	0xfbffffff
 8002f54:	fff3ffff 	.word	0xfff3ffff

08002f58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f58:	b5b0      	push	{r4, r5, r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e088      	b.n	8003084 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2221      	movs	r2, #33	; 0x21
 8002f76:	5c9b      	ldrb	r3, [r3, r2]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	2100      	movs	r1, #0
 8002f84:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fd fda3 	bl	8000ad4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2221      	movs	r2, #33	; 0x21
 8002f92:	2102      	movs	r1, #2
 8002f94:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d05f      	beq.n	8003064 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	22ca      	movs	r2, #202	; 0xca
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2253      	movs	r2, #83	; 0x53
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002fb4:	250f      	movs	r5, #15
 8002fb6:	197c      	adds	r4, r7, r5
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 fc62 	bl	8003884 <RTC_EnterInitMode>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002fc4:	0028      	movs	r0, r5
 8002fc6:	183b      	adds	r3, r7, r0
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d12c      	bne.n	8003028 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	492c      	ldr	r1, [pc, #176]	; (800308c <HAL_RTC_Init+0x134>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68d2      	ldr	r2, [r2, #12]
 8003004:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	041a      	lsls	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800301a:	183c      	adds	r4, r7, r0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0018      	movs	r0, r3
 8003020:	f000 fc74 	bl	800390c <RTC_ExitInitMode>
 8003024:	0003      	movs	r3, r0
 8003026:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d113      	bne.n	800305a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2103      	movs	r1, #3
 800303e:	438a      	bics	r2, r1
 8003040:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	22ff      	movs	r2, #255	; 0xff
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
 8003062:	e003      	b.n	800306c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003064:	230f      	movs	r3, #15
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800306c:	230f      	movs	r3, #15
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2221      	movs	r2, #33	; 0x21
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800307e:	230f      	movs	r3, #15
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bdb0      	pop	{r4, r5, r7, pc}
 800308c:	ff8fffbf 	.word	0xff8fffbf

08003090 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	5c9b      	ldrb	r3, [r3, r2]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RTC_SetTime+0x1e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e092      	b.n	80031d4 <HAL_RTC_SetTime+0x144>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2221      	movs	r2, #33	; 0x21
 80030ba:	2102      	movs	r1, #2
 80030bc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d125      	bne.n	8003110 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	4013      	ands	r3, r2
 80030ce:	d102      	bne.n	80030d6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 fc40 	bl	8003960 <RTC_ByteToBcd2>
 80030e0:	0003      	movs	r3, r0
 80030e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 fc39 	bl	8003960 <RTC_ByteToBcd2>
 80030ee:	0003      	movs	r3, r0
 80030f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80030f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	789b      	ldrb	r3, [r3, #2]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fc31 	bl	8003960 <RTC_ByteToBcd2>
 80030fe:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003100:	0022      	movs	r2, r4
 8003102:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e017      	b.n	8003140 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	4013      	ands	r3, r2
 800311a:	d102      	bne.n	8003122 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800312e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003134:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	22ca      	movs	r2, #202	; 0xca
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2253      	movs	r2, #83	; 0x53
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003150:	2513      	movs	r5, #19
 8003152:	197c      	adds	r4, r7, r5
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fb94 	bl	8003884 <RTC_EnterInitMode>
 800315c:	0003      	movs	r3, r0
 800315e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003160:	0028      	movs	r0, r5
 8003162:	183b      	adds	r3, r7, r0
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d120      	bne.n	80031ac <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	491a      	ldr	r1, [pc, #104]	; (80031dc <HAL_RTC_SetTime+0x14c>)
 8003172:	400a      	ands	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4917      	ldr	r1, [pc, #92]	; (80031e0 <HAL_RTC_SetTime+0x150>)
 8003182:	400a      	ands	r2, r1
 8003184:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800319e:	183c      	adds	r4, r7, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 fbb2 	bl	800390c <RTC_ExitInitMode>
 80031a8:	0003      	movs	r3, r0
 80031aa:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80031ac:	2313      	movs	r3, #19
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]

  return status;
 80031ce:	2313      	movs	r3, #19
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b006      	add	sp, #24
 80031da:	bdb0      	pop	{r4, r5, r7, pc}
 80031dc:	007f7f7f 	.word	0x007f7f7f
 80031e0:	fffbffff 	.word	0xfffbffff

080031e4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	045b      	lsls	r3, r3, #17
 8003206:	0c5a      	lsrs	r2, r3, #17
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_RTC_GetTime+0xb8>)
 8003214:	4013      	ands	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	b2db      	uxtb	r3, r3
 800321e:	223f      	movs	r2, #63	; 0x3f
 8003220:	4013      	ands	r3, r2
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	b2db      	uxtb	r3, r3
 800322e:	227f      	movs	r2, #127	; 0x7f
 8003230:	4013      	ands	r3, r2
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	227f      	movs	r2, #127	; 0x7f
 800323e:	4013      	ands	r3, r2
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	0d9b      	lsrs	r3, r3, #22
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11a      	bne.n	8003292 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 fb9e 	bl	80039a2 <RTC_Bcd2ToByte>
 8003266:	0003      	movs	r3, r0
 8003268:	001a      	movs	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fb95 	bl	80039a2 <RTC_Bcd2ToByte>
 8003278:	0003      	movs	r3, r0
 800327a:	001a      	movs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	0018      	movs	r0, r3
 8003286:	f000 fb8c 	bl	80039a2 <RTC_Bcd2ToByte>
 800328a:	0003      	movs	r3, r0
 800328c:	001a      	movs	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b006      	add	sp, #24
 800329a:	bd80      	pop	{r7, pc}
 800329c:	007f7f7f 	.word	0x007f7f7f

080032a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	5c9b      	ldrb	r3, [r3, r2]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_RTC_SetDate+0x1e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e07e      	b.n	80033bc <HAL_RTC_SetDate+0x11c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	; 0x21
 80032ca:	2102      	movs	r1, #2
 80032cc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10e      	bne.n	80032f2 <HAL_RTC_SetDate+0x52>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	001a      	movs	r2, r3
 80032da:	2310      	movs	r3, #16
 80032dc:	4013      	ands	r3, r2
 80032de:	d008      	beq.n	80032f2 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4393      	bics	r3, r2
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	330a      	adds	r3, #10
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11c      	bne.n	8003332 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	78db      	ldrb	r3, [r3, #3]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 fb2f 	bl	8003960 <RTC_ByteToBcd2>
 8003302:	0003      	movs	r3, r0
 8003304:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 fb28 	bl	8003960 <RTC_ByteToBcd2>
 8003310:	0003      	movs	r3, r0
 8003312:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003314:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	789b      	ldrb	r3, [r3, #2]
 800331a:	0018      	movs	r0, r3
 800331c:	f000 fb20 	bl	8003960 <RTC_ByteToBcd2>
 8003320:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003322:	0022      	movs	r2, r4
 8003324:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e00e      	b.n	8003350 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	78db      	ldrb	r3, [r3, #3]
 8003336:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800333e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003344:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	22ca      	movs	r2, #202	; 0xca
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2253      	movs	r2, #83	; 0x53
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003360:	2513      	movs	r5, #19
 8003362:	197c      	adds	r4, r7, r5
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 fa8c 	bl	8003884 <RTC_EnterInitMode>
 800336c:	0003      	movs	r3, r0
 800336e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003370:	0028      	movs	r0, r5
 8003372:	183b      	adds	r3, r7, r0
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4910      	ldr	r1, [pc, #64]	; (80033c4 <HAL_RTC_SetDate+0x124>)
 8003382:	400a      	ands	r2, r1
 8003384:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003386:	183c      	adds	r4, r7, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fabe 	bl	800390c <RTC_ExitInitMode>
 8003390:	0003      	movs	r3, r0
 8003392:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003394:	2313      	movs	r3, #19
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2221      	movs	r2, #33	; 0x21
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]

  return status;
 80033b6:	2313      	movs	r3, #19
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	781b      	ldrb	r3, [r3, #0]
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bdb0      	pop	{r4, r5, r7, pc}
 80033c4:	00ffff3f 	.word	0x00ffff3f

080033c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a21      	ldr	r2, [pc, #132]	; (8003464 <HAL_RTC_GetDate+0x9c>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	221f      	movs	r2, #31
 80033f6:	4013      	ands	r3, r2
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	223f      	movs	r2, #63	; 0x3f
 8003404:	4013      	ands	r3, r2
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	0b5b      	lsrs	r3, r3, #13
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2207      	movs	r2, #7
 8003414:	4013      	ands	r3, r2
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d11a      	bne.n	8003458 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	78db      	ldrb	r3, [r3, #3]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 fabb 	bl	80039a2 <RTC_Bcd2ToByte>
 800342c:	0003      	movs	r3, r0
 800342e:	001a      	movs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	785b      	ldrb	r3, [r3, #1]
 8003438:	0018      	movs	r0, r3
 800343a:	f000 fab2 	bl	80039a2 <RTC_Bcd2ToByte>
 800343e:	0003      	movs	r3, r0
 8003440:	001a      	movs	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	789b      	ldrb	r3, [r3, #2]
 800344a:	0018      	movs	r0, r3
 800344c:	f000 faa9 	bl	80039a2 <RTC_Bcd2ToByte>
 8003450:	0003      	movs	r3, r0
 8003452:	001a      	movs	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b006      	add	sp, #24
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	00ffff3f 	.word	0x00ffff3f

08003468 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_RTC_SetAlarm+0x26>
 800348a:	2302      	movs	r3, #2
 800348c:	e120      	b.n	80036d0 <HAL_RTC_SetAlarm+0x268>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2221      	movs	r2, #33	; 0x21
 800349a:	2102      	movs	r1, #2
 800349c:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d136      	bne.n	8003512 <HAL_RTC_SetAlarm+0xaa>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2240      	movs	r2, #64	; 0x40
 80034ac:	4013      	ands	r3, r2
 80034ae:	d102      	bne.n	80034b6 <HAL_RTC_SetAlarm+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2200      	movs	r2, #0
 80034b4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 fa50 	bl	8003960 <RTC_ByteToBcd2>
 80034c0:	0003      	movs	r3, r0
 80034c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 fa49 	bl	8003960 <RTC_ByteToBcd2>
 80034ce:	0003      	movs	r3, r0
 80034d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80034d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	789b      	ldrb	r3, [r3, #2]
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 fa41 	bl	8003960 <RTC_ByteToBcd2>
 80034de:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034e0:	0022      	movs	r2, r4
 80034e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	78db      	ldrb	r3, [r3, #3]
 80034e8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80034ea:	431a      	orrs	r2, r3
 80034ec:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2220      	movs	r2, #32
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 fa33 	bl	8003960 <RTC_ByteToBcd2>
 80034fa:	0003      	movs	r3, r0
 80034fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80034fe:	0022      	movs	r2, r4
 8003500:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003506:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800350c:	4313      	orrs	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	e022      	b.n	8003558 <HAL_RTC_SetAlarm+0xf0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2240      	movs	r2, #64	; 0x40
 800351a:	4013      	ands	r3, r2
 800351c:	d102      	bne.n	8003524 <HAL_RTC_SetAlarm+0xbc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003530:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003536:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	78db      	ldrb	r3, [r3, #3]
 800353c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800353e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2120      	movs	r1, #32
 8003544:	5c5b      	ldrb	r3, [r3, r1]
 8003546:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003548:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800354e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003554:	4313      	orrs	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	22ca      	movs	r2, #202	; 0xca
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2253      	movs	r2, #83	; 0x53
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	429a      	cmp	r2, r3
 800357e:	d14d      	bne.n	800361c <HAL_RTC_SetAlarm+0x1b4>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4953      	ldr	r1, [pc, #332]	; (80036d8 <HAL_RTC_SetAlarm+0x270>)
 800358c:	400a      	ands	r2, r1
 800358e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4950      	ldr	r1, [pc, #320]	; (80036dc <HAL_RTC_SetAlarm+0x274>)
 800359c:	400a      	ands	r2, r1
 800359e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	22ff      	movs	r2, #255	; 0xff
 80035a8:	401a      	ands	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	494c      	ldr	r1, [pc, #304]	; (80036e0 <HAL_RTC_SetAlarm+0x278>)
 80035b0:	430a      	orrs	r2, r1
 80035b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe fa76 	bl	8001aa4 <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80035bc:	e016      	b.n	80035ec <HAL_RTC_SetAlarm+0x184>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035be:	f7fe fa71 	bl	8001aa4 <HAL_GetTick>
 80035c2:	0002      	movs	r2, r0
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	23fa      	movs	r3, #250	; 0xfa
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d90d      	bls.n	80035ec <HAL_RTC_SetAlarm+0x184>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2221      	movs	r2, #33	; 0x21
 80035dc:	2103      	movs	r1, #3
 80035de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e071      	b.n	80036d0 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	4013      	ands	r3, r2
 80035f6:	d0e2      	beq.n	80035be <HAL_RTC_SetAlarm+0x156>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	0049      	lsls	r1, r1, #1
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	e04c      	b.n	80036b6 <HAL_RTC_SetAlarm+0x24e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	492f      	ldr	r1, [pc, #188]	; (80036e4 <HAL_RTC_SetAlarm+0x27c>)
 8003628:	400a      	ands	r2, r1
 800362a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	492c      	ldr	r1, [pc, #176]	; (80036e8 <HAL_RTC_SetAlarm+0x280>)
 8003638:	400a      	ands	r2, r1
 800363a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	401a      	ands	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4928      	ldr	r1, [pc, #160]	; (80036ec <HAL_RTC_SetAlarm+0x284>)
 800364c:	430a      	orrs	r2, r1
 800364e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003650:	f7fe fa28 	bl	8001aa4 <HAL_GetTick>
 8003654:	0003      	movs	r3, r0
 8003656:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003658:	e016      	b.n	8003688 <HAL_RTC_SetAlarm+0x220>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800365a:	f7fe fa23 	bl	8001aa4 <HAL_GetTick>
 800365e:	0002      	movs	r2, r0
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	23fa      	movs	r3, #250	; 0xfa
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d90d      	bls.n	8003688 <HAL_RTC_SetAlarm+0x220>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2221      	movs	r2, #33	; 0x21
 8003678:	2103      	movs	r1, #3
 800367a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e023      	b.n	80036d0 <HAL_RTC_SetAlarm+0x268>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	d0e2      	beq.n	800365a <HAL_RTC_SetAlarm+0x1f2>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	0089      	lsls	r1, r1, #2
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	22ff      	movs	r2, #255	; 0xff
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2221      	movs	r2, #33	; 0x21
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b009      	add	sp, #36	; 0x24
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	fffffeff 	.word	0xfffffeff
 80036dc:	ffffefff 	.word	0xffffefff
 80036e0:	fffffe7f 	.word	0xfffffe7f
 80036e4:	fffffdff 	.word	0xfffffdff
 80036e8:	ffffdfff 	.word	0xffffdfff
 80036ec:	fffffd7f 	.word	0xfffffd7f

080036f0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_RTC_DeactivateAlarm+0x1c>
 8003708:	2302      	movs	r3, #2
 800370a:	e086      	b.n	800381a <HAL_RTC_DeactivateAlarm+0x12a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2221      	movs	r2, #33	; 0x21
 8003718:	2102      	movs	r1, #2
 800371a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	22ca      	movs	r2, #202	; 0xca
 8003722:	625a      	str	r2, [r3, #36]	; 0x24
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2253      	movs	r2, #83	; 0x53
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	429a      	cmp	r2, r3
 8003734:	d132      	bne.n	800379c <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4938      	ldr	r1, [pc, #224]	; (8003824 <HAL_RTC_DeactivateAlarm+0x134>)
 8003742:	400a      	ands	r2, r1
 8003744:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4935      	ldr	r1, [pc, #212]	; (8003828 <HAL_RTC_DeactivateAlarm+0x138>)
 8003752:	400a      	ands	r2, r1
 8003754:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003756:	f7fe f9a5 	bl	8001aa4 <HAL_GetTick>
 800375a:	0003      	movs	r3, r0
 800375c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800375e:	e016      	b.n	800378e <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003760:	f7fe f9a0 	bl	8001aa4 <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad2      	subs	r2, r2, r3
 800376a:	23fa      	movs	r3, #250	; 0xfa
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	429a      	cmp	r2, r3
 8003770:	d90d      	bls.n	800378e <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2221      	movs	r2, #33	; 0x21
 800377e:	2103      	movs	r1, #3
 8003780:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e045      	b.n	800381a <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	4013      	ands	r3, r2
 8003798:	d0e2      	beq.n	8003760 <HAL_RTC_DeactivateAlarm+0x70>
 800379a:	e031      	b.n	8003800 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4921      	ldr	r1, [pc, #132]	; (800382c <HAL_RTC_DeactivateAlarm+0x13c>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	491e      	ldr	r1, [pc, #120]	; (8003830 <HAL_RTC_DeactivateAlarm+0x140>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fe f972 	bl	8001aa4 <HAL_GetTick>
 80037c0:	0003      	movs	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80037c4:	e016      	b.n	80037f4 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037c6:	f7fe f96d 	bl	8001aa4 <HAL_GetTick>
 80037ca:	0002      	movs	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	23fa      	movs	r3, #250	; 0xfa
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d90d      	bls.n	80037f4 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2221      	movs	r2, #33	; 0x21
 80037e4:	2103      	movs	r1, #3
 80037e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e012      	b.n	800381a <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d0e2      	beq.n	80037c6 <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	22ff      	movs	r2, #255	; 0xff
 8003806:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2221      	movs	r2, #33	; 0x21
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	fffffeff 	.word	0xfffffeff
 8003828:	ffffefff 	.word	0xffffefff
 800382c:	fffffdff 	.word	0xfffffdff
 8003830:	ffffdfff 	.word	0xffffdfff

08003834 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <HAL_RTC_WaitForSynchro+0x4c>)
 8003846:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003848:	f7fe f92c 	bl	8001aa4 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003850:	e00a      	b.n	8003868 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003852:	f7fe f927 	bl	8001aa4 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	23fa      	movs	r3, #250	; 0xfa
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d901      	bls.n	8003868 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e006      	b.n	8003876 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	4013      	ands	r3, r2
 8003872:	d0ee      	beq.n	8003852 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b004      	add	sp, #16
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	0001ff5f 	.word	0x0001ff5f

08003884 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	230f      	movs	r3, #15
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2240      	movs	r2, #64	; 0x40
 80038a0:	4013      	ands	r3, r2
 80038a2:	d12c      	bne.n	80038fe <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	430a      	orrs	r2, r1
 80038b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fe f8f6 	bl	8001aa4 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038bc:	e014      	b.n	80038e8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038be:	f7fe f8f1 	bl	8001aa4 <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	1ad2      	subs	r2, r2, r3
 80038c8:	200f      	movs	r0, #15
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	1839      	adds	r1, r7, r0
 80038ce:	7809      	ldrb	r1, [r1, #0]
 80038d0:	7019      	strb	r1, [r3, #0]
 80038d2:	23fa      	movs	r3, #250	; 0xfa
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d906      	bls.n	80038e8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2221      	movs	r2, #33	; 0x21
 80038de:	2104      	movs	r1, #4
 80038e0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	4013      	ands	r3, r2
 80038f2:	d104      	bne.n	80038fe <RTC_EnterInitMode+0x7a>
 80038f4:	230f      	movs	r3, #15
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d1df      	bne.n	80038be <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80038fe:	230f      	movs	r3, #15
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b004      	add	sp, #16
 800390a:	bd80      	pop	{r7, pc}

0800390c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	240f      	movs	r4, #15
 8003916:	193b      	adds	r3, r7, r4
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	438a      	bics	r2, r1
 800392a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2220      	movs	r2, #32
 8003934:	4013      	ands	r3, r2
 8003936:	d10c      	bne.n	8003952 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff ff7a 	bl	8003834 <HAL_RTC_WaitForSynchro>
 8003940:	1e03      	subs	r3, r0, #0
 8003942:	d006      	beq.n	8003952 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2221      	movs	r2, #33	; 0x21
 8003948:	2104      	movs	r1, #4
 800394a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800394c:	193b      	adds	r3, r7, r4
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003952:	230f      	movs	r3, #15
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	781b      	ldrb	r3, [r3, #0]
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b005      	add	sp, #20
 800395e:	bd90      	pop	{r4, r7, pc}

08003960 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003970:	e007      	b.n	8003982 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	1dfa      	adds	r2, r7, #7
 800397c:	7812      	ldrb	r2, [r2, #0]
 800397e:	3a0a      	subs	r2, #10
 8003980:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b09      	cmp	r3, #9
 8003988:	d8f3      	bhi.n	8003972 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	b2da      	uxtb	r2, r3
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	b2db      	uxtb	r3, r3
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b004      	add	sp, #16
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	0002      	movs	r2, r0
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	001a      	movs	r2, r3
 80039bc:	0013      	movs	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	189b      	adds	r3, r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	1dfb      	adds	r3, r7, #7
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	210f      	movs	r1, #15
 80039d0:	400b      	ands	r3, r1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	b2db      	uxtb	r3, r3
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b004      	add	sp, #16
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e032      	b.n	8003a58 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2239      	movs	r2, #57	; 0x39
 80039f6:	5c9b      	ldrb	r3, [r3, r2]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d107      	bne.n	8003a0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2238      	movs	r2, #56	; 0x38
 8003a02:	2100      	movs	r1, #0
 8003a04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7fd f87b 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2239      	movs	r2, #57	; 0x39
 8003a12:	2102      	movs	r1, #2
 8003a14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	0019      	movs	r1, r3
 8003a20:	0010      	movs	r0, r2
 8003a22:	f000 fa95 	bl	8003f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	223e      	movs	r2, #62	; 0x3e
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	223a      	movs	r2, #58	; 0x3a
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	223b      	movs	r2, #59	; 0x3b
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	223c      	movs	r2, #60	; 0x3c
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	223d      	movs	r2, #61	; 0x3d
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2239      	movs	r2, #57	; 0x39
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2239      	movs	r2, #57	; 0x39
 8003a6c:	5c9b      	ldrb	r3, [r3, r2]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d001      	beq.n	8003a78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e033      	b.n	8003ae0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2239      	movs	r2, #57	; 0x39
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIM_Base_Start+0x4a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <HAL_TIM_Base_Start+0x88>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIM_Base_Start+0x4a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <HAL_TIM_Base_Start+0x8c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIM_Base_Start+0x4a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a12      	ldr	r2, [pc, #72]	; (8003af0 <HAL_TIM_Base_Start+0x90>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d111      	bne.n	8003ace <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d010      	beq.n	8003ade <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	e007      	b.n	8003ade <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40010800 	.word	0x40010800
 8003af0:	40011400 	.word	0x40011400

08003af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2239      	movs	r2, #57	; 0x39
 8003b00:	5c9b      	ldrb	r3, [r3, r2]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e03b      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2239      	movs	r2, #57	; 0x39
 8003b10:	2102      	movs	r1, #2
 8003b12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2101      	movs	r1, #1
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	05db      	lsls	r3, r3, #23
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d00e      	beq.n	8003b4e <HAL_TIM_Base_Start_IT+0x5a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <HAL_TIM_Base_Start_IT+0x98>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_TIM_Base_Start_IT+0x5a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_TIM_Base_Start_IT+0x5a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d111      	bne.n	8003b72 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2207      	movs	r2, #7
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d010      	beq.n	8003b82 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	e007      	b.n	8003b82 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b004      	add	sp, #16
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40010800 	.word	0x40010800
 8003b94:	40011400 	.word	0x40011400

08003b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d124      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d11d      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	4252      	negs	r2, r2
 8003bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f9a0 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003be0:	e007      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 f993 	bl	8003f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 f99f 	bl	8003f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d125      	bne.n	8003c52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11e      	bne.n	8003c52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2205      	movs	r2, #5
 8003c1a:	4252      	negs	r2, r2
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	23c0      	movs	r3, #192	; 0xc0
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d004      	beq.n	8003c3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 f973 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003c3a:	e007      	b.n	8003c4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 f966 	bl	8003f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 f972 	bl	8003f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d124      	bne.n	8003caa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2208      	movs	r2, #8
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11d      	bne.n	8003caa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2209      	movs	r2, #9
 8003c74:	4252      	negs	r2, r2
 8003c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	2203      	movs	r2, #3
 8003c86:	4013      	ands	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f000 f947 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003c92:	e007      	b.n	8003ca4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 f93a 	bl	8003f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 f946 	bl	8003f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d125      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d11e      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2211      	movs	r2, #17
 8003ccc:	4252      	negs	r2, r2
 8003cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	23c0      	movs	r3, #192	; 0xc0
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 f91a 	bl	8003f20 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e007      	b.n	8003cfe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 f90d 	bl	8003f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 f919 	bl	8003f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10f      	bne.n	8003d32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d108      	bne.n	8003d32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2202      	movs	r2, #2
 8003d26:	4252      	negs	r2, r2
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc fea3 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2240      	movs	r2, #64	; 0x40
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d10f      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2240      	movs	r2, #64	; 0x40
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d108      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2241      	movs	r2, #65	; 0x41
 8003d54:	4252      	negs	r2, r2
 8003d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 f8f0 	bl	8003f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	230f      	movs	r3, #15
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2238      	movs	r2, #56	; 0x38
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIM_ConfigClockSource+0x20>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e0bc      	b.n	8003f02 <HAL_TIM_ConfigClockSource+0x19a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2238      	movs	r2, #56	; 0x38
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2239      	movs	r2, #57	; 0x39
 8003d94:	2102      	movs	r1, #2
 8003d96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2277      	movs	r2, #119	; 0x77
 8003da4:	4393      	bics	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	0192      	lsls	r2, r2, #6
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xde>
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	0192      	lsls	r2, r2, #6
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d900      	bls.n	8003dce <HAL_TIM_ConfigClockSource+0x66>
 8003dcc:	e088      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003dce:	2280      	movs	r2, #128	; 0x80
 8003dd0:	0152      	lsls	r2, r2, #5
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d100      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x70>
 8003dd6:	e088      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x182>
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	0152      	lsls	r2, r2, #5
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d900      	bls.n	8003de2 <HAL_TIM_ConfigClockSource+0x7a>
 8003de0:	e07e      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003de2:	2b70      	cmp	r3, #112	; 0x70
 8003de4:	d018      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0xb0>
 8003de6:	d900      	bls.n	8003dea <HAL_TIM_ConfigClockSource+0x82>
 8003de8:	e07a      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003dea:	2b60      	cmp	r3, #96	; 0x60
 8003dec:	d04f      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x126>
 8003dee:	d900      	bls.n	8003df2 <HAL_TIM_ConfigClockSource+0x8a>
 8003df0:	e076      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003df2:	2b50      	cmp	r3, #80	; 0x50
 8003df4:	d03b      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x106>
 8003df6:	d900      	bls.n	8003dfa <HAL_TIM_ConfigClockSource+0x92>
 8003df8:	e072      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d057      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x146>
 8003dfe:	d900      	bls.n	8003e02 <HAL_TIM_ConfigClockSource+0x9a>
 8003e00:	e06e      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003e02:	2b30      	cmp	r3, #48	; 0x30
 8003e04:	d063      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e0c:	d868      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d05d      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d05b      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e16:	e063      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e28:	f000 f96a 	bl	8004100 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2277      	movs	r2, #119	; 0x77
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e052      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	f000 f953 	bl	8004100 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	01c9      	lsls	r1, r1, #7
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	f000 f8c6 	bl	800400c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	; 0x50
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 f920 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	f000 f8e4 	bl	8004068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	; 0x60
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 f910 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	001a      	movs	r2, r3
 8003ebc:	f000 f8a6 	bl	800400c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 f900 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	0010      	movs	r0, r2
 8003eda:	f000 f8f7 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003ede:	e005      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
      break;
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003eea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2239      	movs	r2, #57	; 0x39
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2238      	movs	r2, #56	; 0x38
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

  return status;
 8003efc:	230f      	movs	r3, #15
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	781b      	ldrb	r3, [r3, #0]
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	ffff00ff 	.word	0xffff00ff

08003f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	05db      	lsls	r3, r3, #23
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d00b      	beq.n	8003f82 <TIM_Base_SetConfig+0x32>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <TIM_Base_SetConfig+0xac>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_Base_SetConfig+0x32>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <TIM_Base_SetConfig+0xb0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_Base_SetConfig+0x32>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	; (8004004 <TIM_Base_SetConfig+0xb4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d108      	bne.n	8003f94 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2270      	movs	r2, #112	; 0x70
 8003f86:	4393      	bics	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	05db      	lsls	r3, r3, #23
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0x66>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <TIM_Base_SetConfig+0xac>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0x66>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <TIM_Base_SetConfig+0xb0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0x66>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <TIM_Base_SetConfig+0xb4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a13      	ldr	r2, [pc, #76]	; (8004008 <TIM_Base_SetConfig+0xb8>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	4393      	bics	r3, r2
 8003fce:	001a      	movs	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	615a      	str	r2, [r3, #20]
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40010800 	.word	0x40010800
 8004004:	40011400 	.word	0x40011400
 8004008:	fffffcff 	.word	0xfffffcff

0800400c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	2201      	movs	r2, #1
 8004024:	4393      	bics	r3, r2
 8004026:	001a      	movs	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	22f0      	movs	r2, #240	; 0xf0
 8004036:	4393      	bics	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	220a      	movs	r2, #10
 8004048:	4393      	bics	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	621a      	str	r2, [r3, #32]
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b006      	add	sp, #24
 8004066:	bd80      	pop	{r7, pc}

08004068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	2210      	movs	r2, #16
 800407a:	4393      	bics	r3, r2
 800407c:	001a      	movs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <TIM_TI2_ConfigInputStage+0x60>)
 8004092:	4013      	ands	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	031b      	lsls	r3, r3, #12
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	22a0      	movs	r2, #160	; 0xa0
 80040a4:	4393      	bics	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b006      	add	sp, #24
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	ffff0fff 	.word	0xffff0fff

080040cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2270      	movs	r2, #112	; 0x70
 80040e0:	4393      	bics	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	2207      	movs	r2, #7
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <TIM_ETR_SetConfig+0x3c>)
 8004118:	4013      	ands	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	021a      	lsls	r2, r3, #8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	431a      	orrs	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b006      	add	sp, #24
 800413a:	bd80      	pop	{r7, pc}
 800413c:	ffff00ff 	.word	0xffff00ff

08004140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2238      	movs	r2, #56	; 0x38
 800414e:	5c9b      	ldrb	r3, [r3, r2]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e047      	b.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2238      	movs	r2, #56	; 0x38
 800415c:	2101      	movs	r1, #1
 800415e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2239      	movs	r2, #57	; 0x39
 8004164:	2102      	movs	r1, #2
 8004166:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2270      	movs	r2, #112	; 0x70
 800417c:	4393      	bics	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	05db      	lsls	r3, r3, #23
 800419a:	429a      	cmp	r2, r3
 800419c:	d00e      	beq.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a10      	ldr	r2, [pc, #64]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10c      	bne.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	4393      	bics	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2239      	movs	r2, #57	; 0x39
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2238      	movs	r2, #56	; 0x38
 80041e2:	2100      	movs	r1, #0
 80041e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b004      	add	sp, #16
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40010800 	.word	0x40010800
 80041f8:	40011400 	.word	0x40011400

080041fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e044      	b.n	8004298 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2278      	movs	r2, #120	; 0x78
 800421a:	2100      	movs	r1, #0
 800421c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0018      	movs	r0, r3
 8004222:	f7fc fc9b 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2224      	movs	r2, #36	; 0x24
 800422a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2101      	movs	r1, #1
 8004238:	438a      	bics	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f8d0 	bl	80043e4 <UART_SetConfig>
 8004244:	0003      	movs	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e024      	b.n	8004298 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fb61 	bl	8004920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	490d      	ldr	r1, [pc, #52]	; (80042a0 <HAL_UART_Init+0xa4>)
 800426a:	400a      	ands	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	212a      	movs	r1, #42	; 0x2a
 800427a:	438a      	bics	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fbf9 	bl	8004a88 <UART_CheckIdleState>
 8004296:	0003      	movs	r3, r0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	ffffb7ff 	.word	0xffffb7ff

080042a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	1dbb      	adds	r3, r7, #6
 80042b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d000      	beq.n	80042be <HAL_UART_Transmit+0x1a>
 80042bc:	e08c      	b.n	80043d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_UART_Transmit+0x28>
 80042c4:	1dbb      	adds	r3, r7, #6
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e084      	b.n	80043da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	015b      	lsls	r3, r3, #5
 80042d8:	429a      	cmp	r2, r3
 80042da:	d109      	bne.n	80042f0 <HAL_UART_Transmit+0x4c>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d001      	beq.n	80042f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e074      	b.n	80043da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2284      	movs	r2, #132	; 0x84
 80042f4:	2100      	movs	r1, #0
 80042f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2221      	movs	r2, #33	; 0x21
 80042fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fe:	f7fd fbd1 	bl	8001aa4 <HAL_GetTick>
 8004302:	0003      	movs	r3, r0
 8004304:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1dba      	adds	r2, r7, #6
 800430a:	2150      	movs	r1, #80	; 0x50
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1dba      	adds	r2, r7, #6
 8004314:	2152      	movs	r1, #82	; 0x52
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	015b      	lsls	r3, r3, #5
 8004322:	429a      	cmp	r2, r3
 8004324:	d108      	bne.n	8004338 <HAL_UART_Transmit+0x94>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e003      	b.n	8004340 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004340:	e02f      	b.n	80043a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	0013      	movs	r3, r2
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	f000 fc42 	bl	8004bd8 <UART_WaitOnFlagUntilTimeout>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d004      	beq.n	8004362 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e03b      	b.n	80043da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	001a      	movs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	05d2      	lsls	r2, r2, #23
 8004374:	0dd2      	lsrs	r2, r2, #23
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	3302      	adds	r3, #2
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e007      	b.n	8004390 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2252      	movs	r2, #82	; 0x52
 8004394:	5a9b      	ldrh	r3, [r3, r2]
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b299      	uxth	r1, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2252      	movs	r2, #82	; 0x52
 80043a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2252      	movs	r2, #82	; 0x52
 80043a6:	5a9b      	ldrh	r3, [r3, r2]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1c9      	bne.n	8004342 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	0013      	movs	r3, r2
 80043b8:	2200      	movs	r2, #0
 80043ba:	2140      	movs	r1, #64	; 0x40
 80043bc:	f000 fc0c 	bl	8004bd8 <UART_WaitOnFlagUntilTimeout>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d004      	beq.n	80043ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e005      	b.n	80043da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
  }
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b008      	add	sp, #32
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b08e      	sub	sp, #56	; 0x38
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ec:	231a      	movs	r3, #26
 80043ee:	2218      	movs	r2, #24
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	431a      	orrs	r2, r3
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	431a      	orrs	r2, r3
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4313      	orrs	r3, r2
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4ac3      	ldr	r2, [pc, #780]	; (8004724 <UART_SetConfig+0x340>)
 8004418:	4013      	ands	r3, r2
 800441a:	0019      	movs	r1, r3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4abe      	ldr	r2, [pc, #760]	; (8004728 <UART_SetConfig+0x344>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4ab8      	ldr	r2, [pc, #736]	; (800472c <UART_SetConfig+0x348>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004454:	4313      	orrs	r3, r2
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4ab4      	ldr	r2, [pc, #720]	; (8004730 <UART_SetConfig+0x34c>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4ab0      	ldr	r2, [pc, #704]	; (8004734 <UART_SetConfig+0x350>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d131      	bne.n	80044dc <UART_SetConfig+0xf8>
 8004478:	4baf      	ldr	r3, [pc, #700]	; (8004738 <UART_SetConfig+0x354>)
 800447a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447c:	2203      	movs	r2, #3
 800447e:	4013      	ands	r3, r2
 8004480:	2b03      	cmp	r3, #3
 8004482:	d01d      	beq.n	80044c0 <UART_SetConfig+0xdc>
 8004484:	d823      	bhi.n	80044ce <UART_SetConfig+0xea>
 8004486:	2b02      	cmp	r3, #2
 8004488:	d00c      	beq.n	80044a4 <UART_SetConfig+0xc0>
 800448a:	d820      	bhi.n	80044ce <UART_SetConfig+0xea>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <UART_SetConfig+0xb2>
 8004490:	2b01      	cmp	r3, #1
 8004492:	d00e      	beq.n	80044b2 <UART_SetConfig+0xce>
 8004494:	e01b      	b.n	80044ce <UART_SetConfig+0xea>
 8004496:	231b      	movs	r3, #27
 8004498:	2218      	movs	r2, #24
 800449a:	189b      	adds	r3, r3, r2
 800449c:	19db      	adds	r3, r3, r7
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e0b4      	b.n	800460e <UART_SetConfig+0x22a>
 80044a4:	231b      	movs	r3, #27
 80044a6:	2218      	movs	r2, #24
 80044a8:	189b      	adds	r3, r3, r2
 80044aa:	19db      	adds	r3, r3, r7
 80044ac:	2202      	movs	r2, #2
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e0ad      	b.n	800460e <UART_SetConfig+0x22a>
 80044b2:	231b      	movs	r3, #27
 80044b4:	2218      	movs	r2, #24
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	19db      	adds	r3, r3, r7
 80044ba:	2204      	movs	r2, #4
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e0a6      	b.n	800460e <UART_SetConfig+0x22a>
 80044c0:	231b      	movs	r3, #27
 80044c2:	2218      	movs	r2, #24
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	2208      	movs	r2, #8
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e09f      	b.n	800460e <UART_SetConfig+0x22a>
 80044ce:	231b      	movs	r3, #27
 80044d0:	2218      	movs	r2, #24
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	19db      	adds	r3, r3, r7
 80044d6:	2210      	movs	r2, #16
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e098      	b.n	800460e <UART_SetConfig+0x22a>
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a96      	ldr	r2, [pc, #600]	; (800473c <UART_SetConfig+0x358>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d131      	bne.n	800454a <UART_SetConfig+0x166>
 80044e6:	4b94      	ldr	r3, [pc, #592]	; (8004738 <UART_SetConfig+0x354>)
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	220c      	movs	r2, #12
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d01d      	beq.n	800452e <UART_SetConfig+0x14a>
 80044f2:	d823      	bhi.n	800453c <UART_SetConfig+0x158>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d00c      	beq.n	8004512 <UART_SetConfig+0x12e>
 80044f8:	d820      	bhi.n	800453c <UART_SetConfig+0x158>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <UART_SetConfig+0x120>
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d00e      	beq.n	8004520 <UART_SetConfig+0x13c>
 8004502:	e01b      	b.n	800453c <UART_SetConfig+0x158>
 8004504:	231b      	movs	r3, #27
 8004506:	2218      	movs	r2, #24
 8004508:	189b      	adds	r3, r3, r2
 800450a:	19db      	adds	r3, r3, r7
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e07d      	b.n	800460e <UART_SetConfig+0x22a>
 8004512:	231b      	movs	r3, #27
 8004514:	2218      	movs	r2, #24
 8004516:	189b      	adds	r3, r3, r2
 8004518:	19db      	adds	r3, r3, r7
 800451a:	2202      	movs	r2, #2
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e076      	b.n	800460e <UART_SetConfig+0x22a>
 8004520:	231b      	movs	r3, #27
 8004522:	2218      	movs	r2, #24
 8004524:	189b      	adds	r3, r3, r2
 8004526:	19db      	adds	r3, r3, r7
 8004528:	2204      	movs	r2, #4
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	e06f      	b.n	800460e <UART_SetConfig+0x22a>
 800452e:	231b      	movs	r3, #27
 8004530:	2218      	movs	r2, #24
 8004532:	189b      	adds	r3, r3, r2
 8004534:	19db      	adds	r3, r3, r7
 8004536:	2208      	movs	r2, #8
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e068      	b.n	800460e <UART_SetConfig+0x22a>
 800453c:	231b      	movs	r3, #27
 800453e:	2218      	movs	r2, #24
 8004540:	189b      	adds	r3, r3, r2
 8004542:	19db      	adds	r3, r3, r7
 8004544:	2210      	movs	r2, #16
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e061      	b.n	800460e <UART_SetConfig+0x22a>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7c      	ldr	r2, [pc, #496]	; (8004740 <UART_SetConfig+0x35c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d106      	bne.n	8004562 <UART_SetConfig+0x17e>
 8004554:	231b      	movs	r3, #27
 8004556:	2218      	movs	r2, #24
 8004558:	189b      	adds	r3, r3, r2
 800455a:	19db      	adds	r3, r3, r7
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e055      	b.n	800460e <UART_SetConfig+0x22a>
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a77      	ldr	r2, [pc, #476]	; (8004744 <UART_SetConfig+0x360>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d106      	bne.n	800457a <UART_SetConfig+0x196>
 800456c:	231b      	movs	r3, #27
 800456e:	2218      	movs	r2, #24
 8004570:	189b      	adds	r3, r3, r2
 8004572:	19db      	adds	r3, r3, r7
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	e049      	b.n	800460e <UART_SetConfig+0x22a>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6b      	ldr	r2, [pc, #428]	; (800472c <UART_SetConfig+0x348>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d13e      	bne.n	8004602 <UART_SetConfig+0x21e>
 8004584:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <UART_SetConfig+0x354>)
 8004586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004588:	23c0      	movs	r3, #192	; 0xc0
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4013      	ands	r3, r2
 800458e:	22c0      	movs	r2, #192	; 0xc0
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	4293      	cmp	r3, r2
 8004594:	d027      	beq.n	80045e6 <UART_SetConfig+0x202>
 8004596:	22c0      	movs	r2, #192	; 0xc0
 8004598:	0112      	lsls	r2, r2, #4
 800459a:	4293      	cmp	r3, r2
 800459c:	d82a      	bhi.n	80045f4 <UART_SetConfig+0x210>
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d011      	beq.n	80045ca <UART_SetConfig+0x1e6>
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	0112      	lsls	r2, r2, #4
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d822      	bhi.n	80045f4 <UART_SetConfig+0x210>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <UART_SetConfig+0x1d8>
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	00d2      	lsls	r2, r2, #3
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <UART_SetConfig+0x1f4>
 80045ba:	e01b      	b.n	80045f4 <UART_SetConfig+0x210>
 80045bc:	231b      	movs	r3, #27
 80045be:	2218      	movs	r2, #24
 80045c0:	189b      	adds	r3, r3, r2
 80045c2:	19db      	adds	r3, r3, r7
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e021      	b.n	800460e <UART_SetConfig+0x22a>
 80045ca:	231b      	movs	r3, #27
 80045cc:	2218      	movs	r2, #24
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	19db      	adds	r3, r3, r7
 80045d2:	2202      	movs	r2, #2
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e01a      	b.n	800460e <UART_SetConfig+0x22a>
 80045d8:	231b      	movs	r3, #27
 80045da:	2218      	movs	r2, #24
 80045dc:	189b      	adds	r3, r3, r2
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	2204      	movs	r2, #4
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e013      	b.n	800460e <UART_SetConfig+0x22a>
 80045e6:	231b      	movs	r3, #27
 80045e8:	2218      	movs	r2, #24
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	19db      	adds	r3, r3, r7
 80045ee:	2208      	movs	r2, #8
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e00c      	b.n	800460e <UART_SetConfig+0x22a>
 80045f4:	231b      	movs	r3, #27
 80045f6:	2218      	movs	r2, #24
 80045f8:	189b      	adds	r3, r3, r2
 80045fa:	19db      	adds	r3, r3, r7
 80045fc:	2210      	movs	r2, #16
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	e005      	b.n	800460e <UART_SetConfig+0x22a>
 8004602:	231b      	movs	r3, #27
 8004604:	2218      	movs	r2, #24
 8004606:	189b      	adds	r3, r3, r2
 8004608:	19db      	adds	r3, r3, r7
 800460a:	2210      	movs	r2, #16
 800460c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a46      	ldr	r2, [pc, #280]	; (800472c <UART_SetConfig+0x348>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d000      	beq.n	800461a <UART_SetConfig+0x236>
 8004618:	e09a      	b.n	8004750 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800461a:	231b      	movs	r3, #27
 800461c:	2218      	movs	r2, #24
 800461e:	189b      	adds	r3, r3, r2
 8004620:	19db      	adds	r3, r3, r7
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d01d      	beq.n	8004664 <UART_SetConfig+0x280>
 8004628:	dc20      	bgt.n	800466c <UART_SetConfig+0x288>
 800462a:	2b04      	cmp	r3, #4
 800462c:	d015      	beq.n	800465a <UART_SetConfig+0x276>
 800462e:	dc1d      	bgt.n	800466c <UART_SetConfig+0x288>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <UART_SetConfig+0x256>
 8004634:	2b02      	cmp	r3, #2
 8004636:	d005      	beq.n	8004644 <UART_SetConfig+0x260>
 8004638:	e018      	b.n	800466c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463a:	f7fe fac3 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 800463e:	0003      	movs	r3, r0
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004642:	e01c      	b.n	800467e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004644:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <UART_SetConfig+0x354>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2210      	movs	r2, #16
 800464a:	4013      	ands	r3, r2
 800464c:	d002      	beq.n	8004654 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800464e:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <UART_SetConfig+0x364>)
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004652:	e014      	b.n	800467e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004654:	4b3d      	ldr	r3, [pc, #244]	; (800474c <UART_SetConfig+0x368>)
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004658:	e011      	b.n	800467e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe fa03 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 800465e:	0003      	movs	r3, r0
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004662:	e00c      	b.n	800467e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800466a:	e008      	b.n	800467e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004670:	231a      	movs	r3, #26
 8004672:	2218      	movs	r2, #24
 8004674:	189b      	adds	r3, r3, r2
 8004676:	19db      	adds	r3, r3, r7
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
        break;
 800467c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d100      	bne.n	8004686 <UART_SetConfig+0x2a2>
 8004684:	e133      	b.n	80048ee <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	0013      	movs	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	189b      	adds	r3, r3, r2
 8004690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004692:	429a      	cmp	r2, r3
 8004694:	d305      	bcc.n	80046a2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800469c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800469e:	429a      	cmp	r2, r3
 80046a0:	d906      	bls.n	80046b0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80046a2:	231a      	movs	r3, #26
 80046a4:	2218      	movs	r2, #24
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	19db      	adds	r3, r3, r7
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e11e      	b.n	80048ee <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	6939      	ldr	r1, [r7, #16]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	000b      	movs	r3, r1
 80046be:	0e1b      	lsrs	r3, r3, #24
 80046c0:	0010      	movs	r0, r2
 80046c2:	0205      	lsls	r5, r0, #8
 80046c4:	431d      	orrs	r5, r3
 80046c6:	000b      	movs	r3, r1
 80046c8:	021c      	lsls	r4, r3, #8
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	1900      	adds	r0, r0, r4
 80046dc:	4169      	adcs	r1, r5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f7fb fda0 	bl	8000230 <__aeabi_uldivmod>
 80046f0:	0002      	movs	r2, r0
 80046f2:	000b      	movs	r3, r1
 80046f4:	0013      	movs	r3, r2
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fa:	23c0      	movs	r3, #192	; 0xc0
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	429a      	cmp	r2, r3
 8004700:	d309      	bcc.n	8004716 <UART_SetConfig+0x332>
 8004702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	035b      	lsls	r3, r3, #13
 8004708:	429a      	cmp	r2, r3
 800470a:	d204      	bcs.n	8004716 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004712:	60da      	str	r2, [r3, #12]
 8004714:	e0eb      	b.n	80048ee <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004716:	231a      	movs	r3, #26
 8004718:	2218      	movs	r2, #24
 800471a:	189b      	adds	r3, r3, r2
 800471c:	19db      	adds	r3, r3, r7
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e0e4      	b.n	80048ee <UART_SetConfig+0x50a>
 8004724:	efff69f3 	.word	0xefff69f3
 8004728:	ffffcfff 	.word	0xffffcfff
 800472c:	40004800 	.word	0x40004800
 8004730:	fffff4ff 	.word	0xfffff4ff
 8004734:	40013800 	.word	0x40013800
 8004738:	40021000 	.word	0x40021000
 800473c:	40004400 	.word	0x40004400
 8004740:	40004c00 	.word	0x40004c00
 8004744:	40005000 	.word	0x40005000
 8004748:	003d0900 	.word	0x003d0900
 800474c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	429a      	cmp	r2, r3
 800475a:	d000      	beq.n	800475e <UART_SetConfig+0x37a>
 800475c:	e070      	b.n	8004840 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800475e:	231b      	movs	r3, #27
 8004760:	2218      	movs	r2, #24
 8004762:	189b      	adds	r3, r3, r2
 8004764:	19db      	adds	r3, r3, r7
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d822      	bhi.n	80047b2 <UART_SetConfig+0x3ce>
 800476c:	009a      	lsls	r2, r3, #2
 800476e:	4b67      	ldr	r3, [pc, #412]	; (800490c <UART_SetConfig+0x528>)
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004776:	f7fe fa25 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 800477a:	0003      	movs	r3, r0
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800477e:	e021      	b.n	80047c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004780:	f7fe fa36 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8004784:	0003      	movs	r3, r0
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004788:	e01c      	b.n	80047c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800478a:	4b61      	ldr	r3, [pc, #388]	; (8004910 <UART_SetConfig+0x52c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2210      	movs	r2, #16
 8004790:	4013      	ands	r3, r2
 8004792:	d002      	beq.n	800479a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004794:	4b5f      	ldr	r3, [pc, #380]	; (8004914 <UART_SetConfig+0x530>)
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004798:	e014      	b.n	80047c4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800479a:	4b5f      	ldr	r3, [pc, #380]	; (8004918 <UART_SetConfig+0x534>)
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800479e:	e011      	b.n	80047c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a0:	f7fe f960 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 80047a4:	0003      	movs	r3, r0
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047a8:	e00c      	b.n	80047c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b0:	e008      	b.n	80047c4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047b6:	231a      	movs	r3, #26
 80047b8:	2218      	movs	r2, #24
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	19db      	adds	r3, r3, r7
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
        break;
 80047c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d100      	bne.n	80047cc <UART_SetConfig+0x3e8>
 80047ca:	e090      	b.n	80048ee <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	005a      	lsls	r2, r3, #1
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	18d2      	adds	r2, r2, r3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0019      	movs	r1, r3
 80047de:	0010      	movs	r0, r2
 80047e0:	f7fb fc9a 	bl	8000118 <__udivsi3>
 80047e4:	0003      	movs	r3, r0
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d921      	bls.n	8004832 <UART_SetConfig+0x44e>
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	025b      	lsls	r3, r3, #9
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d21c      	bcs.n	8004832 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	200e      	movs	r0, #14
 80047fe:	2418      	movs	r4, #24
 8004800:	1903      	adds	r3, r0, r4
 8004802:	19db      	adds	r3, r3, r7
 8004804:	210f      	movs	r1, #15
 8004806:	438a      	bics	r2, r1
 8004808:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	2207      	movs	r2, #7
 8004812:	4013      	ands	r3, r2
 8004814:	b299      	uxth	r1, r3
 8004816:	1903      	adds	r3, r0, r4
 8004818:	19db      	adds	r3, r3, r7
 800481a:	1902      	adds	r2, r0, r4
 800481c:	19d2      	adds	r2, r2, r7
 800481e:	8812      	ldrh	r2, [r2, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1902      	adds	r2, r0, r4
 800482a:	19d2      	adds	r2, r2, r7
 800482c:	8812      	ldrh	r2, [r2, #0]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	e05d      	b.n	80048ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004832:	231a      	movs	r3, #26
 8004834:	2218      	movs	r2, #24
 8004836:	189b      	adds	r3, r3, r2
 8004838:	19db      	adds	r3, r3, r7
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e056      	b.n	80048ee <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004840:	231b      	movs	r3, #27
 8004842:	2218      	movs	r2, #24
 8004844:	189b      	adds	r3, r3, r2
 8004846:	19db      	adds	r3, r3, r7
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d822      	bhi.n	8004894 <UART_SetConfig+0x4b0>
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	4b32      	ldr	r3, [pc, #200]	; (800491c <UART_SetConfig+0x538>)
 8004852:	18d3      	adds	r3, r2, r3
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7fe f9b4 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 800485c:	0003      	movs	r3, r0
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004860:	e021      	b.n	80048a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004862:	f7fe f9c5 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8004866:	0003      	movs	r3, r0
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800486a:	e01c      	b.n	80048a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800486c:	4b28      	ldr	r3, [pc, #160]	; (8004910 <UART_SetConfig+0x52c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	4013      	ands	r3, r2
 8004874:	d002      	beq.n	800487c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <UART_SetConfig+0x530>)
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800487a:	e014      	b.n	80048a6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800487c:	4b26      	ldr	r3, [pc, #152]	; (8004918 <UART_SetConfig+0x534>)
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004880:	e011      	b.n	80048a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7fe f8ef 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8004886:	0003      	movs	r3, r0
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800488a:	e00c      	b.n	80048a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004892:	e008      	b.n	80048a6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004898:	231a      	movs	r3, #26
 800489a:	2218      	movs	r2, #24
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
        break;
 80048a4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d020      	beq.n	80048ee <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	085a      	lsrs	r2, r3, #1
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	0019      	movs	r1, r3
 80048bc:	0010      	movs	r0, r2
 80048be:	f7fb fc2b 	bl	8000118 <__udivsi3>
 80048c2:	0003      	movs	r3, r0
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d90a      	bls.n	80048e2 <UART_SetConfig+0x4fe>
 80048cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	025b      	lsls	r3, r3, #9
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d205      	bcs.n	80048e2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	b29a      	uxth	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60da      	str	r2, [r3, #12]
 80048e0:	e005      	b.n	80048ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80048e2:	231a      	movs	r3, #26
 80048e4:	2218      	movs	r2, #24
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	19db      	adds	r3, r3, r7
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2200      	movs	r2, #0
 80048f2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2200      	movs	r2, #0
 80048f8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048fa:	231a      	movs	r3, #26
 80048fc:	2218      	movs	r2, #24
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	19db      	adds	r3, r3, r7
 8004902:	781b      	ldrb	r3, [r3, #0]
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b00e      	add	sp, #56	; 0x38
 800490a:	bdb0      	pop	{r4, r5, r7, pc}
 800490c:	08005a24 	.word	0x08005a24
 8004910:	40021000 	.word	0x40021000
 8004914:	003d0900 	.word	0x003d0900
 8004918:	00f42400 	.word	0x00f42400
 800491c:	08005a48 	.word	0x08005a48

08004920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
 8004930:	d00b      	beq.n	800494a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a4a      	ldr	r2, [pc, #296]	; (8004a64 <UART_AdvFeatureConfig+0x144>)
 800493a:	4013      	ands	r3, r2
 800493c:	0019      	movs	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2202      	movs	r2, #2
 8004950:	4013      	ands	r3, r2
 8004952:	d00b      	beq.n	800496c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4a43      	ldr	r2, [pc, #268]	; (8004a68 <UART_AdvFeatureConfig+0x148>)
 800495c:	4013      	ands	r3, r2
 800495e:	0019      	movs	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	2204      	movs	r2, #4
 8004972:	4013      	ands	r3, r2
 8004974:	d00b      	beq.n	800498e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a3b      	ldr	r2, [pc, #236]	; (8004a6c <UART_AdvFeatureConfig+0x14c>)
 800497e:	4013      	ands	r3, r2
 8004980:	0019      	movs	r1, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2208      	movs	r2, #8
 8004994:	4013      	ands	r3, r2
 8004996:	d00b      	beq.n	80049b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4a34      	ldr	r2, [pc, #208]	; (8004a70 <UART_AdvFeatureConfig+0x150>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2210      	movs	r2, #16
 80049b6:	4013      	ands	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <UART_AdvFeatureConfig+0x154>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2220      	movs	r2, #32
 80049d8:	4013      	ands	r3, r2
 80049da:	d00b      	beq.n	80049f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <UART_AdvFeatureConfig+0x158>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	0019      	movs	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	4013      	ands	r3, r2
 80049fc:	d01d      	beq.n	8004a3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <UART_AdvFeatureConfig+0x15c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	0019      	movs	r1, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	035b      	lsls	r3, r3, #13
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d10b      	bne.n	8004a3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <UART_AdvFeatureConfig+0x160>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	4013      	ands	r3, r2
 8004a42:	d00b      	beq.n	8004a5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <UART_AdvFeatureConfig+0x164>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	fffdffff 	.word	0xfffdffff
 8004a68:	fffeffff 	.word	0xfffeffff
 8004a6c:	fffbffff 	.word	0xfffbffff
 8004a70:	ffff7fff 	.word	0xffff7fff
 8004a74:	ffffefff 	.word	0xffffefff
 8004a78:	ffffdfff 	.word	0xffffdfff
 8004a7c:	ffefffff 	.word	0xffefffff
 8004a80:	ff9fffff 	.word	0xff9fffff
 8004a84:	fff7ffff 	.word	0xfff7ffff

08004a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b092      	sub	sp, #72	; 0x48
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2284      	movs	r2, #132	; 0x84
 8004a94:	2100      	movs	r1, #0
 8004a96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a98:	f7fd f804 	bl	8001aa4 <HAL_GetTick>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d12c      	bne.n	8004b08 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab0:	2280      	movs	r2, #128	; 0x80
 8004ab2:	0391      	lsls	r1, r2, #14
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4a46      	ldr	r2, [pc, #280]	; (8004bd0 <UART_CheckIdleState+0x148>)
 8004ab8:	9200      	str	r2, [sp, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f000 f88c 	bl	8004bd8 <UART_WaitOnFlagUntilTimeout>
 8004ac0:	1e03      	subs	r3, r0, #0
 8004ac2:	d021      	beq.n	8004b08 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ace:	2301      	movs	r3, #1
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2180      	movs	r1, #128	; 0x80
 8004ae6:	438a      	bics	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	f383 8810 	msr	PRIMASK, r3
}
 8004af4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2278      	movs	r2, #120	; 0x78
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e05f      	b.n	8004bc8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d146      	bne.n	8004ba4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	03d1      	lsls	r1, r2, #15
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	; (8004bd0 <UART_CheckIdleState+0x148>)
 8004b20:	9200      	str	r2, [sp, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f000 f858 	bl	8004bd8 <UART_WaitOnFlagUntilTimeout>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d03b      	beq.n	8004ba4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b32:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	2301      	movs	r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f383 8810 	msr	PRIMASK, r3
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4921      	ldr	r1, [pc, #132]	; (8004bd4 <UART_CheckIdleState+0x14c>)
 8004b4e:	400a      	ands	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f383 8810 	msr	PRIMASK, r3
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b62:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b64:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	633b      	str	r3, [r7, #48]	; 0x30
 8004b68:	2301      	movs	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2101      	movs	r1, #1
 8004b80:	438a      	bics	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f383 8810 	msr	PRIMASK, r3
}
 8004b8e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	2120      	movs	r1, #32
 8004b96:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2278      	movs	r2, #120	; 0x78
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e011      	b.n	8004bc8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	2120      	movs	r1, #32
 8004bb0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2278      	movs	r2, #120	; 0x78
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b010      	add	sp, #64	; 0x40
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	01ffffff 	.word	0x01ffffff
 8004bd4:	fffffedf 	.word	0xfffffedf

08004bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	1dfb      	adds	r3, r7, #7
 8004be6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be8:	e04b      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	3301      	adds	r3, #1
 8004bee:	d048      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fc ff58 	bl	8001aa4 <HAL_GetTick>
 8004bf4:	0002      	movs	r2, r0
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e04b      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2204      	movs	r2, #4
 8004c12:	4013      	ands	r3, r2
 8004c14:	d035      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d111      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 f83c 	bl	8004cac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2284      	movs	r2, #132	; 0x84
 8004c38:	2108      	movs	r1, #8
 8004c3a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2278      	movs	r2, #120	; 0x78
 8004c40:	2100      	movs	r1, #0
 8004c42:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e02c      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	401a      	ands	r2, r3
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d112      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 f81f 	bl	8004cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2284      	movs	r2, #132	; 0x84
 8004c72:	2120      	movs	r1, #32
 8004c74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2278      	movs	r2, #120	; 0x78
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e00f      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	425a      	negs	r2, r3
 8004c92:	4153      	adcs	r3, r2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	001a      	movs	r2, r3
 8004c98:	1dfb      	adds	r3, r7, #7
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d0a4      	beq.n	8004bea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b004      	add	sp, #16
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	; 0x38
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8004cba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4926      	ldr	r1, [pc, #152]	; (8004d70 <UART_EndRxTransfer+0xc4>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cea:	623b      	str	r3, [r7, #32]
  return(result);
 8004cec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2101      	movs	r1, #1
 8004d08:	438a      	bics	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f383 8810 	msr	PRIMASK, r3
}
 8004d16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d118      	bne.n	8004d52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d20:	f3ef 8310 	mrs	r3, PRIMASK
 8004d24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f383 8810 	msr	PRIMASK, r3
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2110      	movs	r1, #16
 8004d42:	438a      	bics	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f383 8810 	msr	PRIMASK, r3
}
 8004d50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	2120      	movs	r1, #32
 8004d58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b00e      	add	sp, #56	; 0x38
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	fffffedf 	.word	0xfffffedf

08004d74 <findslot>:
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <findslot+0x2c>)
 8004d76:	b510      	push	{r4, lr}
 8004d78:	0004      	movs	r4, r0
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d004      	beq.n	8004d8a <findslot+0x16>
 8004d80:	6a03      	ldr	r3, [r0, #32]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <findslot+0x16>
 8004d86:	f000 fbb1 	bl	80054ec <__sinit>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	2c13      	cmp	r4, #19
 8004d8e:	d805      	bhi.n	8004d9c <findslot+0x28>
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <findslot+0x30>)
 8004d92:	00e4      	lsls	r4, r4, #3
 8004d94:	58e2      	ldr	r2, [r4, r3]
 8004d96:	3201      	adds	r2, #1
 8004d98:	d000      	beq.n	8004d9c <findslot+0x28>
 8004d9a:	18e0      	adds	r0, r4, r3
 8004d9c:	bd10      	pop	{r4, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	2000006c 	.word	0x2000006c
 8004da4:	20000320 	.word	0x20000320

08004da8 <error>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	0004      	movs	r4, r0
 8004dac:	f000 fc86 	bl	80056bc <__errno>
 8004db0:	2613      	movs	r6, #19
 8004db2:	0005      	movs	r5, r0
 8004db4:	2700      	movs	r7, #0
 8004db6:	1c30      	adds	r0, r6, #0
 8004db8:	1c39      	adds	r1, r7, #0
 8004dba:	beab      	bkpt	0x00ab
 8004dbc:	1c06      	adds	r6, r0, #0
 8004dbe:	602e      	str	r6, [r5, #0]
 8004dc0:	0020      	movs	r0, r4
 8004dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dc4 <checkerror>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d101      	bne.n	8004dce <checkerror+0xa>
 8004dca:	f7ff ffed 	bl	8004da8 <error>
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <_swiread>:
 8004dd0:	b530      	push	{r4, r5, lr}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	ad01      	add	r5, sp, #4
 8004dd6:	9001      	str	r0, [sp, #4]
 8004dd8:	9102      	str	r1, [sp, #8]
 8004dda:	9203      	str	r2, [sp, #12]
 8004ddc:	2406      	movs	r4, #6
 8004dde:	1c20      	adds	r0, r4, #0
 8004de0:	1c29      	adds	r1, r5, #0
 8004de2:	beab      	bkpt	0x00ab
 8004de4:	1c04      	adds	r4, r0, #0
 8004de6:	0020      	movs	r0, r4
 8004de8:	f7ff ffec 	bl	8004dc4 <checkerror>
 8004dec:	b005      	add	sp, #20
 8004dee:	bd30      	pop	{r4, r5, pc}

08004df0 <_read>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	000e      	movs	r6, r1
 8004df4:	0015      	movs	r5, r2
 8004df6:	f7ff ffbd 	bl	8004d74 <findslot>
 8004dfa:	1e04      	subs	r4, r0, #0
 8004dfc:	d106      	bne.n	8004e0c <_read+0x1c>
 8004dfe:	f000 fc5d 	bl	80056bc <__errno>
 8004e02:	2309      	movs	r3, #9
 8004e04:	6003      	str	r3, [r0, #0]
 8004e06:	2001      	movs	r0, #1
 8004e08:	4240      	negs	r0, r0
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	002a      	movs	r2, r5
 8004e0e:	0031      	movs	r1, r6
 8004e10:	6800      	ldr	r0, [r0, #0]
 8004e12:	f7ff ffdd 	bl	8004dd0 <_swiread>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d0f7      	beq.n	8004e0a <_read+0x1a>
 8004e1a:	6863      	ldr	r3, [r4, #4]
 8004e1c:	1a28      	subs	r0, r5, r0
 8004e1e:	181b      	adds	r3, r3, r0
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	e7f2      	b.n	8004e0a <_read+0x1a>

08004e24 <_swilseek>:
 8004e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e26:	000c      	movs	r4, r1
 8004e28:	0016      	movs	r6, r2
 8004e2a:	f7ff ffa3 	bl	8004d74 <findslot>
 8004e2e:	1e05      	subs	r5, r0, #0
 8004e30:	d107      	bne.n	8004e42 <_swilseek+0x1e>
 8004e32:	f000 fc43 	bl	80056bc <__errno>
 8004e36:	2309      	movs	r3, #9
 8004e38:	6003      	str	r3, [r0, #0]
 8004e3a:	2401      	movs	r4, #1
 8004e3c:	4264      	negs	r4, r4
 8004e3e:	0020      	movs	r0, r4
 8004e40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e42:	2e02      	cmp	r6, #2
 8004e44:	d903      	bls.n	8004e4e <_swilseek+0x2a>
 8004e46:	f000 fc39 	bl	80056bc <__errno>
 8004e4a:	2316      	movs	r3, #22
 8004e4c:	e7f4      	b.n	8004e38 <_swilseek+0x14>
 8004e4e:	2e01      	cmp	r6, #1
 8004e50:	d112      	bne.n	8004e78 <_swilseek+0x54>
 8004e52:	6843      	ldr	r3, [r0, #4]
 8004e54:	18e4      	adds	r4, r4, r3
 8004e56:	d4f6      	bmi.n	8004e46 <_swilseek+0x22>
 8004e58:	466f      	mov	r7, sp
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	260a      	movs	r6, #10
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	607c      	str	r4, [r7, #4]
 8004e62:	1c30      	adds	r0, r6, #0
 8004e64:	1c39      	adds	r1, r7, #0
 8004e66:	beab      	bkpt	0x00ab
 8004e68:	1c06      	adds	r6, r0, #0
 8004e6a:	0030      	movs	r0, r6
 8004e6c:	f7ff ffaa 	bl	8004dc4 <checkerror>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	dbe2      	blt.n	8004e3a <_swilseek+0x16>
 8004e74:	606c      	str	r4, [r5, #4]
 8004e76:	e7e2      	b.n	8004e3e <_swilseek+0x1a>
 8004e78:	6803      	ldr	r3, [r0, #0]
 8004e7a:	2e02      	cmp	r6, #2
 8004e7c:	d1ec      	bne.n	8004e58 <_swilseek+0x34>
 8004e7e:	466f      	mov	r7, sp
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	360a      	adds	r6, #10
 8004e84:	1c30      	adds	r0, r6, #0
 8004e86:	1c39      	adds	r1, r7, #0
 8004e88:	beab      	bkpt	0x00ab
 8004e8a:	1c06      	adds	r6, r0, #0
 8004e8c:	0030      	movs	r0, r6
 8004e8e:	f7ff ff99 	bl	8004dc4 <checkerror>
 8004e92:	1824      	adds	r4, r4, r0
 8004e94:	3001      	adds	r0, #1
 8004e96:	d1df      	bne.n	8004e58 <_swilseek+0x34>
 8004e98:	e7cf      	b.n	8004e3a <_swilseek+0x16>

08004e9a <_lseek>:
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	f7ff ffc2 	bl	8004e24 <_swilseek>
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <_swiwrite>:
 8004ea2:	b530      	push	{r4, r5, lr}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	ad01      	add	r5, sp, #4
 8004ea8:	9001      	str	r0, [sp, #4]
 8004eaa:	9102      	str	r1, [sp, #8]
 8004eac:	9203      	str	r2, [sp, #12]
 8004eae:	2405      	movs	r4, #5
 8004eb0:	1c20      	adds	r0, r4, #0
 8004eb2:	1c29      	adds	r1, r5, #0
 8004eb4:	beab      	bkpt	0x00ab
 8004eb6:	1c04      	adds	r4, r0, #0
 8004eb8:	0020      	movs	r0, r4
 8004eba:	f7ff ff83 	bl	8004dc4 <checkerror>
 8004ebe:	b005      	add	sp, #20
 8004ec0:	bd30      	pop	{r4, r5, pc}

08004ec2 <_write>:
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	000e      	movs	r6, r1
 8004ec6:	0015      	movs	r5, r2
 8004ec8:	f7ff ff54 	bl	8004d74 <findslot>
 8004ecc:	1e04      	subs	r4, r0, #0
 8004ece:	d106      	bne.n	8004ede <_write+0x1c>
 8004ed0:	f000 fbf4 	bl	80056bc <__errno>
 8004ed4:	2309      	movs	r3, #9
 8004ed6:	6003      	str	r3, [r0, #0]
 8004ed8:	2001      	movs	r0, #1
 8004eda:	4240      	negs	r0, r0
 8004edc:	e00f      	b.n	8004efe <_write+0x3c>
 8004ede:	002a      	movs	r2, r5
 8004ee0:	0031      	movs	r1, r6
 8004ee2:	6800      	ldr	r0, [r0, #0]
 8004ee4:	f7ff ffdd 	bl	8004ea2 <_swiwrite>
 8004ee8:	1e03      	subs	r3, r0, #0
 8004eea:	dbf5      	blt.n	8004ed8 <_write+0x16>
 8004eec:	6862      	ldr	r2, [r4, #4]
 8004eee:	1a28      	subs	r0, r5, r0
 8004ef0:	1812      	adds	r2, r2, r0
 8004ef2:	6062      	str	r2, [r4, #4]
 8004ef4:	42ab      	cmp	r3, r5
 8004ef6:	d102      	bne.n	8004efe <_write+0x3c>
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7ff ff55 	bl	8004da8 <error>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}

08004f00 <_swiclose>:
 8004f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f02:	2402      	movs	r4, #2
 8004f04:	9001      	str	r0, [sp, #4]
 8004f06:	ad01      	add	r5, sp, #4
 8004f08:	1c20      	adds	r0, r4, #0
 8004f0a:	1c29      	adds	r1, r5, #0
 8004f0c:	beab      	bkpt	0x00ab
 8004f0e:	1c04      	adds	r4, r0, #0
 8004f10:	0020      	movs	r0, r4
 8004f12:	f7ff ff57 	bl	8004dc4 <checkerror>
 8004f16:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08004f18 <_close>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	0005      	movs	r5, r0
 8004f1c:	f7ff ff2a 	bl	8004d74 <findslot>
 8004f20:	1e04      	subs	r4, r0, #0
 8004f22:	d106      	bne.n	8004f32 <_close+0x1a>
 8004f24:	f000 fbca 	bl	80056bc <__errno>
 8004f28:	2309      	movs	r3, #9
 8004f2a:	6003      	str	r3, [r0, #0]
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	4240      	negs	r0, r0
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	3d01      	subs	r5, #1
 8004f34:	2d01      	cmp	r5, #1
 8004f36:	d809      	bhi.n	8004f4c <_close+0x34>
 8004f38:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <_close+0x48>)
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d104      	bne.n	8004f4c <_close+0x34>
 8004f42:	2301      	movs	r3, #1
 8004f44:	425b      	negs	r3, r3
 8004f46:	6003      	str	r3, [r0, #0]
 8004f48:	2000      	movs	r0, #0
 8004f4a:	e7f1      	b.n	8004f30 <_close+0x18>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	f7ff ffd7 	bl	8004f00 <_swiclose>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d1ec      	bne.n	8004f30 <_close+0x18>
 8004f56:	2301      	movs	r3, #1
 8004f58:	425b      	negs	r3, r3
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	e7e8      	b.n	8004f30 <_close+0x18>
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	20000320 	.word	0x20000320

08004f64 <_swistat>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	000c      	movs	r4, r1
 8004f68:	f7ff ff04 	bl	8004d74 <findslot>
 8004f6c:	1e05      	subs	r5, r0, #0
 8004f6e:	d106      	bne.n	8004f7e <_swistat+0x1a>
 8004f70:	f000 fba4 	bl	80056bc <__errno>
 8004f74:	2309      	movs	r3, #9
 8004f76:	6003      	str	r3, [r0, #0]
 8004f78:	2001      	movs	r0, #1
 8004f7a:	4240      	negs	r0, r0
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	6862      	ldr	r2, [r4, #4]
 8004f82:	019b      	lsls	r3, r3, #6
 8004f84:	4313      	orrs	r3, r2
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	2380      	movs	r3, #128	; 0x80
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	260c      	movs	r6, #12
 8004f8e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f90:	1c30      	adds	r0, r6, #0
 8004f92:	1c29      	adds	r1, r5, #0
 8004f94:	beab      	bkpt	0x00ab
 8004f96:	1c05      	adds	r5, r0, #0
 8004f98:	0028      	movs	r0, r5
 8004f9a:	f7ff ff13 	bl	8004dc4 <checkerror>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d0ec      	beq.n	8004f7c <_swistat+0x18>
 8004fa2:	6120      	str	r0, [r4, #16]
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e7e9      	b.n	8004f7c <_swistat+0x18>

08004fa8 <_stat>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	000d      	movs	r5, r1
 8004fac:	0004      	movs	r4, r0
 8004fae:	2258      	movs	r2, #88	; 0x58
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	0028      	movs	r0, r5
 8004fb4:	f000 fb1a 	bl	80055ec <memset>
 8004fb8:	0020      	movs	r0, r4
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f000 f812 	bl	8004fe4 <_swiopen>
 8004fc0:	0004      	movs	r4, r0
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	d00c      	beq.n	8004fe0 <_stat+0x38>
 8004fc6:	2381      	movs	r3, #129	; 0x81
 8004fc8:	686a      	ldr	r2, [r5, #4]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	0029      	movs	r1, r5
 8004fd0:	606b      	str	r3, [r5, #4]
 8004fd2:	f7ff ffc7 	bl	8004f64 <_swistat>
 8004fd6:	0005      	movs	r5, r0
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f7ff ff9d 	bl	8004f18 <_close>
 8004fde:	002c      	movs	r4, r5
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}

08004fe4 <_swiopen>:
 8004fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe6:	000d      	movs	r5, r1
 8004fe8:	2600      	movs	r6, #0
 8004fea:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <_swiopen+0xb4>)
 8004fec:	b09b      	sub	sp, #108	; 0x6c
 8004fee:	9001      	str	r0, [sp, #4]
 8004ff0:	9302      	str	r3, [sp, #8]
 8004ff2:	00f3      	lsls	r3, r6, #3
 8004ff4:	9303      	str	r3, [sp, #12]
 8004ff6:	9b02      	ldr	r3, [sp, #8]
 8004ff8:	00f2      	lsls	r2, r6, #3
 8004ffa:	589c      	ldr	r4, [r3, r2]
 8004ffc:	1c63      	adds	r3, r4, #1
 8004ffe:	d036      	beq.n	800506e <_swiopen+0x8a>
 8005000:	3601      	adds	r6, #1
 8005002:	2e14      	cmp	r6, #20
 8005004:	d1f5      	bne.n	8004ff2 <_swiopen+0xe>
 8005006:	f000 fb59 	bl	80056bc <__errno>
 800500a:	2401      	movs	r4, #1
 800500c:	2318      	movs	r3, #24
 800500e:	4264      	negs	r4, r4
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	e03d      	b.n	8005090 <_swiopen+0xac>
 8005014:	2302      	movs	r3, #2
 8005016:	03ec      	lsls	r4, r5, #15
 8005018:	0fe4      	lsrs	r4, r4, #31
 800501a:	421d      	tst	r5, r3
 800501c:	d000      	beq.n	8005020 <_swiopen+0x3c>
 800501e:	431c      	orrs	r4, r3
 8005020:	4b1e      	ldr	r3, [pc, #120]	; (800509c <_swiopen+0xb8>)
 8005022:	421d      	tst	r5, r3
 8005024:	d001      	beq.n	800502a <_swiopen+0x46>
 8005026:	2304      	movs	r3, #4
 8005028:	431c      	orrs	r4, r3
 800502a:	2308      	movs	r3, #8
 800502c:	421d      	tst	r5, r3
 800502e:	d002      	beq.n	8005036 <_swiopen+0x52>
 8005030:	2204      	movs	r2, #4
 8005032:	4394      	bics	r4, r2
 8005034:	431c      	orrs	r4, r3
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	0018      	movs	r0, r3
 800503a:	9304      	str	r3, [sp, #16]
 800503c:	f7fb f864 	bl	8000108 <strlen>
 8005040:	607c      	str	r4, [r7, #4]
 8005042:	60b8      	str	r0, [r7, #8]
 8005044:	2401      	movs	r4, #1
 8005046:	1c20      	adds	r0, r4, #0
 8005048:	1c39      	adds	r1, r7, #0
 800504a:	beab      	bkpt	0x00ab
 800504c:	1c04      	adds	r4, r0, #0
 800504e:	2c00      	cmp	r4, #0
 8005050:	db08      	blt.n	8005064 <_swiopen+0x80>
 8005052:	00f2      	lsls	r2, r6, #3
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	4694      	mov	ip, r2
 8005058:	509c      	str	r4, [r3, r2]
 800505a:	2200      	movs	r2, #0
 800505c:	4463      	add	r3, ip
 800505e:	0034      	movs	r4, r6
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	e015      	b.n	8005090 <_swiopen+0xac>
 8005064:	0020      	movs	r0, r4
 8005066:	f7ff fe9f 	bl	8004da8 <error>
 800506a:	0004      	movs	r4, r0
 800506c:	e010      	b.n	8005090 <_swiopen+0xac>
 800506e:	23a0      	movs	r3, #160	; 0xa0
 8005070:	002a      	movs	r2, r5
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	401a      	ands	r2, r3
 8005076:	af04      	add	r7, sp, #16
 8005078:	429a      	cmp	r2, r3
 800507a:	d1cb      	bne.n	8005014 <_swiopen+0x30>
 800507c:	0039      	movs	r1, r7
 800507e:	9801      	ldr	r0, [sp, #4]
 8005080:	f7ff ff92 	bl	8004fa8 <_stat>
 8005084:	3001      	adds	r0, #1
 8005086:	d0c5      	beq.n	8005014 <_swiopen+0x30>
 8005088:	f000 fb18 	bl	80056bc <__errno>
 800508c:	2311      	movs	r3, #17
 800508e:	6003      	str	r3, [r0, #0]
 8005090:	0020      	movs	r0, r4
 8005092:	b01b      	add	sp, #108	; 0x6c
 8005094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	20000320 	.word	0x20000320
 800509c:	00000601 	.word	0x00000601

080050a0 <_get_semihosting_exts>:
 80050a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a2:	b085      	sub	sp, #20
 80050a4:	9000      	str	r0, [sp, #0]
 80050a6:	9101      	str	r1, [sp, #4]
 80050a8:	4827      	ldr	r0, [pc, #156]	; (8005148 <_get_semihosting_exts+0xa8>)
 80050aa:	2100      	movs	r1, #0
 80050ac:	0015      	movs	r5, r2
 80050ae:	f7ff ff99 	bl	8004fe4 <_swiopen>
 80050b2:	0004      	movs	r4, r0
 80050b4:	002a      	movs	r2, r5
 80050b6:	2100      	movs	r1, #0
 80050b8:	9800      	ldr	r0, [sp, #0]
 80050ba:	f000 fa97 	bl	80055ec <memset>
 80050be:	1c63      	adds	r3, r4, #1
 80050c0:	d015      	beq.n	80050ee <_get_semihosting_exts+0x4e>
 80050c2:	0020      	movs	r0, r4
 80050c4:	f7ff fe56 	bl	8004d74 <findslot>
 80050c8:	260c      	movs	r6, #12
 80050ca:	0007      	movs	r7, r0
 80050cc:	1c30      	adds	r0, r6, #0
 80050ce:	1c39      	adds	r1, r7, #0
 80050d0:	beab      	bkpt	0x00ab
 80050d2:	1c06      	adds	r6, r0, #0
 80050d4:	0030      	movs	r0, r6
 80050d6:	f7ff fe75 	bl	8004dc4 <checkerror>
 80050da:	2803      	cmp	r0, #3
 80050dc:	dd02      	ble.n	80050e4 <_get_semihosting_exts+0x44>
 80050de:	3803      	subs	r0, #3
 80050e0:	42a8      	cmp	r0, r5
 80050e2:	dc07      	bgt.n	80050f4 <_get_semihosting_exts+0x54>
 80050e4:	0020      	movs	r0, r4
 80050e6:	2401      	movs	r4, #1
 80050e8:	f7ff ff16 	bl	8004f18 <_close>
 80050ec:	4264      	negs	r4, r4
 80050ee:	0020      	movs	r0, r4
 80050f0:	b005      	add	sp, #20
 80050f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f4:	ae03      	add	r6, sp, #12
 80050f6:	2204      	movs	r2, #4
 80050f8:	0031      	movs	r1, r6
 80050fa:	0020      	movs	r0, r4
 80050fc:	f7ff fe78 	bl	8004df0 <_read>
 8005100:	2803      	cmp	r0, #3
 8005102:	ddef      	ble.n	80050e4 <_get_semihosting_exts+0x44>
 8005104:	7833      	ldrb	r3, [r6, #0]
 8005106:	2b53      	cmp	r3, #83	; 0x53
 8005108:	d1ec      	bne.n	80050e4 <_get_semihosting_exts+0x44>
 800510a:	7873      	ldrb	r3, [r6, #1]
 800510c:	2b48      	cmp	r3, #72	; 0x48
 800510e:	d1e9      	bne.n	80050e4 <_get_semihosting_exts+0x44>
 8005110:	78b3      	ldrb	r3, [r6, #2]
 8005112:	2b46      	cmp	r3, #70	; 0x46
 8005114:	d1e6      	bne.n	80050e4 <_get_semihosting_exts+0x44>
 8005116:	78f3      	ldrb	r3, [r6, #3]
 8005118:	2b42      	cmp	r3, #66	; 0x42
 800511a:	d1e3      	bne.n	80050e4 <_get_semihosting_exts+0x44>
 800511c:	2201      	movs	r2, #1
 800511e:	0020      	movs	r0, r4
 8005120:	9901      	ldr	r1, [sp, #4]
 8005122:	f7ff fe7f 	bl	8004e24 <_swilseek>
 8005126:	2800      	cmp	r0, #0
 8005128:	dbdc      	blt.n	80050e4 <_get_semihosting_exts+0x44>
 800512a:	002a      	movs	r2, r5
 800512c:	9900      	ldr	r1, [sp, #0]
 800512e:	0020      	movs	r0, r4
 8005130:	f7ff fe5e 	bl	8004df0 <_read>
 8005134:	0005      	movs	r5, r0
 8005136:	0020      	movs	r0, r4
 8005138:	f7ff feee 	bl	8004f18 <_close>
 800513c:	0028      	movs	r0, r5
 800513e:	f7ff fe41 	bl	8004dc4 <checkerror>
 8005142:	0004      	movs	r4, r0
 8005144:	e7d3      	b.n	80050ee <_get_semihosting_exts+0x4e>
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	08005a6c 	.word	0x08005a6c

0800514c <initialise_semihosting_exts>:
 800514c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514e:	2401      	movs	r4, #1
 8005150:	2100      	movs	r1, #0
 8005152:	4e09      	ldr	r6, [pc, #36]	; (8005178 <initialise_semihosting_exts+0x2c>)
 8005154:	4d09      	ldr	r5, [pc, #36]	; (800517c <initialise_semihosting_exts+0x30>)
 8005156:	af01      	add	r7, sp, #4
 8005158:	0022      	movs	r2, r4
 800515a:	0038      	movs	r0, r7
 800515c:	6031      	str	r1, [r6, #0]
 800515e:	602c      	str	r4, [r5, #0]
 8005160:	f7ff ff9e 	bl	80050a0 <_get_semihosting_exts>
 8005164:	2800      	cmp	r0, #0
 8005166:	dd05      	ble.n	8005174 <initialise_semihosting_exts+0x28>
 8005168:	2202      	movs	r2, #2
 800516a:	783b      	ldrb	r3, [r7, #0]
 800516c:	401c      	ands	r4, r3
 800516e:	4013      	ands	r3, r2
 8005170:	6034      	str	r4, [r6, #0]
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	2000000c 	.word	0x2000000c
 800517c:	20000010 	.word	0x20000010

08005180 <_has_ext_stdout_stderr>:
 8005180:	b510      	push	{r4, lr}
 8005182:	4c04      	ldr	r4, [pc, #16]	; (8005194 <_has_ext_stdout_stderr+0x14>)
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	da01      	bge.n	800518e <_has_ext_stdout_stderr+0xe>
 800518a:	f7ff ffdf 	bl	800514c <initialise_semihosting_exts>
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	bd10      	pop	{r4, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	20000010 	.word	0x20000010

08005198 <initialise_monitor_handles>:
 8005198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519a:	4b28      	ldr	r3, [pc, #160]	; (800523c <initialise_monitor_handles+0xa4>)
 800519c:	b087      	sub	sp, #28
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	2500      	movs	r5, #0
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2303      	movs	r3, #3
 80051a6:	ac03      	add	r4, sp, #12
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	2601      	movs	r6, #1
 80051ac:	6065      	str	r5, [r4, #4]
 80051ae:	1c30      	adds	r0, r6, #0
 80051b0:	1c21      	adds	r1, r4, #0
 80051b2:	beab      	bkpt	0x00ab
 80051b4:	1c06      	adds	r6, r0, #0
 80051b6:	2101      	movs	r1, #1
 80051b8:	4b21      	ldr	r3, [pc, #132]	; (8005240 <initialise_monitor_handles+0xa8>)
 80051ba:	4249      	negs	r1, r1
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	601e      	str	r6, [r3, #0]
 80051c0:	002b      	movs	r3, r5
 80051c2:	4d20      	ldr	r5, [pc, #128]	; (8005244 <initialise_monitor_handles+0xac>)
 80051c4:	00da      	lsls	r2, r3, #3
 80051c6:	3301      	adds	r3, #1
 80051c8:	50a9      	str	r1, [r5, r2]
 80051ca:	2b14      	cmp	r3, #20
 80051cc:	d1fa      	bne.n	80051c4 <initialise_monitor_handles+0x2c>
 80051ce:	f7ff ffd7 	bl	8005180 <_has_ext_stdout_stderr>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d018      	beq.n	8005208 <initialise_monitor_handles+0x70>
 80051d6:	9b00      	ldr	r3, [sp, #0]
 80051d8:	2601      	movs	r6, #1
 80051da:	9303      	str	r3, [sp, #12]
 80051dc:	2303      	movs	r3, #3
 80051de:	60a3      	str	r3, [r4, #8]
 80051e0:	3301      	adds	r3, #1
 80051e2:	6063      	str	r3, [r4, #4]
 80051e4:	1c30      	adds	r0, r6, #0
 80051e6:	1c21      	adds	r1, r4, #0
 80051e8:	beab      	bkpt	0x00ab
 80051ea:	1c07      	adds	r7, r0, #0
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <initialise_monitor_handles+0xb0>)
 80051ee:	9a00      	ldr	r2, [sp, #0]
 80051f0:	601f      	str	r7, [r3, #0]
 80051f2:	2303      	movs	r3, #3
 80051f4:	9203      	str	r2, [sp, #12]
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	3305      	adds	r3, #5
 80051fa:	6063      	str	r3, [r4, #4]
 80051fc:	1c30      	adds	r0, r6, #0
 80051fe:	1c21      	adds	r1, r4, #0
 8005200:	beab      	bkpt	0x00ab
 8005202:	1c06      	adds	r6, r0, #0
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <initialise_monitor_handles+0xb4>)
 8005206:	601e      	str	r6, [r3, #0]
 8005208:	4e10      	ldr	r6, [pc, #64]	; (800524c <initialise_monitor_handles+0xb4>)
 800520a:	6833      	ldr	r3, [r6, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	d102      	bne.n	8005216 <initialise_monitor_handles+0x7e>
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <initialise_monitor_handles+0xb0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	2400      	movs	r4, #0
 8005218:	9b01      	ldr	r3, [sp, #4]
 800521a:	606c      	str	r4, [r5, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7ff ffae 	bl	8005180 <_has_ext_stdout_stderr>
 8005224:	42a0      	cmp	r0, r4
 8005226:	d006      	beq.n	8005236 <initialise_monitor_handles+0x9e>
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <initialise_monitor_handles+0xb0>)
 800522a:	60ec      	str	r4, [r5, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	616c      	str	r4, [r5, #20]
 8005230:	60ab      	str	r3, [r5, #8]
 8005232:	6833      	ldr	r3, [r6, #0]
 8005234:	612b      	str	r3, [r5, #16]
 8005236:	b007      	add	sp, #28
 8005238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	08005a82 	.word	0x08005a82
 8005240:	20000318 	.word	0x20000318
 8005244:	20000320 	.word	0x20000320
 8005248:	2000031c 	.word	0x2000031c
 800524c:	20000314 	.word	0x20000314

08005250 <malloc>:
 8005250:	b510      	push	{r4, lr}
 8005252:	4b03      	ldr	r3, [pc, #12]	; (8005260 <malloc+0x10>)
 8005254:	0001      	movs	r1, r0
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	f000 f826 	bl	80052a8 <_malloc_r>
 800525c:	bd10      	pop	{r4, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	2000006c 	.word	0x2000006c

08005264 <sbrk_aligned>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4e0f      	ldr	r6, [pc, #60]	; (80052a4 <sbrk_aligned+0x40>)
 8005268:	000d      	movs	r5, r1
 800526a:	6831      	ldr	r1, [r6, #0]
 800526c:	0004      	movs	r4, r0
 800526e:	2900      	cmp	r1, #0
 8005270:	d102      	bne.n	8005278 <sbrk_aligned+0x14>
 8005272:	f000 f9fd 	bl	8005670 <_sbrk_r>
 8005276:	6030      	str	r0, [r6, #0]
 8005278:	0029      	movs	r1, r5
 800527a:	0020      	movs	r0, r4
 800527c:	f000 f9f8 	bl	8005670 <_sbrk_r>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d00a      	beq.n	800529a <sbrk_aligned+0x36>
 8005284:	2303      	movs	r3, #3
 8005286:	1cc5      	adds	r5, r0, #3
 8005288:	439d      	bics	r5, r3
 800528a:	42a8      	cmp	r0, r5
 800528c:	d007      	beq.n	800529e <sbrk_aligned+0x3a>
 800528e:	1a29      	subs	r1, r5, r0
 8005290:	0020      	movs	r0, r4
 8005292:	f000 f9ed 	bl	8005670 <_sbrk_r>
 8005296:	3001      	adds	r0, #1
 8005298:	d101      	bne.n	800529e <sbrk_aligned+0x3a>
 800529a:	2501      	movs	r5, #1
 800529c:	426d      	negs	r5, r5
 800529e:	0028      	movs	r0, r5
 80052a0:	bd70      	pop	{r4, r5, r6, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	200003c4 	.word	0x200003c4

080052a8 <_malloc_r>:
 80052a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052aa:	2203      	movs	r2, #3
 80052ac:	1ccb      	adds	r3, r1, #3
 80052ae:	4393      	bics	r3, r2
 80052b0:	3308      	adds	r3, #8
 80052b2:	0006      	movs	r6, r0
 80052b4:	001f      	movs	r7, r3
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d238      	bcs.n	800532c <_malloc_r+0x84>
 80052ba:	270c      	movs	r7, #12
 80052bc:	42b9      	cmp	r1, r7
 80052be:	d837      	bhi.n	8005330 <_malloc_r+0x88>
 80052c0:	0030      	movs	r0, r6
 80052c2:	f000 f873 	bl	80053ac <__malloc_lock>
 80052c6:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <_malloc_r+0x100>)
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	001c      	movs	r4, r3
 80052ce:	2c00      	cmp	r4, #0
 80052d0:	d133      	bne.n	800533a <_malloc_r+0x92>
 80052d2:	0039      	movs	r1, r7
 80052d4:	0030      	movs	r0, r6
 80052d6:	f7ff ffc5 	bl	8005264 <sbrk_aligned>
 80052da:	0004      	movs	r4, r0
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d15e      	bne.n	800539e <_malloc_r+0xf6>
 80052e0:	9b00      	ldr	r3, [sp, #0]
 80052e2:	681c      	ldr	r4, [r3, #0]
 80052e4:	0025      	movs	r5, r4
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	d14e      	bne.n	8005388 <_malloc_r+0xe0>
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	d051      	beq.n	8005392 <_malloc_r+0xea>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	0029      	movs	r1, r5
 80052f2:	18e3      	adds	r3, r4, r3
 80052f4:	0030      	movs	r0, r6
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	f000 f9ba 	bl	8005670 <_sbrk_r>
 80052fc:	9b01      	ldr	r3, [sp, #4]
 80052fe:	4283      	cmp	r3, r0
 8005300:	d147      	bne.n	8005392 <_malloc_r+0xea>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	0030      	movs	r0, r6
 8005306:	1aff      	subs	r7, r7, r3
 8005308:	0039      	movs	r1, r7
 800530a:	f7ff ffab 	bl	8005264 <sbrk_aligned>
 800530e:	3001      	adds	r0, #1
 8005310:	d03f      	beq.n	8005392 <_malloc_r+0xea>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	19db      	adds	r3, r3, r7
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	9b00      	ldr	r3, [sp, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d040      	beq.n	80053a2 <_malloc_r+0xfa>
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	42a2      	cmp	r2, r4
 8005324:	d133      	bne.n	800538e <_malloc_r+0xe6>
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	e014      	b.n	8005356 <_malloc_r+0xae>
 800532c:	2b00      	cmp	r3, #0
 800532e:	dac5      	bge.n	80052bc <_malloc_r+0x14>
 8005330:	230c      	movs	r3, #12
 8005332:	2500      	movs	r5, #0
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	0028      	movs	r0, r5
 8005338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800533a:	6821      	ldr	r1, [r4, #0]
 800533c:	1bc9      	subs	r1, r1, r7
 800533e:	d420      	bmi.n	8005382 <_malloc_r+0xda>
 8005340:	290b      	cmp	r1, #11
 8005342:	d918      	bls.n	8005376 <_malloc_r+0xce>
 8005344:	19e2      	adds	r2, r4, r7
 8005346:	6027      	str	r7, [r4, #0]
 8005348:	42a3      	cmp	r3, r4
 800534a:	d112      	bne.n	8005372 <_malloc_r+0xca>
 800534c:	9b00      	ldr	r3, [sp, #0]
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	6011      	str	r1, [r2, #0]
 8005354:	6053      	str	r3, [r2, #4]
 8005356:	0030      	movs	r0, r6
 8005358:	0025      	movs	r5, r4
 800535a:	f000 f82f 	bl	80053bc <__malloc_unlock>
 800535e:	2207      	movs	r2, #7
 8005360:	350b      	adds	r5, #11
 8005362:	1d23      	adds	r3, r4, #4
 8005364:	4395      	bics	r5, r2
 8005366:	1aea      	subs	r2, r5, r3
 8005368:	429d      	cmp	r5, r3
 800536a:	d0e4      	beq.n	8005336 <_malloc_r+0x8e>
 800536c:	1b5b      	subs	r3, r3, r5
 800536e:	50a3      	str	r3, [r4, r2]
 8005370:	e7e1      	b.n	8005336 <_malloc_r+0x8e>
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	e7ec      	b.n	8005350 <_malloc_r+0xa8>
 8005376:	6862      	ldr	r2, [r4, #4]
 8005378:	42a3      	cmp	r3, r4
 800537a:	d1d5      	bne.n	8005328 <_malloc_r+0x80>
 800537c:	9b00      	ldr	r3, [sp, #0]
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e7e9      	b.n	8005356 <_malloc_r+0xae>
 8005382:	0023      	movs	r3, r4
 8005384:	6864      	ldr	r4, [r4, #4]
 8005386:	e7a2      	b.n	80052ce <_malloc_r+0x26>
 8005388:	002c      	movs	r4, r5
 800538a:	686d      	ldr	r5, [r5, #4]
 800538c:	e7ab      	b.n	80052e6 <_malloc_r+0x3e>
 800538e:	0013      	movs	r3, r2
 8005390:	e7c4      	b.n	800531c <_malloc_r+0x74>
 8005392:	230c      	movs	r3, #12
 8005394:	0030      	movs	r0, r6
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	f000 f810 	bl	80053bc <__malloc_unlock>
 800539c:	e7cb      	b.n	8005336 <_malloc_r+0x8e>
 800539e:	6027      	str	r7, [r4, #0]
 80053a0:	e7d9      	b.n	8005356 <_malloc_r+0xae>
 80053a2:	605b      	str	r3, [r3, #4]
 80053a4:	deff      	udf	#255	; 0xff
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	200003c0 	.word	0x200003c0

080053ac <__malloc_lock>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4802      	ldr	r0, [pc, #8]	; (80053b8 <__malloc_lock+0xc>)
 80053b0:	f000 f9af 	bl	8005712 <__retarget_lock_acquire_recursive>
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	20000508 	.word	0x20000508

080053bc <__malloc_unlock>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4802      	ldr	r0, [pc, #8]	; (80053c8 <__malloc_unlock+0xc>)
 80053c0:	f000 f9a8 	bl	8005714 <__retarget_lock_release_recursive>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	20000508 	.word	0x20000508

080053cc <std>:
 80053cc:	2300      	movs	r3, #0
 80053ce:	b510      	push	{r4, lr}
 80053d0:	0004      	movs	r4, r0
 80053d2:	6003      	str	r3, [r0, #0]
 80053d4:	6043      	str	r3, [r0, #4]
 80053d6:	6083      	str	r3, [r0, #8]
 80053d8:	8181      	strh	r1, [r0, #12]
 80053da:	6643      	str	r3, [r0, #100]	; 0x64
 80053dc:	81c2      	strh	r2, [r0, #14]
 80053de:	6103      	str	r3, [r0, #16]
 80053e0:	6143      	str	r3, [r0, #20]
 80053e2:	6183      	str	r3, [r0, #24]
 80053e4:	0019      	movs	r1, r3
 80053e6:	2208      	movs	r2, #8
 80053e8:	305c      	adds	r0, #92	; 0x5c
 80053ea:	f000 f8ff 	bl	80055ec <memset>
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <std+0x50>)
 80053f0:	6224      	str	r4, [r4, #32]
 80053f2:	6263      	str	r3, [r4, #36]	; 0x24
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <std+0x54>)
 80053f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <std+0x58>)
 80053fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <std+0x5c>)
 80053fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <std+0x60>)
 8005402:	429c      	cmp	r4, r3
 8005404:	d005      	beq.n	8005412 <std+0x46>
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <std+0x64>)
 8005408:	429c      	cmp	r4, r3
 800540a:	d002      	beq.n	8005412 <std+0x46>
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <std+0x68>)
 800540e:	429c      	cmp	r4, r3
 8005410:	d103      	bne.n	800541a <std+0x4e>
 8005412:	0020      	movs	r0, r4
 8005414:	3058      	adds	r0, #88	; 0x58
 8005416:	f000 f97b 	bl	8005710 <__retarget_lock_init_recursive>
 800541a:	bd10      	pop	{r4, pc}
 800541c:	08005555 	.word	0x08005555
 8005420:	0800557d 	.word	0x0800557d
 8005424:	080055b5 	.word	0x080055b5
 8005428:	080055e1 	.word	0x080055e1
 800542c:	200003c8 	.word	0x200003c8
 8005430:	20000430 	.word	0x20000430
 8005434:	20000498 	.word	0x20000498

08005438 <stdio_exit_handler>:
 8005438:	b510      	push	{r4, lr}
 800543a:	4a03      	ldr	r2, [pc, #12]	; (8005448 <stdio_exit_handler+0x10>)
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <stdio_exit_handler+0x14>)
 800543e:	4804      	ldr	r0, [pc, #16]	; (8005450 <stdio_exit_handler+0x18>)
 8005440:	f000 f86c 	bl	800551c <_fwalk_sglue>
 8005444:	bd10      	pop	{r4, pc}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	20000014 	.word	0x20000014
 800544c:	080058d1 	.word	0x080058d1
 8005450:	20000020 	.word	0x20000020

08005454 <cleanup_stdio>:
 8005454:	6841      	ldr	r1, [r0, #4]
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <cleanup_stdio+0x30>)
 8005458:	b510      	push	{r4, lr}
 800545a:	0004      	movs	r4, r0
 800545c:	4299      	cmp	r1, r3
 800545e:	d001      	beq.n	8005464 <cleanup_stdio+0x10>
 8005460:	f000 fa36 	bl	80058d0 <_fflush_r>
 8005464:	68a1      	ldr	r1, [r4, #8]
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <cleanup_stdio+0x34>)
 8005468:	4299      	cmp	r1, r3
 800546a:	d002      	beq.n	8005472 <cleanup_stdio+0x1e>
 800546c:	0020      	movs	r0, r4
 800546e:	f000 fa2f 	bl	80058d0 <_fflush_r>
 8005472:	68e1      	ldr	r1, [r4, #12]
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <cleanup_stdio+0x38>)
 8005476:	4299      	cmp	r1, r3
 8005478:	d002      	beq.n	8005480 <cleanup_stdio+0x2c>
 800547a:	0020      	movs	r0, r4
 800547c:	f000 fa28 	bl	80058d0 <_fflush_r>
 8005480:	bd10      	pop	{r4, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	200003c8 	.word	0x200003c8
 8005488:	20000430 	.word	0x20000430
 800548c:	20000498 	.word	0x20000498

08005490 <global_stdio_init.part.0>:
 8005490:	b510      	push	{r4, lr}
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <global_stdio_init.part.0+0x28>)
 8005494:	4a09      	ldr	r2, [pc, #36]	; (80054bc <global_stdio_init.part.0+0x2c>)
 8005496:	2104      	movs	r1, #4
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	4809      	ldr	r0, [pc, #36]	; (80054c0 <global_stdio_init.part.0+0x30>)
 800549c:	2200      	movs	r2, #0
 800549e:	f7ff ff95 	bl	80053cc <std>
 80054a2:	2201      	movs	r2, #1
 80054a4:	2109      	movs	r1, #9
 80054a6:	4807      	ldr	r0, [pc, #28]	; (80054c4 <global_stdio_init.part.0+0x34>)
 80054a8:	f7ff ff90 	bl	80053cc <std>
 80054ac:	2202      	movs	r2, #2
 80054ae:	2112      	movs	r1, #18
 80054b0:	4805      	ldr	r0, [pc, #20]	; (80054c8 <global_stdio_init.part.0+0x38>)
 80054b2:	f7ff ff8b 	bl	80053cc <std>
 80054b6:	bd10      	pop	{r4, pc}
 80054b8:	20000500 	.word	0x20000500
 80054bc:	08005439 	.word	0x08005439
 80054c0:	200003c8 	.word	0x200003c8
 80054c4:	20000430 	.word	0x20000430
 80054c8:	20000498 	.word	0x20000498

080054cc <__sfp_lock_acquire>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	4802      	ldr	r0, [pc, #8]	; (80054d8 <__sfp_lock_acquire+0xc>)
 80054d0:	f000 f91f 	bl	8005712 <__retarget_lock_acquire_recursive>
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	20000509 	.word	0x20000509

080054dc <__sfp_lock_release>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4802      	ldr	r0, [pc, #8]	; (80054e8 <__sfp_lock_release+0xc>)
 80054e0:	f000 f918 	bl	8005714 <__retarget_lock_release_recursive>
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	20000509 	.word	0x20000509

080054ec <__sinit>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	0004      	movs	r4, r0
 80054f0:	f7ff ffec 	bl	80054cc <__sfp_lock_acquire>
 80054f4:	6a23      	ldr	r3, [r4, #32]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <__sinit+0x14>
 80054fa:	f7ff ffef 	bl	80054dc <__sfp_lock_release>
 80054fe:	bd10      	pop	{r4, pc}
 8005500:	4b04      	ldr	r3, [pc, #16]	; (8005514 <__sinit+0x28>)
 8005502:	6223      	str	r3, [r4, #32]
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <__sinit+0x2c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f6      	bne.n	80054fa <__sinit+0xe>
 800550c:	f7ff ffc0 	bl	8005490 <global_stdio_init.part.0>
 8005510:	e7f3      	b.n	80054fa <__sinit+0xe>
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	08005455 	.word	0x08005455
 8005518:	20000500 	.word	0x20000500

0800551c <_fwalk_sglue>:
 800551c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800551e:	0014      	movs	r4, r2
 8005520:	2600      	movs	r6, #0
 8005522:	9000      	str	r0, [sp, #0]
 8005524:	9101      	str	r1, [sp, #4]
 8005526:	68a5      	ldr	r5, [r4, #8]
 8005528:	6867      	ldr	r7, [r4, #4]
 800552a:	3f01      	subs	r7, #1
 800552c:	d504      	bpl.n	8005538 <_fwalk_sglue+0x1c>
 800552e:	6824      	ldr	r4, [r4, #0]
 8005530:	2c00      	cmp	r4, #0
 8005532:	d1f8      	bne.n	8005526 <_fwalk_sglue+0xa>
 8005534:	0030      	movs	r0, r6
 8005536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005538:	89ab      	ldrh	r3, [r5, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d908      	bls.n	8005550 <_fwalk_sglue+0x34>
 800553e:	220e      	movs	r2, #14
 8005540:	5eab      	ldrsh	r3, [r5, r2]
 8005542:	3301      	adds	r3, #1
 8005544:	d004      	beq.n	8005550 <_fwalk_sglue+0x34>
 8005546:	0029      	movs	r1, r5
 8005548:	9800      	ldr	r0, [sp, #0]
 800554a:	9b01      	ldr	r3, [sp, #4]
 800554c:	4798      	blx	r3
 800554e:	4306      	orrs	r6, r0
 8005550:	3568      	adds	r5, #104	; 0x68
 8005552:	e7ea      	b.n	800552a <_fwalk_sglue+0xe>

08005554 <__sread>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	000c      	movs	r4, r1
 8005558:	250e      	movs	r5, #14
 800555a:	5f49      	ldrsh	r1, [r1, r5]
 800555c:	f000 f874 	bl	8005648 <_read_r>
 8005560:	2800      	cmp	r0, #0
 8005562:	db03      	blt.n	800556c <__sread+0x18>
 8005564:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005566:	181b      	adds	r3, r3, r0
 8005568:	6563      	str	r3, [r4, #84]	; 0x54
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	4a02      	ldr	r2, [pc, #8]	; (8005578 <__sread+0x24>)
 8005570:	4013      	ands	r3, r2
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	e7f9      	b.n	800556a <__sread+0x16>
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	ffffefff 	.word	0xffffefff

0800557c <__swrite>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	001f      	movs	r7, r3
 8005580:	898b      	ldrh	r3, [r1, #12]
 8005582:	0005      	movs	r5, r0
 8005584:	000c      	movs	r4, r1
 8005586:	0016      	movs	r6, r2
 8005588:	05db      	lsls	r3, r3, #23
 800558a:	d505      	bpl.n	8005598 <__swrite+0x1c>
 800558c:	230e      	movs	r3, #14
 800558e:	5ec9      	ldrsh	r1, [r1, r3]
 8005590:	2200      	movs	r2, #0
 8005592:	2302      	movs	r3, #2
 8005594:	f000 f844 	bl	8005620 <_lseek_r>
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	4a05      	ldr	r2, [pc, #20]	; (80055b0 <__swrite+0x34>)
 800559c:	0028      	movs	r0, r5
 800559e:	4013      	ands	r3, r2
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	0032      	movs	r2, r6
 80055a4:	230e      	movs	r3, #14
 80055a6:	5ee1      	ldrsh	r1, [r4, r3]
 80055a8:	003b      	movs	r3, r7
 80055aa:	f000 f873 	bl	8005694 <_write_r>
 80055ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b0:	ffffefff 	.word	0xffffefff

080055b4 <__sseek>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	000c      	movs	r4, r1
 80055b8:	250e      	movs	r5, #14
 80055ba:	5f49      	ldrsh	r1, [r1, r5]
 80055bc:	f000 f830 	bl	8005620 <_lseek_r>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	1c42      	adds	r2, r0, #1
 80055c4:	d103      	bne.n	80055ce <__sseek+0x1a>
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <__sseek+0x28>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	0152      	lsls	r2, r2, #5
 80055d2:	4313      	orrs	r3, r2
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	6560      	str	r0, [r4, #84]	; 0x54
 80055d8:	e7f8      	b.n	80055cc <__sseek+0x18>
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	ffffefff 	.word	0xffffefff

080055e0 <__sclose>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	230e      	movs	r3, #14
 80055e4:	5ec9      	ldrsh	r1, [r1, r3]
 80055e6:	f000 f809 	bl	80055fc <_close_r>
 80055ea:	bd10      	pop	{r4, pc}

080055ec <memset>:
 80055ec:	0003      	movs	r3, r0
 80055ee:	1882      	adds	r2, r0, r2
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d100      	bne.n	80055f6 <memset+0xa>
 80055f4:	4770      	bx	lr
 80055f6:	7019      	strb	r1, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	e7f9      	b.n	80055f0 <memset+0x4>

080055fc <_close_r>:
 80055fc:	2300      	movs	r3, #0
 80055fe:	b570      	push	{r4, r5, r6, lr}
 8005600:	4d06      	ldr	r5, [pc, #24]	; (800561c <_close_r+0x20>)
 8005602:	0004      	movs	r4, r0
 8005604:	0008      	movs	r0, r1
 8005606:	602b      	str	r3, [r5, #0]
 8005608:	f7ff fc86 	bl	8004f18 <_close>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d103      	bne.n	8005618 <_close_r+0x1c>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d000      	beq.n	8005618 <_close_r+0x1c>
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	bd70      	pop	{r4, r5, r6, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	20000504 	.word	0x20000504

08005620 <_lseek_r>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	0004      	movs	r4, r0
 8005624:	0008      	movs	r0, r1
 8005626:	0011      	movs	r1, r2
 8005628:	001a      	movs	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	4d05      	ldr	r5, [pc, #20]	; (8005644 <_lseek_r+0x24>)
 800562e:	602b      	str	r3, [r5, #0]
 8005630:	f7ff fc33 	bl	8004e9a <_lseek>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d103      	bne.n	8005640 <_lseek_r+0x20>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d000      	beq.n	8005640 <_lseek_r+0x20>
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	bd70      	pop	{r4, r5, r6, pc}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	20000504 	.word	0x20000504

08005648 <_read_r>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	0004      	movs	r4, r0
 800564c:	0008      	movs	r0, r1
 800564e:	0011      	movs	r1, r2
 8005650:	001a      	movs	r2, r3
 8005652:	2300      	movs	r3, #0
 8005654:	4d05      	ldr	r5, [pc, #20]	; (800566c <_read_r+0x24>)
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	f7ff fbca 	bl	8004df0 <_read>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d103      	bne.n	8005668 <_read_r+0x20>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d000      	beq.n	8005668 <_read_r+0x20>
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	20000504 	.word	0x20000504

08005670 <_sbrk_r>:
 8005670:	2300      	movs	r3, #0
 8005672:	b570      	push	{r4, r5, r6, lr}
 8005674:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_sbrk_r+0x20>)
 8005676:	0004      	movs	r4, r0
 8005678:	0008      	movs	r0, r1
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	f7fb fad6 	bl	8000c2c <_sbrk>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d103      	bne.n	800568c <_sbrk_r+0x1c>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d000      	beq.n	800568c <_sbrk_r+0x1c>
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	20000504 	.word	0x20000504

08005694 <_write_r>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	0004      	movs	r4, r0
 8005698:	0008      	movs	r0, r1
 800569a:	0011      	movs	r1, r2
 800569c:	001a      	movs	r2, r3
 800569e:	2300      	movs	r3, #0
 80056a0:	4d05      	ldr	r5, [pc, #20]	; (80056b8 <_write_r+0x24>)
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7ff fc0d 	bl	8004ec2 <_write>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d103      	bne.n	80056b4 <_write_r+0x20>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d000      	beq.n	80056b4 <_write_r+0x20>
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	20000504 	.word	0x20000504

080056bc <__errno>:
 80056bc:	4b01      	ldr	r3, [pc, #4]	; (80056c4 <__errno+0x8>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	4770      	bx	lr
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	2000006c 	.word	0x2000006c

080056c8 <__libc_init_array>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	2600      	movs	r6, #0
 80056cc:	4c0c      	ldr	r4, [pc, #48]	; (8005700 <__libc_init_array+0x38>)
 80056ce:	4d0d      	ldr	r5, [pc, #52]	; (8005704 <__libc_init_array+0x3c>)
 80056d0:	1b64      	subs	r4, r4, r5
 80056d2:	10a4      	asrs	r4, r4, #2
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	d109      	bne.n	80056ec <__libc_init_array+0x24>
 80056d8:	2600      	movs	r6, #0
 80056da:	f000 f925 	bl	8005928 <_init>
 80056de:	4c0a      	ldr	r4, [pc, #40]	; (8005708 <__libc_init_array+0x40>)
 80056e0:	4d0a      	ldr	r5, [pc, #40]	; (800570c <__libc_init_array+0x44>)
 80056e2:	1b64      	subs	r4, r4, r5
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d105      	bne.n	80056f6 <__libc_init_array+0x2e>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	00b3      	lsls	r3, r6, #2
 80056ee:	58eb      	ldr	r3, [r5, r3]
 80056f0:	4798      	blx	r3
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7ee      	b.n	80056d4 <__libc_init_array+0xc>
 80056f6:	00b3      	lsls	r3, r6, #2
 80056f8:	58eb      	ldr	r3, [r5, r3]
 80056fa:	4798      	blx	r3
 80056fc:	3601      	adds	r6, #1
 80056fe:	e7f2      	b.n	80056e6 <__libc_init_array+0x1e>
 8005700:	08005a90 	.word	0x08005a90
 8005704:	08005a90 	.word	0x08005a90
 8005708:	08005a94 	.word	0x08005a94
 800570c:	08005a90 	.word	0x08005a90

08005710 <__retarget_lock_init_recursive>:
 8005710:	4770      	bx	lr

08005712 <__retarget_lock_acquire_recursive>:
 8005712:	4770      	bx	lr

08005714 <__retarget_lock_release_recursive>:
 8005714:	4770      	bx	lr

08005716 <memcpy>:
 8005716:	2300      	movs	r3, #0
 8005718:	b510      	push	{r4, lr}
 800571a:	429a      	cmp	r2, r3
 800571c:	d100      	bne.n	8005720 <memcpy+0xa>
 800571e:	bd10      	pop	{r4, pc}
 8005720:	5ccc      	ldrb	r4, [r1, r3]
 8005722:	54c4      	strb	r4, [r0, r3]
 8005724:	3301      	adds	r3, #1
 8005726:	e7f8      	b.n	800571a <memcpy+0x4>

08005728 <_free_r>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	0005      	movs	r5, r0
 800572c:	2900      	cmp	r1, #0
 800572e:	d010      	beq.n	8005752 <_free_r+0x2a>
 8005730:	1f0c      	subs	r4, r1, #4
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	da00      	bge.n	800573a <_free_r+0x12>
 8005738:	18e4      	adds	r4, r4, r3
 800573a:	0028      	movs	r0, r5
 800573c:	f7ff fe36 	bl	80053ac <__malloc_lock>
 8005740:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <_free_r+0x90>)
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <_free_r+0x2c>
 8005748:	6063      	str	r3, [r4, #4]
 800574a:	6014      	str	r4, [r2, #0]
 800574c:	0028      	movs	r0, r5
 800574e:	f7ff fe35 	bl	80053bc <__malloc_unlock>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	42a3      	cmp	r3, r4
 8005756:	d908      	bls.n	800576a <_free_r+0x42>
 8005758:	6820      	ldr	r0, [r4, #0]
 800575a:	1821      	adds	r1, r4, r0
 800575c:	428b      	cmp	r3, r1
 800575e:	d1f3      	bne.n	8005748 <_free_r+0x20>
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	1809      	adds	r1, r1, r0
 8005766:	6021      	str	r1, [r4, #0]
 8005768:	e7ee      	b.n	8005748 <_free_r+0x20>
 800576a:	001a      	movs	r2, r3
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <_free_r+0x4e>
 8005772:	42a3      	cmp	r3, r4
 8005774:	d9f9      	bls.n	800576a <_free_r+0x42>
 8005776:	6811      	ldr	r1, [r2, #0]
 8005778:	1850      	adds	r0, r2, r1
 800577a:	42a0      	cmp	r0, r4
 800577c:	d10b      	bne.n	8005796 <_free_r+0x6e>
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	1809      	adds	r1, r1, r0
 8005782:	1850      	adds	r0, r2, r1
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	4283      	cmp	r3, r0
 8005788:	d1e0      	bne.n	800574c <_free_r+0x24>
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	1841      	adds	r1, r0, r1
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	6053      	str	r3, [r2, #4]
 8005794:	e7da      	b.n	800574c <_free_r+0x24>
 8005796:	42a0      	cmp	r0, r4
 8005798:	d902      	bls.n	80057a0 <_free_r+0x78>
 800579a:	230c      	movs	r3, #12
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	e7d5      	b.n	800574c <_free_r+0x24>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	d103      	bne.n	80057b0 <_free_r+0x88>
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	1809      	adds	r1, r1, r0
 80057ae:	6021      	str	r1, [r4, #0]
 80057b0:	6063      	str	r3, [r4, #4]
 80057b2:	6054      	str	r4, [r2, #4]
 80057b4:	e7ca      	b.n	800574c <_free_r+0x24>
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	200003c0 	.word	0x200003c0

080057bc <__sflush_r>:
 80057bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057be:	898b      	ldrh	r3, [r1, #12]
 80057c0:	0005      	movs	r5, r0
 80057c2:	000c      	movs	r4, r1
 80057c4:	071a      	lsls	r2, r3, #28
 80057c6:	d45c      	bmi.n	8005882 <__sflush_r+0xc6>
 80057c8:	684a      	ldr	r2, [r1, #4]
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	dc04      	bgt.n	80057d8 <__sflush_r+0x1c>
 80057ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	dc01      	bgt.n	80057d8 <__sflush_r+0x1c>
 80057d4:	2000      	movs	r0, #0
 80057d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80057da:	2f00      	cmp	r7, #0
 80057dc:	d0fa      	beq.n	80057d4 <__sflush_r+0x18>
 80057de:	2200      	movs	r2, #0
 80057e0:	2080      	movs	r0, #128	; 0x80
 80057e2:	682e      	ldr	r6, [r5, #0]
 80057e4:	602a      	str	r2, [r5, #0]
 80057e6:	001a      	movs	r2, r3
 80057e8:	0140      	lsls	r0, r0, #5
 80057ea:	6a21      	ldr	r1, [r4, #32]
 80057ec:	4002      	ands	r2, r0
 80057ee:	4203      	tst	r3, r0
 80057f0:	d034      	beq.n	800585c <__sflush_r+0xa0>
 80057f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	075b      	lsls	r3, r3, #29
 80057f8:	d506      	bpl.n	8005808 <__sflush_r+0x4c>
 80057fa:	6863      	ldr	r3, [r4, #4]
 80057fc:	1ac0      	subs	r0, r0, r3
 80057fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <__sflush_r+0x4c>
 8005804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005806:	1ac0      	subs	r0, r0, r3
 8005808:	0002      	movs	r2, r0
 800580a:	2300      	movs	r3, #0
 800580c:	0028      	movs	r0, r5
 800580e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005810:	6a21      	ldr	r1, [r4, #32]
 8005812:	47b8      	blx	r7
 8005814:	89a2      	ldrh	r2, [r4, #12]
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	d106      	bne.n	8005828 <__sflush_r+0x6c>
 800581a:	6829      	ldr	r1, [r5, #0]
 800581c:	291d      	cmp	r1, #29
 800581e:	d82c      	bhi.n	800587a <__sflush_r+0xbe>
 8005820:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <__sflush_r+0x110>)
 8005822:	410b      	asrs	r3, r1
 8005824:	07db      	lsls	r3, r3, #31
 8005826:	d428      	bmi.n	800587a <__sflush_r+0xbe>
 8005828:	2300      	movs	r3, #0
 800582a:	6063      	str	r3, [r4, #4]
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	04d2      	lsls	r2, r2, #19
 8005832:	d505      	bpl.n	8005840 <__sflush_r+0x84>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <__sflush_r+0x82>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d100      	bne.n	8005840 <__sflush_r+0x84>
 800583e:	6560      	str	r0, [r4, #84]	; 0x54
 8005840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005842:	602e      	str	r6, [r5, #0]
 8005844:	2900      	cmp	r1, #0
 8005846:	d0c5      	beq.n	80057d4 <__sflush_r+0x18>
 8005848:	0023      	movs	r3, r4
 800584a:	3344      	adds	r3, #68	; 0x44
 800584c:	4299      	cmp	r1, r3
 800584e:	d002      	beq.n	8005856 <__sflush_r+0x9a>
 8005850:	0028      	movs	r0, r5
 8005852:	f7ff ff69 	bl	8005728 <_free_r>
 8005856:	2000      	movs	r0, #0
 8005858:	6360      	str	r0, [r4, #52]	; 0x34
 800585a:	e7bc      	b.n	80057d6 <__sflush_r+0x1a>
 800585c:	2301      	movs	r3, #1
 800585e:	0028      	movs	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d1c6      	bne.n	80057f4 <__sflush_r+0x38>
 8005866:	682b      	ldr	r3, [r5, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0c3      	beq.n	80057f4 <__sflush_r+0x38>
 800586c:	2b1d      	cmp	r3, #29
 800586e:	d001      	beq.n	8005874 <__sflush_r+0xb8>
 8005870:	2b16      	cmp	r3, #22
 8005872:	d101      	bne.n	8005878 <__sflush_r+0xbc>
 8005874:	602e      	str	r6, [r5, #0]
 8005876:	e7ad      	b.n	80057d4 <__sflush_r+0x18>
 8005878:	89a2      	ldrh	r2, [r4, #12]
 800587a:	2340      	movs	r3, #64	; 0x40
 800587c:	4313      	orrs	r3, r2
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	e7a9      	b.n	80057d6 <__sflush_r+0x1a>
 8005882:	690e      	ldr	r6, [r1, #16]
 8005884:	2e00      	cmp	r6, #0
 8005886:	d0a5      	beq.n	80057d4 <__sflush_r+0x18>
 8005888:	680f      	ldr	r7, [r1, #0]
 800588a:	600e      	str	r6, [r1, #0]
 800588c:	1bba      	subs	r2, r7, r6
 800588e:	9201      	str	r2, [sp, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	079b      	lsls	r3, r3, #30
 8005894:	d100      	bne.n	8005898 <__sflush_r+0xdc>
 8005896:	694a      	ldr	r2, [r1, #20]
 8005898:	60a2      	str	r2, [r4, #8]
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dd99      	ble.n	80057d4 <__sflush_r+0x18>
 80058a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058a2:	0032      	movs	r2, r6
 80058a4:	001f      	movs	r7, r3
 80058a6:	0028      	movs	r0, r5
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	6a21      	ldr	r1, [r4, #32]
 80058ac:	47b8      	blx	r7
 80058ae:	2800      	cmp	r0, #0
 80058b0:	dc06      	bgt.n	80058c0 <__sflush_r+0x104>
 80058b2:	2340      	movs	r3, #64	; 0x40
 80058b4:	2001      	movs	r0, #1
 80058b6:	89a2      	ldrh	r2, [r4, #12]
 80058b8:	4240      	negs	r0, r0
 80058ba:	4313      	orrs	r3, r2
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	e78a      	b.n	80057d6 <__sflush_r+0x1a>
 80058c0:	9b01      	ldr	r3, [sp, #4]
 80058c2:	1836      	adds	r6, r6, r0
 80058c4:	1a1b      	subs	r3, r3, r0
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	e7e7      	b.n	800589a <__sflush_r+0xde>
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	dfbffffe 	.word	0xdfbffffe

080058d0 <_fflush_r>:
 80058d0:	690b      	ldr	r3, [r1, #16]
 80058d2:	b570      	push	{r4, r5, r6, lr}
 80058d4:	0005      	movs	r5, r0
 80058d6:	000c      	movs	r4, r1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <_fflush_r+0x12>
 80058dc:	2500      	movs	r5, #0
 80058de:	0028      	movs	r0, r5
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d004      	beq.n	80058f0 <_fflush_r+0x20>
 80058e6:	6a03      	ldr	r3, [r0, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <_fflush_r+0x20>
 80058ec:	f7ff fdfe 	bl	80054ec <__sinit>
 80058f0:	220c      	movs	r2, #12
 80058f2:	5ea3      	ldrsh	r3, [r4, r2]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f1      	beq.n	80058dc <_fflush_r+0xc>
 80058f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058fa:	07d2      	lsls	r2, r2, #31
 80058fc:	d404      	bmi.n	8005908 <_fflush_r+0x38>
 80058fe:	059b      	lsls	r3, r3, #22
 8005900:	d402      	bmi.n	8005908 <_fflush_r+0x38>
 8005902:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005904:	f7ff ff05 	bl	8005712 <__retarget_lock_acquire_recursive>
 8005908:	0028      	movs	r0, r5
 800590a:	0021      	movs	r1, r4
 800590c:	f7ff ff56 	bl	80057bc <__sflush_r>
 8005910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005912:	0005      	movs	r5, r0
 8005914:	07db      	lsls	r3, r3, #31
 8005916:	d4e2      	bmi.n	80058de <_fflush_r+0xe>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	059b      	lsls	r3, r3, #22
 800591c:	d4df      	bmi.n	80058de <_fflush_r+0xe>
 800591e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005920:	f7ff fef8 	bl	8005714 <__retarget_lock_release_recursive>
 8005924:	e7db      	b.n	80058de <_fflush_r+0xe>
	...

08005928 <_init>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592e:	bc08      	pop	{r3}
 8005930:	469e      	mov	lr, r3
 8005932:	4770      	bx	lr

08005934 <_fini>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr
